
M4N3D_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058c4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005a4c  08005a4c  00015a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b08  08005b08  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005b08  08005b08  00015b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b10  08005b10  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b10  08005b10  00015b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b14  08005b14  00015b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005b18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000070  08005b88  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08005b88  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c47  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000266c  00000000  00000000  00031ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  00034358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d90  00000000  00000000  000351e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000294d8  00000000  00000000  00035f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d9f  00000000  00000000  0005f448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fed7a  00000000  00000000  000701e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016ef61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042d4  00000000  00000000  0016efb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005a34 	.word	0x08005a34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08005a34 	.word	0x08005a34

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, unsigned char *ptr, int len)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, ptr, len, 50);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	b29a      	uxth	r2, r3
 80004dc:	2332      	movs	r3, #50	; 0x32
 80004de:	68b9      	ldr	r1, [r7, #8]
 80004e0:	4803      	ldr	r0, [pc, #12]	; (80004f0 <_write+0x24>)
 80004e2:	f003 fc29 	bl	8003d38 <HAL_UART_Transmit>
	return len;
 80004e6:	687b      	ldr	r3, [r7, #4]
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000174 	.word	0x20000174

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fcc0 	bl	8000e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f824 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f95a 	bl	80007b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000504:	f000 f928 	bl	8000758 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000508:	f000 f870 	bl	80005ec <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800050c:	f000 f8f4 	bl	80006f8 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(1000);
 8000510:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000514:	f000 fd2e 	bl	8000f74 <HAL_Delay>
  printf("System started\r\n");
 8000518:	480a      	ldr	r0, [pc, #40]	; (8000544 <main+0x50>)
 800051a:	f004 fdfb 	bl	8005114 <puts>


  while (1)
  {
	//test move
	SRV_move(3, 0, 200);
 800051e:	22c8      	movs	r2, #200	; 0xc8
 8000520:	2100      	movs	r1, #0
 8000522:	2003      	movs	r0, #3
 8000524:	f000 f9ee 	bl	8000904 <SRV_move>
	HAL_Delay(1000);
 8000528:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800052c:	f000 fd22 	bl	8000f74 <HAL_Delay>
	SRV_move(3, 50, 200);
 8000530:	22c8      	movs	r2, #200	; 0xc8
 8000532:	2132      	movs	r1, #50	; 0x32
 8000534:	2003      	movs	r0, #3
 8000536:	f000 f9e5 	bl	8000904 <SRV_move>
	HAL_Delay(1000);
 800053a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800053e:	f000 fd19 	bl	8000f74 <HAL_Delay>
	SRV_move(3, 0, 200);
 8000542:	e7ec      	b.n	800051e <main+0x2a>
 8000544:	08005a4c 	.word	0x08005a4c

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b096      	sub	sp, #88	; 0x58
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0314 	add.w	r3, r7, #20
 8000552:	2244      	movs	r2, #68	; 0x44
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f004 fd66 	bl	8005028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	463b      	mov	r3, r7
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800056a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800056e:	f002 f82d 	bl	80025cc <HAL_PWREx_ControlVoltageScaling>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000578:	f000 f9a4 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000584:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000586:	2310      	movs	r3, #16
 8000588:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058e:	2302      	movs	r3, #2
 8000590:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000592:	2301      	movs	r3, #1
 8000594:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000596:	230a      	movs	r3, #10
 8000598:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800059a:	2307      	movs	r3, #7
 800059c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	4618      	mov	r0, r3
 80005ac:	f002 f864 	bl	8002678 <HAL_RCC_OscConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005b6:	f000 f985 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ba:	230f      	movs	r3, #15
 80005bc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005be:	2303      	movs	r3, #3
 80005c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ce:	463b      	mov	r3, r7
 80005d0:	2104      	movs	r1, #4
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 fc2c 	bl	8002e30 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005de:	f000 f971 	bl	80008c4 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3758      	adds	r7, #88	; 0x58
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	; 0x28
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
 800060c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800060e:	4b36      	ldr	r3, [pc, #216]	; (80006e8 <MX_ADC1_Init+0xfc>)
 8000610:	4a36      	ldr	r2, [pc, #216]	; (80006ec <MX_ADC1_Init+0x100>)
 8000612:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000614:	4b34      	ldr	r3, [pc, #208]	; (80006e8 <MX_ADC1_Init+0xfc>)
 8000616:	2200      	movs	r2, #0
 8000618:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061a:	4b33      	ldr	r3, [pc, #204]	; (80006e8 <MX_ADC1_Init+0xfc>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000620:	4b31      	ldr	r3, [pc, #196]	; (80006e8 <MX_ADC1_Init+0xfc>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000626:	4b30      	ldr	r3, [pc, #192]	; (80006e8 <MX_ADC1_Init+0xfc>)
 8000628:	2201      	movs	r2, #1
 800062a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800062c:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <MX_ADC1_Init+0xfc>)
 800062e:	2204      	movs	r2, #4
 8000630:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000632:	4b2d      	ldr	r3, [pc, #180]	; (80006e8 <MX_ADC1_Init+0xfc>)
 8000634:	2200      	movs	r2, #0
 8000636:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000638:	4b2b      	ldr	r3, [pc, #172]	; (80006e8 <MX_ADC1_Init+0xfc>)
 800063a:	2200      	movs	r2, #0
 800063c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 800063e:	4b2a      	ldr	r3, [pc, #168]	; (80006e8 <MX_ADC1_Init+0xfc>)
 8000640:	2202      	movs	r2, #2
 8000642:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <MX_ADC1_Init+0xfc>)
 8000646:	2200      	movs	r2, #0
 8000648:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800064c:	4b26      	ldr	r3, [pc, #152]	; (80006e8 <MX_ADC1_Init+0xfc>)
 800064e:	2200      	movs	r2, #0
 8000650:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000652:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <MX_ADC1_Init+0xfc>)
 8000654:	2200      	movs	r2, #0
 8000656:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000658:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <MX_ADC1_Init+0xfc>)
 800065a:	2200      	movs	r2, #0
 800065c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000660:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <MX_ADC1_Init+0xfc>)
 8000662:	2200      	movs	r2, #0
 8000664:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000666:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <MX_ADC1_Init+0xfc>)
 8000668:	2200      	movs	r2, #0
 800066a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066e:	481e      	ldr	r0, [pc, #120]	; (80006e8 <MX_ADC1_Init+0xfc>)
 8000670:	f000 fe30 	bl	80012d4 <HAL_ADC_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800067a:	f000 f923 	bl	80008c4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	4619      	mov	r1, r3
 8000688:	4817      	ldr	r0, [pc, #92]	; (80006e8 <MX_ADC1_Init+0xfc>)
 800068a:	f001 fb8f 	bl	8001dac <HAL_ADCEx_MultiModeConfigChannel>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000694:	f000 f916 	bl	80008c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_ADC1_Init+0x104>)
 800069a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800069c:	2306      	movs	r3, #6
 800069e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80006a0:	2307      	movs	r3, #7
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006a4:	237f      	movs	r3, #127	; 0x7f
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a8:	2304      	movs	r3, #4
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	4619      	mov	r1, r3
 80006b4:	480c      	ldr	r0, [pc, #48]	; (80006e8 <MX_ADC1_Init+0xfc>)
 80006b6:	f000 ff63 	bl	8001580 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80006c0:	f000 f900 	bl	80008c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006c4:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_ADC1_Init+0x108>)
 80006c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	4619      	mov	r1, r3
 80006d0:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_ADC1_Init+0xfc>)
 80006d2:	f000 ff55 	bl	8001580 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80006dc:	f000 f8f2 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	3728      	adds	r7, #40	; 0x28
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	2000008c 	.word	0x2000008c
 80006ec:	50040000 	.word	0x50040000
 80006f0:	04300002 	.word	0x04300002
 80006f4:	08600004 	.word	0x08600004

080006f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_USART1_UART_Init+0x58>)
 80006fe:	4a15      	ldr	r2, [pc, #84]	; (8000754 <MX_USART1_UART_Init+0x5c>)
 8000700:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8000702:	4b13      	ldr	r3, [pc, #76]	; (8000750 <MX_USART1_UART_Init+0x58>)
 8000704:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000708:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART1_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_USART1_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USART1_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USART1_UART_Init+0x58>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART1_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USART1_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART1_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USART1_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USART1_UART_Init+0x58>)
 800073c:	f003 faa6 	bl	8003c8c <HAL_HalfDuplex_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000746:	f000 f8bd 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200000f0 	.word	0x200000f0
 8000754:	40013800 	.word	0x40013800

08000758 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 800075e:	4a15      	ldr	r2, [pc, #84]	; (80007b4 <MX_USART2_UART_Init+0x5c>)
 8000760:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000768:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 800079c:	f003 fa28 	bl	8003bf0 <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007a6:	f000 f88d 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000174 	.word	0x20000174
 80007b4:	40004400 	.word	0x40004400

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	4b3b      	ldr	r3, [pc, #236]	; (80008bc <MX_GPIO_Init+0x104>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	4a3a      	ldr	r2, [pc, #232]	; (80008bc <MX_GPIO_Init+0x104>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007da:	4b38      	ldr	r3, [pc, #224]	; (80008bc <MX_GPIO_Init+0x104>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	4b35      	ldr	r3, [pc, #212]	; (80008bc <MX_GPIO_Init+0x104>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	4a34      	ldr	r2, [pc, #208]	; (80008bc <MX_GPIO_Init+0x104>)
 80007ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f2:	4b32      	ldr	r3, [pc, #200]	; (80008bc <MX_GPIO_Init+0x104>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	4b2f      	ldr	r3, [pc, #188]	; (80008bc <MX_GPIO_Init+0x104>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	4a2e      	ldr	r2, [pc, #184]	; (80008bc <MX_GPIO_Init+0x104>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080a:	4b2c      	ldr	r3, [pc, #176]	; (80008bc <MX_GPIO_Init+0x104>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b29      	ldr	r3, [pc, #164]	; (80008bc <MX_GPIO_Init+0x104>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	4a28      	ldr	r2, [pc, #160]	; (80008bc <MX_GPIO_Init+0x104>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000822:	4b26      	ldr	r3, [pc, #152]	; (80008bc <MX_GPIO_Init+0x104>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2120      	movs	r1, #32
 8000832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000836:	f001 fea3 	bl	8002580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EFFECTOR_GPIO_Port, EFFECTOR_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2180      	movs	r1, #128	; 0x80
 800083e:	4820      	ldr	r0, [pc, #128]	; (80008c0 <MX_GPIO_Init+0x108>)
 8000840:	f001 fe9e 	bl	8002580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800084a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	4819      	ldr	r0, [pc, #100]	; (80008c0 <MX_GPIO_Init+0x108>)
 800085c:	f001 fce6 	bl	800222c <HAL_GPIO_Init>

  /*Configure GPIO pins : ANALOG_L_SW_Pin ANALOG_R_SW_Pin */
  GPIO_InitStruct.Pin = ANALOG_L_SW_Pin|ANALOG_R_SW_Pin;
 8000860:	2303      	movs	r3, #3
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000876:	f001 fcd9 	bl	800222c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800087a:	2320      	movs	r3, #32
 800087c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000894:	f001 fcca 	bl	800222c <HAL_GPIO_Init>

  /*Configure GPIO pin : EFECTOR_Pin */
  GPIO_InitStruct.Pin = EFFECTOR_Pin;
 8000898:	2380      	movs	r3, #128	; 0x80
 800089a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089c:	2301      	movs	r3, #1
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EFFECTOR_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_GPIO_Init+0x108>)
 80008b0:	f001 fcbc 	bl	800222c <HAL_GPIO_Init>

}
 80008b4:	bf00      	nop
 80008b6:	3728      	adds	r7, #40	; 0x28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40021000 	.word	0x40021000
 80008c0:	48000800 	.word	0x48000800

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008cc:	e7fe      	b.n	80008cc <Error_Handler+0x8>
	...

080008d0 <_SRV_sendPacket>:
#include "servo.h"


void _SRV_sendPacket(uint8_t *packet, uint8_t len )
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	460b      	mov	r3, r1
 80008da:	70fb      	strb	r3, [r7, #3]
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 80008dc:	4808      	ldr	r0, [pc, #32]	; (8000900 <_SRV_sendPacket+0x30>)
 80008de:	f003 fdc1 	bl	8004464 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&huart1, packet , len, 50);
 80008e2:	78fb      	ldrb	r3, [r7, #3]
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	2332      	movs	r3, #50	; 0x32
 80008e8:	6879      	ldr	r1, [r7, #4]
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <_SRV_sendPacket+0x30>)
 80008ec:	f003 fa24 	bl	8003d38 <HAL_UART_Transmit>
	HAL_HalfDuplex_EnableReceiver(&huart1);
 80008f0:	4803      	ldr	r0, [pc, #12]	; (8000900 <_SRV_sendPacket+0x30>)
 80008f2:	f003 fe09 	bl	8004508 <HAL_HalfDuplex_EnableReceiver>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200000f0 	.word	0x200000f0

08000904 <SRV_move>:
	_SRV_sendPacket(packet, len);
}


void SRV_move(uint8_t id, int position, int speed)
{
 8000904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000908:	b08b      	sub	sp, #44	; 0x2c
 800090a:	af00      	add	r7, sp, #0
 800090c:	4603      	mov	r3, r0
 800090e:	60b9      	str	r1, [r7, #8]
 8000910:	607a      	str	r2, [r7, #4]
 8000912:	73fb      	strb	r3, [r7, #15]
 8000914:	466b      	mov	r3, sp
 8000916:	461e      	mov	r6, r3
    uint8_t Position_H,Position_L,Speed_H,Speed_L;
    Position_H = position >> 8;           // 16 bits - 2 x 8 bits variables
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	121b      	asrs	r3, r3, #8
 800091c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    Position_L = position;
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    Speed_H = speed >> 8;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	121b      	asrs	r3, r3, #8
 800092a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    Speed_L = speed;                      // 16 bits - 2 x 8 bits variables
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24


    const uint8_t length = 11;
 8000934:	230b      	movs	r3, #11
 8000936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint8_t packet[length];
 800093a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800093e:	3b01      	subs	r3, #1
 8000940:	61fb      	str	r3, [r7, #28]
 8000942:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000946:	2200      	movs	r2, #0
 8000948:	4698      	mov	r8, r3
 800094a:	4691      	mov	r9, r2
 800094c:	f04f 0200 	mov.w	r2, #0
 8000950:	f04f 0300 	mov.w	r3, #0
 8000954:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000958:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800095c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000960:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000964:	2200      	movs	r2, #0
 8000966:	461c      	mov	r4, r3
 8000968:	4615      	mov	r5, r2
 800096a:	f04f 0200 	mov.w	r2, #0
 800096e:	f04f 0300 	mov.w	r3, #0
 8000972:	00eb      	lsls	r3, r5, #3
 8000974:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000978:	00e2      	lsls	r2, r4, #3
 800097a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800097e:	3307      	adds	r3, #7
 8000980:	08db      	lsrs	r3, r3, #3
 8000982:	00db      	lsls	r3, r3, #3
 8000984:	ebad 0d03 	sub.w	sp, sp, r3
 8000988:	466b      	mov	r3, sp
 800098a:	3300      	adds	r3, #0
 800098c:	61bb      	str	r3, [r7, #24]

	uint8_t Checksum = (~(id + AX_GOAL_SP_LENGTH + AX_WRITE_DATA + AX_GOAL_POSITION_L + Position_L + Position_H + Speed_L + Speed_H)) & 0xFF;
 800098e:	7bfa      	ldrb	r2, [r7, #15]
 8000990:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000994:	4413      	add	r3, r2
 8000996:	b2da      	uxtb	r2, r3
 8000998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800099c:	4413      	add	r3, r2
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80009a4:	4413      	add	r3, r2
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80009ac:	4413      	add	r3, r2
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	3328      	adds	r3, #40	; 0x28
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	43db      	mvns	r3, r3
 80009b6:	75fb      	strb	r3, [r7, #23]

    packet[0] = AX_START;
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	22ff      	movs	r2, #255	; 0xff
 80009bc:	701a      	strb	r2, [r3, #0]
    packet[1] = AX_START;
 80009be:	69bb      	ldr	r3, [r7, #24]
 80009c0:	22ff      	movs	r2, #255	; 0xff
 80009c2:	705a      	strb	r2, [r3, #1]
    packet[2] = id;
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	7bfa      	ldrb	r2, [r7, #15]
 80009c8:	709a      	strb	r2, [r3, #2]
    packet[3] = AX_GOAL_SP_LENGTH;
 80009ca:	69bb      	ldr	r3, [r7, #24]
 80009cc:	2207      	movs	r2, #7
 80009ce:	70da      	strb	r2, [r3, #3]
    packet[4] = AX_WRITE_DATA;
 80009d0:	69bb      	ldr	r3, [r7, #24]
 80009d2:	2203      	movs	r2, #3
 80009d4:	711a      	strb	r2, [r3, #4]
    packet[5] = AX_GOAL_POSITION_L;
 80009d6:	69bb      	ldr	r3, [r7, #24]
 80009d8:	221e      	movs	r2, #30
 80009da:	715a      	strb	r2, [r3, #5]
    packet[6] = Position_L;
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80009e2:	719a      	strb	r2, [r3, #6]
    packet[7] = Position_H;
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80009ea:	71da      	strb	r2, [r3, #7]
    packet[8] = Speed_L;
 80009ec:	69bb      	ldr	r3, [r7, #24]
 80009ee:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80009f2:	721a      	strb	r2, [r3, #8]
    packet[9] = Speed_H;
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80009fa:	725a      	strb	r2, [r3, #9]
    packet[10] = Checksum;
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	7dfa      	ldrb	r2, [r7, #23]
 8000a00:	729a      	strb	r2, [r3, #10]

    _SRV_sendPacket(packet, length);
 8000a02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a06:	4619      	mov	r1, r3
 8000a08:	69b8      	ldr	r0, [r7, #24]
 8000a0a:	f7ff ff61 	bl	80008d0 <_SRV_sendPacket>
 8000a0e:	46b5      	mov	sp, r6
}
 8000a10:	bf00      	nop
 8000a12:	372c      	adds	r7, #44	; 0x2c
 8000a14:	46bd      	mov	sp, r7
 8000a16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08000a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <HAL_MspInit+0x44>)
 8000a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a26:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <HAL_MspInit+0x44>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <HAL_MspInit+0x44>)
 8000a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <HAL_MspInit+0x44>)
 8000a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3e:	4a08      	ldr	r2, [pc, #32]	; (8000a60 <HAL_MspInit+0x44>)
 8000a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a44:	6593      	str	r3, [r2, #88]	; 0x58
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_MspInit+0x44>)
 8000a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40021000 	.word	0x40021000

08000a64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b0ac      	sub	sp, #176	; 0xb0
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	2288      	movs	r2, #136	; 0x88
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f004 facf 	bl	8005028 <memset>
  if(hadc->Instance==ADC1)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a27      	ldr	r2, [pc, #156]	; (8000b2c <HAL_ADC_MspInit+0xc8>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d146      	bne.n	8000b22 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a98:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000aaa:	2308      	movs	r3, #8
 8000aac:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000aae:	2307      	movs	r3, #7
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000aba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000abe:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f002 fbd7 	bl	8003278 <HAL_RCCEx_PeriphCLKConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000ad0:	f7ff fef8 	bl	80008c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ad4:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <HAL_ADC_MspInit+0xcc>)
 8000ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad8:	4a15      	ldr	r2, [pc, #84]	; (8000b30 <HAL_ADC_MspInit+0xcc>)
 8000ada:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ade:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae0:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <HAL_ADC_MspInit+0xcc>)
 8000ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aec:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <HAL_ADC_MspInit+0xcc>)
 8000aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af0:	4a0f      	ldr	r2, [pc, #60]	; (8000b30 <HAL_ADC_MspInit+0xcc>)
 8000af2:	f043 0304 	orr.w	r3, r3, #4
 8000af6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af8:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <HAL_ADC_MspInit+0xcc>)
 8000afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afc:	f003 0304 	and.w	r3, r3, #4
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ANALOG_L_X_Pin|ANALOG_L_Y_Pin|ANALOG_R_X_Pin|ANALOG_R_Y_Pin;
 8000b04:	230f      	movs	r3, #15
 8000b06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b0a:	230b      	movs	r3, #11
 8000b0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b16:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <HAL_ADC_MspInit+0xd0>)
 8000b1e:	f001 fb85 	bl	800222c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b22:	bf00      	nop
 8000b24:	37b0      	adds	r7, #176	; 0xb0
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	50040000 	.word	0x50040000
 8000b30:	40021000 	.word	0x40021000
 8000b34:	48000800 	.word	0x48000800

08000b38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b0ae      	sub	sp, #184	; 0xb8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	2288      	movs	r2, #136	; 0x88
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f004 fa65 	bl	8005028 <memset>
  if(huart->Instance==USART1)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a47      	ldr	r2, [pc, #284]	; (8000c80 <HAL_UART_MspInit+0x148>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d145      	bne.n	8000bf4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	4618      	mov	r0, r3
 8000b76:	f002 fb7f 	bl	8003278 <HAL_RCCEx_PeriphCLKConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b80:	f7ff fea0 	bl	80008c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b84:	4b3f      	ldr	r3, [pc, #252]	; (8000c84 <HAL_UART_MspInit+0x14c>)
 8000b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b88:	4a3e      	ldr	r2, [pc, #248]	; (8000c84 <HAL_UART_MspInit+0x14c>)
 8000b8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8e:	6613      	str	r3, [r2, #96]	; 0x60
 8000b90:	4b3c      	ldr	r3, [pc, #240]	; (8000c84 <HAL_UART_MspInit+0x14c>)
 8000b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b98:	61bb      	str	r3, [r7, #24]
 8000b9a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9c:	4b39      	ldr	r3, [pc, #228]	; (8000c84 <HAL_UART_MspInit+0x14c>)
 8000b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba0:	4a38      	ldr	r2, [pc, #224]	; (8000c84 <HAL_UART_MspInit+0x14c>)
 8000ba2:	f043 0301 	orr.w	r3, r3, #1
 8000ba6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba8:	4b36      	ldr	r3, [pc, #216]	; (8000c84 <HAL_UART_MspInit+0x14c>)
 8000baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bac:	f003 0301 	and.w	r3, r3, #1
 8000bb0:	617b      	str	r3, [r7, #20]
 8000bb2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = SRV_UART_RXTX_Pin;
 8000bb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bbc:	2312      	movs	r3, #18
 8000bbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bce:	2307      	movs	r3, #7
 8000bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(SRV_UART_RXTX_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bde:	f001 fb25 	bl	800222c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2100      	movs	r1, #0
 8000be6:	2025      	movs	r0, #37	; 0x25
 8000be8:	f001 fa6b 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bec:	2025      	movs	r0, #37	; 0x25
 8000bee:	f001 fa84 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bf2:	e040      	b.n	8000c76 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a23      	ldr	r2, [pc, #140]	; (8000c88 <HAL_UART_MspInit+0x150>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d13b      	bne.n	8000c76 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f002 fb34 	bl	8003278 <HAL_RCCEx_PeriphCLKConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8000c16:	f7ff fe55 	bl	80008c4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <HAL_UART_MspInit+0x14c>)
 8000c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1e:	4a19      	ldr	r2, [pc, #100]	; (8000c84 <HAL_UART_MspInit+0x14c>)
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c24:	6593      	str	r3, [r2, #88]	; 0x58
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <HAL_UART_MspInit+0x14c>)
 8000c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <HAL_UART_MspInit+0x14c>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	4a13      	ldr	r2, [pc, #76]	; (8000c84 <HAL_UART_MspInit+0x14c>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <HAL_UART_MspInit+0x14c>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TTY_UART_TX_Pin|TTY_UART_RX_Pin;
 8000c4a:	230c      	movs	r3, #12
 8000c4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c62:	2307      	movs	r3, #7
 8000c64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c72:	f001 fadb 	bl	800222c <HAL_GPIO_Init>
}
 8000c76:	bf00      	nop
 8000c78:	37b8      	adds	r7, #184	; 0xb8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40013800 	.word	0x40013800
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40004400 	.word	0x40004400

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f92c 	bl	8000f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <USART1_IRQHandler+0x10>)
 8000ce6:	f003 f8bb 	bl	8003e60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200000f0 	.word	0x200000f0

08000cf4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	e00a      	b.n	8000d1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d06:	f3af 8000 	nop.w
 8000d0a:	4601      	mov	r1, r0
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	1c5a      	adds	r2, r3, #1
 8000d10:	60ba      	str	r2, [r7, #8]
 8000d12:	b2ca      	uxtb	r2, r1
 8000d14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	697a      	ldr	r2, [r7, #20]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	dbf0      	blt.n	8000d06 <_read+0x12>
	}

return len;
 8000d24:	687b      	ldr	r3, [r7, #4]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
	return -1;
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
 8000d4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d56:	605a      	str	r2, [r3, #4]
	return 0;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <_isatty>:

int _isatty(int file)
{
 8000d66:	b480      	push	{r7}
 8000d68:	b083      	sub	sp, #12
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
	return 1;
 8000d6e:	2301      	movs	r3, #1
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
	return 0;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
	...

08000d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da0:	4a14      	ldr	r2, [pc, #80]	; (8000df4 <_sbrk+0x5c>)
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <_sbrk+0x60>)
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dac:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d102      	bne.n	8000dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <_sbrk+0x64>)
 8000db6:	4a12      	ldr	r2, [pc, #72]	; (8000e00 <_sbrk+0x68>)
 8000db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dba:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d207      	bcs.n	8000dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc8:	f004 f904 	bl	8004fd4 <__errno>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	220c      	movs	r2, #12
 8000dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dd6:	e009      	b.n	8000dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dde:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <_sbrk+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	4a05      	ldr	r2, [pc, #20]	; (8000dfc <_sbrk+0x64>)
 8000de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dea:	68fb      	ldr	r3, [r7, #12]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20018000 	.word	0x20018000
 8000df8:	00000400 	.word	0x00000400
 8000dfc:	200001f8 	.word	0x200001f8
 8000e00:	20000210 	.word	0x20000210

08000e04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <SystemInit+0x20>)
 8000e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0e:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <SystemInit+0x20>)
 8000e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e2c:	f7ff ffea 	bl	8000e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e30:	480c      	ldr	r0, [pc, #48]	; (8000e64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e32:	490d      	ldr	r1, [pc, #52]	; (8000e68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e34:	4a0d      	ldr	r2, [pc, #52]	; (8000e6c <LoopForever+0xe>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e48:	4c0a      	ldr	r4, [pc, #40]	; (8000e74 <LoopForever+0x16>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e56:	f004 f8c3 	bl	8004fe0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e5a:	f7ff fb4b 	bl	80004f4 <main>

08000e5e <LoopForever>:

LoopForever:
    b LoopForever
 8000e5e:	e7fe      	b.n	8000e5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e60:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e68:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e6c:	08005b18 	.word	0x08005b18
  ldr r2, =_sbss
 8000e70:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e74:	20000210 	.word	0x20000210

08000e78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC1_2_IRQHandler>
	...

08000e7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <HAL_Init+0x3c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <HAL_Init+0x3c>)
 8000e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e90:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e92:	2003      	movs	r0, #3
 8000e94:	f001 f90a 	bl	80020ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f000 f80f 	bl	8000ebc <HAL_InitTick>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d002      	beq.n	8000eaa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	71fb      	strb	r3, [r7, #7]
 8000ea8:	e001      	b.n	8000eae <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eaa:	f7ff fdb7 	bl	8000a1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eae:	79fb      	ldrb	r3, [r7, #7]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40022000 	.word	0x40022000

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <HAL_InitTick+0x6c>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d023      	beq.n	8000f18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <HAL_InitTick+0x70>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <HAL_InitTick+0x6c>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f001 f915 	bl	8002116 <HAL_SYSTICK_Config>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10f      	bne.n	8000f12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b0f      	cmp	r3, #15
 8000ef6:	d809      	bhi.n	8000f0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f00:	f001 f8df 	bl	80020c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f04:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <HAL_InitTick+0x74>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	e007      	b.n	8000f1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	73fb      	strb	r3, [r7, #15]
 8000f10:	e004      	b.n	8000f1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	73fb      	strb	r3, [r7, #15]
 8000f16:	e001      	b.n	8000f1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	20000004 	.word	0x20000004

08000f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_IncTick+0x20>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_IncTick+0x24>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4413      	add	r3, r2
 8000f44:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <HAL_IncTick+0x24>)
 8000f46:	6013      	str	r3, [r2, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000008 	.word	0x20000008
 8000f58:	200001fc 	.word	0x200001fc

08000f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <HAL_GetTick+0x14>)
 8000f62:	681b      	ldr	r3, [r3, #0]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	200001fc 	.word	0x200001fc

08000f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f7c:	f7ff ffee 	bl	8000f5c <HAL_GetTick>
 8000f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f8c:	d005      	beq.n	8000f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <HAL_Delay+0x44>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4413      	add	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f9a:	bf00      	nop
 8000f9c:	f7ff ffde 	bl	8000f5c <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d8f7      	bhi.n	8000f9c <HAL_Delay+0x28>
  {
  }
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000008 	.word	0x20000008

08000fbc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
 8000fea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001018:	4618      	mov	r0, r3
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001024:	b480      	push	{r7}
 8001026:	b087      	sub	sp, #28
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
 8001030:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	3360      	adds	r3, #96	; 0x60
 8001036:	461a      	mov	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <LL_ADC_SetOffset+0x44>)
 8001046:	4013      	ands	r3, r2
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800104e:	683a      	ldr	r2, [r7, #0]
 8001050:	430a      	orrs	r2, r1
 8001052:	4313      	orrs	r3, r2
 8001054:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800105c:	bf00      	nop
 800105e:	371c      	adds	r7, #28
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	03fff000 	.word	0x03fff000

0800106c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3360      	adds	r3, #96	; 0x60
 800107a:	461a      	mov	r2, r3
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800108c:	4618      	mov	r0, r3
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001098:	b480      	push	{r7}
 800109a:	b087      	sub	sp, #28
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	3360      	adds	r3, #96	; 0x60
 80010a8:	461a      	mov	r2, r3
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	431a      	orrs	r2, r3
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80010c2:	bf00      	nop
 80010c4:	371c      	adds	r7, #28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010ce:	b480      	push	{r7}
 80010d0:	b087      	sub	sp, #28
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	60f8      	str	r0, [r7, #12]
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	3330      	adds	r3, #48	; 0x30
 80010de:	461a      	mov	r2, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	0a1b      	lsrs	r3, r3, #8
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	f003 030c 	and.w	r3, r3, #12
 80010ea:	4413      	add	r3, r2
 80010ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	f003 031f 	and.w	r3, r3, #31
 80010f8:	211f      	movs	r1, #31
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	401a      	ands	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	0e9b      	lsrs	r3, r3, #26
 8001106:	f003 011f 	and.w	r1, r3, #31
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	f003 031f 	and.w	r3, r3, #31
 8001110:	fa01 f303 	lsl.w	r3, r1, r3
 8001114:	431a      	orrs	r2, r3
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800111a:	bf00      	nop
 800111c:	371c      	adds	r7, #28
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001126:	b480      	push	{r7}
 8001128:	b087      	sub	sp, #28
 800112a:	af00      	add	r7, sp, #0
 800112c:	60f8      	str	r0, [r7, #12]
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	3314      	adds	r3, #20
 8001136:	461a      	mov	r2, r3
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	0e5b      	lsrs	r3, r3, #25
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	4413      	add	r3, r2
 8001144:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	0d1b      	lsrs	r3, r3, #20
 800114e:	f003 031f 	and.w	r3, r3, #31
 8001152:	2107      	movs	r1, #7
 8001154:	fa01 f303 	lsl.w	r3, r1, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	401a      	ands	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	0d1b      	lsrs	r3, r3, #20
 8001160:	f003 031f 	and.w	r3, r3, #31
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	fa01 f303 	lsl.w	r3, r1, r3
 800116a:	431a      	orrs	r2, r3
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001170:	bf00      	nop
 8001172:	371c      	adds	r7, #28
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001194:	43db      	mvns	r3, r3
 8001196:	401a      	ands	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f003 0318 	and.w	r3, r3, #24
 800119e:	4908      	ldr	r1, [pc, #32]	; (80011c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80011a0:	40d9      	lsrs	r1, r3
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	400b      	ands	r3, r1
 80011a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011aa:	431a      	orrs	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80011b2:	bf00      	nop
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	0007ffff 	.word	0x0007ffff

080011c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80011d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	6093      	str	r3, [r2, #8]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011fc:	d101      	bne.n	8001202 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011fe:	2301      	movs	r3, #1
 8001200:	e000      	b.n	8001204 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001220:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001224:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001248:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800124c:	d101      	bne.n	8001252 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b01      	cmp	r3, #1
 8001272:	d101      	bne.n	8001278 <LL_ADC_IsEnabled+0x18>
 8001274:	2301      	movs	r3, #1
 8001276:	e000      	b.n	800127a <LL_ADC_IsEnabled+0x1a>
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	2b04      	cmp	r3, #4
 8001298:	d101      	bne.n	800129e <LL_ADC_REG_IsConversionOngoing+0x18>
 800129a:	2301      	movs	r3, #1
 800129c:	e000      	b.n	80012a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f003 0308 	and.w	r3, r3, #8
 80012bc:	2b08      	cmp	r3, #8
 80012be:	d101      	bne.n	80012c4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80012c0:	2301      	movs	r3, #1
 80012c2:	e000      	b.n	80012c6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b089      	sub	sp, #36	; 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012dc:	2300      	movs	r3, #0
 80012de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e136      	b.n	800155c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d109      	bne.n	8001310 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff fbb1 	bl	8000a64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff67 	bl	80011e8 <LL_ADC_IsDeepPowerDownEnabled>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d004      	beq.n	800132a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff4d 	bl	80011c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ff82 	bl	8001238 <LL_ADC_IsInternalRegulatorEnabled>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d115      	bne.n	8001366 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff ff66 	bl	8001210 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001344:	4b87      	ldr	r3, [pc, #540]	; (8001564 <HAL_ADC_Init+0x290>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	099b      	lsrs	r3, r3, #6
 800134a:	4a87      	ldr	r2, [pc, #540]	; (8001568 <HAL_ADC_Init+0x294>)
 800134c:	fba2 2303 	umull	r2, r3, r2, r3
 8001350:	099b      	lsrs	r3, r3, #6
 8001352:	3301      	adds	r3, #1
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001358:	e002      	b.n	8001360 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	3b01      	subs	r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f9      	bne.n	800135a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff ff64 	bl	8001238 <LL_ADC_IsInternalRegulatorEnabled>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10d      	bne.n	8001392 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800137a:	f043 0210 	orr.w	r2, r3, #16
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001386:	f043 0201 	orr.w	r2, r3, #1
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff ff75 	bl	8001286 <LL_ADC_REG_IsConversionOngoing>
 800139c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a2:	f003 0310 	and.w	r3, r3, #16
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f040 80cf 	bne.w	800154a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f040 80cb 	bne.w	800154a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80013bc:	f043 0202 	orr.w	r2, r3, #2
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff49 	bl	8001260 <LL_ADC_IsEnabled>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d115      	bne.n	8001400 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013d4:	4865      	ldr	r0, [pc, #404]	; (800156c <HAL_ADC_Init+0x298>)
 80013d6:	f7ff ff43 	bl	8001260 <LL_ADC_IsEnabled>
 80013da:	4604      	mov	r4, r0
 80013dc:	4864      	ldr	r0, [pc, #400]	; (8001570 <HAL_ADC_Init+0x29c>)
 80013de:	f7ff ff3f 	bl	8001260 <LL_ADC_IsEnabled>
 80013e2:	4603      	mov	r3, r0
 80013e4:	431c      	orrs	r4, r3
 80013e6:	4863      	ldr	r0, [pc, #396]	; (8001574 <HAL_ADC_Init+0x2a0>)
 80013e8:	f7ff ff3a 	bl	8001260 <LL_ADC_IsEnabled>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4323      	orrs	r3, r4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d105      	bne.n	8001400 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	4619      	mov	r1, r3
 80013fa:	485f      	ldr	r0, [pc, #380]	; (8001578 <HAL_ADC_Init+0x2a4>)
 80013fc:	f7ff fdde 	bl	8000fbc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	7e5b      	ldrb	r3, [r3, #25]
 8001404:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800140a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001410:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001416:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800141e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 3020 	ldrb.w	r3, [r3, #32]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d106      	bne.n	800143c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001432:	3b01      	subs	r3, #1
 8001434:	045b      	lsls	r3, r3, #17
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001440:	2b00      	cmp	r3, #0
 8001442:	d009      	beq.n	8001458 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001448:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001450:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	4b47      	ldr	r3, [pc, #284]	; (800157c <HAL_ADC_Init+0x2a8>)
 8001460:	4013      	ands	r3, r2
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6812      	ldr	r2, [r2, #0]
 8001466:	69b9      	ldr	r1, [r7, #24]
 8001468:	430b      	orrs	r3, r1
 800146a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff08 	bl	8001286 <LL_ADC_REG_IsConversionOngoing>
 8001476:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff15 	bl	80012ac <LL_ADC_INJ_IsConversionOngoing>
 8001482:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d13d      	bne.n	8001506 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d13a      	bne.n	8001506 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001494:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800149c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014ac:	f023 0302 	bic.w	r3, r3, #2
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	69b9      	ldr	r1, [r7, #24]
 80014b6:	430b      	orrs	r3, r1
 80014b8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d118      	bne.n	80014f6 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80014ce:	f023 0304 	bic.w	r3, r3, #4
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014da:	4311      	orrs	r1, r2
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80014e0:	4311      	orrs	r1, r2
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80014e6:	430a      	orrs	r2, r1
 80014e8:	431a      	orrs	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f042 0201 	orr.w	r2, r2, #1
 80014f2:	611a      	str	r2, [r3, #16]
 80014f4:	e007      	b.n	8001506 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	691a      	ldr	r2, [r3, #16]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 0201 	bic.w	r2, r2, #1
 8001504:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d10c      	bne.n	8001528 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	f023 010f 	bic.w	r1, r3, #15
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	1e5a      	subs	r2, r3, #1
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	430a      	orrs	r2, r1
 8001524:	631a      	str	r2, [r3, #48]	; 0x30
 8001526:	e007      	b.n	8001538 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 020f 	bic.w	r2, r2, #15
 8001536:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800153c:	f023 0303 	bic.w	r3, r3, #3
 8001540:	f043 0201 	orr.w	r2, r3, #1
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	655a      	str	r2, [r3, #84]	; 0x54
 8001548:	e007      	b.n	800155a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800154e:	f043 0210 	orr.w	r2, r3, #16
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800155a:	7ffb      	ldrb	r3, [r7, #31]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3724      	adds	r7, #36	; 0x24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd90      	pop	{r4, r7, pc}
 8001564:	20000000 	.word	0x20000000
 8001568:	053e2d63 	.word	0x053e2d63
 800156c:	50040000 	.word	0x50040000
 8001570:	50040100 	.word	0x50040100
 8001574:	50040200 	.word	0x50040200
 8001578:	50040300 	.word	0x50040300
 800157c:	fff0c007 	.word	0xfff0c007

08001580 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b0b6      	sub	sp, #216	; 0xd8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800158a:	2300      	movs	r3, #0
 800158c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800159a:	2b01      	cmp	r3, #1
 800159c:	d101      	bne.n	80015a2 <HAL_ADC_ConfigChannel+0x22>
 800159e:	2302      	movs	r3, #2
 80015a0:	e3c7      	b.n	8001d32 <HAL_ADC_ConfigChannel+0x7b2>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2201      	movs	r2, #1
 80015a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fe69 	bl	8001286 <LL_ADC_REG_IsConversionOngoing>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f040 83a8 	bne.w	8001d0c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b05      	cmp	r3, #5
 80015c2:	d824      	bhi.n	800160e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	3b02      	subs	r3, #2
 80015ca:	2b03      	cmp	r3, #3
 80015cc:	d81b      	bhi.n	8001606 <HAL_ADC_ConfigChannel+0x86>
 80015ce:	a201      	add	r2, pc, #4	; (adr r2, 80015d4 <HAL_ADC_ConfigChannel+0x54>)
 80015d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d4:	080015e5 	.word	0x080015e5
 80015d8:	080015ed 	.word	0x080015ed
 80015dc:	080015f5 	.word	0x080015f5
 80015e0:	080015fd 	.word	0x080015fd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	220c      	movs	r2, #12
 80015e8:	605a      	str	r2, [r3, #4]
          break;
 80015ea:	e011      	b.n	8001610 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	2212      	movs	r2, #18
 80015f0:	605a      	str	r2, [r3, #4]
          break;
 80015f2:	e00d      	b.n	8001610 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	2218      	movs	r2, #24
 80015f8:	605a      	str	r2, [r3, #4]
          break;
 80015fa:	e009      	b.n	8001610 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001602:	605a      	str	r2, [r3, #4]
          break;
 8001604:	e004      	b.n	8001610 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	2206      	movs	r2, #6
 800160a:	605a      	str	r2, [r3, #4]
          break;
 800160c:	e000      	b.n	8001610 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800160e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6818      	ldr	r0, [r3, #0]
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	461a      	mov	r2, r3
 800161e:	f7ff fd56 	bl	80010ce <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fe2d 	bl	8001286 <LL_ADC_REG_IsConversionOngoing>
 800162c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fe39 	bl	80012ac <LL_ADC_INJ_IsConversionOngoing>
 800163a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800163e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001642:	2b00      	cmp	r3, #0
 8001644:	f040 81a6 	bne.w	8001994 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001648:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800164c:	2b00      	cmp	r3, #0
 800164e:	f040 81a1 	bne.w	8001994 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6818      	ldr	r0, [r3, #0]
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	6819      	ldr	r1, [r3, #0]
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	461a      	mov	r2, r3
 8001660:	f7ff fd61 	bl	8001126 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	695a      	ldr	r2, [r3, #20]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	08db      	lsrs	r3, r3, #3
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	2b04      	cmp	r3, #4
 8001684:	d00a      	beq.n	800169c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6818      	ldr	r0, [r3, #0]
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	6919      	ldr	r1, [r3, #16]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001696:	f7ff fcc5 	bl	8001024 <LL_ADC_SetOffset>
 800169a:	e17b      	b.n	8001994 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fce2 	bl	800106c <LL_ADC_GetOffsetChannel>
 80016a8:	4603      	mov	r3, r0
 80016aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10a      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x148>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fcd7 	bl	800106c <LL_ADC_GetOffsetChannel>
 80016be:	4603      	mov	r3, r0
 80016c0:	0e9b      	lsrs	r3, r3, #26
 80016c2:	f003 021f 	and.w	r2, r3, #31
 80016c6:	e01e      	b.n	8001706 <HAL_ADC_ConfigChannel+0x186>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2100      	movs	r1, #0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fccc 	bl	800106c <LL_ADC_GetOffsetChannel>
 80016d4:	4603      	mov	r3, r0
 80016d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80016de:	fa93 f3a3 	rbit	r3, r3
 80016e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80016ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80016f6:	2320      	movs	r3, #32
 80016f8:	e004      	b.n	8001704 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80016fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016fe:	fab3 f383 	clz	r3, r3
 8001702:	b2db      	uxtb	r3, r3
 8001704:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800170e:	2b00      	cmp	r3, #0
 8001710:	d105      	bne.n	800171e <HAL_ADC_ConfigChannel+0x19e>
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	0e9b      	lsrs	r3, r3, #26
 8001718:	f003 031f 	and.w	r3, r3, #31
 800171c:	e018      	b.n	8001750 <HAL_ADC_ConfigChannel+0x1d0>
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001726:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800172a:	fa93 f3a3 	rbit	r3, r3
 800172e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001732:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001736:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800173a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001742:	2320      	movs	r3, #32
 8001744:	e004      	b.n	8001750 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001746:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800174a:	fab3 f383 	clz	r3, r3
 800174e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001750:	429a      	cmp	r2, r3
 8001752:	d106      	bne.n	8001762 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2200      	movs	r2, #0
 800175a:	2100      	movs	r1, #0
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fc9b 	bl	8001098 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2101      	movs	r1, #1
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fc7f 	bl	800106c <LL_ADC_GetOffsetChannel>
 800176e:	4603      	mov	r3, r0
 8001770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001774:	2b00      	cmp	r3, #0
 8001776:	d10a      	bne.n	800178e <HAL_ADC_ConfigChannel+0x20e>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2101      	movs	r1, #1
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fc74 	bl	800106c <LL_ADC_GetOffsetChannel>
 8001784:	4603      	mov	r3, r0
 8001786:	0e9b      	lsrs	r3, r3, #26
 8001788:	f003 021f 	and.w	r2, r3, #31
 800178c:	e01e      	b.n	80017cc <HAL_ADC_ConfigChannel+0x24c>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2101      	movs	r1, #1
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fc69 	bl	800106c <LL_ADC_GetOffsetChannel>
 800179a:	4603      	mov	r3, r0
 800179c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017a4:	fa93 f3a3 	rbit	r3, r3
 80017a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80017ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80017b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80017b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80017bc:	2320      	movs	r3, #32
 80017be:	e004      	b.n	80017ca <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80017c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017c4:	fab3 f383 	clz	r3, r3
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d105      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x264>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	0e9b      	lsrs	r3, r3, #26
 80017de:	f003 031f 	and.w	r3, r3, #31
 80017e2:	e018      	b.n	8001816 <HAL_ADC_ConfigChannel+0x296>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017f0:	fa93 f3a3 	rbit	r3, r3
 80017f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80017f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80017fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001800:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001808:	2320      	movs	r3, #32
 800180a:	e004      	b.n	8001816 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800180c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001810:	fab3 f383 	clz	r3, r3
 8001814:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001816:	429a      	cmp	r2, r3
 8001818:	d106      	bne.n	8001828 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2200      	movs	r2, #0
 8001820:	2101      	movs	r1, #1
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fc38 	bl	8001098 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2102      	movs	r1, #2
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fc1c 	bl	800106c <LL_ADC_GetOffsetChannel>
 8001834:	4603      	mov	r3, r0
 8001836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10a      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x2d4>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2102      	movs	r1, #2
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fc11 	bl	800106c <LL_ADC_GetOffsetChannel>
 800184a:	4603      	mov	r3, r0
 800184c:	0e9b      	lsrs	r3, r3, #26
 800184e:	f003 021f 	and.w	r2, r3, #31
 8001852:	e01e      	b.n	8001892 <HAL_ADC_ConfigChannel+0x312>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2102      	movs	r1, #2
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fc06 	bl	800106c <LL_ADC_GetOffsetChannel>
 8001860:	4603      	mov	r3, r0
 8001862:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001866:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800186a:	fa93 f3a3 	rbit	r3, r3
 800186e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001872:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001876:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800187a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001882:	2320      	movs	r3, #32
 8001884:	e004      	b.n	8001890 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001886:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800188a:	fab3 f383 	clz	r3, r3
 800188e:	b2db      	uxtb	r3, r3
 8001890:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800189a:	2b00      	cmp	r3, #0
 800189c:	d105      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x32a>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	0e9b      	lsrs	r3, r3, #26
 80018a4:	f003 031f 	and.w	r3, r3, #31
 80018a8:	e016      	b.n	80018d8 <HAL_ADC_ConfigChannel+0x358>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80018b6:	fa93 f3a3 	rbit	r3, r3
 80018ba:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80018bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80018c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80018ca:	2320      	movs	r3, #32
 80018cc:	e004      	b.n	80018d8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80018ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018d2:	fab3 f383 	clz	r3, r3
 80018d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018d8:	429a      	cmp	r2, r3
 80018da:	d106      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2200      	movs	r2, #0
 80018e2:	2102      	movs	r1, #2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fbd7 	bl	8001098 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2103      	movs	r1, #3
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fbbb 	bl	800106c <LL_ADC_GetOffsetChannel>
 80018f6:	4603      	mov	r3, r0
 80018f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10a      	bne.n	8001916 <HAL_ADC_ConfigChannel+0x396>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2103      	movs	r1, #3
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fbb0 	bl	800106c <LL_ADC_GetOffsetChannel>
 800190c:	4603      	mov	r3, r0
 800190e:	0e9b      	lsrs	r3, r3, #26
 8001910:	f003 021f 	and.w	r2, r3, #31
 8001914:	e017      	b.n	8001946 <HAL_ADC_ConfigChannel+0x3c6>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2103      	movs	r1, #3
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fba5 	bl	800106c <LL_ADC_GetOffsetChannel>
 8001922:	4603      	mov	r3, r0
 8001924:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001926:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001928:	fa93 f3a3 	rbit	r3, r3
 800192c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800192e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001930:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001932:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001938:	2320      	movs	r3, #32
 800193a:	e003      	b.n	8001944 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800193c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800193e:	fab3 f383 	clz	r3, r3
 8001942:	b2db      	uxtb	r3, r3
 8001944:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800194e:	2b00      	cmp	r3, #0
 8001950:	d105      	bne.n	800195e <HAL_ADC_ConfigChannel+0x3de>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	0e9b      	lsrs	r3, r3, #26
 8001958:	f003 031f 	and.w	r3, r3, #31
 800195c:	e011      	b.n	8001982 <HAL_ADC_ConfigChannel+0x402>
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001964:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001966:	fa93 f3a3 	rbit	r3, r3
 800196a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800196c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800196e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001976:	2320      	movs	r3, #32
 8001978:	e003      	b.n	8001982 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800197a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800197c:	fab3 f383 	clz	r3, r3
 8001980:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001982:	429a      	cmp	r2, r3
 8001984:	d106      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2200      	movs	r2, #0
 800198c:	2103      	movs	r1, #3
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fb82 	bl	8001098 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fc61 	bl	8001260 <LL_ADC_IsEnabled>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f040 813f 	bne.w	8001c24 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6818      	ldr	r0, [r3, #0]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	6819      	ldr	r1, [r3, #0]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	461a      	mov	r2, r3
 80019b4:	f7ff fbe2 	bl	800117c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	4a8e      	ldr	r2, [pc, #568]	; (8001bf8 <HAL_ADC_ConfigChannel+0x678>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	f040 8130 	bne.w	8001c24 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10b      	bne.n	80019ec <HAL_ADC_ConfigChannel+0x46c>
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	0e9b      	lsrs	r3, r3, #26
 80019da:	3301      	adds	r3, #1
 80019dc:	f003 031f 	and.w	r3, r3, #31
 80019e0:	2b09      	cmp	r3, #9
 80019e2:	bf94      	ite	ls
 80019e4:	2301      	movls	r3, #1
 80019e6:	2300      	movhi	r3, #0
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	e019      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x4a0>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019f4:	fa93 f3a3 	rbit	r3, r3
 80019f8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80019fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019fc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80019fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001a04:	2320      	movs	r3, #32
 8001a06:	e003      	b.n	8001a10 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001a08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a0a:	fab3 f383 	clz	r3, r3
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	3301      	adds	r3, #1
 8001a12:	f003 031f 	and.w	r3, r3, #31
 8001a16:	2b09      	cmp	r3, #9
 8001a18:	bf94      	ite	ls
 8001a1a:	2301      	movls	r3, #1
 8001a1c:	2300      	movhi	r3, #0
 8001a1e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d079      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d107      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x4c0>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	0e9b      	lsrs	r3, r3, #26
 8001a36:	3301      	adds	r3, #1
 8001a38:	069b      	lsls	r3, r3, #26
 8001a3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a3e:	e015      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x4ec>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a48:	fa93 f3a3 	rbit	r3, r3
 8001a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a50:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001a58:	2320      	movs	r3, #32
 8001a5a:	e003      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a5e:	fab3 f383 	clz	r3, r3
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	3301      	adds	r3, #1
 8001a66:	069b      	lsls	r3, r3, #26
 8001a68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d109      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x50c>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	0e9b      	lsrs	r3, r3, #26
 8001a7e:	3301      	adds	r3, #1
 8001a80:	f003 031f 	and.w	r3, r3, #31
 8001a84:	2101      	movs	r1, #1
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	e017      	b.n	8001abc <HAL_ADC_ConfigChannel+0x53c>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a94:	fa93 f3a3 	rbit	r3, r3
 8001a98:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a9c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001aa4:	2320      	movs	r3, #32
 8001aa6:	e003      	b.n	8001ab0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001aaa:	fab3 f383 	clz	r3, r3
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	f003 031f 	and.w	r3, r3, #31
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8001abc:	ea42 0103 	orr.w	r1, r2, r3
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d10a      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x562>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	0e9b      	lsrs	r3, r3, #26
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	f003 021f 	and.w	r2, r3, #31
 8001ad8:	4613      	mov	r3, r2
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	4413      	add	r3, r2
 8001ade:	051b      	lsls	r3, r3, #20
 8001ae0:	e018      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x594>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aea:	fa93 f3a3 	rbit	r3, r3
 8001aee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001afa:	2320      	movs	r3, #32
 8001afc:	e003      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b00:	fab3 f383 	clz	r3, r3
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	3301      	adds	r3, #1
 8001b08:	f003 021f 	and.w	r2, r3, #31
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4413      	add	r3, r2
 8001b12:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b14:	430b      	orrs	r3, r1
 8001b16:	e080      	b.n	8001c1a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d107      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x5b4>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	0e9b      	lsrs	r3, r3, #26
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	069b      	lsls	r3, r3, #26
 8001b2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b32:	e015      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x5e0>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b3c:	fa93 f3a3 	rbit	r3, r3
 8001b40:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b44:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001b4c:	2320      	movs	r3, #32
 8001b4e:	e003      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b52:	fab3 f383 	clz	r3, r3
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	3301      	adds	r3, #1
 8001b5a:	069b      	lsls	r3, r3, #26
 8001b5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d109      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x600>
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	0e9b      	lsrs	r3, r3, #26
 8001b72:	3301      	adds	r3, #1
 8001b74:	f003 031f 	and.w	r3, r3, #31
 8001b78:	2101      	movs	r1, #1
 8001b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7e:	e017      	b.n	8001bb0 <HAL_ADC_ConfigChannel+0x630>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b86:	6a3b      	ldr	r3, [r7, #32]
 8001b88:	fa93 f3a3 	rbit	r3, r3
 8001b8c:	61fb      	str	r3, [r7, #28]
  return result;
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001b98:	2320      	movs	r3, #32
 8001b9a:	e003      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	fab3 f383 	clz	r3, r3
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	f003 031f 	and.w	r3, r3, #31
 8001baa:	2101      	movs	r1, #1
 8001bac:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb0:	ea42 0103 	orr.w	r1, r2, r3
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10d      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x65c>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	0e9b      	lsrs	r3, r3, #26
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	f003 021f 	and.w	r2, r3, #31
 8001bcc:	4613      	mov	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	3b1e      	subs	r3, #30
 8001bd4:	051b      	lsls	r3, r3, #20
 8001bd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bda:	e01d      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x698>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	fa93 f3a3 	rbit	r3, r3
 8001be8:	613b      	str	r3, [r7, #16]
  return result;
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d103      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001bf4:	2320      	movs	r3, #32
 8001bf6:	e005      	b.n	8001c04 <HAL_ADC_ConfigChannel+0x684>
 8001bf8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	fab3 f383 	clz	r3, r3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	3301      	adds	r3, #1
 8001c06:	f003 021f 	and.w	r2, r3, #31
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	4413      	add	r3, r2
 8001c10:	3b1e      	subs	r3, #30
 8001c12:	051b      	lsls	r3, r3, #20
 8001c14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c18:	430b      	orrs	r3, r1
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	6892      	ldr	r2, [r2, #8]
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f7ff fa81 	bl	8001126 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4b44      	ldr	r3, [pc, #272]	; (8001d3c <HAL_ADC_ConfigChannel+0x7bc>)
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d07a      	beq.n	8001d26 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c30:	4843      	ldr	r0, [pc, #268]	; (8001d40 <HAL_ADC_ConfigChannel+0x7c0>)
 8001c32:	f7ff f9e9 	bl	8001008 <LL_ADC_GetCommonPathInternalCh>
 8001c36:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a41      	ldr	r2, [pc, #260]	; (8001d44 <HAL_ADC_ConfigChannel+0x7c4>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d12c      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d126      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a3c      	ldr	r2, [pc, #240]	; (8001d48 <HAL_ADC_ConfigChannel+0x7c8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d004      	beq.n	8001c64 <HAL_ADC_ConfigChannel+0x6e4>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a3b      	ldr	r2, [pc, #236]	; (8001d4c <HAL_ADC_ConfigChannel+0x7cc>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d15d      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4834      	ldr	r0, [pc, #208]	; (8001d40 <HAL_ADC_ConfigChannel+0x7c0>)
 8001c70:	f7ff f9b7 	bl	8000fe2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c74:	4b36      	ldr	r3, [pc, #216]	; (8001d50 <HAL_ADC_ConfigChannel+0x7d0>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	099b      	lsrs	r3, r3, #6
 8001c7a:	4a36      	ldr	r2, [pc, #216]	; (8001d54 <HAL_ADC_ConfigChannel+0x7d4>)
 8001c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c80:	099b      	lsrs	r3, r3, #6
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	4613      	mov	r3, r2
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4413      	add	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c8e:	e002      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1f9      	bne.n	8001c90 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c9c:	e040      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a2d      	ldr	r2, [pc, #180]	; (8001d58 <HAL_ADC_ConfigChannel+0x7d8>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d118      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x75a>
 8001ca8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d112      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a23      	ldr	r2, [pc, #140]	; (8001d48 <HAL_ADC_ConfigChannel+0x7c8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d004      	beq.n	8001cc8 <HAL_ADC_ConfigChannel+0x748>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a22      	ldr	r2, [pc, #136]	; (8001d4c <HAL_ADC_ConfigChannel+0x7cc>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d12d      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ccc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	481b      	ldr	r0, [pc, #108]	; (8001d40 <HAL_ADC_ConfigChannel+0x7c0>)
 8001cd4:	f7ff f985 	bl	8000fe2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cd8:	e024      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a1f      	ldr	r2, [pc, #124]	; (8001d5c <HAL_ADC_ConfigChannel+0x7dc>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d120      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ce4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ce8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d11a      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a14      	ldr	r2, [pc, #80]	; (8001d48 <HAL_ADC_ConfigChannel+0x7c8>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d115      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d02:	4619      	mov	r1, r3
 8001d04:	480e      	ldr	r0, [pc, #56]	; (8001d40 <HAL_ADC_ConfigChannel+0x7c0>)
 8001d06:	f7ff f96c 	bl	8000fe2 <LL_ADC_SetCommonPathInternalCh>
 8001d0a:	e00c      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d10:	f043 0220 	orr.w	r2, r3, #32
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001d1e:	e002      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d20:	bf00      	nop
 8001d22:	e000      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d24:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d2e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	37d8      	adds	r7, #216	; 0xd8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	80080000 	.word	0x80080000
 8001d40:	50040300 	.word	0x50040300
 8001d44:	c7520000 	.word	0xc7520000
 8001d48:	50040000 	.word	0x50040000
 8001d4c:	50040200 	.word	0x50040200
 8001d50:	20000000 	.word	0x20000000
 8001d54:	053e2d63 	.word	0x053e2d63
 8001d58:	cb840000 	.word	0xcb840000
 8001d5c:	80000001 	.word	0x80000001

08001d60 <LL_ADC_IsEnabled>:
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <LL_ADC_IsEnabled+0x18>
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <LL_ADC_IsEnabled+0x1a>
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <LL_ADC_REG_IsConversionOngoing>:
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d101      	bne.n	8001d9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001dac:	b590      	push	{r4, r7, lr}
 8001dae:	b09f      	sub	sp, #124	; 0x7c
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db6:	2300      	movs	r3, #0
 8001db8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d101      	bne.n	8001dca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	e093      	b.n	8001ef2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a47      	ldr	r2, [pc, #284]	; (8001efc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d102      	bne.n	8001dea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001de4:	4b46      	ldr	r3, [pc, #280]	; (8001f00 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	e001      	b.n	8001dee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001dea:	2300      	movs	r3, #0
 8001dec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10b      	bne.n	8001e0c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df8:	f043 0220 	orr.w	r2, r3, #32
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e072      	b.n	8001ef2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff ffb9 	bl	8001d86 <LL_ADC_REG_IsConversionOngoing>
 8001e14:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff ffb3 	bl	8001d86 <LL_ADC_REG_IsConversionOngoing>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d154      	bne.n	8001ed0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001e26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d151      	bne.n	8001ed0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001e2c:	4b35      	ldr	r3, [pc, #212]	; (8001f04 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001e2e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d02c      	beq.n	8001e92 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	6859      	ldr	r1, [r3, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e4a:	035b      	lsls	r3, r3, #13
 8001e4c:	430b      	orrs	r3, r1
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e52:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e54:	4829      	ldr	r0, [pc, #164]	; (8001efc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001e56:	f7ff ff83 	bl	8001d60 <LL_ADC_IsEnabled>
 8001e5a:	4604      	mov	r4, r0
 8001e5c:	4828      	ldr	r0, [pc, #160]	; (8001f00 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001e5e:	f7ff ff7f 	bl	8001d60 <LL_ADC_IsEnabled>
 8001e62:	4603      	mov	r3, r0
 8001e64:	431c      	orrs	r4, r3
 8001e66:	4828      	ldr	r0, [pc, #160]	; (8001f08 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001e68:	f7ff ff7a 	bl	8001d60 <LL_ADC_IsEnabled>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	4323      	orrs	r3, r4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d137      	bne.n	8001ee4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e7c:	f023 030f 	bic.w	r3, r3, #15
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	6811      	ldr	r1, [r2, #0]
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	6892      	ldr	r2, [r2, #8]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e8e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e90:	e028      	b.n	8001ee4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e9c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e9e:	4817      	ldr	r0, [pc, #92]	; (8001efc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001ea0:	f7ff ff5e 	bl	8001d60 <LL_ADC_IsEnabled>
 8001ea4:	4604      	mov	r4, r0
 8001ea6:	4816      	ldr	r0, [pc, #88]	; (8001f00 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001ea8:	f7ff ff5a 	bl	8001d60 <LL_ADC_IsEnabled>
 8001eac:	4603      	mov	r3, r0
 8001eae:	431c      	orrs	r4, r3
 8001eb0:	4815      	ldr	r0, [pc, #84]	; (8001f08 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001eb2:	f7ff ff55 	bl	8001d60 <LL_ADC_IsEnabled>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	4323      	orrs	r3, r4
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d112      	bne.n	8001ee4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001ec6:	f023 030f 	bic.w	r3, r3, #15
 8001eca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001ecc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ece:	e009      	b.n	8001ee4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed4:	f043 0220 	orr.w	r2, r3, #32
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001ee2:	e000      	b.n	8001ee6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ee4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001eee:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	377c      	adds	r7, #124	; 0x7c
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd90      	pop	{r4, r7, pc}
 8001efa:	bf00      	nop
 8001efc:	50040000 	.word	0x50040000
 8001f00:	50040100 	.word	0x50040100
 8001f04:	50040300 	.word	0x50040300
 8001f08:	50040200 	.word	0x50040200

08001f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <__NVIC_SetPriorityGrouping+0x44>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f28:	4013      	ands	r3, r2
 8001f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f3e:	4a04      	ldr	r2, [pc, #16]	; (8001f50 <__NVIC_SetPriorityGrouping+0x44>)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	60d3      	str	r3, [r2, #12]
}
 8001f44:	bf00      	nop
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f58:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <__NVIC_GetPriorityGrouping+0x18>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	0a1b      	lsrs	r3, r3, #8
 8001f5e:	f003 0307 	and.w	r3, r3, #7
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	db0b      	blt.n	8001f9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	f003 021f 	and.w	r2, r3, #31
 8001f88:	4907      	ldr	r1, [pc, #28]	; (8001fa8 <__NVIC_EnableIRQ+0x38>)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	095b      	lsrs	r3, r3, #5
 8001f90:	2001      	movs	r0, #1
 8001f92:	fa00 f202 	lsl.w	r2, r0, r2
 8001f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000e100 	.word	0xe000e100

08001fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	6039      	str	r1, [r7, #0]
 8001fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	db0a      	blt.n	8001fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	490c      	ldr	r1, [pc, #48]	; (8001ff8 <__NVIC_SetPriority+0x4c>)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	0112      	lsls	r2, r2, #4
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	440b      	add	r3, r1
 8001fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd4:	e00a      	b.n	8001fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4908      	ldr	r1, [pc, #32]	; (8001ffc <__NVIC_SetPriority+0x50>)
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	3b04      	subs	r3, #4
 8001fe4:	0112      	lsls	r2, r2, #4
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	440b      	add	r3, r1
 8001fea:	761a      	strb	r2, [r3, #24]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000e100 	.word	0xe000e100
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	; 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f1c3 0307 	rsb	r3, r3, #7
 800201a:	2b04      	cmp	r3, #4
 800201c:	bf28      	it	cs
 800201e:	2304      	movcs	r3, #4
 8002020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3304      	adds	r3, #4
 8002026:	2b06      	cmp	r3, #6
 8002028:	d902      	bls.n	8002030 <NVIC_EncodePriority+0x30>
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3b03      	subs	r3, #3
 800202e:	e000      	b.n	8002032 <NVIC_EncodePriority+0x32>
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002034:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43da      	mvns	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	401a      	ands	r2, r3
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002048:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	fa01 f303 	lsl.w	r3, r1, r3
 8002052:	43d9      	mvns	r1, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	4313      	orrs	r3, r2
         );
}
 800205a:	4618      	mov	r0, r3
 800205c:	3724      	adds	r7, #36	; 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3b01      	subs	r3, #1
 8002074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002078:	d301      	bcc.n	800207e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800207a:	2301      	movs	r3, #1
 800207c:	e00f      	b.n	800209e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207e:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <SysTick_Config+0x40>)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3b01      	subs	r3, #1
 8002084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002086:	210f      	movs	r1, #15
 8002088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800208c:	f7ff ff8e 	bl	8001fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <SysTick_Config+0x40>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002096:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <SysTick_Config+0x40>)
 8002098:	2207      	movs	r2, #7
 800209a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	e000e010 	.word	0xe000e010

080020ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff ff29 	bl	8001f0c <__NVIC_SetPriorityGrouping>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	4603      	mov	r3, r0
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020d4:	f7ff ff3e 	bl	8001f54 <__NVIC_GetPriorityGrouping>
 80020d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	6978      	ldr	r0, [r7, #20]
 80020e0:	f7ff ff8e 	bl	8002000 <NVIC_EncodePriority>
 80020e4:	4602      	mov	r2, r0
 80020e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff5d 	bl	8001fac <__NVIC_SetPriority>
}
 80020f2:	bf00      	nop
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff31 	bl	8001f70 <__NVIC_EnableIRQ>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff ffa2 	bl	8002068 <SysTick_Config>
 8002124:	4603      	mov	r3, r0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800212e:	b480      	push	{r7}
 8002130:	b085      	sub	sp, #20
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002136:	2300      	movs	r3, #0
 8002138:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d008      	beq.n	8002158 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2204      	movs	r2, #4
 800214a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e022      	b.n	800219e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 020e 	bic.w	r2, r2, #14
 8002166:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0201 	bic.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217c:	f003 021c 	and.w	r2, r3, #28
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	2101      	movs	r1, #1
 8002186:	fa01 f202 	lsl.w	r2, r1, r2
 800218a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800219c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b084      	sub	sp, #16
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021b2:	2300      	movs	r3, #0
 80021b4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d005      	beq.n	80021ce <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2204      	movs	r2, #4
 80021c6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
 80021cc:	e029      	b.n	8002222 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 020e 	bic.w	r2, r2, #14
 80021dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0201 	bic.w	r2, r2, #1
 80021ec:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	f003 021c 	and.w	r2, r3, #28
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	2101      	movs	r1, #1
 80021fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002200:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	4798      	blx	r3
    }
  }
  return status;
 8002222:	7bfb      	ldrb	r3, [r7, #15]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800222c:	b480      	push	{r7}
 800222e:	b087      	sub	sp, #28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800223a:	e17f      	b.n	800253c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	2101      	movs	r1, #1
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	fa01 f303 	lsl.w	r3, r1, r3
 8002248:	4013      	ands	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 8171 	beq.w	8002536 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	2b01      	cmp	r3, #1
 800225e:	d005      	beq.n	800226c <HAL_GPIO_Init+0x40>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d130      	bne.n	80022ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	2203      	movs	r2, #3
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4013      	ands	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022a2:	2201      	movs	r2, #1
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4013      	ands	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	091b      	lsrs	r3, r3, #4
 80022b8:	f003 0201 	and.w	r2, r3, #1
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d118      	bne.n	800230c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80022e0:	2201      	movs	r2, #1
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4013      	ands	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	08db      	lsrs	r3, r3, #3
 80022f6:	f003 0201 	and.w	r2, r3, #1
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	2b03      	cmp	r3, #3
 8002316:	d017      	beq.n	8002348 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	2203      	movs	r2, #3
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d123      	bne.n	800239c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	08da      	lsrs	r2, r3, #3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3208      	adds	r2, #8
 800235c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002360:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	220f      	movs	r2, #15
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4013      	ands	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	691a      	ldr	r2, [r3, #16]
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	08da      	lsrs	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3208      	adds	r2, #8
 8002396:	6939      	ldr	r1, [r7, #16]
 8002398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	2203      	movs	r2, #3
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4013      	ands	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 0203 	and.w	r2, r3, #3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 80ac 	beq.w	8002536 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023de:	4b5f      	ldr	r3, [pc, #380]	; (800255c <HAL_GPIO_Init+0x330>)
 80023e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e2:	4a5e      	ldr	r2, [pc, #376]	; (800255c <HAL_GPIO_Init+0x330>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	6613      	str	r3, [r2, #96]	; 0x60
 80023ea:	4b5c      	ldr	r3, [pc, #368]	; (800255c <HAL_GPIO_Init+0x330>)
 80023ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	60bb      	str	r3, [r7, #8]
 80023f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023f6:	4a5a      	ldr	r2, [pc, #360]	; (8002560 <HAL_GPIO_Init+0x334>)
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	089b      	lsrs	r3, r3, #2
 80023fc:	3302      	adds	r3, #2
 80023fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002402:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	220f      	movs	r2, #15
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4013      	ands	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002420:	d025      	beq.n	800246e <HAL_GPIO_Init+0x242>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a4f      	ldr	r2, [pc, #316]	; (8002564 <HAL_GPIO_Init+0x338>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d01f      	beq.n	800246a <HAL_GPIO_Init+0x23e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a4e      	ldr	r2, [pc, #312]	; (8002568 <HAL_GPIO_Init+0x33c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d019      	beq.n	8002466 <HAL_GPIO_Init+0x23a>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a4d      	ldr	r2, [pc, #308]	; (800256c <HAL_GPIO_Init+0x340>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d013      	beq.n	8002462 <HAL_GPIO_Init+0x236>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a4c      	ldr	r2, [pc, #304]	; (8002570 <HAL_GPIO_Init+0x344>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d00d      	beq.n	800245e <HAL_GPIO_Init+0x232>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a4b      	ldr	r2, [pc, #300]	; (8002574 <HAL_GPIO_Init+0x348>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d007      	beq.n	800245a <HAL_GPIO_Init+0x22e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a4a      	ldr	r2, [pc, #296]	; (8002578 <HAL_GPIO_Init+0x34c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d101      	bne.n	8002456 <HAL_GPIO_Init+0x22a>
 8002452:	2306      	movs	r3, #6
 8002454:	e00c      	b.n	8002470 <HAL_GPIO_Init+0x244>
 8002456:	2307      	movs	r3, #7
 8002458:	e00a      	b.n	8002470 <HAL_GPIO_Init+0x244>
 800245a:	2305      	movs	r3, #5
 800245c:	e008      	b.n	8002470 <HAL_GPIO_Init+0x244>
 800245e:	2304      	movs	r3, #4
 8002460:	e006      	b.n	8002470 <HAL_GPIO_Init+0x244>
 8002462:	2303      	movs	r3, #3
 8002464:	e004      	b.n	8002470 <HAL_GPIO_Init+0x244>
 8002466:	2302      	movs	r3, #2
 8002468:	e002      	b.n	8002470 <HAL_GPIO_Init+0x244>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <HAL_GPIO_Init+0x244>
 800246e:	2300      	movs	r3, #0
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	f002 0203 	and.w	r2, r2, #3
 8002476:	0092      	lsls	r2, r2, #2
 8002478:	4093      	lsls	r3, r2
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002480:	4937      	ldr	r1, [pc, #220]	; (8002560 <HAL_GPIO_Init+0x334>)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	089b      	lsrs	r3, r3, #2
 8002486:	3302      	adds	r3, #2
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800248e:	4b3b      	ldr	r3, [pc, #236]	; (800257c <HAL_GPIO_Init+0x350>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	43db      	mvns	r3, r3
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	4013      	ands	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024b2:	4a32      	ldr	r2, [pc, #200]	; (800257c <HAL_GPIO_Init+0x350>)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024b8:	4b30      	ldr	r3, [pc, #192]	; (800257c <HAL_GPIO_Init+0x350>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4013      	ands	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4313      	orrs	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024dc:	4a27      	ldr	r2, [pc, #156]	; (800257c <HAL_GPIO_Init+0x350>)
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024e2:	4b26      	ldr	r3, [pc, #152]	; (800257c <HAL_GPIO_Init+0x350>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4313      	orrs	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002506:	4a1d      	ldr	r2, [pc, #116]	; (800257c <HAL_GPIO_Init+0x350>)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800250c:	4b1b      	ldr	r3, [pc, #108]	; (800257c <HAL_GPIO_Init+0x350>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	43db      	mvns	r3, r3
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4013      	ands	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4313      	orrs	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002530:	4a12      	ldr	r2, [pc, #72]	; (800257c <HAL_GPIO_Init+0x350>)
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	3301      	adds	r3, #1
 800253a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	fa22 f303 	lsr.w	r3, r2, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	f47f ae78 	bne.w	800223c <HAL_GPIO_Init+0x10>
  }
}
 800254c:	bf00      	nop
 800254e:	bf00      	nop
 8002550:	371c      	adds	r7, #28
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40021000 	.word	0x40021000
 8002560:	40010000 	.word	0x40010000
 8002564:	48000400 	.word	0x48000400
 8002568:	48000800 	.word	0x48000800
 800256c:	48000c00 	.word	0x48000c00
 8002570:	48001000 	.word	0x48001000
 8002574:	48001400 	.word	0x48001400
 8002578:	48001800 	.word	0x48001800
 800257c:	40010400 	.word	0x40010400

08002580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	807b      	strh	r3, [r7, #2]
 800258c:	4613      	mov	r3, r2
 800258e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002590:	787b      	ldrb	r3, [r7, #1]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002596:	887a      	ldrh	r2, [r7, #2]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800259c:	e002      	b.n	80025a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800259e:	887a      	ldrh	r2, [r7, #2]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025b4:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80025bc:	4618      	mov	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40007000 	.word	0x40007000

080025cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025da:	d130      	bne.n	800263e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80025dc:	4b23      	ldr	r3, [pc, #140]	; (800266c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025e8:	d038      	beq.n	800265c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025ea:	4b20      	ldr	r3, [pc, #128]	; (800266c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025f2:	4a1e      	ldr	r2, [pc, #120]	; (800266c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025fa:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2232      	movs	r2, #50	; 0x32
 8002600:	fb02 f303 	mul.w	r3, r2, r3
 8002604:	4a1b      	ldr	r2, [pc, #108]	; (8002674 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	0c9b      	lsrs	r3, r3, #18
 800260c:	3301      	adds	r3, #1
 800260e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002610:	e002      	b.n	8002618 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	3b01      	subs	r3, #1
 8002616:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002618:	4b14      	ldr	r3, [pc, #80]	; (800266c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002624:	d102      	bne.n	800262c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f2      	bne.n	8002612 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800262c:	4b0f      	ldr	r3, [pc, #60]	; (800266c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002638:	d110      	bne.n	800265c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e00f      	b.n	800265e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800263e:	4b0b      	ldr	r3, [pc, #44]	; (800266c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800264a:	d007      	beq.n	800265c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800264c:	4b07      	ldr	r3, [pc, #28]	; (800266c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002654:	4a05      	ldr	r2, [pc, #20]	; (800266c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002656:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800265a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40007000 	.word	0x40007000
 8002670:	20000000 	.word	0x20000000
 8002674:	431bde83 	.word	0x431bde83

08002678 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b088      	sub	sp, #32
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e3ca      	b.n	8002e20 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800268a:	4b97      	ldr	r3, [pc, #604]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002694:	4b94      	ldr	r3, [pc, #592]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0310 	and.w	r3, r3, #16
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 80e4 	beq.w	8002874 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d007      	beq.n	80026c2 <HAL_RCC_OscConfig+0x4a>
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	2b0c      	cmp	r3, #12
 80026b6:	f040 808b 	bne.w	80027d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	f040 8087 	bne.w	80027d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026c2:	4b89      	ldr	r3, [pc, #548]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d005      	beq.n	80026da <HAL_RCC_OscConfig+0x62>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e3a2      	b.n	8002e20 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1a      	ldr	r2, [r3, #32]
 80026de:	4b82      	ldr	r3, [pc, #520]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d004      	beq.n	80026f4 <HAL_RCC_OscConfig+0x7c>
 80026ea:	4b7f      	ldr	r3, [pc, #508]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026f2:	e005      	b.n	8002700 <HAL_RCC_OscConfig+0x88>
 80026f4:	4b7c      	ldr	r3, [pc, #496]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 80026f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026fa:	091b      	lsrs	r3, r3, #4
 80026fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002700:	4293      	cmp	r3, r2
 8002702:	d223      	bcs.n	800274c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	4618      	mov	r0, r3
 800270a:	f000 fd55 	bl	80031b8 <RCC_SetFlashLatencyFromMSIRange>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e383      	b.n	8002e20 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002718:	4b73      	ldr	r3, [pc, #460]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a72      	ldr	r2, [pc, #456]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 800271e:	f043 0308 	orr.w	r3, r3, #8
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	4b70      	ldr	r3, [pc, #448]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	496d      	ldr	r1, [pc, #436]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 8002732:	4313      	orrs	r3, r2
 8002734:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002736:	4b6c      	ldr	r3, [pc, #432]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	021b      	lsls	r3, r3, #8
 8002744:	4968      	ldr	r1, [pc, #416]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 8002746:	4313      	orrs	r3, r2
 8002748:	604b      	str	r3, [r1, #4]
 800274a:	e025      	b.n	8002798 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800274c:	4b66      	ldr	r3, [pc, #408]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a65      	ldr	r2, [pc, #404]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 8002752:	f043 0308 	orr.w	r3, r3, #8
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	4b63      	ldr	r3, [pc, #396]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	4960      	ldr	r1, [pc, #384]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 8002766:	4313      	orrs	r3, r2
 8002768:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800276a:	4b5f      	ldr	r3, [pc, #380]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	021b      	lsls	r3, r3, #8
 8002778:	495b      	ldr	r1, [pc, #364]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 800277a:	4313      	orrs	r3, r2
 800277c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d109      	bne.n	8002798 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	4618      	mov	r0, r3
 800278a:	f000 fd15 	bl	80031b8 <RCC_SetFlashLatencyFromMSIRange>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e343      	b.n	8002e20 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002798:	f000 fc4a 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 800279c:	4602      	mov	r2, r0
 800279e:	4b52      	ldr	r3, [pc, #328]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	091b      	lsrs	r3, r3, #4
 80027a4:	f003 030f 	and.w	r3, r3, #15
 80027a8:	4950      	ldr	r1, [pc, #320]	; (80028ec <HAL_RCC_OscConfig+0x274>)
 80027aa:	5ccb      	ldrb	r3, [r1, r3]
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	fa22 f303 	lsr.w	r3, r2, r3
 80027b4:	4a4e      	ldr	r2, [pc, #312]	; (80028f0 <HAL_RCC_OscConfig+0x278>)
 80027b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027b8:	4b4e      	ldr	r3, [pc, #312]	; (80028f4 <HAL_RCC_OscConfig+0x27c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe fb7d 	bl	8000ebc <HAL_InitTick>
 80027c2:	4603      	mov	r3, r0
 80027c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d052      	beq.n	8002872 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	e327      	b.n	8002e20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d032      	beq.n	800283e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027d8:	4b43      	ldr	r3, [pc, #268]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a42      	ldr	r2, [pc, #264]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027e4:	f7fe fbba 	bl	8000f5c <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027ec:	f7fe fbb6 	bl	8000f5c <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e310      	b.n	8002e20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027fe:	4b3a      	ldr	r3, [pc, #232]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f0      	beq.n	80027ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800280a:	4b37      	ldr	r3, [pc, #220]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a36      	ldr	r2, [pc, #216]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 8002810:	f043 0308 	orr.w	r3, r3, #8
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	4b34      	ldr	r3, [pc, #208]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	4931      	ldr	r1, [pc, #196]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 8002824:	4313      	orrs	r3, r2
 8002826:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002828:	4b2f      	ldr	r3, [pc, #188]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	021b      	lsls	r3, r3, #8
 8002836:	492c      	ldr	r1, [pc, #176]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 8002838:	4313      	orrs	r3, r2
 800283a:	604b      	str	r3, [r1, #4]
 800283c:	e01a      	b.n	8002874 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800283e:	4b2a      	ldr	r3, [pc, #168]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a29      	ldr	r2, [pc, #164]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 8002844:	f023 0301 	bic.w	r3, r3, #1
 8002848:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800284a:	f7fe fb87 	bl	8000f5c <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002852:	f7fe fb83 	bl	8000f5c <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e2dd      	b.n	8002e20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002864:	4b20      	ldr	r3, [pc, #128]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1f0      	bne.n	8002852 <HAL_RCC_OscConfig+0x1da>
 8002870:	e000      	b.n	8002874 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002872:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b00      	cmp	r3, #0
 800287e:	d074      	beq.n	800296a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	2b08      	cmp	r3, #8
 8002884:	d005      	beq.n	8002892 <HAL_RCC_OscConfig+0x21a>
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	2b0c      	cmp	r3, #12
 800288a:	d10e      	bne.n	80028aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2b03      	cmp	r3, #3
 8002890:	d10b      	bne.n	80028aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002892:	4b15      	ldr	r3, [pc, #84]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d064      	beq.n	8002968 <HAL_RCC_OscConfig+0x2f0>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d160      	bne.n	8002968 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e2ba      	b.n	8002e20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b2:	d106      	bne.n	80028c2 <HAL_RCC_OscConfig+0x24a>
 80028b4:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a0b      	ldr	r2, [pc, #44]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 80028ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028be:	6013      	str	r3, [r2, #0]
 80028c0:	e026      	b.n	8002910 <HAL_RCC_OscConfig+0x298>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028ca:	d115      	bne.n	80028f8 <HAL_RCC_OscConfig+0x280>
 80028cc:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a05      	ldr	r2, [pc, #20]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 80028d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028d6:	6013      	str	r3, [r2, #0]
 80028d8:	4b03      	ldr	r3, [pc, #12]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a02      	ldr	r2, [pc, #8]	; (80028e8 <HAL_RCC_OscConfig+0x270>)
 80028de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e2:	6013      	str	r3, [r2, #0]
 80028e4:	e014      	b.n	8002910 <HAL_RCC_OscConfig+0x298>
 80028e6:	bf00      	nop
 80028e8:	40021000 	.word	0x40021000
 80028ec:	08005a5c 	.word	0x08005a5c
 80028f0:	20000000 	.word	0x20000000
 80028f4:	20000004 	.word	0x20000004
 80028f8:	4ba0      	ldr	r3, [pc, #640]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a9f      	ldr	r2, [pc, #636]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 80028fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	4b9d      	ldr	r3, [pc, #628]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a9c      	ldr	r2, [pc, #624]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 800290a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800290e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d013      	beq.n	8002940 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7fe fb20 	bl	8000f5c <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002920:	f7fe fb1c 	bl	8000f5c <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b64      	cmp	r3, #100	; 0x64
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e276      	b.n	8002e20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002932:	4b92      	ldr	r3, [pc, #584]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x2a8>
 800293e:	e014      	b.n	800296a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002940:	f7fe fb0c 	bl	8000f5c <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002948:	f7fe fb08 	bl	8000f5c <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b64      	cmp	r3, #100	; 0x64
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e262      	b.n	8002e20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800295a:	4b88      	ldr	r3, [pc, #544]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x2d0>
 8002966:	e000      	b.n	800296a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d060      	beq.n	8002a38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	2b04      	cmp	r3, #4
 800297a:	d005      	beq.n	8002988 <HAL_RCC_OscConfig+0x310>
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	2b0c      	cmp	r3, #12
 8002980:	d119      	bne.n	80029b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2b02      	cmp	r3, #2
 8002986:	d116      	bne.n	80029b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002988:	4b7c      	ldr	r3, [pc, #496]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <HAL_RCC_OscConfig+0x328>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e23f      	b.n	8002e20 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a0:	4b76      	ldr	r3, [pc, #472]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	061b      	lsls	r3, r3, #24
 80029ae:	4973      	ldr	r1, [pc, #460]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029b4:	e040      	b.n	8002a38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d023      	beq.n	8002a06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029be:	4b6f      	ldr	r3, [pc, #444]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a6e      	ldr	r2, [pc, #440]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 80029c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ca:	f7fe fac7 	bl	8000f5c <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029d2:	f7fe fac3 	bl	8000f5c <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e21d      	b.n	8002e20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029e4:	4b65      	ldr	r3, [pc, #404]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0f0      	beq.n	80029d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f0:	4b62      	ldr	r3, [pc, #392]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	061b      	lsls	r3, r3, #24
 80029fe:	495f      	ldr	r1, [pc, #380]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]
 8002a04:	e018      	b.n	8002a38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a06:	4b5d      	ldr	r3, [pc, #372]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a5c      	ldr	r2, [pc, #368]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 8002a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a12:	f7fe faa3 	bl	8000f5c <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a1a:	f7fe fa9f 	bl	8000f5c <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e1f9      	b.n	8002e20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a2c:	4b53      	ldr	r3, [pc, #332]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1f0      	bne.n	8002a1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0308 	and.w	r3, r3, #8
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d03c      	beq.n	8002abe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d01c      	beq.n	8002a86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a4c:	4b4b      	ldr	r3, [pc, #300]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 8002a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a52:	4a4a      	ldr	r2, [pc, #296]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5c:	f7fe fa7e 	bl	8000f5c <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a64:	f7fe fa7a 	bl	8000f5c <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e1d4      	b.n	8002e20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a76:	4b41      	ldr	r3, [pc, #260]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 8002a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0ef      	beq.n	8002a64 <HAL_RCC_OscConfig+0x3ec>
 8002a84:	e01b      	b.n	8002abe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a86:	4b3d      	ldr	r3, [pc, #244]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 8002a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a8c:	4a3b      	ldr	r2, [pc, #236]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 8002a8e:	f023 0301 	bic.w	r3, r3, #1
 8002a92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a96:	f7fe fa61 	bl	8000f5c <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a9e:	f7fe fa5d 	bl	8000f5c <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e1b7      	b.n	8002e20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ab0:	4b32      	ldr	r3, [pc, #200]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 8002ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1ef      	bne.n	8002a9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0304 	and.w	r3, r3, #4
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 80a6 	beq.w	8002c18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002acc:	2300      	movs	r3, #0
 8002ace:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ad0:	4b2a      	ldr	r3, [pc, #168]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 8002ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10d      	bne.n	8002af8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002adc:	4b27      	ldr	r3, [pc, #156]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 8002ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae0:	4a26      	ldr	r2, [pc, #152]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 8002ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ae8:	4b24      	ldr	r3, [pc, #144]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 8002aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af4:	2301      	movs	r3, #1
 8002af6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002af8:	4b21      	ldr	r3, [pc, #132]	; (8002b80 <HAL_RCC_OscConfig+0x508>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d118      	bne.n	8002b36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b04:	4b1e      	ldr	r3, [pc, #120]	; (8002b80 <HAL_RCC_OscConfig+0x508>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a1d      	ldr	r2, [pc, #116]	; (8002b80 <HAL_RCC_OscConfig+0x508>)
 8002b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b10:	f7fe fa24 	bl	8000f5c <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b18:	f7fe fa20 	bl	8000f5c <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e17a      	b.n	8002e20 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b2a:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <HAL_RCC_OscConfig+0x508>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d108      	bne.n	8002b50 <HAL_RCC_OscConfig+0x4d8>
 8002b3e:	4b0f      	ldr	r3, [pc, #60]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b44:	4a0d      	ldr	r2, [pc, #52]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b4e:	e029      	b.n	8002ba4 <HAL_RCC_OscConfig+0x52c>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2b05      	cmp	r3, #5
 8002b56:	d115      	bne.n	8002b84 <HAL_RCC_OscConfig+0x50c>
 8002b58:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 8002b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5e:	4a07      	ldr	r2, [pc, #28]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 8002b60:	f043 0304 	orr.w	r3, r3, #4
 8002b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b68:	4b04      	ldr	r3, [pc, #16]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 8002b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6e:	4a03      	ldr	r2, [pc, #12]	; (8002b7c <HAL_RCC_OscConfig+0x504>)
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b78:	e014      	b.n	8002ba4 <HAL_RCC_OscConfig+0x52c>
 8002b7a:	bf00      	nop
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	40007000 	.word	0x40007000
 8002b84:	4b9c      	ldr	r3, [pc, #624]	; (8002df8 <HAL_RCC_OscConfig+0x780>)
 8002b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8a:	4a9b      	ldr	r2, [pc, #620]	; (8002df8 <HAL_RCC_OscConfig+0x780>)
 8002b8c:	f023 0301 	bic.w	r3, r3, #1
 8002b90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b94:	4b98      	ldr	r3, [pc, #608]	; (8002df8 <HAL_RCC_OscConfig+0x780>)
 8002b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9a:	4a97      	ldr	r2, [pc, #604]	; (8002df8 <HAL_RCC_OscConfig+0x780>)
 8002b9c:	f023 0304 	bic.w	r3, r3, #4
 8002ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d016      	beq.n	8002bda <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bac:	f7fe f9d6 	bl	8000f5c <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bb2:	e00a      	b.n	8002bca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb4:	f7fe f9d2 	bl	8000f5c <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e12a      	b.n	8002e20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bca:	4b8b      	ldr	r3, [pc, #556]	; (8002df8 <HAL_RCC_OscConfig+0x780>)
 8002bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0ed      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x53c>
 8002bd8:	e015      	b.n	8002c06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bda:	f7fe f9bf 	bl	8000f5c <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002be0:	e00a      	b.n	8002bf8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be2:	f7fe f9bb 	bl	8000f5c <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e113      	b.n	8002e20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bf8:	4b7f      	ldr	r3, [pc, #508]	; (8002df8 <HAL_RCC_OscConfig+0x780>)
 8002bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1ed      	bne.n	8002be2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c06:	7ffb      	ldrb	r3, [r7, #31]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d105      	bne.n	8002c18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c0c:	4b7a      	ldr	r3, [pc, #488]	; (8002df8 <HAL_RCC_OscConfig+0x780>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	4a79      	ldr	r2, [pc, #484]	; (8002df8 <HAL_RCC_OscConfig+0x780>)
 8002c12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c16:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 80fe 	beq.w	8002e1e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	f040 80d0 	bne.w	8002dcc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c2c:	4b72      	ldr	r3, [pc, #456]	; (8002df8 <HAL_RCC_OscConfig+0x780>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f003 0203 	and.w	r2, r3, #3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d130      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d127      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d11f      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c6c:	2a07      	cmp	r2, #7
 8002c6e:	bf14      	ite	ne
 8002c70:	2201      	movne	r2, #1
 8002c72:	2200      	moveq	r2, #0
 8002c74:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d113      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c84:	085b      	lsrs	r3, r3, #1
 8002c86:	3b01      	subs	r3, #1
 8002c88:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d109      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	085b      	lsrs	r3, r3, #1
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d06e      	beq.n	8002d80 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	2b0c      	cmp	r3, #12
 8002ca6:	d069      	beq.n	8002d7c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ca8:	4b53      	ldr	r3, [pc, #332]	; (8002df8 <HAL_RCC_OscConfig+0x780>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d105      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002cb4:	4b50      	ldr	r3, [pc, #320]	; (8002df8 <HAL_RCC_OscConfig+0x780>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0ad      	b.n	8002e20 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002cc4:	4b4c      	ldr	r3, [pc, #304]	; (8002df8 <HAL_RCC_OscConfig+0x780>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a4b      	ldr	r2, [pc, #300]	; (8002df8 <HAL_RCC_OscConfig+0x780>)
 8002cca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cd0:	f7fe f944 	bl	8000f5c <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd8:	f7fe f940 	bl	8000f5c <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e09a      	b.n	8002e20 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cea:	4b43      	ldr	r3, [pc, #268]	; (8002df8 <HAL_RCC_OscConfig+0x780>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f0      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cf6:	4b40      	ldr	r3, [pc, #256]	; (8002df8 <HAL_RCC_OscConfig+0x780>)
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	4b40      	ldr	r3, [pc, #256]	; (8002dfc <HAL_RCC_OscConfig+0x784>)
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d06:	3a01      	subs	r2, #1
 8002d08:	0112      	lsls	r2, r2, #4
 8002d0a:	4311      	orrs	r1, r2
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d10:	0212      	lsls	r2, r2, #8
 8002d12:	4311      	orrs	r1, r2
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d18:	0852      	lsrs	r2, r2, #1
 8002d1a:	3a01      	subs	r2, #1
 8002d1c:	0552      	lsls	r2, r2, #21
 8002d1e:	4311      	orrs	r1, r2
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d24:	0852      	lsrs	r2, r2, #1
 8002d26:	3a01      	subs	r2, #1
 8002d28:	0652      	lsls	r2, r2, #25
 8002d2a:	4311      	orrs	r1, r2
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d30:	0912      	lsrs	r2, r2, #4
 8002d32:	0452      	lsls	r2, r2, #17
 8002d34:	430a      	orrs	r2, r1
 8002d36:	4930      	ldr	r1, [pc, #192]	; (8002df8 <HAL_RCC_OscConfig+0x780>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d3c:	4b2e      	ldr	r3, [pc, #184]	; (8002df8 <HAL_RCC_OscConfig+0x780>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a2d      	ldr	r2, [pc, #180]	; (8002df8 <HAL_RCC_OscConfig+0x780>)
 8002d42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d48:	4b2b      	ldr	r3, [pc, #172]	; (8002df8 <HAL_RCC_OscConfig+0x780>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	4a2a      	ldr	r2, [pc, #168]	; (8002df8 <HAL_RCC_OscConfig+0x780>)
 8002d4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d54:	f7fe f902 	bl	8000f5c <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d5c:	f7fe f8fe 	bl	8000f5c <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e058      	b.n	8002e20 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d6e:	4b22      	ldr	r3, [pc, #136]	; (8002df8 <HAL_RCC_OscConfig+0x780>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d7a:	e050      	b.n	8002e1e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e04f      	b.n	8002e20 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d80:	4b1d      	ldr	r3, [pc, #116]	; (8002df8 <HAL_RCC_OscConfig+0x780>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d148      	bne.n	8002e1e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d8c:	4b1a      	ldr	r3, [pc, #104]	; (8002df8 <HAL_RCC_OscConfig+0x780>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a19      	ldr	r2, [pc, #100]	; (8002df8 <HAL_RCC_OscConfig+0x780>)
 8002d92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d98:	4b17      	ldr	r3, [pc, #92]	; (8002df8 <HAL_RCC_OscConfig+0x780>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	4a16      	ldr	r2, [pc, #88]	; (8002df8 <HAL_RCC_OscConfig+0x780>)
 8002d9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002da2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002da4:	f7fe f8da 	bl	8000f5c <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dac:	f7fe f8d6 	bl	8000f5c <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e030      	b.n	8002e20 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dbe:	4b0e      	ldr	r3, [pc, #56]	; (8002df8 <HAL_RCC_OscConfig+0x780>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f0      	beq.n	8002dac <HAL_RCC_OscConfig+0x734>
 8002dca:	e028      	b.n	8002e1e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	2b0c      	cmp	r3, #12
 8002dd0:	d023      	beq.n	8002e1a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd2:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <HAL_RCC_OscConfig+0x780>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a08      	ldr	r2, [pc, #32]	; (8002df8 <HAL_RCC_OscConfig+0x780>)
 8002dd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dde:	f7fe f8bd 	bl	8000f5c <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002de4:	e00c      	b.n	8002e00 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de6:	f7fe f8b9 	bl	8000f5c <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d905      	bls.n	8002e00 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e013      	b.n	8002e20 <HAL_RCC_OscConfig+0x7a8>
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e00:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <HAL_RCC_OscConfig+0x7b0>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1ec      	bne.n	8002de6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <HAL_RCC_OscConfig+0x7b0>)
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	4905      	ldr	r1, [pc, #20]	; (8002e28 <HAL_RCC_OscConfig+0x7b0>)
 8002e12:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <HAL_RCC_OscConfig+0x7b4>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	60cb      	str	r3, [r1, #12]
 8002e18:	e001      	b.n	8002e1e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3720      	adds	r7, #32
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	feeefffc 	.word	0xfeeefffc

08002e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0e7      	b.n	8003014 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e44:	4b75      	ldr	r3, [pc, #468]	; (800301c <HAL_RCC_ClockConfig+0x1ec>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d910      	bls.n	8002e74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e52:	4b72      	ldr	r3, [pc, #456]	; (800301c <HAL_RCC_ClockConfig+0x1ec>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f023 0207 	bic.w	r2, r3, #7
 8002e5a:	4970      	ldr	r1, [pc, #448]	; (800301c <HAL_RCC_ClockConfig+0x1ec>)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b6e      	ldr	r3, [pc, #440]	; (800301c <HAL_RCC_ClockConfig+0x1ec>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0cf      	b.n	8003014 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d010      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	4b66      	ldr	r3, [pc, #408]	; (8003020 <HAL_RCC_ClockConfig+0x1f0>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d908      	bls.n	8002ea2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e90:	4b63      	ldr	r3, [pc, #396]	; (8003020 <HAL_RCC_ClockConfig+0x1f0>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	4960      	ldr	r1, [pc, #384]	; (8003020 <HAL_RCC_ClockConfig+0x1f0>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d04c      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d107      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eb6:	4b5a      	ldr	r3, [pc, #360]	; (8003020 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d121      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e0a6      	b.n	8003014 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d107      	bne.n	8002ede <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ece:	4b54      	ldr	r3, [pc, #336]	; (8003020 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d115      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e09a      	b.n	8003014 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d107      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ee6:	4b4e      	ldr	r3, [pc, #312]	; (8003020 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d109      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e08e      	b.n	8003014 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ef6:	4b4a      	ldr	r3, [pc, #296]	; (8003020 <HAL_RCC_ClockConfig+0x1f0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e086      	b.n	8003014 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f06:	4b46      	ldr	r3, [pc, #280]	; (8003020 <HAL_RCC_ClockConfig+0x1f0>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f023 0203 	bic.w	r2, r3, #3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	4943      	ldr	r1, [pc, #268]	; (8003020 <HAL_RCC_ClockConfig+0x1f0>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f18:	f7fe f820 	bl	8000f5c <HAL_GetTick>
 8002f1c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f1e:	e00a      	b.n	8002f36 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f20:	f7fe f81c 	bl	8000f5c <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e06e      	b.n	8003014 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f36:	4b3a      	ldr	r3, [pc, #232]	; (8003020 <HAL_RCC_ClockConfig+0x1f0>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 020c 	and.w	r2, r3, #12
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d1eb      	bne.n	8002f20 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d010      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	4b31      	ldr	r3, [pc, #196]	; (8003020 <HAL_RCC_ClockConfig+0x1f0>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d208      	bcs.n	8002f76 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f64:	4b2e      	ldr	r3, [pc, #184]	; (8003020 <HAL_RCC_ClockConfig+0x1f0>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	492b      	ldr	r1, [pc, #172]	; (8003020 <HAL_RCC_ClockConfig+0x1f0>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f76:	4b29      	ldr	r3, [pc, #164]	; (800301c <HAL_RCC_ClockConfig+0x1ec>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d210      	bcs.n	8002fa6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f84:	4b25      	ldr	r3, [pc, #148]	; (800301c <HAL_RCC_ClockConfig+0x1ec>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f023 0207 	bic.w	r2, r3, #7
 8002f8c:	4923      	ldr	r1, [pc, #140]	; (800301c <HAL_RCC_ClockConfig+0x1ec>)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f94:	4b21      	ldr	r3, [pc, #132]	; (800301c <HAL_RCC_ClockConfig+0x1ec>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d001      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e036      	b.n	8003014 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0304 	and.w	r3, r3, #4
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d008      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fb2:	4b1b      	ldr	r3, [pc, #108]	; (8003020 <HAL_RCC_ClockConfig+0x1f0>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	4918      	ldr	r1, [pc, #96]	; (8003020 <HAL_RCC_ClockConfig+0x1f0>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0308 	and.w	r3, r3, #8
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d009      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fd0:	4b13      	ldr	r3, [pc, #76]	; (8003020 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	4910      	ldr	r1, [pc, #64]	; (8003020 <HAL_RCC_ClockConfig+0x1f0>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fe4:	f000 f824 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	4b0d      	ldr	r3, [pc, #52]	; (8003020 <HAL_RCC_ClockConfig+0x1f0>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	091b      	lsrs	r3, r3, #4
 8002ff0:	f003 030f 	and.w	r3, r3, #15
 8002ff4:	490b      	ldr	r1, [pc, #44]	; (8003024 <HAL_RCC_ClockConfig+0x1f4>)
 8002ff6:	5ccb      	ldrb	r3, [r1, r3]
 8002ff8:	f003 031f 	and.w	r3, r3, #31
 8002ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8003000:	4a09      	ldr	r2, [pc, #36]	; (8003028 <HAL_RCC_ClockConfig+0x1f8>)
 8003002:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003004:	4b09      	ldr	r3, [pc, #36]	; (800302c <HAL_RCC_ClockConfig+0x1fc>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f7fd ff57 	bl	8000ebc <HAL_InitTick>
 800300e:	4603      	mov	r3, r0
 8003010:	72fb      	strb	r3, [r7, #11]

  return status;
 8003012:	7afb      	ldrb	r3, [r7, #11]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40022000 	.word	0x40022000
 8003020:	40021000 	.word	0x40021000
 8003024:	08005a5c 	.word	0x08005a5c
 8003028:	20000000 	.word	0x20000000
 800302c:	20000004 	.word	0x20000004

08003030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003030:	b480      	push	{r7}
 8003032:	b089      	sub	sp, #36	; 0x24
 8003034:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003036:	2300      	movs	r3, #0
 8003038:	61fb      	str	r3, [r7, #28]
 800303a:	2300      	movs	r3, #0
 800303c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800303e:	4b3e      	ldr	r3, [pc, #248]	; (8003138 <HAL_RCC_GetSysClockFreq+0x108>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003048:	4b3b      	ldr	r3, [pc, #236]	; (8003138 <HAL_RCC_GetSysClockFreq+0x108>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d005      	beq.n	8003064 <HAL_RCC_GetSysClockFreq+0x34>
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	2b0c      	cmp	r3, #12
 800305c:	d121      	bne.n	80030a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d11e      	bne.n	80030a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003064:	4b34      	ldr	r3, [pc, #208]	; (8003138 <HAL_RCC_GetSysClockFreq+0x108>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	d107      	bne.n	8003080 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003070:	4b31      	ldr	r3, [pc, #196]	; (8003138 <HAL_RCC_GetSysClockFreq+0x108>)
 8003072:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003076:	0a1b      	lsrs	r3, r3, #8
 8003078:	f003 030f 	and.w	r3, r3, #15
 800307c:	61fb      	str	r3, [r7, #28]
 800307e:	e005      	b.n	800308c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003080:	4b2d      	ldr	r3, [pc, #180]	; (8003138 <HAL_RCC_GetSysClockFreq+0x108>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	091b      	lsrs	r3, r3, #4
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800308c:	4a2b      	ldr	r2, [pc, #172]	; (800313c <HAL_RCC_GetSysClockFreq+0x10c>)
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003094:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10d      	bne.n	80030b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030a0:	e00a      	b.n	80030b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d102      	bne.n	80030ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030a8:	4b25      	ldr	r3, [pc, #148]	; (8003140 <HAL_RCC_GetSysClockFreq+0x110>)
 80030aa:	61bb      	str	r3, [r7, #24]
 80030ac:	e004      	b.n	80030b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d101      	bne.n	80030b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030b4:	4b23      	ldr	r3, [pc, #140]	; (8003144 <HAL_RCC_GetSysClockFreq+0x114>)
 80030b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	2b0c      	cmp	r3, #12
 80030bc:	d134      	bne.n	8003128 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030be:	4b1e      	ldr	r3, [pc, #120]	; (8003138 <HAL_RCC_GetSysClockFreq+0x108>)
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d003      	beq.n	80030d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	d003      	beq.n	80030dc <HAL_RCC_GetSysClockFreq+0xac>
 80030d4:	e005      	b.n	80030e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80030d6:	4b1a      	ldr	r3, [pc, #104]	; (8003140 <HAL_RCC_GetSysClockFreq+0x110>)
 80030d8:	617b      	str	r3, [r7, #20]
      break;
 80030da:	e005      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80030dc:	4b19      	ldr	r3, [pc, #100]	; (8003144 <HAL_RCC_GetSysClockFreq+0x114>)
 80030de:	617b      	str	r3, [r7, #20]
      break;
 80030e0:	e002      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	617b      	str	r3, [r7, #20]
      break;
 80030e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030e8:	4b13      	ldr	r3, [pc, #76]	; (8003138 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	091b      	lsrs	r3, r3, #4
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	3301      	adds	r3, #1
 80030f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80030f6:	4b10      	ldr	r3, [pc, #64]	; (8003138 <HAL_RCC_GetSysClockFreq+0x108>)
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	0a1b      	lsrs	r3, r3, #8
 80030fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	fb03 f202 	mul.w	r2, r3, r2
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	fbb2 f3f3 	udiv	r3, r2, r3
 800310c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800310e:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <HAL_RCC_GetSysClockFreq+0x108>)
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	0e5b      	lsrs	r3, r3, #25
 8003114:	f003 0303 	and.w	r3, r3, #3
 8003118:	3301      	adds	r3, #1
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	fbb2 f3f3 	udiv	r3, r2, r3
 8003126:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003128:	69bb      	ldr	r3, [r7, #24]
}
 800312a:	4618      	mov	r0, r3
 800312c:	3724      	adds	r7, #36	; 0x24
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40021000 	.word	0x40021000
 800313c:	08005a74 	.word	0x08005a74
 8003140:	00f42400 	.word	0x00f42400
 8003144:	007a1200 	.word	0x007a1200

08003148 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800314c:	4b03      	ldr	r3, [pc, #12]	; (800315c <HAL_RCC_GetHCLKFreq+0x14>)
 800314e:	681b      	ldr	r3, [r3, #0]
}
 8003150:	4618      	mov	r0, r3
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	20000000 	.word	0x20000000

08003160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003164:	f7ff fff0 	bl	8003148 <HAL_RCC_GetHCLKFreq>
 8003168:	4602      	mov	r2, r0
 800316a:	4b06      	ldr	r3, [pc, #24]	; (8003184 <HAL_RCC_GetPCLK1Freq+0x24>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	0a1b      	lsrs	r3, r3, #8
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	4904      	ldr	r1, [pc, #16]	; (8003188 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003176:	5ccb      	ldrb	r3, [r1, r3]
 8003178:	f003 031f 	and.w	r3, r3, #31
 800317c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003180:	4618      	mov	r0, r3
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40021000 	.word	0x40021000
 8003188:	08005a6c 	.word	0x08005a6c

0800318c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003190:	f7ff ffda 	bl	8003148 <HAL_RCC_GetHCLKFreq>
 8003194:	4602      	mov	r2, r0
 8003196:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	0adb      	lsrs	r3, r3, #11
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	4904      	ldr	r1, [pc, #16]	; (80031b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031a2:	5ccb      	ldrb	r3, [r1, r3]
 80031a4:	f003 031f 	and.w	r3, r3, #31
 80031a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40021000 	.word	0x40021000
 80031b4:	08005a6c 	.word	0x08005a6c

080031b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031c0:	2300      	movs	r3, #0
 80031c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80031c4:	4b2a      	ldr	r3, [pc, #168]	; (8003270 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80031d0:	f7ff f9ee 	bl	80025b0 <HAL_PWREx_GetVoltageRange>
 80031d4:	6178      	str	r0, [r7, #20]
 80031d6:	e014      	b.n	8003202 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031d8:	4b25      	ldr	r3, [pc, #148]	; (8003270 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031dc:	4a24      	ldr	r2, [pc, #144]	; (8003270 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e2:	6593      	str	r3, [r2, #88]	; 0x58
 80031e4:	4b22      	ldr	r3, [pc, #136]	; (8003270 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031f0:	f7ff f9de 	bl	80025b0 <HAL_PWREx_GetVoltageRange>
 80031f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031f6:	4b1e      	ldr	r3, [pc, #120]	; (8003270 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fa:	4a1d      	ldr	r2, [pc, #116]	; (8003270 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003200:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003208:	d10b      	bne.n	8003222 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b80      	cmp	r3, #128	; 0x80
 800320e:	d919      	bls.n	8003244 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2ba0      	cmp	r3, #160	; 0xa0
 8003214:	d902      	bls.n	800321c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003216:	2302      	movs	r3, #2
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	e013      	b.n	8003244 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800321c:	2301      	movs	r3, #1
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	e010      	b.n	8003244 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b80      	cmp	r3, #128	; 0x80
 8003226:	d902      	bls.n	800322e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003228:	2303      	movs	r3, #3
 800322a:	613b      	str	r3, [r7, #16]
 800322c:	e00a      	b.n	8003244 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b80      	cmp	r3, #128	; 0x80
 8003232:	d102      	bne.n	800323a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003234:	2302      	movs	r3, #2
 8003236:	613b      	str	r3, [r7, #16]
 8003238:	e004      	b.n	8003244 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b70      	cmp	r3, #112	; 0x70
 800323e:	d101      	bne.n	8003244 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003240:	2301      	movs	r3, #1
 8003242:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003244:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f023 0207 	bic.w	r2, r3, #7
 800324c:	4909      	ldr	r1, [pc, #36]	; (8003274 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003254:	4b07      	ldr	r3, [pc, #28]	; (8003274 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	429a      	cmp	r2, r3
 8003260:	d001      	beq.n	8003266 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40021000 	.word	0x40021000
 8003274:	40022000 	.word	0x40022000

08003278 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003280:	2300      	movs	r3, #0
 8003282:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003284:	2300      	movs	r3, #0
 8003286:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003290:	2b00      	cmp	r3, #0
 8003292:	d041      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003298:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800329c:	d02a      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800329e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032a2:	d824      	bhi.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032a8:	d008      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80032aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032ae:	d81e      	bhi.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00a      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80032b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032b8:	d010      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032ba:	e018      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032bc:	4b86      	ldr	r3, [pc, #536]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	4a85      	ldr	r2, [pc, #532]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032c8:	e015      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3304      	adds	r3, #4
 80032ce:	2100      	movs	r1, #0
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fabb 	bl	800384c <RCCEx_PLLSAI1_Config>
 80032d6:	4603      	mov	r3, r0
 80032d8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032da:	e00c      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3320      	adds	r3, #32
 80032e0:	2100      	movs	r1, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fba6 	bl	8003a34 <RCCEx_PLLSAI2_Config>
 80032e8:	4603      	mov	r3, r0
 80032ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032ec:	e003      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	74fb      	strb	r3, [r7, #19]
      break;
 80032f2:	e000      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80032f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032f6:	7cfb      	ldrb	r3, [r7, #19]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10b      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032fc:	4b76      	ldr	r3, [pc, #472]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003302:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800330a:	4973      	ldr	r1, [pc, #460]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800330c:	4313      	orrs	r3, r2
 800330e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003312:	e001      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003314:	7cfb      	ldrb	r3, [r7, #19]
 8003316:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d041      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003328:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800332c:	d02a      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800332e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003332:	d824      	bhi.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003334:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003338:	d008      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800333a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800333e:	d81e      	bhi.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00a      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003348:	d010      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800334a:	e018      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800334c:	4b62      	ldr	r3, [pc, #392]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	4a61      	ldr	r2, [pc, #388]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003356:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003358:	e015      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3304      	adds	r3, #4
 800335e:	2100      	movs	r1, #0
 8003360:	4618      	mov	r0, r3
 8003362:	f000 fa73 	bl	800384c <RCCEx_PLLSAI1_Config>
 8003366:	4603      	mov	r3, r0
 8003368:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800336a:	e00c      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3320      	adds	r3, #32
 8003370:	2100      	movs	r1, #0
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fb5e 	bl	8003a34 <RCCEx_PLLSAI2_Config>
 8003378:	4603      	mov	r3, r0
 800337a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800337c:	e003      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	74fb      	strb	r3, [r7, #19]
      break;
 8003382:	e000      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003384:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003386:	7cfb      	ldrb	r3, [r7, #19]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10b      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800338c:	4b52      	ldr	r3, [pc, #328]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800338e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003392:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800339a:	494f      	ldr	r1, [pc, #316]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80033a2:	e001      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a4:	7cfb      	ldrb	r3, [r7, #19]
 80033a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80a0 	beq.w	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033b6:	2300      	movs	r3, #0
 80033b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033ba:	4b47      	ldr	r3, [pc, #284]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x152>
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80033ca:	2300      	movs	r3, #0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00d      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033d0:	4b41      	ldr	r3, [pc, #260]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d4:	4a40      	ldr	r2, [pc, #256]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033da:	6593      	str	r3, [r2, #88]	; 0x58
 80033dc:	4b3e      	ldr	r3, [pc, #248]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e8:	2301      	movs	r3, #1
 80033ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033ec:	4b3b      	ldr	r3, [pc, #236]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a3a      	ldr	r2, [pc, #232]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033f8:	f7fd fdb0 	bl	8000f5c <HAL_GetTick>
 80033fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033fe:	e009      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003400:	f7fd fdac 	bl	8000f5c <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d902      	bls.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	74fb      	strb	r3, [r7, #19]
        break;
 8003412:	e005      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003414:	4b31      	ldr	r3, [pc, #196]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0ef      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003420:	7cfb      	ldrb	r3, [r7, #19]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d15c      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003426:	4b2c      	ldr	r3, [pc, #176]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003430:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d01f      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	429a      	cmp	r2, r3
 8003442:	d019      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003444:	4b24      	ldr	r3, [pc, #144]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800344e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003450:	4b21      	ldr	r3, [pc, #132]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003456:	4a20      	ldr	r2, [pc, #128]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800345c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003460:	4b1d      	ldr	r3, [pc, #116]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003466:	4a1c      	ldr	r2, [pc, #112]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800346c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003470:	4a19      	ldr	r2, [pc, #100]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d016      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003482:	f7fd fd6b 	bl	8000f5c <HAL_GetTick>
 8003486:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003488:	e00b      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348a:	f7fd fd67 	bl	8000f5c <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	f241 3288 	movw	r2, #5000	; 0x1388
 8003498:	4293      	cmp	r3, r2
 800349a:	d902      	bls.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	74fb      	strb	r3, [r7, #19]
            break;
 80034a0:	e006      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034a2:	4b0d      	ldr	r3, [pc, #52]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0ec      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80034b0:	7cfb      	ldrb	r3, [r7, #19]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10c      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034b6:	4b08      	ldr	r3, [pc, #32]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034c6:	4904      	ldr	r1, [pc, #16]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034ce:	e009      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034d0:	7cfb      	ldrb	r3, [r7, #19]
 80034d2:	74bb      	strb	r3, [r7, #18]
 80034d4:	e006      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80034d6:	bf00      	nop
 80034d8:	40021000 	.word	0x40021000
 80034dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e0:	7cfb      	ldrb	r3, [r7, #19]
 80034e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034e4:	7c7b      	ldrb	r3, [r7, #17]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d105      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ea:	4b9e      	ldr	r3, [pc, #632]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ee:	4a9d      	ldr	r2, [pc, #628]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003502:	4b98      	ldr	r3, [pc, #608]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003508:	f023 0203 	bic.w	r2, r3, #3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003510:	4994      	ldr	r1, [pc, #592]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003524:	4b8f      	ldr	r3, [pc, #572]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352a:	f023 020c 	bic.w	r2, r3, #12
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003532:	498c      	ldr	r1, [pc, #560]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0304 	and.w	r3, r3, #4
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003546:	4b87      	ldr	r3, [pc, #540]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	4983      	ldr	r1, [pc, #524]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00a      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003568:	4b7e      	ldr	r3, [pc, #504]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003576:	497b      	ldr	r1, [pc, #492]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003578:	4313      	orrs	r3, r2
 800357a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0310 	and.w	r3, r3, #16
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800358a:	4b76      	ldr	r3, [pc, #472]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003590:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003598:	4972      	ldr	r1, [pc, #456]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359a:	4313      	orrs	r3, r2
 800359c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0320 	and.w	r3, r3, #32
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035ac:	4b6d      	ldr	r3, [pc, #436]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ba:	496a      	ldr	r1, [pc, #424]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035ce:	4b65      	ldr	r3, [pc, #404]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035dc:	4961      	ldr	r1, [pc, #388]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035f0:	4b5c      	ldr	r3, [pc, #368]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035fe:	4959      	ldr	r1, [pc, #356]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003600:	4313      	orrs	r3, r2
 8003602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003612:	4b54      	ldr	r3, [pc, #336]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003618:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003620:	4950      	ldr	r1, [pc, #320]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003622:	4313      	orrs	r3, r2
 8003624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00a      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003634:	4b4b      	ldr	r3, [pc, #300]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003642:	4948      	ldr	r1, [pc, #288]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003644:	4313      	orrs	r3, r2
 8003646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003656:	4b43      	ldr	r3, [pc, #268]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003664:	493f      	ldr	r1, [pc, #252]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d028      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003678:	4b3a      	ldr	r3, [pc, #232]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003686:	4937      	ldr	r1, [pc, #220]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003692:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003696:	d106      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003698:	4b32      	ldr	r3, [pc, #200]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	4a31      	ldr	r2, [pc, #196]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036a2:	60d3      	str	r3, [r2, #12]
 80036a4:	e011      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036ae:	d10c      	bne.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3304      	adds	r3, #4
 80036b4:	2101      	movs	r1, #1
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 f8c8 	bl	800384c <RCCEx_PLLSAI1_Config>
 80036bc:	4603      	mov	r3, r0
 80036be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80036c0:	7cfb      	ldrb	r3, [r7, #19]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80036c6:	7cfb      	ldrb	r3, [r7, #19]
 80036c8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d028      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036d6:	4b23      	ldr	r3, [pc, #140]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e4:	491f      	ldr	r1, [pc, #124]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036f4:	d106      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036f6:	4b1b      	ldr	r3, [pc, #108]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	4a1a      	ldr	r2, [pc, #104]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003700:	60d3      	str	r3, [r2, #12]
 8003702:	e011      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003708:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800370c:	d10c      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3304      	adds	r3, #4
 8003712:	2101      	movs	r1, #1
 8003714:	4618      	mov	r0, r3
 8003716:	f000 f899 	bl	800384c <RCCEx_PLLSAI1_Config>
 800371a:	4603      	mov	r3, r0
 800371c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800371e:	7cfb      	ldrb	r3, [r7, #19]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003724:	7cfb      	ldrb	r3, [r7, #19]
 8003726:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d02b      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003734:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003742:	4908      	ldr	r1, [pc, #32]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003744:	4313      	orrs	r3, r2
 8003746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800374e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003752:	d109      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003754:	4b03      	ldr	r3, [pc, #12]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	4a02      	ldr	r2, [pc, #8]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800375a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800375e:	60d3      	str	r3, [r2, #12]
 8003760:	e014      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003762:	bf00      	nop
 8003764:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800376c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003770:	d10c      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3304      	adds	r3, #4
 8003776:	2101      	movs	r1, #1
 8003778:	4618      	mov	r0, r3
 800377a:	f000 f867 	bl	800384c <RCCEx_PLLSAI1_Config>
 800377e:	4603      	mov	r3, r0
 8003780:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003782:	7cfb      	ldrb	r3, [r7, #19]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003788:	7cfb      	ldrb	r3, [r7, #19]
 800378a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d02f      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003798:	4b2b      	ldr	r3, [pc, #172]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800379a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037a6:	4928      	ldr	r1, [pc, #160]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037b6:	d10d      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3304      	adds	r3, #4
 80037bc:	2102      	movs	r1, #2
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 f844 	bl	800384c <RCCEx_PLLSAI1_Config>
 80037c4:	4603      	mov	r3, r0
 80037c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037c8:	7cfb      	ldrb	r3, [r7, #19]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d014      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80037ce:	7cfb      	ldrb	r3, [r7, #19]
 80037d0:	74bb      	strb	r3, [r7, #18]
 80037d2:	e011      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037dc:	d10c      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3320      	adds	r3, #32
 80037e2:	2102      	movs	r1, #2
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 f925 	bl	8003a34 <RCCEx_PLLSAI2_Config>
 80037ea:	4603      	mov	r3, r0
 80037ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037ee:	7cfb      	ldrb	r3, [r7, #19]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80037f4:	7cfb      	ldrb	r3, [r7, #19]
 80037f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003804:	4b10      	ldr	r3, [pc, #64]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003812:	490d      	ldr	r1, [pc, #52]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00b      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003826:	4b08      	ldr	r3, [pc, #32]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003836:	4904      	ldr	r1, [pc, #16]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003838:	4313      	orrs	r3, r2
 800383a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800383e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40021000 	.word	0x40021000

0800384c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800385a:	4b75      	ldr	r3, [pc, #468]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d018      	beq.n	8003898 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003866:	4b72      	ldr	r3, [pc, #456]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f003 0203 	and.w	r2, r3, #3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d10d      	bne.n	8003892 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
       ||
 800387a:	2b00      	cmp	r3, #0
 800387c:	d009      	beq.n	8003892 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800387e:	4b6c      	ldr	r3, [pc, #432]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	091b      	lsrs	r3, r3, #4
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
       ||
 800388e:	429a      	cmp	r2, r3
 8003890:	d047      	beq.n	8003922 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	73fb      	strb	r3, [r7, #15]
 8003896:	e044      	b.n	8003922 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b03      	cmp	r3, #3
 800389e:	d018      	beq.n	80038d2 <RCCEx_PLLSAI1_Config+0x86>
 80038a0:	2b03      	cmp	r3, #3
 80038a2:	d825      	bhi.n	80038f0 <RCCEx_PLLSAI1_Config+0xa4>
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d002      	beq.n	80038ae <RCCEx_PLLSAI1_Config+0x62>
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d009      	beq.n	80038c0 <RCCEx_PLLSAI1_Config+0x74>
 80038ac:	e020      	b.n	80038f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038ae:	4b60      	ldr	r3, [pc, #384]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d11d      	bne.n	80038f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038be:	e01a      	b.n	80038f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038c0:	4b5b      	ldr	r3, [pc, #364]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d116      	bne.n	80038fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038d0:	e013      	b.n	80038fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038d2:	4b57      	ldr	r3, [pc, #348]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10f      	bne.n	80038fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038de:	4b54      	ldr	r3, [pc, #336]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d109      	bne.n	80038fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038ee:	e006      	b.n	80038fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	73fb      	strb	r3, [r7, #15]
      break;
 80038f4:	e004      	b.n	8003900 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038f6:	bf00      	nop
 80038f8:	e002      	b.n	8003900 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038fa:	bf00      	nop
 80038fc:	e000      	b.n	8003900 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003900:	7bfb      	ldrb	r3, [r7, #15]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10d      	bne.n	8003922 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003906:	4b4a      	ldr	r3, [pc, #296]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6819      	ldr	r1, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	3b01      	subs	r3, #1
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	430b      	orrs	r3, r1
 800391c:	4944      	ldr	r1, [pc, #272]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 800391e:	4313      	orrs	r3, r2
 8003920:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003922:	7bfb      	ldrb	r3, [r7, #15]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d17d      	bne.n	8003a24 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003928:	4b41      	ldr	r3, [pc, #260]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a40      	ldr	r2, [pc, #256]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 800392e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003932:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003934:	f7fd fb12 	bl	8000f5c <HAL_GetTick>
 8003938:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800393a:	e009      	b.n	8003950 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800393c:	f7fd fb0e 	bl	8000f5c <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d902      	bls.n	8003950 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	73fb      	strb	r3, [r7, #15]
        break;
 800394e:	e005      	b.n	800395c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003950:	4b37      	ldr	r3, [pc, #220]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1ef      	bne.n	800393c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800395c:	7bfb      	ldrb	r3, [r7, #15]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d160      	bne.n	8003a24 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d111      	bne.n	800398c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003968:	4b31      	ldr	r3, [pc, #196]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6892      	ldr	r2, [r2, #8]
 8003978:	0211      	lsls	r1, r2, #8
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	68d2      	ldr	r2, [r2, #12]
 800397e:	0912      	lsrs	r2, r2, #4
 8003980:	0452      	lsls	r2, r2, #17
 8003982:	430a      	orrs	r2, r1
 8003984:	492a      	ldr	r1, [pc, #168]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003986:	4313      	orrs	r3, r2
 8003988:	610b      	str	r3, [r1, #16]
 800398a:	e027      	b.n	80039dc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d112      	bne.n	80039b8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003992:	4b27      	ldr	r3, [pc, #156]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800399a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6892      	ldr	r2, [r2, #8]
 80039a2:	0211      	lsls	r1, r2, #8
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6912      	ldr	r2, [r2, #16]
 80039a8:	0852      	lsrs	r2, r2, #1
 80039aa:	3a01      	subs	r2, #1
 80039ac:	0552      	lsls	r2, r2, #21
 80039ae:	430a      	orrs	r2, r1
 80039b0:	491f      	ldr	r1, [pc, #124]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	610b      	str	r3, [r1, #16]
 80039b6:	e011      	b.n	80039dc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039b8:	4b1d      	ldr	r3, [pc, #116]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6892      	ldr	r2, [r2, #8]
 80039c8:	0211      	lsls	r1, r2, #8
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6952      	ldr	r2, [r2, #20]
 80039ce:	0852      	lsrs	r2, r2, #1
 80039d0:	3a01      	subs	r2, #1
 80039d2:	0652      	lsls	r2, r2, #25
 80039d4:	430a      	orrs	r2, r1
 80039d6:	4916      	ldr	r1, [pc, #88]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039dc:	4b14      	ldr	r3, [pc, #80]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a13      	ldr	r2, [pc, #76]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e8:	f7fd fab8 	bl	8000f5c <HAL_GetTick>
 80039ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039ee:	e009      	b.n	8003a04 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039f0:	f7fd fab4 	bl	8000f5c <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d902      	bls.n	8003a04 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	73fb      	strb	r3, [r7, #15]
          break;
 8003a02:	e005      	b.n	8003a10 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a04:	4b0a      	ldr	r3, [pc, #40]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0ef      	beq.n	80039f0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d106      	bne.n	8003a24 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a16:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a18:	691a      	ldr	r2, [r3, #16]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	4904      	ldr	r1, [pc, #16]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40021000 	.word	0x40021000

08003a34 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a42:	4b6a      	ldr	r3, [pc, #424]	; (8003bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d018      	beq.n	8003a80 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a4e:	4b67      	ldr	r3, [pc, #412]	; (8003bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f003 0203 	and.w	r2, r3, #3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d10d      	bne.n	8003a7a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
       ||
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d009      	beq.n	8003a7a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a66:	4b61      	ldr	r3, [pc, #388]	; (8003bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	091b      	lsrs	r3, r3, #4
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	1c5a      	adds	r2, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
       ||
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d047      	beq.n	8003b0a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	73fb      	strb	r3, [r7, #15]
 8003a7e:	e044      	b.n	8003b0a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d018      	beq.n	8003aba <RCCEx_PLLSAI2_Config+0x86>
 8003a88:	2b03      	cmp	r3, #3
 8003a8a:	d825      	bhi.n	8003ad8 <RCCEx_PLLSAI2_Config+0xa4>
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d002      	beq.n	8003a96 <RCCEx_PLLSAI2_Config+0x62>
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d009      	beq.n	8003aa8 <RCCEx_PLLSAI2_Config+0x74>
 8003a94:	e020      	b.n	8003ad8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a96:	4b55      	ldr	r3, [pc, #340]	; (8003bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d11d      	bne.n	8003ade <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aa6:	e01a      	b.n	8003ade <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003aa8:	4b50      	ldr	r3, [pc, #320]	; (8003bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d116      	bne.n	8003ae2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ab8:	e013      	b.n	8003ae2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003aba:	4b4c      	ldr	r3, [pc, #304]	; (8003bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10f      	bne.n	8003ae6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ac6:	4b49      	ldr	r3, [pc, #292]	; (8003bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d109      	bne.n	8003ae6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ad6:	e006      	b.n	8003ae6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	73fb      	strb	r3, [r7, #15]
      break;
 8003adc:	e004      	b.n	8003ae8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ade:	bf00      	nop
 8003ae0:	e002      	b.n	8003ae8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ae2:	bf00      	nop
 8003ae4:	e000      	b.n	8003ae8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ae6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10d      	bne.n	8003b0a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003aee:	4b3f      	ldr	r3, [pc, #252]	; (8003bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6819      	ldr	r1, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	430b      	orrs	r3, r1
 8003b04:	4939      	ldr	r1, [pc, #228]	; (8003bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d167      	bne.n	8003be0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b10:	4b36      	ldr	r3, [pc, #216]	; (8003bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a35      	ldr	r2, [pc, #212]	; (8003bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b1c:	f7fd fa1e 	bl	8000f5c <HAL_GetTick>
 8003b20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b22:	e009      	b.n	8003b38 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b24:	f7fd fa1a 	bl	8000f5c <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d902      	bls.n	8003b38 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	73fb      	strb	r3, [r7, #15]
        break;
 8003b36:	e005      	b.n	8003b44 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b38:	4b2c      	ldr	r3, [pc, #176]	; (8003bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1ef      	bne.n	8003b24 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d14a      	bne.n	8003be0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d111      	bne.n	8003b74 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b50:	4b26      	ldr	r3, [pc, #152]	; (8003bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6892      	ldr	r2, [r2, #8]
 8003b60:	0211      	lsls	r1, r2, #8
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	68d2      	ldr	r2, [r2, #12]
 8003b66:	0912      	lsrs	r2, r2, #4
 8003b68:	0452      	lsls	r2, r2, #17
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	491f      	ldr	r1, [pc, #124]	; (8003bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	614b      	str	r3, [r1, #20]
 8003b72:	e011      	b.n	8003b98 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b74:	4b1d      	ldr	r3, [pc, #116]	; (8003bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6892      	ldr	r2, [r2, #8]
 8003b84:	0211      	lsls	r1, r2, #8
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6912      	ldr	r2, [r2, #16]
 8003b8a:	0852      	lsrs	r2, r2, #1
 8003b8c:	3a01      	subs	r2, #1
 8003b8e:	0652      	lsls	r2, r2, #25
 8003b90:	430a      	orrs	r2, r1
 8003b92:	4916      	ldr	r1, [pc, #88]	; (8003bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b98:	4b14      	ldr	r3, [pc, #80]	; (8003bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a13      	ldr	r2, [pc, #76]	; (8003bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba4:	f7fd f9da 	bl	8000f5c <HAL_GetTick>
 8003ba8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003baa:	e009      	b.n	8003bc0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bac:	f7fd f9d6 	bl	8000f5c <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d902      	bls.n	8003bc0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	73fb      	strb	r3, [r7, #15]
          break;
 8003bbe:	e005      	b.n	8003bcc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bc0:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0ef      	beq.n	8003bac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d106      	bne.n	8003be0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003bd2:	4b06      	ldr	r3, [pc, #24]	; (8003bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd4:	695a      	ldr	r2, [r3, #20]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	4904      	ldr	r1, [pc, #16]	; (8003bec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	40021000 	.word	0x40021000

08003bf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e040      	b.n	8003c84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fc ff90 	bl	8000b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2224      	movs	r2, #36	; 0x24
 8003c1c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0201 	bic.w	r2, r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 fcbc 	bl	80045ac <UART_SetConfig>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d101      	bne.n	8003c3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e022      	b.n	8003c84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 ff68 	bl	8004b1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 ffef 	bl	8004c60 <UART_CheckIdleState>
 8003c82:	4603      	mov	r3, r0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e048      	b.n	8003d30 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d106      	bne.n	8003cb4 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7fc ff42 	bl	8000b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2224      	movs	r2, #36	; 0x24
 8003cb8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0201 	bic.w	r2, r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fc6e 	bl	80045ac <UART_SetConfig>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d101      	bne.n	8003cda <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e02a      	b.n	8003d30 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d002      	beq.n	8003ce8 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 ff1a 	bl	8004b1c <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689a      	ldr	r2, [r3, #8]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003d06:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689a      	ldr	r2, [r3, #8]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0208 	orr.w	r2, r2, #8
 8003d16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0201 	orr.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 ff99 	bl	8004c60 <UART_CheckIdleState>
 8003d2e:	4603      	mov	r3, r0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08a      	sub	sp, #40	; 0x28
 8003d3c:	af02      	add	r7, sp, #8
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	603b      	str	r3, [r7, #0]
 8003d44:	4613      	mov	r3, r2
 8003d46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d4c:	2b20      	cmp	r3, #32
 8003d4e:	f040 8082 	bne.w	8003e56 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d002      	beq.n	8003d5e <HAL_UART_Transmit+0x26>
 8003d58:	88fb      	ldrh	r3, [r7, #6]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e07a      	b.n	8003e58 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_UART_Transmit+0x38>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e073      	b.n	8003e58 <HAL_UART_Transmit+0x120>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2221      	movs	r2, #33	; 0x21
 8003d84:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d86:	f7fd f8e9 	bl	8000f5c <HAL_GetTick>
 8003d8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	88fa      	ldrh	r2, [r7, #6]
 8003d90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	88fa      	ldrh	r2, [r7, #6]
 8003d98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da4:	d108      	bne.n	8003db8 <HAL_UART_Transmit+0x80>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d104      	bne.n	8003db8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	61bb      	str	r3, [r7, #24]
 8003db6:	e003      	b.n	8003dc0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003dc8:	e02d      	b.n	8003e26 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	2180      	movs	r1, #128	; 0x80
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 ff8c 	bl	8004cf2 <UART_WaitOnFlagUntilTimeout>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e039      	b.n	8003e58 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10b      	bne.n	8003e02 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	881a      	ldrh	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003df6:	b292      	uxth	r2, r2
 8003df8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	3302      	adds	r3, #2
 8003dfe:	61bb      	str	r3, [r7, #24]
 8003e00:	e008      	b.n	8003e14 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	781a      	ldrb	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	b292      	uxth	r2, r2
 8003e0c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	3301      	adds	r3, #1
 8003e12:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1cb      	bne.n	8003dca <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	2140      	movs	r1, #64	; 0x40
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 ff58 	bl	8004cf2 <UART_WaitOnFlagUntilTimeout>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e005      	b.n	8003e58 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	e000      	b.n	8003e58 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003e56:	2302      	movs	r3, #2
  }
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3720      	adds	r7, #32
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b0ba      	sub	sp, #232	; 0xe8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003e8a:	f640 030f 	movw	r3, #2063	; 0x80f
 8003e8e:	4013      	ands	r3, r2
 8003e90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003e94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d115      	bne.n	8003ec8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea0:	f003 0320 	and.w	r3, r3, #32
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00f      	beq.n	8003ec8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d009      	beq.n	8003ec8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 82a6 	beq.w	800440a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	4798      	blx	r3
      }
      return;
 8003ec6:	e2a0      	b.n	800440a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003ec8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 8117 	beq.w	8004100 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d106      	bne.n	8003eec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003ede:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003ee2:	4b85      	ldr	r3, [pc, #532]	; (80040f8 <HAL_UART_IRQHandler+0x298>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 810a 	beq.w	8004100 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d011      	beq.n	8003f1c <HAL_UART_IRQHandler+0xbc>
 8003ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00b      	beq.n	8003f1c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f12:	f043 0201 	orr.w	r2, r3, #1
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d011      	beq.n	8003f4c <HAL_UART_IRQHandler+0xec>
 8003f28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00b      	beq.n	8003f4c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2202      	movs	r2, #2
 8003f3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f42:	f043 0204 	orr.w	r2, r3, #4
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d011      	beq.n	8003f7c <HAL_UART_IRQHandler+0x11c>
 8003f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00b      	beq.n	8003f7c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2204      	movs	r2, #4
 8003f6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f72:	f043 0202 	orr.w	r2, r3, #2
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d017      	beq.n	8003fb8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f8c:	f003 0320 	and.w	r3, r3, #32
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d105      	bne.n	8003fa0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003f94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f98:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00b      	beq.n	8003fb8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2208      	movs	r2, #8
 8003fa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fae:	f043 0208 	orr.w	r2, r3, #8
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d012      	beq.n	8003fea <HAL_UART_IRQHandler+0x18a>
 8003fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00c      	beq.n	8003fea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fe0:	f043 0220 	orr.w	r2, r3, #32
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 820c 	beq.w	800440e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ffa:	f003 0320 	and.w	r3, r3, #32
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00d      	beq.n	800401e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004006:	f003 0320 	and.w	r3, r3, #32
 800400a:	2b00      	cmp	r3, #0
 800400c:	d007      	beq.n	800401e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004024:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004032:	2b40      	cmp	r3, #64	; 0x40
 8004034:	d005      	beq.n	8004042 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004036:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800403a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800403e:	2b00      	cmp	r3, #0
 8004040:	d04f      	beq.n	80040e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 ff19 	bl	8004e7a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004052:	2b40      	cmp	r3, #64	; 0x40
 8004054:	d141      	bne.n	80040da <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3308      	adds	r3, #8
 800405c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004060:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004064:	e853 3f00 	ldrex	r3, [r3]
 8004068:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800406c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004070:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004074:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	3308      	adds	r3, #8
 800407e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004082:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004086:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800408e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004092:	e841 2300 	strex	r3, r2, [r1]
 8004096:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800409a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1d9      	bne.n	8004056 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d013      	beq.n	80040d2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ae:	4a13      	ldr	r2, [pc, #76]	; (80040fc <HAL_UART_IRQHandler+0x29c>)
 80040b0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fe f877 	bl	80021aa <HAL_DMA_Abort_IT>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d017      	beq.n	80040f2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80040cc:	4610      	mov	r0, r2
 80040ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d0:	e00f      	b.n	80040f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f9b0 	bl	8004438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d8:	e00b      	b.n	80040f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f9ac 	bl	8004438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e0:	e007      	b.n	80040f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f9a8 	bl	8004438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80040f0:	e18d      	b.n	800440e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f2:	bf00      	nop
    return;
 80040f4:	e18b      	b.n	800440e <HAL_UART_IRQHandler+0x5ae>
 80040f6:	bf00      	nop
 80040f8:	04000120 	.word	0x04000120
 80040fc:	08004f41 	.word	0x08004f41

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004104:	2b01      	cmp	r3, #1
 8004106:	f040 8146 	bne.w	8004396 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800410a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800410e:	f003 0310 	and.w	r3, r3, #16
 8004112:	2b00      	cmp	r3, #0
 8004114:	f000 813f 	beq.w	8004396 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800411c:	f003 0310 	and.w	r3, r3, #16
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 8138 	beq.w	8004396 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2210      	movs	r2, #16
 800412c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004138:	2b40      	cmp	r3, #64	; 0x40
 800413a:	f040 80b4 	bne.w	80042a6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800414a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 815f 	beq.w	8004412 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800415a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800415e:	429a      	cmp	r2, r3
 8004160:	f080 8157 	bcs.w	8004412 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800416a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0320 	and.w	r3, r3, #32
 800417a:	2b00      	cmp	r3, #0
 800417c:	f040 8085 	bne.w	800428a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004188:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800418c:	e853 3f00 	ldrex	r3, [r3]
 8004190:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004194:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800419c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	461a      	mov	r2, r3
 80041a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80041aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80041ae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80041b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041ba:	e841 2300 	strex	r3, r2, [r1]
 80041be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80041c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1da      	bne.n	8004180 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3308      	adds	r3, #8
 80041d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041d4:	e853 3f00 	ldrex	r3, [r3]
 80041d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80041da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041dc:	f023 0301 	bic.w	r3, r3, #1
 80041e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	3308      	adds	r3, #8
 80041ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80041f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80041f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80041fa:	e841 2300 	strex	r3, r2, [r1]
 80041fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1e1      	bne.n	80041ca <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	3308      	adds	r3, #8
 800420c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004210:	e853 3f00 	ldrex	r3, [r3]
 8004214:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800421c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3308      	adds	r3, #8
 8004226:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800422a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800422c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004230:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004232:	e841 2300 	strex	r3, r2, [r1]
 8004236:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1e3      	bne.n	8004206 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2220      	movs	r2, #32
 8004242:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004252:	e853 3f00 	ldrex	r3, [r3]
 8004256:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800425a:	f023 0310 	bic.w	r3, r3, #16
 800425e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800426c:	65bb      	str	r3, [r7, #88]	; 0x58
 800426e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004270:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004272:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004274:	e841 2300 	strex	r3, r2, [r1]
 8004278:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800427a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1e4      	bne.n	800424a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004284:	4618      	mov	r0, r3
 8004286:	f7fd ff52 	bl	800212e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004296:	b29b      	uxth	r3, r3
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	b29b      	uxth	r3, r3
 800429c:	4619      	mov	r1, r3
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f8d4 	bl	800444c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80042a4:	e0b5      	b.n	8004412 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 80a7 	beq.w	8004416 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80042c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 80a2 	beq.w	8004416 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042da:	e853 3f00 	ldrex	r3, [r3]
 80042de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	461a      	mov	r2, r3
 80042f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042f4:	647b      	str	r3, [r7, #68]	; 0x44
 80042f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042fc:	e841 2300 	strex	r3, r2, [r1]
 8004300:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1e4      	bne.n	80042d2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	3308      	adds	r3, #8
 800430e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004312:	e853 3f00 	ldrex	r3, [r3]
 8004316:	623b      	str	r3, [r7, #32]
   return(result);
 8004318:	6a3b      	ldr	r3, [r7, #32]
 800431a:	f023 0301 	bic.w	r3, r3, #1
 800431e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	3308      	adds	r3, #8
 8004328:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800432c:	633a      	str	r2, [r7, #48]	; 0x30
 800432e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004330:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004332:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004334:	e841 2300 	strex	r3, r2, [r1]
 8004338:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800433a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1e3      	bne.n	8004308 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2220      	movs	r2, #32
 8004344:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	e853 3f00 	ldrex	r3, [r3]
 800435e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0310 	bic.w	r3, r3, #16
 8004366:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	461a      	mov	r2, r3
 8004370:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004374:	61fb      	str	r3, [r7, #28]
 8004376:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004378:	69b9      	ldr	r1, [r7, #24]
 800437a:	69fa      	ldr	r2, [r7, #28]
 800437c:	e841 2300 	strex	r3, r2, [r1]
 8004380:	617b      	str	r3, [r7, #20]
   return(result);
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e4      	bne.n	8004352 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004388:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800438c:	4619      	mov	r1, r3
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f85c 	bl	800444c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004394:	e03f      	b.n	8004416 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800439a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00e      	beq.n	80043c0 <HAL_UART_IRQHandler+0x560>
 80043a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d008      	beq.n	80043c0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80043b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 fe01 	bl	8004fc0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80043be:	e02d      	b.n	800441c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80043c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00e      	beq.n	80043ea <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80043cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d008      	beq.n	80043ea <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d01c      	beq.n	800441a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	4798      	blx	r3
    }
    return;
 80043e8:	e017      	b.n	800441a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80043ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d012      	beq.n	800441c <HAL_UART_IRQHandler+0x5bc>
 80043f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00c      	beq.n	800441c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fdb2 	bl	8004f6c <UART_EndTransmit_IT>
    return;
 8004408:	e008      	b.n	800441c <HAL_UART_IRQHandler+0x5bc>
      return;
 800440a:	bf00      	nop
 800440c:	e006      	b.n	800441c <HAL_UART_IRQHandler+0x5bc>
    return;
 800440e:	bf00      	nop
 8004410:	e004      	b.n	800441c <HAL_UART_IRQHandler+0x5bc>
      return;
 8004412:	bf00      	nop
 8004414:	e002      	b.n	800441c <HAL_UART_IRQHandler+0x5bc>
      return;
 8004416:	bf00      	nop
 8004418:	e000      	b.n	800441c <HAL_UART_IRQHandler+0x5bc>
    return;
 800441a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800441c:	37e8      	adds	r7, #232	; 0xe8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop

08004424 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	460b      	mov	r3, r1
 8004456:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8004464:	b480      	push	{r7}
 8004466:	b08f      	sub	sp, #60	; 0x3c
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004472:	2b01      	cmp	r3, #1
 8004474:	d101      	bne.n	800447a <HAL_HalfDuplex_EnableTransmitter+0x16>
 8004476:	2302      	movs	r3, #2
 8004478:	e040      	b.n	80044fc <HAL_HalfDuplex_EnableTransmitter+0x98>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2224      	movs	r2, #36	; 0x24
 8004486:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	e853 3f00 	ldrex	r3, [r3]
 8004494:	61fb      	str	r3, [r7, #28]
   return(result);
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	f023 030c 	bic.w	r3, r3, #12
 800449c:	637b      	str	r3, [r7, #52]	; 0x34
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044a8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044ae:	e841 2300 	strex	r3, r2, [r1]
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1e6      	bne.n	8004488 <HAL_HalfDuplex_EnableTransmitter+0x24>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	e853 3f00 	ldrex	r3, [r3]
 80044c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f043 0308 	orr.w	r3, r3, #8
 80044ce:	633b      	str	r3, [r7, #48]	; 0x30
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	461a      	mov	r2, r3
 80044d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d8:	61bb      	str	r3, [r7, #24]
 80044da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044dc:	6979      	ldr	r1, [r7, #20]
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	e841 2300 	strex	r3, r2, [r1]
 80044e4:	613b      	str	r3, [r7, #16]
   return(result);
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e6      	bne.n	80044ba <HAL_HalfDuplex_EnableTransmitter+0x56>

  huart->gState = HAL_UART_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2220      	movs	r2, #32
 80044f0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	373c      	adds	r7, #60	; 0x3c
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8004508:	b480      	push	{r7}
 800450a:	b08f      	sub	sp, #60	; 0x3c
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004516:	2b01      	cmp	r3, #1
 8004518:	d101      	bne.n	800451e <HAL_HalfDuplex_EnableReceiver+0x16>
 800451a:	2302      	movs	r3, #2
 800451c:	e040      	b.n	80045a0 <HAL_HalfDuplex_EnableReceiver+0x98>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2224      	movs	r2, #36	; 0x24
 800452a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004532:	6a3b      	ldr	r3, [r7, #32]
 8004534:	e853 3f00 	ldrex	r3, [r3]
 8004538:	61fb      	str	r3, [r7, #28]
   return(result);
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	f023 030c 	bic.w	r3, r3, #12
 8004540:	637b      	str	r3, [r7, #52]	; 0x34
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	461a      	mov	r2, r3
 8004548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800454a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800454c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004552:	e841 2300 	strex	r3, r2, [r1]
 8004556:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1e6      	bne.n	800452c <HAL_HalfDuplex_EnableReceiver+0x24>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	e853 3f00 	ldrex	r3, [r3]
 800456a:	60bb      	str	r3, [r7, #8]
   return(result);
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f043 0304 	orr.w	r3, r3, #4
 8004572:	633b      	str	r3, [r7, #48]	; 0x30
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	461a      	mov	r2, r3
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	61bb      	str	r3, [r7, #24]
 800457e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004580:	6979      	ldr	r1, [r7, #20]
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	e841 2300 	strex	r3, r2, [r1]
 8004588:	613b      	str	r3, [r7, #16]
   return(result);
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1e6      	bne.n	800455e <HAL_HalfDuplex_EnableReceiver+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	373c      	adds	r7, #60	; 0x3c
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045b0:	b08a      	sub	sp, #40	; 0x28
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	431a      	orrs	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	431a      	orrs	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	4ba4      	ldr	r3, [pc, #656]	; (800486c <UART_SetConfig+0x2c0>)
 80045dc:	4013      	ands	r3, r2
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	6812      	ldr	r2, [r2, #0]
 80045e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045e4:	430b      	orrs	r3, r1
 80045e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a99      	ldr	r2, [pc, #612]	; (8004870 <UART_SetConfig+0x2c4>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d004      	beq.n	8004618 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004614:	4313      	orrs	r3, r2
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004628:	430a      	orrs	r2, r1
 800462a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a90      	ldr	r2, [pc, #576]	; (8004874 <UART_SetConfig+0x2c8>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d126      	bne.n	8004684 <UART_SetConfig+0xd8>
 8004636:	4b90      	ldr	r3, [pc, #576]	; (8004878 <UART_SetConfig+0x2cc>)
 8004638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463c:	f003 0303 	and.w	r3, r3, #3
 8004640:	2b03      	cmp	r3, #3
 8004642:	d81b      	bhi.n	800467c <UART_SetConfig+0xd0>
 8004644:	a201      	add	r2, pc, #4	; (adr r2, 800464c <UART_SetConfig+0xa0>)
 8004646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464a:	bf00      	nop
 800464c:	0800465d 	.word	0x0800465d
 8004650:	0800466d 	.word	0x0800466d
 8004654:	08004665 	.word	0x08004665
 8004658:	08004675 	.word	0x08004675
 800465c:	2301      	movs	r3, #1
 800465e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004662:	e116      	b.n	8004892 <UART_SetConfig+0x2e6>
 8004664:	2302      	movs	r3, #2
 8004666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800466a:	e112      	b.n	8004892 <UART_SetConfig+0x2e6>
 800466c:	2304      	movs	r3, #4
 800466e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004672:	e10e      	b.n	8004892 <UART_SetConfig+0x2e6>
 8004674:	2308      	movs	r3, #8
 8004676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800467a:	e10a      	b.n	8004892 <UART_SetConfig+0x2e6>
 800467c:	2310      	movs	r3, #16
 800467e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004682:	e106      	b.n	8004892 <UART_SetConfig+0x2e6>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a7c      	ldr	r2, [pc, #496]	; (800487c <UART_SetConfig+0x2d0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d138      	bne.n	8004700 <UART_SetConfig+0x154>
 800468e:	4b7a      	ldr	r3, [pc, #488]	; (8004878 <UART_SetConfig+0x2cc>)
 8004690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004694:	f003 030c 	and.w	r3, r3, #12
 8004698:	2b0c      	cmp	r3, #12
 800469a:	d82d      	bhi.n	80046f8 <UART_SetConfig+0x14c>
 800469c:	a201      	add	r2, pc, #4	; (adr r2, 80046a4 <UART_SetConfig+0xf8>)
 800469e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a2:	bf00      	nop
 80046a4:	080046d9 	.word	0x080046d9
 80046a8:	080046f9 	.word	0x080046f9
 80046ac:	080046f9 	.word	0x080046f9
 80046b0:	080046f9 	.word	0x080046f9
 80046b4:	080046e9 	.word	0x080046e9
 80046b8:	080046f9 	.word	0x080046f9
 80046bc:	080046f9 	.word	0x080046f9
 80046c0:	080046f9 	.word	0x080046f9
 80046c4:	080046e1 	.word	0x080046e1
 80046c8:	080046f9 	.word	0x080046f9
 80046cc:	080046f9 	.word	0x080046f9
 80046d0:	080046f9 	.word	0x080046f9
 80046d4:	080046f1 	.word	0x080046f1
 80046d8:	2300      	movs	r3, #0
 80046da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046de:	e0d8      	b.n	8004892 <UART_SetConfig+0x2e6>
 80046e0:	2302      	movs	r3, #2
 80046e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046e6:	e0d4      	b.n	8004892 <UART_SetConfig+0x2e6>
 80046e8:	2304      	movs	r3, #4
 80046ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ee:	e0d0      	b.n	8004892 <UART_SetConfig+0x2e6>
 80046f0:	2308      	movs	r3, #8
 80046f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046f6:	e0cc      	b.n	8004892 <UART_SetConfig+0x2e6>
 80046f8:	2310      	movs	r3, #16
 80046fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046fe:	e0c8      	b.n	8004892 <UART_SetConfig+0x2e6>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a5e      	ldr	r2, [pc, #376]	; (8004880 <UART_SetConfig+0x2d4>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d125      	bne.n	8004756 <UART_SetConfig+0x1aa>
 800470a:	4b5b      	ldr	r3, [pc, #364]	; (8004878 <UART_SetConfig+0x2cc>)
 800470c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004710:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004714:	2b30      	cmp	r3, #48	; 0x30
 8004716:	d016      	beq.n	8004746 <UART_SetConfig+0x19a>
 8004718:	2b30      	cmp	r3, #48	; 0x30
 800471a:	d818      	bhi.n	800474e <UART_SetConfig+0x1a2>
 800471c:	2b20      	cmp	r3, #32
 800471e:	d00a      	beq.n	8004736 <UART_SetConfig+0x18a>
 8004720:	2b20      	cmp	r3, #32
 8004722:	d814      	bhi.n	800474e <UART_SetConfig+0x1a2>
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <UART_SetConfig+0x182>
 8004728:	2b10      	cmp	r3, #16
 800472a:	d008      	beq.n	800473e <UART_SetConfig+0x192>
 800472c:	e00f      	b.n	800474e <UART_SetConfig+0x1a2>
 800472e:	2300      	movs	r3, #0
 8004730:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004734:	e0ad      	b.n	8004892 <UART_SetConfig+0x2e6>
 8004736:	2302      	movs	r3, #2
 8004738:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800473c:	e0a9      	b.n	8004892 <UART_SetConfig+0x2e6>
 800473e:	2304      	movs	r3, #4
 8004740:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004744:	e0a5      	b.n	8004892 <UART_SetConfig+0x2e6>
 8004746:	2308      	movs	r3, #8
 8004748:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800474c:	e0a1      	b.n	8004892 <UART_SetConfig+0x2e6>
 800474e:	2310      	movs	r3, #16
 8004750:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004754:	e09d      	b.n	8004892 <UART_SetConfig+0x2e6>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a4a      	ldr	r2, [pc, #296]	; (8004884 <UART_SetConfig+0x2d8>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d125      	bne.n	80047ac <UART_SetConfig+0x200>
 8004760:	4b45      	ldr	r3, [pc, #276]	; (8004878 <UART_SetConfig+0x2cc>)
 8004762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004766:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800476a:	2bc0      	cmp	r3, #192	; 0xc0
 800476c:	d016      	beq.n	800479c <UART_SetConfig+0x1f0>
 800476e:	2bc0      	cmp	r3, #192	; 0xc0
 8004770:	d818      	bhi.n	80047a4 <UART_SetConfig+0x1f8>
 8004772:	2b80      	cmp	r3, #128	; 0x80
 8004774:	d00a      	beq.n	800478c <UART_SetConfig+0x1e0>
 8004776:	2b80      	cmp	r3, #128	; 0x80
 8004778:	d814      	bhi.n	80047a4 <UART_SetConfig+0x1f8>
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <UART_SetConfig+0x1d8>
 800477e:	2b40      	cmp	r3, #64	; 0x40
 8004780:	d008      	beq.n	8004794 <UART_SetConfig+0x1e8>
 8004782:	e00f      	b.n	80047a4 <UART_SetConfig+0x1f8>
 8004784:	2300      	movs	r3, #0
 8004786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800478a:	e082      	b.n	8004892 <UART_SetConfig+0x2e6>
 800478c:	2302      	movs	r3, #2
 800478e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004792:	e07e      	b.n	8004892 <UART_SetConfig+0x2e6>
 8004794:	2304      	movs	r3, #4
 8004796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800479a:	e07a      	b.n	8004892 <UART_SetConfig+0x2e6>
 800479c:	2308      	movs	r3, #8
 800479e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047a2:	e076      	b.n	8004892 <UART_SetConfig+0x2e6>
 80047a4:	2310      	movs	r3, #16
 80047a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047aa:	e072      	b.n	8004892 <UART_SetConfig+0x2e6>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a35      	ldr	r2, [pc, #212]	; (8004888 <UART_SetConfig+0x2dc>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d12a      	bne.n	800480c <UART_SetConfig+0x260>
 80047b6:	4b30      	ldr	r3, [pc, #192]	; (8004878 <UART_SetConfig+0x2cc>)
 80047b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047c4:	d01a      	beq.n	80047fc <UART_SetConfig+0x250>
 80047c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047ca:	d81b      	bhi.n	8004804 <UART_SetConfig+0x258>
 80047cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047d0:	d00c      	beq.n	80047ec <UART_SetConfig+0x240>
 80047d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047d6:	d815      	bhi.n	8004804 <UART_SetConfig+0x258>
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d003      	beq.n	80047e4 <UART_SetConfig+0x238>
 80047dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047e0:	d008      	beq.n	80047f4 <UART_SetConfig+0x248>
 80047e2:	e00f      	b.n	8004804 <UART_SetConfig+0x258>
 80047e4:	2300      	movs	r3, #0
 80047e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ea:	e052      	b.n	8004892 <UART_SetConfig+0x2e6>
 80047ec:	2302      	movs	r3, #2
 80047ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f2:	e04e      	b.n	8004892 <UART_SetConfig+0x2e6>
 80047f4:	2304      	movs	r3, #4
 80047f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047fa:	e04a      	b.n	8004892 <UART_SetConfig+0x2e6>
 80047fc:	2308      	movs	r3, #8
 80047fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004802:	e046      	b.n	8004892 <UART_SetConfig+0x2e6>
 8004804:	2310      	movs	r3, #16
 8004806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800480a:	e042      	b.n	8004892 <UART_SetConfig+0x2e6>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a17      	ldr	r2, [pc, #92]	; (8004870 <UART_SetConfig+0x2c4>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d13a      	bne.n	800488c <UART_SetConfig+0x2e0>
 8004816:	4b18      	ldr	r3, [pc, #96]	; (8004878 <UART_SetConfig+0x2cc>)
 8004818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004820:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004824:	d01a      	beq.n	800485c <UART_SetConfig+0x2b0>
 8004826:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800482a:	d81b      	bhi.n	8004864 <UART_SetConfig+0x2b8>
 800482c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004830:	d00c      	beq.n	800484c <UART_SetConfig+0x2a0>
 8004832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004836:	d815      	bhi.n	8004864 <UART_SetConfig+0x2b8>
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <UART_SetConfig+0x298>
 800483c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004840:	d008      	beq.n	8004854 <UART_SetConfig+0x2a8>
 8004842:	e00f      	b.n	8004864 <UART_SetConfig+0x2b8>
 8004844:	2300      	movs	r3, #0
 8004846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800484a:	e022      	b.n	8004892 <UART_SetConfig+0x2e6>
 800484c:	2302      	movs	r3, #2
 800484e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004852:	e01e      	b.n	8004892 <UART_SetConfig+0x2e6>
 8004854:	2304      	movs	r3, #4
 8004856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800485a:	e01a      	b.n	8004892 <UART_SetConfig+0x2e6>
 800485c:	2308      	movs	r3, #8
 800485e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004862:	e016      	b.n	8004892 <UART_SetConfig+0x2e6>
 8004864:	2310      	movs	r3, #16
 8004866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800486a:	e012      	b.n	8004892 <UART_SetConfig+0x2e6>
 800486c:	efff69f3 	.word	0xefff69f3
 8004870:	40008000 	.word	0x40008000
 8004874:	40013800 	.word	0x40013800
 8004878:	40021000 	.word	0x40021000
 800487c:	40004400 	.word	0x40004400
 8004880:	40004800 	.word	0x40004800
 8004884:	40004c00 	.word	0x40004c00
 8004888:	40005000 	.word	0x40005000
 800488c:	2310      	movs	r3, #16
 800488e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a9f      	ldr	r2, [pc, #636]	; (8004b14 <UART_SetConfig+0x568>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d17a      	bne.n	8004992 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800489c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d824      	bhi.n	80048ee <UART_SetConfig+0x342>
 80048a4:	a201      	add	r2, pc, #4	; (adr r2, 80048ac <UART_SetConfig+0x300>)
 80048a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048aa:	bf00      	nop
 80048ac:	080048d1 	.word	0x080048d1
 80048b0:	080048ef 	.word	0x080048ef
 80048b4:	080048d9 	.word	0x080048d9
 80048b8:	080048ef 	.word	0x080048ef
 80048bc:	080048df 	.word	0x080048df
 80048c0:	080048ef 	.word	0x080048ef
 80048c4:	080048ef 	.word	0x080048ef
 80048c8:	080048ef 	.word	0x080048ef
 80048cc:	080048e7 	.word	0x080048e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048d0:	f7fe fc46 	bl	8003160 <HAL_RCC_GetPCLK1Freq>
 80048d4:	61f8      	str	r0, [r7, #28]
        break;
 80048d6:	e010      	b.n	80048fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048d8:	4b8f      	ldr	r3, [pc, #572]	; (8004b18 <UART_SetConfig+0x56c>)
 80048da:	61fb      	str	r3, [r7, #28]
        break;
 80048dc:	e00d      	b.n	80048fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048de:	f7fe fba7 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 80048e2:	61f8      	str	r0, [r7, #28]
        break;
 80048e4:	e009      	b.n	80048fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ea:	61fb      	str	r3, [r7, #28]
        break;
 80048ec:	e005      	b.n	80048fa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80048ee:	2300      	movs	r3, #0
 80048f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80048f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 80fb 	beq.w	8004af8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	4613      	mov	r3, r2
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	4413      	add	r3, r2
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	429a      	cmp	r2, r3
 8004910:	d305      	bcc.n	800491e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004918:	69fa      	ldr	r2, [r7, #28]
 800491a:	429a      	cmp	r2, r3
 800491c:	d903      	bls.n	8004926 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004924:	e0e8      	b.n	8004af8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	2200      	movs	r2, #0
 800492a:	461c      	mov	r4, r3
 800492c:	4615      	mov	r5, r2
 800492e:	f04f 0200 	mov.w	r2, #0
 8004932:	f04f 0300 	mov.w	r3, #0
 8004936:	022b      	lsls	r3, r5, #8
 8004938:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800493c:	0222      	lsls	r2, r4, #8
 800493e:	68f9      	ldr	r1, [r7, #12]
 8004940:	6849      	ldr	r1, [r1, #4]
 8004942:	0849      	lsrs	r1, r1, #1
 8004944:	2000      	movs	r0, #0
 8004946:	4688      	mov	r8, r1
 8004948:	4681      	mov	r9, r0
 800494a:	eb12 0a08 	adds.w	sl, r2, r8
 800494e:	eb43 0b09 	adc.w	fp, r3, r9
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	603b      	str	r3, [r7, #0]
 800495a:	607a      	str	r2, [r7, #4]
 800495c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004960:	4650      	mov	r0, sl
 8004962:	4659      	mov	r1, fp
 8004964:	f7fb fc30 	bl	80001c8 <__aeabi_uldivmod>
 8004968:	4602      	mov	r2, r0
 800496a:	460b      	mov	r3, r1
 800496c:	4613      	mov	r3, r2
 800496e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004976:	d308      	bcc.n	800498a <UART_SetConfig+0x3de>
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800497e:	d204      	bcs.n	800498a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	60da      	str	r2, [r3, #12]
 8004988:	e0b6      	b.n	8004af8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004990:	e0b2      	b.n	8004af8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800499a:	d15e      	bne.n	8004a5a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800499c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	d828      	bhi.n	80049f6 <UART_SetConfig+0x44a>
 80049a4:	a201      	add	r2, pc, #4	; (adr r2, 80049ac <UART_SetConfig+0x400>)
 80049a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049aa:	bf00      	nop
 80049ac:	080049d1 	.word	0x080049d1
 80049b0:	080049d9 	.word	0x080049d9
 80049b4:	080049e1 	.word	0x080049e1
 80049b8:	080049f7 	.word	0x080049f7
 80049bc:	080049e7 	.word	0x080049e7
 80049c0:	080049f7 	.word	0x080049f7
 80049c4:	080049f7 	.word	0x080049f7
 80049c8:	080049f7 	.word	0x080049f7
 80049cc:	080049ef 	.word	0x080049ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049d0:	f7fe fbc6 	bl	8003160 <HAL_RCC_GetPCLK1Freq>
 80049d4:	61f8      	str	r0, [r7, #28]
        break;
 80049d6:	e014      	b.n	8004a02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049d8:	f7fe fbd8 	bl	800318c <HAL_RCC_GetPCLK2Freq>
 80049dc:	61f8      	str	r0, [r7, #28]
        break;
 80049de:	e010      	b.n	8004a02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049e0:	4b4d      	ldr	r3, [pc, #308]	; (8004b18 <UART_SetConfig+0x56c>)
 80049e2:	61fb      	str	r3, [r7, #28]
        break;
 80049e4:	e00d      	b.n	8004a02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049e6:	f7fe fb23 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 80049ea:	61f8      	str	r0, [r7, #28]
        break;
 80049ec:	e009      	b.n	8004a02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049f2:	61fb      	str	r3, [r7, #28]
        break;
 80049f4:	e005      	b.n	8004a02 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d077      	beq.n	8004af8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	005a      	lsls	r2, r3, #1
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	085b      	lsrs	r3, r3, #1
 8004a12:	441a      	add	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	2b0f      	cmp	r3, #15
 8004a22:	d916      	bls.n	8004a52 <UART_SetConfig+0x4a6>
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a2a:	d212      	bcs.n	8004a52 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	f023 030f 	bic.w	r3, r3, #15
 8004a34:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	085b      	lsrs	r3, r3, #1
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	8afb      	ldrh	r3, [r7, #22]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	8afa      	ldrh	r2, [r7, #22]
 8004a4e:	60da      	str	r2, [r3, #12]
 8004a50:	e052      	b.n	8004af8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a58:	e04e      	b.n	8004af8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a5e:	2b08      	cmp	r3, #8
 8004a60:	d827      	bhi.n	8004ab2 <UART_SetConfig+0x506>
 8004a62:	a201      	add	r2, pc, #4	; (adr r2, 8004a68 <UART_SetConfig+0x4bc>)
 8004a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a68:	08004a8d 	.word	0x08004a8d
 8004a6c:	08004a95 	.word	0x08004a95
 8004a70:	08004a9d 	.word	0x08004a9d
 8004a74:	08004ab3 	.word	0x08004ab3
 8004a78:	08004aa3 	.word	0x08004aa3
 8004a7c:	08004ab3 	.word	0x08004ab3
 8004a80:	08004ab3 	.word	0x08004ab3
 8004a84:	08004ab3 	.word	0x08004ab3
 8004a88:	08004aab 	.word	0x08004aab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a8c:	f7fe fb68 	bl	8003160 <HAL_RCC_GetPCLK1Freq>
 8004a90:	61f8      	str	r0, [r7, #28]
        break;
 8004a92:	e014      	b.n	8004abe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a94:	f7fe fb7a 	bl	800318c <HAL_RCC_GetPCLK2Freq>
 8004a98:	61f8      	str	r0, [r7, #28]
        break;
 8004a9a:	e010      	b.n	8004abe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a9c:	4b1e      	ldr	r3, [pc, #120]	; (8004b18 <UART_SetConfig+0x56c>)
 8004a9e:	61fb      	str	r3, [r7, #28]
        break;
 8004aa0:	e00d      	b.n	8004abe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aa2:	f7fe fac5 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 8004aa6:	61f8      	str	r0, [r7, #28]
        break;
 8004aa8:	e009      	b.n	8004abe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aae:	61fb      	str	r3, [r7, #28]
        break;
 8004ab0:	e005      	b.n	8004abe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004abc:	bf00      	nop
    }

    if (pclk != 0U)
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d019      	beq.n	8004af8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	085a      	lsrs	r2, r3, #1
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	441a      	add	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	2b0f      	cmp	r3, #15
 8004adc:	d909      	bls.n	8004af2 <UART_SetConfig+0x546>
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae4:	d205      	bcs.n	8004af2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	60da      	str	r2, [r3, #12]
 8004af0:	e002      	b.n	8004af8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004b04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3728      	adds	r7, #40	; 0x28
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b12:	bf00      	nop
 8004b14:	40008000 	.word	0x40008000
 8004b18:	00f42400 	.word	0x00f42400

08004b1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00a      	beq.n	8004b46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00a      	beq.n	8004b8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00a      	beq.n	8004bac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb0:	f003 0310 	and.w	r3, r3, #16
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00a      	beq.n	8004bce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	f003 0320 	and.w	r3, r3, #32
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d01a      	beq.n	8004c32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c1a:	d10a      	bne.n	8004c32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	605a      	str	r2, [r3, #4]
  }
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af02      	add	r7, sp, #8
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c70:	f7fc f974 	bl	8000f5c <HAL_GetTick>
 8004c74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0308 	and.w	r3, r3, #8
 8004c80:	2b08      	cmp	r3, #8
 8004c82:	d10e      	bne.n	8004ca2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f82d 	bl	8004cf2 <UART_WaitOnFlagUntilTimeout>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e023      	b.n	8004cea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b04      	cmp	r3, #4
 8004cae:	d10e      	bne.n	8004cce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f817 	bl	8004cf2 <UART_WaitOnFlagUntilTimeout>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e00d      	b.n	8004cea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b09c      	sub	sp, #112	; 0x70
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	60f8      	str	r0, [r7, #12]
 8004cfa:	60b9      	str	r1, [r7, #8]
 8004cfc:	603b      	str	r3, [r7, #0]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d02:	e0a5      	b.n	8004e50 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d0a:	f000 80a1 	beq.w	8004e50 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d0e:	f7fc f925 	bl	8000f5c <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d302      	bcc.n	8004d24 <UART_WaitOnFlagUntilTimeout+0x32>
 8004d1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d13e      	bne.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d2c:	e853 3f00 	ldrex	r3, [r3]
 8004d30:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d38:	667b      	str	r3, [r7, #100]	; 0x64
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d44:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d4a:	e841 2300 	strex	r3, r2, [r1]
 8004d4e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1e6      	bne.n	8004d24 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3308      	adds	r3, #8
 8004d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d60:	e853 3f00 	ldrex	r3, [r3]
 8004d64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d68:	f023 0301 	bic.w	r3, r3, #1
 8004d6c:	663b      	str	r3, [r7, #96]	; 0x60
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	3308      	adds	r3, #8
 8004d74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d76:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d78:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d7e:	e841 2300 	strex	r3, r2, [r1]
 8004d82:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1e5      	bne.n	8004d56 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2220      	movs	r2, #32
 8004d94:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e067      	b.n	8004e72 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d04f      	beq.n	8004e50 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dbe:	d147      	bne.n	8004e50 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dc8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd2:	e853 3f00 	ldrex	r3, [r3]
 8004dd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	461a      	mov	r2, r3
 8004de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004df0:	e841 2300 	strex	r3, r2, [r1]
 8004df4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1e6      	bne.n	8004dca <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3308      	adds	r3, #8
 8004e02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	e853 3f00 	ldrex	r3, [r3]
 8004e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	f023 0301 	bic.w	r3, r3, #1
 8004e12:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3308      	adds	r3, #8
 8004e1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e1c:	623a      	str	r2, [r7, #32]
 8004e1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e20:	69f9      	ldr	r1, [r7, #28]
 8004e22:	6a3a      	ldr	r2, [r7, #32]
 8004e24:	e841 2300 	strex	r3, r2, [r1]
 8004e28:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1e5      	bne.n	8004dfc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2220      	movs	r2, #32
 8004e34:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e010      	b.n	8004e72 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	69da      	ldr	r2, [r3, #28]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	bf0c      	ite	eq
 8004e60:	2301      	moveq	r3, #1
 8004e62:	2300      	movne	r3, #0
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	461a      	mov	r2, r3
 8004e68:	79fb      	ldrb	r3, [r7, #7]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	f43f af4a 	beq.w	8004d04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3770      	adds	r7, #112	; 0x70
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b095      	sub	sp, #84	; 0x54
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e8a:	e853 3f00 	ldrex	r3, [r3]
 8004e8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ea0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ea2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ea6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ea8:	e841 2300 	strex	r3, r2, [r1]
 8004eac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1e6      	bne.n	8004e82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	3308      	adds	r3, #8
 8004eba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	e853 3f00 	ldrex	r3, [r3]
 8004ec2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	f023 0301 	bic.w	r3, r3, #1
 8004eca:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	3308      	adds	r3, #8
 8004ed2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ed4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ed6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004edc:	e841 2300 	strex	r3, r2, [r1]
 8004ee0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e5      	bne.n	8004eb4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d118      	bne.n	8004f22 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	e853 3f00 	ldrex	r3, [r3]
 8004efc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	f023 0310 	bic.w	r3, r3, #16
 8004f04:	647b      	str	r3, [r7, #68]	; 0x44
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f0e:	61bb      	str	r3, [r7, #24]
 8004f10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f12:	6979      	ldr	r1, [r7, #20]
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	e841 2300 	strex	r3, r2, [r1]
 8004f1a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1e6      	bne.n	8004ef0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2220      	movs	r2, #32
 8004f26:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004f34:	bf00      	nop
 8004f36:	3754      	adds	r7, #84	; 0x54
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f7ff fa6a 	bl	8004438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f64:	bf00      	nop
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b088      	sub	sp, #32
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	e853 3f00 	ldrex	r3, [r3]
 8004f80:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f88:	61fb      	str	r3, [r7, #28]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	461a      	mov	r2, r3
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	61bb      	str	r3, [r7, #24]
 8004f94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f96:	6979      	ldr	r1, [r7, #20]
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	e841 2300 	strex	r3, r2, [r1]
 8004f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1e6      	bne.n	8004f74 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7ff fa36 	bl	8004424 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fb8:	bf00      	nop
 8004fba:	3720      	adds	r7, #32
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <__errno>:
 8004fd4:	4b01      	ldr	r3, [pc, #4]	; (8004fdc <__errno+0x8>)
 8004fd6:	6818      	ldr	r0, [r3, #0]
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	2000000c 	.word	0x2000000c

08004fe0 <__libc_init_array>:
 8004fe0:	b570      	push	{r4, r5, r6, lr}
 8004fe2:	4d0d      	ldr	r5, [pc, #52]	; (8005018 <__libc_init_array+0x38>)
 8004fe4:	4c0d      	ldr	r4, [pc, #52]	; (800501c <__libc_init_array+0x3c>)
 8004fe6:	1b64      	subs	r4, r4, r5
 8004fe8:	10a4      	asrs	r4, r4, #2
 8004fea:	2600      	movs	r6, #0
 8004fec:	42a6      	cmp	r6, r4
 8004fee:	d109      	bne.n	8005004 <__libc_init_array+0x24>
 8004ff0:	4d0b      	ldr	r5, [pc, #44]	; (8005020 <__libc_init_array+0x40>)
 8004ff2:	4c0c      	ldr	r4, [pc, #48]	; (8005024 <__libc_init_array+0x44>)
 8004ff4:	f000 fd1e 	bl	8005a34 <_init>
 8004ff8:	1b64      	subs	r4, r4, r5
 8004ffa:	10a4      	asrs	r4, r4, #2
 8004ffc:	2600      	movs	r6, #0
 8004ffe:	42a6      	cmp	r6, r4
 8005000:	d105      	bne.n	800500e <__libc_init_array+0x2e>
 8005002:	bd70      	pop	{r4, r5, r6, pc}
 8005004:	f855 3b04 	ldr.w	r3, [r5], #4
 8005008:	4798      	blx	r3
 800500a:	3601      	adds	r6, #1
 800500c:	e7ee      	b.n	8004fec <__libc_init_array+0xc>
 800500e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005012:	4798      	blx	r3
 8005014:	3601      	adds	r6, #1
 8005016:	e7f2      	b.n	8004ffe <__libc_init_array+0x1e>
 8005018:	08005b10 	.word	0x08005b10
 800501c:	08005b10 	.word	0x08005b10
 8005020:	08005b10 	.word	0x08005b10
 8005024:	08005b14 	.word	0x08005b14

08005028 <memset>:
 8005028:	4402      	add	r2, r0
 800502a:	4603      	mov	r3, r0
 800502c:	4293      	cmp	r3, r2
 800502e:	d100      	bne.n	8005032 <memset+0xa>
 8005030:	4770      	bx	lr
 8005032:	f803 1b01 	strb.w	r1, [r3], #1
 8005036:	e7f9      	b.n	800502c <memset+0x4>

08005038 <_puts_r>:
 8005038:	b570      	push	{r4, r5, r6, lr}
 800503a:	460e      	mov	r6, r1
 800503c:	4605      	mov	r5, r0
 800503e:	b118      	cbz	r0, 8005048 <_puts_r+0x10>
 8005040:	6983      	ldr	r3, [r0, #24]
 8005042:	b90b      	cbnz	r3, 8005048 <_puts_r+0x10>
 8005044:	f000 fa48 	bl	80054d8 <__sinit>
 8005048:	69ab      	ldr	r3, [r5, #24]
 800504a:	68ac      	ldr	r4, [r5, #8]
 800504c:	b913      	cbnz	r3, 8005054 <_puts_r+0x1c>
 800504e:	4628      	mov	r0, r5
 8005050:	f000 fa42 	bl	80054d8 <__sinit>
 8005054:	4b2c      	ldr	r3, [pc, #176]	; (8005108 <_puts_r+0xd0>)
 8005056:	429c      	cmp	r4, r3
 8005058:	d120      	bne.n	800509c <_puts_r+0x64>
 800505a:	686c      	ldr	r4, [r5, #4]
 800505c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800505e:	07db      	lsls	r3, r3, #31
 8005060:	d405      	bmi.n	800506e <_puts_r+0x36>
 8005062:	89a3      	ldrh	r3, [r4, #12]
 8005064:	0598      	lsls	r0, r3, #22
 8005066:	d402      	bmi.n	800506e <_puts_r+0x36>
 8005068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800506a:	f000 fad3 	bl	8005614 <__retarget_lock_acquire_recursive>
 800506e:	89a3      	ldrh	r3, [r4, #12]
 8005070:	0719      	lsls	r1, r3, #28
 8005072:	d51d      	bpl.n	80050b0 <_puts_r+0x78>
 8005074:	6923      	ldr	r3, [r4, #16]
 8005076:	b1db      	cbz	r3, 80050b0 <_puts_r+0x78>
 8005078:	3e01      	subs	r6, #1
 800507a:	68a3      	ldr	r3, [r4, #8]
 800507c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005080:	3b01      	subs	r3, #1
 8005082:	60a3      	str	r3, [r4, #8]
 8005084:	bb39      	cbnz	r1, 80050d6 <_puts_r+0x9e>
 8005086:	2b00      	cmp	r3, #0
 8005088:	da38      	bge.n	80050fc <_puts_r+0xc4>
 800508a:	4622      	mov	r2, r4
 800508c:	210a      	movs	r1, #10
 800508e:	4628      	mov	r0, r5
 8005090:	f000 f848 	bl	8005124 <__swbuf_r>
 8005094:	3001      	adds	r0, #1
 8005096:	d011      	beq.n	80050bc <_puts_r+0x84>
 8005098:	250a      	movs	r5, #10
 800509a:	e011      	b.n	80050c0 <_puts_r+0x88>
 800509c:	4b1b      	ldr	r3, [pc, #108]	; (800510c <_puts_r+0xd4>)
 800509e:	429c      	cmp	r4, r3
 80050a0:	d101      	bne.n	80050a6 <_puts_r+0x6e>
 80050a2:	68ac      	ldr	r4, [r5, #8]
 80050a4:	e7da      	b.n	800505c <_puts_r+0x24>
 80050a6:	4b1a      	ldr	r3, [pc, #104]	; (8005110 <_puts_r+0xd8>)
 80050a8:	429c      	cmp	r4, r3
 80050aa:	bf08      	it	eq
 80050ac:	68ec      	ldreq	r4, [r5, #12]
 80050ae:	e7d5      	b.n	800505c <_puts_r+0x24>
 80050b0:	4621      	mov	r1, r4
 80050b2:	4628      	mov	r0, r5
 80050b4:	f000 f888 	bl	80051c8 <__swsetup_r>
 80050b8:	2800      	cmp	r0, #0
 80050ba:	d0dd      	beq.n	8005078 <_puts_r+0x40>
 80050bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80050c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050c2:	07da      	lsls	r2, r3, #31
 80050c4:	d405      	bmi.n	80050d2 <_puts_r+0x9a>
 80050c6:	89a3      	ldrh	r3, [r4, #12]
 80050c8:	059b      	lsls	r3, r3, #22
 80050ca:	d402      	bmi.n	80050d2 <_puts_r+0x9a>
 80050cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050ce:	f000 faa2 	bl	8005616 <__retarget_lock_release_recursive>
 80050d2:	4628      	mov	r0, r5
 80050d4:	bd70      	pop	{r4, r5, r6, pc}
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	da04      	bge.n	80050e4 <_puts_r+0xac>
 80050da:	69a2      	ldr	r2, [r4, #24]
 80050dc:	429a      	cmp	r2, r3
 80050de:	dc06      	bgt.n	80050ee <_puts_r+0xb6>
 80050e0:	290a      	cmp	r1, #10
 80050e2:	d004      	beq.n	80050ee <_puts_r+0xb6>
 80050e4:	6823      	ldr	r3, [r4, #0]
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	6022      	str	r2, [r4, #0]
 80050ea:	7019      	strb	r1, [r3, #0]
 80050ec:	e7c5      	b.n	800507a <_puts_r+0x42>
 80050ee:	4622      	mov	r2, r4
 80050f0:	4628      	mov	r0, r5
 80050f2:	f000 f817 	bl	8005124 <__swbuf_r>
 80050f6:	3001      	adds	r0, #1
 80050f8:	d1bf      	bne.n	800507a <_puts_r+0x42>
 80050fa:	e7df      	b.n	80050bc <_puts_r+0x84>
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	250a      	movs	r5, #10
 8005100:	1c5a      	adds	r2, r3, #1
 8005102:	6022      	str	r2, [r4, #0]
 8005104:	701d      	strb	r5, [r3, #0]
 8005106:	e7db      	b.n	80050c0 <_puts_r+0x88>
 8005108:	08005ac8 	.word	0x08005ac8
 800510c:	08005ae8 	.word	0x08005ae8
 8005110:	08005aa8 	.word	0x08005aa8

08005114 <puts>:
 8005114:	4b02      	ldr	r3, [pc, #8]	; (8005120 <puts+0xc>)
 8005116:	4601      	mov	r1, r0
 8005118:	6818      	ldr	r0, [r3, #0]
 800511a:	f7ff bf8d 	b.w	8005038 <_puts_r>
 800511e:	bf00      	nop
 8005120:	2000000c 	.word	0x2000000c

08005124 <__swbuf_r>:
 8005124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005126:	460e      	mov	r6, r1
 8005128:	4614      	mov	r4, r2
 800512a:	4605      	mov	r5, r0
 800512c:	b118      	cbz	r0, 8005136 <__swbuf_r+0x12>
 800512e:	6983      	ldr	r3, [r0, #24]
 8005130:	b90b      	cbnz	r3, 8005136 <__swbuf_r+0x12>
 8005132:	f000 f9d1 	bl	80054d8 <__sinit>
 8005136:	4b21      	ldr	r3, [pc, #132]	; (80051bc <__swbuf_r+0x98>)
 8005138:	429c      	cmp	r4, r3
 800513a:	d12b      	bne.n	8005194 <__swbuf_r+0x70>
 800513c:	686c      	ldr	r4, [r5, #4]
 800513e:	69a3      	ldr	r3, [r4, #24]
 8005140:	60a3      	str	r3, [r4, #8]
 8005142:	89a3      	ldrh	r3, [r4, #12]
 8005144:	071a      	lsls	r2, r3, #28
 8005146:	d52f      	bpl.n	80051a8 <__swbuf_r+0x84>
 8005148:	6923      	ldr	r3, [r4, #16]
 800514a:	b36b      	cbz	r3, 80051a8 <__swbuf_r+0x84>
 800514c:	6923      	ldr	r3, [r4, #16]
 800514e:	6820      	ldr	r0, [r4, #0]
 8005150:	1ac0      	subs	r0, r0, r3
 8005152:	6963      	ldr	r3, [r4, #20]
 8005154:	b2f6      	uxtb	r6, r6
 8005156:	4283      	cmp	r3, r0
 8005158:	4637      	mov	r7, r6
 800515a:	dc04      	bgt.n	8005166 <__swbuf_r+0x42>
 800515c:	4621      	mov	r1, r4
 800515e:	4628      	mov	r0, r5
 8005160:	f000 f926 	bl	80053b0 <_fflush_r>
 8005164:	bb30      	cbnz	r0, 80051b4 <__swbuf_r+0x90>
 8005166:	68a3      	ldr	r3, [r4, #8]
 8005168:	3b01      	subs	r3, #1
 800516a:	60a3      	str	r3, [r4, #8]
 800516c:	6823      	ldr	r3, [r4, #0]
 800516e:	1c5a      	adds	r2, r3, #1
 8005170:	6022      	str	r2, [r4, #0]
 8005172:	701e      	strb	r6, [r3, #0]
 8005174:	6963      	ldr	r3, [r4, #20]
 8005176:	3001      	adds	r0, #1
 8005178:	4283      	cmp	r3, r0
 800517a:	d004      	beq.n	8005186 <__swbuf_r+0x62>
 800517c:	89a3      	ldrh	r3, [r4, #12]
 800517e:	07db      	lsls	r3, r3, #31
 8005180:	d506      	bpl.n	8005190 <__swbuf_r+0x6c>
 8005182:	2e0a      	cmp	r6, #10
 8005184:	d104      	bne.n	8005190 <__swbuf_r+0x6c>
 8005186:	4621      	mov	r1, r4
 8005188:	4628      	mov	r0, r5
 800518a:	f000 f911 	bl	80053b0 <_fflush_r>
 800518e:	b988      	cbnz	r0, 80051b4 <__swbuf_r+0x90>
 8005190:	4638      	mov	r0, r7
 8005192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005194:	4b0a      	ldr	r3, [pc, #40]	; (80051c0 <__swbuf_r+0x9c>)
 8005196:	429c      	cmp	r4, r3
 8005198:	d101      	bne.n	800519e <__swbuf_r+0x7a>
 800519a:	68ac      	ldr	r4, [r5, #8]
 800519c:	e7cf      	b.n	800513e <__swbuf_r+0x1a>
 800519e:	4b09      	ldr	r3, [pc, #36]	; (80051c4 <__swbuf_r+0xa0>)
 80051a0:	429c      	cmp	r4, r3
 80051a2:	bf08      	it	eq
 80051a4:	68ec      	ldreq	r4, [r5, #12]
 80051a6:	e7ca      	b.n	800513e <__swbuf_r+0x1a>
 80051a8:	4621      	mov	r1, r4
 80051aa:	4628      	mov	r0, r5
 80051ac:	f000 f80c 	bl	80051c8 <__swsetup_r>
 80051b0:	2800      	cmp	r0, #0
 80051b2:	d0cb      	beq.n	800514c <__swbuf_r+0x28>
 80051b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80051b8:	e7ea      	b.n	8005190 <__swbuf_r+0x6c>
 80051ba:	bf00      	nop
 80051bc:	08005ac8 	.word	0x08005ac8
 80051c0:	08005ae8 	.word	0x08005ae8
 80051c4:	08005aa8 	.word	0x08005aa8

080051c8 <__swsetup_r>:
 80051c8:	4b32      	ldr	r3, [pc, #200]	; (8005294 <__swsetup_r+0xcc>)
 80051ca:	b570      	push	{r4, r5, r6, lr}
 80051cc:	681d      	ldr	r5, [r3, #0]
 80051ce:	4606      	mov	r6, r0
 80051d0:	460c      	mov	r4, r1
 80051d2:	b125      	cbz	r5, 80051de <__swsetup_r+0x16>
 80051d4:	69ab      	ldr	r3, [r5, #24]
 80051d6:	b913      	cbnz	r3, 80051de <__swsetup_r+0x16>
 80051d8:	4628      	mov	r0, r5
 80051da:	f000 f97d 	bl	80054d8 <__sinit>
 80051de:	4b2e      	ldr	r3, [pc, #184]	; (8005298 <__swsetup_r+0xd0>)
 80051e0:	429c      	cmp	r4, r3
 80051e2:	d10f      	bne.n	8005204 <__swsetup_r+0x3c>
 80051e4:	686c      	ldr	r4, [r5, #4]
 80051e6:	89a3      	ldrh	r3, [r4, #12]
 80051e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051ec:	0719      	lsls	r1, r3, #28
 80051ee:	d42c      	bmi.n	800524a <__swsetup_r+0x82>
 80051f0:	06dd      	lsls	r5, r3, #27
 80051f2:	d411      	bmi.n	8005218 <__swsetup_r+0x50>
 80051f4:	2309      	movs	r3, #9
 80051f6:	6033      	str	r3, [r6, #0]
 80051f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80051fc:	81a3      	strh	r3, [r4, #12]
 80051fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005202:	e03e      	b.n	8005282 <__swsetup_r+0xba>
 8005204:	4b25      	ldr	r3, [pc, #148]	; (800529c <__swsetup_r+0xd4>)
 8005206:	429c      	cmp	r4, r3
 8005208:	d101      	bne.n	800520e <__swsetup_r+0x46>
 800520a:	68ac      	ldr	r4, [r5, #8]
 800520c:	e7eb      	b.n	80051e6 <__swsetup_r+0x1e>
 800520e:	4b24      	ldr	r3, [pc, #144]	; (80052a0 <__swsetup_r+0xd8>)
 8005210:	429c      	cmp	r4, r3
 8005212:	bf08      	it	eq
 8005214:	68ec      	ldreq	r4, [r5, #12]
 8005216:	e7e6      	b.n	80051e6 <__swsetup_r+0x1e>
 8005218:	0758      	lsls	r0, r3, #29
 800521a:	d512      	bpl.n	8005242 <__swsetup_r+0x7a>
 800521c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800521e:	b141      	cbz	r1, 8005232 <__swsetup_r+0x6a>
 8005220:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005224:	4299      	cmp	r1, r3
 8005226:	d002      	beq.n	800522e <__swsetup_r+0x66>
 8005228:	4630      	mov	r0, r6
 800522a:	f000 fa5b 	bl	80056e4 <_free_r>
 800522e:	2300      	movs	r3, #0
 8005230:	6363      	str	r3, [r4, #52]	; 0x34
 8005232:	89a3      	ldrh	r3, [r4, #12]
 8005234:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005238:	81a3      	strh	r3, [r4, #12]
 800523a:	2300      	movs	r3, #0
 800523c:	6063      	str	r3, [r4, #4]
 800523e:	6923      	ldr	r3, [r4, #16]
 8005240:	6023      	str	r3, [r4, #0]
 8005242:	89a3      	ldrh	r3, [r4, #12]
 8005244:	f043 0308 	orr.w	r3, r3, #8
 8005248:	81a3      	strh	r3, [r4, #12]
 800524a:	6923      	ldr	r3, [r4, #16]
 800524c:	b94b      	cbnz	r3, 8005262 <__swsetup_r+0x9a>
 800524e:	89a3      	ldrh	r3, [r4, #12]
 8005250:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005258:	d003      	beq.n	8005262 <__swsetup_r+0x9a>
 800525a:	4621      	mov	r1, r4
 800525c:	4630      	mov	r0, r6
 800525e:	f000 fa01 	bl	8005664 <__smakebuf_r>
 8005262:	89a0      	ldrh	r0, [r4, #12]
 8005264:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005268:	f010 0301 	ands.w	r3, r0, #1
 800526c:	d00a      	beq.n	8005284 <__swsetup_r+0xbc>
 800526e:	2300      	movs	r3, #0
 8005270:	60a3      	str	r3, [r4, #8]
 8005272:	6963      	ldr	r3, [r4, #20]
 8005274:	425b      	negs	r3, r3
 8005276:	61a3      	str	r3, [r4, #24]
 8005278:	6923      	ldr	r3, [r4, #16]
 800527a:	b943      	cbnz	r3, 800528e <__swsetup_r+0xc6>
 800527c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005280:	d1ba      	bne.n	80051f8 <__swsetup_r+0x30>
 8005282:	bd70      	pop	{r4, r5, r6, pc}
 8005284:	0781      	lsls	r1, r0, #30
 8005286:	bf58      	it	pl
 8005288:	6963      	ldrpl	r3, [r4, #20]
 800528a:	60a3      	str	r3, [r4, #8]
 800528c:	e7f4      	b.n	8005278 <__swsetup_r+0xb0>
 800528e:	2000      	movs	r0, #0
 8005290:	e7f7      	b.n	8005282 <__swsetup_r+0xba>
 8005292:	bf00      	nop
 8005294:	2000000c 	.word	0x2000000c
 8005298:	08005ac8 	.word	0x08005ac8
 800529c:	08005ae8 	.word	0x08005ae8
 80052a0:	08005aa8 	.word	0x08005aa8

080052a4 <__sflush_r>:
 80052a4:	898a      	ldrh	r2, [r1, #12]
 80052a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052aa:	4605      	mov	r5, r0
 80052ac:	0710      	lsls	r0, r2, #28
 80052ae:	460c      	mov	r4, r1
 80052b0:	d458      	bmi.n	8005364 <__sflush_r+0xc0>
 80052b2:	684b      	ldr	r3, [r1, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	dc05      	bgt.n	80052c4 <__sflush_r+0x20>
 80052b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	dc02      	bgt.n	80052c4 <__sflush_r+0x20>
 80052be:	2000      	movs	r0, #0
 80052c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052c6:	2e00      	cmp	r6, #0
 80052c8:	d0f9      	beq.n	80052be <__sflush_r+0x1a>
 80052ca:	2300      	movs	r3, #0
 80052cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80052d0:	682f      	ldr	r7, [r5, #0]
 80052d2:	602b      	str	r3, [r5, #0]
 80052d4:	d032      	beq.n	800533c <__sflush_r+0x98>
 80052d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80052d8:	89a3      	ldrh	r3, [r4, #12]
 80052da:	075a      	lsls	r2, r3, #29
 80052dc:	d505      	bpl.n	80052ea <__sflush_r+0x46>
 80052de:	6863      	ldr	r3, [r4, #4]
 80052e0:	1ac0      	subs	r0, r0, r3
 80052e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052e4:	b10b      	cbz	r3, 80052ea <__sflush_r+0x46>
 80052e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052e8:	1ac0      	subs	r0, r0, r3
 80052ea:	2300      	movs	r3, #0
 80052ec:	4602      	mov	r2, r0
 80052ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052f0:	6a21      	ldr	r1, [r4, #32]
 80052f2:	4628      	mov	r0, r5
 80052f4:	47b0      	blx	r6
 80052f6:	1c43      	adds	r3, r0, #1
 80052f8:	89a3      	ldrh	r3, [r4, #12]
 80052fa:	d106      	bne.n	800530a <__sflush_r+0x66>
 80052fc:	6829      	ldr	r1, [r5, #0]
 80052fe:	291d      	cmp	r1, #29
 8005300:	d82c      	bhi.n	800535c <__sflush_r+0xb8>
 8005302:	4a2a      	ldr	r2, [pc, #168]	; (80053ac <__sflush_r+0x108>)
 8005304:	40ca      	lsrs	r2, r1
 8005306:	07d6      	lsls	r6, r2, #31
 8005308:	d528      	bpl.n	800535c <__sflush_r+0xb8>
 800530a:	2200      	movs	r2, #0
 800530c:	6062      	str	r2, [r4, #4]
 800530e:	04d9      	lsls	r1, r3, #19
 8005310:	6922      	ldr	r2, [r4, #16]
 8005312:	6022      	str	r2, [r4, #0]
 8005314:	d504      	bpl.n	8005320 <__sflush_r+0x7c>
 8005316:	1c42      	adds	r2, r0, #1
 8005318:	d101      	bne.n	800531e <__sflush_r+0x7a>
 800531a:	682b      	ldr	r3, [r5, #0]
 800531c:	b903      	cbnz	r3, 8005320 <__sflush_r+0x7c>
 800531e:	6560      	str	r0, [r4, #84]	; 0x54
 8005320:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005322:	602f      	str	r7, [r5, #0]
 8005324:	2900      	cmp	r1, #0
 8005326:	d0ca      	beq.n	80052be <__sflush_r+0x1a>
 8005328:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800532c:	4299      	cmp	r1, r3
 800532e:	d002      	beq.n	8005336 <__sflush_r+0x92>
 8005330:	4628      	mov	r0, r5
 8005332:	f000 f9d7 	bl	80056e4 <_free_r>
 8005336:	2000      	movs	r0, #0
 8005338:	6360      	str	r0, [r4, #52]	; 0x34
 800533a:	e7c1      	b.n	80052c0 <__sflush_r+0x1c>
 800533c:	6a21      	ldr	r1, [r4, #32]
 800533e:	2301      	movs	r3, #1
 8005340:	4628      	mov	r0, r5
 8005342:	47b0      	blx	r6
 8005344:	1c41      	adds	r1, r0, #1
 8005346:	d1c7      	bne.n	80052d8 <__sflush_r+0x34>
 8005348:	682b      	ldr	r3, [r5, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0c4      	beq.n	80052d8 <__sflush_r+0x34>
 800534e:	2b1d      	cmp	r3, #29
 8005350:	d001      	beq.n	8005356 <__sflush_r+0xb2>
 8005352:	2b16      	cmp	r3, #22
 8005354:	d101      	bne.n	800535a <__sflush_r+0xb6>
 8005356:	602f      	str	r7, [r5, #0]
 8005358:	e7b1      	b.n	80052be <__sflush_r+0x1a>
 800535a:	89a3      	ldrh	r3, [r4, #12]
 800535c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005360:	81a3      	strh	r3, [r4, #12]
 8005362:	e7ad      	b.n	80052c0 <__sflush_r+0x1c>
 8005364:	690f      	ldr	r7, [r1, #16]
 8005366:	2f00      	cmp	r7, #0
 8005368:	d0a9      	beq.n	80052be <__sflush_r+0x1a>
 800536a:	0793      	lsls	r3, r2, #30
 800536c:	680e      	ldr	r6, [r1, #0]
 800536e:	bf08      	it	eq
 8005370:	694b      	ldreq	r3, [r1, #20]
 8005372:	600f      	str	r7, [r1, #0]
 8005374:	bf18      	it	ne
 8005376:	2300      	movne	r3, #0
 8005378:	eba6 0807 	sub.w	r8, r6, r7
 800537c:	608b      	str	r3, [r1, #8]
 800537e:	f1b8 0f00 	cmp.w	r8, #0
 8005382:	dd9c      	ble.n	80052be <__sflush_r+0x1a>
 8005384:	6a21      	ldr	r1, [r4, #32]
 8005386:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005388:	4643      	mov	r3, r8
 800538a:	463a      	mov	r2, r7
 800538c:	4628      	mov	r0, r5
 800538e:	47b0      	blx	r6
 8005390:	2800      	cmp	r0, #0
 8005392:	dc06      	bgt.n	80053a2 <__sflush_r+0xfe>
 8005394:	89a3      	ldrh	r3, [r4, #12]
 8005396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800539a:	81a3      	strh	r3, [r4, #12]
 800539c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053a0:	e78e      	b.n	80052c0 <__sflush_r+0x1c>
 80053a2:	4407      	add	r7, r0
 80053a4:	eba8 0800 	sub.w	r8, r8, r0
 80053a8:	e7e9      	b.n	800537e <__sflush_r+0xda>
 80053aa:	bf00      	nop
 80053ac:	20400001 	.word	0x20400001

080053b0 <_fflush_r>:
 80053b0:	b538      	push	{r3, r4, r5, lr}
 80053b2:	690b      	ldr	r3, [r1, #16]
 80053b4:	4605      	mov	r5, r0
 80053b6:	460c      	mov	r4, r1
 80053b8:	b913      	cbnz	r3, 80053c0 <_fflush_r+0x10>
 80053ba:	2500      	movs	r5, #0
 80053bc:	4628      	mov	r0, r5
 80053be:	bd38      	pop	{r3, r4, r5, pc}
 80053c0:	b118      	cbz	r0, 80053ca <_fflush_r+0x1a>
 80053c2:	6983      	ldr	r3, [r0, #24]
 80053c4:	b90b      	cbnz	r3, 80053ca <_fflush_r+0x1a>
 80053c6:	f000 f887 	bl	80054d8 <__sinit>
 80053ca:	4b14      	ldr	r3, [pc, #80]	; (800541c <_fflush_r+0x6c>)
 80053cc:	429c      	cmp	r4, r3
 80053ce:	d11b      	bne.n	8005408 <_fflush_r+0x58>
 80053d0:	686c      	ldr	r4, [r5, #4]
 80053d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0ef      	beq.n	80053ba <_fflush_r+0xa>
 80053da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80053dc:	07d0      	lsls	r0, r2, #31
 80053de:	d404      	bmi.n	80053ea <_fflush_r+0x3a>
 80053e0:	0599      	lsls	r1, r3, #22
 80053e2:	d402      	bmi.n	80053ea <_fflush_r+0x3a>
 80053e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053e6:	f000 f915 	bl	8005614 <__retarget_lock_acquire_recursive>
 80053ea:	4628      	mov	r0, r5
 80053ec:	4621      	mov	r1, r4
 80053ee:	f7ff ff59 	bl	80052a4 <__sflush_r>
 80053f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053f4:	07da      	lsls	r2, r3, #31
 80053f6:	4605      	mov	r5, r0
 80053f8:	d4e0      	bmi.n	80053bc <_fflush_r+0xc>
 80053fa:	89a3      	ldrh	r3, [r4, #12]
 80053fc:	059b      	lsls	r3, r3, #22
 80053fe:	d4dd      	bmi.n	80053bc <_fflush_r+0xc>
 8005400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005402:	f000 f908 	bl	8005616 <__retarget_lock_release_recursive>
 8005406:	e7d9      	b.n	80053bc <_fflush_r+0xc>
 8005408:	4b05      	ldr	r3, [pc, #20]	; (8005420 <_fflush_r+0x70>)
 800540a:	429c      	cmp	r4, r3
 800540c:	d101      	bne.n	8005412 <_fflush_r+0x62>
 800540e:	68ac      	ldr	r4, [r5, #8]
 8005410:	e7df      	b.n	80053d2 <_fflush_r+0x22>
 8005412:	4b04      	ldr	r3, [pc, #16]	; (8005424 <_fflush_r+0x74>)
 8005414:	429c      	cmp	r4, r3
 8005416:	bf08      	it	eq
 8005418:	68ec      	ldreq	r4, [r5, #12]
 800541a:	e7da      	b.n	80053d2 <_fflush_r+0x22>
 800541c:	08005ac8 	.word	0x08005ac8
 8005420:	08005ae8 	.word	0x08005ae8
 8005424:	08005aa8 	.word	0x08005aa8

08005428 <std>:
 8005428:	2300      	movs	r3, #0
 800542a:	b510      	push	{r4, lr}
 800542c:	4604      	mov	r4, r0
 800542e:	e9c0 3300 	strd	r3, r3, [r0]
 8005432:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005436:	6083      	str	r3, [r0, #8]
 8005438:	8181      	strh	r1, [r0, #12]
 800543a:	6643      	str	r3, [r0, #100]	; 0x64
 800543c:	81c2      	strh	r2, [r0, #14]
 800543e:	6183      	str	r3, [r0, #24]
 8005440:	4619      	mov	r1, r3
 8005442:	2208      	movs	r2, #8
 8005444:	305c      	adds	r0, #92	; 0x5c
 8005446:	f7ff fdef 	bl	8005028 <memset>
 800544a:	4b05      	ldr	r3, [pc, #20]	; (8005460 <std+0x38>)
 800544c:	6263      	str	r3, [r4, #36]	; 0x24
 800544e:	4b05      	ldr	r3, [pc, #20]	; (8005464 <std+0x3c>)
 8005450:	62a3      	str	r3, [r4, #40]	; 0x28
 8005452:	4b05      	ldr	r3, [pc, #20]	; (8005468 <std+0x40>)
 8005454:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005456:	4b05      	ldr	r3, [pc, #20]	; (800546c <std+0x44>)
 8005458:	6224      	str	r4, [r4, #32]
 800545a:	6323      	str	r3, [r4, #48]	; 0x30
 800545c:	bd10      	pop	{r4, pc}
 800545e:	bf00      	nop
 8005460:	080058c5 	.word	0x080058c5
 8005464:	080058e7 	.word	0x080058e7
 8005468:	0800591f 	.word	0x0800591f
 800546c:	08005943 	.word	0x08005943

08005470 <_cleanup_r>:
 8005470:	4901      	ldr	r1, [pc, #4]	; (8005478 <_cleanup_r+0x8>)
 8005472:	f000 b8af 	b.w	80055d4 <_fwalk_reent>
 8005476:	bf00      	nop
 8005478:	080053b1 	.word	0x080053b1

0800547c <__sfmoreglue>:
 800547c:	b570      	push	{r4, r5, r6, lr}
 800547e:	2268      	movs	r2, #104	; 0x68
 8005480:	1e4d      	subs	r5, r1, #1
 8005482:	4355      	muls	r5, r2
 8005484:	460e      	mov	r6, r1
 8005486:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800548a:	f000 f997 	bl	80057bc <_malloc_r>
 800548e:	4604      	mov	r4, r0
 8005490:	b140      	cbz	r0, 80054a4 <__sfmoreglue+0x28>
 8005492:	2100      	movs	r1, #0
 8005494:	e9c0 1600 	strd	r1, r6, [r0]
 8005498:	300c      	adds	r0, #12
 800549a:	60a0      	str	r0, [r4, #8]
 800549c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80054a0:	f7ff fdc2 	bl	8005028 <memset>
 80054a4:	4620      	mov	r0, r4
 80054a6:	bd70      	pop	{r4, r5, r6, pc}

080054a8 <__sfp_lock_acquire>:
 80054a8:	4801      	ldr	r0, [pc, #4]	; (80054b0 <__sfp_lock_acquire+0x8>)
 80054aa:	f000 b8b3 	b.w	8005614 <__retarget_lock_acquire_recursive>
 80054ae:	bf00      	nop
 80054b0:	20000201 	.word	0x20000201

080054b4 <__sfp_lock_release>:
 80054b4:	4801      	ldr	r0, [pc, #4]	; (80054bc <__sfp_lock_release+0x8>)
 80054b6:	f000 b8ae 	b.w	8005616 <__retarget_lock_release_recursive>
 80054ba:	bf00      	nop
 80054bc:	20000201 	.word	0x20000201

080054c0 <__sinit_lock_acquire>:
 80054c0:	4801      	ldr	r0, [pc, #4]	; (80054c8 <__sinit_lock_acquire+0x8>)
 80054c2:	f000 b8a7 	b.w	8005614 <__retarget_lock_acquire_recursive>
 80054c6:	bf00      	nop
 80054c8:	20000202 	.word	0x20000202

080054cc <__sinit_lock_release>:
 80054cc:	4801      	ldr	r0, [pc, #4]	; (80054d4 <__sinit_lock_release+0x8>)
 80054ce:	f000 b8a2 	b.w	8005616 <__retarget_lock_release_recursive>
 80054d2:	bf00      	nop
 80054d4:	20000202 	.word	0x20000202

080054d8 <__sinit>:
 80054d8:	b510      	push	{r4, lr}
 80054da:	4604      	mov	r4, r0
 80054dc:	f7ff fff0 	bl	80054c0 <__sinit_lock_acquire>
 80054e0:	69a3      	ldr	r3, [r4, #24]
 80054e2:	b11b      	cbz	r3, 80054ec <__sinit+0x14>
 80054e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054e8:	f7ff bff0 	b.w	80054cc <__sinit_lock_release>
 80054ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80054f0:	6523      	str	r3, [r4, #80]	; 0x50
 80054f2:	4b13      	ldr	r3, [pc, #76]	; (8005540 <__sinit+0x68>)
 80054f4:	4a13      	ldr	r2, [pc, #76]	; (8005544 <__sinit+0x6c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80054fa:	42a3      	cmp	r3, r4
 80054fc:	bf04      	itt	eq
 80054fe:	2301      	moveq	r3, #1
 8005500:	61a3      	streq	r3, [r4, #24]
 8005502:	4620      	mov	r0, r4
 8005504:	f000 f820 	bl	8005548 <__sfp>
 8005508:	6060      	str	r0, [r4, #4]
 800550a:	4620      	mov	r0, r4
 800550c:	f000 f81c 	bl	8005548 <__sfp>
 8005510:	60a0      	str	r0, [r4, #8]
 8005512:	4620      	mov	r0, r4
 8005514:	f000 f818 	bl	8005548 <__sfp>
 8005518:	2200      	movs	r2, #0
 800551a:	60e0      	str	r0, [r4, #12]
 800551c:	2104      	movs	r1, #4
 800551e:	6860      	ldr	r0, [r4, #4]
 8005520:	f7ff ff82 	bl	8005428 <std>
 8005524:	68a0      	ldr	r0, [r4, #8]
 8005526:	2201      	movs	r2, #1
 8005528:	2109      	movs	r1, #9
 800552a:	f7ff ff7d 	bl	8005428 <std>
 800552e:	68e0      	ldr	r0, [r4, #12]
 8005530:	2202      	movs	r2, #2
 8005532:	2112      	movs	r1, #18
 8005534:	f7ff ff78 	bl	8005428 <std>
 8005538:	2301      	movs	r3, #1
 800553a:	61a3      	str	r3, [r4, #24]
 800553c:	e7d2      	b.n	80054e4 <__sinit+0xc>
 800553e:	bf00      	nop
 8005540:	08005aa4 	.word	0x08005aa4
 8005544:	08005471 	.word	0x08005471

08005548 <__sfp>:
 8005548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800554a:	4607      	mov	r7, r0
 800554c:	f7ff ffac 	bl	80054a8 <__sfp_lock_acquire>
 8005550:	4b1e      	ldr	r3, [pc, #120]	; (80055cc <__sfp+0x84>)
 8005552:	681e      	ldr	r6, [r3, #0]
 8005554:	69b3      	ldr	r3, [r6, #24]
 8005556:	b913      	cbnz	r3, 800555e <__sfp+0x16>
 8005558:	4630      	mov	r0, r6
 800555a:	f7ff ffbd 	bl	80054d8 <__sinit>
 800555e:	3648      	adds	r6, #72	; 0x48
 8005560:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005564:	3b01      	subs	r3, #1
 8005566:	d503      	bpl.n	8005570 <__sfp+0x28>
 8005568:	6833      	ldr	r3, [r6, #0]
 800556a:	b30b      	cbz	r3, 80055b0 <__sfp+0x68>
 800556c:	6836      	ldr	r6, [r6, #0]
 800556e:	e7f7      	b.n	8005560 <__sfp+0x18>
 8005570:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005574:	b9d5      	cbnz	r5, 80055ac <__sfp+0x64>
 8005576:	4b16      	ldr	r3, [pc, #88]	; (80055d0 <__sfp+0x88>)
 8005578:	60e3      	str	r3, [r4, #12]
 800557a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800557e:	6665      	str	r5, [r4, #100]	; 0x64
 8005580:	f000 f847 	bl	8005612 <__retarget_lock_init_recursive>
 8005584:	f7ff ff96 	bl	80054b4 <__sfp_lock_release>
 8005588:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800558c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005590:	6025      	str	r5, [r4, #0]
 8005592:	61a5      	str	r5, [r4, #24]
 8005594:	2208      	movs	r2, #8
 8005596:	4629      	mov	r1, r5
 8005598:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800559c:	f7ff fd44 	bl	8005028 <memset>
 80055a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80055a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80055a8:	4620      	mov	r0, r4
 80055aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055ac:	3468      	adds	r4, #104	; 0x68
 80055ae:	e7d9      	b.n	8005564 <__sfp+0x1c>
 80055b0:	2104      	movs	r1, #4
 80055b2:	4638      	mov	r0, r7
 80055b4:	f7ff ff62 	bl	800547c <__sfmoreglue>
 80055b8:	4604      	mov	r4, r0
 80055ba:	6030      	str	r0, [r6, #0]
 80055bc:	2800      	cmp	r0, #0
 80055be:	d1d5      	bne.n	800556c <__sfp+0x24>
 80055c0:	f7ff ff78 	bl	80054b4 <__sfp_lock_release>
 80055c4:	230c      	movs	r3, #12
 80055c6:	603b      	str	r3, [r7, #0]
 80055c8:	e7ee      	b.n	80055a8 <__sfp+0x60>
 80055ca:	bf00      	nop
 80055cc:	08005aa4 	.word	0x08005aa4
 80055d0:	ffff0001 	.word	0xffff0001

080055d4 <_fwalk_reent>:
 80055d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055d8:	4606      	mov	r6, r0
 80055da:	4688      	mov	r8, r1
 80055dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80055e0:	2700      	movs	r7, #0
 80055e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055e6:	f1b9 0901 	subs.w	r9, r9, #1
 80055ea:	d505      	bpl.n	80055f8 <_fwalk_reent+0x24>
 80055ec:	6824      	ldr	r4, [r4, #0]
 80055ee:	2c00      	cmp	r4, #0
 80055f0:	d1f7      	bne.n	80055e2 <_fwalk_reent+0xe>
 80055f2:	4638      	mov	r0, r7
 80055f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055f8:	89ab      	ldrh	r3, [r5, #12]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d907      	bls.n	800560e <_fwalk_reent+0x3a>
 80055fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005602:	3301      	adds	r3, #1
 8005604:	d003      	beq.n	800560e <_fwalk_reent+0x3a>
 8005606:	4629      	mov	r1, r5
 8005608:	4630      	mov	r0, r6
 800560a:	47c0      	blx	r8
 800560c:	4307      	orrs	r7, r0
 800560e:	3568      	adds	r5, #104	; 0x68
 8005610:	e7e9      	b.n	80055e6 <_fwalk_reent+0x12>

08005612 <__retarget_lock_init_recursive>:
 8005612:	4770      	bx	lr

08005614 <__retarget_lock_acquire_recursive>:
 8005614:	4770      	bx	lr

08005616 <__retarget_lock_release_recursive>:
 8005616:	4770      	bx	lr

08005618 <__swhatbuf_r>:
 8005618:	b570      	push	{r4, r5, r6, lr}
 800561a:	460e      	mov	r6, r1
 800561c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005620:	2900      	cmp	r1, #0
 8005622:	b096      	sub	sp, #88	; 0x58
 8005624:	4614      	mov	r4, r2
 8005626:	461d      	mov	r5, r3
 8005628:	da08      	bge.n	800563c <__swhatbuf_r+0x24>
 800562a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	602a      	str	r2, [r5, #0]
 8005632:	061a      	lsls	r2, r3, #24
 8005634:	d410      	bmi.n	8005658 <__swhatbuf_r+0x40>
 8005636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800563a:	e00e      	b.n	800565a <__swhatbuf_r+0x42>
 800563c:	466a      	mov	r2, sp
 800563e:	f000 f9a7 	bl	8005990 <_fstat_r>
 8005642:	2800      	cmp	r0, #0
 8005644:	dbf1      	blt.n	800562a <__swhatbuf_r+0x12>
 8005646:	9a01      	ldr	r2, [sp, #4]
 8005648:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800564c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005650:	425a      	negs	r2, r3
 8005652:	415a      	adcs	r2, r3
 8005654:	602a      	str	r2, [r5, #0]
 8005656:	e7ee      	b.n	8005636 <__swhatbuf_r+0x1e>
 8005658:	2340      	movs	r3, #64	; 0x40
 800565a:	2000      	movs	r0, #0
 800565c:	6023      	str	r3, [r4, #0]
 800565e:	b016      	add	sp, #88	; 0x58
 8005660:	bd70      	pop	{r4, r5, r6, pc}
	...

08005664 <__smakebuf_r>:
 8005664:	898b      	ldrh	r3, [r1, #12]
 8005666:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005668:	079d      	lsls	r5, r3, #30
 800566a:	4606      	mov	r6, r0
 800566c:	460c      	mov	r4, r1
 800566e:	d507      	bpl.n	8005680 <__smakebuf_r+0x1c>
 8005670:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005674:	6023      	str	r3, [r4, #0]
 8005676:	6123      	str	r3, [r4, #16]
 8005678:	2301      	movs	r3, #1
 800567a:	6163      	str	r3, [r4, #20]
 800567c:	b002      	add	sp, #8
 800567e:	bd70      	pop	{r4, r5, r6, pc}
 8005680:	ab01      	add	r3, sp, #4
 8005682:	466a      	mov	r2, sp
 8005684:	f7ff ffc8 	bl	8005618 <__swhatbuf_r>
 8005688:	9900      	ldr	r1, [sp, #0]
 800568a:	4605      	mov	r5, r0
 800568c:	4630      	mov	r0, r6
 800568e:	f000 f895 	bl	80057bc <_malloc_r>
 8005692:	b948      	cbnz	r0, 80056a8 <__smakebuf_r+0x44>
 8005694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005698:	059a      	lsls	r2, r3, #22
 800569a:	d4ef      	bmi.n	800567c <__smakebuf_r+0x18>
 800569c:	f023 0303 	bic.w	r3, r3, #3
 80056a0:	f043 0302 	orr.w	r3, r3, #2
 80056a4:	81a3      	strh	r3, [r4, #12]
 80056a6:	e7e3      	b.n	8005670 <__smakebuf_r+0xc>
 80056a8:	4b0d      	ldr	r3, [pc, #52]	; (80056e0 <__smakebuf_r+0x7c>)
 80056aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80056ac:	89a3      	ldrh	r3, [r4, #12]
 80056ae:	6020      	str	r0, [r4, #0]
 80056b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056b4:	81a3      	strh	r3, [r4, #12]
 80056b6:	9b00      	ldr	r3, [sp, #0]
 80056b8:	6163      	str	r3, [r4, #20]
 80056ba:	9b01      	ldr	r3, [sp, #4]
 80056bc:	6120      	str	r0, [r4, #16]
 80056be:	b15b      	cbz	r3, 80056d8 <__smakebuf_r+0x74>
 80056c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056c4:	4630      	mov	r0, r6
 80056c6:	f000 f975 	bl	80059b4 <_isatty_r>
 80056ca:	b128      	cbz	r0, 80056d8 <__smakebuf_r+0x74>
 80056cc:	89a3      	ldrh	r3, [r4, #12]
 80056ce:	f023 0303 	bic.w	r3, r3, #3
 80056d2:	f043 0301 	orr.w	r3, r3, #1
 80056d6:	81a3      	strh	r3, [r4, #12]
 80056d8:	89a0      	ldrh	r0, [r4, #12]
 80056da:	4305      	orrs	r5, r0
 80056dc:	81a5      	strh	r5, [r4, #12]
 80056de:	e7cd      	b.n	800567c <__smakebuf_r+0x18>
 80056e0:	08005471 	.word	0x08005471

080056e4 <_free_r>:
 80056e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056e6:	2900      	cmp	r1, #0
 80056e8:	d044      	beq.n	8005774 <_free_r+0x90>
 80056ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056ee:	9001      	str	r0, [sp, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f1a1 0404 	sub.w	r4, r1, #4
 80056f6:	bfb8      	it	lt
 80056f8:	18e4      	addlt	r4, r4, r3
 80056fa:	f000 f97d 	bl	80059f8 <__malloc_lock>
 80056fe:	4a1e      	ldr	r2, [pc, #120]	; (8005778 <_free_r+0x94>)
 8005700:	9801      	ldr	r0, [sp, #4]
 8005702:	6813      	ldr	r3, [r2, #0]
 8005704:	b933      	cbnz	r3, 8005714 <_free_r+0x30>
 8005706:	6063      	str	r3, [r4, #4]
 8005708:	6014      	str	r4, [r2, #0]
 800570a:	b003      	add	sp, #12
 800570c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005710:	f000 b978 	b.w	8005a04 <__malloc_unlock>
 8005714:	42a3      	cmp	r3, r4
 8005716:	d908      	bls.n	800572a <_free_r+0x46>
 8005718:	6825      	ldr	r5, [r4, #0]
 800571a:	1961      	adds	r1, r4, r5
 800571c:	428b      	cmp	r3, r1
 800571e:	bf01      	itttt	eq
 8005720:	6819      	ldreq	r1, [r3, #0]
 8005722:	685b      	ldreq	r3, [r3, #4]
 8005724:	1949      	addeq	r1, r1, r5
 8005726:	6021      	streq	r1, [r4, #0]
 8005728:	e7ed      	b.n	8005706 <_free_r+0x22>
 800572a:	461a      	mov	r2, r3
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	b10b      	cbz	r3, 8005734 <_free_r+0x50>
 8005730:	42a3      	cmp	r3, r4
 8005732:	d9fa      	bls.n	800572a <_free_r+0x46>
 8005734:	6811      	ldr	r1, [r2, #0]
 8005736:	1855      	adds	r5, r2, r1
 8005738:	42a5      	cmp	r5, r4
 800573a:	d10b      	bne.n	8005754 <_free_r+0x70>
 800573c:	6824      	ldr	r4, [r4, #0]
 800573e:	4421      	add	r1, r4
 8005740:	1854      	adds	r4, r2, r1
 8005742:	42a3      	cmp	r3, r4
 8005744:	6011      	str	r1, [r2, #0]
 8005746:	d1e0      	bne.n	800570a <_free_r+0x26>
 8005748:	681c      	ldr	r4, [r3, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	6053      	str	r3, [r2, #4]
 800574e:	4421      	add	r1, r4
 8005750:	6011      	str	r1, [r2, #0]
 8005752:	e7da      	b.n	800570a <_free_r+0x26>
 8005754:	d902      	bls.n	800575c <_free_r+0x78>
 8005756:	230c      	movs	r3, #12
 8005758:	6003      	str	r3, [r0, #0]
 800575a:	e7d6      	b.n	800570a <_free_r+0x26>
 800575c:	6825      	ldr	r5, [r4, #0]
 800575e:	1961      	adds	r1, r4, r5
 8005760:	428b      	cmp	r3, r1
 8005762:	bf04      	itt	eq
 8005764:	6819      	ldreq	r1, [r3, #0]
 8005766:	685b      	ldreq	r3, [r3, #4]
 8005768:	6063      	str	r3, [r4, #4]
 800576a:	bf04      	itt	eq
 800576c:	1949      	addeq	r1, r1, r5
 800576e:	6021      	streq	r1, [r4, #0]
 8005770:	6054      	str	r4, [r2, #4]
 8005772:	e7ca      	b.n	800570a <_free_r+0x26>
 8005774:	b003      	add	sp, #12
 8005776:	bd30      	pop	{r4, r5, pc}
 8005778:	20000204 	.word	0x20000204

0800577c <sbrk_aligned>:
 800577c:	b570      	push	{r4, r5, r6, lr}
 800577e:	4e0e      	ldr	r6, [pc, #56]	; (80057b8 <sbrk_aligned+0x3c>)
 8005780:	460c      	mov	r4, r1
 8005782:	6831      	ldr	r1, [r6, #0]
 8005784:	4605      	mov	r5, r0
 8005786:	b911      	cbnz	r1, 800578e <sbrk_aligned+0x12>
 8005788:	f000 f88c 	bl	80058a4 <_sbrk_r>
 800578c:	6030      	str	r0, [r6, #0]
 800578e:	4621      	mov	r1, r4
 8005790:	4628      	mov	r0, r5
 8005792:	f000 f887 	bl	80058a4 <_sbrk_r>
 8005796:	1c43      	adds	r3, r0, #1
 8005798:	d00a      	beq.n	80057b0 <sbrk_aligned+0x34>
 800579a:	1cc4      	adds	r4, r0, #3
 800579c:	f024 0403 	bic.w	r4, r4, #3
 80057a0:	42a0      	cmp	r0, r4
 80057a2:	d007      	beq.n	80057b4 <sbrk_aligned+0x38>
 80057a4:	1a21      	subs	r1, r4, r0
 80057a6:	4628      	mov	r0, r5
 80057a8:	f000 f87c 	bl	80058a4 <_sbrk_r>
 80057ac:	3001      	adds	r0, #1
 80057ae:	d101      	bne.n	80057b4 <sbrk_aligned+0x38>
 80057b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80057b4:	4620      	mov	r0, r4
 80057b6:	bd70      	pop	{r4, r5, r6, pc}
 80057b8:	20000208 	.word	0x20000208

080057bc <_malloc_r>:
 80057bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057c0:	1ccd      	adds	r5, r1, #3
 80057c2:	f025 0503 	bic.w	r5, r5, #3
 80057c6:	3508      	adds	r5, #8
 80057c8:	2d0c      	cmp	r5, #12
 80057ca:	bf38      	it	cc
 80057cc:	250c      	movcc	r5, #12
 80057ce:	2d00      	cmp	r5, #0
 80057d0:	4607      	mov	r7, r0
 80057d2:	db01      	blt.n	80057d8 <_malloc_r+0x1c>
 80057d4:	42a9      	cmp	r1, r5
 80057d6:	d905      	bls.n	80057e4 <_malloc_r+0x28>
 80057d8:	230c      	movs	r3, #12
 80057da:	603b      	str	r3, [r7, #0]
 80057dc:	2600      	movs	r6, #0
 80057de:	4630      	mov	r0, r6
 80057e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057e4:	4e2e      	ldr	r6, [pc, #184]	; (80058a0 <_malloc_r+0xe4>)
 80057e6:	f000 f907 	bl	80059f8 <__malloc_lock>
 80057ea:	6833      	ldr	r3, [r6, #0]
 80057ec:	461c      	mov	r4, r3
 80057ee:	bb34      	cbnz	r4, 800583e <_malloc_r+0x82>
 80057f0:	4629      	mov	r1, r5
 80057f2:	4638      	mov	r0, r7
 80057f4:	f7ff ffc2 	bl	800577c <sbrk_aligned>
 80057f8:	1c43      	adds	r3, r0, #1
 80057fa:	4604      	mov	r4, r0
 80057fc:	d14d      	bne.n	800589a <_malloc_r+0xde>
 80057fe:	6834      	ldr	r4, [r6, #0]
 8005800:	4626      	mov	r6, r4
 8005802:	2e00      	cmp	r6, #0
 8005804:	d140      	bne.n	8005888 <_malloc_r+0xcc>
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	4631      	mov	r1, r6
 800580a:	4638      	mov	r0, r7
 800580c:	eb04 0803 	add.w	r8, r4, r3
 8005810:	f000 f848 	bl	80058a4 <_sbrk_r>
 8005814:	4580      	cmp	r8, r0
 8005816:	d13a      	bne.n	800588e <_malloc_r+0xd2>
 8005818:	6821      	ldr	r1, [r4, #0]
 800581a:	3503      	adds	r5, #3
 800581c:	1a6d      	subs	r5, r5, r1
 800581e:	f025 0503 	bic.w	r5, r5, #3
 8005822:	3508      	adds	r5, #8
 8005824:	2d0c      	cmp	r5, #12
 8005826:	bf38      	it	cc
 8005828:	250c      	movcc	r5, #12
 800582a:	4629      	mov	r1, r5
 800582c:	4638      	mov	r0, r7
 800582e:	f7ff ffa5 	bl	800577c <sbrk_aligned>
 8005832:	3001      	adds	r0, #1
 8005834:	d02b      	beq.n	800588e <_malloc_r+0xd2>
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	442b      	add	r3, r5
 800583a:	6023      	str	r3, [r4, #0]
 800583c:	e00e      	b.n	800585c <_malloc_r+0xa0>
 800583e:	6822      	ldr	r2, [r4, #0]
 8005840:	1b52      	subs	r2, r2, r5
 8005842:	d41e      	bmi.n	8005882 <_malloc_r+0xc6>
 8005844:	2a0b      	cmp	r2, #11
 8005846:	d916      	bls.n	8005876 <_malloc_r+0xba>
 8005848:	1961      	adds	r1, r4, r5
 800584a:	42a3      	cmp	r3, r4
 800584c:	6025      	str	r5, [r4, #0]
 800584e:	bf18      	it	ne
 8005850:	6059      	strne	r1, [r3, #4]
 8005852:	6863      	ldr	r3, [r4, #4]
 8005854:	bf08      	it	eq
 8005856:	6031      	streq	r1, [r6, #0]
 8005858:	5162      	str	r2, [r4, r5]
 800585a:	604b      	str	r3, [r1, #4]
 800585c:	4638      	mov	r0, r7
 800585e:	f104 060b 	add.w	r6, r4, #11
 8005862:	f000 f8cf 	bl	8005a04 <__malloc_unlock>
 8005866:	f026 0607 	bic.w	r6, r6, #7
 800586a:	1d23      	adds	r3, r4, #4
 800586c:	1af2      	subs	r2, r6, r3
 800586e:	d0b6      	beq.n	80057de <_malloc_r+0x22>
 8005870:	1b9b      	subs	r3, r3, r6
 8005872:	50a3      	str	r3, [r4, r2]
 8005874:	e7b3      	b.n	80057de <_malloc_r+0x22>
 8005876:	6862      	ldr	r2, [r4, #4]
 8005878:	42a3      	cmp	r3, r4
 800587a:	bf0c      	ite	eq
 800587c:	6032      	streq	r2, [r6, #0]
 800587e:	605a      	strne	r2, [r3, #4]
 8005880:	e7ec      	b.n	800585c <_malloc_r+0xa0>
 8005882:	4623      	mov	r3, r4
 8005884:	6864      	ldr	r4, [r4, #4]
 8005886:	e7b2      	b.n	80057ee <_malloc_r+0x32>
 8005888:	4634      	mov	r4, r6
 800588a:	6876      	ldr	r6, [r6, #4]
 800588c:	e7b9      	b.n	8005802 <_malloc_r+0x46>
 800588e:	230c      	movs	r3, #12
 8005890:	603b      	str	r3, [r7, #0]
 8005892:	4638      	mov	r0, r7
 8005894:	f000 f8b6 	bl	8005a04 <__malloc_unlock>
 8005898:	e7a1      	b.n	80057de <_malloc_r+0x22>
 800589a:	6025      	str	r5, [r4, #0]
 800589c:	e7de      	b.n	800585c <_malloc_r+0xa0>
 800589e:	bf00      	nop
 80058a0:	20000204 	.word	0x20000204

080058a4 <_sbrk_r>:
 80058a4:	b538      	push	{r3, r4, r5, lr}
 80058a6:	4d06      	ldr	r5, [pc, #24]	; (80058c0 <_sbrk_r+0x1c>)
 80058a8:	2300      	movs	r3, #0
 80058aa:	4604      	mov	r4, r0
 80058ac:	4608      	mov	r0, r1
 80058ae:	602b      	str	r3, [r5, #0]
 80058b0:	f7fb fa72 	bl	8000d98 <_sbrk>
 80058b4:	1c43      	adds	r3, r0, #1
 80058b6:	d102      	bne.n	80058be <_sbrk_r+0x1a>
 80058b8:	682b      	ldr	r3, [r5, #0]
 80058ba:	b103      	cbz	r3, 80058be <_sbrk_r+0x1a>
 80058bc:	6023      	str	r3, [r4, #0]
 80058be:	bd38      	pop	{r3, r4, r5, pc}
 80058c0:	2000020c 	.word	0x2000020c

080058c4 <__sread>:
 80058c4:	b510      	push	{r4, lr}
 80058c6:	460c      	mov	r4, r1
 80058c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058cc:	f000 f8a0 	bl	8005a10 <_read_r>
 80058d0:	2800      	cmp	r0, #0
 80058d2:	bfab      	itete	ge
 80058d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80058d6:	89a3      	ldrhlt	r3, [r4, #12]
 80058d8:	181b      	addge	r3, r3, r0
 80058da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80058de:	bfac      	ite	ge
 80058e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80058e2:	81a3      	strhlt	r3, [r4, #12]
 80058e4:	bd10      	pop	{r4, pc}

080058e6 <__swrite>:
 80058e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058ea:	461f      	mov	r7, r3
 80058ec:	898b      	ldrh	r3, [r1, #12]
 80058ee:	05db      	lsls	r3, r3, #23
 80058f0:	4605      	mov	r5, r0
 80058f2:	460c      	mov	r4, r1
 80058f4:	4616      	mov	r6, r2
 80058f6:	d505      	bpl.n	8005904 <__swrite+0x1e>
 80058f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058fc:	2302      	movs	r3, #2
 80058fe:	2200      	movs	r2, #0
 8005900:	f000 f868 	bl	80059d4 <_lseek_r>
 8005904:	89a3      	ldrh	r3, [r4, #12]
 8005906:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800590a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800590e:	81a3      	strh	r3, [r4, #12]
 8005910:	4632      	mov	r2, r6
 8005912:	463b      	mov	r3, r7
 8005914:	4628      	mov	r0, r5
 8005916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800591a:	f000 b817 	b.w	800594c <_write_r>

0800591e <__sseek>:
 800591e:	b510      	push	{r4, lr}
 8005920:	460c      	mov	r4, r1
 8005922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005926:	f000 f855 	bl	80059d4 <_lseek_r>
 800592a:	1c43      	adds	r3, r0, #1
 800592c:	89a3      	ldrh	r3, [r4, #12]
 800592e:	bf15      	itete	ne
 8005930:	6560      	strne	r0, [r4, #84]	; 0x54
 8005932:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005936:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800593a:	81a3      	strheq	r3, [r4, #12]
 800593c:	bf18      	it	ne
 800593e:	81a3      	strhne	r3, [r4, #12]
 8005940:	bd10      	pop	{r4, pc}

08005942 <__sclose>:
 8005942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005946:	f000 b813 	b.w	8005970 <_close_r>
	...

0800594c <_write_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	4d07      	ldr	r5, [pc, #28]	; (800596c <_write_r+0x20>)
 8005950:	4604      	mov	r4, r0
 8005952:	4608      	mov	r0, r1
 8005954:	4611      	mov	r1, r2
 8005956:	2200      	movs	r2, #0
 8005958:	602a      	str	r2, [r5, #0]
 800595a:	461a      	mov	r2, r3
 800595c:	f7fa fdb6 	bl	80004cc <_write>
 8005960:	1c43      	adds	r3, r0, #1
 8005962:	d102      	bne.n	800596a <_write_r+0x1e>
 8005964:	682b      	ldr	r3, [r5, #0]
 8005966:	b103      	cbz	r3, 800596a <_write_r+0x1e>
 8005968:	6023      	str	r3, [r4, #0]
 800596a:	bd38      	pop	{r3, r4, r5, pc}
 800596c:	2000020c 	.word	0x2000020c

08005970 <_close_r>:
 8005970:	b538      	push	{r3, r4, r5, lr}
 8005972:	4d06      	ldr	r5, [pc, #24]	; (800598c <_close_r+0x1c>)
 8005974:	2300      	movs	r3, #0
 8005976:	4604      	mov	r4, r0
 8005978:	4608      	mov	r0, r1
 800597a:	602b      	str	r3, [r5, #0]
 800597c:	f7fb f9d7 	bl	8000d2e <_close>
 8005980:	1c43      	adds	r3, r0, #1
 8005982:	d102      	bne.n	800598a <_close_r+0x1a>
 8005984:	682b      	ldr	r3, [r5, #0]
 8005986:	b103      	cbz	r3, 800598a <_close_r+0x1a>
 8005988:	6023      	str	r3, [r4, #0]
 800598a:	bd38      	pop	{r3, r4, r5, pc}
 800598c:	2000020c 	.word	0x2000020c

08005990 <_fstat_r>:
 8005990:	b538      	push	{r3, r4, r5, lr}
 8005992:	4d07      	ldr	r5, [pc, #28]	; (80059b0 <_fstat_r+0x20>)
 8005994:	2300      	movs	r3, #0
 8005996:	4604      	mov	r4, r0
 8005998:	4608      	mov	r0, r1
 800599a:	4611      	mov	r1, r2
 800599c:	602b      	str	r3, [r5, #0]
 800599e:	f7fb f9d2 	bl	8000d46 <_fstat>
 80059a2:	1c43      	adds	r3, r0, #1
 80059a4:	d102      	bne.n	80059ac <_fstat_r+0x1c>
 80059a6:	682b      	ldr	r3, [r5, #0]
 80059a8:	b103      	cbz	r3, 80059ac <_fstat_r+0x1c>
 80059aa:	6023      	str	r3, [r4, #0]
 80059ac:	bd38      	pop	{r3, r4, r5, pc}
 80059ae:	bf00      	nop
 80059b0:	2000020c 	.word	0x2000020c

080059b4 <_isatty_r>:
 80059b4:	b538      	push	{r3, r4, r5, lr}
 80059b6:	4d06      	ldr	r5, [pc, #24]	; (80059d0 <_isatty_r+0x1c>)
 80059b8:	2300      	movs	r3, #0
 80059ba:	4604      	mov	r4, r0
 80059bc:	4608      	mov	r0, r1
 80059be:	602b      	str	r3, [r5, #0]
 80059c0:	f7fb f9d1 	bl	8000d66 <_isatty>
 80059c4:	1c43      	adds	r3, r0, #1
 80059c6:	d102      	bne.n	80059ce <_isatty_r+0x1a>
 80059c8:	682b      	ldr	r3, [r5, #0]
 80059ca:	b103      	cbz	r3, 80059ce <_isatty_r+0x1a>
 80059cc:	6023      	str	r3, [r4, #0]
 80059ce:	bd38      	pop	{r3, r4, r5, pc}
 80059d0:	2000020c 	.word	0x2000020c

080059d4 <_lseek_r>:
 80059d4:	b538      	push	{r3, r4, r5, lr}
 80059d6:	4d07      	ldr	r5, [pc, #28]	; (80059f4 <_lseek_r+0x20>)
 80059d8:	4604      	mov	r4, r0
 80059da:	4608      	mov	r0, r1
 80059dc:	4611      	mov	r1, r2
 80059de:	2200      	movs	r2, #0
 80059e0:	602a      	str	r2, [r5, #0]
 80059e2:	461a      	mov	r2, r3
 80059e4:	f7fb f9ca 	bl	8000d7c <_lseek>
 80059e8:	1c43      	adds	r3, r0, #1
 80059ea:	d102      	bne.n	80059f2 <_lseek_r+0x1e>
 80059ec:	682b      	ldr	r3, [r5, #0]
 80059ee:	b103      	cbz	r3, 80059f2 <_lseek_r+0x1e>
 80059f0:	6023      	str	r3, [r4, #0]
 80059f2:	bd38      	pop	{r3, r4, r5, pc}
 80059f4:	2000020c 	.word	0x2000020c

080059f8 <__malloc_lock>:
 80059f8:	4801      	ldr	r0, [pc, #4]	; (8005a00 <__malloc_lock+0x8>)
 80059fa:	f7ff be0b 	b.w	8005614 <__retarget_lock_acquire_recursive>
 80059fe:	bf00      	nop
 8005a00:	20000200 	.word	0x20000200

08005a04 <__malloc_unlock>:
 8005a04:	4801      	ldr	r0, [pc, #4]	; (8005a0c <__malloc_unlock+0x8>)
 8005a06:	f7ff be06 	b.w	8005616 <__retarget_lock_release_recursive>
 8005a0a:	bf00      	nop
 8005a0c:	20000200 	.word	0x20000200

08005a10 <_read_r>:
 8005a10:	b538      	push	{r3, r4, r5, lr}
 8005a12:	4d07      	ldr	r5, [pc, #28]	; (8005a30 <_read_r+0x20>)
 8005a14:	4604      	mov	r4, r0
 8005a16:	4608      	mov	r0, r1
 8005a18:	4611      	mov	r1, r2
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	602a      	str	r2, [r5, #0]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	f7fb f968 	bl	8000cf4 <_read>
 8005a24:	1c43      	adds	r3, r0, #1
 8005a26:	d102      	bne.n	8005a2e <_read_r+0x1e>
 8005a28:	682b      	ldr	r3, [r5, #0]
 8005a2a:	b103      	cbz	r3, 8005a2e <_read_r+0x1e>
 8005a2c:	6023      	str	r3, [r4, #0]
 8005a2e:	bd38      	pop	{r3, r4, r5, pc}
 8005a30:	2000020c 	.word	0x2000020c

08005a34 <_init>:
 8005a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a36:	bf00      	nop
 8005a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a3a:	bc08      	pop	{r3}
 8005a3c:	469e      	mov	lr, r3
 8005a3e:	4770      	bx	lr

08005a40 <_fini>:
 8005a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a42:	bf00      	nop
 8005a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a46:	bc08      	pop	{r3}
 8005a48:	469e      	mov	lr, r3
 8005a4a:	4770      	bx	lr
