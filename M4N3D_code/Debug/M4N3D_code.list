
M4N3D_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08006258  08006258  00016258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006358  08006358  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006358  08006358  00016358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006360  08006360  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006360  08006360  00016360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006364  08006364  00016364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000070  080063d8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  080063d8  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116bd  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002522  00000000  00000000  0003175d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  00033c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d78  00000000  00000000  00034ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029143  00000000  00000000  00035858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104da  00000000  00000000  0005e99b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fec34  00000000  00000000  0006ee75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016daa9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043d0  00000000  00000000  0016dafc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006240 	.word	0x08006240

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006240 	.word	0x08006240

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, unsigned char *ptr, int len)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, ptr, len, 50);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	b29a      	uxth	r2, r3
 8000584:	2332      	movs	r3, #50	; 0x32
 8000586:	68b9      	ldr	r1, [r7, #8]
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <_write+0x24>)
 800058a:	f003 fd79 	bl	8004080 <HAL_UART_Transmit>
	return len;
 800058e:	687b      	ldr	r3, [r7, #4]
}
 8000590:	4618      	mov	r0, r3
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	200001bc 	.word	0x200001bc

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 fc90 	bl	8000ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f824 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 f998 	bl	80008dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ac:	f000 f948 	bl	8000840 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80005b0:	f000 f976 	bl	80008a0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80005b4:	f000 f914 	bl	80007e0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80005b8:	f000 f86c 	bl	8000694 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(1000);
 80005bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c0:	f000 fcfc 	bl	8000fbc <HAL_Delay>
  printf("System started\r\n");
 80005c4:	4807      	ldr	r0, [pc, #28]	; (80005e4 <main+0x48>)
 80005c6:	f004 febd 	bl	8005344 <puts>
	//using ADC to read 4 channels joysticks
	//HAL_ADC_Start_DMA(&hadc1, data, 4);
	//printf("L_X: %d L_Y: %d R_X: %d, R_Y: %d \n\r", data[0], data[1], data[2], data[3]);

	//checking button from controller
	if(HAL_GPIO_ReadPin(GPIOC, CON_L_SW_Pin) == GPIO_PIN_RESET)
 80005ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ce:	4806      	ldr	r0, [pc, #24]	; (80005e8 <main+0x4c>)
 80005d0:	f002 f962 	bl	8002898 <HAL_GPIO_ReadPin>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d1f7      	bne.n	80005ca <main+0x2e>
	{
			printf("Wcisnieto L \n\r");
 80005da:	4804      	ldr	r0, [pc, #16]	; (80005ec <main+0x50>)
 80005dc:	f004 fe2c 	bl	8005238 <iprintf>
	if(HAL_GPIO_ReadPin(GPIOC, CON_L_SW_Pin) == GPIO_PIN_RESET)
 80005e0:	e7f3      	b.n	80005ca <main+0x2e>
 80005e2:	bf00      	nop
 80005e4:	08006258 	.word	0x08006258
 80005e8:	48000800 	.word	0x48000800
 80005ec:	08006268 	.word	0x08006268

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b096      	sub	sp, #88	; 0x58
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	2244      	movs	r2, #68	; 0x44
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f004 fe12 	bl	8005228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	463b      	mov	r3, r7
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000612:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000616:	f002 f97d 	bl	8002914 <HAL_PWREx_ControlVoltageScaling>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000620:	f000 f9e2 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800062c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062e:	2310      	movs	r3, #16
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000636:	2302      	movs	r3, #2
 8000638:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800063a:	2301      	movs	r3, #1
 800063c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800063e:	230a      	movs	r3, #10
 8000640:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000642:	2307      	movs	r3, #7
 8000644:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000646:	2302      	movs	r3, #2
 8000648:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800064a:	2302      	movs	r3, #2
 800064c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4618      	mov	r0, r3
 8000654:	f002 f9b4 	bl	80029c0 <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800065e:	f000 f9c3 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2303      	movs	r3, #3
 8000668:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000676:	463b      	mov	r3, r7
 8000678:	2104      	movs	r1, #4
 800067a:	4618      	mov	r0, r3
 800067c:	f002 fd7c 	bl	8003178 <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000686:	f000 f9af 	bl	80009e8 <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3758      	adds	r7, #88	; 0x58
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	; 0x28
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
 80006b4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006b6:	4b44      	ldr	r3, [pc, #272]	; (80007c8 <MX_ADC1_Init+0x134>)
 80006b8:	4a44      	ldr	r2, [pc, #272]	; (80007cc <MX_ADC1_Init+0x138>)
 80006ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006bc:	4b42      	ldr	r3, [pc, #264]	; (80007c8 <MX_ADC1_Init+0x134>)
 80006be:	2200      	movs	r2, #0
 80006c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006c2:	4b41      	ldr	r3, [pc, #260]	; (80007c8 <MX_ADC1_Init+0x134>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006c8:	4b3f      	ldr	r3, [pc, #252]	; (80007c8 <MX_ADC1_Init+0x134>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006ce:	4b3e      	ldr	r3, [pc, #248]	; (80007c8 <MX_ADC1_Init+0x134>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d4:	4b3c      	ldr	r3, [pc, #240]	; (80007c8 <MX_ADC1_Init+0x134>)
 80006d6:	2204      	movs	r2, #4
 80006d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006da:	4b3b      	ldr	r3, [pc, #236]	; (80007c8 <MX_ADC1_Init+0x134>)
 80006dc:	2200      	movs	r2, #0
 80006de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006e0:	4b39      	ldr	r3, [pc, #228]	; (80007c8 <MX_ADC1_Init+0x134>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 80006e6:	4b38      	ldr	r3, [pc, #224]	; (80007c8 <MX_ADC1_Init+0x134>)
 80006e8:	2204      	movs	r2, #4
 80006ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ec:	4b36      	ldr	r3, [pc, #216]	; (80007c8 <MX_ADC1_Init+0x134>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f4:	4b34      	ldr	r3, [pc, #208]	; (80007c8 <MX_ADC1_Init+0x134>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006fa:	4b33      	ldr	r3, [pc, #204]	; (80007c8 <MX_ADC1_Init+0x134>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000700:	4b31      	ldr	r3, [pc, #196]	; (80007c8 <MX_ADC1_Init+0x134>)
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000708:	4b2f      	ldr	r3, [pc, #188]	; (80007c8 <MX_ADC1_Init+0x134>)
 800070a:	2200      	movs	r2, #0
 800070c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800070e:	4b2e      	ldr	r3, [pc, #184]	; (80007c8 <MX_ADC1_Init+0x134>)
 8000710:	2200      	movs	r2, #0
 8000712:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000716:	482c      	ldr	r0, [pc, #176]	; (80007c8 <MX_ADC1_Init+0x134>)
 8000718:	f000 fe00 	bl	800131c <HAL_ADC_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000722:	f000 f961 	bl	80009e8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	4619      	mov	r1, r3
 8000730:	4825      	ldr	r0, [pc, #148]	; (80007c8 <MX_ADC1_Init+0x134>)
 8000732:	f001 fb5f 	bl	8001df4 <HAL_ADCEx_MultiModeConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800073c:	f000 f954 	bl	80009e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000740:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <MX_ADC1_Init+0x13c>)
 8000742:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000744:	2306      	movs	r3, #6
 8000746:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800074c:	237f      	movs	r3, #127	; 0x7f
 800074e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000750:	2304      	movs	r3, #4
 8000752:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	4619      	mov	r1, r3
 800075c:	481a      	ldr	r0, [pc, #104]	; (80007c8 <MX_ADC1_Init+0x134>)
 800075e:	f000 ff33 	bl	80015c8 <HAL_ADC_ConfigChannel>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000768:	f000 f93e 	bl	80009e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800076c:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <MX_ADC1_Init+0x140>)
 800076e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000770:	230c      	movs	r3, #12
 8000772:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	4619      	mov	r1, r3
 8000778:	4813      	ldr	r0, [pc, #76]	; (80007c8 <MX_ADC1_Init+0x134>)
 800077a:	f000 ff25 	bl	80015c8 <HAL_ADC_ConfigChannel>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8000784:	f000 f930 	bl	80009e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000788:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <MX_ADC1_Init+0x144>)
 800078a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800078c:	2312      	movs	r3, #18
 800078e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	4619      	mov	r1, r3
 8000794:	480c      	ldr	r0, [pc, #48]	; (80007c8 <MX_ADC1_Init+0x134>)
 8000796:	f000 ff17 	bl	80015c8 <HAL_ADC_ConfigChannel>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 80007a0:	f000 f922 	bl	80009e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007a4:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <MX_ADC1_Init+0x148>)
 80007a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80007a8:	2318      	movs	r3, #24
 80007aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	4619      	mov	r1, r3
 80007b0:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_ADC1_Init+0x134>)
 80007b2:	f000 ff09 	bl	80015c8 <HAL_ADC_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 80007bc:	f000 f914 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	3728      	adds	r7, #40	; 0x28
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	2000008c 	.word	0x2000008c
 80007cc:	50040000 	.word	0x50040000
 80007d0:	04300002 	.word	0x04300002
 80007d4:	08600004 	.word	0x08600004
 80007d8:	0c900008 	.word	0x0c900008
 80007dc:	10c00010 	.word	0x10c00010

080007e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_USART1_UART_Init+0x58>)
 80007e6:	4a15      	ldr	r2, [pc, #84]	; (800083c <MX_USART1_UART_Init+0x5c>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80007ea:	4b13      	ldr	r3, [pc, #76]	; (8000838 <MX_USART1_UART_Init+0x58>)
 80007ec:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80007f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_USART1_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_USART1_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_USART1_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_USART1_UART_Init+0x58>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_USART1_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_USART1_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_USART1_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_USART1_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_USART1_UART_Init+0x58>)
 8000824:	f003 fbd6 	bl	8003fd4 <HAL_HalfDuplex_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800082e:	f000 f8db 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000138 	.word	0x20000138
 800083c:	40013800 	.word	0x40013800

08000840 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000846:	4a15      	ldr	r2, [pc, #84]	; (800089c <MX_USART2_UART_Init+0x5c>)
 8000848:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800084a:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MX_USART2_UART_Init+0x58>)
 800084c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000850:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_USART2_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000866:	220c      	movs	r2, #12
 8000868:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <MX_USART2_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_USART2_UART_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000884:	f003 fb58 	bl	8003f38 <HAL_UART_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800088e:	f000 f8ab 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200001bc 	.word	0x200001bc
 800089c:	40004400 	.word	0x40004400

080008a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_DMA_Init+0x38>)
 80008a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008aa:	4a0b      	ldr	r2, [pc, #44]	; (80008d8 <MX_DMA_Init+0x38>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6493      	str	r3, [r2, #72]	; 0x48
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_DMA_Init+0x38>)
 80008b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2100      	movs	r1, #0
 80008c2:	200b      	movs	r0, #11
 80008c4:	f001 fc21 	bl	800210a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008c8:	200b      	movs	r0, #11
 80008ca:	f001 fc3a 	bl	8002142 <HAL_NVIC_EnableIRQ>

}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	; 0x28
 80008e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	4b3b      	ldr	r3, [pc, #236]	; (80009e0 <MX_GPIO_Init+0x104>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	4a3a      	ldr	r2, [pc, #232]	; (80009e0 <MX_GPIO_Init+0x104>)
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fe:	4b38      	ldr	r3, [pc, #224]	; (80009e0 <MX_GPIO_Init+0x104>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	f003 0304 	and.w	r3, r3, #4
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090a:	4b35      	ldr	r3, [pc, #212]	; (80009e0 <MX_GPIO_Init+0x104>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	4a34      	ldr	r2, [pc, #208]	; (80009e0 <MX_GPIO_Init+0x104>)
 8000910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000916:	4b32      	ldr	r3, [pc, #200]	; (80009e0 <MX_GPIO_Init+0x104>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b2f      	ldr	r3, [pc, #188]	; (80009e0 <MX_GPIO_Init+0x104>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	4a2e      	ldr	r2, [pc, #184]	; (80009e0 <MX_GPIO_Init+0x104>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092e:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <MX_GPIO_Init+0x104>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	4b29      	ldr	r3, [pc, #164]	; (80009e0 <MX_GPIO_Init+0x104>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	4a28      	ldr	r2, [pc, #160]	; (80009e0 <MX_GPIO_Init+0x104>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000946:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <MX_GPIO_Init+0x104>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2120      	movs	r1, #32
 8000956:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095a:	f001 ffb5 	bl	80028c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EFFECTOR_LED_Pin|EFFECTOR_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	21c0      	movs	r1, #192	; 0xc0
 8000962:	4820      	ldr	r0, [pc, #128]	; (80009e4 <MX_GPIO_Init+0x108>)
 8000964:	f001 ffb0 	bl	80028c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800096c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800096e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4619      	mov	r1, r3
 800097e:	4819      	ldr	r0, [pc, #100]	; (80009e4 <MX_GPIO_Init+0x108>)
 8000980:	f001 fde0 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000984:	2320      	movs	r3, #32
 8000986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000988:	2301      	movs	r3, #1
 800098a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4619      	mov	r1, r3
 800099a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099e:	f001 fdd1 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pins : EFFECTOR_LED_Pin EFFECTOR_Pin */
  GPIO_InitStruct.Pin = EFFECTOR_LED_Pin|EFFECTOR_Pin;
 80009a2:	23c0      	movs	r3, #192	; 0xc0
 80009a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4619      	mov	r1, r3
 80009b8:	480a      	ldr	r0, [pc, #40]	; (80009e4 <MX_GPIO_Init+0x108>)
 80009ba:	f001 fdc3 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pins : CON_L_SW_Pin CON_R_SW_Pin */
  GPIO_InitStruct.Pin = CON_L_SW_Pin|CON_R_SW_Pin;
 80009be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4619      	mov	r1, r3
 80009d2:	4804      	ldr	r0, [pc, #16]	; (80009e4 <MX_GPIO_Init+0x108>)
 80009d4:	f001 fdb6 	bl	8002544 <HAL_GPIO_Init>

}
 80009d8:	bf00      	nop
 80009da:	3728      	adds	r7, #40	; 0x28
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40021000 	.word	0x40021000
 80009e4:	48000800 	.word	0x48000800

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <Error_Handler+0x8>
	...

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <HAL_MspInit+0x44>)
 80009fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009fe:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <HAL_MspInit+0x44>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6613      	str	r3, [r2, #96]	; 0x60
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <HAL_MspInit+0x44>)
 8000a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <HAL_MspInit+0x44>)
 8000a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a16:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <HAL_MspInit+0x44>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_MspInit+0x44>)
 8000a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000

08000a3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b0ac      	sub	sp, #176	; 0xb0
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2288      	movs	r2, #136	; 0x88
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f004 fbe3 	bl	8005228 <memset>
  if(hadc->Instance==ADC1)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a3c      	ldr	r2, [pc, #240]	; (8000b58 <HAL_ADC_MspInit+0x11c>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d171      	bne.n	8000b50 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a70:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000a82:	2308      	movs	r3, #8
 8000a84:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000a86:	2307      	movs	r3, #7
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000a92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a96:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f002 fd8f 	bl	80035c0 <HAL_RCCEx_PeriphCLKConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000aa8:	f7ff ff9e 	bl	80009e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x120>)
 8000aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab0:	4a2a      	ldr	r2, [pc, #168]	; (8000b5c <HAL_ADC_MspInit+0x120>)
 8000ab2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ab6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab8:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x120>)
 8000aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac4:	4b25      	ldr	r3, [pc, #148]	; (8000b5c <HAL_ADC_MspInit+0x120>)
 8000ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac8:	4a24      	ldr	r2, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x120>)
 8000aca:	f043 0304 	orr.w	r3, r3, #4
 8000ace:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad0:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <HAL_ADC_MspInit+0x120>)
 8000ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad4:	f003 0304 	and.w	r3, r3, #4
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000adc:	230f      	movs	r3, #15
 8000ade:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ae2:	230b      	movs	r3, #11
 8000ae4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000af2:	4619      	mov	r1, r3
 8000af4:	481a      	ldr	r0, [pc, #104]	; (8000b60 <HAL_ADC_MspInit+0x124>)
 8000af6:	f001 fd25 	bl	8002544 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000afa:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <HAL_ADC_MspInit+0x128>)
 8000afc:	4a1a      	ldr	r2, [pc, #104]	; (8000b68 <HAL_ADC_MspInit+0x12c>)
 8000afe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000b00:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <HAL_ADC_MspInit+0x128>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b06:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <HAL_ADC_MspInit+0x128>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b0c:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <HAL_ADC_MspInit+0x128>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b12:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <HAL_ADC_MspInit+0x128>)
 8000b14:	2280      	movs	r2, #128	; 0x80
 8000b16:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_ADC_MspInit+0x128>)
 8000b1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b1e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b20:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <HAL_ADC_MspInit+0x128>)
 8000b22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b26:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000b28:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <HAL_ADC_MspInit+0x128>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <HAL_ADC_MspInit+0x128>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b34:	480b      	ldr	r0, [pc, #44]	; (8000b64 <HAL_ADC_MspInit+0x128>)
 8000b36:	f001 fb1f 	bl	8002178 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 8000b40:	f7ff ff52 	bl	80009e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <HAL_ADC_MspInit+0x128>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a06      	ldr	r2, [pc, #24]	; (8000b64 <HAL_ADC_MspInit+0x128>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b50:	bf00      	nop
 8000b52:	37b0      	adds	r7, #176	; 0xb0
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	50040000 	.word	0x50040000
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	48000800 	.word	0x48000800
 8000b64:	200000f0 	.word	0x200000f0
 8000b68:	40020008 	.word	0x40020008

08000b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b0ae      	sub	sp, #184	; 0xb8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	2288      	movs	r2, #136	; 0x88
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f004 fb4b 	bl	8005228 <memset>
  if(huart->Instance==USART1)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a47      	ldr	r2, [pc, #284]	; (8000cb4 <HAL_UART_MspInit+0x148>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d145      	bne.n	8000c28 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f002 fd09 	bl	80035c0 <HAL_RCCEx_PeriphCLKConfig>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bb4:	f7ff ff18 	bl	80009e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bb8:	4b3f      	ldr	r3, [pc, #252]	; (8000cb8 <HAL_UART_MspInit+0x14c>)
 8000bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bbc:	4a3e      	ldr	r2, [pc, #248]	; (8000cb8 <HAL_UART_MspInit+0x14c>)
 8000bbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc2:	6613      	str	r3, [r2, #96]	; 0x60
 8000bc4:	4b3c      	ldr	r3, [pc, #240]	; (8000cb8 <HAL_UART_MspInit+0x14c>)
 8000bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bcc:	61bb      	str	r3, [r7, #24]
 8000bce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd0:	4b39      	ldr	r3, [pc, #228]	; (8000cb8 <HAL_UART_MspInit+0x14c>)
 8000bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd4:	4a38      	ldr	r2, [pc, #224]	; (8000cb8 <HAL_UART_MspInit+0x14c>)
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bdc:	4b36      	ldr	r3, [pc, #216]	; (8000cb8 <HAL_UART_MspInit+0x14c>)
 8000bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = SRV_UART_RXTX_Pin;
 8000be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf0:	2312      	movs	r3, #18
 8000bf2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c02:	2307      	movs	r3, #7
 8000c04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(SRV_UART_RXTX_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c12:	f001 fc97 	bl	8002544 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2025      	movs	r0, #37	; 0x25
 8000c1c:	f001 fa75 	bl	800210a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c20:	2025      	movs	r0, #37	; 0x25
 8000c22:	f001 fa8e 	bl	8002142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c26:	e040      	b.n	8000caa <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a23      	ldr	r2, [pc, #140]	; (8000cbc <HAL_UART_MspInit+0x150>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d13b      	bne.n	8000caa <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c32:	2302      	movs	r3, #2
 8000c34:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c3a:	f107 031c 	add.w	r3, r7, #28
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f002 fcbe 	bl	80035c0 <HAL_RCCEx_PeriphCLKConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8000c4a:	f7ff fecd 	bl	80009e8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <HAL_UART_MspInit+0x14c>)
 8000c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c52:	4a19      	ldr	r2, [pc, #100]	; (8000cb8 <HAL_UART_MspInit+0x14c>)
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c58:	6593      	str	r3, [r2, #88]	; 0x58
 8000c5a:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <HAL_UART_MspInit+0x14c>)
 8000c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <HAL_UART_MspInit+0x14c>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6a:	4a13      	ldr	r2, [pc, #76]	; (8000cb8 <HAL_UART_MspInit+0x14c>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <HAL_UART_MspInit+0x14c>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TTY_UART_TX_Pin|TTY_UART_RX_Pin;
 8000c7e:	230c      	movs	r3, #12
 8000c80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c96:	2307      	movs	r3, #7
 8000c98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca6:	f001 fc4d 	bl	8002544 <HAL_GPIO_Init>
}
 8000caa:	bf00      	nop
 8000cac:	37b8      	adds	r7, #184	; 0xb8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40013800 	.word	0x40013800
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40004400 	.word	0x40004400

08000cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <NMI_Handler+0x4>

08000cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <HardFault_Handler+0x4>

08000ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <MemManage_Handler+0x4>

08000cd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <BusFault_Handler+0x4>

08000cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <UsageFault_Handler+0x4>

08000cde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0c:	f000 f936 	bl	8000f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <DMA1_Channel1_IRQHandler+0x10>)
 8000d1a:	f001 fb64 	bl	80023e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200000f0 	.word	0x200000f0

08000d28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <USART1_IRQHandler+0x10>)
 8000d2e:	f003 fa3b 	bl	80041a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000138 	.word	0x20000138

08000d3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	e00a      	b.n	8000d64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d4e:	f3af 8000 	nop.w
 8000d52:	4601      	mov	r1, r0
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	1c5a      	adds	r2, r3, #1
 8000d58:	60ba      	str	r2, [r7, #8]
 8000d5a:	b2ca      	uxtb	r2, r1
 8000d5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	3301      	adds	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	dbf0      	blt.n	8000d4e <_read+0x12>
	}

return len;
 8000d6c:	687b      	ldr	r3, [r7, #4]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
	return -1;
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b083      	sub	sp, #12
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
 8000d96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d9e:	605a      	str	r2, [r3, #4]
	return 0;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <_isatty>:

int _isatty(int file)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
	return 1;
 8000db6:	2301      	movs	r3, #1
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
	return 0;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de8:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <_sbrk+0x5c>)
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <_sbrk+0x60>)
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <_sbrk+0x64>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <_sbrk+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d207      	bcs.n	8000e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e10:	f004 f9e0 	bl	80051d4 <__errno>
 8000e14:	4603      	mov	r3, r0
 8000e16:	220c      	movs	r2, #12
 8000e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e1e:	e009      	b.n	8000e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <_sbrk+0x64>)
 8000e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20018000 	.word	0x20018000
 8000e40:	00000400 	.word	0x00000400
 8000e44:	20000240 	.word	0x20000240
 8000e48:	20000258 	.word	0x20000258

08000e4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <SystemInit+0x20>)
 8000e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e56:	4a05      	ldr	r2, [pc, #20]	; (8000e6c <SystemInit+0x20>)
 8000e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e74:	f7ff ffea 	bl	8000e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e78:	480c      	ldr	r0, [pc, #48]	; (8000eac <LoopForever+0x6>)
  ldr r1, =_edata
 8000e7a:	490d      	ldr	r1, [pc, #52]	; (8000eb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <LoopForever+0xe>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e90:	4c0a      	ldr	r4, [pc, #40]	; (8000ebc <LoopForever+0x16>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f004 f99f 	bl	80051e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ea2:	f7ff fb7b 	bl	800059c <main>

08000ea6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ea6:	e7fe      	b.n	8000ea6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ea8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000eb4:	08006368 	.word	0x08006368
  ldr r2, =_sbss
 8000eb8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ebc:	20000258 	.word	0x20000258

08000ec0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC1_2_IRQHandler>
	...

08000ec4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <HAL_Init+0x3c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <HAL_Init+0x3c>)
 8000ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eda:	2003      	movs	r0, #3
 8000edc:	f001 f90a 	bl	80020f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f000 f80f 	bl	8000f04 <HAL_InitTick>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d002      	beq.n	8000ef2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	71fb      	strb	r3, [r7, #7]
 8000ef0:	e001      	b.n	8000ef6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ef2:	f7ff fd7f 	bl	80009f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40022000 	.word	0x40022000

08000f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f10:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <HAL_InitTick+0x6c>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d023      	beq.n	8000f60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f18:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <HAL_InitTick+0x70>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <HAL_InitTick+0x6c>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4619      	mov	r1, r3
 8000f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f001 f915 	bl	800215e <HAL_SYSTICK_Config>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d10f      	bne.n	8000f5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b0f      	cmp	r3, #15
 8000f3e:	d809      	bhi.n	8000f54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f40:	2200      	movs	r2, #0
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f48:	f001 f8df 	bl	800210a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <HAL_InitTick+0x74>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	e007      	b.n	8000f64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	73fb      	strb	r3, [r7, #15]
 8000f58:	e004      	b.n	8000f64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	73fb      	strb	r3, [r7, #15]
 8000f5e:	e001      	b.n	8000f64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000008 	.word	0x20000008
 8000f74:	20000000 	.word	0x20000000
 8000f78:	20000004 	.word	0x20000004

08000f7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_IncTick+0x20>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_IncTick+0x24>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <HAL_IncTick+0x24>)
 8000f8e:	6013      	str	r3, [r2, #0]
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20000008 	.word	0x20000008
 8000fa0:	20000244 	.word	0x20000244

08000fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <HAL_GetTick+0x14>)
 8000faa:	681b      	ldr	r3, [r3, #0]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000244 	.word	0x20000244

08000fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc4:	f7ff ffee 	bl	8000fa4 <HAL_GetTick>
 8000fc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fd4:	d005      	beq.n	8000fe2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <HAL_Delay+0x44>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4413      	add	r3, r2
 8000fe0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fe2:	bf00      	nop
 8000fe4:	f7ff ffde 	bl	8000fa4 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d8f7      	bhi.n	8000fe4 <HAL_Delay+0x28>
  {
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000008 	.word	0x20000008

08001004 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	431a      	orrs	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	609a      	str	r2, [r3, #8]
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
 8001032:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	431a      	orrs	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	609a      	str	r2, [r3, #8]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800106c:	b480      	push	{r7}
 800106e:	b087      	sub	sp, #28
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	3360      	adds	r3, #96	; 0x60
 800107e:	461a      	mov	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <LL_ADC_SetOffset+0x44>)
 800108e:	4013      	ands	r3, r2
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001096:	683a      	ldr	r2, [r7, #0]
 8001098:	430a      	orrs	r2, r1
 800109a:	4313      	orrs	r3, r2
 800109c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80010a4:	bf00      	nop
 80010a6:	371c      	adds	r7, #28
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	03fff000 	.word	0x03fff000

080010b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3360      	adds	r3, #96	; 0x60
 80010c2:	461a      	mov	r2, r3
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	3360      	adds	r3, #96	; 0x60
 80010f0:	461a      	mov	r2, r3
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	431a      	orrs	r2, r3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800110a:	bf00      	nop
 800110c:	371c      	adds	r7, #28
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001116:	b480      	push	{r7}
 8001118:	b087      	sub	sp, #28
 800111a:	af00      	add	r7, sp, #0
 800111c:	60f8      	str	r0, [r7, #12]
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	3330      	adds	r3, #48	; 0x30
 8001126:	461a      	mov	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	0a1b      	lsrs	r3, r3, #8
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	f003 030c 	and.w	r3, r3, #12
 8001132:	4413      	add	r3, r2
 8001134:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	f003 031f 	and.w	r3, r3, #31
 8001140:	211f      	movs	r1, #31
 8001142:	fa01 f303 	lsl.w	r3, r1, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	401a      	ands	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	0e9b      	lsrs	r3, r3, #26
 800114e:	f003 011f 	and.w	r1, r3, #31
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	f003 031f 	and.w	r3, r3, #31
 8001158:	fa01 f303 	lsl.w	r3, r1, r3
 800115c:	431a      	orrs	r2, r3
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001162:	bf00      	nop
 8001164:	371c      	adds	r7, #28
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800116e:	b480      	push	{r7}
 8001170:	b087      	sub	sp, #28
 8001172:	af00      	add	r7, sp, #0
 8001174:	60f8      	str	r0, [r7, #12]
 8001176:	60b9      	str	r1, [r7, #8]
 8001178:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	3314      	adds	r3, #20
 800117e:	461a      	mov	r2, r3
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	0e5b      	lsrs	r3, r3, #25
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	f003 0304 	and.w	r3, r3, #4
 800118a:	4413      	add	r3, r2
 800118c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	0d1b      	lsrs	r3, r3, #20
 8001196:	f003 031f 	and.w	r3, r3, #31
 800119a:	2107      	movs	r1, #7
 800119c:	fa01 f303 	lsl.w	r3, r1, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	401a      	ands	r2, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	0d1b      	lsrs	r3, r3, #20
 80011a8:	f003 031f 	and.w	r3, r3, #31
 80011ac:	6879      	ldr	r1, [r7, #4]
 80011ae:	fa01 f303 	lsl.w	r3, r1, r3
 80011b2:	431a      	orrs	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011b8:	bf00      	nop
 80011ba:	371c      	adds	r7, #28
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011dc:	43db      	mvns	r3, r3
 80011de:	401a      	ands	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f003 0318 	and.w	r3, r3, #24
 80011e6:	4908      	ldr	r1, [pc, #32]	; (8001208 <LL_ADC_SetChannelSingleDiff+0x44>)
 80011e8:	40d9      	lsrs	r1, r3
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	400b      	ands	r3, r1
 80011ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011f2:	431a      	orrs	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	0007ffff 	.word	0x0007ffff

0800120c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800121c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	6093      	str	r3, [r2, #8]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001240:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001244:	d101      	bne.n	800124a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001246:	2301      	movs	r3, #1
 8001248:	e000      	b.n	800124c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001268:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800126c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001290:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001294:	d101      	bne.n	800129a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001296:	2301      	movs	r3, #1
 8001298:	e000      	b.n	800129c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d101      	bne.n	80012c0 <LL_ADC_IsEnabled+0x18>
 80012bc:	2301      	movs	r3, #1
 80012be:	e000      	b.n	80012c2 <LL_ADC_IsEnabled+0x1a>
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 0304 	and.w	r3, r3, #4
 80012de:	2b04      	cmp	r3, #4
 80012e0:	d101      	bne.n	80012e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f003 0308 	and.w	r3, r3, #8
 8001304:	2b08      	cmp	r3, #8
 8001306:	d101      	bne.n	800130c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001308:	2301      	movs	r3, #1
 800130a:	e000      	b.n	800130e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800131c:	b590      	push	{r4, r7, lr}
 800131e:	b089      	sub	sp, #36	; 0x24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001328:	2300      	movs	r3, #0
 800132a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e136      	b.n	80015a4 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001340:	2b00      	cmp	r3, #0
 8001342:	d109      	bne.n	8001358 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff fb79 	bl	8000a3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff67 	bl	8001230 <LL_ADC_IsDeepPowerDownEnabled>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d004      	beq.n	8001372 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff4d 	bl	800120c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ff82 	bl	8001280 <LL_ADC_IsInternalRegulatorEnabled>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d115      	bne.n	80013ae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ff66 	bl	8001258 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800138c:	4b87      	ldr	r3, [pc, #540]	; (80015ac <HAL_ADC_Init+0x290>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	099b      	lsrs	r3, r3, #6
 8001392:	4a87      	ldr	r2, [pc, #540]	; (80015b0 <HAL_ADC_Init+0x294>)
 8001394:	fba2 2303 	umull	r2, r3, r2, r3
 8001398:	099b      	lsrs	r3, r3, #6
 800139a:	3301      	adds	r3, #1
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013a0:	e002      	b.n	80013a8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	3b01      	subs	r3, #1
 80013a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f9      	bne.n	80013a2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ff64 	bl	8001280 <LL_ADC_IsInternalRegulatorEnabled>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10d      	bne.n	80013da <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c2:	f043 0210 	orr.w	r2, r3, #16
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ce:	f043 0201 	orr.w	r2, r3, #1
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ff75 	bl	80012ce <LL_ADC_REG_IsConversionOngoing>
 80013e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ea:	f003 0310 	and.w	r3, r3, #16
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f040 80cf 	bne.w	8001592 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f040 80cb 	bne.w	8001592 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001400:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001404:	f043 0202 	orr.w	r2, r3, #2
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff49 	bl	80012a8 <LL_ADC_IsEnabled>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d115      	bne.n	8001448 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800141c:	4865      	ldr	r0, [pc, #404]	; (80015b4 <HAL_ADC_Init+0x298>)
 800141e:	f7ff ff43 	bl	80012a8 <LL_ADC_IsEnabled>
 8001422:	4604      	mov	r4, r0
 8001424:	4864      	ldr	r0, [pc, #400]	; (80015b8 <HAL_ADC_Init+0x29c>)
 8001426:	f7ff ff3f 	bl	80012a8 <LL_ADC_IsEnabled>
 800142a:	4603      	mov	r3, r0
 800142c:	431c      	orrs	r4, r3
 800142e:	4863      	ldr	r0, [pc, #396]	; (80015bc <HAL_ADC_Init+0x2a0>)
 8001430:	f7ff ff3a 	bl	80012a8 <LL_ADC_IsEnabled>
 8001434:	4603      	mov	r3, r0
 8001436:	4323      	orrs	r3, r4
 8001438:	2b00      	cmp	r3, #0
 800143a:	d105      	bne.n	8001448 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	4619      	mov	r1, r3
 8001442:	485f      	ldr	r0, [pc, #380]	; (80015c0 <HAL_ADC_Init+0x2a4>)
 8001444:	f7ff fdde 	bl	8001004 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	7e5b      	ldrb	r3, [r3, #25]
 800144c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001452:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001458:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800145e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001466:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d106      	bne.n	8001484 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147a:	3b01      	subs	r3, #1
 800147c:	045b      	lsls	r3, r3, #17
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001488:	2b00      	cmp	r3, #0
 800148a:	d009      	beq.n	80014a0 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001490:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001498:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68da      	ldr	r2, [r3, #12]
 80014a6:	4b47      	ldr	r3, [pc, #284]	; (80015c4 <HAL_ADC_Init+0x2a8>)
 80014a8:	4013      	ands	r3, r2
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6812      	ldr	r2, [r2, #0]
 80014ae:	69b9      	ldr	r1, [r7, #24]
 80014b0:	430b      	orrs	r3, r1
 80014b2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff08 	bl	80012ce <LL_ADC_REG_IsConversionOngoing>
 80014be:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff15 	bl	80012f4 <LL_ADC_INJ_IsConversionOngoing>
 80014ca:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d13d      	bne.n	800154e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d13a      	bne.n	800154e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014dc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014e4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014f4:	f023 0302 	bic.w	r3, r3, #2
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	6812      	ldr	r2, [r2, #0]
 80014fc:	69b9      	ldr	r1, [r7, #24]
 80014fe:	430b      	orrs	r3, r1
 8001500:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001508:	2b01      	cmp	r3, #1
 800150a:	d118      	bne.n	800153e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001516:	f023 0304 	bic.w	r3, r3, #4
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001522:	4311      	orrs	r1, r2
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001528:	4311      	orrs	r1, r2
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800152e:	430a      	orrs	r2, r1
 8001530:	431a      	orrs	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0201 	orr.w	r2, r2, #1
 800153a:	611a      	str	r2, [r3, #16]
 800153c:	e007      	b.n	800154e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	691a      	ldr	r2, [r3, #16]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 0201 	bic.w	r2, r2, #1
 800154c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d10c      	bne.n	8001570 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155c:	f023 010f 	bic.w	r1, r3, #15
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	1e5a      	subs	r2, r3, #1
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	631a      	str	r2, [r3, #48]	; 0x30
 800156e:	e007      	b.n	8001580 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 020f 	bic.w	r2, r2, #15
 800157e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001584:	f023 0303 	bic.w	r3, r3, #3
 8001588:	f043 0201 	orr.w	r2, r3, #1
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	655a      	str	r2, [r3, #84]	; 0x54
 8001590:	e007      	b.n	80015a2 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001596:	f043 0210 	orr.w	r2, r3, #16
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80015a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3724      	adds	r7, #36	; 0x24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd90      	pop	{r4, r7, pc}
 80015ac:	20000000 	.word	0x20000000
 80015b0:	053e2d63 	.word	0x053e2d63
 80015b4:	50040000 	.word	0x50040000
 80015b8:	50040100 	.word	0x50040100
 80015bc:	50040200 	.word	0x50040200
 80015c0:	50040300 	.word	0x50040300
 80015c4:	fff0c007 	.word	0xfff0c007

080015c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b0b6      	sub	sp, #216	; 0xd8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d101      	bne.n	80015ea <HAL_ADC_ConfigChannel+0x22>
 80015e6:	2302      	movs	r3, #2
 80015e8:	e3c7      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x7b2>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2201      	movs	r2, #1
 80015ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fe69 	bl	80012ce <LL_ADC_REG_IsConversionOngoing>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f040 83a8 	bne.w	8001d54 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b05      	cmp	r3, #5
 800160a:	d824      	bhi.n	8001656 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	3b02      	subs	r3, #2
 8001612:	2b03      	cmp	r3, #3
 8001614:	d81b      	bhi.n	800164e <HAL_ADC_ConfigChannel+0x86>
 8001616:	a201      	add	r2, pc, #4	; (adr r2, 800161c <HAL_ADC_ConfigChannel+0x54>)
 8001618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161c:	0800162d 	.word	0x0800162d
 8001620:	08001635 	.word	0x08001635
 8001624:	0800163d 	.word	0x0800163d
 8001628:	08001645 	.word	0x08001645
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	220c      	movs	r2, #12
 8001630:	605a      	str	r2, [r3, #4]
          break;
 8001632:	e011      	b.n	8001658 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	2212      	movs	r2, #18
 8001638:	605a      	str	r2, [r3, #4]
          break;
 800163a:	e00d      	b.n	8001658 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	2218      	movs	r2, #24
 8001640:	605a      	str	r2, [r3, #4]
          break;
 8001642:	e009      	b.n	8001658 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	f44f 7280 	mov.w	r2, #256	; 0x100
 800164a:	605a      	str	r2, [r3, #4]
          break;
 800164c:	e004      	b.n	8001658 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	2206      	movs	r2, #6
 8001652:	605a      	str	r2, [r3, #4]
          break;
 8001654:	e000      	b.n	8001658 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001656:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6818      	ldr	r0, [r3, #0]
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	6859      	ldr	r1, [r3, #4]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	f7ff fd56 	bl	8001116 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fe2d 	bl	80012ce <LL_ADC_REG_IsConversionOngoing>
 8001674:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fe39 	bl	80012f4 <LL_ADC_INJ_IsConversionOngoing>
 8001682:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001686:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800168a:	2b00      	cmp	r3, #0
 800168c:	f040 81a6 	bne.w	80019dc <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001690:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001694:	2b00      	cmp	r3, #0
 8001696:	f040 81a1 	bne.w	80019dc <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6818      	ldr	r0, [r3, #0]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	6819      	ldr	r1, [r3, #0]
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	461a      	mov	r2, r3
 80016a8:	f7ff fd61 	bl	800116e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	695a      	ldr	r2, [r3, #20]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	08db      	lsrs	r3, r3, #3
 80016b8:	f003 0303 	and.w	r3, r3, #3
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	d00a      	beq.n	80016e4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6818      	ldr	r0, [r3, #0]
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	6919      	ldr	r1, [r3, #16]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80016de:	f7ff fcc5 	bl	800106c <LL_ADC_SetOffset>
 80016e2:	e17b      	b.n	80019dc <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fce2 	bl	80010b4 <LL_ADC_GetOffsetChannel>
 80016f0:	4603      	mov	r3, r0
 80016f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10a      	bne.n	8001710 <HAL_ADC_ConfigChannel+0x148>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2100      	movs	r1, #0
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fcd7 	bl	80010b4 <LL_ADC_GetOffsetChannel>
 8001706:	4603      	mov	r3, r0
 8001708:	0e9b      	lsrs	r3, r3, #26
 800170a:	f003 021f 	and.w	r2, r3, #31
 800170e:	e01e      	b.n	800174e <HAL_ADC_ConfigChannel+0x186>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fccc 	bl	80010b4 <LL_ADC_GetOffsetChannel>
 800171c:	4603      	mov	r3, r0
 800171e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001722:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001726:	fa93 f3a3 	rbit	r3, r3
 800172a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800172e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001732:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001736:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800173e:	2320      	movs	r3, #32
 8001740:	e004      	b.n	800174c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001742:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001746:	fab3 f383 	clz	r3, r3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001756:	2b00      	cmp	r3, #0
 8001758:	d105      	bne.n	8001766 <HAL_ADC_ConfigChannel+0x19e>
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	0e9b      	lsrs	r3, r3, #26
 8001760:	f003 031f 	and.w	r3, r3, #31
 8001764:	e018      	b.n	8001798 <HAL_ADC_ConfigChannel+0x1d0>
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001772:	fa93 f3a3 	rbit	r3, r3
 8001776:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800177a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800177e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001782:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800178a:	2320      	movs	r3, #32
 800178c:	e004      	b.n	8001798 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800178e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001792:	fab3 f383 	clz	r3, r3
 8001796:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001798:	429a      	cmp	r2, r3
 800179a:	d106      	bne.n	80017aa <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2200      	movs	r2, #0
 80017a2:	2100      	movs	r1, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fc9b 	bl	80010e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2101      	movs	r1, #1
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fc7f 	bl	80010b4 <LL_ADC_GetOffsetChannel>
 80017b6:	4603      	mov	r3, r0
 80017b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10a      	bne.n	80017d6 <HAL_ADC_ConfigChannel+0x20e>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2101      	movs	r1, #1
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fc74 	bl	80010b4 <LL_ADC_GetOffsetChannel>
 80017cc:	4603      	mov	r3, r0
 80017ce:	0e9b      	lsrs	r3, r3, #26
 80017d0:	f003 021f 	and.w	r2, r3, #31
 80017d4:	e01e      	b.n	8001814 <HAL_ADC_ConfigChannel+0x24c>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2101      	movs	r1, #1
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fc69 	bl	80010b4 <LL_ADC_GetOffsetChannel>
 80017e2:	4603      	mov	r3, r0
 80017e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017ec:	fa93 f3a3 	rbit	r3, r3
 80017f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80017f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80017f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80017fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001804:	2320      	movs	r3, #32
 8001806:	e004      	b.n	8001812 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001808:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800180c:	fab3 f383 	clz	r3, r3
 8001810:	b2db      	uxtb	r3, r3
 8001812:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800181c:	2b00      	cmp	r3, #0
 800181e:	d105      	bne.n	800182c <HAL_ADC_ConfigChannel+0x264>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	0e9b      	lsrs	r3, r3, #26
 8001826:	f003 031f 	and.w	r3, r3, #31
 800182a:	e018      	b.n	800185e <HAL_ADC_ConfigChannel+0x296>
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001834:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001838:	fa93 f3a3 	rbit	r3, r3
 800183c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001840:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001844:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001848:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001850:	2320      	movs	r3, #32
 8001852:	e004      	b.n	800185e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001854:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001858:	fab3 f383 	clz	r3, r3
 800185c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800185e:	429a      	cmp	r2, r3
 8001860:	d106      	bne.n	8001870 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2200      	movs	r2, #0
 8001868:	2101      	movs	r1, #1
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff fc38 	bl	80010e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2102      	movs	r1, #2
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fc1c 	bl	80010b4 <LL_ADC_GetOffsetChannel>
 800187c:	4603      	mov	r3, r0
 800187e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10a      	bne.n	800189c <HAL_ADC_ConfigChannel+0x2d4>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2102      	movs	r1, #2
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fc11 	bl	80010b4 <LL_ADC_GetOffsetChannel>
 8001892:	4603      	mov	r3, r0
 8001894:	0e9b      	lsrs	r3, r3, #26
 8001896:	f003 021f 	and.w	r2, r3, #31
 800189a:	e01e      	b.n	80018da <HAL_ADC_ConfigChannel+0x312>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2102      	movs	r1, #2
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fc06 	bl	80010b4 <LL_ADC_GetOffsetChannel>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018b2:	fa93 f3a3 	rbit	r3, r3
 80018b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80018ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80018c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80018ca:	2320      	movs	r3, #32
 80018cc:	e004      	b.n	80018d8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80018ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018d2:	fab3 f383 	clz	r3, r3
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d105      	bne.n	80018f2 <HAL_ADC_ConfigChannel+0x32a>
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	0e9b      	lsrs	r3, r3, #26
 80018ec:	f003 031f 	and.w	r3, r3, #31
 80018f0:	e016      	b.n	8001920 <HAL_ADC_ConfigChannel+0x358>
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80018fe:	fa93 f3a3 	rbit	r3, r3
 8001902:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001904:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001906:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800190a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001912:	2320      	movs	r3, #32
 8001914:	e004      	b.n	8001920 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001916:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800191a:	fab3 f383 	clz	r3, r3
 800191e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001920:	429a      	cmp	r2, r3
 8001922:	d106      	bne.n	8001932 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2200      	movs	r2, #0
 800192a:	2102      	movs	r1, #2
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fbd7 	bl	80010e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2103      	movs	r1, #3
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fbbb 	bl	80010b4 <LL_ADC_GetOffsetChannel>
 800193e:	4603      	mov	r3, r0
 8001940:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001944:	2b00      	cmp	r3, #0
 8001946:	d10a      	bne.n	800195e <HAL_ADC_ConfigChannel+0x396>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2103      	movs	r1, #3
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fbb0 	bl	80010b4 <LL_ADC_GetOffsetChannel>
 8001954:	4603      	mov	r3, r0
 8001956:	0e9b      	lsrs	r3, r3, #26
 8001958:	f003 021f 	and.w	r2, r3, #31
 800195c:	e017      	b.n	800198e <HAL_ADC_ConfigChannel+0x3c6>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2103      	movs	r1, #3
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fba5 	bl	80010b4 <LL_ADC_GetOffsetChannel>
 800196a:	4603      	mov	r3, r0
 800196c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001970:	fa93 f3a3 	rbit	r3, r3
 8001974:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001976:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001978:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800197a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001980:	2320      	movs	r3, #32
 8001982:	e003      	b.n	800198c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001986:	fab3 f383 	clz	r3, r3
 800198a:	b2db      	uxtb	r3, r3
 800198c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001996:	2b00      	cmp	r3, #0
 8001998:	d105      	bne.n	80019a6 <HAL_ADC_ConfigChannel+0x3de>
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	0e9b      	lsrs	r3, r3, #26
 80019a0:	f003 031f 	and.w	r3, r3, #31
 80019a4:	e011      	b.n	80019ca <HAL_ADC_ConfigChannel+0x402>
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019ae:	fa93 f3a3 	rbit	r3, r3
 80019b2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80019b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80019b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80019be:	2320      	movs	r3, #32
 80019c0:	e003      	b.n	80019ca <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80019c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019c4:	fab3 f383 	clz	r3, r3
 80019c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d106      	bne.n	80019dc <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2200      	movs	r2, #0
 80019d4:	2103      	movs	r1, #3
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fb82 	bl	80010e0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff fc61 	bl	80012a8 <LL_ADC_IsEnabled>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f040 813f 	bne.w	8001c6c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6818      	ldr	r0, [r3, #0]
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	6819      	ldr	r1, [r3, #0]
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	461a      	mov	r2, r3
 80019fc:	f7ff fbe2 	bl	80011c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	4a8e      	ldr	r2, [pc, #568]	; (8001c40 <HAL_ADC_ConfigChannel+0x678>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	f040 8130 	bne.w	8001c6c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10b      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x46c>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	0e9b      	lsrs	r3, r3, #26
 8001a22:	3301      	adds	r3, #1
 8001a24:	f003 031f 	and.w	r3, r3, #31
 8001a28:	2b09      	cmp	r3, #9
 8001a2a:	bf94      	ite	ls
 8001a2c:	2301      	movls	r3, #1
 8001a2e:	2300      	movhi	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	e019      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x4a0>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a3c:	fa93 f3a3 	rbit	r3, r3
 8001a40:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001a42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a44:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001a46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001a4c:	2320      	movs	r3, #32
 8001a4e:	e003      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001a50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a52:	fab3 f383 	clz	r3, r3
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	3301      	adds	r3, #1
 8001a5a:	f003 031f 	and.w	r3, r3, #31
 8001a5e:	2b09      	cmp	r3, #9
 8001a60:	bf94      	ite	ls
 8001a62:	2301      	movls	r3, #1
 8001a64:	2300      	movhi	r3, #0
 8001a66:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d079      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d107      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x4c0>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	0e9b      	lsrs	r3, r3, #26
 8001a7e:	3301      	adds	r3, #1
 8001a80:	069b      	lsls	r3, r3, #26
 8001a82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a86:	e015      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x4ec>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a90:	fa93 f3a3 	rbit	r3, r3
 8001a94:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a98:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001aa0:	2320      	movs	r3, #32
 8001aa2:	e003      	b.n	8001aac <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa6:	fab3 f383 	clz	r3, r3
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	3301      	adds	r3, #1
 8001aae:	069b      	lsls	r3, r3, #26
 8001ab0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d109      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x50c>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	0e9b      	lsrs	r3, r3, #26
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	f003 031f 	and.w	r3, r3, #31
 8001acc:	2101      	movs	r1, #1
 8001ace:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad2:	e017      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x53c>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001adc:	fa93 f3a3 	rbit	r3, r3
 8001ae0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ae4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001aec:	2320      	movs	r3, #32
 8001aee:	e003      	b.n	8001af8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001af2:	fab3 f383 	clz	r3, r3
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	3301      	adds	r3, #1
 8001afa:	f003 031f 	and.w	r3, r3, #31
 8001afe:	2101      	movs	r1, #1
 8001b00:	fa01 f303 	lsl.w	r3, r1, r3
 8001b04:	ea42 0103 	orr.w	r1, r2, r3
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10a      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x562>
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	0e9b      	lsrs	r3, r3, #26
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	f003 021f 	and.w	r2, r3, #31
 8001b20:	4613      	mov	r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4413      	add	r3, r2
 8001b26:	051b      	lsls	r3, r3, #20
 8001b28:	e018      	b.n	8001b5c <HAL_ADC_ConfigChannel+0x594>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b32:	fa93 f3a3 	rbit	r3, r3
 8001b36:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001b42:	2320      	movs	r3, #32
 8001b44:	e003      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b48:	fab3 f383 	clz	r3, r3
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	3301      	adds	r3, #1
 8001b50:	f003 021f 	and.w	r2, r3, #31
 8001b54:	4613      	mov	r3, r2
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	4413      	add	r3, r2
 8001b5a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b5c:	430b      	orrs	r3, r1
 8001b5e:	e080      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d107      	bne.n	8001b7c <HAL_ADC_ConfigChannel+0x5b4>
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	0e9b      	lsrs	r3, r3, #26
 8001b72:	3301      	adds	r3, #1
 8001b74:	069b      	lsls	r3, r3, #26
 8001b76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b7a:	e015      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x5e0>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b84:	fa93 f3a3 	rbit	r3, r3
 8001b88:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b8c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001b94:	2320      	movs	r3, #32
 8001b96:	e003      	b.n	8001ba0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b9a:	fab3 f383 	clz	r3, r3
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	069b      	lsls	r3, r3, #26
 8001ba4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d109      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x600>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	0e9b      	lsrs	r3, r3, #26
 8001bba:	3301      	adds	r3, #1
 8001bbc:	f003 031f 	and.w	r3, r3, #31
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc6:	e017      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0x630>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bce:	6a3b      	ldr	r3, [r7, #32]
 8001bd0:	fa93 f3a3 	rbit	r3, r3
 8001bd4:	61fb      	str	r3, [r7, #28]
  return result;
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001be0:	2320      	movs	r3, #32
 8001be2:	e003      	b.n	8001bec <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	fab3 f383 	clz	r3, r3
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	3301      	adds	r3, #1
 8001bee:	f003 031f 	and.w	r3, r3, #31
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf8:	ea42 0103 	orr.w	r1, r2, r3
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d10d      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x65c>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	0e9b      	lsrs	r3, r3, #26
 8001c0e:	3301      	adds	r3, #1
 8001c10:	f003 021f 	and.w	r2, r3, #31
 8001c14:	4613      	mov	r3, r2
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	4413      	add	r3, r2
 8001c1a:	3b1e      	subs	r3, #30
 8001c1c:	051b      	lsls	r3, r3, #20
 8001c1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c22:	e01d      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x698>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	fa93 f3a3 	rbit	r3, r3
 8001c30:	613b      	str	r3, [r7, #16]
  return result;
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d103      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001c3c:	2320      	movs	r3, #32
 8001c3e:	e005      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x684>
 8001c40:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	fab3 f383 	clz	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	f003 021f 	and.w	r2, r3, #31
 8001c52:	4613      	mov	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4413      	add	r3, r2
 8001c58:	3b1e      	subs	r3, #30
 8001c5a:	051b      	lsls	r3, r3, #20
 8001c5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c60:	430b      	orrs	r3, r1
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	6892      	ldr	r2, [r2, #8]
 8001c66:	4619      	mov	r1, r3
 8001c68:	f7ff fa81 	bl	800116e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b44      	ldr	r3, [pc, #272]	; (8001d84 <HAL_ADC_ConfigChannel+0x7bc>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d07a      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c78:	4843      	ldr	r0, [pc, #268]	; (8001d88 <HAL_ADC_ConfigChannel+0x7c0>)
 8001c7a:	f7ff f9e9 	bl	8001050 <LL_ADC_GetCommonPathInternalCh>
 8001c7e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a41      	ldr	r2, [pc, #260]	; (8001d8c <HAL_ADC_ConfigChannel+0x7c4>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d12c      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d126      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a3c      	ldr	r2, [pc, #240]	; (8001d90 <HAL_ADC_ConfigChannel+0x7c8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d004      	beq.n	8001cac <HAL_ADC_ConfigChannel+0x6e4>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a3b      	ldr	r2, [pc, #236]	; (8001d94 <HAL_ADC_ConfigChannel+0x7cc>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d15d      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4834      	ldr	r0, [pc, #208]	; (8001d88 <HAL_ADC_ConfigChannel+0x7c0>)
 8001cb8:	f7ff f9b7 	bl	800102a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cbc:	4b36      	ldr	r3, [pc, #216]	; (8001d98 <HAL_ADC_ConfigChannel+0x7d0>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	099b      	lsrs	r3, r3, #6
 8001cc2:	4a36      	ldr	r2, [pc, #216]	; (8001d9c <HAL_ADC_ConfigChannel+0x7d4>)
 8001cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc8:	099b      	lsrs	r3, r3, #6
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	4613      	mov	r3, r2
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4413      	add	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001cd6:	e002      	b.n	8001cde <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1f9      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ce4:	e040      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a2d      	ldr	r2, [pc, #180]	; (8001da0 <HAL_ADC_ConfigChannel+0x7d8>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d118      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x75a>
 8001cf0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d112      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a23      	ldr	r2, [pc, #140]	; (8001d90 <HAL_ADC_ConfigChannel+0x7c8>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d004      	beq.n	8001d10 <HAL_ADC_ConfigChannel+0x748>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a22      	ldr	r2, [pc, #136]	; (8001d94 <HAL_ADC_ConfigChannel+0x7cc>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d12d      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d18:	4619      	mov	r1, r3
 8001d1a:	481b      	ldr	r0, [pc, #108]	; (8001d88 <HAL_ADC_ConfigChannel+0x7c0>)
 8001d1c:	f7ff f985 	bl	800102a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d20:	e024      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a1f      	ldr	r2, [pc, #124]	; (8001da4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d120      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d11a      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a14      	ldr	r2, [pc, #80]	; (8001d90 <HAL_ADC_ConfigChannel+0x7c8>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d115      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	480e      	ldr	r0, [pc, #56]	; (8001d88 <HAL_ADC_ConfigChannel+0x7c0>)
 8001d4e:	f7ff f96c 	bl	800102a <LL_ADC_SetCommonPathInternalCh>
 8001d52:	e00c      	b.n	8001d6e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d58:	f043 0220 	orr.w	r2, r3, #32
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001d66:	e002      	b.n	8001d6e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d68:	bf00      	nop
 8001d6a:	e000      	b.n	8001d6e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d6c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d76:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	37d8      	adds	r7, #216	; 0xd8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	80080000 	.word	0x80080000
 8001d88:	50040300 	.word	0x50040300
 8001d8c:	c7520000 	.word	0xc7520000
 8001d90:	50040000 	.word	0x50040000
 8001d94:	50040200 	.word	0x50040200
 8001d98:	20000000 	.word	0x20000000
 8001d9c:	053e2d63 	.word	0x053e2d63
 8001da0:	cb840000 	.word	0xcb840000
 8001da4:	80000001 	.word	0x80000001

08001da8 <LL_ADC_IsEnabled>:
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <LL_ADC_IsEnabled+0x18>
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e000      	b.n	8001dc2 <LL_ADC_IsEnabled+0x1a>
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <LL_ADC_REG_IsConversionOngoing>:
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 0304 	and.w	r3, r3, #4
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d101      	bne.n	8001de6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001df4:	b590      	push	{r4, r7, lr}
 8001df6:	b09f      	sub	sp, #124	; 0x7c
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d101      	bne.n	8001e12 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e093      	b.n	8001f3a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001e1e:	2300      	movs	r3, #0
 8001e20:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a47      	ldr	r2, [pc, #284]	; (8001f44 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d102      	bne.n	8001e32 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001e2c:	4b46      	ldr	r3, [pc, #280]	; (8001f48 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	e001      	b.n	8001e36 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001e32:	2300      	movs	r3, #0
 8001e34:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10b      	bne.n	8001e54 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e40:	f043 0220 	orr.w	r2, r3, #32
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e072      	b.n	8001f3a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ffb9 	bl	8001dce <LL_ADC_REG_IsConversionOngoing>
 8001e5c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff ffb3 	bl	8001dce <LL_ADC_REG_IsConversionOngoing>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d154      	bne.n	8001f18 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001e6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d151      	bne.n	8001f18 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001e74:	4b35      	ldr	r3, [pc, #212]	; (8001f4c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001e76:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d02c      	beq.n	8001eda <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	6859      	ldr	r1, [r3, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e92:	035b      	lsls	r3, r3, #13
 8001e94:	430b      	orrs	r3, r1
 8001e96:	431a      	orrs	r2, r3
 8001e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e9a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e9c:	4829      	ldr	r0, [pc, #164]	; (8001f44 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001e9e:	f7ff ff83 	bl	8001da8 <LL_ADC_IsEnabled>
 8001ea2:	4604      	mov	r4, r0
 8001ea4:	4828      	ldr	r0, [pc, #160]	; (8001f48 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001ea6:	f7ff ff7f 	bl	8001da8 <LL_ADC_IsEnabled>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	431c      	orrs	r4, r3
 8001eae:	4828      	ldr	r0, [pc, #160]	; (8001f50 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001eb0:	f7ff ff7a 	bl	8001da8 <LL_ADC_IsEnabled>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	4323      	orrs	r3, r4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d137      	bne.n	8001f2c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001ec4:	f023 030f 	bic.w	r3, r3, #15
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	6811      	ldr	r1, [r2, #0]
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	6892      	ldr	r2, [r2, #8]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ed6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ed8:	e028      	b.n	8001f2c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ee4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ee6:	4817      	ldr	r0, [pc, #92]	; (8001f44 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001ee8:	f7ff ff5e 	bl	8001da8 <LL_ADC_IsEnabled>
 8001eec:	4604      	mov	r4, r0
 8001eee:	4816      	ldr	r0, [pc, #88]	; (8001f48 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001ef0:	f7ff ff5a 	bl	8001da8 <LL_ADC_IsEnabled>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	431c      	orrs	r4, r3
 8001ef8:	4815      	ldr	r0, [pc, #84]	; (8001f50 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001efa:	f7ff ff55 	bl	8001da8 <LL_ADC_IsEnabled>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4323      	orrs	r3, r4
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d112      	bne.n	8001f2c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f0e:	f023 030f 	bic.w	r3, r3, #15
 8001f12:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001f14:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f16:	e009      	b.n	8001f2c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1c:	f043 0220 	orr.w	r2, r3, #32
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001f2a:	e000      	b.n	8001f2e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f2c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f36:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	377c      	adds	r7, #124	; 0x7c
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd90      	pop	{r4, r7, pc}
 8001f42:	bf00      	nop
 8001f44:	50040000 	.word	0x50040000
 8001f48:	50040100 	.word	0x50040100
 8001f4c:	50040300 	.word	0x50040300
 8001f50:	50040200 	.word	0x50040200

08001f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f64:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <__NVIC_SetPriorityGrouping+0x44>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f70:	4013      	ands	r3, r2
 8001f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f86:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <__NVIC_SetPriorityGrouping+0x44>)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	60d3      	str	r3, [r2, #12]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa0:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	0a1b      	lsrs	r3, r3, #8
 8001fa6:	f003 0307 	and.w	r3, r3, #7
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	db0b      	blt.n	8001fe2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	f003 021f 	and.w	r2, r3, #31
 8001fd0:	4907      	ldr	r1, [pc, #28]	; (8001ff0 <__NVIC_EnableIRQ+0x38>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	2001      	movs	r0, #1
 8001fda:	fa00 f202 	lsl.w	r2, r0, r2
 8001fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	e000e100 	.word	0xe000e100

08001ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	6039      	str	r1, [r7, #0]
 8001ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002004:	2b00      	cmp	r3, #0
 8002006:	db0a      	blt.n	800201e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	b2da      	uxtb	r2, r3
 800200c:	490c      	ldr	r1, [pc, #48]	; (8002040 <__NVIC_SetPriority+0x4c>)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	0112      	lsls	r2, r2, #4
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	440b      	add	r3, r1
 8002018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800201c:	e00a      	b.n	8002034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	b2da      	uxtb	r2, r3
 8002022:	4908      	ldr	r1, [pc, #32]	; (8002044 <__NVIC_SetPriority+0x50>)
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	3b04      	subs	r3, #4
 800202c:	0112      	lsls	r2, r2, #4
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	440b      	add	r3, r1
 8002032:	761a      	strb	r2, [r3, #24]
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	e000e100 	.word	0xe000e100
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002048:	b480      	push	{r7}
 800204a:	b089      	sub	sp, #36	; 0x24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f1c3 0307 	rsb	r3, r3, #7
 8002062:	2b04      	cmp	r3, #4
 8002064:	bf28      	it	cs
 8002066:	2304      	movcs	r3, #4
 8002068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3304      	adds	r3, #4
 800206e:	2b06      	cmp	r3, #6
 8002070:	d902      	bls.n	8002078 <NVIC_EncodePriority+0x30>
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3b03      	subs	r3, #3
 8002076:	e000      	b.n	800207a <NVIC_EncodePriority+0x32>
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43da      	mvns	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	401a      	ands	r2, r3
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002090:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	fa01 f303 	lsl.w	r3, r1, r3
 800209a:	43d9      	mvns	r1, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a0:	4313      	orrs	r3, r2
         );
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3724      	adds	r7, #36	; 0x24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
	...

080020b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020c0:	d301      	bcc.n	80020c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020c2:	2301      	movs	r3, #1
 80020c4:	e00f      	b.n	80020e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020c6:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <SysTick_Config+0x40>)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ce:	210f      	movs	r1, #15
 80020d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020d4:	f7ff ff8e 	bl	8001ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <SysTick_Config+0x40>)
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020de:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <SysTick_Config+0x40>)
 80020e0:	2207      	movs	r2, #7
 80020e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	e000e010 	.word	0xe000e010

080020f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ff29 	bl	8001f54 <__NVIC_SetPriorityGrouping>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b086      	sub	sp, #24
 800210e:	af00      	add	r7, sp, #0
 8002110:	4603      	mov	r3, r0
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
 8002116:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800211c:	f7ff ff3e 	bl	8001f9c <__NVIC_GetPriorityGrouping>
 8002120:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	68b9      	ldr	r1, [r7, #8]
 8002126:	6978      	ldr	r0, [r7, #20]
 8002128:	f7ff ff8e 	bl	8002048 <NVIC_EncodePriority>
 800212c:	4602      	mov	r2, r0
 800212e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002132:	4611      	mov	r1, r2
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff5d 	bl	8001ff4 <__NVIC_SetPriority>
}
 800213a:	bf00      	nop
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
 8002148:	4603      	mov	r3, r0
 800214a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800214c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ff31 	bl	8001fb8 <__NVIC_EnableIRQ>
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff ffa2 	bl	80020b0 <SysTick_Config>
 800216c:	4603      	mov	r3, r0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e098      	b.n	80022bc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	4b4d      	ldr	r3, [pc, #308]	; (80022c8 <HAL_DMA_Init+0x150>)
 8002192:	429a      	cmp	r2, r3
 8002194:	d80f      	bhi.n	80021b6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	461a      	mov	r2, r3
 800219c:	4b4b      	ldr	r3, [pc, #300]	; (80022cc <HAL_DMA_Init+0x154>)
 800219e:	4413      	add	r3, r2
 80021a0:	4a4b      	ldr	r2, [pc, #300]	; (80022d0 <HAL_DMA_Init+0x158>)
 80021a2:	fba2 2303 	umull	r2, r3, r2, r3
 80021a6:	091b      	lsrs	r3, r3, #4
 80021a8:	009a      	lsls	r2, r3, #2
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a48      	ldr	r2, [pc, #288]	; (80022d4 <HAL_DMA_Init+0x15c>)
 80021b2:	641a      	str	r2, [r3, #64]	; 0x40
 80021b4:	e00e      	b.n	80021d4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	461a      	mov	r2, r3
 80021bc:	4b46      	ldr	r3, [pc, #280]	; (80022d8 <HAL_DMA_Init+0x160>)
 80021be:	4413      	add	r3, r2
 80021c0:	4a43      	ldr	r2, [pc, #268]	; (80022d0 <HAL_DMA_Init+0x158>)
 80021c2:	fba2 2303 	umull	r2, r3, r2, r3
 80021c6:	091b      	lsrs	r3, r3, #4
 80021c8:	009a      	lsls	r2, r3, #2
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a42      	ldr	r2, [pc, #264]	; (80022dc <HAL_DMA_Init+0x164>)
 80021d2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2202      	movs	r2, #2
 80021d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80021ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80021f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002204:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002210:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	4313      	orrs	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800222e:	d039      	beq.n	80022a4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	4a27      	ldr	r2, [pc, #156]	; (80022d4 <HAL_DMA_Init+0x15c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d11a      	bne.n	8002270 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800223a:	4b29      	ldr	r3, [pc, #164]	; (80022e0 <HAL_DMA_Init+0x168>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	f003 031c 	and.w	r3, r3, #28
 8002246:	210f      	movs	r1, #15
 8002248:	fa01 f303 	lsl.w	r3, r1, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	4924      	ldr	r1, [pc, #144]	; (80022e0 <HAL_DMA_Init+0x168>)
 8002250:	4013      	ands	r3, r2
 8002252:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002254:	4b22      	ldr	r3, [pc, #136]	; (80022e0 <HAL_DMA_Init+0x168>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6859      	ldr	r1, [r3, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002260:	f003 031c 	and.w	r3, r3, #28
 8002264:	fa01 f303 	lsl.w	r3, r1, r3
 8002268:	491d      	ldr	r1, [pc, #116]	; (80022e0 <HAL_DMA_Init+0x168>)
 800226a:	4313      	orrs	r3, r2
 800226c:	600b      	str	r3, [r1, #0]
 800226e:	e019      	b.n	80022a4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002270:	4b1c      	ldr	r3, [pc, #112]	; (80022e4 <HAL_DMA_Init+0x16c>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002278:	f003 031c 	and.w	r3, r3, #28
 800227c:	210f      	movs	r1, #15
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	4917      	ldr	r1, [pc, #92]	; (80022e4 <HAL_DMA_Init+0x16c>)
 8002286:	4013      	ands	r3, r2
 8002288:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800228a:	4b16      	ldr	r3, [pc, #88]	; (80022e4 <HAL_DMA_Init+0x16c>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6859      	ldr	r1, [r3, #4]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	f003 031c 	and.w	r3, r3, #28
 800229a:	fa01 f303 	lsl.w	r3, r1, r3
 800229e:	4911      	ldr	r1, [pc, #68]	; (80022e4 <HAL_DMA_Init+0x16c>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	40020407 	.word	0x40020407
 80022cc:	bffdfff8 	.word	0xbffdfff8
 80022d0:	cccccccd 	.word	0xcccccccd
 80022d4:	40020000 	.word	0x40020000
 80022d8:	bffdfbf8 	.word	0xbffdfbf8
 80022dc:	40020400 	.word	0x40020400
 80022e0:	400200a8 	.word	0x400200a8
 80022e4:	400204a8 	.word	0x400204a8

080022e8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d008      	beq.n	8002312 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2204      	movs	r2, #4
 8002304:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e022      	b.n	8002358 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 020e 	bic.w	r2, r2, #14
 8002320:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0201 	bic.w	r2, r2, #1
 8002330:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f003 021c 	and.w	r2, r3, #28
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	2101      	movs	r1, #1
 8002340:	fa01 f202 	lsl.w	r2, r1, r2
 8002344:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002356:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002358:	4618      	mov	r0, r3
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d005      	beq.n	8002388 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2204      	movs	r2, #4
 8002380:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	73fb      	strb	r3, [r7, #15]
 8002386:	e029      	b.n	80023dc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 020e 	bic.w	r2, r2, #14
 8002396:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0201 	bic.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ac:	f003 021c 	and.w	r2, r3, #28
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	2101      	movs	r1, #1
 80023b6:	fa01 f202 	lsl.w	r2, r1, r2
 80023ba:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	4798      	blx	r3
    }
  }
  return status;
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b084      	sub	sp, #16
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	f003 031c 	and.w	r3, r3, #28
 8002406:	2204      	movs	r2, #4
 8002408:	409a      	lsls	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4013      	ands	r3, r2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d026      	beq.n	8002460 <HAL_DMA_IRQHandler+0x7a>
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	d021      	beq.n	8002460 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0320 	and.w	r3, r3, #32
 8002426:	2b00      	cmp	r3, #0
 8002428:	d107      	bne.n	800243a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0204 	bic.w	r2, r2, #4
 8002438:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243e:	f003 021c 	and.w	r2, r3, #28
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	2104      	movs	r1, #4
 8002448:	fa01 f202 	lsl.w	r2, r1, r2
 800244c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	2b00      	cmp	r3, #0
 8002454:	d071      	beq.n	800253a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800245e:	e06c      	b.n	800253a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002464:	f003 031c 	and.w	r3, r3, #28
 8002468:	2202      	movs	r2, #2
 800246a:	409a      	lsls	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d02e      	beq.n	80024d2 <HAL_DMA_IRQHandler+0xec>
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d029      	beq.n	80024d2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0320 	and.w	r3, r3, #32
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10b      	bne.n	80024a4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 020a 	bic.w	r2, r2, #10
 800249a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a8:	f003 021c 	and.w	r2, r3, #28
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	2102      	movs	r1, #2
 80024b2:	fa01 f202 	lsl.w	r2, r1, r2
 80024b6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d038      	beq.n	800253a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80024d0:	e033      	b.n	800253a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	f003 031c 	and.w	r3, r3, #28
 80024da:	2208      	movs	r2, #8
 80024dc:	409a      	lsls	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d02a      	beq.n	800253c <HAL_DMA_IRQHandler+0x156>
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	f003 0308 	and.w	r3, r3, #8
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d025      	beq.n	800253c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 020e 	bic.w	r2, r2, #14
 80024fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002504:	f003 021c 	and.w	r2, r3, #28
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	2101      	movs	r1, #1
 800250e:	fa01 f202 	lsl.w	r2, r1, r2
 8002512:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800252e:	2b00      	cmp	r3, #0
 8002530:	d004      	beq.n	800253c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800253a:	bf00      	nop
 800253c:	bf00      	nop
}
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002544:	b480      	push	{r7}
 8002546:	b087      	sub	sp, #28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002552:	e17f      	b.n	8002854 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	2101      	movs	r1, #1
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	fa01 f303 	lsl.w	r3, r1, r3
 8002560:	4013      	ands	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 8171 	beq.w	800284e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	2b01      	cmp	r3, #1
 8002576:	d005      	beq.n	8002584 <HAL_GPIO_Init+0x40>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d130      	bne.n	80025e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	2203      	movs	r2, #3
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	68da      	ldr	r2, [r3, #12]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025ba:	2201      	movs	r2, #1
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4013      	ands	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	091b      	lsrs	r3, r3, #4
 80025d0:	f003 0201 	and.w	r2, r3, #1
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	2b03      	cmp	r3, #3
 80025f0:	d118      	bne.n	8002624 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80025f8:	2201      	movs	r2, #1
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	4013      	ands	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	08db      	lsrs	r3, r3, #3
 800260e:	f003 0201 	and.w	r2, r3, #1
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	4313      	orrs	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0303 	and.w	r3, r3, #3
 800262c:	2b03      	cmp	r3, #3
 800262e:	d017      	beq.n	8002660 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	2203      	movs	r2, #3
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 0303 	and.w	r3, r3, #3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d123      	bne.n	80026b4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	08da      	lsrs	r2, r3, #3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3208      	adds	r2, #8
 8002674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002678:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	220f      	movs	r2, #15
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4013      	ands	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	08da      	lsrs	r2, r3, #3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3208      	adds	r2, #8
 80026ae:	6939      	ldr	r1, [r7, #16]
 80026b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	2203      	movs	r2, #3
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 0203 	and.w	r2, r3, #3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	4313      	orrs	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 80ac 	beq.w	800284e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f6:	4b5f      	ldr	r3, [pc, #380]	; (8002874 <HAL_GPIO_Init+0x330>)
 80026f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026fa:	4a5e      	ldr	r2, [pc, #376]	; (8002874 <HAL_GPIO_Init+0x330>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6613      	str	r3, [r2, #96]	; 0x60
 8002702:	4b5c      	ldr	r3, [pc, #368]	; (8002874 <HAL_GPIO_Init+0x330>)
 8002704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800270e:	4a5a      	ldr	r2, [pc, #360]	; (8002878 <HAL_GPIO_Init+0x334>)
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	089b      	lsrs	r3, r3, #2
 8002714:	3302      	adds	r3, #2
 8002716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800271a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	220f      	movs	r2, #15
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4013      	ands	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002738:	d025      	beq.n	8002786 <HAL_GPIO_Init+0x242>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a4f      	ldr	r2, [pc, #316]	; (800287c <HAL_GPIO_Init+0x338>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d01f      	beq.n	8002782 <HAL_GPIO_Init+0x23e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a4e      	ldr	r2, [pc, #312]	; (8002880 <HAL_GPIO_Init+0x33c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d019      	beq.n	800277e <HAL_GPIO_Init+0x23a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a4d      	ldr	r2, [pc, #308]	; (8002884 <HAL_GPIO_Init+0x340>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d013      	beq.n	800277a <HAL_GPIO_Init+0x236>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a4c      	ldr	r2, [pc, #304]	; (8002888 <HAL_GPIO_Init+0x344>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d00d      	beq.n	8002776 <HAL_GPIO_Init+0x232>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a4b      	ldr	r2, [pc, #300]	; (800288c <HAL_GPIO_Init+0x348>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d007      	beq.n	8002772 <HAL_GPIO_Init+0x22e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a4a      	ldr	r2, [pc, #296]	; (8002890 <HAL_GPIO_Init+0x34c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d101      	bne.n	800276e <HAL_GPIO_Init+0x22a>
 800276a:	2306      	movs	r3, #6
 800276c:	e00c      	b.n	8002788 <HAL_GPIO_Init+0x244>
 800276e:	2307      	movs	r3, #7
 8002770:	e00a      	b.n	8002788 <HAL_GPIO_Init+0x244>
 8002772:	2305      	movs	r3, #5
 8002774:	e008      	b.n	8002788 <HAL_GPIO_Init+0x244>
 8002776:	2304      	movs	r3, #4
 8002778:	e006      	b.n	8002788 <HAL_GPIO_Init+0x244>
 800277a:	2303      	movs	r3, #3
 800277c:	e004      	b.n	8002788 <HAL_GPIO_Init+0x244>
 800277e:	2302      	movs	r3, #2
 8002780:	e002      	b.n	8002788 <HAL_GPIO_Init+0x244>
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <HAL_GPIO_Init+0x244>
 8002786:	2300      	movs	r3, #0
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	f002 0203 	and.w	r2, r2, #3
 800278e:	0092      	lsls	r2, r2, #2
 8002790:	4093      	lsls	r3, r2
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002798:	4937      	ldr	r1, [pc, #220]	; (8002878 <HAL_GPIO_Init+0x334>)
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	089b      	lsrs	r3, r3, #2
 800279e:	3302      	adds	r3, #2
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027a6:	4b3b      	ldr	r3, [pc, #236]	; (8002894 <HAL_GPIO_Init+0x350>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4013      	ands	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027ca:	4a32      	ldr	r2, [pc, #200]	; (8002894 <HAL_GPIO_Init+0x350>)
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027d0:	4b30      	ldr	r3, [pc, #192]	; (8002894 <HAL_GPIO_Init+0x350>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	43db      	mvns	r3, r3
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4013      	ands	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027f4:	4a27      	ldr	r2, [pc, #156]	; (8002894 <HAL_GPIO_Init+0x350>)
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80027fa:	4b26      	ldr	r3, [pc, #152]	; (8002894 <HAL_GPIO_Init+0x350>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	43db      	mvns	r3, r3
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	4013      	ands	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4313      	orrs	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800281e:	4a1d      	ldr	r2, [pc, #116]	; (8002894 <HAL_GPIO_Init+0x350>)
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002824:	4b1b      	ldr	r3, [pc, #108]	; (8002894 <HAL_GPIO_Init+0x350>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	43db      	mvns	r3, r3
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	4013      	ands	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4313      	orrs	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002848:	4a12      	ldr	r2, [pc, #72]	; (8002894 <HAL_GPIO_Init+0x350>)
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	3301      	adds	r3, #1
 8002852:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	fa22 f303 	lsr.w	r3, r2, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	f47f ae78 	bne.w	8002554 <HAL_GPIO_Init+0x10>
  }
}
 8002864:	bf00      	nop
 8002866:	bf00      	nop
 8002868:	371c      	adds	r7, #28
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40021000 	.word	0x40021000
 8002878:	40010000 	.word	0x40010000
 800287c:	48000400 	.word	0x48000400
 8002880:	48000800 	.word	0x48000800
 8002884:	48000c00 	.word	0x48000c00
 8002888:	48001000 	.word	0x48001000
 800288c:	48001400 	.word	0x48001400
 8002890:	48001800 	.word	0x48001800
 8002894:	40010400 	.word	0x40010400

08002898 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	887b      	ldrh	r3, [r7, #2]
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d002      	beq.n	80028b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028b0:	2301      	movs	r3, #1
 80028b2:	73fb      	strb	r3, [r7, #15]
 80028b4:	e001      	b.n	80028ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028b6:	2300      	movs	r3, #0
 80028b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	807b      	strh	r3, [r7, #2]
 80028d4:	4613      	mov	r3, r2
 80028d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028d8:	787b      	ldrb	r3, [r7, #1]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028de:	887a      	ldrh	r2, [r7, #2]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028e4:	e002      	b.n	80028ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028e6:	887a      	ldrh	r2, [r7, #2]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028fc:	4b04      	ldr	r3, [pc, #16]	; (8002910 <HAL_PWREx_GetVoltageRange+0x18>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002904:	4618      	mov	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40007000 	.word	0x40007000

08002914 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002922:	d130      	bne.n	8002986 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002924:	4b23      	ldr	r3, [pc, #140]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800292c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002930:	d038      	beq.n	80029a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002932:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800293a:	4a1e      	ldr	r2, [pc, #120]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800293c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002940:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002942:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2232      	movs	r2, #50	; 0x32
 8002948:	fb02 f303 	mul.w	r3, r2, r3
 800294c:	4a1b      	ldr	r2, [pc, #108]	; (80029bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	0c9b      	lsrs	r3, r3, #18
 8002954:	3301      	adds	r3, #1
 8002956:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002958:	e002      	b.n	8002960 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	3b01      	subs	r3, #1
 800295e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002960:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800296c:	d102      	bne.n	8002974 <HAL_PWREx_ControlVoltageScaling+0x60>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1f2      	bne.n	800295a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002974:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002980:	d110      	bne.n	80029a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e00f      	b.n	80029a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002986:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800298e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002992:	d007      	beq.n	80029a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002994:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800299c:	4a05      	ldr	r2, [pc, #20]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800299e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40007000 	.word	0x40007000
 80029b8:	20000000 	.word	0x20000000
 80029bc:	431bde83 	.word	0x431bde83

080029c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e3ca      	b.n	8003168 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029d2:	4b97      	ldr	r3, [pc, #604]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 030c 	and.w	r3, r3, #12
 80029da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029dc:	4b94      	ldr	r3, [pc, #592]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0310 	and.w	r3, r3, #16
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 80e4 	beq.w	8002bbc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d007      	beq.n	8002a0a <HAL_RCC_OscConfig+0x4a>
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	2b0c      	cmp	r3, #12
 80029fe:	f040 808b 	bne.w	8002b18 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	f040 8087 	bne.w	8002b18 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a0a:	4b89      	ldr	r3, [pc, #548]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d005      	beq.n	8002a22 <HAL_RCC_OscConfig+0x62>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e3a2      	b.n	8003168 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a1a      	ldr	r2, [r3, #32]
 8002a26:	4b82      	ldr	r3, [pc, #520]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d004      	beq.n	8002a3c <HAL_RCC_OscConfig+0x7c>
 8002a32:	4b7f      	ldr	r3, [pc, #508]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a3a:	e005      	b.n	8002a48 <HAL_RCC_OscConfig+0x88>
 8002a3c:	4b7c      	ldr	r3, [pc, #496]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a42:	091b      	lsrs	r3, r3, #4
 8002a44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d223      	bcs.n	8002a94 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 fd55 	bl	8003500 <RCC_SetFlashLatencyFromMSIRange>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e383      	b.n	8003168 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a60:	4b73      	ldr	r3, [pc, #460]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a72      	ldr	r2, [pc, #456]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002a66:	f043 0308 	orr.w	r3, r3, #8
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	4b70      	ldr	r3, [pc, #448]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	496d      	ldr	r1, [pc, #436]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a7e:	4b6c      	ldr	r3, [pc, #432]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	021b      	lsls	r3, r3, #8
 8002a8c:	4968      	ldr	r1, [pc, #416]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	604b      	str	r3, [r1, #4]
 8002a92:	e025      	b.n	8002ae0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a94:	4b66      	ldr	r3, [pc, #408]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a65      	ldr	r2, [pc, #404]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002a9a:	f043 0308 	orr.w	r3, r3, #8
 8002a9e:	6013      	str	r3, [r2, #0]
 8002aa0:	4b63      	ldr	r3, [pc, #396]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	4960      	ldr	r1, [pc, #384]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ab2:	4b5f      	ldr	r3, [pc, #380]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	021b      	lsls	r3, r3, #8
 8002ac0:	495b      	ldr	r1, [pc, #364]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d109      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 fd15 	bl	8003500 <RCC_SetFlashLatencyFromMSIRange>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e343      	b.n	8003168 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ae0:	f000 fc4a 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	4b52      	ldr	r3, [pc, #328]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	091b      	lsrs	r3, r3, #4
 8002aec:	f003 030f 	and.w	r3, r3, #15
 8002af0:	4950      	ldr	r1, [pc, #320]	; (8002c34 <HAL_RCC_OscConfig+0x274>)
 8002af2:	5ccb      	ldrb	r3, [r1, r3]
 8002af4:	f003 031f 	and.w	r3, r3, #31
 8002af8:	fa22 f303 	lsr.w	r3, r2, r3
 8002afc:	4a4e      	ldr	r2, [pc, #312]	; (8002c38 <HAL_RCC_OscConfig+0x278>)
 8002afe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b00:	4b4e      	ldr	r3, [pc, #312]	; (8002c3c <HAL_RCC_OscConfig+0x27c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fe f9fd 	bl	8000f04 <HAL_InitTick>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d052      	beq.n	8002bba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
 8002b16:	e327      	b.n	8003168 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d032      	beq.n	8002b86 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b20:	4b43      	ldr	r3, [pc, #268]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a42      	ldr	r2, [pc, #264]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b2c:	f7fe fa3a 	bl	8000fa4 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b34:	f7fe fa36 	bl	8000fa4 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e310      	b.n	8003168 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b46:	4b3a      	ldr	r3, [pc, #232]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b52:	4b37      	ldr	r3, [pc, #220]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a36      	ldr	r2, [pc, #216]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002b58:	f043 0308 	orr.w	r3, r3, #8
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	4b34      	ldr	r3, [pc, #208]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	4931      	ldr	r1, [pc, #196]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b70:	4b2f      	ldr	r3, [pc, #188]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	021b      	lsls	r3, r3, #8
 8002b7e:	492c      	ldr	r1, [pc, #176]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	604b      	str	r3, [r1, #4]
 8002b84:	e01a      	b.n	8002bbc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b86:	4b2a      	ldr	r3, [pc, #168]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a29      	ldr	r2, [pc, #164]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002b8c:	f023 0301 	bic.w	r3, r3, #1
 8002b90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b92:	f7fe fa07 	bl	8000fa4 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b9a:	f7fe fa03 	bl	8000fa4 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e2dd      	b.n	8003168 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bac:	4b20      	ldr	r3, [pc, #128]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1f0      	bne.n	8002b9a <HAL_RCC_OscConfig+0x1da>
 8002bb8:	e000      	b.n	8002bbc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d074      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d005      	beq.n	8002bda <HAL_RCC_OscConfig+0x21a>
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	2b0c      	cmp	r3, #12
 8002bd2:	d10e      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d10b      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bda:	4b15      	ldr	r3, [pc, #84]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d064      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x2f0>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d160      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e2ba      	b.n	8003168 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bfa:	d106      	bne.n	8002c0a <HAL_RCC_OscConfig+0x24a>
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a0b      	ldr	r2, [pc, #44]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	e026      	b.n	8002c58 <HAL_RCC_OscConfig+0x298>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c12:	d115      	bne.n	8002c40 <HAL_RCC_OscConfig+0x280>
 8002c14:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a05      	ldr	r2, [pc, #20]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002c1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	4b03      	ldr	r3, [pc, #12]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a02      	ldr	r2, [pc, #8]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	e014      	b.n	8002c58 <HAL_RCC_OscConfig+0x298>
 8002c2e:	bf00      	nop
 8002c30:	40021000 	.word	0x40021000
 8002c34:	08006278 	.word	0x08006278
 8002c38:	20000000 	.word	0x20000000
 8002c3c:	20000004 	.word	0x20000004
 8002c40:	4ba0      	ldr	r3, [pc, #640]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a9f      	ldr	r2, [pc, #636]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c4a:	6013      	str	r3, [r2, #0]
 8002c4c:	4b9d      	ldr	r3, [pc, #628]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a9c      	ldr	r2, [pc, #624]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d013      	beq.n	8002c88 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c60:	f7fe f9a0 	bl	8000fa4 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c68:	f7fe f99c 	bl	8000fa4 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b64      	cmp	r3, #100	; 0x64
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e276      	b.n	8003168 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c7a:	4b92      	ldr	r3, [pc, #584]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0x2a8>
 8002c86:	e014      	b.n	8002cb2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7fe f98c 	bl	8000fa4 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c90:	f7fe f988 	bl	8000fa4 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	; 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e262      	b.n	8003168 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ca2:	4b88      	ldr	r3, [pc, #544]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x2d0>
 8002cae:	e000      	b.n	8002cb2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d060      	beq.n	8002d80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d005      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x310>
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	2b0c      	cmp	r3, #12
 8002cc8:	d119      	bne.n	8002cfe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d116      	bne.n	8002cfe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cd0:	4b7c      	ldr	r3, [pc, #496]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x328>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e23f      	b.n	8003168 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce8:	4b76      	ldr	r3, [pc, #472]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	061b      	lsls	r3, r3, #24
 8002cf6:	4973      	ldr	r1, [pc, #460]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cfc:	e040      	b.n	8002d80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d023      	beq.n	8002d4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d06:	4b6f      	ldr	r3, [pc, #444]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a6e      	ldr	r2, [pc, #440]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d12:	f7fe f947 	bl	8000fa4 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d1a:	f7fe f943 	bl	8000fa4 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e21d      	b.n	8003168 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d2c:	4b65      	ldr	r3, [pc, #404]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0f0      	beq.n	8002d1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d38:	4b62      	ldr	r3, [pc, #392]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	061b      	lsls	r3, r3, #24
 8002d46:	495f      	ldr	r1, [pc, #380]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]
 8002d4c:	e018      	b.n	8002d80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d4e:	4b5d      	ldr	r3, [pc, #372]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a5c      	ldr	r2, [pc, #368]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002d54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5a:	f7fe f923 	bl	8000fa4 <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d62:	f7fe f91f 	bl	8000fa4 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e1f9      	b.n	8003168 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d74:	4b53      	ldr	r3, [pc, #332]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1f0      	bne.n	8002d62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0308 	and.w	r3, r3, #8
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d03c      	beq.n	8002e06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d01c      	beq.n	8002dce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d94:	4b4b      	ldr	r3, [pc, #300]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d9a:	4a4a      	ldr	r2, [pc, #296]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da4:	f7fe f8fe 	bl	8000fa4 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dac:	f7fe f8fa 	bl	8000fa4 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e1d4      	b.n	8003168 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dbe:	4b41      	ldr	r3, [pc, #260]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0ef      	beq.n	8002dac <HAL_RCC_OscConfig+0x3ec>
 8002dcc:	e01b      	b.n	8002e06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dce:	4b3d      	ldr	r3, [pc, #244]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dd4:	4a3b      	ldr	r2, [pc, #236]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002dd6:	f023 0301 	bic.w	r3, r3, #1
 8002dda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dde:	f7fe f8e1 	bl	8000fa4 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de6:	f7fe f8dd 	bl	8000fa4 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e1b7      	b.n	8003168 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002df8:	4b32      	ldr	r3, [pc, #200]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1ef      	bne.n	8002de6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 80a6 	beq.w	8002f60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e14:	2300      	movs	r3, #0
 8002e16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e18:	4b2a      	ldr	r3, [pc, #168]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10d      	bne.n	8002e40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e24:	4b27      	ldr	r3, [pc, #156]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e28:	4a26      	ldr	r2, [pc, #152]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e30:	4b24      	ldr	r3, [pc, #144]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e40:	4b21      	ldr	r3, [pc, #132]	; (8002ec8 <HAL_RCC_OscConfig+0x508>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d118      	bne.n	8002e7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e4c:	4b1e      	ldr	r3, [pc, #120]	; (8002ec8 <HAL_RCC_OscConfig+0x508>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a1d      	ldr	r2, [pc, #116]	; (8002ec8 <HAL_RCC_OscConfig+0x508>)
 8002e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e58:	f7fe f8a4 	bl	8000fa4 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e60:	f7fe f8a0 	bl	8000fa4 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e17a      	b.n	8003168 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e72:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <HAL_RCC_OscConfig+0x508>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0f0      	beq.n	8002e60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d108      	bne.n	8002e98 <HAL_RCC_OscConfig+0x4d8>
 8002e86:	4b0f      	ldr	r3, [pc, #60]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8c:	4a0d      	ldr	r2, [pc, #52]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e96:	e029      	b.n	8002eec <HAL_RCC_OscConfig+0x52c>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	2b05      	cmp	r3, #5
 8002e9e:	d115      	bne.n	8002ecc <HAL_RCC_OscConfig+0x50c>
 8002ea0:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea6:	4a07      	ldr	r2, [pc, #28]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002ea8:	f043 0304 	orr.w	r3, r3, #4
 8002eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eb0:	4b04      	ldr	r3, [pc, #16]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb6:	4a03      	ldr	r2, [pc, #12]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ec0:	e014      	b.n	8002eec <HAL_RCC_OscConfig+0x52c>
 8002ec2:	bf00      	nop
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40007000 	.word	0x40007000
 8002ecc:	4b9c      	ldr	r3, [pc, #624]	; (8003140 <HAL_RCC_OscConfig+0x780>)
 8002ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed2:	4a9b      	ldr	r2, [pc, #620]	; (8003140 <HAL_RCC_OscConfig+0x780>)
 8002ed4:	f023 0301 	bic.w	r3, r3, #1
 8002ed8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002edc:	4b98      	ldr	r3, [pc, #608]	; (8003140 <HAL_RCC_OscConfig+0x780>)
 8002ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee2:	4a97      	ldr	r2, [pc, #604]	; (8003140 <HAL_RCC_OscConfig+0x780>)
 8002ee4:	f023 0304 	bic.w	r3, r3, #4
 8002ee8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d016      	beq.n	8002f22 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef4:	f7fe f856 	bl	8000fa4 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002efa:	e00a      	b.n	8002f12 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efc:	f7fe f852 	bl	8000fa4 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e12a      	b.n	8003168 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f12:	4b8b      	ldr	r3, [pc, #556]	; (8003140 <HAL_RCC_OscConfig+0x780>)
 8002f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0ed      	beq.n	8002efc <HAL_RCC_OscConfig+0x53c>
 8002f20:	e015      	b.n	8002f4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f22:	f7fe f83f 	bl	8000fa4 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f28:	e00a      	b.n	8002f40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2a:	f7fe f83b 	bl	8000fa4 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e113      	b.n	8003168 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f40:	4b7f      	ldr	r3, [pc, #508]	; (8003140 <HAL_RCC_OscConfig+0x780>)
 8002f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1ed      	bne.n	8002f2a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f4e:	7ffb      	ldrb	r3, [r7, #31]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d105      	bne.n	8002f60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f54:	4b7a      	ldr	r3, [pc, #488]	; (8003140 <HAL_RCC_OscConfig+0x780>)
 8002f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f58:	4a79      	ldr	r2, [pc, #484]	; (8003140 <HAL_RCC_OscConfig+0x780>)
 8002f5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f5e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 80fe 	beq.w	8003166 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	f040 80d0 	bne.w	8003114 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f74:	4b72      	ldr	r3, [pc, #456]	; (8003140 <HAL_RCC_OscConfig+0x780>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f003 0203 	and.w	r2, r3, #3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d130      	bne.n	8002fea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	3b01      	subs	r3, #1
 8002f94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d127      	bne.n	8002fea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d11f      	bne.n	8002fea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fb4:	2a07      	cmp	r2, #7
 8002fb6:	bf14      	ite	ne
 8002fb8:	2201      	movne	r2, #1
 8002fba:	2200      	moveq	r2, #0
 8002fbc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d113      	bne.n	8002fea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fcc:	085b      	lsrs	r3, r3, #1
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d109      	bne.n	8002fea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	085b      	lsrs	r3, r3, #1
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d06e      	beq.n	80030c8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	2b0c      	cmp	r3, #12
 8002fee:	d069      	beq.n	80030c4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ff0:	4b53      	ldr	r3, [pc, #332]	; (8003140 <HAL_RCC_OscConfig+0x780>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d105      	bne.n	8003008 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ffc:	4b50      	ldr	r3, [pc, #320]	; (8003140 <HAL_RCC_OscConfig+0x780>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0ad      	b.n	8003168 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800300c:	4b4c      	ldr	r3, [pc, #304]	; (8003140 <HAL_RCC_OscConfig+0x780>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a4b      	ldr	r2, [pc, #300]	; (8003140 <HAL_RCC_OscConfig+0x780>)
 8003012:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003016:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003018:	f7fd ffc4 	bl	8000fa4 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003020:	f7fd ffc0 	bl	8000fa4 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e09a      	b.n	8003168 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003032:	4b43      	ldr	r3, [pc, #268]	; (8003140 <HAL_RCC_OscConfig+0x780>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f0      	bne.n	8003020 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800303e:	4b40      	ldr	r3, [pc, #256]	; (8003140 <HAL_RCC_OscConfig+0x780>)
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	4b40      	ldr	r3, [pc, #256]	; (8003144 <HAL_RCC_OscConfig+0x784>)
 8003044:	4013      	ands	r3, r2
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800304e:	3a01      	subs	r2, #1
 8003050:	0112      	lsls	r2, r2, #4
 8003052:	4311      	orrs	r1, r2
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003058:	0212      	lsls	r2, r2, #8
 800305a:	4311      	orrs	r1, r2
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003060:	0852      	lsrs	r2, r2, #1
 8003062:	3a01      	subs	r2, #1
 8003064:	0552      	lsls	r2, r2, #21
 8003066:	4311      	orrs	r1, r2
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800306c:	0852      	lsrs	r2, r2, #1
 800306e:	3a01      	subs	r2, #1
 8003070:	0652      	lsls	r2, r2, #25
 8003072:	4311      	orrs	r1, r2
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003078:	0912      	lsrs	r2, r2, #4
 800307a:	0452      	lsls	r2, r2, #17
 800307c:	430a      	orrs	r2, r1
 800307e:	4930      	ldr	r1, [pc, #192]	; (8003140 <HAL_RCC_OscConfig+0x780>)
 8003080:	4313      	orrs	r3, r2
 8003082:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003084:	4b2e      	ldr	r3, [pc, #184]	; (8003140 <HAL_RCC_OscConfig+0x780>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a2d      	ldr	r2, [pc, #180]	; (8003140 <HAL_RCC_OscConfig+0x780>)
 800308a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800308e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003090:	4b2b      	ldr	r3, [pc, #172]	; (8003140 <HAL_RCC_OscConfig+0x780>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	4a2a      	ldr	r2, [pc, #168]	; (8003140 <HAL_RCC_OscConfig+0x780>)
 8003096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800309a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800309c:	f7fd ff82 	bl	8000fa4 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a4:	f7fd ff7e 	bl	8000fa4 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e058      	b.n	8003168 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030b6:	4b22      	ldr	r3, [pc, #136]	; (8003140 <HAL_RCC_OscConfig+0x780>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030c2:	e050      	b.n	8003166 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e04f      	b.n	8003168 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030c8:	4b1d      	ldr	r3, [pc, #116]	; (8003140 <HAL_RCC_OscConfig+0x780>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d148      	bne.n	8003166 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80030d4:	4b1a      	ldr	r3, [pc, #104]	; (8003140 <HAL_RCC_OscConfig+0x780>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a19      	ldr	r2, [pc, #100]	; (8003140 <HAL_RCC_OscConfig+0x780>)
 80030da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030e0:	4b17      	ldr	r3, [pc, #92]	; (8003140 <HAL_RCC_OscConfig+0x780>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	4a16      	ldr	r2, [pc, #88]	; (8003140 <HAL_RCC_OscConfig+0x780>)
 80030e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030ec:	f7fd ff5a 	bl	8000fa4 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f4:	f7fd ff56 	bl	8000fa4 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e030      	b.n	8003168 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003106:	4b0e      	ldr	r3, [pc, #56]	; (8003140 <HAL_RCC_OscConfig+0x780>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0f0      	beq.n	80030f4 <HAL_RCC_OscConfig+0x734>
 8003112:	e028      	b.n	8003166 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	2b0c      	cmp	r3, #12
 8003118:	d023      	beq.n	8003162 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311a:	4b09      	ldr	r3, [pc, #36]	; (8003140 <HAL_RCC_OscConfig+0x780>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a08      	ldr	r2, [pc, #32]	; (8003140 <HAL_RCC_OscConfig+0x780>)
 8003120:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003126:	f7fd ff3d 	bl	8000fa4 <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800312c:	e00c      	b.n	8003148 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800312e:	f7fd ff39 	bl	8000fa4 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d905      	bls.n	8003148 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e013      	b.n	8003168 <HAL_RCC_OscConfig+0x7a8>
 8003140:	40021000 	.word	0x40021000
 8003144:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003148:	4b09      	ldr	r3, [pc, #36]	; (8003170 <HAL_RCC_OscConfig+0x7b0>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1ec      	bne.n	800312e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003154:	4b06      	ldr	r3, [pc, #24]	; (8003170 <HAL_RCC_OscConfig+0x7b0>)
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	4905      	ldr	r1, [pc, #20]	; (8003170 <HAL_RCC_OscConfig+0x7b0>)
 800315a:	4b06      	ldr	r3, [pc, #24]	; (8003174 <HAL_RCC_OscConfig+0x7b4>)
 800315c:	4013      	ands	r3, r2
 800315e:	60cb      	str	r3, [r1, #12]
 8003160:	e001      	b.n	8003166 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3720      	adds	r7, #32
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40021000 	.word	0x40021000
 8003174:	feeefffc 	.word	0xfeeefffc

08003178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e0e7      	b.n	800335c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800318c:	4b75      	ldr	r3, [pc, #468]	; (8003364 <HAL_RCC_ClockConfig+0x1ec>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d910      	bls.n	80031bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319a:	4b72      	ldr	r3, [pc, #456]	; (8003364 <HAL_RCC_ClockConfig+0x1ec>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 0207 	bic.w	r2, r3, #7
 80031a2:	4970      	ldr	r1, [pc, #448]	; (8003364 <HAL_RCC_ClockConfig+0x1ec>)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031aa:	4b6e      	ldr	r3, [pc, #440]	; (8003364 <HAL_RCC_ClockConfig+0x1ec>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d001      	beq.n	80031bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e0cf      	b.n	800335c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d010      	beq.n	80031ea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	4b66      	ldr	r3, [pc, #408]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d908      	bls.n	80031ea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d8:	4b63      	ldr	r3, [pc, #396]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	4960      	ldr	r1, [pc, #384]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d04c      	beq.n	8003290 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	d107      	bne.n	800320e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031fe:	4b5a      	ldr	r3, [pc, #360]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d121      	bne.n	800324e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e0a6      	b.n	800335c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d107      	bne.n	8003226 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003216:	4b54      	ldr	r3, [pc, #336]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d115      	bne.n	800324e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e09a      	b.n	800335c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d107      	bne.n	800323e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800322e:	4b4e      	ldr	r3, [pc, #312]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d109      	bne.n	800324e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e08e      	b.n	800335c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800323e:	4b4a      	ldr	r3, [pc, #296]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e086      	b.n	800335c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800324e:	4b46      	ldr	r3, [pc, #280]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f023 0203 	bic.w	r2, r3, #3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	4943      	ldr	r1, [pc, #268]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 800325c:	4313      	orrs	r3, r2
 800325e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003260:	f7fd fea0 	bl	8000fa4 <HAL_GetTick>
 8003264:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003266:	e00a      	b.n	800327e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003268:	f7fd fe9c 	bl	8000fa4 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	f241 3288 	movw	r2, #5000	; 0x1388
 8003276:	4293      	cmp	r3, r2
 8003278:	d901      	bls.n	800327e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e06e      	b.n	800335c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327e:	4b3a      	ldr	r3, [pc, #232]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 020c 	and.w	r2, r3, #12
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	429a      	cmp	r2, r3
 800328e:	d1eb      	bne.n	8003268 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d010      	beq.n	80032be <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	4b31      	ldr	r3, [pc, #196]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d208      	bcs.n	80032be <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032ac:	4b2e      	ldr	r3, [pc, #184]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	492b      	ldr	r1, [pc, #172]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032be:	4b29      	ldr	r3, [pc, #164]	; (8003364 <HAL_RCC_ClockConfig+0x1ec>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d210      	bcs.n	80032ee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032cc:	4b25      	ldr	r3, [pc, #148]	; (8003364 <HAL_RCC_ClockConfig+0x1ec>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f023 0207 	bic.w	r2, r3, #7
 80032d4:	4923      	ldr	r1, [pc, #140]	; (8003364 <HAL_RCC_ClockConfig+0x1ec>)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	4313      	orrs	r3, r2
 80032da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032dc:	4b21      	ldr	r3, [pc, #132]	; (8003364 <HAL_RCC_ClockConfig+0x1ec>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d001      	beq.n	80032ee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e036      	b.n	800335c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d008      	beq.n	800330c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032fa:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	4918      	ldr	r1, [pc, #96]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 8003308:	4313      	orrs	r3, r2
 800330a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0308 	and.w	r3, r3, #8
 8003314:	2b00      	cmp	r3, #0
 8003316:	d009      	beq.n	800332c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003318:	4b13      	ldr	r3, [pc, #76]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	4910      	ldr	r1, [pc, #64]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 8003328:	4313      	orrs	r3, r2
 800332a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800332c:	f000 f824 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8003330:	4602      	mov	r2, r0
 8003332:	4b0d      	ldr	r3, [pc, #52]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	091b      	lsrs	r3, r3, #4
 8003338:	f003 030f 	and.w	r3, r3, #15
 800333c:	490b      	ldr	r1, [pc, #44]	; (800336c <HAL_RCC_ClockConfig+0x1f4>)
 800333e:	5ccb      	ldrb	r3, [r1, r3]
 8003340:	f003 031f 	and.w	r3, r3, #31
 8003344:	fa22 f303 	lsr.w	r3, r2, r3
 8003348:	4a09      	ldr	r2, [pc, #36]	; (8003370 <HAL_RCC_ClockConfig+0x1f8>)
 800334a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800334c:	4b09      	ldr	r3, [pc, #36]	; (8003374 <HAL_RCC_ClockConfig+0x1fc>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f7fd fdd7 	bl	8000f04 <HAL_InitTick>
 8003356:	4603      	mov	r3, r0
 8003358:	72fb      	strb	r3, [r7, #11]

  return status;
 800335a:	7afb      	ldrb	r3, [r7, #11]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40022000 	.word	0x40022000
 8003368:	40021000 	.word	0x40021000
 800336c:	08006278 	.word	0x08006278
 8003370:	20000000 	.word	0x20000000
 8003374:	20000004 	.word	0x20000004

08003378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003378:	b480      	push	{r7}
 800337a:	b089      	sub	sp, #36	; 0x24
 800337c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800337e:	2300      	movs	r3, #0
 8003380:	61fb      	str	r3, [r7, #28]
 8003382:	2300      	movs	r3, #0
 8003384:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003386:	4b3e      	ldr	r3, [pc, #248]	; (8003480 <HAL_RCC_GetSysClockFreq+0x108>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 030c 	and.w	r3, r3, #12
 800338e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003390:	4b3b      	ldr	r3, [pc, #236]	; (8003480 <HAL_RCC_GetSysClockFreq+0x108>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d005      	beq.n	80033ac <HAL_RCC_GetSysClockFreq+0x34>
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	2b0c      	cmp	r3, #12
 80033a4:	d121      	bne.n	80033ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d11e      	bne.n	80033ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033ac:	4b34      	ldr	r3, [pc, #208]	; (8003480 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0308 	and.w	r3, r3, #8
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d107      	bne.n	80033c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033b8:	4b31      	ldr	r3, [pc, #196]	; (8003480 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033be:	0a1b      	lsrs	r3, r3, #8
 80033c0:	f003 030f 	and.w	r3, r3, #15
 80033c4:	61fb      	str	r3, [r7, #28]
 80033c6:	e005      	b.n	80033d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033c8:	4b2d      	ldr	r3, [pc, #180]	; (8003480 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	091b      	lsrs	r3, r3, #4
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033d4:	4a2b      	ldr	r2, [pc, #172]	; (8003484 <HAL_RCC_GetSysClockFreq+0x10c>)
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10d      	bne.n	8003400 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033e8:	e00a      	b.n	8003400 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d102      	bne.n	80033f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033f0:	4b25      	ldr	r3, [pc, #148]	; (8003488 <HAL_RCC_GetSysClockFreq+0x110>)
 80033f2:	61bb      	str	r3, [r7, #24]
 80033f4:	e004      	b.n	8003400 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d101      	bne.n	8003400 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033fc:	4b23      	ldr	r3, [pc, #140]	; (800348c <HAL_RCC_GetSysClockFreq+0x114>)
 80033fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	2b0c      	cmp	r3, #12
 8003404:	d134      	bne.n	8003470 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003406:	4b1e      	ldr	r3, [pc, #120]	; (8003480 <HAL_RCC_GetSysClockFreq+0x108>)
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d003      	beq.n	800341e <HAL_RCC_GetSysClockFreq+0xa6>
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2b03      	cmp	r3, #3
 800341a:	d003      	beq.n	8003424 <HAL_RCC_GetSysClockFreq+0xac>
 800341c:	e005      	b.n	800342a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800341e:	4b1a      	ldr	r3, [pc, #104]	; (8003488 <HAL_RCC_GetSysClockFreq+0x110>)
 8003420:	617b      	str	r3, [r7, #20]
      break;
 8003422:	e005      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003424:	4b19      	ldr	r3, [pc, #100]	; (800348c <HAL_RCC_GetSysClockFreq+0x114>)
 8003426:	617b      	str	r3, [r7, #20]
      break;
 8003428:	e002      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	617b      	str	r3, [r7, #20]
      break;
 800342e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003430:	4b13      	ldr	r3, [pc, #76]	; (8003480 <HAL_RCC_GetSysClockFreq+0x108>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	091b      	lsrs	r3, r3, #4
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	3301      	adds	r3, #1
 800343c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800343e:	4b10      	ldr	r3, [pc, #64]	; (8003480 <HAL_RCC_GetSysClockFreq+0x108>)
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	0a1b      	lsrs	r3, r3, #8
 8003444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	fb03 f202 	mul.w	r2, r3, r2
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	fbb2 f3f3 	udiv	r3, r2, r3
 8003454:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003456:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <HAL_RCC_GetSysClockFreq+0x108>)
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	0e5b      	lsrs	r3, r3, #25
 800345c:	f003 0303 	and.w	r3, r3, #3
 8003460:	3301      	adds	r3, #1
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	fbb2 f3f3 	udiv	r3, r2, r3
 800346e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003470:	69bb      	ldr	r3, [r7, #24]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3724      	adds	r7, #36	; 0x24
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40021000 	.word	0x40021000
 8003484:	08006290 	.word	0x08006290
 8003488:	00f42400 	.word	0x00f42400
 800348c:	007a1200 	.word	0x007a1200

08003490 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003494:	4b03      	ldr	r3, [pc, #12]	; (80034a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003496:	681b      	ldr	r3, [r3, #0]
}
 8003498:	4618      	mov	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	20000000 	.word	0x20000000

080034a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034ac:	f7ff fff0 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 80034b0:	4602      	mov	r2, r0
 80034b2:	4b06      	ldr	r3, [pc, #24]	; (80034cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	0a1b      	lsrs	r3, r3, #8
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	4904      	ldr	r1, [pc, #16]	; (80034d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034be:	5ccb      	ldrb	r3, [r1, r3]
 80034c0:	f003 031f 	and.w	r3, r3, #31
 80034c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40021000 	.word	0x40021000
 80034d0:	08006288 	.word	0x08006288

080034d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80034d8:	f7ff ffda 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 80034dc:	4602      	mov	r2, r0
 80034de:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	0adb      	lsrs	r3, r3, #11
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	4904      	ldr	r1, [pc, #16]	; (80034fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80034ea:	5ccb      	ldrb	r3, [r1, r3]
 80034ec:	f003 031f 	and.w	r3, r3, #31
 80034f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40021000 	.word	0x40021000
 80034fc:	08006288 	.word	0x08006288

08003500 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003508:	2300      	movs	r3, #0
 800350a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800350c:	4b2a      	ldr	r3, [pc, #168]	; (80035b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800350e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003518:	f7ff f9ee 	bl	80028f8 <HAL_PWREx_GetVoltageRange>
 800351c:	6178      	str	r0, [r7, #20]
 800351e:	e014      	b.n	800354a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003520:	4b25      	ldr	r3, [pc, #148]	; (80035b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003524:	4a24      	ldr	r2, [pc, #144]	; (80035b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800352a:	6593      	str	r3, [r2, #88]	; 0x58
 800352c:	4b22      	ldr	r3, [pc, #136]	; (80035b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800352e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003538:	f7ff f9de 	bl	80028f8 <HAL_PWREx_GetVoltageRange>
 800353c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800353e:	4b1e      	ldr	r3, [pc, #120]	; (80035b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003542:	4a1d      	ldr	r2, [pc, #116]	; (80035b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003548:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003550:	d10b      	bne.n	800356a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b80      	cmp	r3, #128	; 0x80
 8003556:	d919      	bls.n	800358c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2ba0      	cmp	r3, #160	; 0xa0
 800355c:	d902      	bls.n	8003564 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800355e:	2302      	movs	r3, #2
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	e013      	b.n	800358c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003564:	2301      	movs	r3, #1
 8003566:	613b      	str	r3, [r7, #16]
 8003568:	e010      	b.n	800358c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b80      	cmp	r3, #128	; 0x80
 800356e:	d902      	bls.n	8003576 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003570:	2303      	movs	r3, #3
 8003572:	613b      	str	r3, [r7, #16]
 8003574:	e00a      	b.n	800358c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b80      	cmp	r3, #128	; 0x80
 800357a:	d102      	bne.n	8003582 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800357c:	2302      	movs	r3, #2
 800357e:	613b      	str	r3, [r7, #16]
 8003580:	e004      	b.n	800358c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b70      	cmp	r3, #112	; 0x70
 8003586:	d101      	bne.n	800358c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003588:	2301      	movs	r3, #1
 800358a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800358c:	4b0b      	ldr	r3, [pc, #44]	; (80035bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f023 0207 	bic.w	r2, r3, #7
 8003594:	4909      	ldr	r1, [pc, #36]	; (80035bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	4313      	orrs	r3, r2
 800359a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800359c:	4b07      	ldr	r3, [pc, #28]	; (80035bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d001      	beq.n	80035ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e000      	b.n	80035b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3718      	adds	r7, #24
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40021000 	.word	0x40021000
 80035bc:	40022000 	.word	0x40022000

080035c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035c8:	2300      	movs	r3, #0
 80035ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035cc:	2300      	movs	r3, #0
 80035ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d041      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035e4:	d02a      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80035e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035ea:	d824      	bhi.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035f0:	d008      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80035f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035f6:	d81e      	bhi.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00a      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80035fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003600:	d010      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003602:	e018      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003604:	4b86      	ldr	r3, [pc, #536]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	4a85      	ldr	r2, [pc, #532]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800360e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003610:	e015      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3304      	adds	r3, #4
 8003616:	2100      	movs	r1, #0
 8003618:	4618      	mov	r0, r3
 800361a:	f000 fabb 	bl	8003b94 <RCCEx_PLLSAI1_Config>
 800361e:	4603      	mov	r3, r0
 8003620:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003622:	e00c      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3320      	adds	r3, #32
 8003628:	2100      	movs	r1, #0
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fba6 	bl	8003d7c <RCCEx_PLLSAI2_Config>
 8003630:	4603      	mov	r3, r0
 8003632:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003634:	e003      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	74fb      	strb	r3, [r7, #19]
      break;
 800363a:	e000      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800363c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800363e:	7cfb      	ldrb	r3, [r7, #19]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10b      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003644:	4b76      	ldr	r3, [pc, #472]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003652:	4973      	ldr	r1, [pc, #460]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003654:	4313      	orrs	r3, r2
 8003656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800365a:	e001      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800365c:	7cfb      	ldrb	r3, [r7, #19]
 800365e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d041      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003670:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003674:	d02a      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003676:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800367a:	d824      	bhi.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800367c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003680:	d008      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003682:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003686:	d81e      	bhi.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00a      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800368c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003690:	d010      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003692:	e018      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003694:	4b62      	ldr	r3, [pc, #392]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	4a61      	ldr	r2, [pc, #388]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800369a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800369e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036a0:	e015      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	3304      	adds	r3, #4
 80036a6:	2100      	movs	r1, #0
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 fa73 	bl	8003b94 <RCCEx_PLLSAI1_Config>
 80036ae:	4603      	mov	r3, r0
 80036b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036b2:	e00c      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3320      	adds	r3, #32
 80036b8:	2100      	movs	r1, #0
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 fb5e 	bl	8003d7c <RCCEx_PLLSAI2_Config>
 80036c0:	4603      	mov	r3, r0
 80036c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036c4:	e003      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	74fb      	strb	r3, [r7, #19]
      break;
 80036ca:	e000      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80036cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036ce:	7cfb      	ldrb	r3, [r7, #19]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10b      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036d4:	4b52      	ldr	r3, [pc, #328]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036e2:	494f      	ldr	r1, [pc, #316]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036ea:	e001      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ec:	7cfb      	ldrb	r3, [r7, #19]
 80036ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 80a0 	beq.w	800383e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036fe:	2300      	movs	r3, #0
 8003700:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003702:	4b47      	ldr	r3, [pc, #284]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003712:	2300      	movs	r3, #0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00d      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003718:	4b41      	ldr	r3, [pc, #260]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800371a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371c:	4a40      	ldr	r2, [pc, #256]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800371e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003722:	6593      	str	r3, [r2, #88]	; 0x58
 8003724:	4b3e      	ldr	r3, [pc, #248]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003730:	2301      	movs	r3, #1
 8003732:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003734:	4b3b      	ldr	r3, [pc, #236]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a3a      	ldr	r2, [pc, #232]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800373a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800373e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003740:	f7fd fc30 	bl	8000fa4 <HAL_GetTick>
 8003744:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003746:	e009      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003748:	f7fd fc2c 	bl	8000fa4 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d902      	bls.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	74fb      	strb	r3, [r7, #19]
        break;
 800375a:	e005      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800375c:	4b31      	ldr	r3, [pc, #196]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0ef      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003768:	7cfb      	ldrb	r3, [r7, #19]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d15c      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800376e:	4b2c      	ldr	r3, [pc, #176]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003774:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003778:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d01f      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	429a      	cmp	r2, r3
 800378a:	d019      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800378c:	4b24      	ldr	r3, [pc, #144]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800378e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003796:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003798:	4b21      	ldr	r3, [pc, #132]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800379a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379e:	4a20      	ldr	r2, [pc, #128]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037a8:	4b1d      	ldr	r3, [pc, #116]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ae:	4a1c      	ldr	r2, [pc, #112]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037b8:	4a19      	ldr	r2, [pc, #100]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d016      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ca:	f7fd fbeb 	bl	8000fa4 <HAL_GetTick>
 80037ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037d0:	e00b      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d2:	f7fd fbe7 	bl	8000fa4 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d902      	bls.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	74fb      	strb	r3, [r7, #19]
            break;
 80037e8:	e006      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ea:	4b0d      	ldr	r3, [pc, #52]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0ec      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80037f8:	7cfb      	ldrb	r3, [r7, #19]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10c      	bne.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037fe:	4b08      	ldr	r3, [pc, #32]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003804:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800380e:	4904      	ldr	r1, [pc, #16]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003816:	e009      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003818:	7cfb      	ldrb	r3, [r7, #19]
 800381a:	74bb      	strb	r3, [r7, #18]
 800381c:	e006      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800381e:	bf00      	nop
 8003820:	40021000 	.word	0x40021000
 8003824:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003828:	7cfb      	ldrb	r3, [r7, #19]
 800382a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800382c:	7c7b      	ldrb	r3, [r7, #17]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d105      	bne.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003832:	4b9e      	ldr	r3, [pc, #632]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003836:	4a9d      	ldr	r2, [pc, #628]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800383c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00a      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800384a:	4b98      	ldr	r3, [pc, #608]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003850:	f023 0203 	bic.w	r2, r3, #3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003858:	4994      	ldr	r1, [pc, #592]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800385a:	4313      	orrs	r3, r2
 800385c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00a      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800386c:	4b8f      	ldr	r3, [pc, #572]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800386e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003872:	f023 020c 	bic.w	r2, r3, #12
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387a:	498c      	ldr	r1, [pc, #560]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800387c:	4313      	orrs	r3, r2
 800387e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800388e:	4b87      	ldr	r3, [pc, #540]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003894:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	4983      	ldr	r1, [pc, #524]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0308 	and.w	r3, r3, #8
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00a      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038b0:	4b7e      	ldr	r3, [pc, #504]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038be:	497b      	ldr	r1, [pc, #492]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0310 	and.w	r3, r3, #16
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038d2:	4b76      	ldr	r3, [pc, #472]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e0:	4972      	ldr	r1, [pc, #456]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0320 	and.w	r3, r3, #32
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00a      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038f4:	4b6d      	ldr	r3, [pc, #436]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003902:	496a      	ldr	r1, [pc, #424]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003904:	4313      	orrs	r3, r2
 8003906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003916:	4b65      	ldr	r3, [pc, #404]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003924:	4961      	ldr	r1, [pc, #388]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003938:	4b5c      	ldr	r3, [pc, #368]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800393a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003946:	4959      	ldr	r1, [pc, #356]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800395a:	4b54      	ldr	r3, [pc, #336]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800395c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003960:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003968:	4950      	ldr	r1, [pc, #320]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800397c:	4b4b      	ldr	r3, [pc, #300]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003982:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398a:	4948      	ldr	r1, [pc, #288]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800399e:	4b43      	ldr	r3, [pc, #268]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ac:	493f      	ldr	r1, [pc, #252]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d028      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039c0:	4b3a      	ldr	r3, [pc, #232]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ce:	4937      	ldr	r1, [pc, #220]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039de:	d106      	bne.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039e0:	4b32      	ldr	r3, [pc, #200]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	4a31      	ldr	r2, [pc, #196]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039ea:	60d3      	str	r3, [r2, #12]
 80039ec:	e011      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039f6:	d10c      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3304      	adds	r3, #4
 80039fc:	2101      	movs	r1, #1
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 f8c8 	bl	8003b94 <RCCEx_PLLSAI1_Config>
 8003a04:	4603      	mov	r3, r0
 8003a06:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a08:	7cfb      	ldrb	r3, [r7, #19]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003a0e:	7cfb      	ldrb	r3, [r7, #19]
 8003a10:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d028      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a1e:	4b23      	ldr	r3, [pc, #140]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a24:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2c:	491f      	ldr	r1, [pc, #124]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a3c:	d106      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a3e:	4b1b      	ldr	r3, [pc, #108]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	4a1a      	ldr	r2, [pc, #104]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a48:	60d3      	str	r3, [r2, #12]
 8003a4a:	e011      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a54:	d10c      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	3304      	adds	r3, #4
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 f899 	bl	8003b94 <RCCEx_PLLSAI1_Config>
 8003a62:	4603      	mov	r3, r0
 8003a64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a66:	7cfb      	ldrb	r3, [r7, #19]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003a6c:	7cfb      	ldrb	r3, [r7, #19]
 8003a6e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d02b      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a7c:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a8a:	4908      	ldr	r1, [pc, #32]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a9a:	d109      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a9c:	4b03      	ldr	r3, [pc, #12]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	4a02      	ldr	r2, [pc, #8]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aa6:	60d3      	str	r3, [r2, #12]
 8003aa8:	e014      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003aaa:	bf00      	nop
 8003aac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ab8:	d10c      	bne.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3304      	adds	r3, #4
 8003abe:	2101      	movs	r1, #1
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f000 f867 	bl	8003b94 <RCCEx_PLLSAI1_Config>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aca:	7cfb      	ldrb	r3, [r7, #19]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003ad0:	7cfb      	ldrb	r3, [r7, #19]
 8003ad2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d02f      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ae0:	4b2b      	ldr	r3, [pc, #172]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aee:	4928      	ldr	r1, [pc, #160]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003afa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003afe:	d10d      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3304      	adds	r3, #4
 8003b04:	2102      	movs	r1, #2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 f844 	bl	8003b94 <RCCEx_PLLSAI1_Config>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b10:	7cfb      	ldrb	r3, [r7, #19]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d014      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b16:	7cfb      	ldrb	r3, [r7, #19]
 8003b18:	74bb      	strb	r3, [r7, #18]
 8003b1a:	e011      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b24:	d10c      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	3320      	adds	r3, #32
 8003b2a:	2102      	movs	r1, #2
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 f925 	bl	8003d7c <RCCEx_PLLSAI2_Config>
 8003b32:	4603      	mov	r3, r0
 8003b34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b36:	7cfb      	ldrb	r3, [r7, #19]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b3c:	7cfb      	ldrb	r3, [r7, #19]
 8003b3e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00a      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b4c:	4b10      	ldr	r3, [pc, #64]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b52:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b5a:	490d      	ldr	r1, [pc, #52]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00b      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b6e:	4b08      	ldr	r3, [pc, #32]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b7e:	4904      	ldr	r1, [pc, #16]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b86:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40021000 	.word	0x40021000

08003b94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ba2:	4b75      	ldr	r3, [pc, #468]	; (8003d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d018      	beq.n	8003be0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003bae:	4b72      	ldr	r3, [pc, #456]	; (8003d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f003 0203 	and.w	r2, r3, #3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d10d      	bne.n	8003bda <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
       ||
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d009      	beq.n	8003bda <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003bc6:	4b6c      	ldr	r3, [pc, #432]	; (8003d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	091b      	lsrs	r3, r3, #4
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
       ||
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d047      	beq.n	8003c6a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	73fb      	strb	r3, [r7, #15]
 8003bde:	e044      	b.n	8003c6a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b03      	cmp	r3, #3
 8003be6:	d018      	beq.n	8003c1a <RCCEx_PLLSAI1_Config+0x86>
 8003be8:	2b03      	cmp	r3, #3
 8003bea:	d825      	bhi.n	8003c38 <RCCEx_PLLSAI1_Config+0xa4>
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d002      	beq.n	8003bf6 <RCCEx_PLLSAI1_Config+0x62>
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d009      	beq.n	8003c08 <RCCEx_PLLSAI1_Config+0x74>
 8003bf4:	e020      	b.n	8003c38 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bf6:	4b60      	ldr	r3, [pc, #384]	; (8003d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d11d      	bne.n	8003c3e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c06:	e01a      	b.n	8003c3e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c08:	4b5b      	ldr	r3, [pc, #364]	; (8003d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d116      	bne.n	8003c42 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c18:	e013      	b.n	8003c42 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c1a:	4b57      	ldr	r3, [pc, #348]	; (8003d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10f      	bne.n	8003c46 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c26:	4b54      	ldr	r3, [pc, #336]	; (8003d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d109      	bne.n	8003c46 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c36:	e006      	b.n	8003c46 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c3c:	e004      	b.n	8003c48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c3e:	bf00      	nop
 8003c40:	e002      	b.n	8003c48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c42:	bf00      	nop
 8003c44:	e000      	b.n	8003c48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c46:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10d      	bne.n	8003c6a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c4e:	4b4a      	ldr	r3, [pc, #296]	; (8003d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6819      	ldr	r1, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	011b      	lsls	r3, r3, #4
 8003c62:	430b      	orrs	r3, r1
 8003c64:	4944      	ldr	r1, [pc, #272]	; (8003d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c6a:	7bfb      	ldrb	r3, [r7, #15]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d17d      	bne.n	8003d6c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c70:	4b41      	ldr	r3, [pc, #260]	; (8003d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a40      	ldr	r2, [pc, #256]	; (8003d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c7c:	f7fd f992 	bl	8000fa4 <HAL_GetTick>
 8003c80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c82:	e009      	b.n	8003c98 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c84:	f7fd f98e 	bl	8000fa4 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d902      	bls.n	8003c98 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	73fb      	strb	r3, [r7, #15]
        break;
 8003c96:	e005      	b.n	8003ca4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c98:	4b37      	ldr	r3, [pc, #220]	; (8003d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1ef      	bne.n	8003c84 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d160      	bne.n	8003d6c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d111      	bne.n	8003cd4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cb0:	4b31      	ldr	r3, [pc, #196]	; (8003d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6892      	ldr	r2, [r2, #8]
 8003cc0:	0211      	lsls	r1, r2, #8
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	68d2      	ldr	r2, [r2, #12]
 8003cc6:	0912      	lsrs	r2, r2, #4
 8003cc8:	0452      	lsls	r2, r2, #17
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	492a      	ldr	r1, [pc, #168]	; (8003d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	610b      	str	r3, [r1, #16]
 8003cd2:	e027      	b.n	8003d24 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d112      	bne.n	8003d00 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cda:	4b27      	ldr	r3, [pc, #156]	; (8003d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003ce2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6892      	ldr	r2, [r2, #8]
 8003cea:	0211      	lsls	r1, r2, #8
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6912      	ldr	r2, [r2, #16]
 8003cf0:	0852      	lsrs	r2, r2, #1
 8003cf2:	3a01      	subs	r2, #1
 8003cf4:	0552      	lsls	r2, r2, #21
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	491f      	ldr	r1, [pc, #124]	; (8003d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	610b      	str	r3, [r1, #16]
 8003cfe:	e011      	b.n	8003d24 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d00:	4b1d      	ldr	r3, [pc, #116]	; (8003d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6892      	ldr	r2, [r2, #8]
 8003d10:	0211      	lsls	r1, r2, #8
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6952      	ldr	r2, [r2, #20]
 8003d16:	0852      	lsrs	r2, r2, #1
 8003d18:	3a01      	subs	r2, #1
 8003d1a:	0652      	lsls	r2, r2, #25
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	4916      	ldr	r1, [pc, #88]	; (8003d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d24:	4b14      	ldr	r3, [pc, #80]	; (8003d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a13      	ldr	r2, [pc, #76]	; (8003d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d30:	f7fd f938 	bl	8000fa4 <HAL_GetTick>
 8003d34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d36:	e009      	b.n	8003d4c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d38:	f7fd f934 	bl	8000fa4 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d902      	bls.n	8003d4c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	73fb      	strb	r3, [r7, #15]
          break;
 8003d4a:	e005      	b.n	8003d58 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d4c:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0ef      	beq.n	8003d38 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d5e:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d60:	691a      	ldr	r2, [r3, #16]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	4904      	ldr	r1, [pc, #16]	; (8003d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40021000 	.word	0x40021000

08003d7c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d86:	2300      	movs	r3, #0
 8003d88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d8a:	4b6a      	ldr	r3, [pc, #424]	; (8003f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d018      	beq.n	8003dc8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d96:	4b67      	ldr	r3, [pc, #412]	; (8003f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f003 0203 	and.w	r2, r3, #3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d10d      	bne.n	8003dc2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
       ||
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d009      	beq.n	8003dc2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003dae:	4b61      	ldr	r3, [pc, #388]	; (8003f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	091b      	lsrs	r3, r3, #4
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
       ||
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d047      	beq.n	8003e52 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	73fb      	strb	r3, [r7, #15]
 8003dc6:	e044      	b.n	8003e52 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b03      	cmp	r3, #3
 8003dce:	d018      	beq.n	8003e02 <RCCEx_PLLSAI2_Config+0x86>
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d825      	bhi.n	8003e20 <RCCEx_PLLSAI2_Config+0xa4>
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d002      	beq.n	8003dde <RCCEx_PLLSAI2_Config+0x62>
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d009      	beq.n	8003df0 <RCCEx_PLLSAI2_Config+0x74>
 8003ddc:	e020      	b.n	8003e20 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003dde:	4b55      	ldr	r3, [pc, #340]	; (8003f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d11d      	bne.n	8003e26 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dee:	e01a      	b.n	8003e26 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003df0:	4b50      	ldr	r3, [pc, #320]	; (8003f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d116      	bne.n	8003e2a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e00:	e013      	b.n	8003e2a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e02:	4b4c      	ldr	r3, [pc, #304]	; (8003f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10f      	bne.n	8003e2e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e0e:	4b49      	ldr	r3, [pc, #292]	; (8003f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d109      	bne.n	8003e2e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e1e:	e006      	b.n	8003e2e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	73fb      	strb	r3, [r7, #15]
      break;
 8003e24:	e004      	b.n	8003e30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e26:	bf00      	nop
 8003e28:	e002      	b.n	8003e30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e2a:	bf00      	nop
 8003e2c:	e000      	b.n	8003e30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10d      	bne.n	8003e52 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e36:	4b3f      	ldr	r3, [pc, #252]	; (8003f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6819      	ldr	r1, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	430b      	orrs	r3, r1
 8003e4c:	4939      	ldr	r1, [pc, #228]	; (8003f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e52:	7bfb      	ldrb	r3, [r7, #15]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d167      	bne.n	8003f28 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e58:	4b36      	ldr	r3, [pc, #216]	; (8003f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a35      	ldr	r2, [pc, #212]	; (8003f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e64:	f7fd f89e 	bl	8000fa4 <HAL_GetTick>
 8003e68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e6a:	e009      	b.n	8003e80 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e6c:	f7fd f89a 	bl	8000fa4 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d902      	bls.n	8003e80 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	73fb      	strb	r3, [r7, #15]
        break;
 8003e7e:	e005      	b.n	8003e8c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e80:	4b2c      	ldr	r3, [pc, #176]	; (8003f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1ef      	bne.n	8003e6c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d14a      	bne.n	8003f28 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d111      	bne.n	8003ebc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e98:	4b26      	ldr	r3, [pc, #152]	; (8003f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6892      	ldr	r2, [r2, #8]
 8003ea8:	0211      	lsls	r1, r2, #8
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	68d2      	ldr	r2, [r2, #12]
 8003eae:	0912      	lsrs	r2, r2, #4
 8003eb0:	0452      	lsls	r2, r2, #17
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	491f      	ldr	r1, [pc, #124]	; (8003f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	614b      	str	r3, [r1, #20]
 8003eba:	e011      	b.n	8003ee0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ebc:	4b1d      	ldr	r3, [pc, #116]	; (8003f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ec4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6892      	ldr	r2, [r2, #8]
 8003ecc:	0211      	lsls	r1, r2, #8
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6912      	ldr	r2, [r2, #16]
 8003ed2:	0852      	lsrs	r2, r2, #1
 8003ed4:	3a01      	subs	r2, #1
 8003ed6:	0652      	lsls	r2, r2, #25
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	4916      	ldr	r1, [pc, #88]	; (8003f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ee0:	4b14      	ldr	r3, [pc, #80]	; (8003f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a13      	ldr	r2, [pc, #76]	; (8003f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eec:	f7fd f85a 	bl	8000fa4 <HAL_GetTick>
 8003ef0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ef2:	e009      	b.n	8003f08 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ef4:	f7fd f856 	bl	8000fa4 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d902      	bls.n	8003f08 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	73fb      	strb	r3, [r7, #15]
          break;
 8003f06:	e005      	b.n	8003f14 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f08:	4b0a      	ldr	r3, [pc, #40]	; (8003f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0ef      	beq.n	8003ef4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d106      	bne.n	8003f28 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f1a:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f1c:	695a      	ldr	r2, [r3, #20]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	4904      	ldr	r1, [pc, #16]	; (8003f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40021000 	.word	0x40021000

08003f38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e040      	b.n	8003fcc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d106      	bne.n	8003f60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7fc fe06 	bl	8000b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2224      	movs	r2, #36	; 0x24
 8003f64:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0201 	bic.w	r2, r2, #1
 8003f74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 fc18 	bl	80047ac <UART_SetConfig>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d101      	bne.n	8003f86 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e022      	b.n	8003fcc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fec4 	bl	8004d1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fa2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0201 	orr.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 ff4b 	bl	8004e60 <UART_CheckIdleState>
 8003fca:	4603      	mov	r3, r0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e048      	b.n	8004078 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d106      	bne.n	8003ffc <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7fc fdb8 	bl	8000b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2224      	movs	r2, #36	; 0x24
 8004000:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0201 	bic.w	r2, r2, #1
 8004010:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 fbca 	bl	80047ac <UART_SetConfig>
 8004018:	4603      	mov	r3, r0
 800401a:	2b01      	cmp	r3, #1
 800401c:	d101      	bne.n	8004022 <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e02a      	b.n	8004078 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 fe76 	bl	8004d1c <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800403e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800404e:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0208 	orr.w	r2, r2, #8
 800405e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0201 	orr.w	r2, r2, #1
 800406e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 fef5 	bl	8004e60 <UART_CheckIdleState>
 8004076:	4603      	mov	r3, r0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08a      	sub	sp, #40	; 0x28
 8004084:	af02      	add	r7, sp, #8
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	603b      	str	r3, [r7, #0]
 800408c:	4613      	mov	r3, r2
 800408e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004094:	2b20      	cmp	r3, #32
 8004096:	f040 8082 	bne.w	800419e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d002      	beq.n	80040a6 <HAL_UART_Transmit+0x26>
 80040a0:	88fb      	ldrh	r3, [r7, #6]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e07a      	b.n	80041a0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d101      	bne.n	80040b8 <HAL_UART_Transmit+0x38>
 80040b4:	2302      	movs	r3, #2
 80040b6:	e073      	b.n	80041a0 <HAL_UART_Transmit+0x120>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2221      	movs	r2, #33	; 0x21
 80040cc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040ce:	f7fc ff69 	bl	8000fa4 <HAL_GetTick>
 80040d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	88fa      	ldrh	r2, [r7, #6]
 80040d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	88fa      	ldrh	r2, [r7, #6]
 80040e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ec:	d108      	bne.n	8004100 <HAL_UART_Transmit+0x80>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d104      	bne.n	8004100 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80040f6:	2300      	movs	r3, #0
 80040f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	61bb      	str	r3, [r7, #24]
 80040fe:	e003      	b.n	8004108 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004104:	2300      	movs	r3, #0
 8004106:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004110:	e02d      	b.n	800416e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2200      	movs	r2, #0
 800411a:	2180      	movs	r1, #128	; 0x80
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 fee8 	bl	8004ef2 <UART_WaitOnFlagUntilTimeout>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e039      	b.n	80041a0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10b      	bne.n	800414a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	881a      	ldrh	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800413e:	b292      	uxth	r2, r2
 8004140:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	3302      	adds	r3, #2
 8004146:	61bb      	str	r3, [r7, #24]
 8004148:	e008      	b.n	800415c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	781a      	ldrb	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	b292      	uxth	r2, r2
 8004154:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	3301      	adds	r3, #1
 800415a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1cb      	bne.n	8004112 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2200      	movs	r2, #0
 8004182:	2140      	movs	r1, #64	; 0x40
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 feb4 	bl	8004ef2 <UART_WaitOnFlagUntilTimeout>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d001      	beq.n	8004194 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e005      	b.n	80041a0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2220      	movs	r2, #32
 8004198:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	e000      	b.n	80041a0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800419e:	2302      	movs	r3, #2
  }
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3720      	adds	r7, #32
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b0ba      	sub	sp, #232	; 0xe8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80041d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80041d6:	4013      	ands	r3, r2
 80041d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80041dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d115      	bne.n	8004210 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80041e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e8:	f003 0320 	and.w	r3, r3, #32
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00f      	beq.n	8004210 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d009      	beq.n	8004210 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 82a6 	beq.w	8004752 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	4798      	blx	r3
      }
      return;
 800420e:	e2a0      	b.n	8004752 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004210:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 8117 	beq.w	8004448 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800421a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d106      	bne.n	8004234 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004226:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800422a:	4b85      	ldr	r3, [pc, #532]	; (8004440 <HAL_UART_IRQHandler+0x298>)
 800422c:	4013      	ands	r3, r2
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 810a 	beq.w	8004448 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b00      	cmp	r3, #0
 800423e:	d011      	beq.n	8004264 <HAL_UART_IRQHandler+0xbc>
 8004240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00b      	beq.n	8004264 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2201      	movs	r2, #1
 8004252:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800425a:	f043 0201 	orr.w	r2, r3, #1
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d011      	beq.n	8004294 <HAL_UART_IRQHandler+0xec>
 8004270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00b      	beq.n	8004294 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2202      	movs	r2, #2
 8004282:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800428a:	f043 0204 	orr.w	r2, r3, #4
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	d011      	beq.n	80042c4 <HAL_UART_IRQHandler+0x11c>
 80042a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00b      	beq.n	80042c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2204      	movs	r2, #4
 80042b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042ba:	f043 0202 	orr.w	r2, r3, #2
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80042c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042c8:	f003 0308 	and.w	r3, r3, #8
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d017      	beq.n	8004300 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042d4:	f003 0320 	and.w	r3, r3, #32
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d105      	bne.n	80042e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80042dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00b      	beq.n	8004300 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2208      	movs	r2, #8
 80042ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042f6:	f043 0208 	orr.w	r2, r3, #8
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004308:	2b00      	cmp	r3, #0
 800430a:	d012      	beq.n	8004332 <HAL_UART_IRQHandler+0x18a>
 800430c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004310:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00c      	beq.n	8004332 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004320:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004328:	f043 0220 	orr.w	r2, r3, #32
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 820c 	beq.w	8004756 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800433e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004342:	f003 0320 	and.w	r3, r3, #32
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00d      	beq.n	8004366 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800434a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800434e:	f003 0320 	and.w	r3, r3, #32
 8004352:	2b00      	cmp	r3, #0
 8004354:	d007      	beq.n	8004366 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800436c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437a:	2b40      	cmp	r3, #64	; 0x40
 800437c:	d005      	beq.n	800438a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800437e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004382:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004386:	2b00      	cmp	r3, #0
 8004388:	d04f      	beq.n	800442a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fe75 	bl	800507a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439a:	2b40      	cmp	r3, #64	; 0x40
 800439c:	d141      	bne.n	8004422 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	3308      	adds	r3, #8
 80043a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043ac:	e853 3f00 	ldrex	r3, [r3]
 80043b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80043b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3308      	adds	r3, #8
 80043c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80043d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80043da:	e841 2300 	strex	r3, r2, [r1]
 80043de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80043e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1d9      	bne.n	800439e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d013      	beq.n	800441a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f6:	4a13      	ldr	r2, [pc, #76]	; (8004444 <HAL_UART_IRQHandler+0x29c>)
 80043f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fd ffb0 	bl	8002364 <HAL_DMA_Abort_IT>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d017      	beq.n	800443a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004414:	4610      	mov	r0, r2
 8004416:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004418:	e00f      	b.n	800443a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f9b0 	bl	8004780 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004420:	e00b      	b.n	800443a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f9ac 	bl	8004780 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004428:	e007      	b.n	800443a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f9a8 	bl	8004780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004438:	e18d      	b.n	8004756 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800443a:	bf00      	nop
    return;
 800443c:	e18b      	b.n	8004756 <HAL_UART_IRQHandler+0x5ae>
 800443e:	bf00      	nop
 8004440:	04000120 	.word	0x04000120
 8004444:	08005141 	.word	0x08005141

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800444c:	2b01      	cmp	r3, #1
 800444e:	f040 8146 	bne.w	80046de <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004456:	f003 0310 	and.w	r3, r3, #16
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 813f 	beq.w	80046de <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004464:	f003 0310 	and.w	r3, r3, #16
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 8138 	beq.w	80046de <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2210      	movs	r2, #16
 8004474:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004480:	2b40      	cmp	r3, #64	; 0x40
 8004482:	f040 80b4 	bne.w	80045ee <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004492:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 815f 	beq.w	800475a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80044a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044a6:	429a      	cmp	r2, r3
 80044a8:	f080 8157 	bcs.w	800475a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0320 	and.w	r3, r3, #32
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f040 8085 	bne.w	80045d2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044d4:	e853 3f00 	ldrex	r3, [r3]
 80044d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80044dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	461a      	mov	r2, r3
 80044ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004502:	e841 2300 	strex	r3, r2, [r1]
 8004506:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800450a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1da      	bne.n	80044c8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	3308      	adds	r3, #8
 8004518:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800451c:	e853 3f00 	ldrex	r3, [r3]
 8004520:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004522:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004524:	f023 0301 	bic.w	r3, r3, #1
 8004528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3308      	adds	r3, #8
 8004532:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004536:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800453a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800453e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004542:	e841 2300 	strex	r3, r2, [r1]
 8004546:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004548:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1e1      	bne.n	8004512 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	3308      	adds	r3, #8
 8004554:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004556:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004558:	e853 3f00 	ldrex	r3, [r3]
 800455c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800455e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004564:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3308      	adds	r3, #8
 800456e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004572:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004574:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004576:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004578:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800457a:	e841 2300 	strex	r3, r2, [r1]
 800457e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1e3      	bne.n	800454e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2220      	movs	r2, #32
 800458a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800459a:	e853 3f00 	ldrex	r3, [r3]
 800459e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045a2:	f023 0310 	bic.w	r3, r3, #16
 80045a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80045b6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045bc:	e841 2300 	strex	r3, r2, [r1]
 80045c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1e4      	bne.n	8004592 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7fd fe8b 	bl	80022e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045de:	b29b      	uxth	r3, r3
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	4619      	mov	r1, r3
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f8d4 	bl	8004794 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045ec:	e0b5      	b.n	800475a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004608:	b29b      	uxth	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 80a7 	beq.w	800475e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004610:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 80a2 	beq.w	800475e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004622:	e853 3f00 	ldrex	r3, [r3]
 8004626:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800462a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800462e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	461a      	mov	r2, r3
 8004638:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800463c:	647b      	str	r3, [r7, #68]	; 0x44
 800463e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004640:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004642:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004644:	e841 2300 	strex	r3, r2, [r1]
 8004648:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800464a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1e4      	bne.n	800461a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3308      	adds	r3, #8
 8004656:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	e853 3f00 	ldrex	r3, [r3]
 800465e:	623b      	str	r3, [r7, #32]
   return(result);
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	f023 0301 	bic.w	r3, r3, #1
 8004666:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	3308      	adds	r3, #8
 8004670:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004674:	633a      	str	r2, [r7, #48]	; 0x30
 8004676:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004678:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800467a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800467c:	e841 2300 	strex	r3, r2, [r1]
 8004680:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1e3      	bne.n	8004650 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2220      	movs	r2, #32
 800468c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	e853 3f00 	ldrex	r3, [r3]
 80046a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f023 0310 	bic.w	r3, r3, #16
 80046ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046bc:	61fb      	str	r3, [r7, #28]
 80046be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c0:	69b9      	ldr	r1, [r7, #24]
 80046c2:	69fa      	ldr	r2, [r7, #28]
 80046c4:	e841 2300 	strex	r3, r2, [r1]
 80046c8:	617b      	str	r3, [r7, #20]
   return(result);
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e4      	bne.n	800469a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046d4:	4619      	mov	r1, r3
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f85c 	bl	8004794 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046dc:	e03f      	b.n	800475e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80046de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00e      	beq.n	8004708 <HAL_UART_IRQHandler+0x560>
 80046ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d008      	beq.n	8004708 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80046fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 fd5d 	bl	80051c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004706:	e02d      	b.n	8004764 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800470c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00e      	beq.n	8004732 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471c:	2b00      	cmp	r3, #0
 800471e:	d008      	beq.n	8004732 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004724:	2b00      	cmp	r3, #0
 8004726:	d01c      	beq.n	8004762 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	4798      	blx	r3
    }
    return;
 8004730:	e017      	b.n	8004762 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473a:	2b00      	cmp	r3, #0
 800473c:	d012      	beq.n	8004764 <HAL_UART_IRQHandler+0x5bc>
 800473e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00c      	beq.n	8004764 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 fd0e 	bl	800516c <UART_EndTransmit_IT>
    return;
 8004750:	e008      	b.n	8004764 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004752:	bf00      	nop
 8004754:	e006      	b.n	8004764 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004756:	bf00      	nop
 8004758:	e004      	b.n	8004764 <HAL_UART_IRQHandler+0x5bc>
      return;
 800475a:	bf00      	nop
 800475c:	e002      	b.n	8004764 <HAL_UART_IRQHandler+0x5bc>
      return;
 800475e:	bf00      	nop
 8004760:	e000      	b.n	8004764 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004762:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004764:	37e8      	adds	r7, #232	; 0xe8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop

0800476c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	460b      	mov	r3, r1
 800479e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047b0:	b08a      	sub	sp, #40	; 0x28
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	431a      	orrs	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	431a      	orrs	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	4ba4      	ldr	r3, [pc, #656]	; (8004a6c <UART_SetConfig+0x2c0>)
 80047dc:	4013      	ands	r3, r2
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	6812      	ldr	r2, [r2, #0]
 80047e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047e4:	430b      	orrs	r3, r1
 80047e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a99      	ldr	r2, [pc, #612]	; (8004a70 <UART_SetConfig+0x2c4>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d004      	beq.n	8004818 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004814:	4313      	orrs	r3, r2
 8004816:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004828:	430a      	orrs	r2, r1
 800482a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a90      	ldr	r2, [pc, #576]	; (8004a74 <UART_SetConfig+0x2c8>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d126      	bne.n	8004884 <UART_SetConfig+0xd8>
 8004836:	4b90      	ldr	r3, [pc, #576]	; (8004a78 <UART_SetConfig+0x2cc>)
 8004838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483c:	f003 0303 	and.w	r3, r3, #3
 8004840:	2b03      	cmp	r3, #3
 8004842:	d81b      	bhi.n	800487c <UART_SetConfig+0xd0>
 8004844:	a201      	add	r2, pc, #4	; (adr r2, 800484c <UART_SetConfig+0xa0>)
 8004846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484a:	bf00      	nop
 800484c:	0800485d 	.word	0x0800485d
 8004850:	0800486d 	.word	0x0800486d
 8004854:	08004865 	.word	0x08004865
 8004858:	08004875 	.word	0x08004875
 800485c:	2301      	movs	r3, #1
 800485e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004862:	e116      	b.n	8004a92 <UART_SetConfig+0x2e6>
 8004864:	2302      	movs	r3, #2
 8004866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800486a:	e112      	b.n	8004a92 <UART_SetConfig+0x2e6>
 800486c:	2304      	movs	r3, #4
 800486e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004872:	e10e      	b.n	8004a92 <UART_SetConfig+0x2e6>
 8004874:	2308      	movs	r3, #8
 8004876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800487a:	e10a      	b.n	8004a92 <UART_SetConfig+0x2e6>
 800487c:	2310      	movs	r3, #16
 800487e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004882:	e106      	b.n	8004a92 <UART_SetConfig+0x2e6>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a7c      	ldr	r2, [pc, #496]	; (8004a7c <UART_SetConfig+0x2d0>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d138      	bne.n	8004900 <UART_SetConfig+0x154>
 800488e:	4b7a      	ldr	r3, [pc, #488]	; (8004a78 <UART_SetConfig+0x2cc>)
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004894:	f003 030c 	and.w	r3, r3, #12
 8004898:	2b0c      	cmp	r3, #12
 800489a:	d82d      	bhi.n	80048f8 <UART_SetConfig+0x14c>
 800489c:	a201      	add	r2, pc, #4	; (adr r2, 80048a4 <UART_SetConfig+0xf8>)
 800489e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a2:	bf00      	nop
 80048a4:	080048d9 	.word	0x080048d9
 80048a8:	080048f9 	.word	0x080048f9
 80048ac:	080048f9 	.word	0x080048f9
 80048b0:	080048f9 	.word	0x080048f9
 80048b4:	080048e9 	.word	0x080048e9
 80048b8:	080048f9 	.word	0x080048f9
 80048bc:	080048f9 	.word	0x080048f9
 80048c0:	080048f9 	.word	0x080048f9
 80048c4:	080048e1 	.word	0x080048e1
 80048c8:	080048f9 	.word	0x080048f9
 80048cc:	080048f9 	.word	0x080048f9
 80048d0:	080048f9 	.word	0x080048f9
 80048d4:	080048f1 	.word	0x080048f1
 80048d8:	2300      	movs	r3, #0
 80048da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048de:	e0d8      	b.n	8004a92 <UART_SetConfig+0x2e6>
 80048e0:	2302      	movs	r3, #2
 80048e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048e6:	e0d4      	b.n	8004a92 <UART_SetConfig+0x2e6>
 80048e8:	2304      	movs	r3, #4
 80048ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ee:	e0d0      	b.n	8004a92 <UART_SetConfig+0x2e6>
 80048f0:	2308      	movs	r3, #8
 80048f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048f6:	e0cc      	b.n	8004a92 <UART_SetConfig+0x2e6>
 80048f8:	2310      	movs	r3, #16
 80048fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048fe:	e0c8      	b.n	8004a92 <UART_SetConfig+0x2e6>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a5e      	ldr	r2, [pc, #376]	; (8004a80 <UART_SetConfig+0x2d4>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d125      	bne.n	8004956 <UART_SetConfig+0x1aa>
 800490a:	4b5b      	ldr	r3, [pc, #364]	; (8004a78 <UART_SetConfig+0x2cc>)
 800490c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004910:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004914:	2b30      	cmp	r3, #48	; 0x30
 8004916:	d016      	beq.n	8004946 <UART_SetConfig+0x19a>
 8004918:	2b30      	cmp	r3, #48	; 0x30
 800491a:	d818      	bhi.n	800494e <UART_SetConfig+0x1a2>
 800491c:	2b20      	cmp	r3, #32
 800491e:	d00a      	beq.n	8004936 <UART_SetConfig+0x18a>
 8004920:	2b20      	cmp	r3, #32
 8004922:	d814      	bhi.n	800494e <UART_SetConfig+0x1a2>
 8004924:	2b00      	cmp	r3, #0
 8004926:	d002      	beq.n	800492e <UART_SetConfig+0x182>
 8004928:	2b10      	cmp	r3, #16
 800492a:	d008      	beq.n	800493e <UART_SetConfig+0x192>
 800492c:	e00f      	b.n	800494e <UART_SetConfig+0x1a2>
 800492e:	2300      	movs	r3, #0
 8004930:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004934:	e0ad      	b.n	8004a92 <UART_SetConfig+0x2e6>
 8004936:	2302      	movs	r3, #2
 8004938:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800493c:	e0a9      	b.n	8004a92 <UART_SetConfig+0x2e6>
 800493e:	2304      	movs	r3, #4
 8004940:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004944:	e0a5      	b.n	8004a92 <UART_SetConfig+0x2e6>
 8004946:	2308      	movs	r3, #8
 8004948:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800494c:	e0a1      	b.n	8004a92 <UART_SetConfig+0x2e6>
 800494e:	2310      	movs	r3, #16
 8004950:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004954:	e09d      	b.n	8004a92 <UART_SetConfig+0x2e6>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a4a      	ldr	r2, [pc, #296]	; (8004a84 <UART_SetConfig+0x2d8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d125      	bne.n	80049ac <UART_SetConfig+0x200>
 8004960:	4b45      	ldr	r3, [pc, #276]	; (8004a78 <UART_SetConfig+0x2cc>)
 8004962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004966:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800496a:	2bc0      	cmp	r3, #192	; 0xc0
 800496c:	d016      	beq.n	800499c <UART_SetConfig+0x1f0>
 800496e:	2bc0      	cmp	r3, #192	; 0xc0
 8004970:	d818      	bhi.n	80049a4 <UART_SetConfig+0x1f8>
 8004972:	2b80      	cmp	r3, #128	; 0x80
 8004974:	d00a      	beq.n	800498c <UART_SetConfig+0x1e0>
 8004976:	2b80      	cmp	r3, #128	; 0x80
 8004978:	d814      	bhi.n	80049a4 <UART_SetConfig+0x1f8>
 800497a:	2b00      	cmp	r3, #0
 800497c:	d002      	beq.n	8004984 <UART_SetConfig+0x1d8>
 800497e:	2b40      	cmp	r3, #64	; 0x40
 8004980:	d008      	beq.n	8004994 <UART_SetConfig+0x1e8>
 8004982:	e00f      	b.n	80049a4 <UART_SetConfig+0x1f8>
 8004984:	2300      	movs	r3, #0
 8004986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800498a:	e082      	b.n	8004a92 <UART_SetConfig+0x2e6>
 800498c:	2302      	movs	r3, #2
 800498e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004992:	e07e      	b.n	8004a92 <UART_SetConfig+0x2e6>
 8004994:	2304      	movs	r3, #4
 8004996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800499a:	e07a      	b.n	8004a92 <UART_SetConfig+0x2e6>
 800499c:	2308      	movs	r3, #8
 800499e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049a2:	e076      	b.n	8004a92 <UART_SetConfig+0x2e6>
 80049a4:	2310      	movs	r3, #16
 80049a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049aa:	e072      	b.n	8004a92 <UART_SetConfig+0x2e6>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a35      	ldr	r2, [pc, #212]	; (8004a88 <UART_SetConfig+0x2dc>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d12a      	bne.n	8004a0c <UART_SetConfig+0x260>
 80049b6:	4b30      	ldr	r3, [pc, #192]	; (8004a78 <UART_SetConfig+0x2cc>)
 80049b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049c4:	d01a      	beq.n	80049fc <UART_SetConfig+0x250>
 80049c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049ca:	d81b      	bhi.n	8004a04 <UART_SetConfig+0x258>
 80049cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049d0:	d00c      	beq.n	80049ec <UART_SetConfig+0x240>
 80049d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049d6:	d815      	bhi.n	8004a04 <UART_SetConfig+0x258>
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d003      	beq.n	80049e4 <UART_SetConfig+0x238>
 80049dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049e0:	d008      	beq.n	80049f4 <UART_SetConfig+0x248>
 80049e2:	e00f      	b.n	8004a04 <UART_SetConfig+0x258>
 80049e4:	2300      	movs	r3, #0
 80049e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ea:	e052      	b.n	8004a92 <UART_SetConfig+0x2e6>
 80049ec:	2302      	movs	r3, #2
 80049ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049f2:	e04e      	b.n	8004a92 <UART_SetConfig+0x2e6>
 80049f4:	2304      	movs	r3, #4
 80049f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049fa:	e04a      	b.n	8004a92 <UART_SetConfig+0x2e6>
 80049fc:	2308      	movs	r3, #8
 80049fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a02:	e046      	b.n	8004a92 <UART_SetConfig+0x2e6>
 8004a04:	2310      	movs	r3, #16
 8004a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a0a:	e042      	b.n	8004a92 <UART_SetConfig+0x2e6>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a17      	ldr	r2, [pc, #92]	; (8004a70 <UART_SetConfig+0x2c4>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d13a      	bne.n	8004a8c <UART_SetConfig+0x2e0>
 8004a16:	4b18      	ldr	r3, [pc, #96]	; (8004a78 <UART_SetConfig+0x2cc>)
 8004a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a24:	d01a      	beq.n	8004a5c <UART_SetConfig+0x2b0>
 8004a26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a2a:	d81b      	bhi.n	8004a64 <UART_SetConfig+0x2b8>
 8004a2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a30:	d00c      	beq.n	8004a4c <UART_SetConfig+0x2a0>
 8004a32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a36:	d815      	bhi.n	8004a64 <UART_SetConfig+0x2b8>
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <UART_SetConfig+0x298>
 8004a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a40:	d008      	beq.n	8004a54 <UART_SetConfig+0x2a8>
 8004a42:	e00f      	b.n	8004a64 <UART_SetConfig+0x2b8>
 8004a44:	2300      	movs	r3, #0
 8004a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a4a:	e022      	b.n	8004a92 <UART_SetConfig+0x2e6>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a52:	e01e      	b.n	8004a92 <UART_SetConfig+0x2e6>
 8004a54:	2304      	movs	r3, #4
 8004a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a5a:	e01a      	b.n	8004a92 <UART_SetConfig+0x2e6>
 8004a5c:	2308      	movs	r3, #8
 8004a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a62:	e016      	b.n	8004a92 <UART_SetConfig+0x2e6>
 8004a64:	2310      	movs	r3, #16
 8004a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a6a:	e012      	b.n	8004a92 <UART_SetConfig+0x2e6>
 8004a6c:	efff69f3 	.word	0xefff69f3
 8004a70:	40008000 	.word	0x40008000
 8004a74:	40013800 	.word	0x40013800
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	40004400 	.word	0x40004400
 8004a80:	40004800 	.word	0x40004800
 8004a84:	40004c00 	.word	0x40004c00
 8004a88:	40005000 	.word	0x40005000
 8004a8c:	2310      	movs	r3, #16
 8004a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a9f      	ldr	r2, [pc, #636]	; (8004d14 <UART_SetConfig+0x568>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d17a      	bne.n	8004b92 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d824      	bhi.n	8004aee <UART_SetConfig+0x342>
 8004aa4:	a201      	add	r2, pc, #4	; (adr r2, 8004aac <UART_SetConfig+0x300>)
 8004aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aaa:	bf00      	nop
 8004aac:	08004ad1 	.word	0x08004ad1
 8004ab0:	08004aef 	.word	0x08004aef
 8004ab4:	08004ad9 	.word	0x08004ad9
 8004ab8:	08004aef 	.word	0x08004aef
 8004abc:	08004adf 	.word	0x08004adf
 8004ac0:	08004aef 	.word	0x08004aef
 8004ac4:	08004aef 	.word	0x08004aef
 8004ac8:	08004aef 	.word	0x08004aef
 8004acc:	08004ae7 	.word	0x08004ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ad0:	f7fe fcea 	bl	80034a8 <HAL_RCC_GetPCLK1Freq>
 8004ad4:	61f8      	str	r0, [r7, #28]
        break;
 8004ad6:	e010      	b.n	8004afa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ad8:	4b8f      	ldr	r3, [pc, #572]	; (8004d18 <UART_SetConfig+0x56c>)
 8004ada:	61fb      	str	r3, [r7, #28]
        break;
 8004adc:	e00d      	b.n	8004afa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ade:	f7fe fc4b 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8004ae2:	61f8      	str	r0, [r7, #28]
        break;
 8004ae4:	e009      	b.n	8004afa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aea:	61fb      	str	r3, [r7, #28]
        break;
 8004aec:	e005      	b.n	8004afa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004af8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 80fb 	beq.w	8004cf8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	4613      	mov	r3, r2
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	4413      	add	r3, r2
 8004b0c:	69fa      	ldr	r2, [r7, #28]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d305      	bcc.n	8004b1e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b18:	69fa      	ldr	r2, [r7, #28]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d903      	bls.n	8004b26 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b24:	e0e8      	b.n	8004cf8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	461c      	mov	r4, r3
 8004b2c:	4615      	mov	r5, r2
 8004b2e:	f04f 0200 	mov.w	r2, #0
 8004b32:	f04f 0300 	mov.w	r3, #0
 8004b36:	022b      	lsls	r3, r5, #8
 8004b38:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004b3c:	0222      	lsls	r2, r4, #8
 8004b3e:	68f9      	ldr	r1, [r7, #12]
 8004b40:	6849      	ldr	r1, [r1, #4]
 8004b42:	0849      	lsrs	r1, r1, #1
 8004b44:	2000      	movs	r0, #0
 8004b46:	4688      	mov	r8, r1
 8004b48:	4681      	mov	r9, r0
 8004b4a:	eb12 0a08 	adds.w	sl, r2, r8
 8004b4e:	eb43 0b09 	adc.w	fp, r3, r9
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	603b      	str	r3, [r7, #0]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b60:	4650      	mov	r0, sl
 8004b62:	4659      	mov	r1, fp
 8004b64:	f7fb fb84 	bl	8000270 <__aeabi_uldivmod>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b76:	d308      	bcc.n	8004b8a <UART_SetConfig+0x3de>
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b7e:	d204      	bcs.n	8004b8a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	60da      	str	r2, [r3, #12]
 8004b88:	e0b6      	b.n	8004cf8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b90:	e0b2      	b.n	8004cf8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b9a:	d15e      	bne.n	8004c5a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004b9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d828      	bhi.n	8004bf6 <UART_SetConfig+0x44a>
 8004ba4:	a201      	add	r2, pc, #4	; (adr r2, 8004bac <UART_SetConfig+0x400>)
 8004ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004baa:	bf00      	nop
 8004bac:	08004bd1 	.word	0x08004bd1
 8004bb0:	08004bd9 	.word	0x08004bd9
 8004bb4:	08004be1 	.word	0x08004be1
 8004bb8:	08004bf7 	.word	0x08004bf7
 8004bbc:	08004be7 	.word	0x08004be7
 8004bc0:	08004bf7 	.word	0x08004bf7
 8004bc4:	08004bf7 	.word	0x08004bf7
 8004bc8:	08004bf7 	.word	0x08004bf7
 8004bcc:	08004bef 	.word	0x08004bef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bd0:	f7fe fc6a 	bl	80034a8 <HAL_RCC_GetPCLK1Freq>
 8004bd4:	61f8      	str	r0, [r7, #28]
        break;
 8004bd6:	e014      	b.n	8004c02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bd8:	f7fe fc7c 	bl	80034d4 <HAL_RCC_GetPCLK2Freq>
 8004bdc:	61f8      	str	r0, [r7, #28]
        break;
 8004bde:	e010      	b.n	8004c02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004be0:	4b4d      	ldr	r3, [pc, #308]	; (8004d18 <UART_SetConfig+0x56c>)
 8004be2:	61fb      	str	r3, [r7, #28]
        break;
 8004be4:	e00d      	b.n	8004c02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004be6:	f7fe fbc7 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8004bea:	61f8      	str	r0, [r7, #28]
        break;
 8004bec:	e009      	b.n	8004c02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bf2:	61fb      	str	r3, [r7, #28]
        break;
 8004bf4:	e005      	b.n	8004c02 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d077      	beq.n	8004cf8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	005a      	lsls	r2, r3, #1
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	085b      	lsrs	r3, r3, #1
 8004c12:	441a      	add	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	2b0f      	cmp	r3, #15
 8004c22:	d916      	bls.n	8004c52 <UART_SetConfig+0x4a6>
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c2a:	d212      	bcs.n	8004c52 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	f023 030f 	bic.w	r3, r3, #15
 8004c34:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	085b      	lsrs	r3, r3, #1
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	8afb      	ldrh	r3, [r7, #22]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	8afa      	ldrh	r2, [r7, #22]
 8004c4e:	60da      	str	r2, [r3, #12]
 8004c50:	e052      	b.n	8004cf8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c58:	e04e      	b.n	8004cf8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c5e:	2b08      	cmp	r3, #8
 8004c60:	d827      	bhi.n	8004cb2 <UART_SetConfig+0x506>
 8004c62:	a201      	add	r2, pc, #4	; (adr r2, 8004c68 <UART_SetConfig+0x4bc>)
 8004c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c68:	08004c8d 	.word	0x08004c8d
 8004c6c:	08004c95 	.word	0x08004c95
 8004c70:	08004c9d 	.word	0x08004c9d
 8004c74:	08004cb3 	.word	0x08004cb3
 8004c78:	08004ca3 	.word	0x08004ca3
 8004c7c:	08004cb3 	.word	0x08004cb3
 8004c80:	08004cb3 	.word	0x08004cb3
 8004c84:	08004cb3 	.word	0x08004cb3
 8004c88:	08004cab 	.word	0x08004cab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c8c:	f7fe fc0c 	bl	80034a8 <HAL_RCC_GetPCLK1Freq>
 8004c90:	61f8      	str	r0, [r7, #28]
        break;
 8004c92:	e014      	b.n	8004cbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c94:	f7fe fc1e 	bl	80034d4 <HAL_RCC_GetPCLK2Freq>
 8004c98:	61f8      	str	r0, [r7, #28]
        break;
 8004c9a:	e010      	b.n	8004cbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c9c:	4b1e      	ldr	r3, [pc, #120]	; (8004d18 <UART_SetConfig+0x56c>)
 8004c9e:	61fb      	str	r3, [r7, #28]
        break;
 8004ca0:	e00d      	b.n	8004cbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ca2:	f7fe fb69 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8004ca6:	61f8      	str	r0, [r7, #28]
        break;
 8004ca8:	e009      	b.n	8004cbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cae:	61fb      	str	r3, [r7, #28]
        break;
 8004cb0:	e005      	b.n	8004cbe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004cbc:	bf00      	nop
    }

    if (pclk != 0U)
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d019      	beq.n	8004cf8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	085a      	lsrs	r2, r3, #1
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	441a      	add	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	2b0f      	cmp	r3, #15
 8004cdc:	d909      	bls.n	8004cf2 <UART_SetConfig+0x546>
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce4:	d205      	bcs.n	8004cf2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	60da      	str	r2, [r3, #12]
 8004cf0:	e002      	b.n	8004cf8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004d04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3728      	adds	r7, #40	; 0x28
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d12:	bf00      	nop
 8004d14:	40008000 	.word	0x40008000
 8004d18:	00f42400 	.word	0x00f42400

08004d1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00a      	beq.n	8004d46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00a      	beq.n	8004d8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	f003 0308 	and.w	r3, r3, #8
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00a      	beq.n	8004dac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	f003 0310 	and.w	r3, r3, #16
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00a      	beq.n	8004dce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	f003 0320 	and.w	r3, r3, #32
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d01a      	beq.n	8004e32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e1a:	d10a      	bne.n	8004e32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00a      	beq.n	8004e54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	605a      	str	r2, [r3, #4]
  }
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af02      	add	r7, sp, #8
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e70:	f7fc f898 	bl	8000fa4 <HAL_GetTick>
 8004e74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0308 	and.w	r3, r3, #8
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d10e      	bne.n	8004ea2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f82d 	bl	8004ef2 <UART_WaitOnFlagUntilTimeout>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e023      	b.n	8004eea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	2b04      	cmp	r3, #4
 8004eae:	d10e      	bne.n	8004ece <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f817 	bl	8004ef2 <UART_WaitOnFlagUntilTimeout>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e00d      	b.n	8004eea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b09c      	sub	sp, #112	; 0x70
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	60f8      	str	r0, [r7, #12]
 8004efa:	60b9      	str	r1, [r7, #8]
 8004efc:	603b      	str	r3, [r7, #0]
 8004efe:	4613      	mov	r3, r2
 8004f00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f02:	e0a5      	b.n	8005050 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f0a:	f000 80a1 	beq.w	8005050 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f0e:	f7fc f849 	bl	8000fa4 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d302      	bcc.n	8004f24 <UART_WaitOnFlagUntilTimeout+0x32>
 8004f1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d13e      	bne.n	8004fa2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f2c:	e853 3f00 	ldrex	r3, [r3]
 8004f30:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f38:	667b      	str	r3, [r7, #100]	; 0x64
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f44:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f4a:	e841 2300 	strex	r3, r2, [r1]
 8004f4e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004f50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1e6      	bne.n	8004f24 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3308      	adds	r3, #8
 8004f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f60:	e853 3f00 	ldrex	r3, [r3]
 8004f64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f68:	f023 0301 	bic.w	r3, r3, #1
 8004f6c:	663b      	str	r3, [r7, #96]	; 0x60
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3308      	adds	r3, #8
 8004f74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f76:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f78:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f7e:	e841 2300 	strex	r3, r2, [r1]
 8004f82:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1e5      	bne.n	8004f56 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2220      	movs	r2, #32
 8004f94:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e067      	b.n	8005072 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0304 	and.w	r3, r3, #4
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d04f      	beq.n	8005050 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fbe:	d147      	bne.n	8005050 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fc8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd2:	e853 3f00 	ldrex	r3, [r3]
 8004fd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8004fea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ff0:	e841 2300 	strex	r3, r2, [r1]
 8004ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1e6      	bne.n	8004fca <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	3308      	adds	r3, #8
 8005002:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	e853 3f00 	ldrex	r3, [r3]
 800500a:	613b      	str	r3, [r7, #16]
   return(result);
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	f023 0301 	bic.w	r3, r3, #1
 8005012:	66bb      	str	r3, [r7, #104]	; 0x68
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3308      	adds	r3, #8
 800501a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800501c:	623a      	str	r2, [r7, #32]
 800501e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005020:	69f9      	ldr	r1, [r7, #28]
 8005022:	6a3a      	ldr	r2, [r7, #32]
 8005024:	e841 2300 	strex	r3, r2, [r1]
 8005028:	61bb      	str	r3, [r7, #24]
   return(result);
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1e5      	bne.n	8004ffc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2220      	movs	r2, #32
 8005034:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2220      	movs	r2, #32
 800503a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2220      	movs	r2, #32
 8005040:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e010      	b.n	8005072 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	69da      	ldr	r2, [r3, #28]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	4013      	ands	r3, r2
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	429a      	cmp	r2, r3
 800505e:	bf0c      	ite	eq
 8005060:	2301      	moveq	r3, #1
 8005062:	2300      	movne	r3, #0
 8005064:	b2db      	uxtb	r3, r3
 8005066:	461a      	mov	r2, r3
 8005068:	79fb      	ldrb	r3, [r7, #7]
 800506a:	429a      	cmp	r2, r3
 800506c:	f43f af4a 	beq.w	8004f04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3770      	adds	r7, #112	; 0x70
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800507a:	b480      	push	{r7}
 800507c:	b095      	sub	sp, #84	; 0x54
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508a:	e853 3f00 	ldrex	r3, [r3]
 800508e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005092:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005096:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	461a      	mov	r2, r3
 800509e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a0:	643b      	str	r3, [r7, #64]	; 0x40
 80050a2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050a8:	e841 2300 	strex	r3, r2, [r1]
 80050ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1e6      	bne.n	8005082 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3308      	adds	r3, #8
 80050ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050bc:	6a3b      	ldr	r3, [r7, #32]
 80050be:	e853 3f00 	ldrex	r3, [r3]
 80050c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	f023 0301 	bic.w	r3, r3, #1
 80050ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	3308      	adds	r3, #8
 80050d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050dc:	e841 2300 	strex	r3, r2, [r1]
 80050e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1e5      	bne.n	80050b4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d118      	bne.n	8005122 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	e853 3f00 	ldrex	r3, [r3]
 80050fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	f023 0310 	bic.w	r3, r3, #16
 8005104:	647b      	str	r3, [r7, #68]	; 0x44
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	461a      	mov	r2, r3
 800510c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800510e:	61bb      	str	r3, [r7, #24]
 8005110:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005112:	6979      	ldr	r1, [r7, #20]
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	e841 2300 	strex	r3, r2, [r1]
 800511a:	613b      	str	r3, [r7, #16]
   return(result);
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1e6      	bne.n	80050f0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2220      	movs	r2, #32
 8005126:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005134:	bf00      	nop
 8005136:	3754      	adds	r7, #84	; 0x54
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f7ff fb0e 	bl	8004780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005164:	bf00      	nop
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	e853 3f00 	ldrex	r3, [r3]
 8005180:	60bb      	str	r3, [r7, #8]
   return(result);
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005188:	61fb      	str	r3, [r7, #28]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	461a      	mov	r2, r3
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	61bb      	str	r3, [r7, #24]
 8005194:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005196:	6979      	ldr	r1, [r7, #20]
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	e841 2300 	strex	r3, r2, [r1]
 800519e:	613b      	str	r3, [r7, #16]
   return(result);
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1e6      	bne.n	8005174 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2220      	movs	r2, #32
 80051aa:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7ff fada 	bl	800476c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051b8:	bf00      	nop
 80051ba:	3720      	adds	r7, #32
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <__errno>:
 80051d4:	4b01      	ldr	r3, [pc, #4]	; (80051dc <__errno+0x8>)
 80051d6:	6818      	ldr	r0, [r3, #0]
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	2000000c 	.word	0x2000000c

080051e0 <__libc_init_array>:
 80051e0:	b570      	push	{r4, r5, r6, lr}
 80051e2:	4d0d      	ldr	r5, [pc, #52]	; (8005218 <__libc_init_array+0x38>)
 80051e4:	4c0d      	ldr	r4, [pc, #52]	; (800521c <__libc_init_array+0x3c>)
 80051e6:	1b64      	subs	r4, r4, r5
 80051e8:	10a4      	asrs	r4, r4, #2
 80051ea:	2600      	movs	r6, #0
 80051ec:	42a6      	cmp	r6, r4
 80051ee:	d109      	bne.n	8005204 <__libc_init_array+0x24>
 80051f0:	4d0b      	ldr	r5, [pc, #44]	; (8005220 <__libc_init_array+0x40>)
 80051f2:	4c0c      	ldr	r4, [pc, #48]	; (8005224 <__libc_init_array+0x44>)
 80051f4:	f001 f824 	bl	8006240 <_init>
 80051f8:	1b64      	subs	r4, r4, r5
 80051fa:	10a4      	asrs	r4, r4, #2
 80051fc:	2600      	movs	r6, #0
 80051fe:	42a6      	cmp	r6, r4
 8005200:	d105      	bne.n	800520e <__libc_init_array+0x2e>
 8005202:	bd70      	pop	{r4, r5, r6, pc}
 8005204:	f855 3b04 	ldr.w	r3, [r5], #4
 8005208:	4798      	blx	r3
 800520a:	3601      	adds	r6, #1
 800520c:	e7ee      	b.n	80051ec <__libc_init_array+0xc>
 800520e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005212:	4798      	blx	r3
 8005214:	3601      	adds	r6, #1
 8005216:	e7f2      	b.n	80051fe <__libc_init_array+0x1e>
 8005218:	08006360 	.word	0x08006360
 800521c:	08006360 	.word	0x08006360
 8005220:	08006360 	.word	0x08006360
 8005224:	08006364 	.word	0x08006364

08005228 <memset>:
 8005228:	4402      	add	r2, r0
 800522a:	4603      	mov	r3, r0
 800522c:	4293      	cmp	r3, r2
 800522e:	d100      	bne.n	8005232 <memset+0xa>
 8005230:	4770      	bx	lr
 8005232:	f803 1b01 	strb.w	r1, [r3], #1
 8005236:	e7f9      	b.n	800522c <memset+0x4>

08005238 <iprintf>:
 8005238:	b40f      	push	{r0, r1, r2, r3}
 800523a:	4b0a      	ldr	r3, [pc, #40]	; (8005264 <iprintf+0x2c>)
 800523c:	b513      	push	{r0, r1, r4, lr}
 800523e:	681c      	ldr	r4, [r3, #0]
 8005240:	b124      	cbz	r4, 800524c <iprintf+0x14>
 8005242:	69a3      	ldr	r3, [r4, #24]
 8005244:	b913      	cbnz	r3, 800524c <iprintf+0x14>
 8005246:	4620      	mov	r0, r4
 8005248:	f000 fa5e 	bl	8005708 <__sinit>
 800524c:	ab05      	add	r3, sp, #20
 800524e:	9a04      	ldr	r2, [sp, #16]
 8005250:	68a1      	ldr	r1, [r4, #8]
 8005252:	9301      	str	r3, [sp, #4]
 8005254:	4620      	mov	r0, r4
 8005256:	f000 fc67 	bl	8005b28 <_vfiprintf_r>
 800525a:	b002      	add	sp, #8
 800525c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005260:	b004      	add	sp, #16
 8005262:	4770      	bx	lr
 8005264:	2000000c 	.word	0x2000000c

08005268 <_puts_r>:
 8005268:	b570      	push	{r4, r5, r6, lr}
 800526a:	460e      	mov	r6, r1
 800526c:	4605      	mov	r5, r0
 800526e:	b118      	cbz	r0, 8005278 <_puts_r+0x10>
 8005270:	6983      	ldr	r3, [r0, #24]
 8005272:	b90b      	cbnz	r3, 8005278 <_puts_r+0x10>
 8005274:	f000 fa48 	bl	8005708 <__sinit>
 8005278:	69ab      	ldr	r3, [r5, #24]
 800527a:	68ac      	ldr	r4, [r5, #8]
 800527c:	b913      	cbnz	r3, 8005284 <_puts_r+0x1c>
 800527e:	4628      	mov	r0, r5
 8005280:	f000 fa42 	bl	8005708 <__sinit>
 8005284:	4b2c      	ldr	r3, [pc, #176]	; (8005338 <_puts_r+0xd0>)
 8005286:	429c      	cmp	r4, r3
 8005288:	d120      	bne.n	80052cc <_puts_r+0x64>
 800528a:	686c      	ldr	r4, [r5, #4]
 800528c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800528e:	07db      	lsls	r3, r3, #31
 8005290:	d405      	bmi.n	800529e <_puts_r+0x36>
 8005292:	89a3      	ldrh	r3, [r4, #12]
 8005294:	0598      	lsls	r0, r3, #22
 8005296:	d402      	bmi.n	800529e <_puts_r+0x36>
 8005298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800529a:	f000 fad3 	bl	8005844 <__retarget_lock_acquire_recursive>
 800529e:	89a3      	ldrh	r3, [r4, #12]
 80052a0:	0719      	lsls	r1, r3, #28
 80052a2:	d51d      	bpl.n	80052e0 <_puts_r+0x78>
 80052a4:	6923      	ldr	r3, [r4, #16]
 80052a6:	b1db      	cbz	r3, 80052e0 <_puts_r+0x78>
 80052a8:	3e01      	subs	r6, #1
 80052aa:	68a3      	ldr	r3, [r4, #8]
 80052ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80052b0:	3b01      	subs	r3, #1
 80052b2:	60a3      	str	r3, [r4, #8]
 80052b4:	bb39      	cbnz	r1, 8005306 <_puts_r+0x9e>
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	da38      	bge.n	800532c <_puts_r+0xc4>
 80052ba:	4622      	mov	r2, r4
 80052bc:	210a      	movs	r1, #10
 80052be:	4628      	mov	r0, r5
 80052c0:	f000 f848 	bl	8005354 <__swbuf_r>
 80052c4:	3001      	adds	r0, #1
 80052c6:	d011      	beq.n	80052ec <_puts_r+0x84>
 80052c8:	250a      	movs	r5, #10
 80052ca:	e011      	b.n	80052f0 <_puts_r+0x88>
 80052cc:	4b1b      	ldr	r3, [pc, #108]	; (800533c <_puts_r+0xd4>)
 80052ce:	429c      	cmp	r4, r3
 80052d0:	d101      	bne.n	80052d6 <_puts_r+0x6e>
 80052d2:	68ac      	ldr	r4, [r5, #8]
 80052d4:	e7da      	b.n	800528c <_puts_r+0x24>
 80052d6:	4b1a      	ldr	r3, [pc, #104]	; (8005340 <_puts_r+0xd8>)
 80052d8:	429c      	cmp	r4, r3
 80052da:	bf08      	it	eq
 80052dc:	68ec      	ldreq	r4, [r5, #12]
 80052de:	e7d5      	b.n	800528c <_puts_r+0x24>
 80052e0:	4621      	mov	r1, r4
 80052e2:	4628      	mov	r0, r5
 80052e4:	f000 f888 	bl	80053f8 <__swsetup_r>
 80052e8:	2800      	cmp	r0, #0
 80052ea:	d0dd      	beq.n	80052a8 <_puts_r+0x40>
 80052ec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80052f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052f2:	07da      	lsls	r2, r3, #31
 80052f4:	d405      	bmi.n	8005302 <_puts_r+0x9a>
 80052f6:	89a3      	ldrh	r3, [r4, #12]
 80052f8:	059b      	lsls	r3, r3, #22
 80052fa:	d402      	bmi.n	8005302 <_puts_r+0x9a>
 80052fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052fe:	f000 faa2 	bl	8005846 <__retarget_lock_release_recursive>
 8005302:	4628      	mov	r0, r5
 8005304:	bd70      	pop	{r4, r5, r6, pc}
 8005306:	2b00      	cmp	r3, #0
 8005308:	da04      	bge.n	8005314 <_puts_r+0xac>
 800530a:	69a2      	ldr	r2, [r4, #24]
 800530c:	429a      	cmp	r2, r3
 800530e:	dc06      	bgt.n	800531e <_puts_r+0xb6>
 8005310:	290a      	cmp	r1, #10
 8005312:	d004      	beq.n	800531e <_puts_r+0xb6>
 8005314:	6823      	ldr	r3, [r4, #0]
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	6022      	str	r2, [r4, #0]
 800531a:	7019      	strb	r1, [r3, #0]
 800531c:	e7c5      	b.n	80052aa <_puts_r+0x42>
 800531e:	4622      	mov	r2, r4
 8005320:	4628      	mov	r0, r5
 8005322:	f000 f817 	bl	8005354 <__swbuf_r>
 8005326:	3001      	adds	r0, #1
 8005328:	d1bf      	bne.n	80052aa <_puts_r+0x42>
 800532a:	e7df      	b.n	80052ec <_puts_r+0x84>
 800532c:	6823      	ldr	r3, [r4, #0]
 800532e:	250a      	movs	r5, #10
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	6022      	str	r2, [r4, #0]
 8005334:	701d      	strb	r5, [r3, #0]
 8005336:	e7db      	b.n	80052f0 <_puts_r+0x88>
 8005338:	080062e4 	.word	0x080062e4
 800533c:	08006304 	.word	0x08006304
 8005340:	080062c4 	.word	0x080062c4

08005344 <puts>:
 8005344:	4b02      	ldr	r3, [pc, #8]	; (8005350 <puts+0xc>)
 8005346:	4601      	mov	r1, r0
 8005348:	6818      	ldr	r0, [r3, #0]
 800534a:	f7ff bf8d 	b.w	8005268 <_puts_r>
 800534e:	bf00      	nop
 8005350:	2000000c 	.word	0x2000000c

08005354 <__swbuf_r>:
 8005354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005356:	460e      	mov	r6, r1
 8005358:	4614      	mov	r4, r2
 800535a:	4605      	mov	r5, r0
 800535c:	b118      	cbz	r0, 8005366 <__swbuf_r+0x12>
 800535e:	6983      	ldr	r3, [r0, #24]
 8005360:	b90b      	cbnz	r3, 8005366 <__swbuf_r+0x12>
 8005362:	f000 f9d1 	bl	8005708 <__sinit>
 8005366:	4b21      	ldr	r3, [pc, #132]	; (80053ec <__swbuf_r+0x98>)
 8005368:	429c      	cmp	r4, r3
 800536a:	d12b      	bne.n	80053c4 <__swbuf_r+0x70>
 800536c:	686c      	ldr	r4, [r5, #4]
 800536e:	69a3      	ldr	r3, [r4, #24]
 8005370:	60a3      	str	r3, [r4, #8]
 8005372:	89a3      	ldrh	r3, [r4, #12]
 8005374:	071a      	lsls	r2, r3, #28
 8005376:	d52f      	bpl.n	80053d8 <__swbuf_r+0x84>
 8005378:	6923      	ldr	r3, [r4, #16]
 800537a:	b36b      	cbz	r3, 80053d8 <__swbuf_r+0x84>
 800537c:	6923      	ldr	r3, [r4, #16]
 800537e:	6820      	ldr	r0, [r4, #0]
 8005380:	1ac0      	subs	r0, r0, r3
 8005382:	6963      	ldr	r3, [r4, #20]
 8005384:	b2f6      	uxtb	r6, r6
 8005386:	4283      	cmp	r3, r0
 8005388:	4637      	mov	r7, r6
 800538a:	dc04      	bgt.n	8005396 <__swbuf_r+0x42>
 800538c:	4621      	mov	r1, r4
 800538e:	4628      	mov	r0, r5
 8005390:	f000 f926 	bl	80055e0 <_fflush_r>
 8005394:	bb30      	cbnz	r0, 80053e4 <__swbuf_r+0x90>
 8005396:	68a3      	ldr	r3, [r4, #8]
 8005398:	3b01      	subs	r3, #1
 800539a:	60a3      	str	r3, [r4, #8]
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	1c5a      	adds	r2, r3, #1
 80053a0:	6022      	str	r2, [r4, #0]
 80053a2:	701e      	strb	r6, [r3, #0]
 80053a4:	6963      	ldr	r3, [r4, #20]
 80053a6:	3001      	adds	r0, #1
 80053a8:	4283      	cmp	r3, r0
 80053aa:	d004      	beq.n	80053b6 <__swbuf_r+0x62>
 80053ac:	89a3      	ldrh	r3, [r4, #12]
 80053ae:	07db      	lsls	r3, r3, #31
 80053b0:	d506      	bpl.n	80053c0 <__swbuf_r+0x6c>
 80053b2:	2e0a      	cmp	r6, #10
 80053b4:	d104      	bne.n	80053c0 <__swbuf_r+0x6c>
 80053b6:	4621      	mov	r1, r4
 80053b8:	4628      	mov	r0, r5
 80053ba:	f000 f911 	bl	80055e0 <_fflush_r>
 80053be:	b988      	cbnz	r0, 80053e4 <__swbuf_r+0x90>
 80053c0:	4638      	mov	r0, r7
 80053c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053c4:	4b0a      	ldr	r3, [pc, #40]	; (80053f0 <__swbuf_r+0x9c>)
 80053c6:	429c      	cmp	r4, r3
 80053c8:	d101      	bne.n	80053ce <__swbuf_r+0x7a>
 80053ca:	68ac      	ldr	r4, [r5, #8]
 80053cc:	e7cf      	b.n	800536e <__swbuf_r+0x1a>
 80053ce:	4b09      	ldr	r3, [pc, #36]	; (80053f4 <__swbuf_r+0xa0>)
 80053d0:	429c      	cmp	r4, r3
 80053d2:	bf08      	it	eq
 80053d4:	68ec      	ldreq	r4, [r5, #12]
 80053d6:	e7ca      	b.n	800536e <__swbuf_r+0x1a>
 80053d8:	4621      	mov	r1, r4
 80053da:	4628      	mov	r0, r5
 80053dc:	f000 f80c 	bl	80053f8 <__swsetup_r>
 80053e0:	2800      	cmp	r0, #0
 80053e2:	d0cb      	beq.n	800537c <__swbuf_r+0x28>
 80053e4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80053e8:	e7ea      	b.n	80053c0 <__swbuf_r+0x6c>
 80053ea:	bf00      	nop
 80053ec:	080062e4 	.word	0x080062e4
 80053f0:	08006304 	.word	0x08006304
 80053f4:	080062c4 	.word	0x080062c4

080053f8 <__swsetup_r>:
 80053f8:	4b32      	ldr	r3, [pc, #200]	; (80054c4 <__swsetup_r+0xcc>)
 80053fa:	b570      	push	{r4, r5, r6, lr}
 80053fc:	681d      	ldr	r5, [r3, #0]
 80053fe:	4606      	mov	r6, r0
 8005400:	460c      	mov	r4, r1
 8005402:	b125      	cbz	r5, 800540e <__swsetup_r+0x16>
 8005404:	69ab      	ldr	r3, [r5, #24]
 8005406:	b913      	cbnz	r3, 800540e <__swsetup_r+0x16>
 8005408:	4628      	mov	r0, r5
 800540a:	f000 f97d 	bl	8005708 <__sinit>
 800540e:	4b2e      	ldr	r3, [pc, #184]	; (80054c8 <__swsetup_r+0xd0>)
 8005410:	429c      	cmp	r4, r3
 8005412:	d10f      	bne.n	8005434 <__swsetup_r+0x3c>
 8005414:	686c      	ldr	r4, [r5, #4]
 8005416:	89a3      	ldrh	r3, [r4, #12]
 8005418:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800541c:	0719      	lsls	r1, r3, #28
 800541e:	d42c      	bmi.n	800547a <__swsetup_r+0x82>
 8005420:	06dd      	lsls	r5, r3, #27
 8005422:	d411      	bmi.n	8005448 <__swsetup_r+0x50>
 8005424:	2309      	movs	r3, #9
 8005426:	6033      	str	r3, [r6, #0]
 8005428:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800542c:	81a3      	strh	r3, [r4, #12]
 800542e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005432:	e03e      	b.n	80054b2 <__swsetup_r+0xba>
 8005434:	4b25      	ldr	r3, [pc, #148]	; (80054cc <__swsetup_r+0xd4>)
 8005436:	429c      	cmp	r4, r3
 8005438:	d101      	bne.n	800543e <__swsetup_r+0x46>
 800543a:	68ac      	ldr	r4, [r5, #8]
 800543c:	e7eb      	b.n	8005416 <__swsetup_r+0x1e>
 800543e:	4b24      	ldr	r3, [pc, #144]	; (80054d0 <__swsetup_r+0xd8>)
 8005440:	429c      	cmp	r4, r3
 8005442:	bf08      	it	eq
 8005444:	68ec      	ldreq	r4, [r5, #12]
 8005446:	e7e6      	b.n	8005416 <__swsetup_r+0x1e>
 8005448:	0758      	lsls	r0, r3, #29
 800544a:	d512      	bpl.n	8005472 <__swsetup_r+0x7a>
 800544c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800544e:	b141      	cbz	r1, 8005462 <__swsetup_r+0x6a>
 8005450:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005454:	4299      	cmp	r1, r3
 8005456:	d002      	beq.n	800545e <__swsetup_r+0x66>
 8005458:	4630      	mov	r0, r6
 800545a:	f000 fa5b 	bl	8005914 <_free_r>
 800545e:	2300      	movs	r3, #0
 8005460:	6363      	str	r3, [r4, #52]	; 0x34
 8005462:	89a3      	ldrh	r3, [r4, #12]
 8005464:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005468:	81a3      	strh	r3, [r4, #12]
 800546a:	2300      	movs	r3, #0
 800546c:	6063      	str	r3, [r4, #4]
 800546e:	6923      	ldr	r3, [r4, #16]
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	89a3      	ldrh	r3, [r4, #12]
 8005474:	f043 0308 	orr.w	r3, r3, #8
 8005478:	81a3      	strh	r3, [r4, #12]
 800547a:	6923      	ldr	r3, [r4, #16]
 800547c:	b94b      	cbnz	r3, 8005492 <__swsetup_r+0x9a>
 800547e:	89a3      	ldrh	r3, [r4, #12]
 8005480:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005488:	d003      	beq.n	8005492 <__swsetup_r+0x9a>
 800548a:	4621      	mov	r1, r4
 800548c:	4630      	mov	r0, r6
 800548e:	f000 fa01 	bl	8005894 <__smakebuf_r>
 8005492:	89a0      	ldrh	r0, [r4, #12]
 8005494:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005498:	f010 0301 	ands.w	r3, r0, #1
 800549c:	d00a      	beq.n	80054b4 <__swsetup_r+0xbc>
 800549e:	2300      	movs	r3, #0
 80054a0:	60a3      	str	r3, [r4, #8]
 80054a2:	6963      	ldr	r3, [r4, #20]
 80054a4:	425b      	negs	r3, r3
 80054a6:	61a3      	str	r3, [r4, #24]
 80054a8:	6923      	ldr	r3, [r4, #16]
 80054aa:	b943      	cbnz	r3, 80054be <__swsetup_r+0xc6>
 80054ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80054b0:	d1ba      	bne.n	8005428 <__swsetup_r+0x30>
 80054b2:	bd70      	pop	{r4, r5, r6, pc}
 80054b4:	0781      	lsls	r1, r0, #30
 80054b6:	bf58      	it	pl
 80054b8:	6963      	ldrpl	r3, [r4, #20]
 80054ba:	60a3      	str	r3, [r4, #8]
 80054bc:	e7f4      	b.n	80054a8 <__swsetup_r+0xb0>
 80054be:	2000      	movs	r0, #0
 80054c0:	e7f7      	b.n	80054b2 <__swsetup_r+0xba>
 80054c2:	bf00      	nop
 80054c4:	2000000c 	.word	0x2000000c
 80054c8:	080062e4 	.word	0x080062e4
 80054cc:	08006304 	.word	0x08006304
 80054d0:	080062c4 	.word	0x080062c4

080054d4 <__sflush_r>:
 80054d4:	898a      	ldrh	r2, [r1, #12]
 80054d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054da:	4605      	mov	r5, r0
 80054dc:	0710      	lsls	r0, r2, #28
 80054de:	460c      	mov	r4, r1
 80054e0:	d458      	bmi.n	8005594 <__sflush_r+0xc0>
 80054e2:	684b      	ldr	r3, [r1, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	dc05      	bgt.n	80054f4 <__sflush_r+0x20>
 80054e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	dc02      	bgt.n	80054f4 <__sflush_r+0x20>
 80054ee:	2000      	movs	r0, #0
 80054f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054f6:	2e00      	cmp	r6, #0
 80054f8:	d0f9      	beq.n	80054ee <__sflush_r+0x1a>
 80054fa:	2300      	movs	r3, #0
 80054fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005500:	682f      	ldr	r7, [r5, #0]
 8005502:	602b      	str	r3, [r5, #0]
 8005504:	d032      	beq.n	800556c <__sflush_r+0x98>
 8005506:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005508:	89a3      	ldrh	r3, [r4, #12]
 800550a:	075a      	lsls	r2, r3, #29
 800550c:	d505      	bpl.n	800551a <__sflush_r+0x46>
 800550e:	6863      	ldr	r3, [r4, #4]
 8005510:	1ac0      	subs	r0, r0, r3
 8005512:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005514:	b10b      	cbz	r3, 800551a <__sflush_r+0x46>
 8005516:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005518:	1ac0      	subs	r0, r0, r3
 800551a:	2300      	movs	r3, #0
 800551c:	4602      	mov	r2, r0
 800551e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005520:	6a21      	ldr	r1, [r4, #32]
 8005522:	4628      	mov	r0, r5
 8005524:	47b0      	blx	r6
 8005526:	1c43      	adds	r3, r0, #1
 8005528:	89a3      	ldrh	r3, [r4, #12]
 800552a:	d106      	bne.n	800553a <__sflush_r+0x66>
 800552c:	6829      	ldr	r1, [r5, #0]
 800552e:	291d      	cmp	r1, #29
 8005530:	d82c      	bhi.n	800558c <__sflush_r+0xb8>
 8005532:	4a2a      	ldr	r2, [pc, #168]	; (80055dc <__sflush_r+0x108>)
 8005534:	40ca      	lsrs	r2, r1
 8005536:	07d6      	lsls	r6, r2, #31
 8005538:	d528      	bpl.n	800558c <__sflush_r+0xb8>
 800553a:	2200      	movs	r2, #0
 800553c:	6062      	str	r2, [r4, #4]
 800553e:	04d9      	lsls	r1, r3, #19
 8005540:	6922      	ldr	r2, [r4, #16]
 8005542:	6022      	str	r2, [r4, #0]
 8005544:	d504      	bpl.n	8005550 <__sflush_r+0x7c>
 8005546:	1c42      	adds	r2, r0, #1
 8005548:	d101      	bne.n	800554e <__sflush_r+0x7a>
 800554a:	682b      	ldr	r3, [r5, #0]
 800554c:	b903      	cbnz	r3, 8005550 <__sflush_r+0x7c>
 800554e:	6560      	str	r0, [r4, #84]	; 0x54
 8005550:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005552:	602f      	str	r7, [r5, #0]
 8005554:	2900      	cmp	r1, #0
 8005556:	d0ca      	beq.n	80054ee <__sflush_r+0x1a>
 8005558:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800555c:	4299      	cmp	r1, r3
 800555e:	d002      	beq.n	8005566 <__sflush_r+0x92>
 8005560:	4628      	mov	r0, r5
 8005562:	f000 f9d7 	bl	8005914 <_free_r>
 8005566:	2000      	movs	r0, #0
 8005568:	6360      	str	r0, [r4, #52]	; 0x34
 800556a:	e7c1      	b.n	80054f0 <__sflush_r+0x1c>
 800556c:	6a21      	ldr	r1, [r4, #32]
 800556e:	2301      	movs	r3, #1
 8005570:	4628      	mov	r0, r5
 8005572:	47b0      	blx	r6
 8005574:	1c41      	adds	r1, r0, #1
 8005576:	d1c7      	bne.n	8005508 <__sflush_r+0x34>
 8005578:	682b      	ldr	r3, [r5, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d0c4      	beq.n	8005508 <__sflush_r+0x34>
 800557e:	2b1d      	cmp	r3, #29
 8005580:	d001      	beq.n	8005586 <__sflush_r+0xb2>
 8005582:	2b16      	cmp	r3, #22
 8005584:	d101      	bne.n	800558a <__sflush_r+0xb6>
 8005586:	602f      	str	r7, [r5, #0]
 8005588:	e7b1      	b.n	80054ee <__sflush_r+0x1a>
 800558a:	89a3      	ldrh	r3, [r4, #12]
 800558c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005590:	81a3      	strh	r3, [r4, #12]
 8005592:	e7ad      	b.n	80054f0 <__sflush_r+0x1c>
 8005594:	690f      	ldr	r7, [r1, #16]
 8005596:	2f00      	cmp	r7, #0
 8005598:	d0a9      	beq.n	80054ee <__sflush_r+0x1a>
 800559a:	0793      	lsls	r3, r2, #30
 800559c:	680e      	ldr	r6, [r1, #0]
 800559e:	bf08      	it	eq
 80055a0:	694b      	ldreq	r3, [r1, #20]
 80055a2:	600f      	str	r7, [r1, #0]
 80055a4:	bf18      	it	ne
 80055a6:	2300      	movne	r3, #0
 80055a8:	eba6 0807 	sub.w	r8, r6, r7
 80055ac:	608b      	str	r3, [r1, #8]
 80055ae:	f1b8 0f00 	cmp.w	r8, #0
 80055b2:	dd9c      	ble.n	80054ee <__sflush_r+0x1a>
 80055b4:	6a21      	ldr	r1, [r4, #32]
 80055b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80055b8:	4643      	mov	r3, r8
 80055ba:	463a      	mov	r2, r7
 80055bc:	4628      	mov	r0, r5
 80055be:	47b0      	blx	r6
 80055c0:	2800      	cmp	r0, #0
 80055c2:	dc06      	bgt.n	80055d2 <__sflush_r+0xfe>
 80055c4:	89a3      	ldrh	r3, [r4, #12]
 80055c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055ca:	81a3      	strh	r3, [r4, #12]
 80055cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055d0:	e78e      	b.n	80054f0 <__sflush_r+0x1c>
 80055d2:	4407      	add	r7, r0
 80055d4:	eba8 0800 	sub.w	r8, r8, r0
 80055d8:	e7e9      	b.n	80055ae <__sflush_r+0xda>
 80055da:	bf00      	nop
 80055dc:	20400001 	.word	0x20400001

080055e0 <_fflush_r>:
 80055e0:	b538      	push	{r3, r4, r5, lr}
 80055e2:	690b      	ldr	r3, [r1, #16]
 80055e4:	4605      	mov	r5, r0
 80055e6:	460c      	mov	r4, r1
 80055e8:	b913      	cbnz	r3, 80055f0 <_fflush_r+0x10>
 80055ea:	2500      	movs	r5, #0
 80055ec:	4628      	mov	r0, r5
 80055ee:	bd38      	pop	{r3, r4, r5, pc}
 80055f0:	b118      	cbz	r0, 80055fa <_fflush_r+0x1a>
 80055f2:	6983      	ldr	r3, [r0, #24]
 80055f4:	b90b      	cbnz	r3, 80055fa <_fflush_r+0x1a>
 80055f6:	f000 f887 	bl	8005708 <__sinit>
 80055fa:	4b14      	ldr	r3, [pc, #80]	; (800564c <_fflush_r+0x6c>)
 80055fc:	429c      	cmp	r4, r3
 80055fe:	d11b      	bne.n	8005638 <_fflush_r+0x58>
 8005600:	686c      	ldr	r4, [r5, #4]
 8005602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0ef      	beq.n	80055ea <_fflush_r+0xa>
 800560a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800560c:	07d0      	lsls	r0, r2, #31
 800560e:	d404      	bmi.n	800561a <_fflush_r+0x3a>
 8005610:	0599      	lsls	r1, r3, #22
 8005612:	d402      	bmi.n	800561a <_fflush_r+0x3a>
 8005614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005616:	f000 f915 	bl	8005844 <__retarget_lock_acquire_recursive>
 800561a:	4628      	mov	r0, r5
 800561c:	4621      	mov	r1, r4
 800561e:	f7ff ff59 	bl	80054d4 <__sflush_r>
 8005622:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005624:	07da      	lsls	r2, r3, #31
 8005626:	4605      	mov	r5, r0
 8005628:	d4e0      	bmi.n	80055ec <_fflush_r+0xc>
 800562a:	89a3      	ldrh	r3, [r4, #12]
 800562c:	059b      	lsls	r3, r3, #22
 800562e:	d4dd      	bmi.n	80055ec <_fflush_r+0xc>
 8005630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005632:	f000 f908 	bl	8005846 <__retarget_lock_release_recursive>
 8005636:	e7d9      	b.n	80055ec <_fflush_r+0xc>
 8005638:	4b05      	ldr	r3, [pc, #20]	; (8005650 <_fflush_r+0x70>)
 800563a:	429c      	cmp	r4, r3
 800563c:	d101      	bne.n	8005642 <_fflush_r+0x62>
 800563e:	68ac      	ldr	r4, [r5, #8]
 8005640:	e7df      	b.n	8005602 <_fflush_r+0x22>
 8005642:	4b04      	ldr	r3, [pc, #16]	; (8005654 <_fflush_r+0x74>)
 8005644:	429c      	cmp	r4, r3
 8005646:	bf08      	it	eq
 8005648:	68ec      	ldreq	r4, [r5, #12]
 800564a:	e7da      	b.n	8005602 <_fflush_r+0x22>
 800564c:	080062e4 	.word	0x080062e4
 8005650:	08006304 	.word	0x08006304
 8005654:	080062c4 	.word	0x080062c4

08005658 <std>:
 8005658:	2300      	movs	r3, #0
 800565a:	b510      	push	{r4, lr}
 800565c:	4604      	mov	r4, r0
 800565e:	e9c0 3300 	strd	r3, r3, [r0]
 8005662:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005666:	6083      	str	r3, [r0, #8]
 8005668:	8181      	strh	r1, [r0, #12]
 800566a:	6643      	str	r3, [r0, #100]	; 0x64
 800566c:	81c2      	strh	r2, [r0, #14]
 800566e:	6183      	str	r3, [r0, #24]
 8005670:	4619      	mov	r1, r3
 8005672:	2208      	movs	r2, #8
 8005674:	305c      	adds	r0, #92	; 0x5c
 8005676:	f7ff fdd7 	bl	8005228 <memset>
 800567a:	4b05      	ldr	r3, [pc, #20]	; (8005690 <std+0x38>)
 800567c:	6263      	str	r3, [r4, #36]	; 0x24
 800567e:	4b05      	ldr	r3, [pc, #20]	; (8005694 <std+0x3c>)
 8005680:	62a3      	str	r3, [r4, #40]	; 0x28
 8005682:	4b05      	ldr	r3, [pc, #20]	; (8005698 <std+0x40>)
 8005684:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005686:	4b05      	ldr	r3, [pc, #20]	; (800569c <std+0x44>)
 8005688:	6224      	str	r4, [r4, #32]
 800568a:	6323      	str	r3, [r4, #48]	; 0x30
 800568c:	bd10      	pop	{r4, pc}
 800568e:	bf00      	nop
 8005690:	080060d1 	.word	0x080060d1
 8005694:	080060f3 	.word	0x080060f3
 8005698:	0800612b 	.word	0x0800612b
 800569c:	0800614f 	.word	0x0800614f

080056a0 <_cleanup_r>:
 80056a0:	4901      	ldr	r1, [pc, #4]	; (80056a8 <_cleanup_r+0x8>)
 80056a2:	f000 b8af 	b.w	8005804 <_fwalk_reent>
 80056a6:	bf00      	nop
 80056a8:	080055e1 	.word	0x080055e1

080056ac <__sfmoreglue>:
 80056ac:	b570      	push	{r4, r5, r6, lr}
 80056ae:	2268      	movs	r2, #104	; 0x68
 80056b0:	1e4d      	subs	r5, r1, #1
 80056b2:	4355      	muls	r5, r2
 80056b4:	460e      	mov	r6, r1
 80056b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80056ba:	f000 f997 	bl	80059ec <_malloc_r>
 80056be:	4604      	mov	r4, r0
 80056c0:	b140      	cbz	r0, 80056d4 <__sfmoreglue+0x28>
 80056c2:	2100      	movs	r1, #0
 80056c4:	e9c0 1600 	strd	r1, r6, [r0]
 80056c8:	300c      	adds	r0, #12
 80056ca:	60a0      	str	r0, [r4, #8]
 80056cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80056d0:	f7ff fdaa 	bl	8005228 <memset>
 80056d4:	4620      	mov	r0, r4
 80056d6:	bd70      	pop	{r4, r5, r6, pc}

080056d8 <__sfp_lock_acquire>:
 80056d8:	4801      	ldr	r0, [pc, #4]	; (80056e0 <__sfp_lock_acquire+0x8>)
 80056da:	f000 b8b3 	b.w	8005844 <__retarget_lock_acquire_recursive>
 80056de:	bf00      	nop
 80056e0:	20000249 	.word	0x20000249

080056e4 <__sfp_lock_release>:
 80056e4:	4801      	ldr	r0, [pc, #4]	; (80056ec <__sfp_lock_release+0x8>)
 80056e6:	f000 b8ae 	b.w	8005846 <__retarget_lock_release_recursive>
 80056ea:	bf00      	nop
 80056ec:	20000249 	.word	0x20000249

080056f0 <__sinit_lock_acquire>:
 80056f0:	4801      	ldr	r0, [pc, #4]	; (80056f8 <__sinit_lock_acquire+0x8>)
 80056f2:	f000 b8a7 	b.w	8005844 <__retarget_lock_acquire_recursive>
 80056f6:	bf00      	nop
 80056f8:	2000024a 	.word	0x2000024a

080056fc <__sinit_lock_release>:
 80056fc:	4801      	ldr	r0, [pc, #4]	; (8005704 <__sinit_lock_release+0x8>)
 80056fe:	f000 b8a2 	b.w	8005846 <__retarget_lock_release_recursive>
 8005702:	bf00      	nop
 8005704:	2000024a 	.word	0x2000024a

08005708 <__sinit>:
 8005708:	b510      	push	{r4, lr}
 800570a:	4604      	mov	r4, r0
 800570c:	f7ff fff0 	bl	80056f0 <__sinit_lock_acquire>
 8005710:	69a3      	ldr	r3, [r4, #24]
 8005712:	b11b      	cbz	r3, 800571c <__sinit+0x14>
 8005714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005718:	f7ff bff0 	b.w	80056fc <__sinit_lock_release>
 800571c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005720:	6523      	str	r3, [r4, #80]	; 0x50
 8005722:	4b13      	ldr	r3, [pc, #76]	; (8005770 <__sinit+0x68>)
 8005724:	4a13      	ldr	r2, [pc, #76]	; (8005774 <__sinit+0x6c>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	62a2      	str	r2, [r4, #40]	; 0x28
 800572a:	42a3      	cmp	r3, r4
 800572c:	bf04      	itt	eq
 800572e:	2301      	moveq	r3, #1
 8005730:	61a3      	streq	r3, [r4, #24]
 8005732:	4620      	mov	r0, r4
 8005734:	f000 f820 	bl	8005778 <__sfp>
 8005738:	6060      	str	r0, [r4, #4]
 800573a:	4620      	mov	r0, r4
 800573c:	f000 f81c 	bl	8005778 <__sfp>
 8005740:	60a0      	str	r0, [r4, #8]
 8005742:	4620      	mov	r0, r4
 8005744:	f000 f818 	bl	8005778 <__sfp>
 8005748:	2200      	movs	r2, #0
 800574a:	60e0      	str	r0, [r4, #12]
 800574c:	2104      	movs	r1, #4
 800574e:	6860      	ldr	r0, [r4, #4]
 8005750:	f7ff ff82 	bl	8005658 <std>
 8005754:	68a0      	ldr	r0, [r4, #8]
 8005756:	2201      	movs	r2, #1
 8005758:	2109      	movs	r1, #9
 800575a:	f7ff ff7d 	bl	8005658 <std>
 800575e:	68e0      	ldr	r0, [r4, #12]
 8005760:	2202      	movs	r2, #2
 8005762:	2112      	movs	r1, #18
 8005764:	f7ff ff78 	bl	8005658 <std>
 8005768:	2301      	movs	r3, #1
 800576a:	61a3      	str	r3, [r4, #24]
 800576c:	e7d2      	b.n	8005714 <__sinit+0xc>
 800576e:	bf00      	nop
 8005770:	080062c0 	.word	0x080062c0
 8005774:	080056a1 	.word	0x080056a1

08005778 <__sfp>:
 8005778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800577a:	4607      	mov	r7, r0
 800577c:	f7ff ffac 	bl	80056d8 <__sfp_lock_acquire>
 8005780:	4b1e      	ldr	r3, [pc, #120]	; (80057fc <__sfp+0x84>)
 8005782:	681e      	ldr	r6, [r3, #0]
 8005784:	69b3      	ldr	r3, [r6, #24]
 8005786:	b913      	cbnz	r3, 800578e <__sfp+0x16>
 8005788:	4630      	mov	r0, r6
 800578a:	f7ff ffbd 	bl	8005708 <__sinit>
 800578e:	3648      	adds	r6, #72	; 0x48
 8005790:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005794:	3b01      	subs	r3, #1
 8005796:	d503      	bpl.n	80057a0 <__sfp+0x28>
 8005798:	6833      	ldr	r3, [r6, #0]
 800579a:	b30b      	cbz	r3, 80057e0 <__sfp+0x68>
 800579c:	6836      	ldr	r6, [r6, #0]
 800579e:	e7f7      	b.n	8005790 <__sfp+0x18>
 80057a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80057a4:	b9d5      	cbnz	r5, 80057dc <__sfp+0x64>
 80057a6:	4b16      	ldr	r3, [pc, #88]	; (8005800 <__sfp+0x88>)
 80057a8:	60e3      	str	r3, [r4, #12]
 80057aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80057ae:	6665      	str	r5, [r4, #100]	; 0x64
 80057b0:	f000 f847 	bl	8005842 <__retarget_lock_init_recursive>
 80057b4:	f7ff ff96 	bl	80056e4 <__sfp_lock_release>
 80057b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80057bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80057c0:	6025      	str	r5, [r4, #0]
 80057c2:	61a5      	str	r5, [r4, #24]
 80057c4:	2208      	movs	r2, #8
 80057c6:	4629      	mov	r1, r5
 80057c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80057cc:	f7ff fd2c 	bl	8005228 <memset>
 80057d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80057d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80057d8:	4620      	mov	r0, r4
 80057da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057dc:	3468      	adds	r4, #104	; 0x68
 80057de:	e7d9      	b.n	8005794 <__sfp+0x1c>
 80057e0:	2104      	movs	r1, #4
 80057e2:	4638      	mov	r0, r7
 80057e4:	f7ff ff62 	bl	80056ac <__sfmoreglue>
 80057e8:	4604      	mov	r4, r0
 80057ea:	6030      	str	r0, [r6, #0]
 80057ec:	2800      	cmp	r0, #0
 80057ee:	d1d5      	bne.n	800579c <__sfp+0x24>
 80057f0:	f7ff ff78 	bl	80056e4 <__sfp_lock_release>
 80057f4:	230c      	movs	r3, #12
 80057f6:	603b      	str	r3, [r7, #0]
 80057f8:	e7ee      	b.n	80057d8 <__sfp+0x60>
 80057fa:	bf00      	nop
 80057fc:	080062c0 	.word	0x080062c0
 8005800:	ffff0001 	.word	0xffff0001

08005804 <_fwalk_reent>:
 8005804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005808:	4606      	mov	r6, r0
 800580a:	4688      	mov	r8, r1
 800580c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005810:	2700      	movs	r7, #0
 8005812:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005816:	f1b9 0901 	subs.w	r9, r9, #1
 800581a:	d505      	bpl.n	8005828 <_fwalk_reent+0x24>
 800581c:	6824      	ldr	r4, [r4, #0]
 800581e:	2c00      	cmp	r4, #0
 8005820:	d1f7      	bne.n	8005812 <_fwalk_reent+0xe>
 8005822:	4638      	mov	r0, r7
 8005824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005828:	89ab      	ldrh	r3, [r5, #12]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d907      	bls.n	800583e <_fwalk_reent+0x3a>
 800582e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005832:	3301      	adds	r3, #1
 8005834:	d003      	beq.n	800583e <_fwalk_reent+0x3a>
 8005836:	4629      	mov	r1, r5
 8005838:	4630      	mov	r0, r6
 800583a:	47c0      	blx	r8
 800583c:	4307      	orrs	r7, r0
 800583e:	3568      	adds	r5, #104	; 0x68
 8005840:	e7e9      	b.n	8005816 <_fwalk_reent+0x12>

08005842 <__retarget_lock_init_recursive>:
 8005842:	4770      	bx	lr

08005844 <__retarget_lock_acquire_recursive>:
 8005844:	4770      	bx	lr

08005846 <__retarget_lock_release_recursive>:
 8005846:	4770      	bx	lr

08005848 <__swhatbuf_r>:
 8005848:	b570      	push	{r4, r5, r6, lr}
 800584a:	460e      	mov	r6, r1
 800584c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005850:	2900      	cmp	r1, #0
 8005852:	b096      	sub	sp, #88	; 0x58
 8005854:	4614      	mov	r4, r2
 8005856:	461d      	mov	r5, r3
 8005858:	da08      	bge.n	800586c <__swhatbuf_r+0x24>
 800585a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	602a      	str	r2, [r5, #0]
 8005862:	061a      	lsls	r2, r3, #24
 8005864:	d410      	bmi.n	8005888 <__swhatbuf_r+0x40>
 8005866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800586a:	e00e      	b.n	800588a <__swhatbuf_r+0x42>
 800586c:	466a      	mov	r2, sp
 800586e:	f000 fc95 	bl	800619c <_fstat_r>
 8005872:	2800      	cmp	r0, #0
 8005874:	dbf1      	blt.n	800585a <__swhatbuf_r+0x12>
 8005876:	9a01      	ldr	r2, [sp, #4]
 8005878:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800587c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005880:	425a      	negs	r2, r3
 8005882:	415a      	adcs	r2, r3
 8005884:	602a      	str	r2, [r5, #0]
 8005886:	e7ee      	b.n	8005866 <__swhatbuf_r+0x1e>
 8005888:	2340      	movs	r3, #64	; 0x40
 800588a:	2000      	movs	r0, #0
 800588c:	6023      	str	r3, [r4, #0]
 800588e:	b016      	add	sp, #88	; 0x58
 8005890:	bd70      	pop	{r4, r5, r6, pc}
	...

08005894 <__smakebuf_r>:
 8005894:	898b      	ldrh	r3, [r1, #12]
 8005896:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005898:	079d      	lsls	r5, r3, #30
 800589a:	4606      	mov	r6, r0
 800589c:	460c      	mov	r4, r1
 800589e:	d507      	bpl.n	80058b0 <__smakebuf_r+0x1c>
 80058a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80058a4:	6023      	str	r3, [r4, #0]
 80058a6:	6123      	str	r3, [r4, #16]
 80058a8:	2301      	movs	r3, #1
 80058aa:	6163      	str	r3, [r4, #20]
 80058ac:	b002      	add	sp, #8
 80058ae:	bd70      	pop	{r4, r5, r6, pc}
 80058b0:	ab01      	add	r3, sp, #4
 80058b2:	466a      	mov	r2, sp
 80058b4:	f7ff ffc8 	bl	8005848 <__swhatbuf_r>
 80058b8:	9900      	ldr	r1, [sp, #0]
 80058ba:	4605      	mov	r5, r0
 80058bc:	4630      	mov	r0, r6
 80058be:	f000 f895 	bl	80059ec <_malloc_r>
 80058c2:	b948      	cbnz	r0, 80058d8 <__smakebuf_r+0x44>
 80058c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058c8:	059a      	lsls	r2, r3, #22
 80058ca:	d4ef      	bmi.n	80058ac <__smakebuf_r+0x18>
 80058cc:	f023 0303 	bic.w	r3, r3, #3
 80058d0:	f043 0302 	orr.w	r3, r3, #2
 80058d4:	81a3      	strh	r3, [r4, #12]
 80058d6:	e7e3      	b.n	80058a0 <__smakebuf_r+0xc>
 80058d8:	4b0d      	ldr	r3, [pc, #52]	; (8005910 <__smakebuf_r+0x7c>)
 80058da:	62b3      	str	r3, [r6, #40]	; 0x28
 80058dc:	89a3      	ldrh	r3, [r4, #12]
 80058de:	6020      	str	r0, [r4, #0]
 80058e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e4:	81a3      	strh	r3, [r4, #12]
 80058e6:	9b00      	ldr	r3, [sp, #0]
 80058e8:	6163      	str	r3, [r4, #20]
 80058ea:	9b01      	ldr	r3, [sp, #4]
 80058ec:	6120      	str	r0, [r4, #16]
 80058ee:	b15b      	cbz	r3, 8005908 <__smakebuf_r+0x74>
 80058f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058f4:	4630      	mov	r0, r6
 80058f6:	f000 fc63 	bl	80061c0 <_isatty_r>
 80058fa:	b128      	cbz	r0, 8005908 <__smakebuf_r+0x74>
 80058fc:	89a3      	ldrh	r3, [r4, #12]
 80058fe:	f023 0303 	bic.w	r3, r3, #3
 8005902:	f043 0301 	orr.w	r3, r3, #1
 8005906:	81a3      	strh	r3, [r4, #12]
 8005908:	89a0      	ldrh	r0, [r4, #12]
 800590a:	4305      	orrs	r5, r0
 800590c:	81a5      	strh	r5, [r4, #12]
 800590e:	e7cd      	b.n	80058ac <__smakebuf_r+0x18>
 8005910:	080056a1 	.word	0x080056a1

08005914 <_free_r>:
 8005914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005916:	2900      	cmp	r1, #0
 8005918:	d044      	beq.n	80059a4 <_free_r+0x90>
 800591a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800591e:	9001      	str	r0, [sp, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	f1a1 0404 	sub.w	r4, r1, #4
 8005926:	bfb8      	it	lt
 8005928:	18e4      	addlt	r4, r4, r3
 800592a:	f000 fc6b 	bl	8006204 <__malloc_lock>
 800592e:	4a1e      	ldr	r2, [pc, #120]	; (80059a8 <_free_r+0x94>)
 8005930:	9801      	ldr	r0, [sp, #4]
 8005932:	6813      	ldr	r3, [r2, #0]
 8005934:	b933      	cbnz	r3, 8005944 <_free_r+0x30>
 8005936:	6063      	str	r3, [r4, #4]
 8005938:	6014      	str	r4, [r2, #0]
 800593a:	b003      	add	sp, #12
 800593c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005940:	f000 bc66 	b.w	8006210 <__malloc_unlock>
 8005944:	42a3      	cmp	r3, r4
 8005946:	d908      	bls.n	800595a <_free_r+0x46>
 8005948:	6825      	ldr	r5, [r4, #0]
 800594a:	1961      	adds	r1, r4, r5
 800594c:	428b      	cmp	r3, r1
 800594e:	bf01      	itttt	eq
 8005950:	6819      	ldreq	r1, [r3, #0]
 8005952:	685b      	ldreq	r3, [r3, #4]
 8005954:	1949      	addeq	r1, r1, r5
 8005956:	6021      	streq	r1, [r4, #0]
 8005958:	e7ed      	b.n	8005936 <_free_r+0x22>
 800595a:	461a      	mov	r2, r3
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	b10b      	cbz	r3, 8005964 <_free_r+0x50>
 8005960:	42a3      	cmp	r3, r4
 8005962:	d9fa      	bls.n	800595a <_free_r+0x46>
 8005964:	6811      	ldr	r1, [r2, #0]
 8005966:	1855      	adds	r5, r2, r1
 8005968:	42a5      	cmp	r5, r4
 800596a:	d10b      	bne.n	8005984 <_free_r+0x70>
 800596c:	6824      	ldr	r4, [r4, #0]
 800596e:	4421      	add	r1, r4
 8005970:	1854      	adds	r4, r2, r1
 8005972:	42a3      	cmp	r3, r4
 8005974:	6011      	str	r1, [r2, #0]
 8005976:	d1e0      	bne.n	800593a <_free_r+0x26>
 8005978:	681c      	ldr	r4, [r3, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	6053      	str	r3, [r2, #4]
 800597e:	4421      	add	r1, r4
 8005980:	6011      	str	r1, [r2, #0]
 8005982:	e7da      	b.n	800593a <_free_r+0x26>
 8005984:	d902      	bls.n	800598c <_free_r+0x78>
 8005986:	230c      	movs	r3, #12
 8005988:	6003      	str	r3, [r0, #0]
 800598a:	e7d6      	b.n	800593a <_free_r+0x26>
 800598c:	6825      	ldr	r5, [r4, #0]
 800598e:	1961      	adds	r1, r4, r5
 8005990:	428b      	cmp	r3, r1
 8005992:	bf04      	itt	eq
 8005994:	6819      	ldreq	r1, [r3, #0]
 8005996:	685b      	ldreq	r3, [r3, #4]
 8005998:	6063      	str	r3, [r4, #4]
 800599a:	bf04      	itt	eq
 800599c:	1949      	addeq	r1, r1, r5
 800599e:	6021      	streq	r1, [r4, #0]
 80059a0:	6054      	str	r4, [r2, #4]
 80059a2:	e7ca      	b.n	800593a <_free_r+0x26>
 80059a4:	b003      	add	sp, #12
 80059a6:	bd30      	pop	{r4, r5, pc}
 80059a8:	2000024c 	.word	0x2000024c

080059ac <sbrk_aligned>:
 80059ac:	b570      	push	{r4, r5, r6, lr}
 80059ae:	4e0e      	ldr	r6, [pc, #56]	; (80059e8 <sbrk_aligned+0x3c>)
 80059b0:	460c      	mov	r4, r1
 80059b2:	6831      	ldr	r1, [r6, #0]
 80059b4:	4605      	mov	r5, r0
 80059b6:	b911      	cbnz	r1, 80059be <sbrk_aligned+0x12>
 80059b8:	f000 fb7a 	bl	80060b0 <_sbrk_r>
 80059bc:	6030      	str	r0, [r6, #0]
 80059be:	4621      	mov	r1, r4
 80059c0:	4628      	mov	r0, r5
 80059c2:	f000 fb75 	bl	80060b0 <_sbrk_r>
 80059c6:	1c43      	adds	r3, r0, #1
 80059c8:	d00a      	beq.n	80059e0 <sbrk_aligned+0x34>
 80059ca:	1cc4      	adds	r4, r0, #3
 80059cc:	f024 0403 	bic.w	r4, r4, #3
 80059d0:	42a0      	cmp	r0, r4
 80059d2:	d007      	beq.n	80059e4 <sbrk_aligned+0x38>
 80059d4:	1a21      	subs	r1, r4, r0
 80059d6:	4628      	mov	r0, r5
 80059d8:	f000 fb6a 	bl	80060b0 <_sbrk_r>
 80059dc:	3001      	adds	r0, #1
 80059de:	d101      	bne.n	80059e4 <sbrk_aligned+0x38>
 80059e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80059e4:	4620      	mov	r0, r4
 80059e6:	bd70      	pop	{r4, r5, r6, pc}
 80059e8:	20000250 	.word	0x20000250

080059ec <_malloc_r>:
 80059ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059f0:	1ccd      	adds	r5, r1, #3
 80059f2:	f025 0503 	bic.w	r5, r5, #3
 80059f6:	3508      	adds	r5, #8
 80059f8:	2d0c      	cmp	r5, #12
 80059fa:	bf38      	it	cc
 80059fc:	250c      	movcc	r5, #12
 80059fe:	2d00      	cmp	r5, #0
 8005a00:	4607      	mov	r7, r0
 8005a02:	db01      	blt.n	8005a08 <_malloc_r+0x1c>
 8005a04:	42a9      	cmp	r1, r5
 8005a06:	d905      	bls.n	8005a14 <_malloc_r+0x28>
 8005a08:	230c      	movs	r3, #12
 8005a0a:	603b      	str	r3, [r7, #0]
 8005a0c:	2600      	movs	r6, #0
 8005a0e:	4630      	mov	r0, r6
 8005a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a14:	4e2e      	ldr	r6, [pc, #184]	; (8005ad0 <_malloc_r+0xe4>)
 8005a16:	f000 fbf5 	bl	8006204 <__malloc_lock>
 8005a1a:	6833      	ldr	r3, [r6, #0]
 8005a1c:	461c      	mov	r4, r3
 8005a1e:	bb34      	cbnz	r4, 8005a6e <_malloc_r+0x82>
 8005a20:	4629      	mov	r1, r5
 8005a22:	4638      	mov	r0, r7
 8005a24:	f7ff ffc2 	bl	80059ac <sbrk_aligned>
 8005a28:	1c43      	adds	r3, r0, #1
 8005a2a:	4604      	mov	r4, r0
 8005a2c:	d14d      	bne.n	8005aca <_malloc_r+0xde>
 8005a2e:	6834      	ldr	r4, [r6, #0]
 8005a30:	4626      	mov	r6, r4
 8005a32:	2e00      	cmp	r6, #0
 8005a34:	d140      	bne.n	8005ab8 <_malloc_r+0xcc>
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	4631      	mov	r1, r6
 8005a3a:	4638      	mov	r0, r7
 8005a3c:	eb04 0803 	add.w	r8, r4, r3
 8005a40:	f000 fb36 	bl	80060b0 <_sbrk_r>
 8005a44:	4580      	cmp	r8, r0
 8005a46:	d13a      	bne.n	8005abe <_malloc_r+0xd2>
 8005a48:	6821      	ldr	r1, [r4, #0]
 8005a4a:	3503      	adds	r5, #3
 8005a4c:	1a6d      	subs	r5, r5, r1
 8005a4e:	f025 0503 	bic.w	r5, r5, #3
 8005a52:	3508      	adds	r5, #8
 8005a54:	2d0c      	cmp	r5, #12
 8005a56:	bf38      	it	cc
 8005a58:	250c      	movcc	r5, #12
 8005a5a:	4629      	mov	r1, r5
 8005a5c:	4638      	mov	r0, r7
 8005a5e:	f7ff ffa5 	bl	80059ac <sbrk_aligned>
 8005a62:	3001      	adds	r0, #1
 8005a64:	d02b      	beq.n	8005abe <_malloc_r+0xd2>
 8005a66:	6823      	ldr	r3, [r4, #0]
 8005a68:	442b      	add	r3, r5
 8005a6a:	6023      	str	r3, [r4, #0]
 8005a6c:	e00e      	b.n	8005a8c <_malloc_r+0xa0>
 8005a6e:	6822      	ldr	r2, [r4, #0]
 8005a70:	1b52      	subs	r2, r2, r5
 8005a72:	d41e      	bmi.n	8005ab2 <_malloc_r+0xc6>
 8005a74:	2a0b      	cmp	r2, #11
 8005a76:	d916      	bls.n	8005aa6 <_malloc_r+0xba>
 8005a78:	1961      	adds	r1, r4, r5
 8005a7a:	42a3      	cmp	r3, r4
 8005a7c:	6025      	str	r5, [r4, #0]
 8005a7e:	bf18      	it	ne
 8005a80:	6059      	strne	r1, [r3, #4]
 8005a82:	6863      	ldr	r3, [r4, #4]
 8005a84:	bf08      	it	eq
 8005a86:	6031      	streq	r1, [r6, #0]
 8005a88:	5162      	str	r2, [r4, r5]
 8005a8a:	604b      	str	r3, [r1, #4]
 8005a8c:	4638      	mov	r0, r7
 8005a8e:	f104 060b 	add.w	r6, r4, #11
 8005a92:	f000 fbbd 	bl	8006210 <__malloc_unlock>
 8005a96:	f026 0607 	bic.w	r6, r6, #7
 8005a9a:	1d23      	adds	r3, r4, #4
 8005a9c:	1af2      	subs	r2, r6, r3
 8005a9e:	d0b6      	beq.n	8005a0e <_malloc_r+0x22>
 8005aa0:	1b9b      	subs	r3, r3, r6
 8005aa2:	50a3      	str	r3, [r4, r2]
 8005aa4:	e7b3      	b.n	8005a0e <_malloc_r+0x22>
 8005aa6:	6862      	ldr	r2, [r4, #4]
 8005aa8:	42a3      	cmp	r3, r4
 8005aaa:	bf0c      	ite	eq
 8005aac:	6032      	streq	r2, [r6, #0]
 8005aae:	605a      	strne	r2, [r3, #4]
 8005ab0:	e7ec      	b.n	8005a8c <_malloc_r+0xa0>
 8005ab2:	4623      	mov	r3, r4
 8005ab4:	6864      	ldr	r4, [r4, #4]
 8005ab6:	e7b2      	b.n	8005a1e <_malloc_r+0x32>
 8005ab8:	4634      	mov	r4, r6
 8005aba:	6876      	ldr	r6, [r6, #4]
 8005abc:	e7b9      	b.n	8005a32 <_malloc_r+0x46>
 8005abe:	230c      	movs	r3, #12
 8005ac0:	603b      	str	r3, [r7, #0]
 8005ac2:	4638      	mov	r0, r7
 8005ac4:	f000 fba4 	bl	8006210 <__malloc_unlock>
 8005ac8:	e7a1      	b.n	8005a0e <_malloc_r+0x22>
 8005aca:	6025      	str	r5, [r4, #0]
 8005acc:	e7de      	b.n	8005a8c <_malloc_r+0xa0>
 8005ace:	bf00      	nop
 8005ad0:	2000024c 	.word	0x2000024c

08005ad4 <__sfputc_r>:
 8005ad4:	6893      	ldr	r3, [r2, #8]
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	b410      	push	{r4}
 8005adc:	6093      	str	r3, [r2, #8]
 8005ade:	da08      	bge.n	8005af2 <__sfputc_r+0x1e>
 8005ae0:	6994      	ldr	r4, [r2, #24]
 8005ae2:	42a3      	cmp	r3, r4
 8005ae4:	db01      	blt.n	8005aea <__sfputc_r+0x16>
 8005ae6:	290a      	cmp	r1, #10
 8005ae8:	d103      	bne.n	8005af2 <__sfputc_r+0x1e>
 8005aea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005aee:	f7ff bc31 	b.w	8005354 <__swbuf_r>
 8005af2:	6813      	ldr	r3, [r2, #0]
 8005af4:	1c58      	adds	r0, r3, #1
 8005af6:	6010      	str	r0, [r2, #0]
 8005af8:	7019      	strb	r1, [r3, #0]
 8005afa:	4608      	mov	r0, r1
 8005afc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <__sfputs_r>:
 8005b02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b04:	4606      	mov	r6, r0
 8005b06:	460f      	mov	r7, r1
 8005b08:	4614      	mov	r4, r2
 8005b0a:	18d5      	adds	r5, r2, r3
 8005b0c:	42ac      	cmp	r4, r5
 8005b0e:	d101      	bne.n	8005b14 <__sfputs_r+0x12>
 8005b10:	2000      	movs	r0, #0
 8005b12:	e007      	b.n	8005b24 <__sfputs_r+0x22>
 8005b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b18:	463a      	mov	r2, r7
 8005b1a:	4630      	mov	r0, r6
 8005b1c:	f7ff ffda 	bl	8005ad4 <__sfputc_r>
 8005b20:	1c43      	adds	r3, r0, #1
 8005b22:	d1f3      	bne.n	8005b0c <__sfputs_r+0xa>
 8005b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b28 <_vfiprintf_r>:
 8005b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b2c:	460d      	mov	r5, r1
 8005b2e:	b09d      	sub	sp, #116	; 0x74
 8005b30:	4614      	mov	r4, r2
 8005b32:	4698      	mov	r8, r3
 8005b34:	4606      	mov	r6, r0
 8005b36:	b118      	cbz	r0, 8005b40 <_vfiprintf_r+0x18>
 8005b38:	6983      	ldr	r3, [r0, #24]
 8005b3a:	b90b      	cbnz	r3, 8005b40 <_vfiprintf_r+0x18>
 8005b3c:	f7ff fde4 	bl	8005708 <__sinit>
 8005b40:	4b89      	ldr	r3, [pc, #548]	; (8005d68 <_vfiprintf_r+0x240>)
 8005b42:	429d      	cmp	r5, r3
 8005b44:	d11b      	bne.n	8005b7e <_vfiprintf_r+0x56>
 8005b46:	6875      	ldr	r5, [r6, #4]
 8005b48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b4a:	07d9      	lsls	r1, r3, #31
 8005b4c:	d405      	bmi.n	8005b5a <_vfiprintf_r+0x32>
 8005b4e:	89ab      	ldrh	r3, [r5, #12]
 8005b50:	059a      	lsls	r2, r3, #22
 8005b52:	d402      	bmi.n	8005b5a <_vfiprintf_r+0x32>
 8005b54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b56:	f7ff fe75 	bl	8005844 <__retarget_lock_acquire_recursive>
 8005b5a:	89ab      	ldrh	r3, [r5, #12]
 8005b5c:	071b      	lsls	r3, r3, #28
 8005b5e:	d501      	bpl.n	8005b64 <_vfiprintf_r+0x3c>
 8005b60:	692b      	ldr	r3, [r5, #16]
 8005b62:	b9eb      	cbnz	r3, 8005ba0 <_vfiprintf_r+0x78>
 8005b64:	4629      	mov	r1, r5
 8005b66:	4630      	mov	r0, r6
 8005b68:	f7ff fc46 	bl	80053f8 <__swsetup_r>
 8005b6c:	b1c0      	cbz	r0, 8005ba0 <_vfiprintf_r+0x78>
 8005b6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b70:	07dc      	lsls	r4, r3, #31
 8005b72:	d50e      	bpl.n	8005b92 <_vfiprintf_r+0x6a>
 8005b74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b78:	b01d      	add	sp, #116	; 0x74
 8005b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b7e:	4b7b      	ldr	r3, [pc, #492]	; (8005d6c <_vfiprintf_r+0x244>)
 8005b80:	429d      	cmp	r5, r3
 8005b82:	d101      	bne.n	8005b88 <_vfiprintf_r+0x60>
 8005b84:	68b5      	ldr	r5, [r6, #8]
 8005b86:	e7df      	b.n	8005b48 <_vfiprintf_r+0x20>
 8005b88:	4b79      	ldr	r3, [pc, #484]	; (8005d70 <_vfiprintf_r+0x248>)
 8005b8a:	429d      	cmp	r5, r3
 8005b8c:	bf08      	it	eq
 8005b8e:	68f5      	ldreq	r5, [r6, #12]
 8005b90:	e7da      	b.n	8005b48 <_vfiprintf_r+0x20>
 8005b92:	89ab      	ldrh	r3, [r5, #12]
 8005b94:	0598      	lsls	r0, r3, #22
 8005b96:	d4ed      	bmi.n	8005b74 <_vfiprintf_r+0x4c>
 8005b98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b9a:	f7ff fe54 	bl	8005846 <__retarget_lock_release_recursive>
 8005b9e:	e7e9      	b.n	8005b74 <_vfiprintf_r+0x4c>
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ba4:	2320      	movs	r3, #32
 8005ba6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005baa:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bae:	2330      	movs	r3, #48	; 0x30
 8005bb0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005d74 <_vfiprintf_r+0x24c>
 8005bb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bb8:	f04f 0901 	mov.w	r9, #1
 8005bbc:	4623      	mov	r3, r4
 8005bbe:	469a      	mov	sl, r3
 8005bc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bc4:	b10a      	cbz	r2, 8005bca <_vfiprintf_r+0xa2>
 8005bc6:	2a25      	cmp	r2, #37	; 0x25
 8005bc8:	d1f9      	bne.n	8005bbe <_vfiprintf_r+0x96>
 8005bca:	ebba 0b04 	subs.w	fp, sl, r4
 8005bce:	d00b      	beq.n	8005be8 <_vfiprintf_r+0xc0>
 8005bd0:	465b      	mov	r3, fp
 8005bd2:	4622      	mov	r2, r4
 8005bd4:	4629      	mov	r1, r5
 8005bd6:	4630      	mov	r0, r6
 8005bd8:	f7ff ff93 	bl	8005b02 <__sfputs_r>
 8005bdc:	3001      	adds	r0, #1
 8005bde:	f000 80aa 	beq.w	8005d36 <_vfiprintf_r+0x20e>
 8005be2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005be4:	445a      	add	r2, fp
 8005be6:	9209      	str	r2, [sp, #36]	; 0x24
 8005be8:	f89a 3000 	ldrb.w	r3, [sl]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f000 80a2 	beq.w	8005d36 <_vfiprintf_r+0x20e>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bfc:	f10a 0a01 	add.w	sl, sl, #1
 8005c00:	9304      	str	r3, [sp, #16]
 8005c02:	9307      	str	r3, [sp, #28]
 8005c04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c08:	931a      	str	r3, [sp, #104]	; 0x68
 8005c0a:	4654      	mov	r4, sl
 8005c0c:	2205      	movs	r2, #5
 8005c0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c12:	4858      	ldr	r0, [pc, #352]	; (8005d74 <_vfiprintf_r+0x24c>)
 8005c14:	f7fa fadc 	bl	80001d0 <memchr>
 8005c18:	9a04      	ldr	r2, [sp, #16]
 8005c1a:	b9d8      	cbnz	r0, 8005c54 <_vfiprintf_r+0x12c>
 8005c1c:	06d1      	lsls	r1, r2, #27
 8005c1e:	bf44      	itt	mi
 8005c20:	2320      	movmi	r3, #32
 8005c22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c26:	0713      	lsls	r3, r2, #28
 8005c28:	bf44      	itt	mi
 8005c2a:	232b      	movmi	r3, #43	; 0x2b
 8005c2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c30:	f89a 3000 	ldrb.w	r3, [sl]
 8005c34:	2b2a      	cmp	r3, #42	; 0x2a
 8005c36:	d015      	beq.n	8005c64 <_vfiprintf_r+0x13c>
 8005c38:	9a07      	ldr	r2, [sp, #28]
 8005c3a:	4654      	mov	r4, sl
 8005c3c:	2000      	movs	r0, #0
 8005c3e:	f04f 0c0a 	mov.w	ip, #10
 8005c42:	4621      	mov	r1, r4
 8005c44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c48:	3b30      	subs	r3, #48	; 0x30
 8005c4a:	2b09      	cmp	r3, #9
 8005c4c:	d94e      	bls.n	8005cec <_vfiprintf_r+0x1c4>
 8005c4e:	b1b0      	cbz	r0, 8005c7e <_vfiprintf_r+0x156>
 8005c50:	9207      	str	r2, [sp, #28]
 8005c52:	e014      	b.n	8005c7e <_vfiprintf_r+0x156>
 8005c54:	eba0 0308 	sub.w	r3, r0, r8
 8005c58:	fa09 f303 	lsl.w	r3, r9, r3
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	9304      	str	r3, [sp, #16]
 8005c60:	46a2      	mov	sl, r4
 8005c62:	e7d2      	b.n	8005c0a <_vfiprintf_r+0xe2>
 8005c64:	9b03      	ldr	r3, [sp, #12]
 8005c66:	1d19      	adds	r1, r3, #4
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	9103      	str	r1, [sp, #12]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	bfbb      	ittet	lt
 8005c70:	425b      	neglt	r3, r3
 8005c72:	f042 0202 	orrlt.w	r2, r2, #2
 8005c76:	9307      	strge	r3, [sp, #28]
 8005c78:	9307      	strlt	r3, [sp, #28]
 8005c7a:	bfb8      	it	lt
 8005c7c:	9204      	strlt	r2, [sp, #16]
 8005c7e:	7823      	ldrb	r3, [r4, #0]
 8005c80:	2b2e      	cmp	r3, #46	; 0x2e
 8005c82:	d10c      	bne.n	8005c9e <_vfiprintf_r+0x176>
 8005c84:	7863      	ldrb	r3, [r4, #1]
 8005c86:	2b2a      	cmp	r3, #42	; 0x2a
 8005c88:	d135      	bne.n	8005cf6 <_vfiprintf_r+0x1ce>
 8005c8a:	9b03      	ldr	r3, [sp, #12]
 8005c8c:	1d1a      	adds	r2, r3, #4
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	9203      	str	r2, [sp, #12]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	bfb8      	it	lt
 8005c96:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005c9a:	3402      	adds	r4, #2
 8005c9c:	9305      	str	r3, [sp, #20]
 8005c9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005d84 <_vfiprintf_r+0x25c>
 8005ca2:	7821      	ldrb	r1, [r4, #0]
 8005ca4:	2203      	movs	r2, #3
 8005ca6:	4650      	mov	r0, sl
 8005ca8:	f7fa fa92 	bl	80001d0 <memchr>
 8005cac:	b140      	cbz	r0, 8005cc0 <_vfiprintf_r+0x198>
 8005cae:	2340      	movs	r3, #64	; 0x40
 8005cb0:	eba0 000a 	sub.w	r0, r0, sl
 8005cb4:	fa03 f000 	lsl.w	r0, r3, r0
 8005cb8:	9b04      	ldr	r3, [sp, #16]
 8005cba:	4303      	orrs	r3, r0
 8005cbc:	3401      	adds	r4, #1
 8005cbe:	9304      	str	r3, [sp, #16]
 8005cc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cc4:	482c      	ldr	r0, [pc, #176]	; (8005d78 <_vfiprintf_r+0x250>)
 8005cc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cca:	2206      	movs	r2, #6
 8005ccc:	f7fa fa80 	bl	80001d0 <memchr>
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	d03f      	beq.n	8005d54 <_vfiprintf_r+0x22c>
 8005cd4:	4b29      	ldr	r3, [pc, #164]	; (8005d7c <_vfiprintf_r+0x254>)
 8005cd6:	bb1b      	cbnz	r3, 8005d20 <_vfiprintf_r+0x1f8>
 8005cd8:	9b03      	ldr	r3, [sp, #12]
 8005cda:	3307      	adds	r3, #7
 8005cdc:	f023 0307 	bic.w	r3, r3, #7
 8005ce0:	3308      	adds	r3, #8
 8005ce2:	9303      	str	r3, [sp, #12]
 8005ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ce6:	443b      	add	r3, r7
 8005ce8:	9309      	str	r3, [sp, #36]	; 0x24
 8005cea:	e767      	b.n	8005bbc <_vfiprintf_r+0x94>
 8005cec:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cf0:	460c      	mov	r4, r1
 8005cf2:	2001      	movs	r0, #1
 8005cf4:	e7a5      	b.n	8005c42 <_vfiprintf_r+0x11a>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	3401      	adds	r4, #1
 8005cfa:	9305      	str	r3, [sp, #20]
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	f04f 0c0a 	mov.w	ip, #10
 8005d02:	4620      	mov	r0, r4
 8005d04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d08:	3a30      	subs	r2, #48	; 0x30
 8005d0a:	2a09      	cmp	r2, #9
 8005d0c:	d903      	bls.n	8005d16 <_vfiprintf_r+0x1ee>
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d0c5      	beq.n	8005c9e <_vfiprintf_r+0x176>
 8005d12:	9105      	str	r1, [sp, #20]
 8005d14:	e7c3      	b.n	8005c9e <_vfiprintf_r+0x176>
 8005d16:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d1a:	4604      	mov	r4, r0
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e7f0      	b.n	8005d02 <_vfiprintf_r+0x1da>
 8005d20:	ab03      	add	r3, sp, #12
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	462a      	mov	r2, r5
 8005d26:	4b16      	ldr	r3, [pc, #88]	; (8005d80 <_vfiprintf_r+0x258>)
 8005d28:	a904      	add	r1, sp, #16
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	f3af 8000 	nop.w
 8005d30:	4607      	mov	r7, r0
 8005d32:	1c78      	adds	r0, r7, #1
 8005d34:	d1d6      	bne.n	8005ce4 <_vfiprintf_r+0x1bc>
 8005d36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d38:	07d9      	lsls	r1, r3, #31
 8005d3a:	d405      	bmi.n	8005d48 <_vfiprintf_r+0x220>
 8005d3c:	89ab      	ldrh	r3, [r5, #12]
 8005d3e:	059a      	lsls	r2, r3, #22
 8005d40:	d402      	bmi.n	8005d48 <_vfiprintf_r+0x220>
 8005d42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d44:	f7ff fd7f 	bl	8005846 <__retarget_lock_release_recursive>
 8005d48:	89ab      	ldrh	r3, [r5, #12]
 8005d4a:	065b      	lsls	r3, r3, #25
 8005d4c:	f53f af12 	bmi.w	8005b74 <_vfiprintf_r+0x4c>
 8005d50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d52:	e711      	b.n	8005b78 <_vfiprintf_r+0x50>
 8005d54:	ab03      	add	r3, sp, #12
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	462a      	mov	r2, r5
 8005d5a:	4b09      	ldr	r3, [pc, #36]	; (8005d80 <_vfiprintf_r+0x258>)
 8005d5c:	a904      	add	r1, sp, #16
 8005d5e:	4630      	mov	r0, r6
 8005d60:	f000 f880 	bl	8005e64 <_printf_i>
 8005d64:	e7e4      	b.n	8005d30 <_vfiprintf_r+0x208>
 8005d66:	bf00      	nop
 8005d68:	080062e4 	.word	0x080062e4
 8005d6c:	08006304 	.word	0x08006304
 8005d70:	080062c4 	.word	0x080062c4
 8005d74:	08006324 	.word	0x08006324
 8005d78:	0800632e 	.word	0x0800632e
 8005d7c:	00000000 	.word	0x00000000
 8005d80:	08005b03 	.word	0x08005b03
 8005d84:	0800632a 	.word	0x0800632a

08005d88 <_printf_common>:
 8005d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d8c:	4616      	mov	r6, r2
 8005d8e:	4699      	mov	r9, r3
 8005d90:	688a      	ldr	r2, [r1, #8]
 8005d92:	690b      	ldr	r3, [r1, #16]
 8005d94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	bfb8      	it	lt
 8005d9c:	4613      	movlt	r3, r2
 8005d9e:	6033      	str	r3, [r6, #0]
 8005da0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005da4:	4607      	mov	r7, r0
 8005da6:	460c      	mov	r4, r1
 8005da8:	b10a      	cbz	r2, 8005dae <_printf_common+0x26>
 8005daa:	3301      	adds	r3, #1
 8005dac:	6033      	str	r3, [r6, #0]
 8005dae:	6823      	ldr	r3, [r4, #0]
 8005db0:	0699      	lsls	r1, r3, #26
 8005db2:	bf42      	ittt	mi
 8005db4:	6833      	ldrmi	r3, [r6, #0]
 8005db6:	3302      	addmi	r3, #2
 8005db8:	6033      	strmi	r3, [r6, #0]
 8005dba:	6825      	ldr	r5, [r4, #0]
 8005dbc:	f015 0506 	ands.w	r5, r5, #6
 8005dc0:	d106      	bne.n	8005dd0 <_printf_common+0x48>
 8005dc2:	f104 0a19 	add.w	sl, r4, #25
 8005dc6:	68e3      	ldr	r3, [r4, #12]
 8005dc8:	6832      	ldr	r2, [r6, #0]
 8005dca:	1a9b      	subs	r3, r3, r2
 8005dcc:	42ab      	cmp	r3, r5
 8005dce:	dc26      	bgt.n	8005e1e <_printf_common+0x96>
 8005dd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005dd4:	1e13      	subs	r3, r2, #0
 8005dd6:	6822      	ldr	r2, [r4, #0]
 8005dd8:	bf18      	it	ne
 8005dda:	2301      	movne	r3, #1
 8005ddc:	0692      	lsls	r2, r2, #26
 8005dde:	d42b      	bmi.n	8005e38 <_printf_common+0xb0>
 8005de0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005de4:	4649      	mov	r1, r9
 8005de6:	4638      	mov	r0, r7
 8005de8:	47c0      	blx	r8
 8005dea:	3001      	adds	r0, #1
 8005dec:	d01e      	beq.n	8005e2c <_printf_common+0xa4>
 8005dee:	6823      	ldr	r3, [r4, #0]
 8005df0:	68e5      	ldr	r5, [r4, #12]
 8005df2:	6832      	ldr	r2, [r6, #0]
 8005df4:	f003 0306 	and.w	r3, r3, #6
 8005df8:	2b04      	cmp	r3, #4
 8005dfa:	bf08      	it	eq
 8005dfc:	1aad      	subeq	r5, r5, r2
 8005dfe:	68a3      	ldr	r3, [r4, #8]
 8005e00:	6922      	ldr	r2, [r4, #16]
 8005e02:	bf0c      	ite	eq
 8005e04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e08:	2500      	movne	r5, #0
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	bfc4      	itt	gt
 8005e0e:	1a9b      	subgt	r3, r3, r2
 8005e10:	18ed      	addgt	r5, r5, r3
 8005e12:	2600      	movs	r6, #0
 8005e14:	341a      	adds	r4, #26
 8005e16:	42b5      	cmp	r5, r6
 8005e18:	d11a      	bne.n	8005e50 <_printf_common+0xc8>
 8005e1a:	2000      	movs	r0, #0
 8005e1c:	e008      	b.n	8005e30 <_printf_common+0xa8>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	4652      	mov	r2, sl
 8005e22:	4649      	mov	r1, r9
 8005e24:	4638      	mov	r0, r7
 8005e26:	47c0      	blx	r8
 8005e28:	3001      	adds	r0, #1
 8005e2a:	d103      	bne.n	8005e34 <_printf_common+0xac>
 8005e2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e34:	3501      	adds	r5, #1
 8005e36:	e7c6      	b.n	8005dc6 <_printf_common+0x3e>
 8005e38:	18e1      	adds	r1, r4, r3
 8005e3a:	1c5a      	adds	r2, r3, #1
 8005e3c:	2030      	movs	r0, #48	; 0x30
 8005e3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e42:	4422      	add	r2, r4
 8005e44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e4c:	3302      	adds	r3, #2
 8005e4e:	e7c7      	b.n	8005de0 <_printf_common+0x58>
 8005e50:	2301      	movs	r3, #1
 8005e52:	4622      	mov	r2, r4
 8005e54:	4649      	mov	r1, r9
 8005e56:	4638      	mov	r0, r7
 8005e58:	47c0      	blx	r8
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	d0e6      	beq.n	8005e2c <_printf_common+0xa4>
 8005e5e:	3601      	adds	r6, #1
 8005e60:	e7d9      	b.n	8005e16 <_printf_common+0x8e>
	...

08005e64 <_printf_i>:
 8005e64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e68:	7e0f      	ldrb	r7, [r1, #24]
 8005e6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e6c:	2f78      	cmp	r7, #120	; 0x78
 8005e6e:	4691      	mov	r9, r2
 8005e70:	4680      	mov	r8, r0
 8005e72:	460c      	mov	r4, r1
 8005e74:	469a      	mov	sl, r3
 8005e76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e7a:	d807      	bhi.n	8005e8c <_printf_i+0x28>
 8005e7c:	2f62      	cmp	r7, #98	; 0x62
 8005e7e:	d80a      	bhi.n	8005e96 <_printf_i+0x32>
 8005e80:	2f00      	cmp	r7, #0
 8005e82:	f000 80d8 	beq.w	8006036 <_printf_i+0x1d2>
 8005e86:	2f58      	cmp	r7, #88	; 0x58
 8005e88:	f000 80a3 	beq.w	8005fd2 <_printf_i+0x16e>
 8005e8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e94:	e03a      	b.n	8005f0c <_printf_i+0xa8>
 8005e96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e9a:	2b15      	cmp	r3, #21
 8005e9c:	d8f6      	bhi.n	8005e8c <_printf_i+0x28>
 8005e9e:	a101      	add	r1, pc, #4	; (adr r1, 8005ea4 <_printf_i+0x40>)
 8005ea0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ea4:	08005efd 	.word	0x08005efd
 8005ea8:	08005f11 	.word	0x08005f11
 8005eac:	08005e8d 	.word	0x08005e8d
 8005eb0:	08005e8d 	.word	0x08005e8d
 8005eb4:	08005e8d 	.word	0x08005e8d
 8005eb8:	08005e8d 	.word	0x08005e8d
 8005ebc:	08005f11 	.word	0x08005f11
 8005ec0:	08005e8d 	.word	0x08005e8d
 8005ec4:	08005e8d 	.word	0x08005e8d
 8005ec8:	08005e8d 	.word	0x08005e8d
 8005ecc:	08005e8d 	.word	0x08005e8d
 8005ed0:	0800601d 	.word	0x0800601d
 8005ed4:	08005f41 	.word	0x08005f41
 8005ed8:	08005fff 	.word	0x08005fff
 8005edc:	08005e8d 	.word	0x08005e8d
 8005ee0:	08005e8d 	.word	0x08005e8d
 8005ee4:	0800603f 	.word	0x0800603f
 8005ee8:	08005e8d 	.word	0x08005e8d
 8005eec:	08005f41 	.word	0x08005f41
 8005ef0:	08005e8d 	.word	0x08005e8d
 8005ef4:	08005e8d 	.word	0x08005e8d
 8005ef8:	08006007 	.word	0x08006007
 8005efc:	682b      	ldr	r3, [r5, #0]
 8005efe:	1d1a      	adds	r2, r3, #4
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	602a      	str	r2, [r5, #0]
 8005f04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e0a3      	b.n	8006058 <_printf_i+0x1f4>
 8005f10:	6820      	ldr	r0, [r4, #0]
 8005f12:	6829      	ldr	r1, [r5, #0]
 8005f14:	0606      	lsls	r6, r0, #24
 8005f16:	f101 0304 	add.w	r3, r1, #4
 8005f1a:	d50a      	bpl.n	8005f32 <_printf_i+0xce>
 8005f1c:	680e      	ldr	r6, [r1, #0]
 8005f1e:	602b      	str	r3, [r5, #0]
 8005f20:	2e00      	cmp	r6, #0
 8005f22:	da03      	bge.n	8005f2c <_printf_i+0xc8>
 8005f24:	232d      	movs	r3, #45	; 0x2d
 8005f26:	4276      	negs	r6, r6
 8005f28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f2c:	485e      	ldr	r0, [pc, #376]	; (80060a8 <_printf_i+0x244>)
 8005f2e:	230a      	movs	r3, #10
 8005f30:	e019      	b.n	8005f66 <_printf_i+0x102>
 8005f32:	680e      	ldr	r6, [r1, #0]
 8005f34:	602b      	str	r3, [r5, #0]
 8005f36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f3a:	bf18      	it	ne
 8005f3c:	b236      	sxthne	r6, r6
 8005f3e:	e7ef      	b.n	8005f20 <_printf_i+0xbc>
 8005f40:	682b      	ldr	r3, [r5, #0]
 8005f42:	6820      	ldr	r0, [r4, #0]
 8005f44:	1d19      	adds	r1, r3, #4
 8005f46:	6029      	str	r1, [r5, #0]
 8005f48:	0601      	lsls	r1, r0, #24
 8005f4a:	d501      	bpl.n	8005f50 <_printf_i+0xec>
 8005f4c:	681e      	ldr	r6, [r3, #0]
 8005f4e:	e002      	b.n	8005f56 <_printf_i+0xf2>
 8005f50:	0646      	lsls	r6, r0, #25
 8005f52:	d5fb      	bpl.n	8005f4c <_printf_i+0xe8>
 8005f54:	881e      	ldrh	r6, [r3, #0]
 8005f56:	4854      	ldr	r0, [pc, #336]	; (80060a8 <_printf_i+0x244>)
 8005f58:	2f6f      	cmp	r7, #111	; 0x6f
 8005f5a:	bf0c      	ite	eq
 8005f5c:	2308      	moveq	r3, #8
 8005f5e:	230a      	movne	r3, #10
 8005f60:	2100      	movs	r1, #0
 8005f62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f66:	6865      	ldr	r5, [r4, #4]
 8005f68:	60a5      	str	r5, [r4, #8]
 8005f6a:	2d00      	cmp	r5, #0
 8005f6c:	bfa2      	ittt	ge
 8005f6e:	6821      	ldrge	r1, [r4, #0]
 8005f70:	f021 0104 	bicge.w	r1, r1, #4
 8005f74:	6021      	strge	r1, [r4, #0]
 8005f76:	b90e      	cbnz	r6, 8005f7c <_printf_i+0x118>
 8005f78:	2d00      	cmp	r5, #0
 8005f7a:	d04d      	beq.n	8006018 <_printf_i+0x1b4>
 8005f7c:	4615      	mov	r5, r2
 8005f7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f82:	fb03 6711 	mls	r7, r3, r1, r6
 8005f86:	5dc7      	ldrb	r7, [r0, r7]
 8005f88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f8c:	4637      	mov	r7, r6
 8005f8e:	42bb      	cmp	r3, r7
 8005f90:	460e      	mov	r6, r1
 8005f92:	d9f4      	bls.n	8005f7e <_printf_i+0x11a>
 8005f94:	2b08      	cmp	r3, #8
 8005f96:	d10b      	bne.n	8005fb0 <_printf_i+0x14c>
 8005f98:	6823      	ldr	r3, [r4, #0]
 8005f9a:	07de      	lsls	r6, r3, #31
 8005f9c:	d508      	bpl.n	8005fb0 <_printf_i+0x14c>
 8005f9e:	6923      	ldr	r3, [r4, #16]
 8005fa0:	6861      	ldr	r1, [r4, #4]
 8005fa2:	4299      	cmp	r1, r3
 8005fa4:	bfde      	ittt	le
 8005fa6:	2330      	movle	r3, #48	; 0x30
 8005fa8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005fac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005fb0:	1b52      	subs	r2, r2, r5
 8005fb2:	6122      	str	r2, [r4, #16]
 8005fb4:	f8cd a000 	str.w	sl, [sp]
 8005fb8:	464b      	mov	r3, r9
 8005fba:	aa03      	add	r2, sp, #12
 8005fbc:	4621      	mov	r1, r4
 8005fbe:	4640      	mov	r0, r8
 8005fc0:	f7ff fee2 	bl	8005d88 <_printf_common>
 8005fc4:	3001      	adds	r0, #1
 8005fc6:	d14c      	bne.n	8006062 <_printf_i+0x1fe>
 8005fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fcc:	b004      	add	sp, #16
 8005fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fd2:	4835      	ldr	r0, [pc, #212]	; (80060a8 <_printf_i+0x244>)
 8005fd4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005fd8:	6829      	ldr	r1, [r5, #0]
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fe0:	6029      	str	r1, [r5, #0]
 8005fe2:	061d      	lsls	r5, r3, #24
 8005fe4:	d514      	bpl.n	8006010 <_printf_i+0x1ac>
 8005fe6:	07df      	lsls	r7, r3, #31
 8005fe8:	bf44      	itt	mi
 8005fea:	f043 0320 	orrmi.w	r3, r3, #32
 8005fee:	6023      	strmi	r3, [r4, #0]
 8005ff0:	b91e      	cbnz	r6, 8005ffa <_printf_i+0x196>
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	f023 0320 	bic.w	r3, r3, #32
 8005ff8:	6023      	str	r3, [r4, #0]
 8005ffa:	2310      	movs	r3, #16
 8005ffc:	e7b0      	b.n	8005f60 <_printf_i+0xfc>
 8005ffe:	6823      	ldr	r3, [r4, #0]
 8006000:	f043 0320 	orr.w	r3, r3, #32
 8006004:	6023      	str	r3, [r4, #0]
 8006006:	2378      	movs	r3, #120	; 0x78
 8006008:	4828      	ldr	r0, [pc, #160]	; (80060ac <_printf_i+0x248>)
 800600a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800600e:	e7e3      	b.n	8005fd8 <_printf_i+0x174>
 8006010:	0659      	lsls	r1, r3, #25
 8006012:	bf48      	it	mi
 8006014:	b2b6      	uxthmi	r6, r6
 8006016:	e7e6      	b.n	8005fe6 <_printf_i+0x182>
 8006018:	4615      	mov	r5, r2
 800601a:	e7bb      	b.n	8005f94 <_printf_i+0x130>
 800601c:	682b      	ldr	r3, [r5, #0]
 800601e:	6826      	ldr	r6, [r4, #0]
 8006020:	6961      	ldr	r1, [r4, #20]
 8006022:	1d18      	adds	r0, r3, #4
 8006024:	6028      	str	r0, [r5, #0]
 8006026:	0635      	lsls	r5, r6, #24
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	d501      	bpl.n	8006030 <_printf_i+0x1cc>
 800602c:	6019      	str	r1, [r3, #0]
 800602e:	e002      	b.n	8006036 <_printf_i+0x1d2>
 8006030:	0670      	lsls	r0, r6, #25
 8006032:	d5fb      	bpl.n	800602c <_printf_i+0x1c8>
 8006034:	8019      	strh	r1, [r3, #0]
 8006036:	2300      	movs	r3, #0
 8006038:	6123      	str	r3, [r4, #16]
 800603a:	4615      	mov	r5, r2
 800603c:	e7ba      	b.n	8005fb4 <_printf_i+0x150>
 800603e:	682b      	ldr	r3, [r5, #0]
 8006040:	1d1a      	adds	r2, r3, #4
 8006042:	602a      	str	r2, [r5, #0]
 8006044:	681d      	ldr	r5, [r3, #0]
 8006046:	6862      	ldr	r2, [r4, #4]
 8006048:	2100      	movs	r1, #0
 800604a:	4628      	mov	r0, r5
 800604c:	f7fa f8c0 	bl	80001d0 <memchr>
 8006050:	b108      	cbz	r0, 8006056 <_printf_i+0x1f2>
 8006052:	1b40      	subs	r0, r0, r5
 8006054:	6060      	str	r0, [r4, #4]
 8006056:	6863      	ldr	r3, [r4, #4]
 8006058:	6123      	str	r3, [r4, #16]
 800605a:	2300      	movs	r3, #0
 800605c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006060:	e7a8      	b.n	8005fb4 <_printf_i+0x150>
 8006062:	6923      	ldr	r3, [r4, #16]
 8006064:	462a      	mov	r2, r5
 8006066:	4649      	mov	r1, r9
 8006068:	4640      	mov	r0, r8
 800606a:	47d0      	blx	sl
 800606c:	3001      	adds	r0, #1
 800606e:	d0ab      	beq.n	8005fc8 <_printf_i+0x164>
 8006070:	6823      	ldr	r3, [r4, #0]
 8006072:	079b      	lsls	r3, r3, #30
 8006074:	d413      	bmi.n	800609e <_printf_i+0x23a>
 8006076:	68e0      	ldr	r0, [r4, #12]
 8006078:	9b03      	ldr	r3, [sp, #12]
 800607a:	4298      	cmp	r0, r3
 800607c:	bfb8      	it	lt
 800607e:	4618      	movlt	r0, r3
 8006080:	e7a4      	b.n	8005fcc <_printf_i+0x168>
 8006082:	2301      	movs	r3, #1
 8006084:	4632      	mov	r2, r6
 8006086:	4649      	mov	r1, r9
 8006088:	4640      	mov	r0, r8
 800608a:	47d0      	blx	sl
 800608c:	3001      	adds	r0, #1
 800608e:	d09b      	beq.n	8005fc8 <_printf_i+0x164>
 8006090:	3501      	adds	r5, #1
 8006092:	68e3      	ldr	r3, [r4, #12]
 8006094:	9903      	ldr	r1, [sp, #12]
 8006096:	1a5b      	subs	r3, r3, r1
 8006098:	42ab      	cmp	r3, r5
 800609a:	dcf2      	bgt.n	8006082 <_printf_i+0x21e>
 800609c:	e7eb      	b.n	8006076 <_printf_i+0x212>
 800609e:	2500      	movs	r5, #0
 80060a0:	f104 0619 	add.w	r6, r4, #25
 80060a4:	e7f5      	b.n	8006092 <_printf_i+0x22e>
 80060a6:	bf00      	nop
 80060a8:	08006335 	.word	0x08006335
 80060ac:	08006346 	.word	0x08006346

080060b0 <_sbrk_r>:
 80060b0:	b538      	push	{r3, r4, r5, lr}
 80060b2:	4d06      	ldr	r5, [pc, #24]	; (80060cc <_sbrk_r+0x1c>)
 80060b4:	2300      	movs	r3, #0
 80060b6:	4604      	mov	r4, r0
 80060b8:	4608      	mov	r0, r1
 80060ba:	602b      	str	r3, [r5, #0]
 80060bc:	f7fa fe90 	bl	8000de0 <_sbrk>
 80060c0:	1c43      	adds	r3, r0, #1
 80060c2:	d102      	bne.n	80060ca <_sbrk_r+0x1a>
 80060c4:	682b      	ldr	r3, [r5, #0]
 80060c6:	b103      	cbz	r3, 80060ca <_sbrk_r+0x1a>
 80060c8:	6023      	str	r3, [r4, #0]
 80060ca:	bd38      	pop	{r3, r4, r5, pc}
 80060cc:	20000254 	.word	0x20000254

080060d0 <__sread>:
 80060d0:	b510      	push	{r4, lr}
 80060d2:	460c      	mov	r4, r1
 80060d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060d8:	f000 f8a0 	bl	800621c <_read_r>
 80060dc:	2800      	cmp	r0, #0
 80060de:	bfab      	itete	ge
 80060e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80060e2:	89a3      	ldrhlt	r3, [r4, #12]
 80060e4:	181b      	addge	r3, r3, r0
 80060e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80060ea:	bfac      	ite	ge
 80060ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80060ee:	81a3      	strhlt	r3, [r4, #12]
 80060f0:	bd10      	pop	{r4, pc}

080060f2 <__swrite>:
 80060f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060f6:	461f      	mov	r7, r3
 80060f8:	898b      	ldrh	r3, [r1, #12]
 80060fa:	05db      	lsls	r3, r3, #23
 80060fc:	4605      	mov	r5, r0
 80060fe:	460c      	mov	r4, r1
 8006100:	4616      	mov	r6, r2
 8006102:	d505      	bpl.n	8006110 <__swrite+0x1e>
 8006104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006108:	2302      	movs	r3, #2
 800610a:	2200      	movs	r2, #0
 800610c:	f000 f868 	bl	80061e0 <_lseek_r>
 8006110:	89a3      	ldrh	r3, [r4, #12]
 8006112:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006116:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800611a:	81a3      	strh	r3, [r4, #12]
 800611c:	4632      	mov	r2, r6
 800611e:	463b      	mov	r3, r7
 8006120:	4628      	mov	r0, r5
 8006122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006126:	f000 b817 	b.w	8006158 <_write_r>

0800612a <__sseek>:
 800612a:	b510      	push	{r4, lr}
 800612c:	460c      	mov	r4, r1
 800612e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006132:	f000 f855 	bl	80061e0 <_lseek_r>
 8006136:	1c43      	adds	r3, r0, #1
 8006138:	89a3      	ldrh	r3, [r4, #12]
 800613a:	bf15      	itete	ne
 800613c:	6560      	strne	r0, [r4, #84]	; 0x54
 800613e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006142:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006146:	81a3      	strheq	r3, [r4, #12]
 8006148:	bf18      	it	ne
 800614a:	81a3      	strhne	r3, [r4, #12]
 800614c:	bd10      	pop	{r4, pc}

0800614e <__sclose>:
 800614e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006152:	f000 b813 	b.w	800617c <_close_r>
	...

08006158 <_write_r>:
 8006158:	b538      	push	{r3, r4, r5, lr}
 800615a:	4d07      	ldr	r5, [pc, #28]	; (8006178 <_write_r+0x20>)
 800615c:	4604      	mov	r4, r0
 800615e:	4608      	mov	r0, r1
 8006160:	4611      	mov	r1, r2
 8006162:	2200      	movs	r2, #0
 8006164:	602a      	str	r2, [r5, #0]
 8006166:	461a      	mov	r2, r3
 8006168:	f7fa fa04 	bl	8000574 <_write>
 800616c:	1c43      	adds	r3, r0, #1
 800616e:	d102      	bne.n	8006176 <_write_r+0x1e>
 8006170:	682b      	ldr	r3, [r5, #0]
 8006172:	b103      	cbz	r3, 8006176 <_write_r+0x1e>
 8006174:	6023      	str	r3, [r4, #0]
 8006176:	bd38      	pop	{r3, r4, r5, pc}
 8006178:	20000254 	.word	0x20000254

0800617c <_close_r>:
 800617c:	b538      	push	{r3, r4, r5, lr}
 800617e:	4d06      	ldr	r5, [pc, #24]	; (8006198 <_close_r+0x1c>)
 8006180:	2300      	movs	r3, #0
 8006182:	4604      	mov	r4, r0
 8006184:	4608      	mov	r0, r1
 8006186:	602b      	str	r3, [r5, #0]
 8006188:	f7fa fdf5 	bl	8000d76 <_close>
 800618c:	1c43      	adds	r3, r0, #1
 800618e:	d102      	bne.n	8006196 <_close_r+0x1a>
 8006190:	682b      	ldr	r3, [r5, #0]
 8006192:	b103      	cbz	r3, 8006196 <_close_r+0x1a>
 8006194:	6023      	str	r3, [r4, #0]
 8006196:	bd38      	pop	{r3, r4, r5, pc}
 8006198:	20000254 	.word	0x20000254

0800619c <_fstat_r>:
 800619c:	b538      	push	{r3, r4, r5, lr}
 800619e:	4d07      	ldr	r5, [pc, #28]	; (80061bc <_fstat_r+0x20>)
 80061a0:	2300      	movs	r3, #0
 80061a2:	4604      	mov	r4, r0
 80061a4:	4608      	mov	r0, r1
 80061a6:	4611      	mov	r1, r2
 80061a8:	602b      	str	r3, [r5, #0]
 80061aa:	f7fa fdf0 	bl	8000d8e <_fstat>
 80061ae:	1c43      	adds	r3, r0, #1
 80061b0:	d102      	bne.n	80061b8 <_fstat_r+0x1c>
 80061b2:	682b      	ldr	r3, [r5, #0]
 80061b4:	b103      	cbz	r3, 80061b8 <_fstat_r+0x1c>
 80061b6:	6023      	str	r3, [r4, #0]
 80061b8:	bd38      	pop	{r3, r4, r5, pc}
 80061ba:	bf00      	nop
 80061bc:	20000254 	.word	0x20000254

080061c0 <_isatty_r>:
 80061c0:	b538      	push	{r3, r4, r5, lr}
 80061c2:	4d06      	ldr	r5, [pc, #24]	; (80061dc <_isatty_r+0x1c>)
 80061c4:	2300      	movs	r3, #0
 80061c6:	4604      	mov	r4, r0
 80061c8:	4608      	mov	r0, r1
 80061ca:	602b      	str	r3, [r5, #0]
 80061cc:	f7fa fdef 	bl	8000dae <_isatty>
 80061d0:	1c43      	adds	r3, r0, #1
 80061d2:	d102      	bne.n	80061da <_isatty_r+0x1a>
 80061d4:	682b      	ldr	r3, [r5, #0]
 80061d6:	b103      	cbz	r3, 80061da <_isatty_r+0x1a>
 80061d8:	6023      	str	r3, [r4, #0]
 80061da:	bd38      	pop	{r3, r4, r5, pc}
 80061dc:	20000254 	.word	0x20000254

080061e0 <_lseek_r>:
 80061e0:	b538      	push	{r3, r4, r5, lr}
 80061e2:	4d07      	ldr	r5, [pc, #28]	; (8006200 <_lseek_r+0x20>)
 80061e4:	4604      	mov	r4, r0
 80061e6:	4608      	mov	r0, r1
 80061e8:	4611      	mov	r1, r2
 80061ea:	2200      	movs	r2, #0
 80061ec:	602a      	str	r2, [r5, #0]
 80061ee:	461a      	mov	r2, r3
 80061f0:	f7fa fde8 	bl	8000dc4 <_lseek>
 80061f4:	1c43      	adds	r3, r0, #1
 80061f6:	d102      	bne.n	80061fe <_lseek_r+0x1e>
 80061f8:	682b      	ldr	r3, [r5, #0]
 80061fa:	b103      	cbz	r3, 80061fe <_lseek_r+0x1e>
 80061fc:	6023      	str	r3, [r4, #0]
 80061fe:	bd38      	pop	{r3, r4, r5, pc}
 8006200:	20000254 	.word	0x20000254

08006204 <__malloc_lock>:
 8006204:	4801      	ldr	r0, [pc, #4]	; (800620c <__malloc_lock+0x8>)
 8006206:	f7ff bb1d 	b.w	8005844 <__retarget_lock_acquire_recursive>
 800620a:	bf00      	nop
 800620c:	20000248 	.word	0x20000248

08006210 <__malloc_unlock>:
 8006210:	4801      	ldr	r0, [pc, #4]	; (8006218 <__malloc_unlock+0x8>)
 8006212:	f7ff bb18 	b.w	8005846 <__retarget_lock_release_recursive>
 8006216:	bf00      	nop
 8006218:	20000248 	.word	0x20000248

0800621c <_read_r>:
 800621c:	b538      	push	{r3, r4, r5, lr}
 800621e:	4d07      	ldr	r5, [pc, #28]	; (800623c <_read_r+0x20>)
 8006220:	4604      	mov	r4, r0
 8006222:	4608      	mov	r0, r1
 8006224:	4611      	mov	r1, r2
 8006226:	2200      	movs	r2, #0
 8006228:	602a      	str	r2, [r5, #0]
 800622a:	461a      	mov	r2, r3
 800622c:	f7fa fd86 	bl	8000d3c <_read>
 8006230:	1c43      	adds	r3, r0, #1
 8006232:	d102      	bne.n	800623a <_read_r+0x1e>
 8006234:	682b      	ldr	r3, [r5, #0]
 8006236:	b103      	cbz	r3, 800623a <_read_r+0x1e>
 8006238:	6023      	str	r3, [r4, #0]
 800623a:	bd38      	pop	{r3, r4, r5, pc}
 800623c:	20000254 	.word	0x20000254

08006240 <_init>:
 8006240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006242:	bf00      	nop
 8006244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006246:	bc08      	pop	{r3}
 8006248:	469e      	mov	lr, r3
 800624a:	4770      	bx	lr

0800624c <_fini>:
 800624c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800624e:	bf00      	nop
 8006250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006252:	bc08      	pop	{r3}
 8006254:	469e      	mov	lr, r3
 8006256:	4770      	bx	lr
