
M4N3D_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000698  0800e030  0800e030  0001e030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e6c8  0800e6c8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e6c8  0800e6c8  0001e6c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e6d0  0800e6d0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e6d0  0800e6d0  0001e6d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e6d4  0800e6d4  0001e6d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800e6d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000454  200001e0  0800e8b4  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000634  0800e8b4  00020634  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014981  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000300b  00000000  00000000  00034b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  00037b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  00038c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a680  00000000  00000000  00039b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013df4  00000000  00000000  000641c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fff37  00000000  00000000  00077fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00177eeb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005adc  00000000  00000000  00177f3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e014 	.word	0x0800e014

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800e014 	.word	0x0800e014

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <COM_clearBuff>:
void COM_parsePacket();
void COM_sendACK();


void COM_clearBuff()
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	COM_state = COM_IDLE;
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <COM_clearBuff+0x2c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
	COM_rx_head = COM_RxBuff;
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <COM_clearBuff+0x30>)
 8000f98:	4a09      	ldr	r2, [pc, #36]	; (8000fc0 <COM_clearBuff+0x34>)
 8000f9a:	601a      	str	r2, [r3, #0]
	COM_data_len = 0;
 8000f9c:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <COM_clearBuff+0x38>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(huart_com, (uint8_t*)COM_rx_head, 1);
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <COM_clearBuff+0x3c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <COM_clearBuff+0x30>)
 8000fa8:	6811      	ldr	r1, [r2, #0]
 8000faa:	2201      	movs	r2, #1
 8000fac:	4618      	mov	r0, r3
 8000fae:	f006 f9b7 	bl	8007320 <HAL_UART_Receive_IT>
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200001fc 	.word	0x200001fc
 8000fbc:	20000320 	.word	0x20000320
 8000fc0:	20000220 	.word	0x20000220
 8000fc4:	2000021c 	.word	0x2000021c
 8000fc8:	20000218 	.word	0x20000218

08000fcc <COM_Init>:

void COM_Init(UART_HandleTypeDef* huart)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	COM_data.available = 0;
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <COM_Init+0x20>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
	huart_com = huart;
 8000fda:	4a05      	ldr	r2, [pc, #20]	; (8000ff0 <COM_Init+0x24>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6013      	str	r3, [r2, #0]
	COM_clearBuff();
 8000fe0:	f7ff ffd4 	bl	8000f8c <COM_clearBuff>
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000200 	.word	0x20000200
 8000ff0:	20000218 	.word	0x20000218

08000ff4 <COM_uartIRQ>:

void COM_uartIRQ(UART_HandleTypeDef* huart)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	if(huart == huart_com)
 8000ffc:	4b4e      	ldr	r3, [pc, #312]	; (8001138 <COM_uartIRQ+0x144>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	429a      	cmp	r2, r3
 8001004:	f040 8090 	bne.w	8001128 <COM_uartIRQ+0x134>
	{
		switch(COM_state)
 8001008:	4b4c      	ldr	r3, [pc, #304]	; (800113c <COM_uartIRQ+0x148>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b06      	cmp	r3, #6
 8001010:	f200 808d 	bhi.w	800112e <COM_uartIRQ+0x13a>
 8001014:	a201      	add	r2, pc, #4	; (adr r2, 800101c <COM_uartIRQ+0x28>)
 8001016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101a:	bf00      	nop
 800101c:	08001039 	.word	0x08001039
 8001020:	0800106d 	.word	0x0800106d
 8001024:	0800109f 	.word	0x0800109f
 8001028:	080010f9 	.word	0x080010f9
 800102c:	080010d1 	.word	0x080010d1
 8001030:	08001121 	.word	0x08001121
 8001034:	0800112d 	.word	0x0800112d
		{
		case COM_IDLE: //received 1st START
			if(COM_rx_head[0] == 0xFF)
 8001038:	4b41      	ldr	r3, [pc, #260]	; (8001140 <COM_uartIRQ+0x14c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2bff      	cmp	r3, #255	; 0xff
 8001042:	d110      	bne.n	8001066 <COM_uartIRQ+0x72>
			{
				COM_state = COM_START_CHECK;
 8001044:	4b3d      	ldr	r3, [pc, #244]	; (800113c <COM_uartIRQ+0x148>)
 8001046:	2201      	movs	r2, #1
 8001048:	701a      	strb	r2, [r3, #0]
				COM_rx_head++;
 800104a:	4b3d      	ldr	r3, [pc, #244]	; (8001140 <COM_uartIRQ+0x14c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	3301      	adds	r3, #1
 8001050:	4a3b      	ldr	r2, [pc, #236]	; (8001140 <COM_uartIRQ+0x14c>)
 8001052:	6013      	str	r3, [r2, #0]
				HAL_UART_Receive_IT(huart_com, (uint8_t*)COM_rx_head, 1);
 8001054:	4b38      	ldr	r3, [pc, #224]	; (8001138 <COM_uartIRQ+0x144>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a39      	ldr	r2, [pc, #228]	; (8001140 <COM_uartIRQ+0x14c>)
 800105a:	6811      	ldr	r1, [r2, #0]
 800105c:	2201      	movs	r2, #1
 800105e:	4618      	mov	r0, r3
 8001060:	f006 f95e 	bl	8007320 <HAL_UART_Receive_IT>
			}
			else
				COM_clearBuff();
			break;
 8001064:	e063      	b.n	800112e <COM_uartIRQ+0x13a>
				COM_clearBuff();
 8001066:	f7ff ff91 	bl	8000f8c <COM_clearBuff>
			break;
 800106a:	e060      	b.n	800112e <COM_uartIRQ+0x13a>

		case COM_START_CHECK: //received 2nd START
			if(COM_RxBuff[1] == 0xFF)
 800106c:	4b35      	ldr	r3, [pc, #212]	; (8001144 <COM_uartIRQ+0x150>)
 800106e:	785b      	ldrb	r3, [r3, #1]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2bff      	cmp	r3, #255	; 0xff
 8001074:	d110      	bne.n	8001098 <COM_uartIRQ+0xa4>
			{
				COM_state = COM_LEN;
 8001076:	4b31      	ldr	r3, [pc, #196]	; (800113c <COM_uartIRQ+0x148>)
 8001078:	2202      	movs	r2, #2
 800107a:	701a      	strb	r2, [r3, #0]
				COM_rx_head++;
 800107c:	4b30      	ldr	r3, [pc, #192]	; (8001140 <COM_uartIRQ+0x14c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	3301      	adds	r3, #1
 8001082:	4a2f      	ldr	r2, [pc, #188]	; (8001140 <COM_uartIRQ+0x14c>)
 8001084:	6013      	str	r3, [r2, #0]
				HAL_UART_Receive_IT(huart_com, (uint8_t*)COM_rx_head, 1);
 8001086:	4b2c      	ldr	r3, [pc, #176]	; (8001138 <COM_uartIRQ+0x144>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a2d      	ldr	r2, [pc, #180]	; (8001140 <COM_uartIRQ+0x14c>)
 800108c:	6811      	ldr	r1, [r2, #0]
 800108e:	2201      	movs	r2, #1
 8001090:	4618      	mov	r0, r3
 8001092:	f006 f945 	bl	8007320 <HAL_UART_Receive_IT>
			}
			else
				COM_clearBuff();

			break;
 8001096:	e04a      	b.n	800112e <COM_uartIRQ+0x13a>
				COM_clearBuff();
 8001098:	f7ff ff78 	bl	8000f8c <COM_clearBuff>
			break;
 800109c:	e047      	b.n	800112e <COM_uartIRQ+0x13a>

		case COM_LEN: //received LEN
			COM_state = COM_DATA;
 800109e:	4b27      	ldr	r3, [pc, #156]	; (800113c <COM_uartIRQ+0x148>)
 80010a0:	2204      	movs	r2, #4
 80010a2:	701a      	strb	r2, [r3, #0]
			COM_data_len = COM_RxBuff[2];
 80010a4:	4b27      	ldr	r3, [pc, #156]	; (8001144 <COM_uartIRQ+0x150>)
 80010a6:	789b      	ldrb	r3, [r3, #2]
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4b27      	ldr	r3, [pc, #156]	; (8001148 <COM_uartIRQ+0x154>)
 80010ac:	701a      	strb	r2, [r3, #0]
			COM_rx_head++;
 80010ae:	4b24      	ldr	r3, [pc, #144]	; (8001140 <COM_uartIRQ+0x14c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	3301      	adds	r3, #1
 80010b4:	4a22      	ldr	r2, [pc, #136]	; (8001140 <COM_uartIRQ+0x14c>)
 80010b6:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(huart_com, (uint8_t*)COM_rx_head, COM_data_len);
 80010b8:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <COM_uartIRQ+0x144>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a20      	ldr	r2, [pc, #128]	; (8001140 <COM_uartIRQ+0x14c>)
 80010be:	6811      	ldr	r1, [r2, #0]
 80010c0:	4a21      	ldr	r2, [pc, #132]	; (8001148 <COM_uartIRQ+0x154>)
 80010c2:	7812      	ldrb	r2, [r2, #0]
 80010c4:	b2d2      	uxtb	r2, r2
 80010c6:	b292      	uxth	r2, r2
 80010c8:	4618      	mov	r0, r3
 80010ca:	f006 f929 	bl	8007320 <HAL_UART_Receive_IT>
			break;
 80010ce:	e02e      	b.n	800112e <COM_uartIRQ+0x13a>

		case COM_DATA: //received DATA
			COM_state = COM_CHECKSUM;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	; (800113c <COM_uartIRQ+0x148>)
 80010d2:	2203      	movs	r2, #3
 80010d4:	701a      	strb	r2, [r3, #0]
			COM_rx_head += COM_data_len;
 80010d6:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <COM_uartIRQ+0x154>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <COM_uartIRQ+0x14c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4413      	add	r3, r2
 80010e2:	4a17      	ldr	r2, [pc, #92]	; (8001140 <COM_uartIRQ+0x14c>)
 80010e4:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(huart_com, (uint8_t*)COM_rx_head, 1);
 80010e6:	4b14      	ldr	r3, [pc, #80]	; (8001138 <COM_uartIRQ+0x144>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a15      	ldr	r2, [pc, #84]	; (8001140 <COM_uartIRQ+0x14c>)
 80010ec:	6811      	ldr	r1, [r2, #0]
 80010ee:	2201      	movs	r2, #1
 80010f0:	4618      	mov	r0, r3
 80010f2:	f006 f915 	bl	8007320 <HAL_UART_Receive_IT>
			break;
 80010f6:	e01a      	b.n	800112e <COM_uartIRQ+0x13a>

		case COM_CHECKSUM: //received CHECKSUM
			COM_state = COM_ENDL;
 80010f8:	4b10      	ldr	r3, [pc, #64]	; (800113c <COM_uartIRQ+0x148>)
 80010fa:	2205      	movs	r2, #5
 80010fc:	701a      	strb	r2, [r3, #0]
			COM_rx_head += COM_data_len;
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <COM_uartIRQ+0x154>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <COM_uartIRQ+0x14c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4413      	add	r3, r2
 800110a:	4a0d      	ldr	r2, [pc, #52]	; (8001140 <COM_uartIRQ+0x14c>)
 800110c:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(huart_com, (uint8_t*)COM_rx_head, 1);
 800110e:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <COM_uartIRQ+0x144>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a0b      	ldr	r2, [pc, #44]	; (8001140 <COM_uartIRQ+0x14c>)
 8001114:	6811      	ldr	r1, [r2, #0]
 8001116:	2201      	movs	r2, #1
 8001118:	4618      	mov	r0, r3
 800111a:	f006 f901 	bl	8007320 <HAL_UART_Receive_IT>
			break;
 800111e:	e006      	b.n	800112e <COM_uartIRQ+0x13a>

		case COM_ENDL: //received \n
			COM_state = COM_CPLT;
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <COM_uartIRQ+0x148>)
 8001122:	2206      	movs	r2, #6
 8001124:	701a      	strb	r2, [r3, #0]
			break;
 8001126:	e002      	b.n	800112e <COM_uartIRQ+0x13a>

		case COM_CPLT: //complete
			break;
		}
	}
 8001128:	bf00      	nop
 800112a:	e000      	b.n	800112e <COM_uartIRQ+0x13a>
			break;
 800112c:	bf00      	nop
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000218 	.word	0x20000218
 800113c:	200001fc 	.word	0x200001fc
 8001140:	20000320 	.word	0x20000320
 8001144:	20000220 	.word	0x20000220
 8001148:	2000021c 	.word	0x2000021c

0800114c <COM_rxLoop>:

void COM_rxLoop()
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
	if( COM_state == COM_CPLT)
 8001152:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <COM_rxLoop+0x64>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	b2db      	uxtb	r3, r3
 8001158:	2b06      	cmp	r3, #6
 800115a:	d124      	bne.n	80011a6 <COM_rxLoop+0x5a>
	{
		uint8_t checksum = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	71fb      	strb	r3, [r7, #7]
		for( uint8_t i = 2; i < COM_data_len-1; i++)
 8001160:	2302      	movs	r3, #2
 8001162:	71bb      	strb	r3, [r7, #6]
 8001164:	e009      	b.n	800117a <COM_rxLoop+0x2e>
			checksum += COM_RxBuff[i];
 8001166:	79bb      	ldrb	r3, [r7, #6]
 8001168:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <COM_rxLoop+0x68>)
 800116a:	5cd3      	ldrb	r3, [r2, r3]
 800116c:	b2da      	uxtb	r2, r3
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	4413      	add	r3, r2
 8001172:	71fb      	strb	r3, [r7, #7]
		for( uint8_t i = 2; i < COM_data_len-1; i++)
 8001174:	79bb      	ldrb	r3, [r7, #6]
 8001176:	3301      	adds	r3, #1
 8001178:	71bb      	strb	r3, [r7, #6]
 800117a:	79ba      	ldrb	r2, [r7, #6]
 800117c:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <COM_rxLoop+0x6c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	3b01      	subs	r3, #1
 8001184:	429a      	cmp	r2, r3
 8001186:	dbee      	blt.n	8001166 <COM_rxLoop+0x1a>
		checksum = ( ~checksum ) & 0xFF;
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	43db      	mvns	r3, r3
 800118c:	71fb      	strb	r3, [r7, #7]

//		if( checksum == COM_RxBuff[2+COM_data_len] )
		if(1)
		{
			COM_parsePacket();
 800118e:	f000 f817 	bl	80011c0 <COM_parsePacket>
			COM_data.available = 1;
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <COM_rxLoop+0x70>)
 8001194:	2201      	movs	r2, #1
 8001196:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1);
 8001198:	2001      	movs	r0, #1
 800119a:	f002 fbeb 	bl	8003974 <HAL_Delay>
			COM_sendACK();
 800119e:	f000 f8d5 	bl	800134c <COM_sendACK>
		}
		COM_clearBuff();
 80011a2:	f7ff fef3 	bl	8000f8c <COM_clearBuff>
	}
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200001fc 	.word	0x200001fc
 80011b4:	20000220 	.word	0x20000220
 80011b8:	2000021c 	.word	0x2000021c
 80011bc:	20000200 	.word	0x20000200

080011c0 <COM_parsePacket>:

void COM_parsePacket()
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
	floatArray f_pool;
	u32Array i_pool;

	COM_data.cmd = COM_RxBuff[3];
 80011c6:	4b21      	ldr	r3, [pc, #132]	; (800124c <COM_parsePacket+0x8c>)
 80011c8:	78db      	ldrb	r3, [r3, #3]
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	4b20      	ldr	r3, [pc, #128]	; (8001250 <COM_parsePacket+0x90>)
 80011ce:	705a      	strb	r2, [r3, #1]
	switch(COM_data.cmd)
 80011d0:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <COM_parsePacket+0x90>)
 80011d2:	785b      	ldrb	r3, [r3, #1]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	3b01      	subs	r3, #1
 80011d8:	2b05      	cmp	r3, #5
 80011da:	d830      	bhi.n	800123e <COM_parsePacket+0x7e>
 80011dc:	a201      	add	r2, pc, #4	; (adr r2, 80011e4 <COM_parsePacket+0x24>)
 80011de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e2:	bf00      	nop
 80011e4:	0800123d 	.word	0x0800123d
 80011e8:	0800123d 	.word	0x0800123d
 80011ec:	080011fd 	.word	0x080011fd
 80011f0:	080011fd 	.word	0x080011fd
 80011f4:	08001223 	.word	0x08001223
 80011f8:	08001231 	.word	0x08001231
	case CMD_STOP:
		break;

	case CMD_MOVE_L:
	case CMD_MOVE_J:
		memcpy( f_pool.bytes, (uint8_t*)COM_RxBuff+4, 4);
 80011fc:	4b15      	ldr	r3, [pc, #84]	; (8001254 <COM_parsePacket+0x94>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	607b      	str	r3, [r7, #4]
		COM_data.f_param1 = f_pool.var;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a12      	ldr	r2, [pc, #72]	; (8001250 <COM_parsePacket+0x90>)
 8001206:	6053      	str	r3, [r2, #4]
		memcpy( f_pool.bytes, (uint8_t*)COM_RxBuff+8, 4);
 8001208:	4b13      	ldr	r3, [pc, #76]	; (8001258 <COM_parsePacket+0x98>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	607b      	str	r3, [r7, #4]
		COM_data.f_param2 = f_pool.var;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a0f      	ldr	r2, [pc, #60]	; (8001250 <COM_parsePacket+0x90>)
 8001212:	6093      	str	r3, [r2, #8]
		memcpy( f_pool.bytes, (uint8_t*)COM_RxBuff+12, 4);
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <COM_parsePacket+0x9c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	607b      	str	r3, [r7, #4]
		COM_data.f_param3 = f_pool.var;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a0c      	ldr	r2, [pc, #48]	; (8001250 <COM_parsePacket+0x90>)
 800121e:	60d3      	str	r3, [r2, #12]
		break;
 8001220:	e00d      	b.n	800123e <COM_parsePacket+0x7e>

	case CMD_WAIT:
		memcpy( i_pool.bytes, (uint8_t*)COM_RxBuff+4, 4);
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <COM_parsePacket+0x94>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	603b      	str	r3, [r7, #0]
		COM_data.u32_param = i_pool.var;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	4a09      	ldr	r2, [pc, #36]	; (8001250 <COM_parsePacket+0x90>)
 800122c:	6113      	str	r3, [r2, #16]
		break;
 800122e:	e006      	b.n	800123e <COM_parsePacket+0x7e>

	case CMD_MAGNET:
		COM_data.u8_param = COM_RxBuff[4];
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <COM_parsePacket+0x8c>)
 8001232:	791b      	ldrb	r3, [r3, #4]
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <COM_parsePacket+0x90>)
 8001238:	751a      	strb	r2, [r3, #20]
		break;
 800123a:	e000      	b.n	800123e <COM_parsePacket+0x7e>
		break;
 800123c:	bf00      	nop
	}
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000220 	.word	0x20000220
 8001250:	20000200 	.word	0x20000200
 8001254:	20000224 	.word	0x20000224
 8001258:	20000228 	.word	0x20000228
 800125c:	2000022c 	.word	0x2000022c

08001260 <COM_sendPacket>:

void COM_sendPacket(uint8_t* data, uint8_t d_len)
{
 8001260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001264:	b087      	sub	sp, #28
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	460b      	mov	r3, r1
 800126c:	70fb      	strb	r3, [r7, #3]
 800126e:	466b      	mov	r3, sp
 8001270:	461e      	mov	r6, r3
	uint8_t base_len = 5;
 8001272:	2305      	movs	r3, #5
 8001274:	757b      	strb	r3, [r7, #21]
	uint8_t len = base_len + d_len;
 8001276:	7d7a      	ldrb	r2, [r7, #21]
 8001278:	78fb      	ldrb	r3, [r7, #3]
 800127a:	4413      	add	r3, r2
 800127c:	753b      	strb	r3, [r7, #20]

	uint8_t packet[len];
 800127e:	7d39      	ldrb	r1, [r7, #20]
 8001280:	460b      	mov	r3, r1
 8001282:	3b01      	subs	r3, #1
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	b2cb      	uxtb	r3, r1
 8001288:	2200      	movs	r2, #0
 800128a:	4698      	mov	r8, r3
 800128c:	4691      	mov	r9, r2
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	f04f 0300 	mov.w	r3, #0
 8001296:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800129a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800129e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012a2:	b2cb      	uxtb	r3, r1
 80012a4:	2200      	movs	r2, #0
 80012a6:	461c      	mov	r4, r3
 80012a8:	4615      	mov	r5, r2
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	f04f 0300 	mov.w	r3, #0
 80012b2:	00eb      	lsls	r3, r5, #3
 80012b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012b8:	00e2      	lsls	r2, r4, #3
 80012ba:	460b      	mov	r3, r1
 80012bc:	3307      	adds	r3, #7
 80012be:	08db      	lsrs	r3, r3, #3
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	ebad 0d03 	sub.w	sp, sp, r3
 80012c6:	466b      	mov	r3, sp
 80012c8:	3300      	adds	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
	packet[0] = 0xFF;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	22ff      	movs	r2, #255	; 0xff
 80012d0:	701a      	strb	r2, [r3, #0]
	packet[1] = 0xFF;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	22ff      	movs	r2, #255	; 0xff
 80012d6:	705a      	strb	r2, [r3, #1]
	packet[2] = d_len;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	78fa      	ldrb	r2, [r7, #3]
 80012dc:	709a      	strb	r2, [r3, #2]
	memcpy(packet+3, data, d_len);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	3303      	adds	r3, #3
 80012e2:	78fa      	ldrb	r2, [r7, #3]
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f007 fb80 	bl	80089ec <memcpy>

	//calculate checksum
	uint8_t checksum = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	75bb      	strb	r3, [r7, #22]
	for( uint8_t i = 2; i < len-2; i++)
 80012f0:	2302      	movs	r3, #2
 80012f2:	75fb      	strb	r3, [r7, #23]
 80012f4:	e008      	b.n	8001308 <COM_sendPacket+0xa8>
		checksum += packet[i];
 80012f6:	7dfb      	ldrb	r3, [r7, #23]
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	5cd2      	ldrb	r2, [r2, r3]
 80012fc:	7dbb      	ldrb	r3, [r7, #22]
 80012fe:	4413      	add	r3, r2
 8001300:	75bb      	strb	r3, [r7, #22]
	for( uint8_t i = 2; i < len-2; i++)
 8001302:	7dfb      	ldrb	r3, [r7, #23]
 8001304:	3301      	adds	r3, #1
 8001306:	75fb      	strb	r3, [r7, #23]
 8001308:	7dfa      	ldrb	r2, [r7, #23]
 800130a:	7d3b      	ldrb	r3, [r7, #20]
 800130c:	3b02      	subs	r3, #2
 800130e:	429a      	cmp	r2, r3
 8001310:	dbf1      	blt.n	80012f6 <COM_sendPacket+0x96>
	checksum = ( ~checksum ) & 0xFF;
 8001312:	7dbb      	ldrb	r3, [r7, #22]
 8001314:	43db      	mvns	r3, r3
 8001316:	75bb      	strb	r3, [r7, #22]
	packet[len-2] = checksum;
 8001318:	7d3b      	ldrb	r3, [r7, #20]
 800131a:	3b02      	subs	r3, #2
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	7db9      	ldrb	r1, [r7, #22]
 8001320:	54d1      	strb	r1, [r2, r3]
	packet[len-1] = '\n';
 8001322:	7d3b      	ldrb	r3, [r7, #20]
 8001324:	3b01      	subs	r3, #1
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	210a      	movs	r1, #10
 800132a:	54d1      	strb	r1, [r2, r3]

	//send via uart
	HAL_UART_Transmit(huart_com, packet, len, 10);
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <COM_sendPacket+0xe8>)
 800132e:	6818      	ldr	r0, [r3, #0]
 8001330:	7d3b      	ldrb	r3, [r7, #20]
 8001332:	b29a      	uxth	r2, r3
 8001334:	230a      	movs	r3, #10
 8001336:	68f9      	ldr	r1, [r7, #12]
 8001338:	f005 ff5e 	bl	80071f8 <HAL_UART_Transmit>
 800133c:	46b5      	mov	sp, r6
}
 800133e:	bf00      	nop
 8001340:	371c      	adds	r7, #28
 8001342:	46bd      	mov	sp, r7
 8001344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001348:	20000218 	.word	0x20000218

0800134c <COM_sendACK>:

void COM_sendACK()
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
	uint8_t packet[] = { COM_ACK };
 8001352:	230b      	movs	r3, #11
 8001354:	713b      	strb	r3, [r7, #4]
	COM_sendPacket(packet, 1);
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	2101      	movs	r1, #1
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff ff80 	bl	8001260 <COM_sendPacket>
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <COM_sendDone>:

void COM_sendDone()
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
	uint8_t packet[] = { COM_DONE };
 800136e:	230c      	movs	r3, #12
 8001370:	713b      	strb	r3, [r7, #4]
	COM_sendPacket(packet, 1);
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	2101      	movs	r1, #1
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ff72 	bl	8001260 <COM_sendPacket>
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <COM_sendInfo>:

void COM_sendInfo(float x, float y, float z, float q1, float q2, float q3, uint8_t magnet)
{
 8001384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001388:	b093      	sub	sp, #76	; 0x4c
 800138a:	af00      	add	r7, sp, #0
 800138c:	ed87 0a07 	vstr	s0, [r7, #28]
 8001390:	edc7 0a06 	vstr	s1, [r7, #24]
 8001394:	ed87 1a05 	vstr	s2, [r7, #20]
 8001398:	edc7 1a04 	vstr	s3, [r7, #16]
 800139c:	ed87 2a03 	vstr	s4, [r7, #12]
 80013a0:	edc7 2a02 	vstr	s5, [r7, #8]
 80013a4:	4603      	mov	r3, r0
 80013a6:	71fb      	strb	r3, [r7, #7]
 80013a8:	466b      	mov	r3, sp
 80013aa:	461e      	mov	r6, r3
	const uint8_t len = 1+4*6+1;
 80013ac:	231a      	movs	r3, #26
 80013ae:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	float input_arr[6] = { x, y, z, q1, q2, q3};
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	633b      	str	r3, [r7, #48]	; 0x30
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	637b      	str	r3, [r7, #52]	; 0x34
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	63bb      	str	r3, [r7, #56]	; 0x38
	floatArray pool;

	uint8_t packet[len];
 80013ca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80013ce:	3b01      	subs	r3, #1
 80013d0:	643b      	str	r3, [r7, #64]	; 0x40
 80013d2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80013d6:	2200      	movs	r2, #0
 80013d8:	4698      	mov	r8, r3
 80013da:	4691      	mov	r9, r2
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	f04f 0300 	mov.w	r3, #0
 80013e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013f0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80013f4:	2200      	movs	r2, #0
 80013f6:	461c      	mov	r4, r3
 80013f8:	4615      	mov	r5, r2
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	f04f 0300 	mov.w	r3, #0
 8001402:	00eb      	lsls	r3, r5, #3
 8001404:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001408:	00e2      	lsls	r2, r4, #3
 800140a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800140e:	3307      	adds	r3, #7
 8001410:	08db      	lsrs	r3, r3, #3
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	ebad 0d03 	sub.w	sp, sp, r3
 8001418:	466b      	mov	r3, sp
 800141a:	3300      	adds	r3, #0
 800141c:	63fb      	str	r3, [r7, #60]	; 0x3c

	packet[0] = COM_INFO;
 800141e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001420:	220d      	movs	r2, #13
 8001422:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < 6; i++)
 8001424:	2300      	movs	r3, #0
 8001426:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800142a:	e014      	b.n	8001456 <COM_sendInfo+0xd2>
	{
		pool.var = input_arr[i];
 800142c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	3348      	adds	r3, #72	; 0x48
 8001434:	443b      	add	r3, r7
 8001436:	3b24      	subs	r3, #36	; 0x24
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	623b      	str	r3, [r7, #32]
		memcpy(packet+1 + i*4, pool.bytes, 4);
 800143c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	3301      	adds	r3, #1
 8001444:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001446:	4413      	add	r3, r2
 8001448:	6a3a      	ldr	r2, [r7, #32]
 800144a:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 6; i++)
 800144c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001450:	3301      	adds	r3, #1
 8001452:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001456:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800145a:	2b05      	cmp	r3, #5
 800145c:	d9e6      	bls.n	800142c <COM_sendInfo+0xa8>
	}
	packet[len-1] = magnet;
 800145e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001462:	3b01      	subs	r3, #1
 8001464:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001466:	79f9      	ldrb	r1, [r7, #7]
 8001468:	54d1      	strb	r1, [r2, r3]
	COM_sendPacket(packet, len);
 800146a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800146e:	4619      	mov	r1, r3
 8001470:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001472:	f7ff fef5 	bl	8001260 <COM_sendPacket>
 8001476:	46b5      	mov	sp, r6
}
 8001478:	bf00      	nop
 800147a:	374c      	adds	r7, #76	; 0x4c
 800147c:	46bd      	mov	sp, r7
 800147e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001482 <_write>:

int _write(int file, unsigned char *ptr, int len)
{
 8001482:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001486:	b087      	sub	sp, #28
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	466b      	mov	r3, sp
 8001492:	461e      	mov	r6, r3
	uint8_t packet[len+1];
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	1c59      	adds	r1, r3, #1
 8001498:	1e4b      	subs	r3, r1, #1
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	460a      	mov	r2, r1
 800149e:	2300      	movs	r3, #0
 80014a0:	4690      	mov	r8, r2
 80014a2:	4699      	mov	r9, r3
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	f04f 0300 	mov.w	r3, #0
 80014ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014b8:	460a      	mov	r2, r1
 80014ba:	2300      	movs	r3, #0
 80014bc:	4614      	mov	r4, r2
 80014be:	461d      	mov	r5, r3
 80014c0:	f04f 0200 	mov.w	r2, #0
 80014c4:	f04f 0300 	mov.w	r3, #0
 80014c8:	00eb      	lsls	r3, r5, #3
 80014ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014ce:	00e2      	lsls	r2, r4, #3
 80014d0:	460b      	mov	r3, r1
 80014d2:	3307      	adds	r3, #7
 80014d4:	08db      	lsrs	r3, r3, #3
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	ebad 0d03 	sub.w	sp, sp, r3
 80014dc:	466b      	mov	r3, sp
 80014de:	3300      	adds	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
	packet[0] = COM_MSG;
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	220e      	movs	r2, #14
 80014e6:	701a      	strb	r2, [r3, #0]
	memcpy(packet+1, ptr, len);
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	3301      	adds	r3, #1
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	68b9      	ldr	r1, [r7, #8]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f007 fa7b 	bl	80089ec <memcpy>
	COM_sendPacket(packet, len+1);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	3301      	adds	r3, #1
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	4619      	mov	r1, r3
 8001500:	6938      	ldr	r0, [r7, #16]
 8001502:	f7ff fead 	bl	8001260 <COM_sendPacket>
	return len;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	46b5      	mov	sp, r6
}
 800150a:	4618      	mov	r0, r3
 800150c:	371c      	adds	r7, #28
 800150e:	46bd      	mov	sp, r7
 8001510:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001514 <RobotParams_Init>:
RobotParams_t RobotParams;
CommandParms_t CommandParams;


void RobotParams_Init(double l1, double l2, double l3, double l4, double l5, double q1_off, double q2_off, double q3_off )
{
 8001514:	b480      	push	{r7}
 8001516:	b091      	sub	sp, #68	; 0x44
 8001518:	af00      	add	r7, sp, #0
 800151a:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 800151e:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 8001522:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 8001526:	ed87 3b08 	vstr	d3, [r7, #32]
 800152a:	ed87 4b06 	vstr	d4, [r7, #24]
 800152e:	ed87 5b04 	vstr	d5, [r7, #16]
 8001532:	ed87 6b02 	vstr	d6, [r7, #8]
 8001536:	ed87 7b00 	vstr	d7, [r7]
    RobotParams.l1 = l1;     // base to q2
 800153a:	492d      	ldr	r1, [pc, #180]	; (80015f0 <RobotParams_Init+0xdc>)
 800153c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001540:	e9c1 2300 	strd	r2, r3, [r1]
    RobotParams.l2 = l2;     // q2 to q3
 8001544:	492a      	ldr	r1, [pc, #168]	; (80015f0 <RobotParams_Init+0xdc>)
 8001546:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800154a:	e9c1 2302 	strd	r2, r3, [r1, #8]
    RobotParams.l3 = l3;     // q3 to efector
 800154e:	4928      	ldr	r1, [pc, #160]	; (80015f0 <RobotParams_Init+0xdc>)
 8001550:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001554:	e9c1 2304 	strd	r2, r3, [r1, #16]
    RobotParams.l4 = l4;     // right shift
 8001558:	4925      	ldr	r1, [pc, #148]	; (80015f0 <RobotParams_Init+0xdc>)
 800155a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800155e:	e9c1 2306 	strd	r2, r3, [r1, #24]
    RobotParams.l5 = l5;     // efector height
 8001562:	4923      	ldr	r1, [pc, #140]	; (80015f0 <RobotParams_Init+0xdc>)
 8001564:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001568:	e9c1 2308 	strd	r2, r3, [r1, #32]

    RobotParams.q1_off = q1_off;
 800156c:	4920      	ldr	r1, [pc, #128]	; (80015f0 <RobotParams_Init+0xdc>)
 800156e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001572:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    RobotParams.q2_off = q2_off;
 8001576:	491e      	ldr	r1, [pc, #120]	; (80015f0 <RobotParams_Init+0xdc>)
 8001578:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800157c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    RobotParams.q3_off = q3_off;
 8001580:	491b      	ldr	r1, [pc, #108]	; (80015f0 <RobotParams_Init+0xdc>)
 8001582:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001586:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    RobotParams.q1 = q1_off;
 800158a:	4919      	ldr	r1, [pc, #100]	; (80015f0 <RobotParams_Init+0xdc>)
 800158c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001590:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    RobotParams.q2 = q2_off;
 8001594:	4916      	ldr	r1, [pc, #88]	; (80015f0 <RobotParams_Init+0xdc>)
 8001596:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800159a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    RobotParams.q3 = q3_off;
 800159e:	4914      	ldr	r1, [pc, #80]	; (80015f0 <RobotParams_Init+0xdc>)
 80015a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015a4:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

    RobotParams.fxState = false;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <RobotParams_Init+0xdc>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    RobotParams.mode = MANUAL;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <RobotParams_Init+0xdc>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    MoveVect.x = 0;
 80015b8:	490e      	ldr	r1, [pc, #56]	; (80015f4 <RobotParams_Init+0xe0>)
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	f04f 0300 	mov.w	r3, #0
 80015c2:	e9c1 2300 	strd	r2, r3, [r1]
    MoveVect.y = 0;
 80015c6:	490b      	ldr	r1, [pc, #44]	; (80015f4 <RobotParams_Init+0xe0>)
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    MoveVect.z = 0;
 80015d4:	4907      	ldr	r1, [pc, #28]	; (80015f4 <RobotParams_Init+0xe0>)
 80015d6:	f04f 0200 	mov.w	r2, #0
 80015da:	f04f 0300 	mov.w	r3, #0
 80015de:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80015e2:	bf00      	nop
 80015e4:	3744      	adds	r7, #68	; 0x44
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	20000340 	.word	0x20000340
 80015f4:	20000328 	.word	0x20000328

080015f8 <CTRL_setFx>:


void CTRL_setFx(uint8_t state)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
	RobotParams.fxState = state;
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	2b00      	cmp	r3, #0
 8001606:	bf14      	ite	ne
 8001608:	2301      	movne	r3, #1
 800160a:	2300      	moveq	r3, #0
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <CTRL_setFx+0x40>)
 8001610:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	HAL_GPIO_WritePin(EFFECTOR_GPIO_Port, EFFECTOR_Pin, RobotParams.fxState);
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <CTRL_setFx+0x40>)
 8001616:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800161a:	461a      	mov	r2, r3
 800161c:	2110      	movs	r1, #16
 800161e:	4807      	ldr	r0, [pc, #28]	; (800163c <CTRL_setFx+0x44>)
 8001620:	f004 fa0e 	bl	8005a40 <HAL_GPIO_WritePin>
	PAD_setLedFx(RobotParams.fxState);
 8001624:	4b04      	ldr	r3, [pc, #16]	; (8001638 <CTRL_setFx+0x40>)
 8001626:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800162a:	4618      	mov	r0, r3
 800162c:	f001 fc7c 	bl	8002f28 <PAD_setLedFx>
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000340 	.word	0x20000340
 800163c:	48000800 	.word	0x48000800

08001640 <CTRL_getMoveVect>:

void CTRL_getMoveVect()
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
	MoveVect.x = (-PAD.axis_R_X)/10;
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <CTRL_getMoveVect+0x70>)
 8001646:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800164a:	4a1a      	ldr	r2, [pc, #104]	; (80016b4 <CTRL_getMoveVect+0x74>)
 800164c:	fb82 1203 	smull	r1, r2, r2, r3
 8001650:	1092      	asrs	r2, r2, #2
 8001652:	17db      	asrs	r3, r3, #31
 8001654:	1a9b      	subs	r3, r3, r2
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe ff64 	bl	8000524 <__aeabi_i2d>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4915      	ldr	r1, [pc, #84]	; (80016b8 <CTRL_getMoveVect+0x78>)
 8001662:	e9c1 2300 	strd	r2, r3, [r1]
	MoveVect.y = (-PAD.axis_R_Y)/10;
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <CTRL_getMoveVect+0x70>)
 8001668:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800166c:	4a11      	ldr	r2, [pc, #68]	; (80016b4 <CTRL_getMoveVect+0x74>)
 800166e:	fb82 1203 	smull	r1, r2, r2, r3
 8001672:	1092      	asrs	r2, r2, #2
 8001674:	17db      	asrs	r3, r3, #31
 8001676:	1a9b      	subs	r3, r3, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ff53 	bl	8000524 <__aeabi_i2d>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	490d      	ldr	r1, [pc, #52]	; (80016b8 <CTRL_getMoveVect+0x78>)
 8001684:	e9c1 2302 	strd	r2, r3, [r1, #8]
	MoveVect.z = (PAD.axis_L_Y)/10;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <CTRL_getMoveVect+0x70>)
 800168a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800168e:	4a09      	ldr	r2, [pc, #36]	; (80016b4 <CTRL_getMoveVect+0x74>)
 8001690:	fb82 1203 	smull	r1, r2, r2, r3
 8001694:	1092      	asrs	r2, r2, #2
 8001696:	17db      	asrs	r3, r3, #31
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	b21b      	sxth	r3, r3
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe ff41 	bl	8000524 <__aeabi_i2d>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4904      	ldr	r1, [pc, #16]	; (80016b8 <CTRL_getMoveVect+0x78>)
 80016a8:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	200005d0 	.word	0x200005d0
 80016b4:	66666667 	.word	0x66666667
 80016b8:	20000328 	.word	0x20000328

080016bc <CTRL_getRealParams>:

void CTRL_getRealParams()
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
	static uint32_t last_get = 0;
	uint32_t now = HAL_GetTick();
 80016c2:	f002 f94b 	bl	800395c <HAL_GetTick>
 80016c6:	6078      	str	r0, [r7, #4]

	if(now-last_get > GETREAL_INTERVAL)
 80016c8:	4b1c      	ldr	r3, [pc, #112]	; (800173c <CTRL_getRealParams+0x80>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b0a      	cmp	r3, #10
 80016d2:	d92e      	bls.n	8001732 <CTRL_getRealParams+0x76>
	{
		RobotParams.aq1 = srv2rad(SRV_readPosition(1));
 80016d4:	2001      	movs	r0, #1
 80016d6:	f001 fe13 	bl	8003300 <SRV_readPosition>
 80016da:	4603      	mov	r3, r0
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 fb73 	bl	8001dc8 <srv2rad>
 80016e2:	eeb0 7a40 	vmov.f32	s14, s0
 80016e6:	eef0 7a60 	vmov.f32	s15, s1
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <CTRL_getRealParams+0x84>)
 80016ec:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
		RobotParams.aq2 = srv2rad(SRV_readPosition(2));
 80016f0:	2002      	movs	r0, #2
 80016f2:	f001 fe05 	bl	8003300 <SRV_readPosition>
 80016f6:	4603      	mov	r3, r0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 fb65 	bl	8001dc8 <srv2rad>
 80016fe:	eeb0 7a40 	vmov.f32	s14, s0
 8001702:	eef0 7a60 	vmov.f32	s15, s1
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <CTRL_getRealParams+0x84>)
 8001708:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
		RobotParams.aq3 = srv2rad(SRV_readPosition(3));
 800170c:	2003      	movs	r0, #3
 800170e:	f001 fdf7 	bl	8003300 <SRV_readPosition>
 8001712:	4603      	mov	r3, r0
 8001714:	4618      	mov	r0, r3
 8001716:	f000 fb57 	bl	8001dc8 <srv2rad>
 800171a:	eeb0 7a40 	vmov.f32	s14, s0
 800171e:	eef0 7a60 	vmov.f32	s15, s1
 8001722:	4b07      	ldr	r3, [pc, #28]	; (8001740 <CTRL_getRealParams+0x84>)
 8001724:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
		KS_calc_FK();
 8001728:	f000 fdac 	bl	8002284 <KS_calc_FK>
		last_get = now;
 800172c:	4a03      	ldr	r2, [pc, #12]	; (800173c <CTRL_getRealParams+0x80>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]
	}
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	2000040c 	.word	0x2000040c
 8001740:	20000340 	.word	0x20000340

08001744 <CTRL_pushTargetParams>:

void CTRL_pushTargetParams()
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
	SRV_move(1, rad2srv(RobotParams.q1), SPEED);
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <CTRL_pushTargetParams+0x64>)
 800174a:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 800174e:	eeb0 0a47 	vmov.f32	s0, s14
 8001752:	eef0 0a67 	vmov.f32	s1, s15
 8001756:	f000 fb07 	bl	8001d68 <rad2srv>
 800175a:	4603      	mov	r3, r0
 800175c:	2223      	movs	r2, #35	; 0x23
 800175e:	4619      	mov	r1, r3
 8001760:	2001      	movs	r0, #1
 8001762:	f001 fd7e 	bl	8003262 <SRV_move>
	SRV_move(2, rad2srv(RobotParams.q2), SPEED);
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <CTRL_pushTargetParams+0x64>)
 8001768:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 800176c:	eeb0 0a47 	vmov.f32	s0, s14
 8001770:	eef0 0a67 	vmov.f32	s1, s15
 8001774:	f000 faf8 	bl	8001d68 <rad2srv>
 8001778:	4603      	mov	r3, r0
 800177a:	2223      	movs	r2, #35	; 0x23
 800177c:	4619      	mov	r1, r3
 800177e:	2002      	movs	r0, #2
 8001780:	f001 fd6f 	bl	8003262 <SRV_move>
	SRV_move(3, rad2srv(RobotParams.q3), SPEED);
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <CTRL_pushTargetParams+0x64>)
 8001786:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800178a:	eeb0 0a47 	vmov.f32	s0, s14
 800178e:	eef0 0a67 	vmov.f32	s1, s15
 8001792:	f000 fae9 	bl	8001d68 <rad2srv>
 8001796:	4603      	mov	r3, r0
 8001798:	2223      	movs	r2, #35	; 0x23
 800179a:	4619      	mov	r1, r3
 800179c:	2003      	movs	r0, #3
 800179e:	f001 fd60 	bl	8003262 <SRV_move>
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000340 	.word	0x20000340
 80017ac:	00000000 	.word	0x00000000

080017b0 <CTRL_destinationReached>:

bool CTRL_destinationReached()
{
 80017b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017b4:	af00      	add	r7, sp, #0
	return ( fabs(RobotParams.q1-RobotParams.aq1) < deg2rad(THRESHOLD_J) &&
 80017b6:	4b2e      	ldr	r3, [pc, #184]	; (8001870 <CTRL_destinationReached+0xc0>)
 80017b8:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80017bc:	4b2c      	ldr	r3, [pc, #176]	; (8001870 <CTRL_destinationReached+0xc0>)
 80017be:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80017c2:	f7fe fd61 	bl	8000288 <__aeabi_dsub>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4692      	mov	sl, r2
 80017cc:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 80017d0:	ed9f 0b25 	vldr	d0, [pc, #148]	; 8001868 <CTRL_destinationReached+0xb8>
 80017d4:	f000 faa0 	bl	8001d18 <deg2rad>
 80017d8:	ec53 2b10 	vmov	r2, r3, d0
			 fabs(RobotParams.q2-RobotParams.aq2) < deg2rad(THRESHOLD_J) &&
 80017dc:	4650      	mov	r0, sl
 80017de:	4659      	mov	r1, fp
 80017e0:	f7ff f97c 	bl	8000adc <__aeabi_dcmplt>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d035      	beq.n	8001856 <CTRL_destinationReached+0xa6>
 80017ea:	4b21      	ldr	r3, [pc, #132]	; (8001870 <CTRL_destinationReached+0xc0>)
 80017ec:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80017f0:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <CTRL_destinationReached+0xc0>)
 80017f2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80017f6:	f7fe fd47 	bl	8000288 <__aeabi_dsub>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4690      	mov	r8, r2
 8001800:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001804:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8001868 <CTRL_destinationReached+0xb8>
 8001808:	f000 fa86 	bl	8001d18 <deg2rad>
 800180c:	ec53 2b10 	vmov	r2, r3, d0
	return ( fabs(RobotParams.q1-RobotParams.aq1) < deg2rad(THRESHOLD_J) &&
 8001810:	4640      	mov	r0, r8
 8001812:	4649      	mov	r1, r9
 8001814:	f7ff f962 	bl	8000adc <__aeabi_dcmplt>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d01b      	beq.n	8001856 <CTRL_destinationReached+0xa6>
			 fabs(RobotParams.q3-RobotParams.aq3) < deg2rad(THRESHOLD_J) );
 800181e:	4b14      	ldr	r3, [pc, #80]	; (8001870 <CTRL_destinationReached+0xc0>)
 8001820:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <CTRL_destinationReached+0xc0>)
 8001826:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800182a:	f7fe fd2d 	bl	8000288 <__aeabi_dsub>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4614      	mov	r4, r2
 8001834:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001838:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8001868 <CTRL_destinationReached+0xb8>
 800183c:	f000 fa6c 	bl	8001d18 <deg2rad>
 8001840:	ec53 2b10 	vmov	r2, r3, d0
			 fabs(RobotParams.q2-RobotParams.aq2) < deg2rad(THRESHOLD_J) &&
 8001844:	4620      	mov	r0, r4
 8001846:	4629      	mov	r1, r5
 8001848:	f7ff f948 	bl	8000adc <__aeabi_dcmplt>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <CTRL_destinationReached+0xa6>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <CTRL_destinationReached+0xa8>
 8001856:	2300      	movs	r3, #0
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	b2db      	uxtb	r3, r3
}
 800185e:	4618      	mov	r0, r3
 8001860:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001864:	f3af 8000 	nop.w
 8001868:	00000000 	.word	0x00000000
 800186c:	40140000 	.word	0x40140000
 8001870:	20000340 	.word	0x20000340

08001874 <CTRL_setPos>:


void CTRL_setPos(double x, double y, double z)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	ed87 0b04 	vstr	d0, [r7, #16]
 800187e:	ed87 1b02 	vstr	d1, [r7, #8]
 8001882:	ed87 2b00 	vstr	d2, [r7]
	if(KS_calc_IK(x, y, z))
 8001886:	ed97 2b00 	vldr	d2, [r7]
 800188a:	ed97 1b02 	vldr	d1, [r7, #8]
 800188e:	ed97 0b04 	vldr	d0, [r7, #16]
 8001892:	f000 facd 	bl	8001e30 <KS_calc_IK>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d002      	beq.n	80018a2 <CTRL_setPos+0x2e>
		CTRL_pushTargetParams();
 800189c:	f7ff ff52 	bl	8001744 <CTRL_pushTargetParams>
	else
		printf("Inverse kinematics error");
}
 80018a0:	e002      	b.n	80018a8 <CTRL_setPos+0x34>
		printf("Inverse kinematics error");
 80018a2:	4803      	ldr	r0, [pc, #12]	; (80018b0 <CTRL_setPos+0x3c>)
 80018a4:	f007 fd22 	bl	80092ec <iprintf>
}
 80018a8:	bf00      	nop
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	0800e030 	.word	0x0800e030
 80018b4:	00000000 	.word	0x00000000

080018b8 <CTRL_startup>:

void CTRL_startup()
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
	PAD_setLedManual(1);
 80018be:	2001      	movs	r0, #1
 80018c0:	f001 fb20 	bl	8002f04 <PAD_setLedManual>

	for(uint8_t i = 1; i <=3; i++)
 80018c4:	2301      	movs	r3, #1
 80018c6:	71fb      	strb	r3, [r7, #7]
 80018c8:	e00c      	b.n	80018e4 <CTRL_startup+0x2c>
	{
		SRV_setLED(i, 1);
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	2101      	movs	r1, #1
 80018ce:	4618      	mov	r0, r3
 80018d0:	f001 fca9 	bl	8003226 <SRV_setLED>
		SRV_enableTorque(i, 1);
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	2101      	movs	r1, #1
 80018d8:	4618      	mov	r0, r3
 80018da:	f001 fcf3 	bl	80032c4 <SRV_enableTorque>
	for(uint8_t i = 1; i <=3; i++)
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	3301      	adds	r3, #1
 80018e2:	71fb      	strb	r3, [r7, #7]
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	d9ef      	bls.n	80018ca <CTRL_startup+0x12>
	}

	CTRL_setPos(134, -33, 88);
 80018ea:	ed9f 2b07 	vldr	d2, [pc, #28]	; 8001908 <CTRL_startup+0x50>
 80018ee:	ed9f 1b08 	vldr	d1, [pc, #32]	; 8001910 <CTRL_startup+0x58>
 80018f2:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8001918 <CTRL_startup+0x60>
 80018f6:	f7ff ffbd 	bl	8001874 <CTRL_setPos>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	f3af 8000 	nop.w
 8001908:	00000000 	.word	0x00000000
 800190c:	40560000 	.word	0x40560000
 8001910:	00000000 	.word	0x00000000
 8001914:	c0408000 	.word	0xc0408000
 8001918:	00000000 	.word	0x00000000
 800191c:	4060c000 	.word	0x4060c000

08001920 <CTRL_moveByVect>:

void CTRL_moveByVect()
{
 8001920:	b580      	push	{r7, lr}
 8001922:	ed2d 8b04 	vpush	{d8-d9}
 8001926:	af00      	add	r7, sp, #0
	if( MoveVect.x != 0 || MoveVect.y != 0 || MoveVect.z != 0 )
 8001928:	4b2d      	ldr	r3, [pc, #180]	; (80019e0 <CTRL_moveByVect+0xc0>)
 800192a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	f7ff f8c7 	bl	8000ac8 <__aeabi_dcmpeq>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d018      	beq.n	8001972 <CTRL_moveByVect+0x52>
 8001940:	4b27      	ldr	r3, [pc, #156]	; (80019e0 <CTRL_moveByVect+0xc0>)
 8001942:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	f7ff f8bb 	bl	8000ac8 <__aeabi_dcmpeq>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00c      	beq.n	8001972 <CTRL_moveByVect+0x52>
 8001958:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <CTRL_moveByVect+0xc0>)
 800195a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	f7ff f8af 	bl	8000ac8 <__aeabi_dcmpeq>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d000      	beq.n	8001972 <CTRL_moveByVect+0x52>
		CTRL_setPos(RobotParams.x+MoveVect.x, RobotParams.y+MoveVect.y, RobotParams.z+MoveVect.z);
}
 8001970:	e031      	b.n	80019d6 <CTRL_moveByVect+0xb6>
		CTRL_setPos(RobotParams.x+MoveVect.x, RobotParams.y+MoveVect.y, RobotParams.z+MoveVect.z);
 8001972:	4b1c      	ldr	r3, [pc, #112]	; (80019e4 <CTRL_moveByVect+0xc4>)
 8001974:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001978:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <CTRL_moveByVect+0xc0>)
 800197a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197e:	f7fe fc85 	bl	800028c <__adddf3>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	ec43 2b18 	vmov	d8, r2, r3
 800198a:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <CTRL_moveByVect+0xc4>)
 800198c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8001990:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <CTRL_moveByVect+0xc0>)
 8001992:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001996:	f7fe fc79 	bl	800028c <__adddf3>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	ec43 2b19 	vmov	d9, r2, r3
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <CTRL_moveByVect+0xc4>)
 80019a4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80019a8:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <CTRL_moveByVect+0xc0>)
 80019aa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80019ae:	f7fe fc6d 	bl	800028c <__adddf3>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	ec43 2b17 	vmov	d7, r2, r3
 80019ba:	eeb0 2a47 	vmov.f32	s4, s14
 80019be:	eef0 2a67 	vmov.f32	s5, s15
 80019c2:	eeb0 1a49 	vmov.f32	s2, s18
 80019c6:	eef0 1a69 	vmov.f32	s3, s19
 80019ca:	eeb0 0a48 	vmov.f32	s0, s16
 80019ce:	eef0 0a68 	vmov.f32	s1, s17
 80019d2:	f7ff ff4f 	bl	8001874 <CTRL_setPos>
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	ecbd 8b04 	vpop	{d8-d9}
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000328 	.word	0x20000328
 80019e4:	20000340 	.word	0x20000340

080019e8 <CTRL_printInfo>:

void CTRL_printInfo()
{
 80019e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
	static uint32_t last_print = 0;
	uint32_t now = HAL_GetTick();
 80019f0:	f001 ffb4 	bl	800395c <HAL_GetTick>
 80019f4:	6078      	str	r0, [r7, #4]

	if( now-last_print > INFO_INTERVAL )
 80019f6:	4b28      	ldr	r3, [pc, #160]	; (8001a98 <CTRL_printInfo+0xb0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a02:	d944      	bls.n	8001a8e <CTRL_printInfo+0xa6>
	{
		COM_sendInfo(RobotParams.ax, RobotParams.ay, RobotParams.az, RobotParams.aq1, RobotParams.aq2, RobotParams.aq3, RobotParams.fxState);
 8001a04:	4b25      	ldr	r3, [pc, #148]	; (8001a9c <CTRL_printInfo+0xb4>)
 8001a06:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f7ff f8eb 	bl	8000be8 <__aeabi_d2f>
 8001a12:	4604      	mov	r4, r0
 8001a14:	4b21      	ldr	r3, [pc, #132]	; (8001a9c <CTRL_printInfo+0xb4>)
 8001a16:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f7ff f8e3 	bl	8000be8 <__aeabi_d2f>
 8001a22:	4605      	mov	r5, r0
 8001a24:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <CTRL_printInfo+0xb4>)
 8001a26:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f7ff f8db 	bl	8000be8 <__aeabi_d2f>
 8001a32:	4606      	mov	r6, r0
 8001a34:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <CTRL_printInfo+0xb4>)
 8001a36:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f7ff f8d3 	bl	8000be8 <__aeabi_d2f>
 8001a42:	4680      	mov	r8, r0
 8001a44:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <CTRL_printInfo+0xb4>)
 8001a46:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f7ff f8cb 	bl	8000be8 <__aeabi_d2f>
 8001a52:	4681      	mov	r9, r0
 8001a54:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <CTRL_printInfo+0xb4>)
 8001a56:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f7ff f8c3 	bl	8000be8 <__aeabi_d2f>
 8001a62:	4602      	mov	r2, r0
 8001a64:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <CTRL_printInfo+0xb4>)
 8001a66:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	ee02 2a90 	vmov	s5, r2
 8001a70:	ee02 9a10 	vmov	s4, r9
 8001a74:	ee01 8a90 	vmov	s3, r8
 8001a78:	ee01 6a10 	vmov	s2, r6
 8001a7c:	ee00 5a90 	vmov	s1, r5
 8001a80:	ee00 4a10 	vmov	s0, r4
 8001a84:	f7ff fc7e 	bl	8001384 <COM_sendInfo>
		last_print = now;
 8001a88:	4a03      	ldr	r2, [pc, #12]	; (8001a98 <CTRL_printInfo+0xb0>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6013      	str	r3, [r2, #0]
	}
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a98:	20000410 	.word	0x20000410
 8001a9c:	20000340 	.word	0x20000340

08001aa0 <CTRL_parseCommand>:

void CTRL_parseCommand()
{
 8001aa0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001aa4:	af00      	add	r7, sp, #0
	HAL_Delay(1);
 8001aa6:	2001      	movs	r0, #1
 8001aa8:	f001 ff64 	bl	8003974 <HAL_Delay>
	switch(COM_data.cmd)
 8001aac:	4b51      	ldr	r3, [pc, #324]	; (8001bf4 <CTRL_parseCommand+0x154>)
 8001aae:	785b      	ldrb	r3, [r3, #1]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	2b05      	cmp	r3, #5
 8001ab6:	f200 8096 	bhi.w	8001be6 <CTRL_parseCommand+0x146>
 8001aba:	a201      	add	r2, pc, #4	; (adr r2, 8001ac0 <CTRL_parseCommand+0x20>)
 8001abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac0:	08001ad9 	.word	0x08001ad9
 8001ac4:	08001af3 	.word	0x08001af3
 8001ac8:	08001b61 	.word	0x08001b61
 8001acc:	08001b07 	.word	0x08001b07
 8001ad0:	08001bbb 	.word	0x08001bbb
 8001ad4:	08001bd5 	.word	0x08001bd5
	{
	case CMD_START:
		PAD_setLedManual(0);
 8001ad8:	2000      	movs	r0, #0
 8001ada:	f001 fa13 	bl	8002f04 <PAD_setLedManual>
		RobotParams.mode = PROGRAM;
 8001ade:	4b46      	ldr	r3, [pc, #280]	; (8001bf8 <CTRL_parseCommand+0x158>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
		CommandParams.type = IDLE;
 8001ae6:	4b45      	ldr	r3, [pc, #276]	; (8001bfc <CTRL_parseCommand+0x15c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
		COM_sendDone();
 8001aec:	f7ff fc3c 	bl	8001368 <COM_sendDone>
		break;
 8001af0:	e079      	b.n	8001be6 <CTRL_parseCommand+0x146>

	case CMD_STOP:
		PAD_setLedManual(1);
 8001af2:	2001      	movs	r0, #1
 8001af4:	f001 fa06 	bl	8002f04 <PAD_setLedManual>
		RobotParams.mode = MANUAL;
 8001af8:	4b3f      	ldr	r3, [pc, #252]	; (8001bf8 <CTRL_parseCommand+0x158>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
		COM_sendDone();
 8001b00:	f7ff fc32 	bl	8001368 <COM_sendDone>
		break;
 8001b04:	e06f      	b.n	8001be6 <CTRL_parseCommand+0x146>

	case CMD_MOVE_J:
		CommandParams.type = MOVING_J;
 8001b06:	4b3d      	ldr	r3, [pc, #244]	; (8001bfc <CTRL_parseCommand+0x15c>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	701a      	strb	r2, [r3, #0]
		CommandParams.x = COM_data.f_param1;
 8001b0c:	4b39      	ldr	r3, [pc, #228]	; (8001bf4 <CTRL_parseCommand+0x154>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	4a3a      	ldr	r2, [pc, #232]	; (8001bfc <CTRL_parseCommand+0x15c>)
 8001b12:	6053      	str	r3, [r2, #4]
		CommandParams.y = COM_data.f_param2;
 8001b14:	4b37      	ldr	r3, [pc, #220]	; (8001bf4 <CTRL_parseCommand+0x154>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	4a38      	ldr	r2, [pc, #224]	; (8001bfc <CTRL_parseCommand+0x15c>)
 8001b1a:	6093      	str	r3, [r2, #8]
		CommandParams.z = COM_data.f_param3;
 8001b1c:	4b35      	ldr	r3, [pc, #212]	; (8001bf4 <CTRL_parseCommand+0x154>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	4a36      	ldr	r2, [pc, #216]	; (8001bfc <CTRL_parseCommand+0x15c>)
 8001b22:	60d3      	str	r3, [r2, #12]
		CTRL_setPos(CommandParams.x, CommandParams.y, CommandParams.z);
 8001b24:	4b35      	ldr	r3, [pc, #212]	; (8001bfc <CTRL_parseCommand+0x15c>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fd0d 	bl	8000548 <__aeabi_f2d>
 8001b2e:	4604      	mov	r4, r0
 8001b30:	460d      	mov	r5, r1
 8001b32:	4b32      	ldr	r3, [pc, #200]	; (8001bfc <CTRL_parseCommand+0x15c>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fd06 	bl	8000548 <__aeabi_f2d>
 8001b3c:	4680      	mov	r8, r0
 8001b3e:	4689      	mov	r9, r1
 8001b40:	4b2e      	ldr	r3, [pc, #184]	; (8001bfc <CTRL_parseCommand+0x15c>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fcff 	bl	8000548 <__aeabi_f2d>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	ec43 2b12 	vmov	d2, r2, r3
 8001b52:	ec49 8b11 	vmov	d1, r8, r9
 8001b56:	ec45 4b10 	vmov	d0, r4, r5
 8001b5a:	f7ff fe8b 	bl	8001874 <CTRL_setPos>
		break;
 8001b5e:	e042      	b.n	8001be6 <CTRL_parseCommand+0x146>

	case CMD_MOVE_L:
		CommandParams.type = MOVING_L;
 8001b60:	4b26      	ldr	r3, [pc, #152]	; (8001bfc <CTRL_parseCommand+0x15c>)
 8001b62:	2202      	movs	r2, #2
 8001b64:	701a      	strb	r2, [r3, #0]
		CommandParams.x = COM_data.f_param1;
 8001b66:	4b23      	ldr	r3, [pc, #140]	; (8001bf4 <CTRL_parseCommand+0x154>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	4a24      	ldr	r2, [pc, #144]	; (8001bfc <CTRL_parseCommand+0x15c>)
 8001b6c:	6053      	str	r3, [r2, #4]
		CommandParams.y = COM_data.f_param2;
 8001b6e:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <CTRL_parseCommand+0x154>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	4a22      	ldr	r2, [pc, #136]	; (8001bfc <CTRL_parseCommand+0x15c>)
 8001b74:	6093      	str	r3, [r2, #8]
		CommandParams.z = COM_data.f_param3;
 8001b76:	4b1f      	ldr	r3, [pc, #124]	; (8001bf4 <CTRL_parseCommand+0x154>)
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	4a20      	ldr	r2, [pc, #128]	; (8001bfc <CTRL_parseCommand+0x15c>)
 8001b7c:	60d3      	str	r3, [r2, #12]
		CTRL_setPos(CommandParams.x, CommandParams.y, CommandParams.z);
 8001b7e:	4b1f      	ldr	r3, [pc, #124]	; (8001bfc <CTRL_parseCommand+0x15c>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fce0 	bl	8000548 <__aeabi_f2d>
 8001b88:	4604      	mov	r4, r0
 8001b8a:	460d      	mov	r5, r1
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <CTRL_parseCommand+0x15c>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fcd9 	bl	8000548 <__aeabi_f2d>
 8001b96:	4680      	mov	r8, r0
 8001b98:	4689      	mov	r9, r1
 8001b9a:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <CTRL_parseCommand+0x15c>)
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fcd2 	bl	8000548 <__aeabi_f2d>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	ec43 2b12 	vmov	d2, r2, r3
 8001bac:	ec49 8b11 	vmov	d1, r8, r9
 8001bb0:	ec45 4b10 	vmov	d0, r4, r5
 8001bb4:	f7ff fe5e 	bl	8001874 <CTRL_setPos>
		break;
 8001bb8:	e015      	b.n	8001be6 <CTRL_parseCommand+0x146>

	case CMD_WAIT:
		CommandParams.type = WAIT;
 8001bba:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <CTRL_parseCommand+0x15c>)
 8001bbc:	2203      	movs	r2, #3
 8001bbe:	701a      	strb	r2, [r3, #0]
		CommandParams.start = HAL_GetTick();
 8001bc0:	f001 fecc 	bl	800395c <HAL_GetTick>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	4a0d      	ldr	r2, [pc, #52]	; (8001bfc <CTRL_parseCommand+0x15c>)
 8001bc8:	61d3      	str	r3, [r2, #28]
		CommandParams.timer = COM_data.u32_param;
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <CTRL_parseCommand+0x154>)
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	4a0b      	ldr	r2, [pc, #44]	; (8001bfc <CTRL_parseCommand+0x15c>)
 8001bd0:	6213      	str	r3, [r2, #32]
		break;
 8001bd2:	e008      	b.n	8001be6 <CTRL_parseCommand+0x146>

	case CMD_MAGNET:
		CTRL_setFx(COM_data.u8_param);
 8001bd4:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <CTRL_parseCommand+0x154>)
 8001bd6:	7d1b      	ldrb	r3, [r3, #20]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fd0c 	bl	80015f8 <CTRL_setFx>
		COM_sendDone();
 8001be0:	f7ff fbc2 	bl	8001368 <COM_sendDone>
		break;
 8001be4:	bf00      	nop
	}

	COM_data.available = 0;
 8001be6:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <CTRL_parseCommand+0x154>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]
}
 8001bec:	bf00      	nop
 8001bee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000200 	.word	0x20000200
 8001bf8:	20000340 	.word	0x20000340
 8001bfc:	200003e8 	.word	0x200003e8

08001c00 <CTRL_Loop>:

void CTRL_Loop()
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
	if(COM_data.available)
 8001c04:	4b40      	ldr	r3, [pc, #256]	; (8001d08 <CTRL_Loop+0x108>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <CTRL_Loop+0x12>
		CTRL_parseCommand();
 8001c0e:	f7ff ff47 	bl	8001aa0 <CTRL_parseCommand>

	if(RobotParams.mode == MANUAL)
 8001c12:	4b3e      	ldr	r3, [pc, #248]	; (8001d0c <CTRL_Loop+0x10c>)
 8001c14:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d122      	bne.n	8001c62 <CTRL_Loop+0x62>
	{
		CTRL_getMoveVect();
 8001c1c:	f7ff fd10 	bl	8001640 <CTRL_getMoveVect>

		if( PAD.btn_combo_short )
 8001c20:	4b3b      	ldr	r3, [pc, #236]	; (8001d10 <CTRL_Loop+0x110>)
 8001c22:	7b1b      	ldrb	r3, [r3, #12]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d008      	beq.n	8001c3a <CTRL_Loop+0x3a>
			CTRL_setFx(!RobotParams.fxState);
 8001c28:	4b38      	ldr	r3, [pc, #224]	; (8001d0c <CTRL_Loop+0x10c>)
 8001c2a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8001c2e:	f083 0301 	eor.w	r3, r3, #1
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fcdf 	bl	80015f8 <CTRL_setFx>

		if( PAD.btn_combo_long )
 8001c3a:	4b35      	ldr	r3, [pc, #212]	; (8001d10 <CTRL_Loop+0x110>)
 8001c3c:	7b5b      	ldrb	r3, [r3, #13]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d007      	beq.n	8001c52 <CTRL_Loop+0x52>
			CTRL_setPos(134, -33, 88);
 8001c42:	ed9f 2b2b 	vldr	d2, [pc, #172]	; 8001cf0 <CTRL_Loop+0xf0>
 8001c46:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8001cf8 <CTRL_Loop+0xf8>
 8001c4a:	ed9f 0b2d 	vldr	d0, [pc, #180]	; 8001d00 <CTRL_Loop+0x100>
 8001c4e:	f7ff fe11 	bl	8001874 <CTRL_setPos>

		if( CTRL_destinationReached() )
 8001c52:	f7ff fdad 	bl	80017b0 <CTRL_destinationReached>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d046      	beq.n	8001cea <CTRL_Loop+0xea>
		{
			CTRL_moveByVect();
 8001c5c:	f7ff fe60 	bl	8001920 <CTRL_moveByVect>
				COM_sendDone();
			}
			break;
		}
	}
}
 8001c60:	e043      	b.n	8001cea <CTRL_Loop+0xea>
	else if(RobotParams.mode == PROGRAM)
 8001c62:	4b2a      	ldr	r3, [pc, #168]	; (8001d0c <CTRL_Loop+0x10c>)
 8001c64:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d135      	bne.n	8001cd8 <CTRL_Loop+0xd8>
		switch( CommandParams.type )
 8001c6c:	4b29      	ldr	r3, [pc, #164]	; (8001d14 <CTRL_Loop+0x114>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	d83a      	bhi.n	8001cea <CTRL_Loop+0xea>
 8001c74:	a201      	add	r2, pc, #4	; (adr r2, 8001c7c <CTRL_Loop+0x7c>)
 8001c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7a:	bf00      	nop
 8001c7c:	08001cdd 	.word	0x08001cdd
 8001c80:	08001cad 	.word	0x08001cad
 8001c84:	08001cc3 	.word	0x08001cc3
 8001c88:	08001c8d 	.word	0x08001c8d
			if( HAL_GetTick()-CommandParams.start > CommandParams.timer )
 8001c8c:	f001 fe66 	bl	800395c <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <CTRL_Loop+0x114>)
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	1ad2      	subs	r2, r2, r3
 8001c98:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <CTRL_Loop+0x114>)
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d91f      	bls.n	8001ce0 <CTRL_Loop+0xe0>
				CommandParams.type = IDLE;
 8001ca0:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <CTRL_Loop+0x114>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	701a      	strb	r2, [r3, #0]
				COM_sendDone();
 8001ca6:	f7ff fb5f 	bl	8001368 <COM_sendDone>
			break;
 8001caa:	e019      	b.n	8001ce0 <CTRL_Loop+0xe0>
			if( CTRL_destinationReached() )
 8001cac:	f7ff fd80 	bl	80017b0 <CTRL_destinationReached>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d016      	beq.n	8001ce4 <CTRL_Loop+0xe4>
				CommandParams.type = IDLE;
 8001cb6:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <CTRL_Loop+0x114>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	701a      	strb	r2, [r3, #0]
				COM_sendDone();
 8001cbc:	f7ff fb54 	bl	8001368 <COM_sendDone>
			break;
 8001cc0:	e010      	b.n	8001ce4 <CTRL_Loop+0xe4>
			if( CTRL_destinationReached() )
 8001cc2:	f7ff fd75 	bl	80017b0 <CTRL_destinationReached>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00d      	beq.n	8001ce8 <CTRL_Loop+0xe8>
				CommandParams.type = IDLE;
 8001ccc:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <CTRL_Loop+0x114>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
				COM_sendDone();
 8001cd2:	f7ff fb49 	bl	8001368 <COM_sendDone>
			break;
 8001cd6:	e007      	b.n	8001ce8 <CTRL_Loop+0xe8>
	}
 8001cd8:	bf00      	nop
 8001cda:	e006      	b.n	8001cea <CTRL_Loop+0xea>
			break;
 8001cdc:	bf00      	nop
 8001cde:	e004      	b.n	8001cea <CTRL_Loop+0xea>
			break;
 8001ce0:	bf00      	nop
 8001ce2:	e002      	b.n	8001cea <CTRL_Loop+0xea>
			break;
 8001ce4:	bf00      	nop
 8001ce6:	e000      	b.n	8001cea <CTRL_Loop+0xea>
			break;
 8001ce8:	bf00      	nop
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	00000000 	.word	0x00000000
 8001cf4:	40560000 	.word	0x40560000
 8001cf8:	00000000 	.word	0x00000000
 8001cfc:	c0408000 	.word	0xc0408000
 8001d00:	00000000 	.word	0x00000000
 8001d04:	4060c000 	.word	0x4060c000
 8001d08:	20000200 	.word	0x20000200
 8001d0c:	20000340 	.word	0x20000340
 8001d10:	200005d0 	.word	0x200005d0
 8001d14:	200003e8 	.word	0x200003e8

08001d18 <deg2rad>:
#include "kinematics.h"


double deg2rad(double deg) { return (deg/180.0f) * M_PI; }
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	ed87 0b00 	vstr	d0, [r7]
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <deg2rad+0x48>)
 8001d28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d2c:	f7fe fd8e 	bl	800084c <__aeabi_ddiv>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4610      	mov	r0, r2
 8001d36:	4619      	mov	r1, r3
 8001d38:	a307      	add	r3, pc, #28	; (adr r3, 8001d58 <deg2rad+0x40>)
 8001d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3e:	f7fe fc5b 	bl	80005f8 <__aeabi_dmul>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	ec43 2b17 	vmov	d7, r2, r3
 8001d4a:	eeb0 0a47 	vmov.f32	s0, s14
 8001d4e:	eef0 0a67 	vmov.f32	s1, s15
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	54442d18 	.word	0x54442d18
 8001d5c:	400921fb 	.word	0x400921fb
 8001d60:	40668000 	.word	0x40668000
 8001d64:	00000000 	.word	0x00000000

08001d68 <rad2srv>:

double rad2deg(double rad) { return rad * (180.0f / M_PI); }

uint16_t rad2srv(double rad) { return (rad/M_PI)*512 + 512; }
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	ed87 0b00 	vstr	d0, [r7]
 8001d72:	a313      	add	r3, pc, #76	; (adr r3, 8001dc0 <rad2srv+0x58>)
 8001d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d7c:	f7fe fd66 	bl	800084c <__aeabi_ddiv>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4610      	mov	r0, r2
 8001d86:	4619      	mov	r1, r3
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001d90:	f7fe fc32 	bl	80005f8 <__aeabi_dmul>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4610      	mov	r0, r2
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001da4:	f7fe fa72 	bl	800028c <__adddf3>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	f7fe fefa 	bl	8000ba8 <__aeabi_d2uiz>
 8001db4:	4603      	mov	r3, r0
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	4618      	mov	r0, r3
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	54442d18 	.word	0x54442d18
 8001dc4:	400921fb 	.word	0x400921fb

08001dc8 <srv2rad>:

uint16_t deg2srv(double deg){ return (deg/180.0f)*512 + 512; }

double srv2rad(uint16_t srv){ return (((double)srv-512.0f)/512.0f)*M_PI; }
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	80fb      	strh	r3, [r7, #6]
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe fb95 	bl	8000504 <__aeabi_ui2d>
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001de2:	f7fe fa51 	bl	8000288 <__aeabi_dsub>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4610      	mov	r0, r2
 8001dec:	4619      	mov	r1, r3
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001df6:	f7fe fd29 	bl	800084c <__aeabi_ddiv>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	4610      	mov	r0, r2
 8001e00:	4619      	mov	r1, r3
 8001e02:	a309      	add	r3, pc, #36	; (adr r3, 8001e28 <srv2rad+0x60>)
 8001e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e08:	f7fe fbf6 	bl	80005f8 <__aeabi_dmul>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	ec43 2b17 	vmov	d7, r2, r3
 8001e14:	eeb0 0a47 	vmov.f32	s0, s14
 8001e18:	eef0 0a67 	vmov.f32	s1, s15
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	f3af 8000 	nop.w
 8001e28:	54442d18 	.word	0x54442d18
 8001e2c:	400921fb 	.word	0x400921fb

08001e30 <KS_calc_IK>:

double srv2deg(uint16_t srv){ return (((double)srv-512.0f)/512.0f)*180.0f; }

bool KS_calc_IK(double x, double y, double z)
{
 8001e30:	b5b0      	push	{r4, r5, r7, lr}
 8001e32:	b0a0      	sub	sp, #128	; 0x80
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	ed87 0b04 	vstr	d0, [r7, #16]
 8001e3a:	ed87 1b02 	vstr	d1, [r7, #8]
 8001e3e:	ed87 2b00 	vstr	d2, [r7]
    double q1, q2, q3;
    double r1, r2, r3, phi1, phi2;

    double l1 = RobotParams.l1;     // base to q2
 8001e42:	4bc5      	ldr	r3, [pc, #788]	; (8002158 <KS_calc_IK+0x328>)
 8001e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e48:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
    double l2 = RobotParams.l2;     // q2 to q3
 8001e4c:	4bc2      	ldr	r3, [pc, #776]	; (8002158 <KS_calc_IK+0x328>)
 8001e4e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e52:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
    double l3 = RobotParams.l3;    	// q3 to efector
 8001e56:	4bc0      	ldr	r3, [pc, #768]	; (8002158 <KS_calc_IK+0x328>)
 8001e58:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e5c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    double l4 = RobotParams.l4;     // right shift
 8001e60:	4bbd      	ldr	r3, [pc, #756]	; (8002158 <KS_calc_IK+0x328>)
 8001e62:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001e66:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    double l5 = RobotParams.l5;     // efector height
 8001e6a:	4bbb      	ldr	r3, [pc, #748]	; (8002158 <KS_calc_IK+0x328>)
 8001e6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001e70:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

    q1 = 2 * atan( (x - sqrt( x*x + y*y - l4*l4 )) / ( l4-y ) );
 8001e74:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e78:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e7c:	f7fe fbbc 	bl	80005f8 <__aeabi_dmul>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4614      	mov	r4, r2
 8001e86:	461d      	mov	r5, r3
 8001e88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e90:	f7fe fbb2 	bl	80005f8 <__aeabi_dmul>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4620      	mov	r0, r4
 8001e9a:	4629      	mov	r1, r5
 8001e9c:	f7fe f9f6 	bl	800028c <__adddf3>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4614      	mov	r4, r2
 8001ea6:	461d      	mov	r5, r3
 8001ea8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001eac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001eb0:	f7fe fba2 	bl	80005f8 <__aeabi_dmul>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4620      	mov	r0, r4
 8001eba:	4629      	mov	r1, r5
 8001ebc:	f7fe f9e4 	bl	8000288 <__aeabi_dsub>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	ec43 2b17 	vmov	d7, r2, r3
 8001ec8:	eeb0 0a47 	vmov.f32	s0, s14
 8001ecc:	eef0 0a67 	vmov.f32	s1, s15
 8001ed0:	f009 fdf6 	bl	800bac0 <sqrt>
 8001ed4:	ec53 2b10 	vmov	r2, r3, d0
 8001ed8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001edc:	f7fe f9d4 	bl	8000288 <__aeabi_dsub>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4614      	mov	r4, r2
 8001ee6:	461d      	mov	r5, r3
 8001ee8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001eec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001ef0:	f7fe f9ca 	bl	8000288 <__aeabi_dsub>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4620      	mov	r0, r4
 8001efa:	4629      	mov	r1, r5
 8001efc:	f7fe fca6 	bl	800084c <__aeabi_ddiv>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	ec43 2b17 	vmov	d7, r2, r3
 8001f08:	eeb0 0a47 	vmov.f32	s0, s14
 8001f0c:	eef0 0a67 	vmov.f32	s1, s15
 8001f10:	f009 faa6 	bl	800b460 <atan>
 8001f14:	ec51 0b10 	vmov	r0, r1, d0
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	f7fe f9b6 	bl	800028c <__adddf3>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    r1 = sqrt( x*x + pow( y+l4/cos(q1), 2) ) - l4*tan(q1);
 8001f28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f2c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f30:	f7fe fb62 	bl	80005f8 <__aeabi_dmul>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4614      	mov	r4, r2
 8001f3a:	461d      	mov	r5, r3
 8001f3c:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8001f40:	f009 fc2e 	bl	800b7a0 <cos>
 8001f44:	ec53 2b10 	vmov	r2, r3, d0
 8001f48:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001f4c:	f7fe fc7e 	bl	800084c <__aeabi_ddiv>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4610      	mov	r0, r2
 8001f56:	4619      	mov	r1, r3
 8001f58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f5c:	f7fe f996 	bl	800028c <__adddf3>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	ec43 2b17 	vmov	d7, r2, r3
 8001f68:	ed9f 1b77 	vldr	d1, [pc, #476]	; 8002148 <KS_calc_IK+0x318>
 8001f6c:	eeb0 0a47 	vmov.f32	s0, s14
 8001f70:	eef0 0a67 	vmov.f32	s1, s15
 8001f74:	f009 fd34 	bl	800b9e0 <pow>
 8001f78:	ec53 2b10 	vmov	r2, r3, d0
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	4629      	mov	r1, r5
 8001f80:	f7fe f984 	bl	800028c <__adddf3>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	ec43 2b17 	vmov	d7, r2, r3
 8001f8c:	eeb0 0a47 	vmov.f32	s0, s14
 8001f90:	eef0 0a67 	vmov.f32	s1, s15
 8001f94:	f009 fd94 	bl	800bac0 <sqrt>
 8001f98:	ec55 4b10 	vmov	r4, r5, d0
 8001f9c:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8001fa0:	f009 fcb6 	bl	800b910 <tan>
 8001fa4:	ec51 0b10 	vmov	r0, r1, d0
 8001fa8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001fac:	f7fe fb24 	bl	80005f8 <__aeabi_dmul>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	4629      	mov	r1, r5
 8001fb8:	f7fe f966 	bl	8000288 <__aeabi_dsub>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    r2 = z - l1 + l5;
 8001fc4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001fc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fcc:	f7fe f95c 	bl	8000288 <__aeabi_dsub>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001fd8:	f7fe f958 	bl	800028c <__adddf3>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    r3 = sqrt( r1*r1 + r2*r2 );
 8001fe4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001fe8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001fec:	f7fe fb04 	bl	80005f8 <__aeabi_dmul>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4614      	mov	r4, r2
 8001ff6:	461d      	mov	r5, r3
 8001ff8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ffc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002000:	f7fe fafa 	bl	80005f8 <__aeabi_dmul>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4620      	mov	r0, r4
 800200a:	4629      	mov	r1, r5
 800200c:	f7fe f93e 	bl	800028c <__adddf3>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	ec43 2b17 	vmov	d7, r2, r3
 8002018:	eeb0 0a47 	vmov.f32	s0, s14
 800201c:	eef0 0a67 	vmov.f32	s1, s15
 8002020:	f009 fd4e 	bl	800bac0 <sqrt>
 8002024:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
    phi1 = atan( r2 / r1 );
 8002028:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800202c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002030:	f7fe fc0c 	bl	800084c <__aeabi_ddiv>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	ec43 2b17 	vmov	d7, r2, r3
 800203c:	eeb0 0a47 	vmov.f32	s0, s14
 8002040:	eef0 0a67 	vmov.f32	s1, s15
 8002044:	f009 fa0c 	bl	800b460 <atan>
 8002048:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
    phi2 = M_PI/2 - phi1;
 800204c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002050:	a13f      	add	r1, pc, #252	; (adr r1, 8002150 <KS_calc_IK+0x320>)
 8002052:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002056:	f7fe f917 	bl	8000288 <__aeabi_dsub>
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    q2 = acos( ( l3*l3 - l2*l2 - r3*r3 ) / (-2*l2*r3) ) - phi2;
 8002062:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002066:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800206a:	f7fe fac5 	bl	80005f8 <__aeabi_dmul>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	4614      	mov	r4, r2
 8002074:	461d      	mov	r5, r3
 8002076:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800207a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800207e:	f7fe fabb 	bl	80005f8 <__aeabi_dmul>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4620      	mov	r0, r4
 8002088:	4629      	mov	r1, r5
 800208a:	f7fe f8fd 	bl	8000288 <__aeabi_dsub>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4614      	mov	r4, r2
 8002094:	461d      	mov	r5, r3
 8002096:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800209a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800209e:	f7fe faab 	bl	80005f8 <__aeabi_dmul>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	4620      	mov	r0, r4
 80020a8:	4629      	mov	r1, r5
 80020aa:	f7fe f8ed 	bl	8000288 <__aeabi_dsub>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4614      	mov	r4, r2
 80020b4:	461d      	mov	r5, r3
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80020be:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80020c2:	f7fe fa99 	bl	80005f8 <__aeabi_dmul>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4610      	mov	r0, r2
 80020cc:	4619      	mov	r1, r3
 80020ce:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80020d2:	f7fe fa91 	bl	80005f8 <__aeabi_dmul>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4620      	mov	r0, r4
 80020dc:	4629      	mov	r1, r5
 80020de:	f7fe fbb5 	bl	800084c <__aeabi_ddiv>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	ec43 2b17 	vmov	d7, r2, r3
 80020ea:	eeb0 0a47 	vmov.f32	s0, s14
 80020ee:	eef0 0a67 	vmov.f32	s1, s15
 80020f2:	f009 fc41 	bl	800b978 <acos>
 80020f6:	ec51 0b10 	vmov	r0, r1, d0
 80020fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020fe:	f7fe f8c3 	bl	8000288 <__aeabi_dsub>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	e9c7 2308 	strd	r2, r3, [r7, #32]
    q3 = acos( ( r3*r3 - l2*l2 - l3*l3 ) / (-2*l2*l3) ) - M_PI/2;
 800210a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800210e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002112:	f7fe fa71 	bl	80005f8 <__aeabi_dmul>
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	4614      	mov	r4, r2
 800211c:	461d      	mov	r5, r3
 800211e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002122:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002126:	f7fe fa67 	bl	80005f8 <__aeabi_dmul>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	4620      	mov	r0, r4
 8002130:	4629      	mov	r1, r5
 8002132:	f7fe f8a9 	bl	8000288 <__aeabi_dsub>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4614      	mov	r4, r2
 800213c:	461d      	mov	r5, r3
 800213e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002142:	e00b      	b.n	800215c <KS_calc_IK+0x32c>
 8002144:	f3af 8000 	nop.w
 8002148:	00000000 	.word	0x00000000
 800214c:	40000000 	.word	0x40000000
 8002150:	54442d18 	.word	0x54442d18
 8002154:	3ff921fb 	.word	0x3ff921fb
 8002158:	20000340 	.word	0x20000340
 800215c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002160:	f7fe fa4a 	bl	80005f8 <__aeabi_dmul>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4620      	mov	r0, r4
 800216a:	4629      	mov	r1, r5
 800216c:	f7fe f88c 	bl	8000288 <__aeabi_dsub>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4614      	mov	r4, r2
 8002176:	461d      	mov	r5, r3
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8002180:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002184:	f7fe fa38 	bl	80005f8 <__aeabi_dmul>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4610      	mov	r0, r2
 800218e:	4619      	mov	r1, r3
 8002190:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002194:	f7fe fa30 	bl	80005f8 <__aeabi_dmul>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	4620      	mov	r0, r4
 800219e:	4629      	mov	r1, r5
 80021a0:	f7fe fb54 	bl	800084c <__aeabi_ddiv>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	ec43 2b17 	vmov	d7, r2, r3
 80021ac:	eeb0 0a47 	vmov.f32	s0, s14
 80021b0:	eef0 0a67 	vmov.f32	s1, s15
 80021b4:	f009 fbe0 	bl	800b978 <acos>
 80021b8:	ec51 0b10 	vmov	r0, r1, d0
 80021bc:	a32f      	add	r3, pc, #188	; (adr r3, 800227c <KS_calc_IK+0x44c>)
 80021be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c2:	f7fe f861 	bl	8000288 <__aeabi_dsub>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	e9c7 2306 	strd	r2, r3, [r7, #24]

    //check for NaN
    if(q1 != q1 || q2 != q2 || q3 != q3)
 80021ce:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80021d2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80021d6:	f7fe fc77 	bl	8000ac8 <__aeabi_dcmpeq>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d011      	beq.n	8002204 <KS_calc_IK+0x3d4>
 80021e0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021e4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021e8:	f7fe fc6e 	bl	8000ac8 <__aeabi_dcmpeq>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d008      	beq.n	8002204 <KS_calc_IK+0x3d4>
 80021f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021fa:	f7fe fc65 	bl	8000ac8 <__aeabi_dcmpeq>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <KS_calc_IK+0x3d8>
        return false;
 8002204:	2300      	movs	r3, #0
 8002206:	e033      	b.n	8002270 <KS_calc_IK+0x440>

    RobotParams.q1 = RobotParams.q1_off + q1;
 8002208:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <KS_calc_IK+0x448>)
 800220a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800220e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002212:	f7fe f83b 	bl	800028c <__adddf3>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	4917      	ldr	r1, [pc, #92]	; (8002278 <KS_calc_IK+0x448>)
 800221c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    RobotParams.q2 = RobotParams.q2_off + q2;
 8002220:	4b15      	ldr	r3, [pc, #84]	; (8002278 <KS_calc_IK+0x448>)
 8002222:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002226:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800222a:	f7fe f82f 	bl	800028c <__adddf3>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	4911      	ldr	r1, [pc, #68]	; (8002278 <KS_calc_IK+0x448>)
 8002234:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    RobotParams.q3 = RobotParams.q3_off + q3;
 8002238:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <KS_calc_IK+0x448>)
 800223a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800223e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002242:	f7fe f823 	bl	800028c <__adddf3>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	490b      	ldr	r1, [pc, #44]	; (8002278 <KS_calc_IK+0x448>)
 800224c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

    RobotParams.x = x;
 8002250:	4909      	ldr	r1, [pc, #36]	; (8002278 <KS_calc_IK+0x448>)
 8002252:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002256:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    RobotParams.y = y;
 800225a:	4907      	ldr	r1, [pc, #28]	; (8002278 <KS_calc_IK+0x448>)
 800225c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002260:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    RobotParams.z = z;
 8002264:	4904      	ldr	r1, [pc, #16]	; (8002278 <KS_calc_IK+0x448>)
 8002266:	e9d7 2300 	ldrd	r2, r3, [r7]
 800226a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

    return true;
 800226e:	2301      	movs	r3, #1
}
 8002270:	4618      	mov	r0, r3
 8002272:	3780      	adds	r7, #128	; 0x80
 8002274:	46bd      	mov	sp, r7
 8002276:	bdb0      	pop	{r4, r5, r7, pc}
 8002278:	20000340 	.word	0x20000340
 800227c:	54442d18 	.word	0x54442d18
 8002280:	3ff921fb 	.word	0x3ff921fb

08002284 <KS_calc_FK>:

void KS_calc_FK()
{
 8002284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002288:	b092      	sub	sp, #72	; 0x48
 800228a:	af00      	add	r7, sp, #0
    double l1 = RobotParams.l1;     // base to q2
 800228c:	4ba4      	ldr	r3, [pc, #656]	; (8002520 <KS_calc_FK+0x29c>)
 800228e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002292:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    double l2 = RobotParams.l2;     // q2 to q3
 8002296:	4ba2      	ldr	r3, [pc, #648]	; (8002520 <KS_calc_FK+0x29c>)
 8002298:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800229c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double l3 = RobotParams.l3;    	// q3 to efector
 80022a0:	4b9f      	ldr	r3, [pc, #636]	; (8002520 <KS_calc_FK+0x29c>)
 80022a2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80022a6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    double l4 = RobotParams.l4;     // right shift
 80022aa:	4b9d      	ldr	r3, [pc, #628]	; (8002520 <KS_calc_FK+0x29c>)
 80022ac:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80022b0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double l5 = RobotParams.l5;     // efector height
 80022b4:	4b9a      	ldr	r3, [pc, #616]	; (8002520 <KS_calc_FK+0x29c>)
 80022b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80022ba:	e9c7 2308 	strd	r2, r3, [r7, #32]

    double q1 = RobotParams.aq1 - RobotParams.q1_off;
 80022be:	4b98      	ldr	r3, [pc, #608]	; (8002520 <KS_calc_FK+0x29c>)
 80022c0:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 80022c4:	4b96      	ldr	r3, [pc, #600]	; (8002520 <KS_calc_FK+0x29c>)
 80022c6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80022ca:	f7fd ffdd 	bl	8000288 <__aeabi_dsub>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double q2 = RobotParams.aq2 - RobotParams.q2_off;
 80022d6:	4b92      	ldr	r3, [pc, #584]	; (8002520 <KS_calc_FK+0x29c>)
 80022d8:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80022dc:	4b90      	ldr	r3, [pc, #576]	; (8002520 <KS_calc_FK+0x29c>)
 80022de:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80022e2:	f7fd ffd1 	bl	8000288 <__aeabi_dsub>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double q3 = RobotParams.aq3 - RobotParams.q3_off;
 80022ee:	4b8c      	ldr	r3, [pc, #560]	; (8002520 <KS_calc_FK+0x29c>)
 80022f0:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 80022f4:	4b8a      	ldr	r3, [pc, #552]	; (8002520 <KS_calc_FK+0x29c>)
 80022f6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80022fa:	f7fd ffc5 	bl	8000288 <__aeabi_dsub>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	e9c7 2302 	strd	r2, r3, [r7, #8]

    RobotParams.ax = -l2*sin(q2)*cos(q1) + l3*cos(q1)*cos(q2 + q3) + l4*sin(q1);
 8002306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002308:	603b      	str	r3, [r7, #0]
 800230a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800230c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002310:	607b      	str	r3, [r7, #4]
 8002312:	ed97 0b04 	vldr	d0, [r7, #16]
 8002316:	f009 faa3 	bl	800b860 <sin>
 800231a:	ec53 2b10 	vmov	r2, r3, d0
 800231e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002322:	f7fe f969 	bl	80005f8 <__aeabi_dmul>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4690      	mov	r8, r2
 800232c:	4699      	mov	r9, r3
 800232e:	ed97 0b06 	vldr	d0, [r7, #24]
 8002332:	f009 fa35 	bl	800b7a0 <cos>
 8002336:	ec53 2b10 	vmov	r2, r3, d0
 800233a:	4640      	mov	r0, r8
 800233c:	4649      	mov	r1, r9
 800233e:	f7fe f95b 	bl	80005f8 <__aeabi_dmul>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	4690      	mov	r8, r2
 8002348:	4699      	mov	r9, r3
 800234a:	ed97 0b06 	vldr	d0, [r7, #24]
 800234e:	f009 fa27 	bl	800b7a0 <cos>
 8002352:	ec51 0b10 	vmov	r0, r1, d0
 8002356:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800235a:	f7fe f94d 	bl	80005f8 <__aeabi_dmul>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4692      	mov	sl, r2
 8002364:	469b      	mov	fp, r3
 8002366:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800236a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800236e:	f7fd ff8d 	bl	800028c <__adddf3>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	ec43 2b17 	vmov	d7, r2, r3
 800237a:	eeb0 0a47 	vmov.f32	s0, s14
 800237e:	eef0 0a67 	vmov.f32	s1, s15
 8002382:	f009 fa0d 	bl	800b7a0 <cos>
 8002386:	ec53 2b10 	vmov	r2, r3, d0
 800238a:	4650      	mov	r0, sl
 800238c:	4659      	mov	r1, fp
 800238e:	f7fe f933 	bl	80005f8 <__aeabi_dmul>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4640      	mov	r0, r8
 8002398:	4649      	mov	r1, r9
 800239a:	f7fd ff77 	bl	800028c <__adddf3>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4690      	mov	r8, r2
 80023a4:	4699      	mov	r9, r3
 80023a6:	ed97 0b06 	vldr	d0, [r7, #24]
 80023aa:	f009 fa59 	bl	800b860 <sin>
 80023ae:	ec51 0b10 	vmov	r0, r1, d0
 80023b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023b6:	f7fe f91f 	bl	80005f8 <__aeabi_dmul>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4640      	mov	r0, r8
 80023c0:	4649      	mov	r1, r9
 80023c2:	f7fd ff63 	bl	800028c <__adddf3>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4955      	ldr	r1, [pc, #340]	; (8002520 <KS_calc_FK+0x29c>)
 80023cc:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
    RobotParams.ay = -l2*sin(q1)*sin(q2) + l3*sin(q1)*cos(q2 + q3) - l4*cos(q1);
 80023d0:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80023d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023d4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80023d8:	ed97 0b06 	vldr	d0, [r7, #24]
 80023dc:	f009 fa40 	bl	800b860 <sin>
 80023e0:	ec53 2b10 	vmov	r2, r3, d0
 80023e4:	4620      	mov	r0, r4
 80023e6:	4629      	mov	r1, r5
 80023e8:	f7fe f906 	bl	80005f8 <__aeabi_dmul>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4614      	mov	r4, r2
 80023f2:	461d      	mov	r5, r3
 80023f4:	ed97 0b04 	vldr	d0, [r7, #16]
 80023f8:	f009 fa32 	bl	800b860 <sin>
 80023fc:	ec53 2b10 	vmov	r2, r3, d0
 8002400:	4620      	mov	r0, r4
 8002402:	4629      	mov	r1, r5
 8002404:	f7fe f8f8 	bl	80005f8 <__aeabi_dmul>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4614      	mov	r4, r2
 800240e:	461d      	mov	r5, r3
 8002410:	ed97 0b06 	vldr	d0, [r7, #24]
 8002414:	f009 fa24 	bl	800b860 <sin>
 8002418:	ec51 0b10 	vmov	r0, r1, d0
 800241c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002420:	f7fe f8ea 	bl	80005f8 <__aeabi_dmul>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4690      	mov	r8, r2
 800242a:	4699      	mov	r9, r3
 800242c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002430:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002434:	f7fd ff2a 	bl	800028c <__adddf3>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	ec43 2b17 	vmov	d7, r2, r3
 8002440:	eeb0 0a47 	vmov.f32	s0, s14
 8002444:	eef0 0a67 	vmov.f32	s1, s15
 8002448:	f009 f9aa 	bl	800b7a0 <cos>
 800244c:	ec53 2b10 	vmov	r2, r3, d0
 8002450:	4640      	mov	r0, r8
 8002452:	4649      	mov	r1, r9
 8002454:	f7fe f8d0 	bl	80005f8 <__aeabi_dmul>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4620      	mov	r0, r4
 800245e:	4629      	mov	r1, r5
 8002460:	f7fd ff14 	bl	800028c <__adddf3>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4614      	mov	r4, r2
 800246a:	461d      	mov	r5, r3
 800246c:	ed97 0b06 	vldr	d0, [r7, #24]
 8002470:	f009 f996 	bl	800b7a0 <cos>
 8002474:	ec51 0b10 	vmov	r0, r1, d0
 8002478:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800247c:	f7fe f8bc 	bl	80005f8 <__aeabi_dmul>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4620      	mov	r0, r4
 8002486:	4629      	mov	r1, r5
 8002488:	f7fd fefe 	bl	8000288 <__aeabi_dsub>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4923      	ldr	r1, [pc, #140]	; (8002520 <KS_calc_FK+0x29c>)
 8002492:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
    RobotParams.az = l1 + l2*cos(q2) + l3*sin(q2 + q3) - l5;
 8002496:	ed97 0b04 	vldr	d0, [r7, #16]
 800249a:	f009 f981 	bl	800b7a0 <cos>
 800249e:	ec51 0b10 	vmov	r0, r1, d0
 80024a2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80024a6:	f7fe f8a7 	bl	80005f8 <__aeabi_dmul>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4610      	mov	r0, r2
 80024b0:	4619      	mov	r1, r3
 80024b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80024b6:	f7fd fee9 	bl	800028c <__adddf3>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	4614      	mov	r4, r2
 80024c0:	461d      	mov	r5, r3
 80024c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024ca:	f7fd fedf 	bl	800028c <__adddf3>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	ec43 2b17 	vmov	d7, r2, r3
 80024d6:	eeb0 0a47 	vmov.f32	s0, s14
 80024da:	eef0 0a67 	vmov.f32	s1, s15
 80024de:	f009 f9bf 	bl	800b860 <sin>
 80024e2:	ec51 0b10 	vmov	r0, r1, d0
 80024e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80024ea:	f7fe f885 	bl	80005f8 <__aeabi_dmul>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4620      	mov	r0, r4
 80024f4:	4629      	mov	r1, r5
 80024f6:	f7fd fec9 	bl	800028c <__adddf3>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4610      	mov	r0, r2
 8002500:	4619      	mov	r1, r3
 8002502:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002506:	f7fd febf 	bl	8000288 <__aeabi_dsub>
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	4904      	ldr	r1, [pc, #16]	; (8002520 <KS_calc_FK+0x29c>)
 8002510:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
}
 8002514:	bf00      	nop
 8002516:	3748      	adds	r7, #72	; 0x48
 8002518:	46bd      	mov	sp, r7
 800251a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800251e:	bf00      	nop
 8002520:	20000340 	.word	0x20000340

08002524 <HAL_UART_RxCpltCallback>:
//	HAL_UART_Transmit(&huart2, ptr, len, 50);
//	return len;
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
	SRV_uartIRQ(huart);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 fd3f 	bl	8002fb0 <SRV_uartIRQ>
	COM_uartIRQ(huart);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7fe fd5e 	bl	8000ff4 <COM_uartIRQ>
}
 8002538:	bf00      	nop
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	ed2d 8b04 	vpush	{d8-d9}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002548:	f001 f998 	bl	800387c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800254c:	f000 f880 	bl	8002650 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 8002550:	f000 f9d8 	bl	8002904 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002554:	f000 f9f4 	bl	8002940 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002558:	f000 f9a4 	bl	80028a4 <MX_USART2_UART_Init>
  MX_DMA_Init();
 800255c:	f000 f9d2 	bl	8002904 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002560:	f000 f970 	bl	8002844 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8002564:	f000 f8c6 	bl	80026f4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  SRV_Init(&huart1);
 8002568:	4835      	ldr	r0, [pc, #212]	; (8002640 <main+0x100>)
 800256a:	f000 fe3f 	bl	80031ec <SRV_Init>
  PAD_Init(&hadc1);
 800256e:	4835      	ldr	r0, [pc, #212]	; (8002644 <main+0x104>)
 8002570:	f000 fa72 	bl	8002a58 <PAD_Init>
  COM_Init(&huart2);
 8002574:	4834      	ldr	r0, [pc, #208]	; (8002648 <main+0x108>)
 8002576:	f7fe fd29 	bl	8000fcc <COM_Init>
  RobotParams_Init(L1, L2, L3, L4, L5, deg2rad(Q1_OFF), deg2rad(Q2_OFF), deg2rad(Q3_OFF));
 800257a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8002600 <main+0xc0>
 800257e:	f7ff fbcb 	bl	8001d18 <deg2rad>
 8002582:	eeb0 8a40 	vmov.f32	s16, s0
 8002586:	eef0 8a60 	vmov.f32	s17, s1
 800258a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8002608 <main+0xc8>
 800258e:	f7ff fbc3 	bl	8001d18 <deg2rad>
 8002592:	eeb0 9a40 	vmov.f32	s18, s0
 8002596:	eef0 9a60 	vmov.f32	s19, s1
 800259a:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 8002610 <main+0xd0>
 800259e:	f7ff fbbb 	bl	8001d18 <deg2rad>
 80025a2:	eeb0 7a40 	vmov.f32	s14, s0
 80025a6:	eef0 7a60 	vmov.f32	s15, s1
 80025aa:	eeb0 6a49 	vmov.f32	s12, s18
 80025ae:	eef0 6a69 	vmov.f32	s13, s19
 80025b2:	eeb0 5a48 	vmov.f32	s10, s16
 80025b6:	eef0 5a68 	vmov.f32	s11, s17
 80025ba:	ed9f 4b17 	vldr	d4, [pc, #92]	; 8002618 <main+0xd8>
 80025be:	ed9f 3b18 	vldr	d3, [pc, #96]	; 8002620 <main+0xe0>
 80025c2:	ed9f 2b19 	vldr	d2, [pc, #100]	; 8002628 <main+0xe8>
 80025c6:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8002630 <main+0xf0>
 80025ca:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8002638 <main+0xf8>
 80025ce:	f7fe ffa1 	bl	8001514 <RobotParams_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_Delay(1000);
 80025d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025d6:	f001 f9cd 	bl	8003974 <HAL_Delay>

  printf("System started");
 80025da:	481c      	ldr	r0, [pc, #112]	; (800264c <main+0x10c>)
 80025dc:	f006 fe86 	bl	80092ec <iprintf>

  CTRL_startup();
 80025e0:	f7ff f96a 	bl	80018b8 <CTRL_startup>

  while (1)
  {
	  PAD_updateState();
 80025e4:	f000 fa6c 	bl	8002ac0 <PAD_updateState>

	  CTRL_getRealParams();
 80025e8:	f7ff f868 	bl	80016bc <CTRL_getRealParams>

	  COM_rxLoop();
 80025ec:	f7fe fdae 	bl	800114c <COM_rxLoop>

	  CTRL_printInfo();
 80025f0:	f7ff f9fa 	bl	80019e8 <CTRL_printInfo>

	  CTRL_Loop();
 80025f4:	f7ff fb04 	bl	8001c00 <CTRL_Loop>
	  PAD_updateState();
 80025f8:	e7f4      	b.n	80025e4 <main+0xa4>
 80025fa:	bf00      	nop
 80025fc:	f3af 8000 	nop.w
	...
 800260c:	40300000 	.word	0x40300000
 8002610:	00000000 	.word	0x00000000
 8002614:	c0140000 	.word	0xc0140000
 8002618:	cccccccd 	.word	0xcccccccd
 800261c:	4042cccc 	.word	0x4042cccc
 8002620:	00000000 	.word	0x00000000
 8002624:	403fc000 	.word	0x403fc000
 8002628:	9999999a 	.word	0x9999999a
 800262c:	40610999 	.word	0x40610999
 8002630:	cccccccd 	.word	0xcccccccd
 8002634:	4054cccc 	.word	0x4054cccc
 8002638:	00000000 	.word	0x00000000
 800263c:	40464000 	.word	0x40464000
 8002640:	200004c0 	.word	0x200004c0
 8002644:	20000414 	.word	0x20000414
 8002648:	20000544 	.word	0x20000544
 800264c:	0800e04c 	.word	0x0800e04c

08002650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b096      	sub	sp, #88	; 0x58
 8002654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002656:	f107 0314 	add.w	r3, r7, #20
 800265a:	2244      	movs	r2, #68	; 0x44
 800265c:	2100      	movs	r1, #0
 800265e:	4618      	mov	r0, r3
 8002660:	f006 f9d2 	bl	8008a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002664:	463b      	mov	r3, r7
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	609a      	str	r2, [r3, #8]
 800266e:	60da      	str	r2, [r3, #12]
 8002670:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002672:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002676:	f003 fa09 	bl	8005a8c <HAL_PWREx_ControlVoltageScaling>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002680:	f000 f9e4 	bl	8002a4c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002684:	2302      	movs	r3, #2
 8002686:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800268c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800268e:	2310      	movs	r3, #16
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002692:	2302      	movs	r3, #2
 8002694:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002696:	2302      	movs	r3, #2
 8002698:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800269a:	2301      	movs	r3, #1
 800269c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800269e:	230a      	movs	r3, #10
 80026a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80026a2:	2307      	movs	r3, #7
 80026a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80026a6:	2302      	movs	r3, #2
 80026a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80026aa:	2302      	movs	r3, #2
 80026ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026ae:	f107 0314 	add.w	r3, r7, #20
 80026b2:	4618      	mov	r0, r3
 80026b4:	f003 fa40 	bl	8005b38 <HAL_RCC_OscConfig>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80026be:	f000 f9c5 	bl	8002a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026c2:	230f      	movs	r3, #15
 80026c4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026c6:	2303      	movs	r3, #3
 80026c8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026d2:	2300      	movs	r3, #0
 80026d4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80026d6:	463b      	mov	r3, r7
 80026d8:	2104      	movs	r1, #4
 80026da:	4618      	mov	r0, r3
 80026dc:	f003 fe08 	bl	80062f0 <HAL_RCC_ClockConfig>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80026e6:	f000 f9b1 	bl	8002a4c <Error_Handler>
  }
}
 80026ea:	bf00      	nop
 80026ec:	3758      	adds	r7, #88	; 0x58
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08a      	sub	sp, #40	; 0x28
 80026f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80026fa:	f107 031c 	add.w	r3, r7, #28
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	605a      	str	r2, [r3, #4]
 8002704:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002706:	1d3b      	adds	r3, r7, #4
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	60da      	str	r2, [r3, #12]
 8002712:	611a      	str	r2, [r3, #16]
 8002714:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002716:	4b45      	ldr	r3, [pc, #276]	; (800282c <MX_ADC1_Init+0x138>)
 8002718:	4a45      	ldr	r2, [pc, #276]	; (8002830 <MX_ADC1_Init+0x13c>)
 800271a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800271c:	4b43      	ldr	r3, [pc, #268]	; (800282c <MX_ADC1_Init+0x138>)
 800271e:	2200      	movs	r2, #0
 8002720:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002722:	4b42      	ldr	r3, [pc, #264]	; (800282c <MX_ADC1_Init+0x138>)
 8002724:	2200      	movs	r2, #0
 8002726:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002728:	4b40      	ldr	r3, [pc, #256]	; (800282c <MX_ADC1_Init+0x138>)
 800272a:	2200      	movs	r2, #0
 800272c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800272e:	4b3f      	ldr	r3, [pc, #252]	; (800282c <MX_ADC1_Init+0x138>)
 8002730:	2201      	movs	r2, #1
 8002732:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002734:	4b3d      	ldr	r3, [pc, #244]	; (800282c <MX_ADC1_Init+0x138>)
 8002736:	2204      	movs	r2, #4
 8002738:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800273a:	4b3c      	ldr	r3, [pc, #240]	; (800282c <MX_ADC1_Init+0x138>)
 800273c:	2200      	movs	r2, #0
 800273e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002740:	4b3a      	ldr	r3, [pc, #232]	; (800282c <MX_ADC1_Init+0x138>)
 8002742:	2201      	movs	r2, #1
 8002744:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8002746:	4b39      	ldr	r3, [pc, #228]	; (800282c <MX_ADC1_Init+0x138>)
 8002748:	2204      	movs	r2, #4
 800274a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800274c:	4b37      	ldr	r3, [pc, #220]	; (800282c <MX_ADC1_Init+0x138>)
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002754:	4b35      	ldr	r3, [pc, #212]	; (800282c <MX_ADC1_Init+0x138>)
 8002756:	2200      	movs	r2, #0
 8002758:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800275a:	4b34      	ldr	r3, [pc, #208]	; (800282c <MX_ADC1_Init+0x138>)
 800275c:	2200      	movs	r2, #0
 800275e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002760:	4b32      	ldr	r3, [pc, #200]	; (800282c <MX_ADC1_Init+0x138>)
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002768:	4b30      	ldr	r3, [pc, #192]	; (800282c <MX_ADC1_Init+0x138>)
 800276a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800276e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002770:	4b2e      	ldr	r3, [pc, #184]	; (800282c <MX_ADC1_Init+0x138>)
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002778:	482c      	ldr	r0, [pc, #176]	; (800282c <MX_ADC1_Init+0x138>)
 800277a:	f001 fb1b 	bl	8003db4 <HAL_ADC_Init>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002784:	f000 f962 	bl	8002a4c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002788:	2300      	movs	r3, #0
 800278a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800278c:	f107 031c 	add.w	r3, r7, #28
 8002790:	4619      	mov	r1, r3
 8002792:	4826      	ldr	r0, [pc, #152]	; (800282c <MX_ADC1_Init+0x138>)
 8002794:	f002 fb5a 	bl	8004e4c <HAL_ADCEx_MultiModeConfigChannel>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800279e:	f000 f955 	bl	8002a4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80027a2:	4b24      	ldr	r3, [pc, #144]	; (8002834 <MX_ADC1_Init+0x140>)
 80027a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80027a6:	2306      	movs	r3, #6
 80027a8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80027aa:	2307      	movs	r3, #7
 80027ac:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80027ae:	237f      	movs	r3, #127	; 0x7f
 80027b0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80027b2:	2304      	movs	r3, #4
 80027b4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027ba:	1d3b      	adds	r3, r7, #4
 80027bc:	4619      	mov	r1, r3
 80027be:	481b      	ldr	r0, [pc, #108]	; (800282c <MX_ADC1_Init+0x138>)
 80027c0:	f001 fd28 	bl	8004214 <HAL_ADC_ConfigChannel>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80027ca:	f000 f93f 	bl	8002a4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80027ce:	4b1a      	ldr	r3, [pc, #104]	; (8002838 <MX_ADC1_Init+0x144>)
 80027d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80027d2:	230c      	movs	r3, #12
 80027d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027d6:	1d3b      	adds	r3, r7, #4
 80027d8:	4619      	mov	r1, r3
 80027da:	4814      	ldr	r0, [pc, #80]	; (800282c <MX_ADC1_Init+0x138>)
 80027dc:	f001 fd1a 	bl	8004214 <HAL_ADC_ConfigChannel>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80027e6:	f000 f931 	bl	8002a4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80027ea:	4b14      	ldr	r3, [pc, #80]	; (800283c <MX_ADC1_Init+0x148>)
 80027ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80027ee:	2312      	movs	r3, #18
 80027f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027f2:	1d3b      	adds	r3, r7, #4
 80027f4:	4619      	mov	r1, r3
 80027f6:	480d      	ldr	r0, [pc, #52]	; (800282c <MX_ADC1_Init+0x138>)
 80027f8:	f001 fd0c 	bl	8004214 <HAL_ADC_ConfigChannel>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8002802:	f000 f923 	bl	8002a4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002806:	4b0e      	ldr	r3, [pc, #56]	; (8002840 <MX_ADC1_Init+0x14c>)
 8002808:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800280a:	2318      	movs	r3, #24
 800280c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800280e:	1d3b      	adds	r3, r7, #4
 8002810:	4619      	mov	r1, r3
 8002812:	4806      	ldr	r0, [pc, #24]	; (800282c <MX_ADC1_Init+0x138>)
 8002814:	f001 fcfe 	bl	8004214 <HAL_ADC_ConfigChannel>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <MX_ADC1_Init+0x12e>
  {
    Error_Handler();
 800281e:	f000 f915 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002822:	bf00      	nop
 8002824:	3728      	adds	r7, #40	; 0x28
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000414 	.word	0x20000414
 8002830:	50040000 	.word	0x50040000
 8002834:	04300002 	.word	0x04300002
 8002838:	08600004 	.word	0x08600004
 800283c:	0c900008 	.word	0x0c900008
 8002840:	10c00010 	.word	0x10c00010

08002844 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002848:	4b14      	ldr	r3, [pc, #80]	; (800289c <MX_USART1_UART_Init+0x58>)
 800284a:	4a15      	ldr	r2, [pc, #84]	; (80028a0 <MX_USART1_UART_Init+0x5c>)
 800284c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800284e:	4b13      	ldr	r3, [pc, #76]	; (800289c <MX_USART1_UART_Init+0x58>)
 8002850:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002854:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002856:	4b11      	ldr	r3, [pc, #68]	; (800289c <MX_USART1_UART_Init+0x58>)
 8002858:	2200      	movs	r2, #0
 800285a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800285c:	4b0f      	ldr	r3, [pc, #60]	; (800289c <MX_USART1_UART_Init+0x58>)
 800285e:	2200      	movs	r2, #0
 8002860:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002862:	4b0e      	ldr	r3, [pc, #56]	; (800289c <MX_USART1_UART_Init+0x58>)
 8002864:	2200      	movs	r2, #0
 8002866:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002868:	4b0c      	ldr	r3, [pc, #48]	; (800289c <MX_USART1_UART_Init+0x58>)
 800286a:	220c      	movs	r2, #12
 800286c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800286e:	4b0b      	ldr	r3, [pc, #44]	; (800289c <MX_USART1_UART_Init+0x58>)
 8002870:	2200      	movs	r2, #0
 8002872:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002874:	4b09      	ldr	r3, [pc, #36]	; (800289c <MX_USART1_UART_Init+0x58>)
 8002876:	2200      	movs	r2, #0
 8002878:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800287a:	4b08      	ldr	r3, [pc, #32]	; (800289c <MX_USART1_UART_Init+0x58>)
 800287c:	2200      	movs	r2, #0
 800287e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002880:	4b06      	ldr	r3, [pc, #24]	; (800289c <MX_USART1_UART_Init+0x58>)
 8002882:	2200      	movs	r2, #0
 8002884:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8002886:	4805      	ldr	r0, [pc, #20]	; (800289c <MX_USART1_UART_Init+0x58>)
 8002888:	f004 fc60 	bl	800714c <HAL_HalfDuplex_Init>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002892:	f000 f8db 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	200004c0 	.word	0x200004c0
 80028a0:	40013800 	.word	0x40013800

080028a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028a8:	4b14      	ldr	r3, [pc, #80]	; (80028fc <MX_USART2_UART_Init+0x58>)
 80028aa:	4a15      	ldr	r2, [pc, #84]	; (8002900 <MX_USART2_UART_Init+0x5c>)
 80028ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80028ae:	4b13      	ldr	r3, [pc, #76]	; (80028fc <MX_USART2_UART_Init+0x58>)
 80028b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028b6:	4b11      	ldr	r3, [pc, #68]	; (80028fc <MX_USART2_UART_Init+0x58>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028bc:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <MX_USART2_UART_Init+0x58>)
 80028be:	2200      	movs	r2, #0
 80028c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028c2:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <MX_USART2_UART_Init+0x58>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <MX_USART2_UART_Init+0x58>)
 80028ca:	220c      	movs	r2, #12
 80028cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ce:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <MX_USART2_UART_Init+0x58>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028d4:	4b09      	ldr	r3, [pc, #36]	; (80028fc <MX_USART2_UART_Init+0x58>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028da:	4b08      	ldr	r3, [pc, #32]	; (80028fc <MX_USART2_UART_Init+0x58>)
 80028dc:	2200      	movs	r2, #0
 80028de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028e0:	4b06      	ldr	r3, [pc, #24]	; (80028fc <MX_USART2_UART_Init+0x58>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028e6:	4805      	ldr	r0, [pc, #20]	; (80028fc <MX_USART2_UART_Init+0x58>)
 80028e8:	f004 fbe2 	bl	80070b0 <HAL_UART_Init>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80028f2:	f000 f8ab 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000544 	.word	0x20000544
 8002900:	40004400 	.word	0x40004400

08002904 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800290a:	4b0c      	ldr	r3, [pc, #48]	; (800293c <MX_DMA_Init+0x38>)
 800290c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800290e:	4a0b      	ldr	r2, [pc, #44]	; (800293c <MX_DMA_Init+0x38>)
 8002910:	f043 0302 	orr.w	r3, r3, #2
 8002914:	6493      	str	r3, [r2, #72]	; 0x48
 8002916:	4b09      	ldr	r3, [pc, #36]	; (800293c <MX_DMA_Init+0x38>)
 8002918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	607b      	str	r3, [r7, #4]
 8002920:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8002922:	2200      	movs	r2, #0
 8002924:	2100      	movs	r1, #0
 8002926:	203a      	movs	r0, #58	; 0x3a
 8002928:	f002 fc1b 	bl	8005162 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 800292c:	203a      	movs	r0, #58	; 0x3a
 800292e:	f002 fc34 	bl	800519a <HAL_NVIC_EnableIRQ>

}
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40021000 	.word	0x40021000

08002940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08a      	sub	sp, #40	; 0x28
 8002944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002946:	f107 0314 	add.w	r3, r7, #20
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	605a      	str	r2, [r3, #4]
 8002950:	609a      	str	r2, [r3, #8]
 8002952:	60da      	str	r2, [r3, #12]
 8002954:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002956:	4b3b      	ldr	r3, [pc, #236]	; (8002a44 <MX_GPIO_Init+0x104>)
 8002958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295a:	4a3a      	ldr	r2, [pc, #232]	; (8002a44 <MX_GPIO_Init+0x104>)
 800295c:	f043 0304 	orr.w	r3, r3, #4
 8002960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002962:	4b38      	ldr	r3, [pc, #224]	; (8002a44 <MX_GPIO_Init+0x104>)
 8002964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	613b      	str	r3, [r7, #16]
 800296c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800296e:	4b35      	ldr	r3, [pc, #212]	; (8002a44 <MX_GPIO_Init+0x104>)
 8002970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002972:	4a34      	ldr	r2, [pc, #208]	; (8002a44 <MX_GPIO_Init+0x104>)
 8002974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800297a:	4b32      	ldr	r3, [pc, #200]	; (8002a44 <MX_GPIO_Init+0x104>)
 800297c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800297e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002986:	4b2f      	ldr	r3, [pc, #188]	; (8002a44 <MX_GPIO_Init+0x104>)
 8002988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298a:	4a2e      	ldr	r2, [pc, #184]	; (8002a44 <MX_GPIO_Init+0x104>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002992:	4b2c      	ldr	r3, [pc, #176]	; (8002a44 <MX_GPIO_Init+0x104>)
 8002994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800299e:	4b29      	ldr	r3, [pc, #164]	; (8002a44 <MX_GPIO_Init+0x104>)
 80029a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a2:	4a28      	ldr	r2, [pc, #160]	; (8002a44 <MX_GPIO_Init+0x104>)
 80029a4:	f043 0302 	orr.w	r3, r3, #2
 80029a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029aa:	4b26      	ldr	r3, [pc, #152]	; (8002a44 <MX_GPIO_Init+0x104>)
 80029ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	607b      	str	r3, [r7, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80029b6:	2200      	movs	r2, #0
 80029b8:	2120      	movs	r1, #32
 80029ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029be:	f003 f83f 	bl	8005a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EFFECTOR_Pin|LED_MANUAL_Pin|LED_EFFECTOR_Pin, GPIO_PIN_RESET);
 80029c2:	2200      	movs	r2, #0
 80029c4:	21d0      	movs	r1, #208	; 0xd0
 80029c6:	4820      	ldr	r0, [pc, #128]	; (8002a48 <MX_GPIO_Init+0x108>)
 80029c8:	f003 f83a 	bl	8005a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80029cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80029d2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80029d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80029dc:	f107 0314 	add.w	r3, r7, #20
 80029e0:	4619      	mov	r1, r3
 80029e2:	4819      	ldr	r0, [pc, #100]	; (8002a48 <MX_GPIO_Init+0x108>)
 80029e4:	f002 fe6a 	bl	80056bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80029e8:	2320      	movs	r3, #32
 80029ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ec:	2301      	movs	r3, #1
 80029ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f4:	2300      	movs	r3, #0
 80029f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80029f8:	f107 0314 	add.w	r3, r7, #20
 80029fc:	4619      	mov	r1, r3
 80029fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a02:	f002 fe5b 	bl	80056bc <HAL_GPIO_Init>

  /*Configure GPIO pins : EFFECTOR_Pin LED_MANUAL_Pin LED_EFFECTOR_Pin */
  GPIO_InitStruct.Pin = EFFECTOR_Pin|LED_MANUAL_Pin|LED_EFFECTOR_Pin;
 8002a06:	23d0      	movs	r3, #208	; 0xd0
 8002a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a12:	2300      	movs	r3, #0
 8002a14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a16:	f107 0314 	add.w	r3, r7, #20
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	480a      	ldr	r0, [pc, #40]	; (8002a48 <MX_GPIO_Init+0x108>)
 8002a1e:	f002 fe4d 	bl	80056bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAD_R_SW_Pin PAD_L_SW_Pin */
  GPIO_InitStruct.Pin = PAD_R_SW_Pin|PAD_L_SW_Pin;
 8002a22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a30:	f107 0314 	add.w	r3, r7, #20
 8002a34:	4619      	mov	r1, r3
 8002a36:	4804      	ldr	r0, [pc, #16]	; (8002a48 <MX_GPIO_Init+0x108>)
 8002a38:	f002 fe40 	bl	80056bc <HAL_GPIO_Init>

}
 8002a3c:	bf00      	nop
 8002a3e:	3728      	adds	r7, #40	; 0x28
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40021000 	.word	0x40021000
 8002a48:	48000800 	.word	0x48000800

08002a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a50:	b672      	cpsid	i
}
 8002a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a54:	e7fe      	b.n	8002a54 <Error_Handler+0x8>
	...

08002a58 <PAD_Init>:

volatile uint16_t adc_data[4];
PadState_t PAD;

void PAD_Init(ADC_HandleTypeDef* hadc)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
	HAL_ADCEx_Calibration_Start(hadc, ADC_SINGLE_ENDED);
 8002a60:	217f      	movs	r1, #127	; 0x7f
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f002 f992 	bl	8004d8c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(hadc, (uint32_t*)adc_data, 4);
 8002a68:	2204      	movs	r2, #4
 8002a6a:	4913      	ldr	r1, [pc, #76]	; (8002ab8 <PAD_Init+0x60>)
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f001 faf7 	bl	8004060 <HAL_ADC_Start_DMA>
	PAD.axis_L_X = 0;
 8002a72:	4b12      	ldr	r3, [pc, #72]	; (8002abc <PAD_Init+0x64>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	801a      	strh	r2, [r3, #0]
	PAD.axis_L_Y = 0;
 8002a78:	4b10      	ldr	r3, [pc, #64]	; (8002abc <PAD_Init+0x64>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	805a      	strh	r2, [r3, #2]
	PAD.axis_R_X = 0;
 8002a7e:	4b0f      	ldr	r3, [pc, #60]	; (8002abc <PAD_Init+0x64>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	809a      	strh	r2, [r3, #4]
	PAD.axis_R_Y = 0;
 8002a84:	4b0d      	ldr	r3, [pc, #52]	; (8002abc <PAD_Init+0x64>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	80da      	strh	r2, [r3, #6]
	PAD.btn_L_short = false;
 8002a8a:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <PAD_Init+0x64>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	721a      	strb	r2, [r3, #8]
	PAD.btn_L_long = false;
 8002a90:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <PAD_Init+0x64>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	729a      	strb	r2, [r3, #10]
	PAD.btn_R_short = false;
 8002a96:	4b09      	ldr	r3, [pc, #36]	; (8002abc <PAD_Init+0x64>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	725a      	strb	r2, [r3, #9]
	PAD.btn_R_long = false;
 8002a9c:	4b07      	ldr	r3, [pc, #28]	; (8002abc <PAD_Init+0x64>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	72da      	strb	r2, [r3, #11]
	PAD.btn_combo_short = false;
 8002aa2:	4b06      	ldr	r3, [pc, #24]	; (8002abc <PAD_Init+0x64>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	731a      	strb	r2, [r3, #12]
	PAD.btn_combo_long = false;
 8002aa8:	4b04      	ldr	r3, [pc, #16]	; (8002abc <PAD_Init+0x64>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	735a      	strb	r2, [r3, #13]
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	200005c8 	.word	0x200005c8
 8002abc:	200005d0 	.word	0x200005d0

08002ac0 <PAD_updateState>:

// SUPREME ULTIMATE MULTI BUTTON SHORT N LONG PRESS DEBOUNCING ALGORITHM
void PAD_updateState()
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
	// get actual time
	uint32_t now = HAL_GetTick();
 8002ac6:	f000 ff49 	bl	800395c <HAL_GetTick>
 8002aca:	6078      	str	r0, [r7, #4]
	static uint32_t last_combo = 0;


	// ##### HANDLE ADC #####
	static uint32_t last_adc = 0;
	if( now-last_adc > ADC_INTERVAL )
 8002acc:	4b90      	ldr	r3, [pc, #576]	; (8002d10 <PAD_updateState+0x250>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d05b      	beq.n	8002b8e <PAD_updateState+0xce>
	{
		if( hold_lb || hold_long_lb || hold_rb || hold_long_rb)
 8002ad6:	4b8f      	ldr	r3, [pc, #572]	; (8002d14 <PAD_updateState+0x254>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10b      	bne.n	8002af6 <PAD_updateState+0x36>
 8002ade:	4b8e      	ldr	r3, [pc, #568]	; (8002d18 <PAD_updateState+0x258>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d107      	bne.n	8002af6 <PAD_updateState+0x36>
 8002ae6:	4b8d      	ldr	r3, [pc, #564]	; (8002d1c <PAD_updateState+0x25c>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d103      	bne.n	8002af6 <PAD_updateState+0x36>
 8002aee:	4b8c      	ldr	r3, [pc, #560]	; (8002d20 <PAD_updateState+0x260>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00c      	beq.n	8002b10 <PAD_updateState+0x50>
		{
			PAD.axis_L_X = 0;
 8002af6:	4b8b      	ldr	r3, [pc, #556]	; (8002d24 <PAD_updateState+0x264>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	801a      	strh	r2, [r3, #0]
			PAD.axis_L_Y = 0;
 8002afc:	4b89      	ldr	r3, [pc, #548]	; (8002d24 <PAD_updateState+0x264>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	805a      	strh	r2, [r3, #2]
			PAD.axis_R_X = 0;
 8002b02:	4b88      	ldr	r3, [pc, #544]	; (8002d24 <PAD_updateState+0x264>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	809a      	strh	r2, [r3, #4]
			PAD.axis_R_Y = 0;
 8002b08:	4b86      	ldr	r3, [pc, #536]	; (8002d24 <PAD_updateState+0x264>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	80da      	strh	r2, [r3, #6]
 8002b0e:	e03b      	b.n	8002b88 <PAD_updateState+0xc8>
		}
		else
		{
			PAD.axis_L_X = ((4095-adc_data[1])-2048)/200;
 8002b10:	4b85      	ldr	r3, [pc, #532]	; (8002d28 <PAD_updateState+0x268>)
 8002b12:	885b      	ldrh	r3, [r3, #2]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 8002b1a:	3307      	adds	r3, #7
 8002b1c:	4a83      	ldr	r2, [pc, #524]	; (8002d2c <PAD_updateState+0x26c>)
 8002b1e:	fb82 1203 	smull	r1, r2, r2, r3
 8002b22:	1192      	asrs	r2, r2, #6
 8002b24:	17db      	asrs	r3, r3, #31
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	b21a      	sxth	r2, r3
 8002b2a:	4b7e      	ldr	r3, [pc, #504]	; (8002d24 <PAD_updateState+0x264>)
 8002b2c:	801a      	strh	r2, [r3, #0]
			PAD.axis_L_Y = ((4095-adc_data[0])-2048)/200;
 8002b2e:	4b7e      	ldr	r3, [pc, #504]	; (8002d28 <PAD_updateState+0x268>)
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 8002b38:	3307      	adds	r3, #7
 8002b3a:	4a7c      	ldr	r2, [pc, #496]	; (8002d2c <PAD_updateState+0x26c>)
 8002b3c:	fb82 1203 	smull	r1, r2, r2, r3
 8002b40:	1192      	asrs	r2, r2, #6
 8002b42:	17db      	asrs	r3, r3, #31
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	b21a      	sxth	r2, r3
 8002b48:	4b76      	ldr	r3, [pc, #472]	; (8002d24 <PAD_updateState+0x264>)
 8002b4a:	805a      	strh	r2, [r3, #2]
			PAD.axis_R_X = ((4095-adc_data[3])-2048)/200;
 8002b4c:	4b76      	ldr	r3, [pc, #472]	; (8002d28 <PAD_updateState+0x268>)
 8002b4e:	88db      	ldrh	r3, [r3, #6]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 8002b56:	3307      	adds	r3, #7
 8002b58:	4a74      	ldr	r2, [pc, #464]	; (8002d2c <PAD_updateState+0x26c>)
 8002b5a:	fb82 1203 	smull	r1, r2, r2, r3
 8002b5e:	1192      	asrs	r2, r2, #6
 8002b60:	17db      	asrs	r3, r3, #31
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	b21a      	sxth	r2, r3
 8002b66:	4b6f      	ldr	r3, [pc, #444]	; (8002d24 <PAD_updateState+0x264>)
 8002b68:	809a      	strh	r2, [r3, #4]
			PAD.axis_R_Y = ((4095-adc_data[2])-2048)/200;
 8002b6a:	4b6f      	ldr	r3, [pc, #444]	; (8002d28 <PAD_updateState+0x268>)
 8002b6c:	889b      	ldrh	r3, [r3, #4]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 8002b74:	3307      	adds	r3, #7
 8002b76:	4a6d      	ldr	r2, [pc, #436]	; (8002d2c <PAD_updateState+0x26c>)
 8002b78:	fb82 1203 	smull	r1, r2, r2, r3
 8002b7c:	1192      	asrs	r2, r2, #6
 8002b7e:	17db      	asrs	r3, r3, #31
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	b21a      	sxth	r2, r3
 8002b84:	4b67      	ldr	r3, [pc, #412]	; (8002d24 <PAD_updateState+0x264>)
 8002b86:	80da      	strh	r2, [r3, #6]
		}
		last_adc = now;
 8002b88:	4a61      	ldr	r2, [pc, #388]	; (8002d10 <PAD_updateState+0x250>)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6013      	str	r3, [r2, #0]
	}

	// #### TURN OFF FLAGS
	if(PAD.btn_L_short) PAD.btn_L_short = false;
 8002b8e:	4b65      	ldr	r3, [pc, #404]	; (8002d24 <PAD_updateState+0x264>)
 8002b90:	7a1b      	ldrb	r3, [r3, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <PAD_updateState+0xdc>
 8002b96:	4b63      	ldr	r3, [pc, #396]	; (8002d24 <PAD_updateState+0x264>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	721a      	strb	r2, [r3, #8]
	if(PAD.btn_L_long) PAD.btn_L_long = false;
 8002b9c:	4b61      	ldr	r3, [pc, #388]	; (8002d24 <PAD_updateState+0x264>)
 8002b9e:	7a9b      	ldrb	r3, [r3, #10]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <PAD_updateState+0xea>
 8002ba4:	4b5f      	ldr	r3, [pc, #380]	; (8002d24 <PAD_updateState+0x264>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	729a      	strb	r2, [r3, #10]
	if(PAD.btn_R_short) PAD.btn_R_short = false;
 8002baa:	4b5e      	ldr	r3, [pc, #376]	; (8002d24 <PAD_updateState+0x264>)
 8002bac:	7a5b      	ldrb	r3, [r3, #9]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <PAD_updateState+0xf8>
 8002bb2:	4b5c      	ldr	r3, [pc, #368]	; (8002d24 <PAD_updateState+0x264>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	725a      	strb	r2, [r3, #9]
	if(PAD.btn_R_long) PAD.btn_R_long = false;
 8002bb8:	4b5a      	ldr	r3, [pc, #360]	; (8002d24 <PAD_updateState+0x264>)
 8002bba:	7adb      	ldrb	r3, [r3, #11]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d002      	beq.n	8002bc6 <PAD_updateState+0x106>
 8002bc0:	4b58      	ldr	r3, [pc, #352]	; (8002d24 <PAD_updateState+0x264>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	72da      	strb	r2, [r3, #11]
	if(PAD.btn_combo_short) PAD.btn_combo_short = false;
 8002bc6:	4b57      	ldr	r3, [pc, #348]	; (8002d24 <PAD_updateState+0x264>)
 8002bc8:	7b1b      	ldrb	r3, [r3, #12]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <PAD_updateState+0x114>
 8002bce:	4b55      	ldr	r3, [pc, #340]	; (8002d24 <PAD_updateState+0x264>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	731a      	strb	r2, [r3, #12]
	if(PAD.btn_combo_long) PAD.btn_combo_long = false;
 8002bd4:	4b53      	ldr	r3, [pc, #332]	; (8002d24 <PAD_updateState+0x264>)
 8002bd6:	7b5b      	ldrb	r3, [r3, #13]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <PAD_updateState+0x122>
 8002bdc:	4b51      	ldr	r3, [pc, #324]	; (8002d24 <PAD_updateState+0x264>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	735a      	strb	r2, [r3, #13]


	// ##### HANDLE LEFT BUTTON #####
	raw_lb = !HAL_GPIO_ReadPin(PAD_L_SW_GPIO_Port, PAD_L_SW_Pin);
 8002be2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002be6:	4852      	ldr	r0, [pc, #328]	; (8002d30 <PAD_updateState+0x270>)
 8002be8:	f002 ff12 	bl	8005a10 <HAL_GPIO_ReadPin>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	bf0c      	ite	eq
 8002bf2:	2301      	moveq	r3, #1
 8002bf4:	2300      	movne	r3, #0
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	70fb      	strb	r3, [r7, #3]

	if( raw_lb && !hold_lb && now-last_end_lb > DEBOUNCE)
 8002bfa:	78fb      	ldrb	r3, [r7, #3]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d012      	beq.n	8002c26 <PAD_updateState+0x166>
 8002c00:	4b44      	ldr	r3, [pc, #272]	; (8002d14 <PAD_updateState+0x254>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	f083 0301 	eor.w	r3, r3, #1
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00b      	beq.n	8002c26 <PAD_updateState+0x166>
 8002c0e:	4b49      	ldr	r3, [pc, #292]	; (8002d34 <PAD_updateState+0x274>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b14      	cmp	r3, #20
 8002c18:	d905      	bls.n	8002c26 <PAD_updateState+0x166>
	{
		hold_lb = true;
 8002c1a:	4b3e      	ldr	r3, [pc, #248]	; (8002d14 <PAD_updateState+0x254>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	701a      	strb	r2, [r3, #0]
		last_lb = now;
 8002c20:	4a45      	ldr	r2, [pc, #276]	; (8002d38 <PAD_updateState+0x278>)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6013      	str	r3, [r2, #0]
	}

	if( hold_lb && now-last_lb > DEBOUNCE)
 8002c26:	4b3b      	ldr	r3, [pc, #236]	; (8002d14 <PAD_updateState+0x254>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 809a 	beq.w	8002d64 <PAD_updateState+0x2a4>
 8002c30:	4b41      	ldr	r3, [pc, #260]	; (8002d38 <PAD_updateState+0x278>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b14      	cmp	r3, #20
 8002c3a:	f240 8093 	bls.w	8002d64 <PAD_updateState+0x2a4>
	{
		if( now-last_lb > LONG_PRESS )
 8002c3e:	4b3e      	ldr	r3, [pc, #248]	; (8002d38 <PAD_updateState+0x278>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d936      	bls.n	8002cbc <PAD_updateState+0x1fc>
		{
			if( !hold_long_lb )
 8002c4e:	4b32      	ldr	r3, [pc, #200]	; (8002d18 <PAD_updateState+0x258>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	f083 0301 	eor.w	r3, r3, #1
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d01f      	beq.n	8002c9c <PAD_updateState+0x1dc>
			{
				if(now-last_combo > DEAD_TIME)
 8002c5c:	4b37      	ldr	r3, [pc, #220]	; (8002d3c <PAD_updateState+0x27c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c68:	d914      	bls.n	8002c94 <PAD_updateState+0x1d4>
				{
					if( hold_long_rb )
 8002c6a:	4b2d      	ldr	r3, [pc, #180]	; (8002d20 <PAD_updateState+0x260>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d006      	beq.n	8002c80 <PAD_updateState+0x1c0>
					{
						PAD.btn_combo_long = true;
 8002c72:	4b2c      	ldr	r3, [pc, #176]	; (8002d24 <PAD_updateState+0x264>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	735a      	strb	r2, [r3, #13]
						last_combo = now;
 8002c78:	4a30      	ldr	r2, [pc, #192]	; (8002d3c <PAD_updateState+0x27c>)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	e009      	b.n	8002c94 <PAD_updateState+0x1d4>
					}
					else if( !hold_rb )
 8002c80:	4b26      	ldr	r3, [pc, #152]	; (8002d1c <PAD_updateState+0x25c>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	f083 0301 	eor.w	r3, r3, #1
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <PAD_updateState+0x1d4>
						PAD.btn_L_long = true;
 8002c8e:	4b25      	ldr	r3, [pc, #148]	; (8002d24 <PAD_updateState+0x264>)
 8002c90:	2201      	movs	r2, #1
 8002c92:	729a      	strb	r2, [r3, #10]
				}
				hold_long_lb = true;
 8002c94:	4b20      	ldr	r3, [pc, #128]	; (8002d18 <PAD_updateState+0x258>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	701a      	strb	r2, [r3, #0]
 8002c9a:	e063      	b.n	8002d64 <PAD_updateState+0x2a4>
			}
			else if( !raw_lb )
 8002c9c:	78fb      	ldrb	r3, [r7, #3]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d160      	bne.n	8002d64 <PAD_updateState+0x2a4>
			{
				hold_lb = false;
 8002ca2:	4b1c      	ldr	r3, [pc, #112]	; (8002d14 <PAD_updateState+0x254>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	701a      	strb	r2, [r3, #0]
				hold_long_lb = false;
 8002ca8:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <PAD_updateState+0x258>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	701a      	strb	r2, [r3, #0]
				last_end_lb = now;
 8002cae:	4a21      	ldr	r2, [pc, #132]	; (8002d34 <PAD_updateState+0x274>)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6013      	str	r3, [r2, #0]
				last_end_long_lb = true;
 8002cb4:	4b22      	ldr	r3, [pc, #136]	; (8002d40 <PAD_updateState+0x280>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	701a      	strb	r2, [r3, #0]
 8002cba:	e053      	b.n	8002d64 <PAD_updateState+0x2a4>
			}
		}
		else if( !raw_lb )
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d150      	bne.n	8002d64 <PAD_updateState+0x2a4>
		{
			if(now-last_combo > DEAD_TIME)
 8002cc2:	4b1e      	ldr	r3, [pc, #120]	; (8002d3c <PAD_updateState+0x27c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002cce:	d940      	bls.n	8002d52 <PAD_updateState+0x292>
			{
				if( (hold_rb && !hold_long_rb) || (!last_end_long_rb && now-last_end_rb < DEBOUNCE ))
 8002cd0:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <PAD_updateState+0x25c>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d006      	beq.n	8002ce6 <PAD_updateState+0x226>
 8002cd8:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <PAD_updateState+0x260>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	f083 0301 	eor.w	r3, r3, #1
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10c      	bne.n	8002d00 <PAD_updateState+0x240>
 8002ce6:	4b17      	ldr	r3, [pc, #92]	; (8002d44 <PAD_updateState+0x284>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	f083 0301 	eor.w	r3, r3, #1
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d02b      	beq.n	8002d4c <PAD_updateState+0x28c>
 8002cf4:	4b14      	ldr	r3, [pc, #80]	; (8002d48 <PAD_updateState+0x288>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b13      	cmp	r3, #19
 8002cfe:	d825      	bhi.n	8002d4c <PAD_updateState+0x28c>
				{
					PAD.btn_combo_short = true;
 8002d00:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <PAD_updateState+0x264>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	731a      	strb	r2, [r3, #12]
					last_combo = now;
 8002d06:	4a0d      	ldr	r2, [pc, #52]	; (8002d3c <PAD_updateState+0x27c>)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6013      	str	r3, [r2, #0]
 8002d0c:	e021      	b.n	8002d52 <PAD_updateState+0x292>
 8002d0e:	bf00      	nop
 8002d10:	200005e0 	.word	0x200005e0
 8002d14:	200005e4 	.word	0x200005e4
 8002d18:	200005e5 	.word	0x200005e5
 8002d1c:	200005e6 	.word	0x200005e6
 8002d20:	200005e7 	.word	0x200005e7
 8002d24:	200005d0 	.word	0x200005d0
 8002d28:	200005c8 	.word	0x200005c8
 8002d2c:	51eb851f 	.word	0x51eb851f
 8002d30:	48000800 	.word	0x48000800
 8002d34:	200005e8 	.word	0x200005e8
 8002d38:	200005ec 	.word	0x200005ec
 8002d3c:	200005f0 	.word	0x200005f0
 8002d40:	200005f4 	.word	0x200005f4
 8002d44:	200005f5 	.word	0x200005f5
 8002d48:	200005f8 	.word	0x200005f8
				}
				else
					PAD.btn_L_short = true;
 8002d4c:	4b61      	ldr	r3, [pc, #388]	; (8002ed4 <PAD_updateState+0x414>)
 8002d4e:	2201      	movs	r2, #1
 8002d50:	721a      	strb	r2, [r3, #8]
			}
			hold_lb = false;
 8002d52:	4b61      	ldr	r3, [pc, #388]	; (8002ed8 <PAD_updateState+0x418>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	701a      	strb	r2, [r3, #0]
            last_end_lb = now;
 8002d58:	4a60      	ldr	r2, [pc, #384]	; (8002edc <PAD_updateState+0x41c>)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6013      	str	r3, [r2, #0]
            last_end_long_lb = false;
 8002d5e:	4b60      	ldr	r3, [pc, #384]	; (8002ee0 <PAD_updateState+0x420>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	701a      	strb	r2, [r3, #0]
		}
	}


	// ##### HANDLE RIGHT BUTTON #####
	raw_rb = !HAL_GPIO_ReadPin(PAD_R_SW_GPIO_Port, PAD_R_SW_Pin);
 8002d64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d68:	485e      	ldr	r0, [pc, #376]	; (8002ee4 <PAD_updateState+0x424>)
 8002d6a:	f002 fe51 	bl	8005a10 <HAL_GPIO_ReadPin>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	bf0c      	ite	eq
 8002d74:	2301      	moveq	r3, #1
 8002d76:	2300      	movne	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	70bb      	strb	r3, [r7, #2]

	if( raw_rb && !hold_rb && now-last_end_rb > DEBOUNCE)
 8002d7c:	78bb      	ldrb	r3, [r7, #2]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d012      	beq.n	8002da8 <PAD_updateState+0x2e8>
 8002d82:	4b59      	ldr	r3, [pc, #356]	; (8002ee8 <PAD_updateState+0x428>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	f083 0301 	eor.w	r3, r3, #1
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00b      	beq.n	8002da8 <PAD_updateState+0x2e8>
 8002d90:	4b56      	ldr	r3, [pc, #344]	; (8002eec <PAD_updateState+0x42c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b14      	cmp	r3, #20
 8002d9a:	d905      	bls.n	8002da8 <PAD_updateState+0x2e8>
	{
		hold_rb = true;
 8002d9c:	4b52      	ldr	r3, [pc, #328]	; (8002ee8 <PAD_updateState+0x428>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	701a      	strb	r2, [r3, #0]
		last_rb = now;
 8002da2:	4a53      	ldr	r2, [pc, #332]	; (8002ef0 <PAD_updateState+0x430>)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6013      	str	r3, [r2, #0]
	}

	if( hold_rb && now-last_rb > DEBOUNCE)
 8002da8:	4b4f      	ldr	r3, [pc, #316]	; (8002ee8 <PAD_updateState+0x428>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d079      	beq.n	8002ea4 <PAD_updateState+0x3e4>
 8002db0:	4b4f      	ldr	r3, [pc, #316]	; (8002ef0 <PAD_updateState+0x430>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b14      	cmp	r3, #20
 8002dba:	d973      	bls.n	8002ea4 <PAD_updateState+0x3e4>
	{
		if( now-last_rb > LONG_PRESS )
 8002dbc:	4b4c      	ldr	r3, [pc, #304]	; (8002ef0 <PAD_updateState+0x430>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d936      	bls.n	8002e3a <PAD_updateState+0x37a>
		{
			if( !hold_long_rb )
 8002dcc:	4b49      	ldr	r3, [pc, #292]	; (8002ef4 <PAD_updateState+0x434>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	f083 0301 	eor.w	r3, r3, #1
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d01f      	beq.n	8002e1a <PAD_updateState+0x35a>
			{
				if(now-last_combo > DEAD_TIME)
 8002dda:	4b47      	ldr	r3, [pc, #284]	; (8002ef8 <PAD_updateState+0x438>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002de6:	d914      	bls.n	8002e12 <PAD_updateState+0x352>
				{
					if( hold_long_lb )
 8002de8:	4b44      	ldr	r3, [pc, #272]	; (8002efc <PAD_updateState+0x43c>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d006      	beq.n	8002dfe <PAD_updateState+0x33e>
					{
						PAD.btn_combo_long = true;
 8002df0:	4b38      	ldr	r3, [pc, #224]	; (8002ed4 <PAD_updateState+0x414>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	735a      	strb	r2, [r3, #13]
						last_combo = now;
 8002df6:	4a40      	ldr	r2, [pc, #256]	; (8002ef8 <PAD_updateState+0x438>)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6013      	str	r3, [r2, #0]
 8002dfc:	e009      	b.n	8002e12 <PAD_updateState+0x352>
					}
					else if( !hold_lb )
 8002dfe:	4b36      	ldr	r3, [pc, #216]	; (8002ed8 <PAD_updateState+0x418>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	f083 0301 	eor.w	r3, r3, #1
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d002      	beq.n	8002e12 <PAD_updateState+0x352>
						PAD.btn_R_long = true;
 8002e0c:	4b31      	ldr	r3, [pc, #196]	; (8002ed4 <PAD_updateState+0x414>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	72da      	strb	r2, [r3, #11]
				}
				hold_long_rb = true;
 8002e12:	4b38      	ldr	r3, [pc, #224]	; (8002ef4 <PAD_updateState+0x434>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	701a      	strb	r2, [r3, #0]
 8002e18:	e044      	b.n	8002ea4 <PAD_updateState+0x3e4>
			}
			else if( !raw_rb )
 8002e1a:	78bb      	ldrb	r3, [r7, #2]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d141      	bne.n	8002ea4 <PAD_updateState+0x3e4>
			{
				hold_rb = false;
 8002e20:	4b31      	ldr	r3, [pc, #196]	; (8002ee8 <PAD_updateState+0x428>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	701a      	strb	r2, [r3, #0]
				hold_long_rb = false;
 8002e26:	4b33      	ldr	r3, [pc, #204]	; (8002ef4 <PAD_updateState+0x434>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	701a      	strb	r2, [r3, #0]
				last_end_rb = now;
 8002e2c:	4a2f      	ldr	r2, [pc, #188]	; (8002eec <PAD_updateState+0x42c>)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6013      	str	r3, [r2, #0]
				last_end_long_rb = true;
 8002e32:	4b33      	ldr	r3, [pc, #204]	; (8002f00 <PAD_updateState+0x440>)
 8002e34:	2201      	movs	r2, #1
 8002e36:	701a      	strb	r2, [r3, #0]
 8002e38:	e034      	b.n	8002ea4 <PAD_updateState+0x3e4>
			}
		}
		else if( !raw_rb )
 8002e3a:	78bb      	ldrb	r3, [r7, #2]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d131      	bne.n	8002ea4 <PAD_updateState+0x3e4>
		{
			if(now-last_combo > DEAD_TIME)
 8002e40:	4b2d      	ldr	r3, [pc, #180]	; (8002ef8 <PAD_updateState+0x438>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e4c:	d921      	bls.n	8002e92 <PAD_updateState+0x3d2>
			{
				if( (hold_lb && !hold_long_lb) || (!last_end_long_lb && now-last_end_lb < DEBOUNCE ))
 8002e4e:	4b22      	ldr	r3, [pc, #136]	; (8002ed8 <PAD_updateState+0x418>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d006      	beq.n	8002e64 <PAD_updateState+0x3a4>
 8002e56:	4b29      	ldr	r3, [pc, #164]	; (8002efc <PAD_updateState+0x43c>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	f083 0301 	eor.w	r3, r3, #1
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10c      	bne.n	8002e7e <PAD_updateState+0x3be>
 8002e64:	4b1e      	ldr	r3, [pc, #120]	; (8002ee0 <PAD_updateState+0x420>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	f083 0301 	eor.w	r3, r3, #1
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00c      	beq.n	8002e8c <PAD_updateState+0x3cc>
 8002e72:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <PAD_updateState+0x41c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b13      	cmp	r3, #19
 8002e7c:	d806      	bhi.n	8002e8c <PAD_updateState+0x3cc>
				{
					PAD.btn_combo_short = true;
 8002e7e:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <PAD_updateState+0x414>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	731a      	strb	r2, [r3, #12]
					last_combo = now;
 8002e84:	4a1c      	ldr	r2, [pc, #112]	; (8002ef8 <PAD_updateState+0x438>)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	e002      	b.n	8002e92 <PAD_updateState+0x3d2>
				}
				else
					PAD.btn_R_short = true;
 8002e8c:	4b11      	ldr	r3, [pc, #68]	; (8002ed4 <PAD_updateState+0x414>)
 8002e8e:	2201      	movs	r2, #1
 8002e90:	725a      	strb	r2, [r3, #9]
			}
            hold_rb = false;
 8002e92:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <PAD_updateState+0x428>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	701a      	strb	r2, [r3, #0]
            last_end_rb = now;
 8002e98:	4a14      	ldr	r2, [pc, #80]	; (8002eec <PAD_updateState+0x42c>)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6013      	str	r3, [r2, #0]
            last_end_long_rb = false;
 8002e9e:	4b18      	ldr	r3, [pc, #96]	; (8002f00 <PAD_updateState+0x440>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]
		}
	}

	//#### COMBO MASKING SINGLE #####
	if( PAD.btn_combo_short || PAD.btn_combo_long )
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <PAD_updateState+0x414>)
 8002ea6:	7b1b      	ldrb	r3, [r3, #12]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d103      	bne.n	8002eb4 <PAD_updateState+0x3f4>
 8002eac:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <PAD_updateState+0x414>)
 8002eae:	7b5b      	ldrb	r3, [r3, #13]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00b      	beq.n	8002ecc <PAD_updateState+0x40c>
	{
		PAD.btn_L_short = false;
 8002eb4:	4b07      	ldr	r3, [pc, #28]	; (8002ed4 <PAD_updateState+0x414>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	721a      	strb	r2, [r3, #8]
		PAD.btn_L_long = false;
 8002eba:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <PAD_updateState+0x414>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	729a      	strb	r2, [r3, #10]
		PAD.btn_R_short = false;
 8002ec0:	4b04      	ldr	r3, [pc, #16]	; (8002ed4 <PAD_updateState+0x414>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	725a      	strb	r2, [r3, #9]
		PAD.btn_R_long = false;
 8002ec6:	4b03      	ldr	r3, [pc, #12]	; (8002ed4 <PAD_updateState+0x414>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	72da      	strb	r2, [r3, #11]
	}

}
 8002ecc:	bf00      	nop
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	200005d0 	.word	0x200005d0
 8002ed8:	200005e4 	.word	0x200005e4
 8002edc:	200005e8 	.word	0x200005e8
 8002ee0:	200005f4 	.word	0x200005f4
 8002ee4:	48000800 	.word	0x48000800
 8002ee8:	200005e6 	.word	0x200005e6
 8002eec:	200005f8 	.word	0x200005f8
 8002ef0:	200005fc 	.word	0x200005fc
 8002ef4:	200005e7 	.word	0x200005e7
 8002ef8:	200005f0 	.word	0x200005f0
 8002efc:	200005e5 	.word	0x200005e5
 8002f00:	200005f5 	.word	0x200005f5

08002f04 <PAD_setLedManual>:

inline void PAD_setLedManual(bool state) { HAL_GPIO_WritePin(LED_MANUAL_GPIO_Port, LED_MANUAL_Pin, state); }
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	71fb      	strb	r3, [r7, #7]
 8002f0e:	79fb      	ldrb	r3, [r7, #7]
 8002f10:	461a      	mov	r2, r3
 8002f12:	2140      	movs	r1, #64	; 0x40
 8002f14:	4803      	ldr	r0, [pc, #12]	; (8002f24 <PAD_setLedManual+0x20>)
 8002f16:	f002 fd93 	bl	8005a40 <HAL_GPIO_WritePin>
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	48000800 	.word	0x48000800

08002f28 <PAD_setLedFx>:

inline void PAD_setLedFx(bool state) { HAL_GPIO_WritePin(LED_EFFECTOR_GPIO_Port, LED_EFFECTOR_Pin, state); }
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	71fb      	strb	r3, [r7, #7]
 8002f32:	79fb      	ldrb	r3, [r7, #7]
 8002f34:	461a      	mov	r2, r3
 8002f36:	2180      	movs	r1, #128	; 0x80
 8002f38:	4803      	ldr	r0, [pc, #12]	; (8002f48 <PAD_setLedFx+0x20>)
 8002f3a:	f002 fd81 	bl	8005a40 <HAL_GPIO_WritePin>
 8002f3e:	bf00      	nop
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	48000800 	.word	0x48000800

08002f4c <SRV_uartClearBuff>:
volatile uint8_t* SRV_rx_head;
volatile uint8_t* SRV_rx_tail;


void SRV_uartClearBuff()
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
	SRV_rx_head = SRV_RxBuff;
 8002f50:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <SRV_uartClearBuff+0x1c>)
 8002f52:	4a06      	ldr	r2, [pc, #24]	; (8002f6c <SRV_uartClearBuff+0x20>)
 8002f54:	601a      	str	r2, [r3, #0]
	SRV_rx_tail = SRV_RxBuff;
 8002f56:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <SRV_uartClearBuff+0x24>)
 8002f58:	4a04      	ldr	r2, [pc, #16]	; (8002f6c <SRV_uartClearBuff+0x20>)
 8002f5a:	601a      	str	r2, [r3, #0]
}
 8002f5c:	bf00      	nop
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	20000614 	.word	0x20000614
 8002f6c:	20000604 	.word	0x20000604
 8002f70:	20000618 	.word	0x20000618

08002f74 <SRV_uartStopRx>:

static inline void SRV_uartStopRx()
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
	huart_srv->RxState = HAL_UART_STATE_READY;
 8002f78:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <SRV_uartStopRx+0x18>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8002f80:	bf00      	nop
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	20000600 	.word	0x20000600

08002f90 <SRV_uartStartRx>:

static inline void SRV_uartStartRx()
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(huart_srv, (uint8_t*)SRV_rx_head, 1);
 8002f94:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <SRV_uartStartRx+0x18>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a04      	ldr	r2, [pc, #16]	; (8002fac <SRV_uartStartRx+0x1c>)
 8002f9a:	6811      	ldr	r1, [r2, #0]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f004 f9be 	bl	8007320 <HAL_UART_Receive_IT>
}
 8002fa4:	bf00      	nop
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20000600 	.word	0x20000600
 8002fac:	20000614 	.word	0x20000614

08002fb0 <SRV_uartIRQ>:

void SRV_uartIRQ(UART_HandleTypeDef* huart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
	if(huart == huart_srv)
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <SRV_uartIRQ+0x38>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d10e      	bne.n	8002fe0 <SRV_uartIRQ+0x30>
	{
		SRV_rx_head++;
 8002fc2:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <SRV_uartIRQ+0x3c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	4a08      	ldr	r2, [pc, #32]	; (8002fec <SRV_uartIRQ+0x3c>)
 8002fca:	6013      	str	r3, [r2, #0]
		if( SRV_rx_head == SRV_RxBuff+SRV_RX_BUFF_SIZE)
 8002fcc:	4b07      	ldr	r3, [pc, #28]	; (8002fec <SRV_uartIRQ+0x3c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a07      	ldr	r2, [pc, #28]	; (8002ff0 <SRV_uartIRQ+0x40>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d102      	bne.n	8002fdc <SRV_uartIRQ+0x2c>
			SRV_rx_head = SRV_RxBuff;
 8002fd6:	4b05      	ldr	r3, [pc, #20]	; (8002fec <SRV_uartIRQ+0x3c>)
 8002fd8:	4a06      	ldr	r2, [pc, #24]	; (8002ff4 <SRV_uartIRQ+0x44>)
 8002fda:	601a      	str	r2, [r3, #0]
		SRV_uartStartRx();
 8002fdc:	f7ff ffd8 	bl	8002f90 <SRV_uartStartRx>
	}
}
 8002fe0:	bf00      	nop
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	20000600 	.word	0x20000600
 8002fec:	20000614 	.word	0x20000614
 8002ff0:	20000614 	.word	0x20000614
 8002ff4:	20000604 	.word	0x20000604

08002ff8 <SRV_uartDataAvailable>:

uint8_t SRV_uartDataAvailable()
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
	return SRV_rx_head-SRV_rx_tail;
 8002ffc:	4b05      	ldr	r3, [pc, #20]	; (8003014 <SRV_uartDataAvailable+0x1c>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	4b05      	ldr	r3, [pc, #20]	; (8003018 <SRV_uartDataAvailable+0x20>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	b2db      	uxtb	r3, r3
}
 8003008:	4618      	mov	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	20000614 	.word	0x20000614
 8003018:	20000618 	.word	0x20000618

0800301c <SRV_uartReadByte>:

uint8_t SRV_uartReadByte()
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
	return *(SRV_rx_tail++);
 8003020:	4b05      	ldr	r3, [pc, #20]	; (8003038 <SRV_uartReadByte+0x1c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	4904      	ldr	r1, [pc, #16]	; (8003038 <SRV_uartReadByte+0x1c>)
 8003028:	600a      	str	r2, [r1, #0]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	b2db      	uxtb	r3, r3
}
 800302e:	4618      	mov	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	20000618 	.word	0x20000618

0800303c <SRV_uartPeek>:

uint8_t SRV_uartPeek()
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
	return *(SRV_rx_tail);
 8003040:	4b04      	ldr	r3, [pc, #16]	; (8003054 <SRV_uartPeek+0x18>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	b2db      	uxtb	r3, r3
}
 8003048:	4618      	mov	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	20000618 	.word	0x20000618

08003058 <SRV_uartSendPacket>:

void SRV_uartSendPacket(uint8_t* packet, uint8_t len)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	70fb      	strb	r3, [r7, #3]
	SRV_uartStopRx();
 8003064:	f7ff ff86 	bl	8002f74 <SRV_uartStopRx>
	SRV_uartClearBuff();
 8003068:	f7ff ff70 	bl	8002f4c <SRV_uartClearBuff>
	HAL_HalfDuplex_EnableTransmitter(huart_srv);
 800306c:	4b0b      	ldr	r3, [pc, #44]	; (800309c <SRV_uartSendPacket+0x44>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f004 fcad 	bl	80079d0 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(huart_srv, packet , len, UART_TIMEOUT);
 8003076:	4b09      	ldr	r3, [pc, #36]	; (800309c <SRV_uartSendPacket+0x44>)
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	78fb      	ldrb	r3, [r7, #3]
 800307c:	b29a      	uxth	r2, r3
 800307e:	2332      	movs	r3, #50	; 0x32
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	f004 f8b9 	bl	80071f8 <HAL_UART_Transmit>
	HAL_HalfDuplex_EnableReceiver(huart_srv);
 8003086:	4b05      	ldr	r3, [pc, #20]	; (800309c <SRV_uartSendPacket+0x44>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f004 fcf2 	bl	8007a74 <HAL_HalfDuplex_EnableReceiver>
	SRV_uartStartRx();
 8003090:	f7ff ff7e 	bl	8002f90 <SRV_uartStartRx>
}
 8003094:	bf00      	nop
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	20000600 	.word	0x20000600

080030a0 <SRV_sendCommand>:
/* #############################
 *   SERVO COMMUNICATION LAYER
 * #############################
 */
void SRV_sendCommand(uint8_t id, uint8_t* params)
{
 80030a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80030a4:	b087      	sub	sp, #28
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	4603      	mov	r3, r0
 80030aa:	6039      	str	r1, [r7, #0]
 80030ac:	71fb      	strb	r3, [r7, #7]
 80030ae:	466b      	mov	r3, sp
 80030b0:	461e      	mov	r6, r3
	uint8_t base_len = 4;
 80030b2:	2304      	movs	r3, #4
 80030b4:	757b      	strb	r3, [r7, #21]
	uint8_t params_len = params[0];
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	753b      	strb	r3, [r7, #20]
	uint8_t len = base_len + params_len;
 80030bc:	7d7a      	ldrb	r2, [r7, #21]
 80030be:	7d3b      	ldrb	r3, [r7, #20]
 80030c0:	4413      	add	r3, r2
 80030c2:	74fb      	strb	r3, [r7, #19]
	//preapare packet
	uint8_t packet[len];
 80030c4:	7cf9      	ldrb	r1, [r7, #19]
 80030c6:	460b      	mov	r3, r1
 80030c8:	3b01      	subs	r3, #1
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	b2cb      	uxtb	r3, r1
 80030ce:	2200      	movs	r2, #0
 80030d0:	4698      	mov	r8, r3
 80030d2:	4691      	mov	r9, r2
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030e8:	b2cb      	uxtb	r3, r1
 80030ea:	2200      	movs	r2, #0
 80030ec:	461c      	mov	r4, r3
 80030ee:	4615      	mov	r5, r2
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	00eb      	lsls	r3, r5, #3
 80030fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030fe:	00e2      	lsls	r2, r4, #3
 8003100:	460b      	mov	r3, r1
 8003102:	3307      	adds	r3, #7
 8003104:	08db      	lsrs	r3, r3, #3
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	ebad 0d03 	sub.w	sp, sp, r3
 800310c:	466b      	mov	r3, sp
 800310e:	3300      	adds	r3, #0
 8003110:	60bb      	str	r3, [r7, #8]
	packet[0] = AX_START;
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	22ff      	movs	r2, #255	; 0xff
 8003116:	701a      	strb	r2, [r3, #0]
	packet[1] = AX_START;
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	22ff      	movs	r2, #255	; 0xff
 800311c:	705a      	strb	r2, [r3, #1]
	packet[2] = id;
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	79fa      	ldrb	r2, [r7, #7]
 8003122:	709a      	strb	r2, [r3, #2]
	memcpy(packet+3, params, params_len);
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	3303      	adds	r3, #3
 8003128:	7d3a      	ldrb	r2, [r7, #20]
 800312a:	6839      	ldr	r1, [r7, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f005 fc5d 	bl	80089ec <memcpy>

	//calculate checksum
	uint8_t checksum = 0;
 8003132:	2300      	movs	r3, #0
 8003134:	75bb      	strb	r3, [r7, #22]
	for( uint8_t i = 2; i < len-1; i++)
 8003136:	2302      	movs	r3, #2
 8003138:	75fb      	strb	r3, [r7, #23]
 800313a:	e008      	b.n	800314e <SRV_sendCommand+0xae>
		checksum += packet[i];
 800313c:	7dfb      	ldrb	r3, [r7, #23]
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	5cd2      	ldrb	r2, [r2, r3]
 8003142:	7dbb      	ldrb	r3, [r7, #22]
 8003144:	4413      	add	r3, r2
 8003146:	75bb      	strb	r3, [r7, #22]
	for( uint8_t i = 2; i < len-1; i++)
 8003148:	7dfb      	ldrb	r3, [r7, #23]
 800314a:	3301      	adds	r3, #1
 800314c:	75fb      	strb	r3, [r7, #23]
 800314e:	7dfa      	ldrb	r2, [r7, #23]
 8003150:	7cfb      	ldrb	r3, [r7, #19]
 8003152:	3b01      	subs	r3, #1
 8003154:	429a      	cmp	r2, r3
 8003156:	dbf1      	blt.n	800313c <SRV_sendCommand+0x9c>
	checksum = ( ~checksum ) & 0xFF;
 8003158:	7dbb      	ldrb	r3, [r7, #22]
 800315a:	43db      	mvns	r3, r3
 800315c:	75bb      	strb	r3, [r7, #22]
	packet[len-1] = checksum;
 800315e:	7cfb      	ldrb	r3, [r7, #19]
 8003160:	3b01      	subs	r3, #1
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	7db9      	ldrb	r1, [r7, #22]
 8003166:	54d1      	strb	r1, [r2, r3]

	//send via uart
	SRV_uartSendPacket(packet, len);
 8003168:	7cfb      	ldrb	r3, [r7, #19]
 800316a:	4619      	mov	r1, r3
 800316c:	68b8      	ldr	r0, [r7, #8]
 800316e:	f7ff ff73 	bl	8003058 <SRV_uartSendPacket>
 8003172:	46b5      	mov	sp, r6
}
 8003174:	bf00      	nop
 8003176:	371c      	adds	r7, #28
 8003178:	46bd      	mov	sp, r7
 800317a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800317e <SRV_getResponse>:

uint8_t SRV_getResponse(uint8_t* response, uint8_t len)
{
 800317e:	b590      	push	{r4, r7, lr}
 8003180:	b085      	sub	sp, #20
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
 8003186:	460b      	mov	r3, r1
 8003188:	70fb      	strb	r3, [r7, #3]
	uint32_t start = HAL_GetTick();
 800318a:	f000 fbe7 	bl	800395c <HAL_GetTick>
 800318e:	60b8      	str	r0, [r7, #8]
	//wait for data to arrive
	while( SRV_uartDataAvailable() < len )
 8003190:	e008      	b.n	80031a4 <SRV_getResponse+0x26>
	{
		if(HAL_GetTick()-start > UART_TIMEOUT) //fail when timed out
 8003192:	f000 fbe3 	bl	800395c <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b32      	cmp	r3, #50	; 0x32
 800319e:	d901      	bls.n	80031a4 <SRV_getResponse+0x26>
			return 1;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e01f      	b.n	80031e4 <SRV_getResponse+0x66>
	while( SRV_uartDataAvailable() < len )
 80031a4:	f7ff ff28 	bl	8002ff8 <SRV_uartDataAvailable>
 80031a8:	4603      	mov	r3, r0
 80031aa:	461a      	mov	r2, r3
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d8ef      	bhi.n	8003192 <SRV_getResponse+0x14>
	}
	//check for start byte
	if( SRV_uartPeek() == AX_START )
 80031b2:	f7ff ff43 	bl	800303c <SRV_uartPeek>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2bff      	cmp	r3, #255	; 0xff
 80031ba:	d112      	bne.n	80031e2 <SRV_getResponse+0x64>
	{
		//copy from rx buff
		for(uint8_t i = 0; i < len; i++)
 80031bc:	2300      	movs	r3, #0
 80031be:	73fb      	strb	r3, [r7, #15]
 80031c0:	e009      	b.n	80031d6 <SRV_getResponse+0x58>
			response[i] = SRV_uartReadByte();
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	18d4      	adds	r4, r2, r3
 80031c8:	f7ff ff28 	bl	800301c <SRV_uartReadByte>
 80031cc:	4603      	mov	r3, r0
 80031ce:	7023      	strb	r3, [r4, #0]
		for(uint8_t i = 0; i < len; i++)
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
 80031d2:	3301      	adds	r3, #1
 80031d4:	73fb      	strb	r3, [r7, #15]
 80031d6:	7bfa      	ldrb	r2, [r7, #15]
 80031d8:	78fb      	ldrb	r3, [r7, #3]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d3f1      	bcc.n	80031c2 <SRV_getResponse+0x44>
		return 0;
 80031de:	2300      	movs	r3, #0
 80031e0:	e000      	b.n	80031e4 <SRV_getResponse+0x66>
	}
	else return 1;
 80031e2:	2301      	movs	r3, #1
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd90      	pop	{r4, r7, pc}

080031ec <SRV_Init>:
/* ###############################
 *   SERVO ABSTRACT COMMANDS
 * ###############################
 */
void SRV_Init(UART_HandleTypeDef* huart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
	huart_srv = huart;
 80031f4:	4a04      	ldr	r2, [pc, #16]	; (8003208 <SRV_Init+0x1c>)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6013      	str	r3, [r2, #0]
	SRV_uartClearBuff();
 80031fa:	f7ff fea7 	bl	8002f4c <SRV_uartClearBuff>
}
 80031fe:	bf00      	nop
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	20000600 	.word	0x20000600

0800320c <SRV_readError>:

uint8_t SRV_readError()
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
	uint8_t response[5];
	SRV_getResponse(response, 5);
 8003212:	463b      	mov	r3, r7
 8003214:	2105      	movs	r1, #5
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff ffb1 	bl	800317e <SRV_getResponse>
	return response[4];
 800321c:	793b      	ldrb	r3, [r7, #4]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <SRV_setLED>:

uint8_t SRV_setLED(uint8_t id, uint8_t state)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b084      	sub	sp, #16
 800322a:	af00      	add	r7, sp, #0
 800322c:	4603      	mov	r3, r0
 800322e:	460a      	mov	r2, r1
 8003230:	71fb      	strb	r3, [r7, #7]
 8003232:	4613      	mov	r3, r2
 8003234:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[] = { AX_LED_LENGTH, AX_WRITE_DATA, AX_LED, state};
 8003236:	2304      	movs	r3, #4
 8003238:	733b      	strb	r3, [r7, #12]
 800323a:	2303      	movs	r3, #3
 800323c:	737b      	strb	r3, [r7, #13]
 800323e:	2319      	movs	r3, #25
 8003240:	73bb      	strb	r3, [r7, #14]
 8003242:	79bb      	ldrb	r3, [r7, #6]
 8003244:	73fb      	strb	r3, [r7, #15]
	SRV_sendCommand(id, cmd);
 8003246:	f107 020c 	add.w	r2, r7, #12
 800324a:	79fb      	ldrb	r3, [r7, #7]
 800324c:	4611      	mov	r1, r2
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff ff26 	bl	80030a0 <SRV_sendCommand>
	return SRV_readError();
 8003254:	f7ff ffda 	bl	800320c <SRV_readError>
 8003258:	4603      	mov	r3, r0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <SRV_move>:

uint8_t SRV_move(uint8_t id, uint16_t position, uint16_t speed)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b086      	sub	sp, #24
 8003266:	af00      	add	r7, sp, #0
 8003268:	4603      	mov	r3, r0
 800326a:	71fb      	strb	r3, [r7, #7]
 800326c:	460b      	mov	r3, r1
 800326e:	80bb      	strh	r3, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	807b      	strh	r3, [r7, #2]
    uint8_t Position_H = position >> 8;           // 16 bits - 2 x 8 bits variables
 8003274:	88bb      	ldrh	r3, [r7, #4]
 8003276:	0a1b      	lsrs	r3, r3, #8
 8003278:	b29b      	uxth	r3, r3
 800327a:	75fb      	strb	r3, [r7, #23]
    uint8_t Position_L = position;
 800327c:	88bb      	ldrh	r3, [r7, #4]
 800327e:	75bb      	strb	r3, [r7, #22]
    uint8_t Speed_H = speed >> 8;
 8003280:	887b      	ldrh	r3, [r7, #2]
 8003282:	0a1b      	lsrs	r3, r3, #8
 8003284:	b29b      	uxth	r3, r3
 8003286:	757b      	strb	r3, [r7, #21]
    uint8_t Speed_L = speed;                      // 16 bits - 2 x 8 bits variables
 8003288:	887b      	ldrh	r3, [r7, #2]
 800328a:	753b      	strb	r3, [r7, #20]

	uint8_t cmd[] = {AX_GOAL_SP_LENGTH, AX_WRITE_DATA, AX_GOAL_POSITION_L, Position_L, Position_H, Speed_L, Speed_H };
 800328c:	2307      	movs	r3, #7
 800328e:	733b      	strb	r3, [r7, #12]
 8003290:	2303      	movs	r3, #3
 8003292:	737b      	strb	r3, [r7, #13]
 8003294:	231e      	movs	r3, #30
 8003296:	73bb      	strb	r3, [r7, #14]
 8003298:	7dbb      	ldrb	r3, [r7, #22]
 800329a:	73fb      	strb	r3, [r7, #15]
 800329c:	7dfb      	ldrb	r3, [r7, #23]
 800329e:	743b      	strb	r3, [r7, #16]
 80032a0:	7d3b      	ldrb	r3, [r7, #20]
 80032a2:	747b      	strb	r3, [r7, #17]
 80032a4:	7d7b      	ldrb	r3, [r7, #21]
 80032a6:	74bb      	strb	r3, [r7, #18]
	SRV_sendCommand(id, cmd);
 80032a8:	f107 020c 	add.w	r2, r7, #12
 80032ac:	79fb      	ldrb	r3, [r7, #7]
 80032ae:	4611      	mov	r1, r2
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff fef5 	bl	80030a0 <SRV_sendCommand>
	return SRV_readError();
 80032b6:	f7ff ffa9 	bl	800320c <SRV_readError>
 80032ba:	4603      	mov	r3, r0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <SRV_enableTorque>:

uint8_t SRV_enableTorque(uint8_t id, uint8_t state)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	460a      	mov	r2, r1
 80032ce:	71fb      	strb	r3, [r7, #7]
 80032d0:	4613      	mov	r3, r2
 80032d2:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[] = { AX_TORQUE_LENGTH, AX_WRITE_DATA, AX_TORQUE_ENABLE, state };
 80032d4:	2304      	movs	r3, #4
 80032d6:	733b      	strb	r3, [r7, #12]
 80032d8:	2303      	movs	r3, #3
 80032da:	737b      	strb	r3, [r7, #13]
 80032dc:	2318      	movs	r3, #24
 80032de:	73bb      	strb	r3, [r7, #14]
 80032e0:	79bb      	ldrb	r3, [r7, #6]
 80032e2:	73fb      	strb	r3, [r7, #15]
	SRV_sendCommand(id, cmd);
 80032e4:	f107 020c 	add.w	r2, r7, #12
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	4611      	mov	r1, r2
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff fed7 	bl	80030a0 <SRV_sendCommand>
	return SRV_readError();
 80032f2:	f7ff ff8b 	bl	800320c <SRV_readError>
 80032f6:	4603      	mov	r3, r0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <SRV_readPosition>:

uint16_t SRV_readPosition(uint8_t id)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[] = {AX_POS_LENGTH, AX_READ_DATA, AX_PRESENT_POSITION_L, AX_BYTE_READ_POS};
 800330a:	4b0d      	ldr	r3, [pc, #52]	; (8003340 <SRV_readPosition+0x40>)
 800330c:	617b      	str	r3, [r7, #20]
	SRV_sendCommand(id, cmd);
 800330e:	f107 0214 	add.w	r2, r7, #20
 8003312:	79fb      	ldrb	r3, [r7, #7]
 8003314:	4611      	mov	r1, r2
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff fec2 	bl	80030a0 <SRV_sendCommand>

	uint8_t response[8];
	SRV_getResponse(response,8);
 800331c:	f107 030c 	add.w	r3, r7, #12
 8003320:	2108      	movs	r1, #8
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff ff2b 	bl	800317e <SRV_getResponse>
	return (response[6]<<8) + response[5];
 8003328:	7cbb      	ldrb	r3, [r7, #18]
 800332a:	b29b      	uxth	r3, r3
 800332c:	021b      	lsls	r3, r3, #8
 800332e:	b29a      	uxth	r2, r3
 8003330:	7c7b      	ldrb	r3, [r7, #17]
 8003332:	b29b      	uxth	r3, r3
 8003334:	4413      	add	r3, r2
 8003336:	b29b      	uxth	r3, r3
}
 8003338:	4618      	mov	r0, r3
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	02240204 	.word	0x02240204

08003344 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800334a:	4b0f      	ldr	r3, [pc, #60]	; (8003388 <HAL_MspInit+0x44>)
 800334c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334e:	4a0e      	ldr	r2, [pc, #56]	; (8003388 <HAL_MspInit+0x44>)
 8003350:	f043 0301 	orr.w	r3, r3, #1
 8003354:	6613      	str	r3, [r2, #96]	; 0x60
 8003356:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <HAL_MspInit+0x44>)
 8003358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	607b      	str	r3, [r7, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003362:	4b09      	ldr	r3, [pc, #36]	; (8003388 <HAL_MspInit+0x44>)
 8003364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003366:	4a08      	ldr	r2, [pc, #32]	; (8003388 <HAL_MspInit+0x44>)
 8003368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800336c:	6593      	str	r3, [r2, #88]	; 0x58
 800336e:	4b06      	ldr	r3, [pc, #24]	; (8003388 <HAL_MspInit+0x44>)
 8003370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	40021000 	.word	0x40021000

0800338c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b0ac      	sub	sp, #176	; 0xb0
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003394:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	605a      	str	r2, [r3, #4]
 800339e:	609a      	str	r2, [r3, #8]
 80033a0:	60da      	str	r2, [r3, #12]
 80033a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033a4:	f107 0314 	add.w	r3, r7, #20
 80033a8:	2288      	movs	r2, #136	; 0x88
 80033aa:	2100      	movs	r1, #0
 80033ac:	4618      	mov	r0, r3
 80033ae:	f005 fb2b 	bl	8008a08 <memset>
  if(hadc->Instance==ADC1)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a3c      	ldr	r2, [pc, #240]	; (80034a8 <HAL_ADC_MspInit+0x11c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d171      	bne.n	80034a0 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80033bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033c0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80033c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80033c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80033ca:	2302      	movs	r3, #2
 80033cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80033ce:	2301      	movs	r3, #1
 80033d0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80033d2:	2308      	movs	r3, #8
 80033d4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80033d6:	2307      	movs	r3, #7
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80033da:	2302      	movs	r3, #2
 80033dc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80033de:	2302      	movs	r3, #2
 80033e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80033e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033e6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033e8:	f107 0314 	add.w	r3, r7, #20
 80033ec:	4618      	mov	r0, r3
 80033ee:	f003 f9a3 	bl	8006738 <HAL_RCCEx_PeriphCLKConfig>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80033f8:	f7ff fb28 	bl	8002a4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80033fc:	4b2b      	ldr	r3, [pc, #172]	; (80034ac <HAL_ADC_MspInit+0x120>)
 80033fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003400:	4a2a      	ldr	r2, [pc, #168]	; (80034ac <HAL_ADC_MspInit+0x120>)
 8003402:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003406:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003408:	4b28      	ldr	r3, [pc, #160]	; (80034ac <HAL_ADC_MspInit+0x120>)
 800340a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800340c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003414:	4b25      	ldr	r3, [pc, #148]	; (80034ac <HAL_ADC_MspInit+0x120>)
 8003416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003418:	4a24      	ldr	r2, [pc, #144]	; (80034ac <HAL_ADC_MspInit+0x120>)
 800341a:	f043 0304 	orr.w	r3, r3, #4
 800341e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003420:	4b22      	ldr	r3, [pc, #136]	; (80034ac <HAL_ADC_MspInit+0x120>)
 8003422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC11_L_X_Pin|ADC12_L_Y_Pin|ADC13_R_X_Pin|ADC14_R_Y_Pin;
 800342c:	230f      	movs	r3, #15
 800342e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003432:	230b      	movs	r3, #11
 8003434:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003438:	2300      	movs	r3, #0
 800343a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800343e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003442:	4619      	mov	r1, r3
 8003444:	481a      	ldr	r0, [pc, #104]	; (80034b0 <HAL_ADC_MspInit+0x124>)
 8003446:	f002 f939 	bl	80056bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel3;
 800344a:	4b1a      	ldr	r3, [pc, #104]	; (80034b4 <HAL_ADC_MspInit+0x128>)
 800344c:	4a1a      	ldr	r2, [pc, #104]	; (80034b8 <HAL_ADC_MspInit+0x12c>)
 800344e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003450:	4b18      	ldr	r3, [pc, #96]	; (80034b4 <HAL_ADC_MspInit+0x128>)
 8003452:	2200      	movs	r2, #0
 8003454:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003456:	4b17      	ldr	r3, [pc, #92]	; (80034b4 <HAL_ADC_MspInit+0x128>)
 8003458:	2200      	movs	r2, #0
 800345a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800345c:	4b15      	ldr	r3, [pc, #84]	; (80034b4 <HAL_ADC_MspInit+0x128>)
 800345e:	2200      	movs	r2, #0
 8003460:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003462:	4b14      	ldr	r3, [pc, #80]	; (80034b4 <HAL_ADC_MspInit+0x128>)
 8003464:	2280      	movs	r2, #128	; 0x80
 8003466:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003468:	4b12      	ldr	r3, [pc, #72]	; (80034b4 <HAL_ADC_MspInit+0x128>)
 800346a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800346e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003470:	4b10      	ldr	r3, [pc, #64]	; (80034b4 <HAL_ADC_MspInit+0x128>)
 8003472:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003476:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003478:	4b0e      	ldr	r3, [pc, #56]	; (80034b4 <HAL_ADC_MspInit+0x128>)
 800347a:	2220      	movs	r2, #32
 800347c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800347e:	4b0d      	ldr	r3, [pc, #52]	; (80034b4 <HAL_ADC_MspInit+0x128>)
 8003480:	2200      	movs	r2, #0
 8003482:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003484:	480b      	ldr	r0, [pc, #44]	; (80034b4 <HAL_ADC_MspInit+0x128>)
 8003486:	f001 fea3 	bl	80051d0 <HAL_DMA_Init>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 8003490:	f7ff fadc 	bl	8002a4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a07      	ldr	r2, [pc, #28]	; (80034b4 <HAL_ADC_MspInit+0x128>)
 8003498:	64da      	str	r2, [r3, #76]	; 0x4c
 800349a:	4a06      	ldr	r2, [pc, #24]	; (80034b4 <HAL_ADC_MspInit+0x128>)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80034a0:	bf00      	nop
 80034a2:	37b0      	adds	r7, #176	; 0xb0
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	50040000 	.word	0x50040000
 80034ac:	40021000 	.word	0x40021000
 80034b0:	48000800 	.word	0x48000800
 80034b4:	20000478 	.word	0x20000478
 80034b8:	40020430 	.word	0x40020430

080034bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b0ae      	sub	sp, #184	; 0xb8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	605a      	str	r2, [r3, #4]
 80034ce:	609a      	str	r2, [r3, #8]
 80034d0:	60da      	str	r2, [r3, #12]
 80034d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034d4:	f107 031c 	add.w	r3, r7, #28
 80034d8:	2288      	movs	r2, #136	; 0x88
 80034da:	2100      	movs	r1, #0
 80034dc:	4618      	mov	r0, r3
 80034de:	f005 fa93 	bl	8008a08 <memset>
  if(huart->Instance==USART1)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a4b      	ldr	r2, [pc, #300]	; (8003614 <HAL_UART_MspInit+0x158>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d145      	bne.n	8003578 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80034ec:	2301      	movs	r3, #1
 80034ee:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80034f0:	2300      	movs	r3, #0
 80034f2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034f4:	f107 031c 	add.w	r3, r7, #28
 80034f8:	4618      	mov	r0, r3
 80034fa:	f003 f91d 	bl	8006738 <HAL_RCCEx_PeriphCLKConfig>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003504:	f7ff faa2 	bl	8002a4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003508:	4b43      	ldr	r3, [pc, #268]	; (8003618 <HAL_UART_MspInit+0x15c>)
 800350a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800350c:	4a42      	ldr	r2, [pc, #264]	; (8003618 <HAL_UART_MspInit+0x15c>)
 800350e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003512:	6613      	str	r3, [r2, #96]	; 0x60
 8003514:	4b40      	ldr	r3, [pc, #256]	; (8003618 <HAL_UART_MspInit+0x15c>)
 8003516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003520:	4b3d      	ldr	r3, [pc, #244]	; (8003618 <HAL_UART_MspInit+0x15c>)
 8003522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003524:	4a3c      	ldr	r2, [pc, #240]	; (8003618 <HAL_UART_MspInit+0x15c>)
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800352c:	4b3a      	ldr	r3, [pc, #232]	; (8003618 <HAL_UART_MspInit+0x15c>)
 800352e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = SRV_UART_RXTX_Pin;
 8003538:	f44f 7300 	mov.w	r3, #512	; 0x200
 800353c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003540:	2312      	movs	r3, #18
 8003542:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003546:	2301      	movs	r3, #1
 8003548:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800354c:	2303      	movs	r3, #3
 800354e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003552:	2307      	movs	r3, #7
 8003554:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(SRV_UART_RXTX_GPIO_Port, &GPIO_InitStruct);
 8003558:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800355c:	4619      	mov	r1, r3
 800355e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003562:	f002 f8ab 	bl	80056bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003566:	2200      	movs	r2, #0
 8003568:	2100      	movs	r1, #0
 800356a:	2025      	movs	r0, #37	; 0x25
 800356c:	f001 fdf9 	bl	8005162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003570:	2025      	movs	r0, #37	; 0x25
 8003572:	f001 fe12 	bl	800519a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003576:	e048      	b.n	800360a <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a27      	ldr	r2, [pc, #156]	; (800361c <HAL_UART_MspInit+0x160>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d143      	bne.n	800360a <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003582:	2302      	movs	r3, #2
 8003584:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003586:	2300      	movs	r3, #0
 8003588:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800358a:	f107 031c 	add.w	r3, r7, #28
 800358e:	4618      	mov	r0, r3
 8003590:	f003 f8d2 	bl	8006738 <HAL_RCCEx_PeriphCLKConfig>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <HAL_UART_MspInit+0xe2>
      Error_Handler();
 800359a:	f7ff fa57 	bl	8002a4c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800359e:	4b1e      	ldr	r3, [pc, #120]	; (8003618 <HAL_UART_MspInit+0x15c>)
 80035a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a2:	4a1d      	ldr	r2, [pc, #116]	; (8003618 <HAL_UART_MspInit+0x15c>)
 80035a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a8:	6593      	str	r3, [r2, #88]	; 0x58
 80035aa:	4b1b      	ldr	r3, [pc, #108]	; (8003618 <HAL_UART_MspInit+0x15c>)
 80035ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b6:	4b18      	ldr	r3, [pc, #96]	; (8003618 <HAL_UART_MspInit+0x15c>)
 80035b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ba:	4a17      	ldr	r2, [pc, #92]	; (8003618 <HAL_UART_MspInit+0x15c>)
 80035bc:	f043 0301 	orr.w	r3, r3, #1
 80035c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035c2:	4b15      	ldr	r3, [pc, #84]	; (8003618 <HAL_UART_MspInit+0x15c>)
 80035c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TTY_UART_TX_Pin|TTY_UART_RX_Pin;
 80035ce:	230c      	movs	r3, #12
 80035d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d4:	2302      	movs	r3, #2
 80035d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035e0:	2303      	movs	r3, #3
 80035e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035e6:	2307      	movs	r3, #7
 80035e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80035f0:	4619      	mov	r1, r3
 80035f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035f6:	f002 f861 	bl	80056bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80035fa:	2200      	movs	r2, #0
 80035fc:	2100      	movs	r1, #0
 80035fe:	2026      	movs	r0, #38	; 0x26
 8003600:	f001 fdaf 	bl	8005162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003604:	2026      	movs	r0, #38	; 0x26
 8003606:	f001 fdc8 	bl	800519a <HAL_NVIC_EnableIRQ>
}
 800360a:	bf00      	nop
 800360c:	37b8      	adds	r7, #184	; 0xb8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40013800 	.word	0x40013800
 8003618:	40021000 	.word	0x40021000
 800361c:	40004400 	.word	0x40004400

08003620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003624:	e7fe      	b.n	8003624 <NMI_Handler+0x4>

08003626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003626:	b480      	push	{r7}
 8003628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800362a:	e7fe      	b.n	800362a <HardFault_Handler+0x4>

0800362c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003630:	e7fe      	b.n	8003630 <MemManage_Handler+0x4>

08003632 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003632:	b480      	push	{r7}
 8003634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003636:	e7fe      	b.n	8003636 <BusFault_Handler+0x4>

08003638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800363c:	e7fe      	b.n	800363c <UsageFault_Handler+0x4>

0800363e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800363e:	b480      	push	{r7}
 8003640:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003642:	bf00      	nop
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003650:	bf00      	nop
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800365a:	b480      	push	{r7}
 800365c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800365e:	bf00      	nop
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800366c:	f000 f962 	bl	8003934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003670:	bf00      	nop
 8003672:	bd80      	pop	{r7, pc}

08003674 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003678:	4802      	ldr	r0, [pc, #8]	; (8003684 <USART1_IRQHandler+0x10>)
 800367a:	f003 fea7 	bl	80073cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800367e:	bf00      	nop
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	200004c0 	.word	0x200004c0

08003688 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800368c:	4802      	ldr	r0, [pc, #8]	; (8003698 <USART2_IRQHandler+0x10>)
 800368e:	f003 fe9d 	bl	80073cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003692:	bf00      	nop
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20000544 	.word	0x20000544

0800369c <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80036a0:	4802      	ldr	r0, [pc, #8]	; (80036ac <DMA2_Channel3_IRQHandler+0x10>)
 80036a2:	f001 ff2c 	bl	80054fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 80036a6:	bf00      	nop
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	20000478 	.word	0x20000478

080036b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
	return 1;
 80036b4:	2301      	movs	r3, #1
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <_kill>:

int _kill(int pid, int sig)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80036ca:	f005 f965 	bl	8008998 <__errno>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2216      	movs	r2, #22
 80036d2:	601a      	str	r2, [r3, #0]
	return -1;
 80036d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <_exit>:

void _exit (int status)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80036e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7ff ffe7 	bl	80036c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80036f2:	e7fe      	b.n	80036f2 <_exit+0x12>

080036f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003700:	2300      	movs	r3, #0
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	e00a      	b.n	800371c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003706:	f3af 8000 	nop.w
 800370a:	4601      	mov	r1, r0
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	1c5a      	adds	r2, r3, #1
 8003710:	60ba      	str	r2, [r7, #8]
 8003712:	b2ca      	uxtb	r2, r1
 8003714:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	3301      	adds	r3, #1
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	429a      	cmp	r2, r3
 8003722:	dbf0      	blt.n	8003706 <_read+0x12>
	}

return len;
 8003724:	687b      	ldr	r3, [r7, #4]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <_close>:
	}
	return len;
}

int _close(int file)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
	return -1;
 8003736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800373a:	4618      	mov	r0, r3
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003756:	605a      	str	r2, [r3, #4]
	return 0;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <_isatty>:

int _isatty(int file)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
	return 1;
 800376e:	2301      	movs	r3, #1
}
 8003770:	4618      	mov	r0, r3
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
	return 0;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
	...

08003798 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037a0:	4a14      	ldr	r2, [pc, #80]	; (80037f4 <_sbrk+0x5c>)
 80037a2:	4b15      	ldr	r3, [pc, #84]	; (80037f8 <_sbrk+0x60>)
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037ac:	4b13      	ldr	r3, [pc, #76]	; (80037fc <_sbrk+0x64>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d102      	bne.n	80037ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037b4:	4b11      	ldr	r3, [pc, #68]	; (80037fc <_sbrk+0x64>)
 80037b6:	4a12      	ldr	r2, [pc, #72]	; (8003800 <_sbrk+0x68>)
 80037b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037ba:	4b10      	ldr	r3, [pc, #64]	; (80037fc <_sbrk+0x64>)
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4413      	add	r3, r2
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d207      	bcs.n	80037d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037c8:	f005 f8e6 	bl	8008998 <__errno>
 80037cc:	4603      	mov	r3, r0
 80037ce:	220c      	movs	r2, #12
 80037d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037d6:	e009      	b.n	80037ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037d8:	4b08      	ldr	r3, [pc, #32]	; (80037fc <_sbrk+0x64>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037de:	4b07      	ldr	r3, [pc, #28]	; (80037fc <_sbrk+0x64>)
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4413      	add	r3, r2
 80037e6:	4a05      	ldr	r2, [pc, #20]	; (80037fc <_sbrk+0x64>)
 80037e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037ea:	68fb      	ldr	r3, [r7, #12]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	20018000 	.word	0x20018000
 80037f8:	00000400 	.word	0x00000400
 80037fc:	2000061c 	.word	0x2000061c
 8003800:	20000638 	.word	0x20000638

08003804 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003808:	4b06      	ldr	r3, [pc, #24]	; (8003824 <SystemInit+0x20>)
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380e:	4a05      	ldr	r2, [pc, #20]	; (8003824 <SystemInit+0x20>)
 8003810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003814:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003818:	bf00      	nop
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	e000ed00 	.word	0xe000ed00

08003828 <Reset_Handler>:
 8003828:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003860 <LoopForever+0x2>
 800382c:	f7ff ffea 	bl	8003804 <SystemInit>
 8003830:	480c      	ldr	r0, [pc, #48]	; (8003864 <LoopForever+0x6>)
 8003832:	490d      	ldr	r1, [pc, #52]	; (8003868 <LoopForever+0xa>)
 8003834:	4a0d      	ldr	r2, [pc, #52]	; (800386c <LoopForever+0xe>)
 8003836:	2300      	movs	r3, #0
 8003838:	e002      	b.n	8003840 <LoopCopyDataInit>

0800383a <CopyDataInit>:
 800383a:	58d4      	ldr	r4, [r2, r3]
 800383c:	50c4      	str	r4, [r0, r3]
 800383e:	3304      	adds	r3, #4

08003840 <LoopCopyDataInit>:
 8003840:	18c4      	adds	r4, r0, r3
 8003842:	428c      	cmp	r4, r1
 8003844:	d3f9      	bcc.n	800383a <CopyDataInit>
 8003846:	4a0a      	ldr	r2, [pc, #40]	; (8003870 <LoopForever+0x12>)
 8003848:	4c0a      	ldr	r4, [pc, #40]	; (8003874 <LoopForever+0x16>)
 800384a:	2300      	movs	r3, #0
 800384c:	e001      	b.n	8003852 <LoopFillZerobss>

0800384e <FillZerobss>:
 800384e:	6013      	str	r3, [r2, #0]
 8003850:	3204      	adds	r2, #4

08003852 <LoopFillZerobss>:
 8003852:	42a2      	cmp	r2, r4
 8003854:	d3fb      	bcc.n	800384e <FillZerobss>
 8003856:	f005 f8a5 	bl	80089a4 <__libc_init_array>
 800385a:	f7fe fe71 	bl	8002540 <main>

0800385e <LoopForever>:
 800385e:	e7fe      	b.n	800385e <LoopForever>
 8003860:	20018000 	.word	0x20018000
 8003864:	20000000 	.word	0x20000000
 8003868:	200001dc 	.word	0x200001dc
 800386c:	0800e6d8 	.word	0x0800e6d8
 8003870:	200001e0 	.word	0x200001e0
 8003874:	20000634 	.word	0x20000634

08003878 <ADC1_2_IRQHandler>:
 8003878:	e7fe      	b.n	8003878 <ADC1_2_IRQHandler>
	...

0800387c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003882:	2300      	movs	r3, #0
 8003884:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003886:	4b0c      	ldr	r3, [pc, #48]	; (80038b8 <HAL_Init+0x3c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a0b      	ldr	r2, [pc, #44]	; (80038b8 <HAL_Init+0x3c>)
 800388c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003890:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003892:	2003      	movs	r0, #3
 8003894:	f001 fc5a 	bl	800514c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003898:	2000      	movs	r0, #0
 800389a:	f000 f80f 	bl	80038bc <HAL_InitTick>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	71fb      	strb	r3, [r7, #7]
 80038a8:	e001      	b.n	80038ae <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80038aa:	f7ff fd4b 	bl	8003344 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80038ae:	79fb      	ldrb	r3, [r7, #7]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40022000 	.word	0x40022000

080038bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80038c4:	2300      	movs	r3, #0
 80038c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80038c8:	4b17      	ldr	r3, [pc, #92]	; (8003928 <HAL_InitTick+0x6c>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d023      	beq.n	8003918 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80038d0:	4b16      	ldr	r3, [pc, #88]	; (800392c <HAL_InitTick+0x70>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	4b14      	ldr	r3, [pc, #80]	; (8003928 <HAL_InitTick+0x6c>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	4619      	mov	r1, r3
 80038da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038de:	fbb3 f3f1 	udiv	r3, r3, r1
 80038e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e6:	4618      	mov	r0, r3
 80038e8:	f001 fc65 	bl	80051b6 <HAL_SYSTICK_Config>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10f      	bne.n	8003912 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b0f      	cmp	r3, #15
 80038f6:	d809      	bhi.n	800390c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038f8:	2200      	movs	r2, #0
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003900:	f001 fc2f 	bl	8005162 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003904:	4a0a      	ldr	r2, [pc, #40]	; (8003930 <HAL_InitTick+0x74>)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	e007      	b.n	800391c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	73fb      	strb	r3, [r7, #15]
 8003910:	e004      	b.n	800391c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	73fb      	strb	r3, [r7, #15]
 8003916:	e001      	b.n	800391c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800391c:	7bfb      	ldrb	r3, [r7, #15]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	20000008 	.word	0x20000008
 800392c:	20000000 	.word	0x20000000
 8003930:	20000004 	.word	0x20000004

08003934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003938:	4b06      	ldr	r3, [pc, #24]	; (8003954 <HAL_IncTick+0x20>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	4b06      	ldr	r3, [pc, #24]	; (8003958 <HAL_IncTick+0x24>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4413      	add	r3, r2
 8003944:	4a04      	ldr	r2, [pc, #16]	; (8003958 <HAL_IncTick+0x24>)
 8003946:	6013      	str	r3, [r2, #0]
}
 8003948:	bf00      	nop
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	20000008 	.word	0x20000008
 8003958:	20000620 	.word	0x20000620

0800395c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  return uwTick;
 8003960:	4b03      	ldr	r3, [pc, #12]	; (8003970 <HAL_GetTick+0x14>)
 8003962:	681b      	ldr	r3, [r3, #0]
}
 8003964:	4618      	mov	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	20000620 	.word	0x20000620

08003974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800397c:	f7ff ffee 	bl	800395c <HAL_GetTick>
 8003980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800398c:	d005      	beq.n	800399a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800398e:	4b0a      	ldr	r3, [pc, #40]	; (80039b8 <HAL_Delay+0x44>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	461a      	mov	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4413      	add	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800399a:	bf00      	nop
 800399c:	f7ff ffde 	bl	800395c <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d8f7      	bhi.n	800399c <HAL_Delay+0x28>
  {
  }
}
 80039ac:	bf00      	nop
 80039ae:	bf00      	nop
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20000008 	.word	0x20000008

080039bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	609a      	str	r2, [r3, #8]
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	609a      	str	r2, [r3, #8]
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
 8003a30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	3360      	adds	r3, #96	; 0x60
 8003a36:	461a      	mov	r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	4b08      	ldr	r3, [pc, #32]	; (8003a68 <LL_ADC_SetOffset+0x44>)
 8003a46:	4013      	ands	r3, r2
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	4313      	orrs	r3, r2
 8003a54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003a5c:	bf00      	nop
 8003a5e:	371c      	adds	r7, #28
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	03fff000 	.word	0x03fff000

08003a6c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3360      	adds	r3, #96	; 0x60
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	3360      	adds	r3, #96	; 0x60
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	431a      	orrs	r2, r3
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003ac2:	bf00      	nop
 8003ac4:	371c      	adds	r7, #28
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e000      	b.n	8003ae8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	3330      	adds	r3, #48	; 0x30
 8003b04:	461a      	mov	r2, r3
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	0a1b      	lsrs	r3, r3, #8
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	f003 030c 	and.w	r3, r3, #12
 8003b10:	4413      	add	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f003 031f 	and.w	r3, r3, #31
 8003b1e:	211f      	movs	r1, #31
 8003b20:	fa01 f303 	lsl.w	r3, r1, r3
 8003b24:	43db      	mvns	r3, r3
 8003b26:	401a      	ands	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	0e9b      	lsrs	r3, r3, #26
 8003b2c:	f003 011f 	and.w	r1, r3, #31
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f003 031f 	and.w	r3, r3, #31
 8003b36:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003b40:	bf00      	nop
 8003b42:	371c      	adds	r7, #28
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	3314      	adds	r3, #20
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	0e5b      	lsrs	r3, r3, #25
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	4413      	add	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	0d1b      	lsrs	r3, r3, #20
 8003b74:	f003 031f 	and.w	r3, r3, #31
 8003b78:	2107      	movs	r1, #7
 8003b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7e:	43db      	mvns	r3, r3
 8003b80:	401a      	ands	r2, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	0d1b      	lsrs	r3, r3, #20
 8003b86:	f003 031f 	and.w	r3, r3, #31
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b90:	431a      	orrs	r2, r3
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003b96:	bf00      	nop
 8003b98:	371c      	adds	r7, #28
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
	...

08003ba4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	401a      	ands	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f003 0318 	and.w	r3, r3, #24
 8003bc6:	4908      	ldr	r1, [pc, #32]	; (8003be8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003bc8:	40d9      	lsrs	r1, r3
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	400b      	ands	r3, r1
 8003bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003bda:	bf00      	nop
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	0007ffff 	.word	0x0007ffff

08003bec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 031f 	and.w	r3, r3, #31
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003c18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6093      	str	r3, [r2, #8]
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c40:	d101      	bne.n	8003c46 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003c64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c90:	d101      	bne.n	8003c96 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003c92:	2301      	movs	r3, #1
 8003c94:	e000      	b.n	8003c98 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003cb8:	f043 0201 	orr.w	r2, r3, #1
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cdc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ce0:	f043 0202 	orr.w	r2, r3, #2
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d101      	bne.n	8003d0c <LL_ADC_IsEnabled+0x18>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e000      	b.n	8003d0e <LL_ADC_IsEnabled+0x1a>
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d101      	bne.n	8003d32 <LL_ADC_IsDisableOngoing+0x18>
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e000      	b.n	8003d34 <LL_ADC_IsDisableOngoing+0x1a>
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d54:	f043 0204 	orr.w	r2, r3, #4
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d101      	bne.n	8003d80 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d101      	bne.n	8003da6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003db4:	b590      	push	{r4, r7, lr}
 8003db6:	b089      	sub	sp, #36	; 0x24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e136      	b.n	800403c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d109      	bne.n	8003df0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7ff fad5 	bl	800338c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff ff19 	bl	8003c2c <LL_ADC_IsDeepPowerDownEnabled>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d004      	beq.n	8003e0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff feff 	bl	8003c08 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff ff34 	bl	8003c7c <LL_ADC_IsInternalRegulatorEnabled>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d115      	bne.n	8003e46 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff ff18 	bl	8003c54 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e24:	4b87      	ldr	r3, [pc, #540]	; (8004044 <HAL_ADC_Init+0x290>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	099b      	lsrs	r3, r3, #6
 8003e2a:	4a87      	ldr	r2, [pc, #540]	; (8004048 <HAL_ADC_Init+0x294>)
 8003e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e30:	099b      	lsrs	r3, r3, #6
 8003e32:	3301      	adds	r3, #1
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003e38:	e002      	b.n	8003e40 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f9      	bne.n	8003e3a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff ff16 	bl	8003c7c <LL_ADC_IsInternalRegulatorEnabled>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10d      	bne.n	8003e72 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5a:	f043 0210 	orr.w	r2, r3, #16
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e66:	f043 0201 	orr.w	r2, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7ff ff76 	bl	8003d68 <LL_ADC_REG_IsConversionOngoing>
 8003e7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e82:	f003 0310 	and.w	r3, r3, #16
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f040 80cf 	bne.w	800402a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f040 80cb 	bne.w	800402a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e98:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003e9c:	f043 0202 	orr.w	r2, r3, #2
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff ff23 	bl	8003cf4 <LL_ADC_IsEnabled>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d115      	bne.n	8003ee0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003eb4:	4865      	ldr	r0, [pc, #404]	; (800404c <HAL_ADC_Init+0x298>)
 8003eb6:	f7ff ff1d 	bl	8003cf4 <LL_ADC_IsEnabled>
 8003eba:	4604      	mov	r4, r0
 8003ebc:	4864      	ldr	r0, [pc, #400]	; (8004050 <HAL_ADC_Init+0x29c>)
 8003ebe:	f7ff ff19 	bl	8003cf4 <LL_ADC_IsEnabled>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	431c      	orrs	r4, r3
 8003ec6:	4863      	ldr	r0, [pc, #396]	; (8004054 <HAL_ADC_Init+0x2a0>)
 8003ec8:	f7ff ff14 	bl	8003cf4 <LL_ADC_IsEnabled>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	4323      	orrs	r3, r4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d105      	bne.n	8003ee0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	4619      	mov	r1, r3
 8003eda:	485f      	ldr	r0, [pc, #380]	; (8004058 <HAL_ADC_Init+0x2a4>)
 8003edc:	f7ff fd6e 	bl	80039bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	7e5b      	ldrb	r3, [r3, #25]
 8003ee4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003eea:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003ef0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003ef6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003efe:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f00:	4313      	orrs	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d106      	bne.n	8003f1c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	3b01      	subs	r3, #1
 8003f14:	045b      	lsls	r3, r3, #17
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d009      	beq.n	8003f38 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f28:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f30:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	4b47      	ldr	r3, [pc, #284]	; (800405c <HAL_ADC_Init+0x2a8>)
 8003f40:	4013      	ands	r3, r2
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6812      	ldr	r2, [r2, #0]
 8003f46:	69b9      	ldr	r1, [r7, #24]
 8003f48:	430b      	orrs	r3, r1
 8003f4a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7ff ff09 	bl	8003d68 <LL_ADC_REG_IsConversionOngoing>
 8003f56:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff ff16 	bl	8003d8e <LL_ADC_INJ_IsConversionOngoing>
 8003f62:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d13d      	bne.n	8003fe6 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d13a      	bne.n	8003fe6 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f74:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f7c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f8c:	f023 0302 	bic.w	r3, r3, #2
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6812      	ldr	r2, [r2, #0]
 8003f94:	69b9      	ldr	r1, [r7, #24]
 8003f96:	430b      	orrs	r3, r1
 8003f98:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d118      	bne.n	8003fd6 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003fae:	f023 0304 	bic.w	r3, r3, #4
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003fba:	4311      	orrs	r1, r2
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003fc0:	4311      	orrs	r1, r2
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0201 	orr.w	r2, r2, #1
 8003fd2:	611a      	str	r2, [r3, #16]
 8003fd4:	e007      	b.n	8003fe6 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	691a      	ldr	r2, [r3, #16]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0201 	bic.w	r2, r2, #1
 8003fe4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d10c      	bne.n	8004008 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff4:	f023 010f 	bic.w	r1, r3, #15
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	1e5a      	subs	r2, r3, #1
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	631a      	str	r2, [r3, #48]	; 0x30
 8004006:	e007      	b.n	8004018 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 020f 	bic.w	r2, r2, #15
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401c:	f023 0303 	bic.w	r3, r3, #3
 8004020:	f043 0201 	orr.w	r2, r3, #1
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	655a      	str	r2, [r3, #84]	; 0x54
 8004028:	e007      	b.n	800403a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402e:	f043 0210 	orr.w	r2, r3, #16
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800403a:	7ffb      	ldrb	r3, [r7, #31]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3724      	adds	r7, #36	; 0x24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd90      	pop	{r4, r7, pc}
 8004044:	20000000 	.word	0x20000000
 8004048:	053e2d63 	.word	0x053e2d63
 800404c:	50040000 	.word	0x50040000
 8004050:	50040100 	.word	0x50040100
 8004054:	50040200 	.word	0x50040200
 8004058:	50040300 	.word	0x50040300
 800405c:	fff0c007 	.word	0xfff0c007

08004060 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800406c:	4853      	ldr	r0, [pc, #332]	; (80041bc <HAL_ADC_Start_DMA+0x15c>)
 800406e:	f7ff fdbd 	bl	8003bec <LL_ADC_GetMultimode>
 8004072:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff fe75 	bl	8003d68 <LL_ADC_REG_IsConversionOngoing>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	f040 8093 	bne.w	80041ac <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800408c:	2b01      	cmp	r3, #1
 800408e:	d101      	bne.n	8004094 <HAL_ADC_Start_DMA+0x34>
 8004090:	2302      	movs	r3, #2
 8004092:	e08e      	b.n	80041b2 <HAL_ADC_Start_DMA+0x152>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a47      	ldr	r2, [pc, #284]	; (80041c0 <HAL_ADC_Start_DMA+0x160>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d008      	beq.n	80040b8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d005      	beq.n	80040b8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	2b05      	cmp	r3, #5
 80040b0:	d002      	beq.n	80040b8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	2b09      	cmp	r3, #9
 80040b6:	d172      	bne.n	800419e <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 fc9b 	bl	80049f4 <ADC_Enable>
 80040be:	4603      	mov	r3, r0
 80040c0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80040c2:	7dfb      	ldrb	r3, [r7, #23]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d165      	bne.n	8004194 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80040d0:	f023 0301 	bic.w	r3, r3, #1
 80040d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a38      	ldr	r2, [pc, #224]	; (80041c4 <HAL_ADC_Start_DMA+0x164>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d002      	beq.n	80040ec <HAL_ADC_Start_DMA+0x8c>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	e000      	b.n	80040ee <HAL_ADC_Start_DMA+0x8e>
 80040ec:	4b36      	ldr	r3, [pc, #216]	; (80041c8 <HAL_ADC_Start_DMA+0x168>)
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	6812      	ldr	r2, [r2, #0]
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d002      	beq.n	80040fc <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d105      	bne.n	8004108 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004100:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d006      	beq.n	8004122 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004118:	f023 0206 	bic.w	r2, r3, #6
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	659a      	str	r2, [r3, #88]	; 0x58
 8004120:	e002      	b.n	8004128 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412c:	4a27      	ldr	r2, [pc, #156]	; (80041cc <HAL_ADC_Start_DMA+0x16c>)
 800412e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004134:	4a26      	ldr	r2, [pc, #152]	; (80041d0 <HAL_ADC_Start_DMA+0x170>)
 8004136:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413c:	4a25      	ldr	r2, [pc, #148]	; (80041d4 <HAL_ADC_Start_DMA+0x174>)
 800413e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	221c      	movs	r2, #28
 8004146:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0210 	orr.w	r2, r2, #16
 800415e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0201 	orr.w	r2, r2, #1
 800416e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3340      	adds	r3, #64	; 0x40
 800417a:	4619      	mov	r1, r3
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f001 f8de 	bl	8005340 <HAL_DMA_Start_IT>
 8004184:	4603      	mov	r3, r0
 8004186:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff fdd7 	bl	8003d40 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004192:	e00d      	b.n	80041b0 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800419c:	e008      	b.n	80041b0 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80041aa:	e001      	b.n	80041b0 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80041ac:	2302      	movs	r3, #2
 80041ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80041b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	50040300 	.word	0x50040300
 80041c0:	50040200 	.word	0x50040200
 80041c4:	50040100 	.word	0x50040100
 80041c8:	50040000 	.word	0x50040000
 80041cc:	08004bbf 	.word	0x08004bbf
 80041d0:	08004c97 	.word	0x08004c97
 80041d4:	08004cb3 	.word	0x08004cb3

080041d8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b0b6      	sub	sp, #216	; 0xd8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004224:	2300      	movs	r3, #0
 8004226:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800422e:	2b01      	cmp	r3, #1
 8004230:	d101      	bne.n	8004236 <HAL_ADC_ConfigChannel+0x22>
 8004232:	2302      	movs	r3, #2
 8004234:	e3c7      	b.n	80049c6 <HAL_ADC_ConfigChannel+0x7b2>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff fd90 	bl	8003d68 <LL_ADC_REG_IsConversionOngoing>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	f040 83a8 	bne.w	80049a0 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b05      	cmp	r3, #5
 8004256:	d824      	bhi.n	80042a2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	3b02      	subs	r3, #2
 800425e:	2b03      	cmp	r3, #3
 8004260:	d81b      	bhi.n	800429a <HAL_ADC_ConfigChannel+0x86>
 8004262:	a201      	add	r2, pc, #4	; (adr r2, 8004268 <HAL_ADC_ConfigChannel+0x54>)
 8004264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004268:	08004279 	.word	0x08004279
 800426c:	08004281 	.word	0x08004281
 8004270:	08004289 	.word	0x08004289
 8004274:	08004291 	.word	0x08004291
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	220c      	movs	r2, #12
 800427c:	605a      	str	r2, [r3, #4]
          break;
 800427e:	e011      	b.n	80042a4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	2212      	movs	r2, #18
 8004284:	605a      	str	r2, [r3, #4]
          break;
 8004286:	e00d      	b.n	80042a4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2218      	movs	r2, #24
 800428c:	605a      	str	r2, [r3, #4]
          break;
 800428e:	e009      	b.n	80042a4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004296:	605a      	str	r2, [r3, #4]
          break;
 8004298:	e004      	b.n	80042a4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2206      	movs	r2, #6
 800429e:	605a      	str	r2, [r3, #4]
          break;
 80042a0:	e000      	b.n	80042a4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80042a2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6818      	ldr	r0, [r3, #0]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	6859      	ldr	r1, [r3, #4]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	461a      	mov	r2, r3
 80042b2:	f7ff fc1f 	bl	8003af4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff fd54 	bl	8003d68 <LL_ADC_REG_IsConversionOngoing>
 80042c0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff fd60 	bl	8003d8e <LL_ADC_INJ_IsConversionOngoing>
 80042ce:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80042d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f040 81a6 	bne.w	8004628 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80042dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f040 81a1 	bne.w	8004628 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6818      	ldr	r0, [r3, #0]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	6819      	ldr	r1, [r3, #0]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	461a      	mov	r2, r3
 80042f4:	f7ff fc2a 	bl	8003b4c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	695a      	ldr	r2, [r3, #20]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	08db      	lsrs	r3, r3, #3
 8004304:	f003 0303 	and.w	r3, r3, #3
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	2b04      	cmp	r3, #4
 8004318:	d00a      	beq.n	8004330 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	6919      	ldr	r1, [r3, #16]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800432a:	f7ff fb7b 	bl	8003a24 <LL_ADC_SetOffset>
 800432e:	e17b      	b.n	8004628 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2100      	movs	r1, #0
 8004336:	4618      	mov	r0, r3
 8004338:	f7ff fb98 	bl	8003a6c <LL_ADC_GetOffsetChannel>
 800433c:	4603      	mov	r3, r0
 800433e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10a      	bne.n	800435c <HAL_ADC_ConfigChannel+0x148>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2100      	movs	r1, #0
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff fb8d 	bl	8003a6c <LL_ADC_GetOffsetChannel>
 8004352:	4603      	mov	r3, r0
 8004354:	0e9b      	lsrs	r3, r3, #26
 8004356:	f003 021f 	and.w	r2, r3, #31
 800435a:	e01e      	b.n	800439a <HAL_ADC_ConfigChannel+0x186>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2100      	movs	r1, #0
 8004362:	4618      	mov	r0, r3
 8004364:	f7ff fb82 	bl	8003a6c <LL_ADC_GetOffsetChannel>
 8004368:	4603      	mov	r3, r0
 800436a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004372:	fa93 f3a3 	rbit	r3, r3
 8004376:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800437a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800437e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004382:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800438a:	2320      	movs	r3, #32
 800438c:	e004      	b.n	8004398 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800438e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004392:	fab3 f383 	clz	r3, r3
 8004396:	b2db      	uxtb	r3, r3
 8004398:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d105      	bne.n	80043b2 <HAL_ADC_ConfigChannel+0x19e>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	0e9b      	lsrs	r3, r3, #26
 80043ac:	f003 031f 	and.w	r3, r3, #31
 80043b0:	e018      	b.n	80043e4 <HAL_ADC_ConfigChannel+0x1d0>
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80043be:	fa93 f3a3 	rbit	r3, r3
 80043c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80043c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80043ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80043d6:	2320      	movs	r3, #32
 80043d8:	e004      	b.n	80043e4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80043da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80043de:	fab3 f383 	clz	r3, r3
 80043e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d106      	bne.n	80043f6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2200      	movs	r2, #0
 80043ee:	2100      	movs	r1, #0
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff fb51 	bl	8003a98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2101      	movs	r1, #1
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff fb35 	bl	8003a6c <LL_ADC_GetOffsetChannel>
 8004402:	4603      	mov	r3, r0
 8004404:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10a      	bne.n	8004422 <HAL_ADC_ConfigChannel+0x20e>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2101      	movs	r1, #1
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff fb2a 	bl	8003a6c <LL_ADC_GetOffsetChannel>
 8004418:	4603      	mov	r3, r0
 800441a:	0e9b      	lsrs	r3, r3, #26
 800441c:	f003 021f 	and.w	r2, r3, #31
 8004420:	e01e      	b.n	8004460 <HAL_ADC_ConfigChannel+0x24c>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2101      	movs	r1, #1
 8004428:	4618      	mov	r0, r3
 800442a:	f7ff fb1f 	bl	8003a6c <LL_ADC_GetOffsetChannel>
 800442e:	4603      	mov	r3, r0
 8004430:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004434:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004438:	fa93 f3a3 	rbit	r3, r3
 800443c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004440:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004444:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004448:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004450:	2320      	movs	r3, #32
 8004452:	e004      	b.n	800445e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004454:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004458:	fab3 f383 	clz	r3, r3
 800445c:	b2db      	uxtb	r3, r3
 800445e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004468:	2b00      	cmp	r3, #0
 800446a:	d105      	bne.n	8004478 <HAL_ADC_ConfigChannel+0x264>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	0e9b      	lsrs	r3, r3, #26
 8004472:	f003 031f 	and.w	r3, r3, #31
 8004476:	e018      	b.n	80044aa <HAL_ADC_ConfigChannel+0x296>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004480:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004484:	fa93 f3a3 	rbit	r3, r3
 8004488:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800448c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004490:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004494:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800449c:	2320      	movs	r3, #32
 800449e:	e004      	b.n	80044aa <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80044a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044a4:	fab3 f383 	clz	r3, r3
 80044a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d106      	bne.n	80044bc <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2200      	movs	r2, #0
 80044b4:	2101      	movs	r1, #1
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff faee 	bl	8003a98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2102      	movs	r1, #2
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff fad2 	bl	8003a6c <LL_ADC_GetOffsetChannel>
 80044c8:	4603      	mov	r3, r0
 80044ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10a      	bne.n	80044e8 <HAL_ADC_ConfigChannel+0x2d4>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2102      	movs	r1, #2
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff fac7 	bl	8003a6c <LL_ADC_GetOffsetChannel>
 80044de:	4603      	mov	r3, r0
 80044e0:	0e9b      	lsrs	r3, r3, #26
 80044e2:	f003 021f 	and.w	r2, r3, #31
 80044e6:	e01e      	b.n	8004526 <HAL_ADC_ConfigChannel+0x312>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2102      	movs	r1, #2
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff fabc 	bl	8003a6c <LL_ADC_GetOffsetChannel>
 80044f4:	4603      	mov	r3, r0
 80044f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044fe:	fa93 f3a3 	rbit	r3, r3
 8004502:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004506:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800450a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800450e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8004516:	2320      	movs	r3, #32
 8004518:	e004      	b.n	8004524 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800451a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800451e:	fab3 f383 	clz	r3, r3
 8004522:	b2db      	uxtb	r3, r3
 8004524:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800452e:	2b00      	cmp	r3, #0
 8004530:	d105      	bne.n	800453e <HAL_ADC_ConfigChannel+0x32a>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	0e9b      	lsrs	r3, r3, #26
 8004538:	f003 031f 	and.w	r3, r3, #31
 800453c:	e016      	b.n	800456c <HAL_ADC_ConfigChannel+0x358>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004546:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800454a:	fa93 f3a3 	rbit	r3, r3
 800454e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004550:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004552:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004556:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800455e:	2320      	movs	r3, #32
 8004560:	e004      	b.n	800456c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004562:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004566:	fab3 f383 	clz	r3, r3
 800456a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800456c:	429a      	cmp	r2, r3
 800456e:	d106      	bne.n	800457e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2200      	movs	r2, #0
 8004576:	2102      	movs	r1, #2
 8004578:	4618      	mov	r0, r3
 800457a:	f7ff fa8d 	bl	8003a98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2103      	movs	r1, #3
 8004584:	4618      	mov	r0, r3
 8004586:	f7ff fa71 	bl	8003a6c <LL_ADC_GetOffsetChannel>
 800458a:	4603      	mov	r3, r0
 800458c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10a      	bne.n	80045aa <HAL_ADC_ConfigChannel+0x396>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2103      	movs	r1, #3
 800459a:	4618      	mov	r0, r3
 800459c:	f7ff fa66 	bl	8003a6c <LL_ADC_GetOffsetChannel>
 80045a0:	4603      	mov	r3, r0
 80045a2:	0e9b      	lsrs	r3, r3, #26
 80045a4:	f003 021f 	and.w	r2, r3, #31
 80045a8:	e017      	b.n	80045da <HAL_ADC_ConfigChannel+0x3c6>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2103      	movs	r1, #3
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7ff fa5b 	bl	8003a6c <LL_ADC_GetOffsetChannel>
 80045b6:	4603      	mov	r3, r0
 80045b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045bc:	fa93 f3a3 	rbit	r3, r3
 80045c0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80045c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045c4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80045c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80045cc:	2320      	movs	r3, #32
 80045ce:	e003      	b.n	80045d8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80045d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045d2:	fab3 f383 	clz	r3, r3
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d105      	bne.n	80045f2 <HAL_ADC_ConfigChannel+0x3de>
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	0e9b      	lsrs	r3, r3, #26
 80045ec:	f003 031f 	and.w	r3, r3, #31
 80045f0:	e011      	b.n	8004616 <HAL_ADC_ConfigChannel+0x402>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045fa:	fa93 f3a3 	rbit	r3, r3
 80045fe:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004602:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800460a:	2320      	movs	r3, #32
 800460c:	e003      	b.n	8004616 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800460e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004610:	fab3 f383 	clz	r3, r3
 8004614:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004616:	429a      	cmp	r2, r3
 8004618:	d106      	bne.n	8004628 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2200      	movs	r2, #0
 8004620:	2103      	movs	r1, #3
 8004622:	4618      	mov	r0, r3
 8004624:	f7ff fa38 	bl	8003a98 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff fb61 	bl	8003cf4 <LL_ADC_IsEnabled>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	f040 813f 	bne.w	80048b8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6818      	ldr	r0, [r3, #0]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	6819      	ldr	r1, [r3, #0]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	461a      	mov	r2, r3
 8004648:	f7ff faac 	bl	8003ba4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	4a8e      	ldr	r2, [pc, #568]	; (800488c <HAL_ADC_ConfigChannel+0x678>)
 8004652:	4293      	cmp	r3, r2
 8004654:	f040 8130 	bne.w	80048b8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10b      	bne.n	8004680 <HAL_ADC_ConfigChannel+0x46c>
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	0e9b      	lsrs	r3, r3, #26
 800466e:	3301      	adds	r3, #1
 8004670:	f003 031f 	and.w	r3, r3, #31
 8004674:	2b09      	cmp	r3, #9
 8004676:	bf94      	ite	ls
 8004678:	2301      	movls	r3, #1
 800467a:	2300      	movhi	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	e019      	b.n	80046b4 <HAL_ADC_ConfigChannel+0x4a0>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004686:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004688:	fa93 f3a3 	rbit	r3, r3
 800468c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800468e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004690:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004692:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004698:	2320      	movs	r3, #32
 800469a:	e003      	b.n	80046a4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800469c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800469e:	fab3 f383 	clz	r3, r3
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	3301      	adds	r3, #1
 80046a6:	f003 031f 	and.w	r3, r3, #31
 80046aa:	2b09      	cmp	r3, #9
 80046ac:	bf94      	ite	ls
 80046ae:	2301      	movls	r3, #1
 80046b0:	2300      	movhi	r3, #0
 80046b2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d079      	beq.n	80047ac <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d107      	bne.n	80046d4 <HAL_ADC_ConfigChannel+0x4c0>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	0e9b      	lsrs	r3, r3, #26
 80046ca:	3301      	adds	r3, #1
 80046cc:	069b      	lsls	r3, r3, #26
 80046ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046d2:	e015      	b.n	8004700 <HAL_ADC_ConfigChannel+0x4ec>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046dc:	fa93 f3a3 	rbit	r3, r3
 80046e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80046e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80046e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80046ec:	2320      	movs	r3, #32
 80046ee:	e003      	b.n	80046f8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80046f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046f2:	fab3 f383 	clz	r3, r3
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	3301      	adds	r3, #1
 80046fa:	069b      	lsls	r3, r3, #26
 80046fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004708:	2b00      	cmp	r3, #0
 800470a:	d109      	bne.n	8004720 <HAL_ADC_ConfigChannel+0x50c>
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	0e9b      	lsrs	r3, r3, #26
 8004712:	3301      	adds	r3, #1
 8004714:	f003 031f 	and.w	r3, r3, #31
 8004718:	2101      	movs	r1, #1
 800471a:	fa01 f303 	lsl.w	r3, r1, r3
 800471e:	e017      	b.n	8004750 <HAL_ADC_ConfigChannel+0x53c>
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004728:	fa93 f3a3 	rbit	r3, r3
 800472c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800472e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004730:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004738:	2320      	movs	r3, #32
 800473a:	e003      	b.n	8004744 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800473c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800473e:	fab3 f383 	clz	r3, r3
 8004742:	b2db      	uxtb	r3, r3
 8004744:	3301      	adds	r3, #1
 8004746:	f003 031f 	and.w	r3, r3, #31
 800474a:	2101      	movs	r1, #1
 800474c:	fa01 f303 	lsl.w	r3, r1, r3
 8004750:	ea42 0103 	orr.w	r1, r2, r3
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10a      	bne.n	8004776 <HAL_ADC_ConfigChannel+0x562>
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	0e9b      	lsrs	r3, r3, #26
 8004766:	3301      	adds	r3, #1
 8004768:	f003 021f 	and.w	r2, r3, #31
 800476c:	4613      	mov	r3, r2
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	4413      	add	r3, r2
 8004772:	051b      	lsls	r3, r3, #20
 8004774:	e018      	b.n	80047a8 <HAL_ADC_ConfigChannel+0x594>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800477c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477e:	fa93 f3a3 	rbit	r3, r3
 8004782:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004786:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800478e:	2320      	movs	r3, #32
 8004790:	e003      	b.n	800479a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004794:	fab3 f383 	clz	r3, r3
 8004798:	b2db      	uxtb	r3, r3
 800479a:	3301      	adds	r3, #1
 800479c:	f003 021f 	and.w	r2, r3, #31
 80047a0:	4613      	mov	r3, r2
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	4413      	add	r3, r2
 80047a6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047a8:	430b      	orrs	r3, r1
 80047aa:	e080      	b.n	80048ae <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d107      	bne.n	80047c8 <HAL_ADC_ConfigChannel+0x5b4>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	0e9b      	lsrs	r3, r3, #26
 80047be:	3301      	adds	r3, #1
 80047c0:	069b      	lsls	r3, r3, #26
 80047c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047c6:	e015      	b.n	80047f4 <HAL_ADC_ConfigChannel+0x5e0>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d0:	fa93 f3a3 	rbit	r3, r3
 80047d4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80047d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80047da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80047e0:	2320      	movs	r3, #32
 80047e2:	e003      	b.n	80047ec <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80047e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e6:	fab3 f383 	clz	r3, r3
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	3301      	adds	r3, #1
 80047ee:	069b      	lsls	r3, r3, #26
 80047f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d109      	bne.n	8004814 <HAL_ADC_ConfigChannel+0x600>
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	0e9b      	lsrs	r3, r3, #26
 8004806:	3301      	adds	r3, #1
 8004808:	f003 031f 	and.w	r3, r3, #31
 800480c:	2101      	movs	r1, #1
 800480e:	fa01 f303 	lsl.w	r3, r1, r3
 8004812:	e017      	b.n	8004844 <HAL_ADC_ConfigChannel+0x630>
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	fa93 f3a3 	rbit	r3, r3
 8004820:	61fb      	str	r3, [r7, #28]
  return result;
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800482c:	2320      	movs	r3, #32
 800482e:	e003      	b.n	8004838 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	fab3 f383 	clz	r3, r3
 8004836:	b2db      	uxtb	r3, r3
 8004838:	3301      	adds	r3, #1
 800483a:	f003 031f 	and.w	r3, r3, #31
 800483e:	2101      	movs	r1, #1
 8004840:	fa01 f303 	lsl.w	r3, r1, r3
 8004844:	ea42 0103 	orr.w	r1, r2, r3
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10d      	bne.n	8004870 <HAL_ADC_ConfigChannel+0x65c>
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	0e9b      	lsrs	r3, r3, #26
 800485a:	3301      	adds	r3, #1
 800485c:	f003 021f 	and.w	r2, r3, #31
 8004860:	4613      	mov	r3, r2
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	4413      	add	r3, r2
 8004866:	3b1e      	subs	r3, #30
 8004868:	051b      	lsls	r3, r3, #20
 800486a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800486e:	e01d      	b.n	80048ac <HAL_ADC_ConfigChannel+0x698>
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	fa93 f3a3 	rbit	r3, r3
 800487c:	613b      	str	r3, [r7, #16]
  return result;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d103      	bne.n	8004890 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004888:	2320      	movs	r3, #32
 800488a:	e005      	b.n	8004898 <HAL_ADC_ConfigChannel+0x684>
 800488c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	fab3 f383 	clz	r3, r3
 8004896:	b2db      	uxtb	r3, r3
 8004898:	3301      	adds	r3, #1
 800489a:	f003 021f 	and.w	r2, r3, #31
 800489e:	4613      	mov	r3, r2
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	4413      	add	r3, r2
 80048a4:	3b1e      	subs	r3, #30
 80048a6:	051b      	lsls	r3, r3, #20
 80048a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048ac:	430b      	orrs	r3, r1
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	6892      	ldr	r2, [r2, #8]
 80048b2:	4619      	mov	r1, r3
 80048b4:	f7ff f94a 	bl	8003b4c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	4b44      	ldr	r3, [pc, #272]	; (80049d0 <HAL_ADC_ConfigChannel+0x7bc>)
 80048be:	4013      	ands	r3, r2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d07a      	beq.n	80049ba <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048c4:	4843      	ldr	r0, [pc, #268]	; (80049d4 <HAL_ADC_ConfigChannel+0x7c0>)
 80048c6:	f7ff f89f 	bl	8003a08 <LL_ADC_GetCommonPathInternalCh>
 80048ca:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a41      	ldr	r2, [pc, #260]	; (80049d8 <HAL_ADC_ConfigChannel+0x7c4>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d12c      	bne.n	8004932 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80048d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d126      	bne.n	8004932 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a3c      	ldr	r2, [pc, #240]	; (80049dc <HAL_ADC_ConfigChannel+0x7c8>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d004      	beq.n	80048f8 <HAL_ADC_ConfigChannel+0x6e4>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a3b      	ldr	r2, [pc, #236]	; (80049e0 <HAL_ADC_ConfigChannel+0x7cc>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d15d      	bne.n	80049b4 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004900:	4619      	mov	r1, r3
 8004902:	4834      	ldr	r0, [pc, #208]	; (80049d4 <HAL_ADC_ConfigChannel+0x7c0>)
 8004904:	f7ff f86d 	bl	80039e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004908:	4b36      	ldr	r3, [pc, #216]	; (80049e4 <HAL_ADC_ConfigChannel+0x7d0>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	099b      	lsrs	r3, r3, #6
 800490e:	4a36      	ldr	r2, [pc, #216]	; (80049e8 <HAL_ADC_ConfigChannel+0x7d4>)
 8004910:	fba2 2303 	umull	r2, r3, r2, r3
 8004914:	099b      	lsrs	r3, r3, #6
 8004916:	1c5a      	adds	r2, r3, #1
 8004918:	4613      	mov	r3, r2
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	4413      	add	r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004922:	e002      	b.n	800492a <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	3b01      	subs	r3, #1
 8004928:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1f9      	bne.n	8004924 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004930:	e040      	b.n	80049b4 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a2d      	ldr	r2, [pc, #180]	; (80049ec <HAL_ADC_ConfigChannel+0x7d8>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d118      	bne.n	800496e <HAL_ADC_ConfigChannel+0x75a>
 800493c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004940:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d112      	bne.n	800496e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a23      	ldr	r2, [pc, #140]	; (80049dc <HAL_ADC_ConfigChannel+0x7c8>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d004      	beq.n	800495c <HAL_ADC_ConfigChannel+0x748>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a22      	ldr	r2, [pc, #136]	; (80049e0 <HAL_ADC_ConfigChannel+0x7cc>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d12d      	bne.n	80049b8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800495c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004960:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004964:	4619      	mov	r1, r3
 8004966:	481b      	ldr	r0, [pc, #108]	; (80049d4 <HAL_ADC_ConfigChannel+0x7c0>)
 8004968:	f7ff f83b 	bl	80039e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800496c:	e024      	b.n	80049b8 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a1f      	ldr	r2, [pc, #124]	; (80049f0 <HAL_ADC_ConfigChannel+0x7dc>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d120      	bne.n	80049ba <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004978:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800497c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d11a      	bne.n	80049ba <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a14      	ldr	r2, [pc, #80]	; (80049dc <HAL_ADC_ConfigChannel+0x7c8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d115      	bne.n	80049ba <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800498e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004992:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004996:	4619      	mov	r1, r3
 8004998:	480e      	ldr	r0, [pc, #56]	; (80049d4 <HAL_ADC_ConfigChannel+0x7c0>)
 800499a:	f7ff f822 	bl	80039e2 <LL_ADC_SetCommonPathInternalCh>
 800499e:	e00c      	b.n	80049ba <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a4:	f043 0220 	orr.w	r2, r3, #32
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80049b2:	e002      	b.n	80049ba <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049b4:	bf00      	nop
 80049b6:	e000      	b.n	80049ba <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80049c2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	37d8      	adds	r7, #216	; 0xd8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	80080000 	.word	0x80080000
 80049d4:	50040300 	.word	0x50040300
 80049d8:	c7520000 	.word	0xc7520000
 80049dc:	50040000 	.word	0x50040000
 80049e0:	50040200 	.word	0x50040200
 80049e4:	20000000 	.word	0x20000000
 80049e8:	053e2d63 	.word	0x053e2d63
 80049ec:	cb840000 	.word	0xcb840000
 80049f0:	80000001 	.word	0x80000001

080049f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80049fc:	2300      	movs	r3, #0
 80049fe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7ff f975 	bl	8003cf4 <LL_ADC_IsEnabled>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d169      	bne.n	8004ae4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689a      	ldr	r2, [r3, #8]
 8004a16:	4b36      	ldr	r3, [pc, #216]	; (8004af0 <ADC_Enable+0xfc>)
 8004a18:	4013      	ands	r3, r2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00d      	beq.n	8004a3a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a22:	f043 0210 	orr.w	r2, r3, #16
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2e:	f043 0201 	orr.w	r2, r3, #1
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e055      	b.n	8004ae6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff f930 	bl	8003ca4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004a44:	482b      	ldr	r0, [pc, #172]	; (8004af4 <ADC_Enable+0x100>)
 8004a46:	f7fe ffdf 	bl	8003a08 <LL_ADC_GetCommonPathInternalCh>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d013      	beq.n	8004a7c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a54:	4b28      	ldr	r3, [pc, #160]	; (8004af8 <ADC_Enable+0x104>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	099b      	lsrs	r3, r3, #6
 8004a5a:	4a28      	ldr	r2, [pc, #160]	; (8004afc <ADC_Enable+0x108>)
 8004a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a60:	099b      	lsrs	r3, r3, #6
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	4613      	mov	r3, r2
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	4413      	add	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004a6e:	e002      	b.n	8004a76 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1f9      	bne.n	8004a70 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004a7c:	f7fe ff6e 	bl	800395c <HAL_GetTick>
 8004a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a82:	e028      	b.n	8004ad6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7ff f933 	bl	8003cf4 <LL_ADC_IsEnabled>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d104      	bne.n	8004a9e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7ff f903 	bl	8003ca4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a9e:	f7fe ff5d 	bl	800395c <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d914      	bls.n	8004ad6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d00d      	beq.n	8004ad6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004abe:	f043 0210 	orr.w	r2, r3, #16
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aca:	f043 0201 	orr.w	r2, r3, #1
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e007      	b.n	8004ae6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d1cf      	bne.n	8004a84 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	8000003f 	.word	0x8000003f
 8004af4:	50040300 	.word	0x50040300
 8004af8:	20000000 	.word	0x20000000
 8004afc:	053e2d63 	.word	0x053e2d63

08004b00 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff f904 	bl	8003d1a <LL_ADC_IsDisableOngoing>
 8004b12:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7ff f8eb 	bl	8003cf4 <LL_ADC_IsEnabled>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d047      	beq.n	8004bb4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d144      	bne.n	8004bb4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f003 030d 	and.w	r3, r3, #13
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d10c      	bne.n	8004b52 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff f8c5 	bl	8003ccc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2203      	movs	r2, #3
 8004b48:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b4a:	f7fe ff07 	bl	800395c <HAL_GetTick>
 8004b4e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b50:	e029      	b.n	8004ba6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b56:	f043 0210 	orr.w	r2, r3, #16
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b62:	f043 0201 	orr.w	r2, r3, #1
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e023      	b.n	8004bb6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004b6e:	f7fe fef5 	bl	800395c <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d914      	bls.n	8004ba6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00d      	beq.n	8004ba6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8e:	f043 0210 	orr.w	r2, r3, #16
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b9a:	f043 0201 	orr.w	r2, r3, #1
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e007      	b.n	8004bb6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1dc      	bne.n	8004b6e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b084      	sub	sp, #16
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bca:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d14b      	bne.n	8004c70 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bdc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0308 	and.w	r3, r3, #8
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d021      	beq.n	8004c36 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fe ff69 	bl	8003ace <LL_ADC_REG_IsTriggerSourceSWStart>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d032      	beq.n	8004c68 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d12b      	bne.n	8004c68 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d11f      	bne.n	8004c68 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2c:	f043 0201 	orr.w	r2, r3, #1
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	655a      	str	r2, [r3, #84]	; 0x54
 8004c34:	e018      	b.n	8004c68 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d111      	bne.n	8004c68 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d105      	bne.n	8004c68 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c60:	f043 0201 	orr.w	r2, r3, #1
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f7ff fab5 	bl	80041d8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004c6e:	e00e      	b.n	8004c8e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c74:	f003 0310 	and.w	r3, r3, #16
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d003      	beq.n	8004c84 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f7ff fabf 	bl	8004200 <HAL_ADC_ErrorCallback>
}
 8004c82:	e004      	b.n	8004c8e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	4798      	blx	r3
}
 8004c8e:	bf00      	nop
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b084      	sub	sp, #16
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f7ff faa1 	bl	80041ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004caa:	bf00      	nop
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b084      	sub	sp, #16
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd0:	f043 0204 	orr.w	r2, r3, #4
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f7ff fa91 	bl	8004200 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cde:	bf00      	nop
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <LL_ADC_IsEnabled>:
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d101      	bne.n	8004cfe <LL_ADC_IsEnabled+0x18>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e000      	b.n	8004d00 <LL_ADC_IsEnabled+0x1a>
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <LL_ADC_StartCalibration>:
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004d1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	609a      	str	r2, [r3, #8]
}
 8004d32:	bf00      	nop
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <LL_ADC_IsCalibrationOnGoing>:
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d52:	d101      	bne.n	8004d58 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004d54:	2301      	movs	r3, #1
 8004d56:	e000      	b.n	8004d5a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <LL_ADC_REG_IsConversionOngoing>:
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 0304 	and.w	r3, r3, #4
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d101      	bne.n	8004d7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e000      	b.n	8004d80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004d96:	2300      	movs	r3, #0
 8004d98:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d101      	bne.n	8004da8 <HAL_ADCEx_Calibration_Start+0x1c>
 8004da4:	2302      	movs	r3, #2
 8004da6:	e04d      	b.n	8004e44 <HAL_ADCEx_Calibration_Start+0xb8>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff fea5 	bl	8004b00 <ADC_Disable>
 8004db6:	4603      	mov	r3, r0
 8004db8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004dba:	7bfb      	ldrb	r3, [r7, #15]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d136      	bne.n	8004e2e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004dc8:	f023 0302 	bic.w	r3, r3, #2
 8004dcc:	f043 0202 	orr.w	r2, r3, #2
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6839      	ldr	r1, [r7, #0]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7ff ff96 	bl	8004d0c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004de0:	e014      	b.n	8004e0c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	3301      	adds	r3, #1
 8004de6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8004dee:	d30d      	bcc.n	8004e0c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df4:	f023 0312 	bic.w	r3, r3, #18
 8004df8:	f043 0210 	orr.w	r2, r3, #16
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e01b      	b.n	8004e44 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7ff ff94 	bl	8004d3e <LL_ADC_IsCalibrationOnGoing>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1e2      	bne.n	8004de2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e20:	f023 0303 	bic.w	r3, r3, #3
 8004e24:	f043 0201 	orr.w	r2, r3, #1
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	655a      	str	r2, [r3, #84]	; 0x54
 8004e2c:	e005      	b.n	8004e3a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e32:	f043 0210 	orr.w	r2, r3, #16
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004e4c:	b590      	push	{r4, r7, lr}
 8004e4e:	b09f      	sub	sp, #124	; 0x7c
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d101      	bne.n	8004e6a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004e66:	2302      	movs	r3, #2
 8004e68:	e093      	b.n	8004f92 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004e72:	2300      	movs	r3, #0
 8004e74:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004e76:	2300      	movs	r3, #0
 8004e78:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a47      	ldr	r2, [pc, #284]	; (8004f9c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d102      	bne.n	8004e8a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004e84:	4b46      	ldr	r3, [pc, #280]	; (8004fa0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004e86:	60bb      	str	r3, [r7, #8]
 8004e88:	e001      	b.n	8004e8e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10b      	bne.n	8004eac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e98:	f043 0220 	orr.w	r2, r3, #32
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e072      	b.n	8004f92 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7ff ff59 	bl	8004d66 <LL_ADC_REG_IsConversionOngoing>
 8004eb4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7ff ff53 	bl	8004d66 <LL_ADC_REG_IsConversionOngoing>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d154      	bne.n	8004f70 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004ec6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d151      	bne.n	8004f70 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004ecc:	4b35      	ldr	r3, [pc, #212]	; (8004fa4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004ece:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d02c      	beq.n	8004f32 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	6859      	ldr	r1, [r3, #4]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004eea:	035b      	lsls	r3, r3, #13
 8004eec:	430b      	orrs	r3, r1
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ef4:	4829      	ldr	r0, [pc, #164]	; (8004f9c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004ef6:	f7ff fef6 	bl	8004ce6 <LL_ADC_IsEnabled>
 8004efa:	4604      	mov	r4, r0
 8004efc:	4828      	ldr	r0, [pc, #160]	; (8004fa0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004efe:	f7ff fef2 	bl	8004ce6 <LL_ADC_IsEnabled>
 8004f02:	4603      	mov	r3, r0
 8004f04:	431c      	orrs	r4, r3
 8004f06:	4828      	ldr	r0, [pc, #160]	; (8004fa8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004f08:	f7ff feed 	bl	8004ce6 <LL_ADC_IsEnabled>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	4323      	orrs	r3, r4
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d137      	bne.n	8004f84 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004f1c:	f023 030f 	bic.w	r3, r3, #15
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	6811      	ldr	r1, [r2, #0]
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	6892      	ldr	r2, [r2, #8]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f2e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f30:	e028      	b.n	8004f84 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f3c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f3e:	4817      	ldr	r0, [pc, #92]	; (8004f9c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004f40:	f7ff fed1 	bl	8004ce6 <LL_ADC_IsEnabled>
 8004f44:	4604      	mov	r4, r0
 8004f46:	4816      	ldr	r0, [pc, #88]	; (8004fa0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004f48:	f7ff fecd 	bl	8004ce6 <LL_ADC_IsEnabled>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	431c      	orrs	r4, r3
 8004f50:	4815      	ldr	r0, [pc, #84]	; (8004fa8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004f52:	f7ff fec8 	bl	8004ce6 <LL_ADC_IsEnabled>
 8004f56:	4603      	mov	r3, r0
 8004f58:	4323      	orrs	r3, r4
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d112      	bne.n	8004f84 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004f66:	f023 030f 	bic.w	r3, r3, #15
 8004f6a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f6c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f6e:	e009      	b.n	8004f84 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f74:	f043 0220 	orr.w	r2, r3, #32
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004f82:	e000      	b.n	8004f86 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f84:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004f8e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	377c      	adds	r7, #124	; 0x7c
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd90      	pop	{r4, r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	50040000 	.word	0x50040000
 8004fa0:	50040100 	.word	0x50040100
 8004fa4:	50040300 	.word	0x50040300
 8004fa8:	50040200 	.word	0x50040200

08004fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f003 0307 	and.w	r3, r3, #7
 8004fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fbc:	4b0c      	ldr	r3, [pc, #48]	; (8004ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004fc8:	4013      	ands	r3, r2
 8004fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fde:	4a04      	ldr	r2, [pc, #16]	; (8004ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	60d3      	str	r3, [r2, #12]
}
 8004fe4:	bf00      	nop
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	e000ed00 	.word	0xe000ed00

08004ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ff8:	4b04      	ldr	r3, [pc, #16]	; (800500c <__NVIC_GetPriorityGrouping+0x18>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	0a1b      	lsrs	r3, r3, #8
 8004ffe:	f003 0307 	and.w	r3, r3, #7
}
 8005002:	4618      	mov	r0, r3
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	e000ed00 	.word	0xe000ed00

08005010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	4603      	mov	r3, r0
 8005018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800501a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800501e:	2b00      	cmp	r3, #0
 8005020:	db0b      	blt.n	800503a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005022:	79fb      	ldrb	r3, [r7, #7]
 8005024:	f003 021f 	and.w	r2, r3, #31
 8005028:	4907      	ldr	r1, [pc, #28]	; (8005048 <__NVIC_EnableIRQ+0x38>)
 800502a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800502e:	095b      	lsrs	r3, r3, #5
 8005030:	2001      	movs	r0, #1
 8005032:	fa00 f202 	lsl.w	r2, r0, r2
 8005036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	e000e100 	.word	0xe000e100

0800504c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	4603      	mov	r3, r0
 8005054:	6039      	str	r1, [r7, #0]
 8005056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800505c:	2b00      	cmp	r3, #0
 800505e:	db0a      	blt.n	8005076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	b2da      	uxtb	r2, r3
 8005064:	490c      	ldr	r1, [pc, #48]	; (8005098 <__NVIC_SetPriority+0x4c>)
 8005066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506a:	0112      	lsls	r2, r2, #4
 800506c:	b2d2      	uxtb	r2, r2
 800506e:	440b      	add	r3, r1
 8005070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005074:	e00a      	b.n	800508c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	b2da      	uxtb	r2, r3
 800507a:	4908      	ldr	r1, [pc, #32]	; (800509c <__NVIC_SetPriority+0x50>)
 800507c:	79fb      	ldrb	r3, [r7, #7]
 800507e:	f003 030f 	and.w	r3, r3, #15
 8005082:	3b04      	subs	r3, #4
 8005084:	0112      	lsls	r2, r2, #4
 8005086:	b2d2      	uxtb	r2, r2
 8005088:	440b      	add	r3, r1
 800508a:	761a      	strb	r2, [r3, #24]
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr
 8005098:	e000e100 	.word	0xe000e100
 800509c:	e000ed00 	.word	0xe000ed00

080050a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b089      	sub	sp, #36	; 0x24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f003 0307 	and.w	r3, r3, #7
 80050b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	f1c3 0307 	rsb	r3, r3, #7
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	bf28      	it	cs
 80050be:	2304      	movcs	r3, #4
 80050c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	3304      	adds	r3, #4
 80050c6:	2b06      	cmp	r3, #6
 80050c8:	d902      	bls.n	80050d0 <NVIC_EncodePriority+0x30>
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	3b03      	subs	r3, #3
 80050ce:	e000      	b.n	80050d2 <NVIC_EncodePriority+0x32>
 80050d0:	2300      	movs	r3, #0
 80050d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	fa02 f303 	lsl.w	r3, r2, r3
 80050de:	43da      	mvns	r2, r3
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	401a      	ands	r2, r3
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	fa01 f303 	lsl.w	r3, r1, r3
 80050f2:	43d9      	mvns	r1, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050f8:	4313      	orrs	r3, r2
         );
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3724      	adds	r7, #36	; 0x24
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
	...

08005108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	3b01      	subs	r3, #1
 8005114:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005118:	d301      	bcc.n	800511e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800511a:	2301      	movs	r3, #1
 800511c:	e00f      	b.n	800513e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800511e:	4a0a      	ldr	r2, [pc, #40]	; (8005148 <SysTick_Config+0x40>)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3b01      	subs	r3, #1
 8005124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005126:	210f      	movs	r1, #15
 8005128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800512c:	f7ff ff8e 	bl	800504c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005130:	4b05      	ldr	r3, [pc, #20]	; (8005148 <SysTick_Config+0x40>)
 8005132:	2200      	movs	r2, #0
 8005134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005136:	4b04      	ldr	r3, [pc, #16]	; (8005148 <SysTick_Config+0x40>)
 8005138:	2207      	movs	r2, #7
 800513a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	e000e010 	.word	0xe000e010

0800514c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f7ff ff29 	bl	8004fac <__NVIC_SetPriorityGrouping>
}
 800515a:	bf00      	nop
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b086      	sub	sp, #24
 8005166:	af00      	add	r7, sp, #0
 8005168:	4603      	mov	r3, r0
 800516a:	60b9      	str	r1, [r7, #8]
 800516c:	607a      	str	r2, [r7, #4]
 800516e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005170:	2300      	movs	r3, #0
 8005172:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005174:	f7ff ff3e 	bl	8004ff4 <__NVIC_GetPriorityGrouping>
 8005178:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	68b9      	ldr	r1, [r7, #8]
 800517e:	6978      	ldr	r0, [r7, #20]
 8005180:	f7ff ff8e 	bl	80050a0 <NVIC_EncodePriority>
 8005184:	4602      	mov	r2, r0
 8005186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800518a:	4611      	mov	r1, r2
 800518c:	4618      	mov	r0, r3
 800518e:	f7ff ff5d 	bl	800504c <__NVIC_SetPriority>
}
 8005192:	bf00      	nop
 8005194:	3718      	adds	r7, #24
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b082      	sub	sp, #8
 800519e:	af00      	add	r7, sp, #0
 80051a0:	4603      	mov	r3, r0
 80051a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7ff ff31 	bl	8005010 <__NVIC_EnableIRQ>
}
 80051ae:	bf00      	nop
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b082      	sub	sp, #8
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7ff ffa2 	bl	8005108 <SysTick_Config>
 80051c4:	4603      	mov	r3, r0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
	...

080051d0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e098      	b.n	8005314 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	4b4d      	ldr	r3, [pc, #308]	; (8005320 <HAL_DMA_Init+0x150>)
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d80f      	bhi.n	800520e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	461a      	mov	r2, r3
 80051f4:	4b4b      	ldr	r3, [pc, #300]	; (8005324 <HAL_DMA_Init+0x154>)
 80051f6:	4413      	add	r3, r2
 80051f8:	4a4b      	ldr	r2, [pc, #300]	; (8005328 <HAL_DMA_Init+0x158>)
 80051fa:	fba2 2303 	umull	r2, r3, r2, r3
 80051fe:	091b      	lsrs	r3, r3, #4
 8005200:	009a      	lsls	r2, r3, #2
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a48      	ldr	r2, [pc, #288]	; (800532c <HAL_DMA_Init+0x15c>)
 800520a:	641a      	str	r2, [r3, #64]	; 0x40
 800520c:	e00e      	b.n	800522c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	461a      	mov	r2, r3
 8005214:	4b46      	ldr	r3, [pc, #280]	; (8005330 <HAL_DMA_Init+0x160>)
 8005216:	4413      	add	r3, r2
 8005218:	4a43      	ldr	r2, [pc, #268]	; (8005328 <HAL_DMA_Init+0x158>)
 800521a:	fba2 2303 	umull	r2, r3, r2, r3
 800521e:	091b      	lsrs	r3, r3, #4
 8005220:	009a      	lsls	r2, r3, #2
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a42      	ldr	r2, [pc, #264]	; (8005334 <HAL_DMA_Init+0x164>)
 800522a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2202      	movs	r2, #2
 8005230:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005246:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005250:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800525c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005268:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	4313      	orrs	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005286:	d039      	beq.n	80052fc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528c:	4a27      	ldr	r2, [pc, #156]	; (800532c <HAL_DMA_Init+0x15c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d11a      	bne.n	80052c8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005292:	4b29      	ldr	r3, [pc, #164]	; (8005338 <HAL_DMA_Init+0x168>)
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529a:	f003 031c 	and.w	r3, r3, #28
 800529e:	210f      	movs	r1, #15
 80052a0:	fa01 f303 	lsl.w	r3, r1, r3
 80052a4:	43db      	mvns	r3, r3
 80052a6:	4924      	ldr	r1, [pc, #144]	; (8005338 <HAL_DMA_Init+0x168>)
 80052a8:	4013      	ands	r3, r2
 80052aa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80052ac:	4b22      	ldr	r3, [pc, #136]	; (8005338 <HAL_DMA_Init+0x168>)
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6859      	ldr	r1, [r3, #4]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b8:	f003 031c 	and.w	r3, r3, #28
 80052bc:	fa01 f303 	lsl.w	r3, r1, r3
 80052c0:	491d      	ldr	r1, [pc, #116]	; (8005338 <HAL_DMA_Init+0x168>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	600b      	str	r3, [r1, #0]
 80052c6:	e019      	b.n	80052fc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80052c8:	4b1c      	ldr	r3, [pc, #112]	; (800533c <HAL_DMA_Init+0x16c>)
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d0:	f003 031c 	and.w	r3, r3, #28
 80052d4:	210f      	movs	r1, #15
 80052d6:	fa01 f303 	lsl.w	r3, r1, r3
 80052da:	43db      	mvns	r3, r3
 80052dc:	4917      	ldr	r1, [pc, #92]	; (800533c <HAL_DMA_Init+0x16c>)
 80052de:	4013      	ands	r3, r2
 80052e0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80052e2:	4b16      	ldr	r3, [pc, #88]	; (800533c <HAL_DMA_Init+0x16c>)
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6859      	ldr	r1, [r3, #4]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ee:	f003 031c 	and.w	r3, r3, #28
 80052f2:	fa01 f303 	lsl.w	r3, r1, r3
 80052f6:	4911      	ldr	r1, [pc, #68]	; (800533c <HAL_DMA_Init+0x16c>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3714      	adds	r7, #20
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	40020407 	.word	0x40020407
 8005324:	bffdfff8 	.word	0xbffdfff8
 8005328:	cccccccd 	.word	0xcccccccd
 800532c:	40020000 	.word	0x40020000
 8005330:	bffdfbf8 	.word	0xbffdfbf8
 8005334:	40020400 	.word	0x40020400
 8005338:	400200a8 	.word	0x400200a8
 800533c:	400204a8 	.word	0x400204a8

08005340 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800534e:	2300      	movs	r3, #0
 8005350:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <HAL_DMA_Start_IT+0x20>
 800535c:	2302      	movs	r3, #2
 800535e:	e04b      	b.n	80053f8 <HAL_DMA_Start_IT+0xb8>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b01      	cmp	r3, #1
 8005372:	d13a      	bne.n	80053ea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2202      	movs	r2, #2
 8005378:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 0201 	bic.w	r2, r2, #1
 8005390:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	68b9      	ldr	r1, [r7, #8]
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 f95f 	bl	800565c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d008      	beq.n	80053b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f042 020e 	orr.w	r2, r2, #14
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	e00f      	b.n	80053d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 0204 	bic.w	r2, r2, #4
 80053c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 020a 	orr.w	r2, r2, #10
 80053d6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f042 0201 	orr.w	r2, r2, #1
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	e005      	b.n	80053f6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80053f2:	2302      	movs	r3, #2
 80053f4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80053f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3718      	adds	r7, #24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005408:	2300      	movs	r3, #0
 800540a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d008      	beq.n	800542a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2204      	movs	r2, #4
 800541c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e022      	b.n	8005470 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 020e 	bic.w	r2, r2, #14
 8005438:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 0201 	bic.w	r2, r2, #1
 8005448:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544e:	f003 021c 	and.w	r2, r3, #28
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	2101      	movs	r1, #1
 8005458:	fa01 f202 	lsl.w	r2, r1, r2
 800545c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800546e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005470:	4618      	mov	r0, r3
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b02      	cmp	r3, #2
 8005492:	d005      	beq.n	80054a0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2204      	movs	r2, #4
 8005498:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	73fb      	strb	r3, [r7, #15]
 800549e:	e029      	b.n	80054f4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f022 020e 	bic.w	r2, r2, #14
 80054ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0201 	bic.w	r2, r2, #1
 80054be:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c4:	f003 021c 	and.w	r2, r3, #28
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054cc:	2101      	movs	r1, #1
 80054ce:	fa01 f202 	lsl.w	r2, r1, r2
 80054d2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	4798      	blx	r3
    }
  }
  return status;
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b084      	sub	sp, #16
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800551a:	f003 031c 	and.w	r3, r3, #28
 800551e:	2204      	movs	r2, #4
 8005520:	409a      	lsls	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	4013      	ands	r3, r2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d026      	beq.n	8005578 <HAL_DMA_IRQHandler+0x7a>
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	f003 0304 	and.w	r3, r3, #4
 8005530:	2b00      	cmp	r3, #0
 8005532:	d021      	beq.n	8005578 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0320 	and.w	r3, r3, #32
 800553e:	2b00      	cmp	r3, #0
 8005540:	d107      	bne.n	8005552 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0204 	bic.w	r2, r2, #4
 8005550:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005556:	f003 021c 	and.w	r2, r3, #28
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	2104      	movs	r1, #4
 8005560:	fa01 f202 	lsl.w	r2, r1, r2
 8005564:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556a:	2b00      	cmp	r3, #0
 800556c:	d071      	beq.n	8005652 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005576:	e06c      	b.n	8005652 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557c:	f003 031c 	and.w	r3, r3, #28
 8005580:	2202      	movs	r2, #2
 8005582:	409a      	lsls	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4013      	ands	r3, r2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d02e      	beq.n	80055ea <HAL_DMA_IRQHandler+0xec>
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d029      	beq.n	80055ea <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0320 	and.w	r3, r3, #32
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10b      	bne.n	80055bc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 020a 	bic.w	r2, r2, #10
 80055b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c0:	f003 021c 	and.w	r2, r3, #28
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c8:	2102      	movs	r1, #2
 80055ca:	fa01 f202 	lsl.w	r2, r1, r2
 80055ce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d038      	beq.n	8005652 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80055e8:	e033      	b.n	8005652 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ee:	f003 031c 	and.w	r3, r3, #28
 80055f2:	2208      	movs	r2, #8
 80055f4:	409a      	lsls	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	4013      	ands	r3, r2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d02a      	beq.n	8005654 <HAL_DMA_IRQHandler+0x156>
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	f003 0308 	and.w	r3, r3, #8
 8005604:	2b00      	cmp	r3, #0
 8005606:	d025      	beq.n	8005654 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 020e 	bic.w	r2, r2, #14
 8005616:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561c:	f003 021c 	and.w	r2, r3, #28
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005624:	2101      	movs	r1, #1
 8005626:	fa01 f202 	lsl.w	r2, r1, r2
 800562a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005646:	2b00      	cmp	r3, #0
 8005648:	d004      	beq.n	8005654 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005652:	bf00      	nop
 8005654:	bf00      	nop
}
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
 8005668:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566e:	f003 021c 	and.w	r2, r3, #28
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	2101      	movs	r1, #1
 8005678:	fa01 f202 	lsl.w	r2, r1, r2
 800567c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	2b10      	cmp	r3, #16
 800568c:	d108      	bne.n	80056a0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800569e:	e007      	b.n	80056b0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	60da      	str	r2, [r3, #12]
}
 80056b0:	bf00      	nop
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80056c6:	2300      	movs	r3, #0
 80056c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056ca:	e17f      	b.n	80059cc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	2101      	movs	r1, #1
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	fa01 f303 	lsl.w	r3, r1, r3
 80056d8:	4013      	ands	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 8171 	beq.w	80059c6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f003 0303 	and.w	r3, r3, #3
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d005      	beq.n	80056fc <HAL_GPIO_Init+0x40>
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f003 0303 	and.w	r3, r3, #3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d130      	bne.n	800575e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	005b      	lsls	r3, r3, #1
 8005706:	2203      	movs	r2, #3
 8005708:	fa02 f303 	lsl.w	r3, r2, r3
 800570c:	43db      	mvns	r3, r3
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	4013      	ands	r3, r2
 8005712:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	68da      	ldr	r2, [r3, #12]
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	005b      	lsls	r3, r3, #1
 800571c:	fa02 f303 	lsl.w	r3, r2, r3
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005732:	2201      	movs	r2, #1
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	fa02 f303 	lsl.w	r3, r2, r3
 800573a:	43db      	mvns	r3, r3
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	4013      	ands	r3, r2
 8005740:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	091b      	lsrs	r3, r3, #4
 8005748:	f003 0201 	and.w	r2, r3, #1
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	fa02 f303 	lsl.w	r3, r2, r3
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	4313      	orrs	r3, r2
 8005756:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f003 0303 	and.w	r3, r3, #3
 8005766:	2b03      	cmp	r3, #3
 8005768:	d118      	bne.n	800579c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005770:	2201      	movs	r2, #1
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	fa02 f303 	lsl.w	r3, r2, r3
 8005778:	43db      	mvns	r3, r3
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	4013      	ands	r3, r2
 800577e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	08db      	lsrs	r3, r3, #3
 8005786:	f003 0201 	and.w	r2, r3, #1
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	fa02 f303 	lsl.w	r3, r2, r3
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	4313      	orrs	r3, r2
 8005794:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f003 0303 	and.w	r3, r3, #3
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	d017      	beq.n	80057d8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	2203      	movs	r2, #3
 80057b4:	fa02 f303 	lsl.w	r3, r2, r3
 80057b8:	43db      	mvns	r3, r3
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	4013      	ands	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f003 0303 	and.w	r3, r3, #3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d123      	bne.n	800582c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	08da      	lsrs	r2, r3, #3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3208      	adds	r2, #8
 80057ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f003 0307 	and.w	r3, r3, #7
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	220f      	movs	r2, #15
 80057fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005800:	43db      	mvns	r3, r3
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	4013      	ands	r3, r2
 8005806:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	691a      	ldr	r2, [r3, #16]
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f003 0307 	and.w	r3, r3, #7
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	4313      	orrs	r3, r2
 800581c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	08da      	lsrs	r2, r3, #3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	3208      	adds	r2, #8
 8005826:	6939      	ldr	r1, [r7, #16]
 8005828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	005b      	lsls	r3, r3, #1
 8005836:	2203      	movs	r2, #3
 8005838:	fa02 f303 	lsl.w	r3, r2, r3
 800583c:	43db      	mvns	r3, r3
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	4013      	ands	r3, r2
 8005842:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f003 0203 	and.w	r2, r3, #3
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	fa02 f303 	lsl.w	r3, r2, r3
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	4313      	orrs	r3, r2
 8005858:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 80ac 	beq.w	80059c6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800586e:	4b5f      	ldr	r3, [pc, #380]	; (80059ec <HAL_GPIO_Init+0x330>)
 8005870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005872:	4a5e      	ldr	r2, [pc, #376]	; (80059ec <HAL_GPIO_Init+0x330>)
 8005874:	f043 0301 	orr.w	r3, r3, #1
 8005878:	6613      	str	r3, [r2, #96]	; 0x60
 800587a:	4b5c      	ldr	r3, [pc, #368]	; (80059ec <HAL_GPIO_Init+0x330>)
 800587c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	60bb      	str	r3, [r7, #8]
 8005884:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005886:	4a5a      	ldr	r2, [pc, #360]	; (80059f0 <HAL_GPIO_Init+0x334>)
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	089b      	lsrs	r3, r3, #2
 800588c:	3302      	adds	r3, #2
 800588e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005892:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f003 0303 	and.w	r3, r3, #3
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	220f      	movs	r2, #15
 800589e:	fa02 f303 	lsl.w	r3, r2, r3
 80058a2:	43db      	mvns	r3, r3
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	4013      	ands	r3, r2
 80058a8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80058b0:	d025      	beq.n	80058fe <HAL_GPIO_Init+0x242>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a4f      	ldr	r2, [pc, #316]	; (80059f4 <HAL_GPIO_Init+0x338>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d01f      	beq.n	80058fa <HAL_GPIO_Init+0x23e>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a4e      	ldr	r2, [pc, #312]	; (80059f8 <HAL_GPIO_Init+0x33c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d019      	beq.n	80058f6 <HAL_GPIO_Init+0x23a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a4d      	ldr	r2, [pc, #308]	; (80059fc <HAL_GPIO_Init+0x340>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d013      	beq.n	80058f2 <HAL_GPIO_Init+0x236>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a4c      	ldr	r2, [pc, #304]	; (8005a00 <HAL_GPIO_Init+0x344>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d00d      	beq.n	80058ee <HAL_GPIO_Init+0x232>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a4b      	ldr	r2, [pc, #300]	; (8005a04 <HAL_GPIO_Init+0x348>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d007      	beq.n	80058ea <HAL_GPIO_Init+0x22e>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a4a      	ldr	r2, [pc, #296]	; (8005a08 <HAL_GPIO_Init+0x34c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d101      	bne.n	80058e6 <HAL_GPIO_Init+0x22a>
 80058e2:	2306      	movs	r3, #6
 80058e4:	e00c      	b.n	8005900 <HAL_GPIO_Init+0x244>
 80058e6:	2307      	movs	r3, #7
 80058e8:	e00a      	b.n	8005900 <HAL_GPIO_Init+0x244>
 80058ea:	2305      	movs	r3, #5
 80058ec:	e008      	b.n	8005900 <HAL_GPIO_Init+0x244>
 80058ee:	2304      	movs	r3, #4
 80058f0:	e006      	b.n	8005900 <HAL_GPIO_Init+0x244>
 80058f2:	2303      	movs	r3, #3
 80058f4:	e004      	b.n	8005900 <HAL_GPIO_Init+0x244>
 80058f6:	2302      	movs	r3, #2
 80058f8:	e002      	b.n	8005900 <HAL_GPIO_Init+0x244>
 80058fa:	2301      	movs	r3, #1
 80058fc:	e000      	b.n	8005900 <HAL_GPIO_Init+0x244>
 80058fe:	2300      	movs	r3, #0
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	f002 0203 	and.w	r2, r2, #3
 8005906:	0092      	lsls	r2, r2, #2
 8005908:	4093      	lsls	r3, r2
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	4313      	orrs	r3, r2
 800590e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005910:	4937      	ldr	r1, [pc, #220]	; (80059f0 <HAL_GPIO_Init+0x334>)
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	089b      	lsrs	r3, r3, #2
 8005916:	3302      	adds	r3, #2
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800591e:	4b3b      	ldr	r3, [pc, #236]	; (8005a0c <HAL_GPIO_Init+0x350>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	43db      	mvns	r3, r3
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	4013      	ands	r3, r2
 800592c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4313      	orrs	r3, r2
 8005940:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005942:	4a32      	ldr	r2, [pc, #200]	; (8005a0c <HAL_GPIO_Init+0x350>)
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005948:	4b30      	ldr	r3, [pc, #192]	; (8005a0c <HAL_GPIO_Init+0x350>)
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	43db      	mvns	r3, r3
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	4013      	ands	r3, r2
 8005956:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	4313      	orrs	r3, r2
 800596a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800596c:	4a27      	ldr	r2, [pc, #156]	; (8005a0c <HAL_GPIO_Init+0x350>)
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005972:	4b26      	ldr	r3, [pc, #152]	; (8005a0c <HAL_GPIO_Init+0x350>)
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	43db      	mvns	r3, r3
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	4013      	ands	r3, r2
 8005980:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4313      	orrs	r3, r2
 8005994:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005996:	4a1d      	ldr	r2, [pc, #116]	; (8005a0c <HAL_GPIO_Init+0x350>)
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800599c:	4b1b      	ldr	r3, [pc, #108]	; (8005a0c <HAL_GPIO_Init+0x350>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	43db      	mvns	r3, r3
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	4013      	ands	r3, r2
 80059aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d003      	beq.n	80059c0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4313      	orrs	r3, r2
 80059be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80059c0:	4a12      	ldr	r2, [pc, #72]	; (8005a0c <HAL_GPIO_Init+0x350>)
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	3301      	adds	r3, #1
 80059ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	fa22 f303 	lsr.w	r3, r2, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f47f ae78 	bne.w	80056cc <HAL_GPIO_Init+0x10>
  }
}
 80059dc:	bf00      	nop
 80059de:	bf00      	nop
 80059e0:	371c      	adds	r7, #28
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	40021000 	.word	0x40021000
 80059f0:	40010000 	.word	0x40010000
 80059f4:	48000400 	.word	0x48000400
 80059f8:	48000800 	.word	0x48000800
 80059fc:	48000c00 	.word	0x48000c00
 8005a00:	48001000 	.word	0x48001000
 8005a04:	48001400 	.word	0x48001400
 8005a08:	48001800 	.word	0x48001800
 8005a0c:	40010400 	.word	0x40010400

08005a10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	691a      	ldr	r2, [r3, #16]
 8005a20:	887b      	ldrh	r3, [r7, #2]
 8005a22:	4013      	ands	r3, r2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	73fb      	strb	r3, [r7, #15]
 8005a2c:	e001      	b.n	8005a32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3714      	adds	r7, #20
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	460b      	mov	r3, r1
 8005a4a:	807b      	strh	r3, [r7, #2]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a50:	787b      	ldrb	r3, [r7, #1]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a56:	887a      	ldrh	r2, [r7, #2]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005a5c:	e002      	b.n	8005a64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a5e:	887a      	ldrh	r2, [r7, #2]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005a74:	4b04      	ldr	r3, [pc, #16]	; (8005a88 <HAL_PWREx_GetVoltageRange+0x18>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	40007000 	.word	0x40007000

08005a8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a9a:	d130      	bne.n	8005afe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a9c:	4b23      	ldr	r3, [pc, #140]	; (8005b2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aa8:	d038      	beq.n	8005b1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005aaa:	4b20      	ldr	r3, [pc, #128]	; (8005b2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005ab2:	4a1e      	ldr	r2, [pc, #120]	; (8005b2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ab4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ab8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005aba:	4b1d      	ldr	r3, [pc, #116]	; (8005b30 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2232      	movs	r2, #50	; 0x32
 8005ac0:	fb02 f303 	mul.w	r3, r2, r3
 8005ac4:	4a1b      	ldr	r2, [pc, #108]	; (8005b34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aca:	0c9b      	lsrs	r3, r3, #18
 8005acc:	3301      	adds	r3, #1
 8005ace:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ad0:	e002      	b.n	8005ad8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ad8:	4b14      	ldr	r3, [pc, #80]	; (8005b2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ae4:	d102      	bne.n	8005aec <HAL_PWREx_ControlVoltageScaling+0x60>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1f2      	bne.n	8005ad2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005aec:	4b0f      	ldr	r3, [pc, #60]	; (8005b2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005af8:	d110      	bne.n	8005b1c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e00f      	b.n	8005b1e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005afe:	4b0b      	ldr	r3, [pc, #44]	; (8005b2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b0a:	d007      	beq.n	8005b1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005b0c:	4b07      	ldr	r3, [pc, #28]	; (8005b2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b14:	4a05      	ldr	r2, [pc, #20]	; (8005b2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	40007000 	.word	0x40007000
 8005b30:	20000000 	.word	0x20000000
 8005b34:	431bde83 	.word	0x431bde83

08005b38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b088      	sub	sp, #32
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e3ca      	b.n	80062e0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b4a:	4b97      	ldr	r3, [pc, #604]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f003 030c 	and.w	r3, r3, #12
 8005b52:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b54:	4b94      	ldr	r3, [pc, #592]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f003 0303 	and.w	r3, r3, #3
 8005b5c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0310 	and.w	r3, r3, #16
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 80e4 	beq.w	8005d34 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d007      	beq.n	8005b82 <HAL_RCC_OscConfig+0x4a>
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	2b0c      	cmp	r3, #12
 8005b76:	f040 808b 	bne.w	8005c90 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	f040 8087 	bne.w	8005c90 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b82:	4b89      	ldr	r3, [pc, #548]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d005      	beq.n	8005b9a <HAL_RCC_OscConfig+0x62>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e3a2      	b.n	80062e0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a1a      	ldr	r2, [r3, #32]
 8005b9e:	4b82      	ldr	r3, [pc, #520]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0308 	and.w	r3, r3, #8
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d004      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x7c>
 8005baa:	4b7f      	ldr	r3, [pc, #508]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bb2:	e005      	b.n	8005bc0 <HAL_RCC_OscConfig+0x88>
 8005bb4:	4b7c      	ldr	r3, [pc, #496]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bba:	091b      	lsrs	r3, r3, #4
 8005bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d223      	bcs.n	8005c0c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a1b      	ldr	r3, [r3, #32]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f000 fd55 	bl	8006678 <RCC_SetFlashLatencyFromMSIRange>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d001      	beq.n	8005bd8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e383      	b.n	80062e0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005bd8:	4b73      	ldr	r3, [pc, #460]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a72      	ldr	r2, [pc, #456]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005bde:	f043 0308 	orr.w	r3, r3, #8
 8005be2:	6013      	str	r3, [r2, #0]
 8005be4:	4b70      	ldr	r3, [pc, #448]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a1b      	ldr	r3, [r3, #32]
 8005bf0:	496d      	ldr	r1, [pc, #436]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005bf6:	4b6c      	ldr	r3, [pc, #432]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	021b      	lsls	r3, r3, #8
 8005c04:	4968      	ldr	r1, [pc, #416]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	604b      	str	r3, [r1, #4]
 8005c0a:	e025      	b.n	8005c58 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c0c:	4b66      	ldr	r3, [pc, #408]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a65      	ldr	r2, [pc, #404]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005c12:	f043 0308 	orr.w	r3, r3, #8
 8005c16:	6013      	str	r3, [r2, #0]
 8005c18:	4b63      	ldr	r3, [pc, #396]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a1b      	ldr	r3, [r3, #32]
 8005c24:	4960      	ldr	r1, [pc, #384]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c2a:	4b5f      	ldr	r3, [pc, #380]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	69db      	ldr	r3, [r3, #28]
 8005c36:	021b      	lsls	r3, r3, #8
 8005c38:	495b      	ldr	r1, [pc, #364]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d109      	bne.n	8005c58 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 fd15 	bl	8006678 <RCC_SetFlashLatencyFromMSIRange>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e343      	b.n	80062e0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c58:	f000 fc4a 	bl	80064f0 <HAL_RCC_GetSysClockFreq>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	4b52      	ldr	r3, [pc, #328]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	091b      	lsrs	r3, r3, #4
 8005c64:	f003 030f 	and.w	r3, r3, #15
 8005c68:	4950      	ldr	r1, [pc, #320]	; (8005dac <HAL_RCC_OscConfig+0x274>)
 8005c6a:	5ccb      	ldrb	r3, [r1, r3]
 8005c6c:	f003 031f 	and.w	r3, r3, #31
 8005c70:	fa22 f303 	lsr.w	r3, r2, r3
 8005c74:	4a4e      	ldr	r2, [pc, #312]	; (8005db0 <HAL_RCC_OscConfig+0x278>)
 8005c76:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005c78:	4b4e      	ldr	r3, [pc, #312]	; (8005db4 <HAL_RCC_OscConfig+0x27c>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7fd fe1d 	bl	80038bc <HAL_InitTick>
 8005c82:	4603      	mov	r3, r0
 8005c84:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005c86:	7bfb      	ldrb	r3, [r7, #15]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d052      	beq.n	8005d32 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005c8c:	7bfb      	ldrb	r3, [r7, #15]
 8005c8e:	e327      	b.n	80062e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d032      	beq.n	8005cfe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005c98:	4b43      	ldr	r3, [pc, #268]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a42      	ldr	r2, [pc, #264]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005c9e:	f043 0301 	orr.w	r3, r3, #1
 8005ca2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ca4:	f7fd fe5a 	bl	800395c <HAL_GetTick>
 8005ca8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005caa:	e008      	b.n	8005cbe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005cac:	f7fd fe56 	bl	800395c <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d901      	bls.n	8005cbe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e310      	b.n	80062e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005cbe:	4b3a      	ldr	r3, [pc, #232]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d0f0      	beq.n	8005cac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cca:	4b37      	ldr	r3, [pc, #220]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a36      	ldr	r2, [pc, #216]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005cd0:	f043 0308 	orr.w	r3, r3, #8
 8005cd4:	6013      	str	r3, [r2, #0]
 8005cd6:	4b34      	ldr	r3, [pc, #208]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	4931      	ldr	r1, [pc, #196]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ce8:	4b2f      	ldr	r3, [pc, #188]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	69db      	ldr	r3, [r3, #28]
 8005cf4:	021b      	lsls	r3, r3, #8
 8005cf6:	492c      	ldr	r1, [pc, #176]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	604b      	str	r3, [r1, #4]
 8005cfc:	e01a      	b.n	8005d34 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005cfe:	4b2a      	ldr	r3, [pc, #168]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a29      	ldr	r2, [pc, #164]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005d04:	f023 0301 	bic.w	r3, r3, #1
 8005d08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d0a:	f7fd fe27 	bl	800395c <HAL_GetTick>
 8005d0e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005d10:	e008      	b.n	8005d24 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d12:	f7fd fe23 	bl	800395c <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d901      	bls.n	8005d24 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e2dd      	b.n	80062e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005d24:	4b20      	ldr	r3, [pc, #128]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0302 	and.w	r3, r3, #2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1f0      	bne.n	8005d12 <HAL_RCC_OscConfig+0x1da>
 8005d30:	e000      	b.n	8005d34 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d32:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d074      	beq.n	8005e2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	2b08      	cmp	r3, #8
 8005d44:	d005      	beq.n	8005d52 <HAL_RCC_OscConfig+0x21a>
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	2b0c      	cmp	r3, #12
 8005d4a:	d10e      	bne.n	8005d6a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	2b03      	cmp	r3, #3
 8005d50:	d10b      	bne.n	8005d6a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d52:	4b15      	ldr	r3, [pc, #84]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d064      	beq.n	8005e28 <HAL_RCC_OscConfig+0x2f0>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d160      	bne.n	8005e28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e2ba      	b.n	80062e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d72:	d106      	bne.n	8005d82 <HAL_RCC_OscConfig+0x24a>
 8005d74:	4b0c      	ldr	r3, [pc, #48]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a0b      	ldr	r2, [pc, #44]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d7e:	6013      	str	r3, [r2, #0]
 8005d80:	e026      	b.n	8005dd0 <HAL_RCC_OscConfig+0x298>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d8a:	d115      	bne.n	8005db8 <HAL_RCC_OscConfig+0x280>
 8005d8c:	4b06      	ldr	r3, [pc, #24]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a05      	ldr	r2, [pc, #20]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005d92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d96:	6013      	str	r3, [r2, #0]
 8005d98:	4b03      	ldr	r3, [pc, #12]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a02      	ldr	r2, [pc, #8]	; (8005da8 <HAL_RCC_OscConfig+0x270>)
 8005d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005da2:	6013      	str	r3, [r2, #0]
 8005da4:	e014      	b.n	8005dd0 <HAL_RCC_OscConfig+0x298>
 8005da6:	bf00      	nop
 8005da8:	40021000 	.word	0x40021000
 8005dac:	0800e05c 	.word	0x0800e05c
 8005db0:	20000000 	.word	0x20000000
 8005db4:	20000004 	.word	0x20000004
 8005db8:	4ba0      	ldr	r3, [pc, #640]	; (800603c <HAL_RCC_OscConfig+0x504>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a9f      	ldr	r2, [pc, #636]	; (800603c <HAL_RCC_OscConfig+0x504>)
 8005dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dc2:	6013      	str	r3, [r2, #0]
 8005dc4:	4b9d      	ldr	r3, [pc, #628]	; (800603c <HAL_RCC_OscConfig+0x504>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a9c      	ldr	r2, [pc, #624]	; (800603c <HAL_RCC_OscConfig+0x504>)
 8005dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d013      	beq.n	8005e00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd8:	f7fd fdc0 	bl	800395c <HAL_GetTick>
 8005ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005de0:	f7fd fdbc 	bl	800395c <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b64      	cmp	r3, #100	; 0x64
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e276      	b.n	80062e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005df2:	4b92      	ldr	r3, [pc, #584]	; (800603c <HAL_RCC_OscConfig+0x504>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d0f0      	beq.n	8005de0 <HAL_RCC_OscConfig+0x2a8>
 8005dfe:	e014      	b.n	8005e2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e00:	f7fd fdac 	bl	800395c <HAL_GetTick>
 8005e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e06:	e008      	b.n	8005e1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e08:	f7fd fda8 	bl	800395c <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b64      	cmp	r3, #100	; 0x64
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e262      	b.n	80062e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e1a:	4b88      	ldr	r3, [pc, #544]	; (800603c <HAL_RCC_OscConfig+0x504>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1f0      	bne.n	8005e08 <HAL_RCC_OscConfig+0x2d0>
 8005e26:	e000      	b.n	8005e2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d060      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	2b04      	cmp	r3, #4
 8005e3a:	d005      	beq.n	8005e48 <HAL_RCC_OscConfig+0x310>
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	2b0c      	cmp	r3, #12
 8005e40:	d119      	bne.n	8005e76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d116      	bne.n	8005e76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e48:	4b7c      	ldr	r3, [pc, #496]	; (800603c <HAL_RCC_OscConfig+0x504>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d005      	beq.n	8005e60 <HAL_RCC_OscConfig+0x328>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e23f      	b.n	80062e0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e60:	4b76      	ldr	r3, [pc, #472]	; (800603c <HAL_RCC_OscConfig+0x504>)
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	061b      	lsls	r3, r3, #24
 8005e6e:	4973      	ldr	r1, [pc, #460]	; (800603c <HAL_RCC_OscConfig+0x504>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e74:	e040      	b.n	8005ef8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d023      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e7e:	4b6f      	ldr	r3, [pc, #444]	; (800603c <HAL_RCC_OscConfig+0x504>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a6e      	ldr	r2, [pc, #440]	; (800603c <HAL_RCC_OscConfig+0x504>)
 8005e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e8a:	f7fd fd67 	bl	800395c <HAL_GetTick>
 8005e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e90:	e008      	b.n	8005ea4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e92:	f7fd fd63 	bl	800395c <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d901      	bls.n	8005ea4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e21d      	b.n	80062e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ea4:	4b65      	ldr	r3, [pc, #404]	; (800603c <HAL_RCC_OscConfig+0x504>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d0f0      	beq.n	8005e92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eb0:	4b62      	ldr	r3, [pc, #392]	; (800603c <HAL_RCC_OscConfig+0x504>)
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	061b      	lsls	r3, r3, #24
 8005ebe:	495f      	ldr	r1, [pc, #380]	; (800603c <HAL_RCC_OscConfig+0x504>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	604b      	str	r3, [r1, #4]
 8005ec4:	e018      	b.n	8005ef8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ec6:	4b5d      	ldr	r3, [pc, #372]	; (800603c <HAL_RCC_OscConfig+0x504>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a5c      	ldr	r2, [pc, #368]	; (800603c <HAL_RCC_OscConfig+0x504>)
 8005ecc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ed0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed2:	f7fd fd43 	bl	800395c <HAL_GetTick>
 8005ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ed8:	e008      	b.n	8005eec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005eda:	f7fd fd3f 	bl	800395c <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d901      	bls.n	8005eec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e1f9      	b.n	80062e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005eec:	4b53      	ldr	r3, [pc, #332]	; (800603c <HAL_RCC_OscConfig+0x504>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1f0      	bne.n	8005eda <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0308 	and.w	r3, r3, #8
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d03c      	beq.n	8005f7e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	695b      	ldr	r3, [r3, #20]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d01c      	beq.n	8005f46 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f0c:	4b4b      	ldr	r3, [pc, #300]	; (800603c <HAL_RCC_OscConfig+0x504>)
 8005f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f12:	4a4a      	ldr	r2, [pc, #296]	; (800603c <HAL_RCC_OscConfig+0x504>)
 8005f14:	f043 0301 	orr.w	r3, r3, #1
 8005f18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f1c:	f7fd fd1e 	bl	800395c <HAL_GetTick>
 8005f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f22:	e008      	b.n	8005f36 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f24:	f7fd fd1a 	bl	800395c <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d901      	bls.n	8005f36 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e1d4      	b.n	80062e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f36:	4b41      	ldr	r3, [pc, #260]	; (800603c <HAL_RCC_OscConfig+0x504>)
 8005f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f3c:	f003 0302 	and.w	r3, r3, #2
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d0ef      	beq.n	8005f24 <HAL_RCC_OscConfig+0x3ec>
 8005f44:	e01b      	b.n	8005f7e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f46:	4b3d      	ldr	r3, [pc, #244]	; (800603c <HAL_RCC_OscConfig+0x504>)
 8005f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f4c:	4a3b      	ldr	r2, [pc, #236]	; (800603c <HAL_RCC_OscConfig+0x504>)
 8005f4e:	f023 0301 	bic.w	r3, r3, #1
 8005f52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f56:	f7fd fd01 	bl	800395c <HAL_GetTick>
 8005f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f5c:	e008      	b.n	8005f70 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f5e:	f7fd fcfd 	bl	800395c <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d901      	bls.n	8005f70 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e1b7      	b.n	80062e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f70:	4b32      	ldr	r3, [pc, #200]	; (800603c <HAL_RCC_OscConfig+0x504>)
 8005f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1ef      	bne.n	8005f5e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0304 	and.w	r3, r3, #4
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f000 80a6 	beq.w	80060d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005f90:	4b2a      	ldr	r3, [pc, #168]	; (800603c <HAL_RCC_OscConfig+0x504>)
 8005f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10d      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f9c:	4b27      	ldr	r3, [pc, #156]	; (800603c <HAL_RCC_OscConfig+0x504>)
 8005f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fa0:	4a26      	ldr	r2, [pc, #152]	; (800603c <HAL_RCC_OscConfig+0x504>)
 8005fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fa6:	6593      	str	r3, [r2, #88]	; 0x58
 8005fa8:	4b24      	ldr	r3, [pc, #144]	; (800603c <HAL_RCC_OscConfig+0x504>)
 8005faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fb0:	60bb      	str	r3, [r7, #8]
 8005fb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fb8:	4b21      	ldr	r3, [pc, #132]	; (8006040 <HAL_RCC_OscConfig+0x508>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d118      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fc4:	4b1e      	ldr	r3, [pc, #120]	; (8006040 <HAL_RCC_OscConfig+0x508>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a1d      	ldr	r2, [pc, #116]	; (8006040 <HAL_RCC_OscConfig+0x508>)
 8005fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fd0:	f7fd fcc4 	bl	800395c <HAL_GetTick>
 8005fd4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fd6:	e008      	b.n	8005fea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fd8:	f7fd fcc0 	bl	800395c <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e17a      	b.n	80062e0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fea:	4b15      	ldr	r3, [pc, #84]	; (8006040 <HAL_RCC_OscConfig+0x508>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d0f0      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d108      	bne.n	8006010 <HAL_RCC_OscConfig+0x4d8>
 8005ffe:	4b0f      	ldr	r3, [pc, #60]	; (800603c <HAL_RCC_OscConfig+0x504>)
 8006000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006004:	4a0d      	ldr	r2, [pc, #52]	; (800603c <HAL_RCC_OscConfig+0x504>)
 8006006:	f043 0301 	orr.w	r3, r3, #1
 800600a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800600e:	e029      	b.n	8006064 <HAL_RCC_OscConfig+0x52c>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	2b05      	cmp	r3, #5
 8006016:	d115      	bne.n	8006044 <HAL_RCC_OscConfig+0x50c>
 8006018:	4b08      	ldr	r3, [pc, #32]	; (800603c <HAL_RCC_OscConfig+0x504>)
 800601a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800601e:	4a07      	ldr	r2, [pc, #28]	; (800603c <HAL_RCC_OscConfig+0x504>)
 8006020:	f043 0304 	orr.w	r3, r3, #4
 8006024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006028:	4b04      	ldr	r3, [pc, #16]	; (800603c <HAL_RCC_OscConfig+0x504>)
 800602a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800602e:	4a03      	ldr	r2, [pc, #12]	; (800603c <HAL_RCC_OscConfig+0x504>)
 8006030:	f043 0301 	orr.w	r3, r3, #1
 8006034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006038:	e014      	b.n	8006064 <HAL_RCC_OscConfig+0x52c>
 800603a:	bf00      	nop
 800603c:	40021000 	.word	0x40021000
 8006040:	40007000 	.word	0x40007000
 8006044:	4b9c      	ldr	r3, [pc, #624]	; (80062b8 <HAL_RCC_OscConfig+0x780>)
 8006046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800604a:	4a9b      	ldr	r2, [pc, #620]	; (80062b8 <HAL_RCC_OscConfig+0x780>)
 800604c:	f023 0301 	bic.w	r3, r3, #1
 8006050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006054:	4b98      	ldr	r3, [pc, #608]	; (80062b8 <HAL_RCC_OscConfig+0x780>)
 8006056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800605a:	4a97      	ldr	r2, [pc, #604]	; (80062b8 <HAL_RCC_OscConfig+0x780>)
 800605c:	f023 0304 	bic.w	r3, r3, #4
 8006060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d016      	beq.n	800609a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800606c:	f7fd fc76 	bl	800395c <HAL_GetTick>
 8006070:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006072:	e00a      	b.n	800608a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006074:	f7fd fc72 	bl	800395c <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006082:	4293      	cmp	r3, r2
 8006084:	d901      	bls.n	800608a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e12a      	b.n	80062e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800608a:	4b8b      	ldr	r3, [pc, #556]	; (80062b8 <HAL_RCC_OscConfig+0x780>)
 800608c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006090:	f003 0302 	and.w	r3, r3, #2
 8006094:	2b00      	cmp	r3, #0
 8006096:	d0ed      	beq.n	8006074 <HAL_RCC_OscConfig+0x53c>
 8006098:	e015      	b.n	80060c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800609a:	f7fd fc5f 	bl	800395c <HAL_GetTick>
 800609e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060a0:	e00a      	b.n	80060b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060a2:	f7fd fc5b 	bl	800395c <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d901      	bls.n	80060b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e113      	b.n	80062e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060b8:	4b7f      	ldr	r3, [pc, #508]	; (80062b8 <HAL_RCC_OscConfig+0x780>)
 80060ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1ed      	bne.n	80060a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060c6:	7ffb      	ldrb	r3, [r7, #31]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d105      	bne.n	80060d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060cc:	4b7a      	ldr	r3, [pc, #488]	; (80062b8 <HAL_RCC_OscConfig+0x780>)
 80060ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d0:	4a79      	ldr	r2, [pc, #484]	; (80062b8 <HAL_RCC_OscConfig+0x780>)
 80060d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060d6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 80fe 	beq.w	80062de <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	f040 80d0 	bne.w	800628c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80060ec:	4b72      	ldr	r3, [pc, #456]	; (80062b8 <HAL_RCC_OscConfig+0x780>)
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f003 0203 	and.w	r2, r3, #3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d130      	bne.n	8006162 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610a:	3b01      	subs	r3, #1
 800610c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800610e:	429a      	cmp	r2, r3
 8006110:	d127      	bne.n	8006162 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800611c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800611e:	429a      	cmp	r2, r3
 8006120:	d11f      	bne.n	8006162 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800612c:	2a07      	cmp	r2, #7
 800612e:	bf14      	ite	ne
 8006130:	2201      	movne	r2, #1
 8006132:	2200      	moveq	r2, #0
 8006134:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006136:	4293      	cmp	r3, r2
 8006138:	d113      	bne.n	8006162 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006144:	085b      	lsrs	r3, r3, #1
 8006146:	3b01      	subs	r3, #1
 8006148:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800614a:	429a      	cmp	r2, r3
 800614c:	d109      	bne.n	8006162 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006158:	085b      	lsrs	r3, r3, #1
 800615a:	3b01      	subs	r3, #1
 800615c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800615e:	429a      	cmp	r2, r3
 8006160:	d06e      	beq.n	8006240 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	2b0c      	cmp	r3, #12
 8006166:	d069      	beq.n	800623c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006168:	4b53      	ldr	r3, [pc, #332]	; (80062b8 <HAL_RCC_OscConfig+0x780>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d105      	bne.n	8006180 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006174:	4b50      	ldr	r3, [pc, #320]	; (80062b8 <HAL_RCC_OscConfig+0x780>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d001      	beq.n	8006184 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e0ad      	b.n	80062e0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006184:	4b4c      	ldr	r3, [pc, #304]	; (80062b8 <HAL_RCC_OscConfig+0x780>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a4b      	ldr	r2, [pc, #300]	; (80062b8 <HAL_RCC_OscConfig+0x780>)
 800618a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800618e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006190:	f7fd fbe4 	bl	800395c <HAL_GetTick>
 8006194:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006196:	e008      	b.n	80061aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006198:	f7fd fbe0 	bl	800395c <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e09a      	b.n	80062e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061aa:	4b43      	ldr	r3, [pc, #268]	; (80062b8 <HAL_RCC_OscConfig+0x780>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1f0      	bne.n	8006198 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061b6:	4b40      	ldr	r3, [pc, #256]	; (80062b8 <HAL_RCC_OscConfig+0x780>)
 80061b8:	68da      	ldr	r2, [r3, #12]
 80061ba:	4b40      	ldr	r3, [pc, #256]	; (80062bc <HAL_RCC_OscConfig+0x784>)
 80061bc:	4013      	ands	r3, r2
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80061c6:	3a01      	subs	r2, #1
 80061c8:	0112      	lsls	r2, r2, #4
 80061ca:	4311      	orrs	r1, r2
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80061d0:	0212      	lsls	r2, r2, #8
 80061d2:	4311      	orrs	r1, r2
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80061d8:	0852      	lsrs	r2, r2, #1
 80061da:	3a01      	subs	r2, #1
 80061dc:	0552      	lsls	r2, r2, #21
 80061de:	4311      	orrs	r1, r2
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80061e4:	0852      	lsrs	r2, r2, #1
 80061e6:	3a01      	subs	r2, #1
 80061e8:	0652      	lsls	r2, r2, #25
 80061ea:	4311      	orrs	r1, r2
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80061f0:	0912      	lsrs	r2, r2, #4
 80061f2:	0452      	lsls	r2, r2, #17
 80061f4:	430a      	orrs	r2, r1
 80061f6:	4930      	ldr	r1, [pc, #192]	; (80062b8 <HAL_RCC_OscConfig+0x780>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80061fc:	4b2e      	ldr	r3, [pc, #184]	; (80062b8 <HAL_RCC_OscConfig+0x780>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a2d      	ldr	r2, [pc, #180]	; (80062b8 <HAL_RCC_OscConfig+0x780>)
 8006202:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006206:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006208:	4b2b      	ldr	r3, [pc, #172]	; (80062b8 <HAL_RCC_OscConfig+0x780>)
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	4a2a      	ldr	r2, [pc, #168]	; (80062b8 <HAL_RCC_OscConfig+0x780>)
 800620e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006212:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006214:	f7fd fba2 	bl	800395c <HAL_GetTick>
 8006218:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800621a:	e008      	b.n	800622e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800621c:	f7fd fb9e 	bl	800395c <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b02      	cmp	r3, #2
 8006228:	d901      	bls.n	800622e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e058      	b.n	80062e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800622e:	4b22      	ldr	r3, [pc, #136]	; (80062b8 <HAL_RCC_OscConfig+0x780>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d0f0      	beq.n	800621c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800623a:	e050      	b.n	80062de <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e04f      	b.n	80062e0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006240:	4b1d      	ldr	r3, [pc, #116]	; (80062b8 <HAL_RCC_OscConfig+0x780>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d148      	bne.n	80062de <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800624c:	4b1a      	ldr	r3, [pc, #104]	; (80062b8 <HAL_RCC_OscConfig+0x780>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a19      	ldr	r2, [pc, #100]	; (80062b8 <HAL_RCC_OscConfig+0x780>)
 8006252:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006256:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006258:	4b17      	ldr	r3, [pc, #92]	; (80062b8 <HAL_RCC_OscConfig+0x780>)
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	4a16      	ldr	r2, [pc, #88]	; (80062b8 <HAL_RCC_OscConfig+0x780>)
 800625e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006262:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006264:	f7fd fb7a 	bl	800395c <HAL_GetTick>
 8006268:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800626a:	e008      	b.n	800627e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800626c:	f7fd fb76 	bl	800395c <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b02      	cmp	r3, #2
 8006278:	d901      	bls.n	800627e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e030      	b.n	80062e0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800627e:	4b0e      	ldr	r3, [pc, #56]	; (80062b8 <HAL_RCC_OscConfig+0x780>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d0f0      	beq.n	800626c <HAL_RCC_OscConfig+0x734>
 800628a:	e028      	b.n	80062de <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	2b0c      	cmp	r3, #12
 8006290:	d023      	beq.n	80062da <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006292:	4b09      	ldr	r3, [pc, #36]	; (80062b8 <HAL_RCC_OscConfig+0x780>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a08      	ldr	r2, [pc, #32]	; (80062b8 <HAL_RCC_OscConfig+0x780>)
 8006298:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800629c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800629e:	f7fd fb5d 	bl	800395c <HAL_GetTick>
 80062a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062a4:	e00c      	b.n	80062c0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062a6:	f7fd fb59 	bl	800395c <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d905      	bls.n	80062c0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e013      	b.n	80062e0 <HAL_RCC_OscConfig+0x7a8>
 80062b8:	40021000 	.word	0x40021000
 80062bc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062c0:	4b09      	ldr	r3, [pc, #36]	; (80062e8 <HAL_RCC_OscConfig+0x7b0>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1ec      	bne.n	80062a6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80062cc:	4b06      	ldr	r3, [pc, #24]	; (80062e8 <HAL_RCC_OscConfig+0x7b0>)
 80062ce:	68da      	ldr	r2, [r3, #12]
 80062d0:	4905      	ldr	r1, [pc, #20]	; (80062e8 <HAL_RCC_OscConfig+0x7b0>)
 80062d2:	4b06      	ldr	r3, [pc, #24]	; (80062ec <HAL_RCC_OscConfig+0x7b4>)
 80062d4:	4013      	ands	r3, r2
 80062d6:	60cb      	str	r3, [r1, #12]
 80062d8:	e001      	b.n	80062de <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e000      	b.n	80062e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3720      	adds	r7, #32
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	40021000 	.word	0x40021000
 80062ec:	feeefffc 	.word	0xfeeefffc

080062f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e0e7      	b.n	80064d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006304:	4b75      	ldr	r3, [pc, #468]	; (80064dc <HAL_RCC_ClockConfig+0x1ec>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0307 	and.w	r3, r3, #7
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	429a      	cmp	r2, r3
 8006310:	d910      	bls.n	8006334 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006312:	4b72      	ldr	r3, [pc, #456]	; (80064dc <HAL_RCC_ClockConfig+0x1ec>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f023 0207 	bic.w	r2, r3, #7
 800631a:	4970      	ldr	r1, [pc, #448]	; (80064dc <HAL_RCC_ClockConfig+0x1ec>)
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	4313      	orrs	r3, r2
 8006320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006322:	4b6e      	ldr	r3, [pc, #440]	; (80064dc <HAL_RCC_ClockConfig+0x1ec>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0307 	and.w	r3, r3, #7
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	429a      	cmp	r2, r3
 800632e:	d001      	beq.n	8006334 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e0cf      	b.n	80064d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d010      	beq.n	8006362 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689a      	ldr	r2, [r3, #8]
 8006344:	4b66      	ldr	r3, [pc, #408]	; (80064e0 <HAL_RCC_ClockConfig+0x1f0>)
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800634c:	429a      	cmp	r2, r3
 800634e:	d908      	bls.n	8006362 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006350:	4b63      	ldr	r3, [pc, #396]	; (80064e0 <HAL_RCC_ClockConfig+0x1f0>)
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	4960      	ldr	r1, [pc, #384]	; (80064e0 <HAL_RCC_ClockConfig+0x1f0>)
 800635e:	4313      	orrs	r3, r2
 8006360:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d04c      	beq.n	8006408 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	2b03      	cmp	r3, #3
 8006374:	d107      	bne.n	8006386 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006376:	4b5a      	ldr	r3, [pc, #360]	; (80064e0 <HAL_RCC_ClockConfig+0x1f0>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d121      	bne.n	80063c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e0a6      	b.n	80064d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	2b02      	cmp	r3, #2
 800638c:	d107      	bne.n	800639e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800638e:	4b54      	ldr	r3, [pc, #336]	; (80064e0 <HAL_RCC_ClockConfig+0x1f0>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d115      	bne.n	80063c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e09a      	b.n	80064d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d107      	bne.n	80063b6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80063a6:	4b4e      	ldr	r3, [pc, #312]	; (80064e0 <HAL_RCC_ClockConfig+0x1f0>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d109      	bne.n	80063c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e08e      	b.n	80064d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063b6:	4b4a      	ldr	r3, [pc, #296]	; (80064e0 <HAL_RCC_ClockConfig+0x1f0>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e086      	b.n	80064d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80063c6:	4b46      	ldr	r3, [pc, #280]	; (80064e0 <HAL_RCC_ClockConfig+0x1f0>)
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f023 0203 	bic.w	r2, r3, #3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	4943      	ldr	r1, [pc, #268]	; (80064e0 <HAL_RCC_ClockConfig+0x1f0>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063d8:	f7fd fac0 	bl	800395c <HAL_GetTick>
 80063dc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063de:	e00a      	b.n	80063f6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063e0:	f7fd fabc 	bl	800395c <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d901      	bls.n	80063f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e06e      	b.n	80064d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063f6:	4b3a      	ldr	r3, [pc, #232]	; (80064e0 <HAL_RCC_ClockConfig+0x1f0>)
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f003 020c 	and.w	r2, r3, #12
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	429a      	cmp	r2, r3
 8006406:	d1eb      	bne.n	80063e0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d010      	beq.n	8006436 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	689a      	ldr	r2, [r3, #8]
 8006418:	4b31      	ldr	r3, [pc, #196]	; (80064e0 <HAL_RCC_ClockConfig+0x1f0>)
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006420:	429a      	cmp	r2, r3
 8006422:	d208      	bcs.n	8006436 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006424:	4b2e      	ldr	r3, [pc, #184]	; (80064e0 <HAL_RCC_ClockConfig+0x1f0>)
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	492b      	ldr	r1, [pc, #172]	; (80064e0 <HAL_RCC_ClockConfig+0x1f0>)
 8006432:	4313      	orrs	r3, r2
 8006434:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006436:	4b29      	ldr	r3, [pc, #164]	; (80064dc <HAL_RCC_ClockConfig+0x1ec>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0307 	and.w	r3, r3, #7
 800643e:	683a      	ldr	r2, [r7, #0]
 8006440:	429a      	cmp	r2, r3
 8006442:	d210      	bcs.n	8006466 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006444:	4b25      	ldr	r3, [pc, #148]	; (80064dc <HAL_RCC_ClockConfig+0x1ec>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f023 0207 	bic.w	r2, r3, #7
 800644c:	4923      	ldr	r1, [pc, #140]	; (80064dc <HAL_RCC_ClockConfig+0x1ec>)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	4313      	orrs	r3, r2
 8006452:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006454:	4b21      	ldr	r3, [pc, #132]	; (80064dc <HAL_RCC_ClockConfig+0x1ec>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0307 	and.w	r3, r3, #7
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	429a      	cmp	r2, r3
 8006460:	d001      	beq.n	8006466 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e036      	b.n	80064d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0304 	and.w	r3, r3, #4
 800646e:	2b00      	cmp	r3, #0
 8006470:	d008      	beq.n	8006484 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006472:	4b1b      	ldr	r3, [pc, #108]	; (80064e0 <HAL_RCC_ClockConfig+0x1f0>)
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	4918      	ldr	r1, [pc, #96]	; (80064e0 <HAL_RCC_ClockConfig+0x1f0>)
 8006480:	4313      	orrs	r3, r2
 8006482:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0308 	and.w	r3, r3, #8
 800648c:	2b00      	cmp	r3, #0
 800648e:	d009      	beq.n	80064a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006490:	4b13      	ldr	r3, [pc, #76]	; (80064e0 <HAL_RCC_ClockConfig+0x1f0>)
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	00db      	lsls	r3, r3, #3
 800649e:	4910      	ldr	r1, [pc, #64]	; (80064e0 <HAL_RCC_ClockConfig+0x1f0>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80064a4:	f000 f824 	bl	80064f0 <HAL_RCC_GetSysClockFreq>
 80064a8:	4602      	mov	r2, r0
 80064aa:	4b0d      	ldr	r3, [pc, #52]	; (80064e0 <HAL_RCC_ClockConfig+0x1f0>)
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	091b      	lsrs	r3, r3, #4
 80064b0:	f003 030f 	and.w	r3, r3, #15
 80064b4:	490b      	ldr	r1, [pc, #44]	; (80064e4 <HAL_RCC_ClockConfig+0x1f4>)
 80064b6:	5ccb      	ldrb	r3, [r1, r3]
 80064b8:	f003 031f 	and.w	r3, r3, #31
 80064bc:	fa22 f303 	lsr.w	r3, r2, r3
 80064c0:	4a09      	ldr	r2, [pc, #36]	; (80064e8 <HAL_RCC_ClockConfig+0x1f8>)
 80064c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80064c4:	4b09      	ldr	r3, [pc, #36]	; (80064ec <HAL_RCC_ClockConfig+0x1fc>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7fd f9f7 	bl	80038bc <HAL_InitTick>
 80064ce:	4603      	mov	r3, r0
 80064d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80064d2:	7afb      	ldrb	r3, [r7, #11]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	40022000 	.word	0x40022000
 80064e0:	40021000 	.word	0x40021000
 80064e4:	0800e05c 	.word	0x0800e05c
 80064e8:	20000000 	.word	0x20000000
 80064ec:	20000004 	.word	0x20000004

080064f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b089      	sub	sp, #36	; 0x24
 80064f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80064f6:	2300      	movs	r3, #0
 80064f8:	61fb      	str	r3, [r7, #28]
 80064fa:	2300      	movs	r3, #0
 80064fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064fe:	4b3e      	ldr	r3, [pc, #248]	; (80065f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f003 030c 	and.w	r3, r3, #12
 8006506:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006508:	4b3b      	ldr	r3, [pc, #236]	; (80065f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f003 0303 	and.w	r3, r3, #3
 8006510:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d005      	beq.n	8006524 <HAL_RCC_GetSysClockFreq+0x34>
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	2b0c      	cmp	r3, #12
 800651c:	d121      	bne.n	8006562 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d11e      	bne.n	8006562 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006524:	4b34      	ldr	r3, [pc, #208]	; (80065f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0308 	and.w	r3, r3, #8
 800652c:	2b00      	cmp	r3, #0
 800652e:	d107      	bne.n	8006540 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006530:	4b31      	ldr	r3, [pc, #196]	; (80065f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006536:	0a1b      	lsrs	r3, r3, #8
 8006538:	f003 030f 	and.w	r3, r3, #15
 800653c:	61fb      	str	r3, [r7, #28]
 800653e:	e005      	b.n	800654c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006540:	4b2d      	ldr	r3, [pc, #180]	; (80065f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	091b      	lsrs	r3, r3, #4
 8006546:	f003 030f 	and.w	r3, r3, #15
 800654a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800654c:	4a2b      	ldr	r2, [pc, #172]	; (80065fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006554:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10d      	bne.n	8006578 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006560:	e00a      	b.n	8006578 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	2b04      	cmp	r3, #4
 8006566:	d102      	bne.n	800656e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006568:	4b25      	ldr	r3, [pc, #148]	; (8006600 <HAL_RCC_GetSysClockFreq+0x110>)
 800656a:	61bb      	str	r3, [r7, #24]
 800656c:	e004      	b.n	8006578 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	2b08      	cmp	r3, #8
 8006572:	d101      	bne.n	8006578 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006574:	4b23      	ldr	r3, [pc, #140]	; (8006604 <HAL_RCC_GetSysClockFreq+0x114>)
 8006576:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	2b0c      	cmp	r3, #12
 800657c:	d134      	bne.n	80065e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800657e:	4b1e      	ldr	r3, [pc, #120]	; (80065f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	f003 0303 	and.w	r3, r3, #3
 8006586:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	2b02      	cmp	r3, #2
 800658c:	d003      	beq.n	8006596 <HAL_RCC_GetSysClockFreq+0xa6>
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	2b03      	cmp	r3, #3
 8006592:	d003      	beq.n	800659c <HAL_RCC_GetSysClockFreq+0xac>
 8006594:	e005      	b.n	80065a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006596:	4b1a      	ldr	r3, [pc, #104]	; (8006600 <HAL_RCC_GetSysClockFreq+0x110>)
 8006598:	617b      	str	r3, [r7, #20]
      break;
 800659a:	e005      	b.n	80065a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800659c:	4b19      	ldr	r3, [pc, #100]	; (8006604 <HAL_RCC_GetSysClockFreq+0x114>)
 800659e:	617b      	str	r3, [r7, #20]
      break;
 80065a0:	e002      	b.n	80065a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	617b      	str	r3, [r7, #20]
      break;
 80065a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80065a8:	4b13      	ldr	r3, [pc, #76]	; (80065f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	091b      	lsrs	r3, r3, #4
 80065ae:	f003 0307 	and.w	r3, r3, #7
 80065b2:	3301      	adds	r3, #1
 80065b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80065b6:	4b10      	ldr	r3, [pc, #64]	; (80065f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	0a1b      	lsrs	r3, r3, #8
 80065bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	fb03 f202 	mul.w	r2, r3, r2
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80065ce:	4b0a      	ldr	r3, [pc, #40]	; (80065f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	0e5b      	lsrs	r3, r3, #25
 80065d4:	f003 0303 	and.w	r3, r3, #3
 80065d8:	3301      	adds	r3, #1
 80065da:	005b      	lsls	r3, r3, #1
 80065dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80065e8:	69bb      	ldr	r3, [r7, #24]
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3724      	adds	r7, #36	; 0x24
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	40021000 	.word	0x40021000
 80065fc:	0800e074 	.word	0x0800e074
 8006600:	00f42400 	.word	0x00f42400
 8006604:	007a1200 	.word	0x007a1200

08006608 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006608:	b480      	push	{r7}
 800660a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800660c:	4b03      	ldr	r3, [pc, #12]	; (800661c <HAL_RCC_GetHCLKFreq+0x14>)
 800660e:	681b      	ldr	r3, [r3, #0]
}
 8006610:	4618      	mov	r0, r3
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	20000000 	.word	0x20000000

08006620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006624:	f7ff fff0 	bl	8006608 <HAL_RCC_GetHCLKFreq>
 8006628:	4602      	mov	r2, r0
 800662a:	4b06      	ldr	r3, [pc, #24]	; (8006644 <HAL_RCC_GetPCLK1Freq+0x24>)
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	0a1b      	lsrs	r3, r3, #8
 8006630:	f003 0307 	and.w	r3, r3, #7
 8006634:	4904      	ldr	r1, [pc, #16]	; (8006648 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006636:	5ccb      	ldrb	r3, [r1, r3]
 8006638:	f003 031f 	and.w	r3, r3, #31
 800663c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006640:	4618      	mov	r0, r3
 8006642:	bd80      	pop	{r7, pc}
 8006644:	40021000 	.word	0x40021000
 8006648:	0800e06c 	.word	0x0800e06c

0800664c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006650:	f7ff ffda 	bl	8006608 <HAL_RCC_GetHCLKFreq>
 8006654:	4602      	mov	r2, r0
 8006656:	4b06      	ldr	r3, [pc, #24]	; (8006670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	0adb      	lsrs	r3, r3, #11
 800665c:	f003 0307 	and.w	r3, r3, #7
 8006660:	4904      	ldr	r1, [pc, #16]	; (8006674 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006662:	5ccb      	ldrb	r3, [r1, r3]
 8006664:	f003 031f 	and.w	r3, r3, #31
 8006668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800666c:	4618      	mov	r0, r3
 800666e:	bd80      	pop	{r7, pc}
 8006670:	40021000 	.word	0x40021000
 8006674:	0800e06c 	.word	0x0800e06c

08006678 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006680:	2300      	movs	r3, #0
 8006682:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006684:	4b2a      	ldr	r3, [pc, #168]	; (8006730 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d003      	beq.n	8006698 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006690:	f7ff f9ee 	bl	8005a70 <HAL_PWREx_GetVoltageRange>
 8006694:	6178      	str	r0, [r7, #20]
 8006696:	e014      	b.n	80066c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006698:	4b25      	ldr	r3, [pc, #148]	; (8006730 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800669a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800669c:	4a24      	ldr	r2, [pc, #144]	; (8006730 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800669e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066a2:	6593      	str	r3, [r2, #88]	; 0x58
 80066a4:	4b22      	ldr	r3, [pc, #136]	; (8006730 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80066a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ac:	60fb      	str	r3, [r7, #12]
 80066ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80066b0:	f7ff f9de 	bl	8005a70 <HAL_PWREx_GetVoltageRange>
 80066b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80066b6:	4b1e      	ldr	r3, [pc, #120]	; (8006730 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80066b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ba:	4a1d      	ldr	r2, [pc, #116]	; (8006730 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80066bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066c8:	d10b      	bne.n	80066e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2b80      	cmp	r3, #128	; 0x80
 80066ce:	d919      	bls.n	8006704 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2ba0      	cmp	r3, #160	; 0xa0
 80066d4:	d902      	bls.n	80066dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80066d6:	2302      	movs	r3, #2
 80066d8:	613b      	str	r3, [r7, #16]
 80066da:	e013      	b.n	8006704 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80066dc:	2301      	movs	r3, #1
 80066de:	613b      	str	r3, [r7, #16]
 80066e0:	e010      	b.n	8006704 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b80      	cmp	r3, #128	; 0x80
 80066e6:	d902      	bls.n	80066ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80066e8:	2303      	movs	r3, #3
 80066ea:	613b      	str	r3, [r7, #16]
 80066ec:	e00a      	b.n	8006704 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2b80      	cmp	r3, #128	; 0x80
 80066f2:	d102      	bne.n	80066fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80066f4:	2302      	movs	r3, #2
 80066f6:	613b      	str	r3, [r7, #16]
 80066f8:	e004      	b.n	8006704 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b70      	cmp	r3, #112	; 0x70
 80066fe:	d101      	bne.n	8006704 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006700:	2301      	movs	r3, #1
 8006702:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006704:	4b0b      	ldr	r3, [pc, #44]	; (8006734 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f023 0207 	bic.w	r2, r3, #7
 800670c:	4909      	ldr	r1, [pc, #36]	; (8006734 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	4313      	orrs	r3, r2
 8006712:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006714:	4b07      	ldr	r3, [pc, #28]	; (8006734 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0307 	and.w	r3, r3, #7
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	429a      	cmp	r2, r3
 8006720:	d001      	beq.n	8006726 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e000      	b.n	8006728 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3718      	adds	r7, #24
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	40021000 	.word	0x40021000
 8006734:	40022000 	.word	0x40022000

08006738 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006740:	2300      	movs	r3, #0
 8006742:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006744:	2300      	movs	r3, #0
 8006746:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006750:	2b00      	cmp	r3, #0
 8006752:	d041      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006758:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800675c:	d02a      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800675e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006762:	d824      	bhi.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006764:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006768:	d008      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800676a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800676e:	d81e      	bhi.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00a      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006774:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006778:	d010      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800677a:	e018      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800677c:	4b86      	ldr	r3, [pc, #536]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	4a85      	ldr	r2, [pc, #532]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006786:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006788:	e015      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	3304      	adds	r3, #4
 800678e:	2100      	movs	r1, #0
 8006790:	4618      	mov	r0, r3
 8006792:	f000 fabb 	bl	8006d0c <RCCEx_PLLSAI1_Config>
 8006796:	4603      	mov	r3, r0
 8006798:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800679a:	e00c      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	3320      	adds	r3, #32
 80067a0:	2100      	movs	r1, #0
 80067a2:	4618      	mov	r0, r3
 80067a4:	f000 fba6 	bl	8006ef4 <RCCEx_PLLSAI2_Config>
 80067a8:	4603      	mov	r3, r0
 80067aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80067ac:	e003      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	74fb      	strb	r3, [r7, #19]
      break;
 80067b2:	e000      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80067b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067b6:	7cfb      	ldrb	r3, [r7, #19]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10b      	bne.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80067bc:	4b76      	ldr	r3, [pc, #472]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067ca:	4973      	ldr	r1, [pc, #460]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067cc:	4313      	orrs	r3, r2
 80067ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80067d2:	e001      	b.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d4:	7cfb      	ldrb	r3, [r7, #19]
 80067d6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d041      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80067ec:	d02a      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80067ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80067f2:	d824      	bhi.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80067f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067f8:	d008      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80067fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067fe:	d81e      	bhi.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00a      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006804:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006808:	d010      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800680a:	e018      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800680c:	4b62      	ldr	r3, [pc, #392]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	4a61      	ldr	r2, [pc, #388]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006816:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006818:	e015      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	3304      	adds	r3, #4
 800681e:	2100      	movs	r1, #0
 8006820:	4618      	mov	r0, r3
 8006822:	f000 fa73 	bl	8006d0c <RCCEx_PLLSAI1_Config>
 8006826:	4603      	mov	r3, r0
 8006828:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800682a:	e00c      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	3320      	adds	r3, #32
 8006830:	2100      	movs	r1, #0
 8006832:	4618      	mov	r0, r3
 8006834:	f000 fb5e 	bl	8006ef4 <RCCEx_PLLSAI2_Config>
 8006838:	4603      	mov	r3, r0
 800683a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800683c:	e003      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	74fb      	strb	r3, [r7, #19]
      break;
 8006842:	e000      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006844:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006846:	7cfb      	ldrb	r3, [r7, #19]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d10b      	bne.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800684c:	4b52      	ldr	r3, [pc, #328]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800684e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006852:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800685a:	494f      	ldr	r1, [pc, #316]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800685c:	4313      	orrs	r3, r2
 800685e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006862:	e001      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006864:	7cfb      	ldrb	r3, [r7, #19]
 8006866:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 80a0 	beq.w	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006876:	2300      	movs	r3, #0
 8006878:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800687a:	4b47      	ldr	r3, [pc, #284]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800687c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800687e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d101      	bne.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006886:	2301      	movs	r3, #1
 8006888:	e000      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800688a:	2300      	movs	r3, #0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00d      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006890:	4b41      	ldr	r3, [pc, #260]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006894:	4a40      	ldr	r2, [pc, #256]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800689a:	6593      	str	r3, [r2, #88]	; 0x58
 800689c:	4b3e      	ldr	r3, [pc, #248]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800689e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068a4:	60bb      	str	r3, [r7, #8]
 80068a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068a8:	2301      	movs	r3, #1
 80068aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068ac:	4b3b      	ldr	r3, [pc, #236]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a3a      	ldr	r2, [pc, #232]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80068b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068b8:	f7fd f850 	bl	800395c <HAL_GetTick>
 80068bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80068be:	e009      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068c0:	f7fd f84c 	bl	800395c <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d902      	bls.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	74fb      	strb	r3, [r7, #19]
        break;
 80068d2:	e005      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80068d4:	4b31      	ldr	r3, [pc, #196]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d0ef      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80068e0:	7cfb      	ldrb	r3, [r7, #19]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d15c      	bne.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80068e6:	4b2c      	ldr	r3, [pc, #176]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d01f      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	429a      	cmp	r2, r3
 8006902:	d019      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006904:	4b24      	ldr	r3, [pc, #144]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800690a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800690e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006910:	4b21      	ldr	r3, [pc, #132]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006916:	4a20      	ldr	r2, [pc, #128]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800691c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006920:	4b1d      	ldr	r3, [pc, #116]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006926:	4a1c      	ldr	r2, [pc, #112]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006928:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800692c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006930:	4a19      	ldr	r2, [pc, #100]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b00      	cmp	r3, #0
 8006940:	d016      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006942:	f7fd f80b 	bl	800395c <HAL_GetTick>
 8006946:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006948:	e00b      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800694a:	f7fd f807 	bl	800395c <HAL_GetTick>
 800694e:	4602      	mov	r2, r0
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	f241 3288 	movw	r2, #5000	; 0x1388
 8006958:	4293      	cmp	r3, r2
 800695a:	d902      	bls.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	74fb      	strb	r3, [r7, #19]
            break;
 8006960:	e006      	b.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006962:	4b0d      	ldr	r3, [pc, #52]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006968:	f003 0302 	and.w	r3, r3, #2
 800696c:	2b00      	cmp	r3, #0
 800696e:	d0ec      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006970:	7cfb      	ldrb	r3, [r7, #19]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10c      	bne.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006976:	4b08      	ldr	r3, [pc, #32]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800697c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006986:	4904      	ldr	r1, [pc, #16]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006988:	4313      	orrs	r3, r2
 800698a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800698e:	e009      	b.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006990:	7cfb      	ldrb	r3, [r7, #19]
 8006992:	74bb      	strb	r3, [r7, #18]
 8006994:	e006      	b.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006996:	bf00      	nop
 8006998:	40021000 	.word	0x40021000
 800699c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069a0:	7cfb      	ldrb	r3, [r7, #19]
 80069a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069a4:	7c7b      	ldrb	r3, [r7, #17]
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d105      	bne.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069aa:	4b9e      	ldr	r3, [pc, #632]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ae:	4a9d      	ldr	r2, [pc, #628]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00a      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80069c2:	4b98      	ldr	r3, [pc, #608]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069c8:	f023 0203 	bic.w	r2, r3, #3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d0:	4994      	ldr	r1, [pc, #592]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069d2:	4313      	orrs	r3, r2
 80069d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00a      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80069e4:	4b8f      	ldr	r3, [pc, #572]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ea:	f023 020c 	bic.w	r2, r3, #12
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f2:	498c      	ldr	r1, [pc, #560]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069f4:	4313      	orrs	r3, r2
 80069f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0304 	and.w	r3, r3, #4
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00a      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006a06:	4b87      	ldr	r3, [pc, #540]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a14:	4983      	ldr	r1, [pc, #524]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0308 	and.w	r3, r3, #8
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00a      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a28:	4b7e      	ldr	r3, [pc, #504]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a36:	497b      	ldr	r1, [pc, #492]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0310 	and.w	r3, r3, #16
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00a      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006a4a:	4b76      	ldr	r3, [pc, #472]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a58:	4972      	ldr	r1, [pc, #456]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0320 	and.w	r3, r3, #32
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00a      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a6c:	4b6d      	ldr	r3, [pc, #436]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a7a:	496a      	ldr	r1, [pc, #424]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00a      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a8e:	4b65      	ldr	r3, [pc, #404]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a9c:	4961      	ldr	r1, [pc, #388]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00a      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006ab0:	4b5c      	ldr	r3, [pc, #368]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006abe:	4959      	ldr	r1, [pc, #356]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00a      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ad2:	4b54      	ldr	r3, [pc, #336]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ae0:	4950      	ldr	r1, [pc, #320]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00a      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006af4:	4b4b      	ldr	r3, [pc, #300]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006afa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b02:	4948      	ldr	r1, [pc, #288]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b04:	4313      	orrs	r3, r2
 8006b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00a      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b16:	4b43      	ldr	r3, [pc, #268]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b24:	493f      	ldr	r1, [pc, #252]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d028      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b38:	4b3a      	ldr	r3, [pc, #232]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b46:	4937      	ldr	r1, [pc, #220]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b56:	d106      	bne.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b58:	4b32      	ldr	r3, [pc, #200]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	4a31      	ldr	r2, [pc, #196]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b62:	60d3      	str	r3, [r2, #12]
 8006b64:	e011      	b.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b6e:	d10c      	bne.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	3304      	adds	r3, #4
 8006b74:	2101      	movs	r1, #1
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 f8c8 	bl	8006d0c <RCCEx_PLLSAI1_Config>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006b80:	7cfb      	ldrb	r3, [r7, #19]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006b86:	7cfb      	ldrb	r3, [r7, #19]
 8006b88:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d028      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006b96:	4b23      	ldr	r3, [pc, #140]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba4:	491f      	ldr	r1, [pc, #124]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bb4:	d106      	bne.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bb6:	4b1b      	ldr	r3, [pc, #108]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	4a1a      	ldr	r2, [pc, #104]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bc0:	60d3      	str	r3, [r2, #12]
 8006bc2:	e011      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bcc:	d10c      	bne.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	3304      	adds	r3, #4
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f000 f899 	bl	8006d0c <RCCEx_PLLSAI1_Config>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006bde:	7cfb      	ldrb	r3, [r7, #19]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d001      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006be4:	7cfb      	ldrb	r3, [r7, #19]
 8006be6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d02b      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006bf4:	4b0b      	ldr	r3, [pc, #44]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bfa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c02:	4908      	ldr	r1, [pc, #32]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c12:	d109      	bne.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c14:	4b03      	ldr	r3, [pc, #12]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	4a02      	ldr	r2, [pc, #8]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c1e:	60d3      	str	r3, [r2, #12]
 8006c20:	e014      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006c22:	bf00      	nop
 8006c24:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c30:	d10c      	bne.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	3304      	adds	r3, #4
 8006c36:	2101      	movs	r1, #1
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f000 f867 	bl	8006d0c <RCCEx_PLLSAI1_Config>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c42:	7cfb      	ldrb	r3, [r7, #19]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006c48:	7cfb      	ldrb	r3, [r7, #19]
 8006c4a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d02f      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c58:	4b2b      	ldr	r3, [pc, #172]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c66:	4928      	ldr	r1, [pc, #160]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c76:	d10d      	bne.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	3304      	adds	r3, #4
 8006c7c:	2102      	movs	r1, #2
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 f844 	bl	8006d0c <RCCEx_PLLSAI1_Config>
 8006c84:	4603      	mov	r3, r0
 8006c86:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c88:	7cfb      	ldrb	r3, [r7, #19]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d014      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006c8e:	7cfb      	ldrb	r3, [r7, #19]
 8006c90:	74bb      	strb	r3, [r7, #18]
 8006c92:	e011      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c9c:	d10c      	bne.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	3320      	adds	r3, #32
 8006ca2:	2102      	movs	r1, #2
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f000 f925 	bl	8006ef4 <RCCEx_PLLSAI2_Config>
 8006caa:	4603      	mov	r3, r0
 8006cac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006cae:	7cfb      	ldrb	r3, [r7, #19]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d001      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006cb4:	7cfb      	ldrb	r3, [r7, #19]
 8006cb6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00a      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006cc4:	4b10      	ldr	r3, [pc, #64]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cd2:	490d      	ldr	r1, [pc, #52]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00b      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006ce6:	4b08      	ldr	r3, [pc, #32]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cf6:	4904      	ldr	r1, [pc, #16]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006cfe:	7cbb      	ldrb	r3, [r7, #18]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3718      	adds	r7, #24
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	40021000 	.word	0x40021000

08006d0c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d16:	2300      	movs	r3, #0
 8006d18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006d1a:	4b75      	ldr	r3, [pc, #468]	; (8006ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	f003 0303 	and.w	r3, r3, #3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d018      	beq.n	8006d58 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006d26:	4b72      	ldr	r3, [pc, #456]	; (8006ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	f003 0203 	and.w	r2, r3, #3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d10d      	bne.n	8006d52 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
       ||
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d009      	beq.n	8006d52 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006d3e:	4b6c      	ldr	r3, [pc, #432]	; (8006ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	091b      	lsrs	r3, r3, #4
 8006d44:	f003 0307 	and.w	r3, r3, #7
 8006d48:	1c5a      	adds	r2, r3, #1
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	685b      	ldr	r3, [r3, #4]
       ||
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d047      	beq.n	8006de2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	73fb      	strb	r3, [r7, #15]
 8006d56:	e044      	b.n	8006de2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2b03      	cmp	r3, #3
 8006d5e:	d018      	beq.n	8006d92 <RCCEx_PLLSAI1_Config+0x86>
 8006d60:	2b03      	cmp	r3, #3
 8006d62:	d825      	bhi.n	8006db0 <RCCEx_PLLSAI1_Config+0xa4>
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d002      	beq.n	8006d6e <RCCEx_PLLSAI1_Config+0x62>
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d009      	beq.n	8006d80 <RCCEx_PLLSAI1_Config+0x74>
 8006d6c:	e020      	b.n	8006db0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006d6e:	4b60      	ldr	r3, [pc, #384]	; (8006ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0302 	and.w	r3, r3, #2
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d11d      	bne.n	8006db6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d7e:	e01a      	b.n	8006db6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006d80:	4b5b      	ldr	r3, [pc, #364]	; (8006ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d116      	bne.n	8006dba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d90:	e013      	b.n	8006dba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006d92:	4b57      	ldr	r3, [pc, #348]	; (8006ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10f      	bne.n	8006dbe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006d9e:	4b54      	ldr	r3, [pc, #336]	; (8006ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d109      	bne.n	8006dbe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006dae:	e006      	b.n	8006dbe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	73fb      	strb	r3, [r7, #15]
      break;
 8006db4:	e004      	b.n	8006dc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006db6:	bf00      	nop
 8006db8:	e002      	b.n	8006dc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006dba:	bf00      	nop
 8006dbc:	e000      	b.n	8006dc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006dbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10d      	bne.n	8006de2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006dc6:	4b4a      	ldr	r3, [pc, #296]	; (8006ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6819      	ldr	r1, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	011b      	lsls	r3, r3, #4
 8006dda:	430b      	orrs	r3, r1
 8006ddc:	4944      	ldr	r1, [pc, #272]	; (8006ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006de2:	7bfb      	ldrb	r3, [r7, #15]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d17d      	bne.n	8006ee4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006de8:	4b41      	ldr	r3, [pc, #260]	; (8006ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a40      	ldr	r2, [pc, #256]	; (8006ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006df2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006df4:	f7fc fdb2 	bl	800395c <HAL_GetTick>
 8006df8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006dfa:	e009      	b.n	8006e10 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006dfc:	f7fc fdae 	bl	800395c <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d902      	bls.n	8006e10 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	73fb      	strb	r3, [r7, #15]
        break;
 8006e0e:	e005      	b.n	8006e1c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006e10:	4b37      	ldr	r3, [pc, #220]	; (8006ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1ef      	bne.n	8006dfc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d160      	bne.n	8006ee4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d111      	bne.n	8006e4c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e28:	4b31      	ldr	r3, [pc, #196]	; (8006ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	6892      	ldr	r2, [r2, #8]
 8006e38:	0211      	lsls	r1, r2, #8
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	68d2      	ldr	r2, [r2, #12]
 8006e3e:	0912      	lsrs	r2, r2, #4
 8006e40:	0452      	lsls	r2, r2, #17
 8006e42:	430a      	orrs	r2, r1
 8006e44:	492a      	ldr	r1, [pc, #168]	; (8006ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	610b      	str	r3, [r1, #16]
 8006e4a:	e027      	b.n	8006e9c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d112      	bne.n	8006e78 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e52:	4b27      	ldr	r3, [pc, #156]	; (8006ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006e5a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	6892      	ldr	r2, [r2, #8]
 8006e62:	0211      	lsls	r1, r2, #8
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	6912      	ldr	r2, [r2, #16]
 8006e68:	0852      	lsrs	r2, r2, #1
 8006e6a:	3a01      	subs	r2, #1
 8006e6c:	0552      	lsls	r2, r2, #21
 8006e6e:	430a      	orrs	r2, r1
 8006e70:	491f      	ldr	r1, [pc, #124]	; (8006ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	610b      	str	r3, [r1, #16]
 8006e76:	e011      	b.n	8006e9c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e78:	4b1d      	ldr	r3, [pc, #116]	; (8006ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006e80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	6892      	ldr	r2, [r2, #8]
 8006e88:	0211      	lsls	r1, r2, #8
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	6952      	ldr	r2, [r2, #20]
 8006e8e:	0852      	lsrs	r2, r2, #1
 8006e90:	3a01      	subs	r2, #1
 8006e92:	0652      	lsls	r2, r2, #25
 8006e94:	430a      	orrs	r2, r1
 8006e96:	4916      	ldr	r1, [pc, #88]	; (8006ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006e9c:	4b14      	ldr	r3, [pc, #80]	; (8006ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a13      	ldr	r2, [pc, #76]	; (8006ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ea2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ea6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ea8:	f7fc fd58 	bl	800395c <HAL_GetTick>
 8006eac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006eae:	e009      	b.n	8006ec4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006eb0:	f7fc fd54 	bl	800395c <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d902      	bls.n	8006ec4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	73fb      	strb	r3, [r7, #15]
          break;
 8006ec2:	e005      	b.n	8006ed0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006ec4:	4b0a      	ldr	r3, [pc, #40]	; (8006ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d0ef      	beq.n	8006eb0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006ed0:	7bfb      	ldrb	r3, [r7, #15]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d106      	bne.n	8006ee4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006ed6:	4b06      	ldr	r3, [pc, #24]	; (8006ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ed8:	691a      	ldr	r2, [r3, #16]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	4904      	ldr	r1, [pc, #16]	; (8006ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	40021000 	.word	0x40021000

08006ef4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006efe:	2300      	movs	r3, #0
 8006f00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006f02:	4b6a      	ldr	r3, [pc, #424]	; (80070ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	f003 0303 	and.w	r3, r3, #3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d018      	beq.n	8006f40 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006f0e:	4b67      	ldr	r3, [pc, #412]	; (80070ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	f003 0203 	and.w	r2, r3, #3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d10d      	bne.n	8006f3a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
       ||
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d009      	beq.n	8006f3a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006f26:	4b61      	ldr	r3, [pc, #388]	; (80070ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	091b      	lsrs	r3, r3, #4
 8006f2c:	f003 0307 	and.w	r3, r3, #7
 8006f30:	1c5a      	adds	r2, r3, #1
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685b      	ldr	r3, [r3, #4]
       ||
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d047      	beq.n	8006fca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	73fb      	strb	r3, [r7, #15]
 8006f3e:	e044      	b.n	8006fca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2b03      	cmp	r3, #3
 8006f46:	d018      	beq.n	8006f7a <RCCEx_PLLSAI2_Config+0x86>
 8006f48:	2b03      	cmp	r3, #3
 8006f4a:	d825      	bhi.n	8006f98 <RCCEx_PLLSAI2_Config+0xa4>
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d002      	beq.n	8006f56 <RCCEx_PLLSAI2_Config+0x62>
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d009      	beq.n	8006f68 <RCCEx_PLLSAI2_Config+0x74>
 8006f54:	e020      	b.n	8006f98 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006f56:	4b55      	ldr	r3, [pc, #340]	; (80070ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0302 	and.w	r3, r3, #2
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d11d      	bne.n	8006f9e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f66:	e01a      	b.n	8006f9e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006f68:	4b50      	ldr	r3, [pc, #320]	; (80070ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d116      	bne.n	8006fa2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f78:	e013      	b.n	8006fa2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006f7a:	4b4c      	ldr	r3, [pc, #304]	; (80070ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10f      	bne.n	8006fa6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006f86:	4b49      	ldr	r3, [pc, #292]	; (80070ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d109      	bne.n	8006fa6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006f96:	e006      	b.n	8006fa6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f9c:	e004      	b.n	8006fa8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006f9e:	bf00      	nop
 8006fa0:	e002      	b.n	8006fa8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006fa2:	bf00      	nop
 8006fa4:	e000      	b.n	8006fa8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006fa6:	bf00      	nop
    }

    if(status == HAL_OK)
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10d      	bne.n	8006fca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006fae:	4b3f      	ldr	r3, [pc, #252]	; (80070ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6819      	ldr	r1, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	011b      	lsls	r3, r3, #4
 8006fc2:	430b      	orrs	r3, r1
 8006fc4:	4939      	ldr	r1, [pc, #228]	; (80070ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006fca:	7bfb      	ldrb	r3, [r7, #15]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d167      	bne.n	80070a0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006fd0:	4b36      	ldr	r3, [pc, #216]	; (80070ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a35      	ldr	r2, [pc, #212]	; (80070ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fdc:	f7fc fcbe 	bl	800395c <HAL_GetTick>
 8006fe0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006fe2:	e009      	b.n	8006ff8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006fe4:	f7fc fcba 	bl	800395c <HAL_GetTick>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d902      	bls.n	8006ff8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	73fb      	strb	r3, [r7, #15]
        break;
 8006ff6:	e005      	b.n	8007004 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006ff8:	4b2c      	ldr	r3, [pc, #176]	; (80070ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1ef      	bne.n	8006fe4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007004:	7bfb      	ldrb	r3, [r7, #15]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d14a      	bne.n	80070a0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d111      	bne.n	8007034 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007010:	4b26      	ldr	r3, [pc, #152]	; (80070ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8007012:	695b      	ldr	r3, [r3, #20]
 8007014:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	6892      	ldr	r2, [r2, #8]
 8007020:	0211      	lsls	r1, r2, #8
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	68d2      	ldr	r2, [r2, #12]
 8007026:	0912      	lsrs	r2, r2, #4
 8007028:	0452      	lsls	r2, r2, #17
 800702a:	430a      	orrs	r2, r1
 800702c:	491f      	ldr	r1, [pc, #124]	; (80070ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800702e:	4313      	orrs	r3, r2
 8007030:	614b      	str	r3, [r1, #20]
 8007032:	e011      	b.n	8007058 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007034:	4b1d      	ldr	r3, [pc, #116]	; (80070ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800703c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	6892      	ldr	r2, [r2, #8]
 8007044:	0211      	lsls	r1, r2, #8
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	6912      	ldr	r2, [r2, #16]
 800704a:	0852      	lsrs	r2, r2, #1
 800704c:	3a01      	subs	r2, #1
 800704e:	0652      	lsls	r2, r2, #25
 8007050:	430a      	orrs	r2, r1
 8007052:	4916      	ldr	r1, [pc, #88]	; (80070ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8007054:	4313      	orrs	r3, r2
 8007056:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007058:	4b14      	ldr	r3, [pc, #80]	; (80070ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a13      	ldr	r2, [pc, #76]	; (80070ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800705e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007062:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007064:	f7fc fc7a 	bl	800395c <HAL_GetTick>
 8007068:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800706a:	e009      	b.n	8007080 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800706c:	f7fc fc76 	bl	800395c <HAL_GetTick>
 8007070:	4602      	mov	r2, r0
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	2b02      	cmp	r3, #2
 8007078:	d902      	bls.n	8007080 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	73fb      	strb	r3, [r7, #15]
          break;
 800707e:	e005      	b.n	800708c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007080:	4b0a      	ldr	r3, [pc, #40]	; (80070ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d0ef      	beq.n	800706c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800708c:	7bfb      	ldrb	r3, [r7, #15]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d106      	bne.n	80070a0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007092:	4b06      	ldr	r3, [pc, #24]	; (80070ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8007094:	695a      	ldr	r2, [r3, #20]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	4904      	ldr	r1, [pc, #16]	; (80070ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800709c:	4313      	orrs	r3, r2
 800709e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80070a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	40021000 	.word	0x40021000

080070b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d101      	bne.n	80070c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e040      	b.n	8007144 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d106      	bne.n	80070d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f7fc f9f2 	bl	80034bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2224      	movs	r2, #36	; 0x24
 80070dc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f022 0201 	bic.w	r2, r2, #1
 80070ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fd12 	bl	8007b18 <UART_SetConfig>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d101      	bne.n	80070fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e022      	b.n	8007144 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007102:	2b00      	cmp	r3, #0
 8007104:	d002      	beq.n	800710c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 ffbe 	bl	8008088 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685a      	ldr	r2, [r3, #4]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800711a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	689a      	ldr	r2, [r3, #8]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800712a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f042 0201 	orr.w	r2, r2, #1
 800713a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f001 f845 	bl	80081cc <UART_CheckIdleState>
 8007142:	4603      	mov	r3, r0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d101      	bne.n	800715e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e048      	b.n	80071f0 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007162:	2b00      	cmp	r3, #0
 8007164:	d106      	bne.n	8007174 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f7fc f9a4 	bl	80034bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2224      	movs	r2, #36	; 0x24
 8007178:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f022 0201 	bic.w	r2, r2, #1
 8007188:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fcc4 	bl	8007b18 <UART_SetConfig>
 8007190:	4603      	mov	r3, r0
 8007192:	2b01      	cmp	r3, #1
 8007194:	d101      	bne.n	800719a <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e02a      	b.n	80071f0 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d002      	beq.n	80071a8 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 ff70 	bl	8008088 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	685a      	ldr	r2, [r3, #4]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	689a      	ldr	r2, [r3, #8]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80071c6:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689a      	ldr	r2, [r3, #8]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f042 0208 	orr.w	r2, r2, #8
 80071d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f042 0201 	orr.w	r2, r2, #1
 80071e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 ffef 	bl	80081cc <UART_CheckIdleState>
 80071ee:	4603      	mov	r3, r0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b08a      	sub	sp, #40	; 0x28
 80071fc:	af02      	add	r7, sp, #8
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	603b      	str	r3, [r7, #0]
 8007204:	4613      	mov	r3, r2
 8007206:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800720c:	2b20      	cmp	r3, #32
 800720e:	f040 8082 	bne.w	8007316 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d002      	beq.n	800721e <HAL_UART_Transmit+0x26>
 8007218:	88fb      	ldrh	r3, [r7, #6]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d101      	bne.n	8007222 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e07a      	b.n	8007318 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007228:	2b01      	cmp	r3, #1
 800722a:	d101      	bne.n	8007230 <HAL_UART_Transmit+0x38>
 800722c:	2302      	movs	r3, #2
 800722e:	e073      	b.n	8007318 <HAL_UART_Transmit+0x120>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2221      	movs	r2, #33	; 0x21
 8007244:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007246:	f7fc fb89 	bl	800395c <HAL_GetTick>
 800724a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	88fa      	ldrh	r2, [r7, #6]
 8007250:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	88fa      	ldrh	r2, [r7, #6]
 8007258:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007264:	d108      	bne.n	8007278 <HAL_UART_Transmit+0x80>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d104      	bne.n	8007278 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800726e:	2300      	movs	r3, #0
 8007270:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	61bb      	str	r3, [r7, #24]
 8007276:	e003      	b.n	8007280 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800727c:	2300      	movs	r3, #0
 800727e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007288:	e02d      	b.n	80072e6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	2200      	movs	r2, #0
 8007292:	2180      	movs	r1, #128	; 0x80
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f000 ffe2 	bl	800825e <UART_WaitOnFlagUntilTimeout>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d001      	beq.n	80072a4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80072a0:	2303      	movs	r3, #3
 80072a2:	e039      	b.n	8007318 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10b      	bne.n	80072c2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	881a      	ldrh	r2, [r3, #0]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072b6:	b292      	uxth	r2, r2
 80072b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	3302      	adds	r3, #2
 80072be:	61bb      	str	r3, [r7, #24]
 80072c0:	e008      	b.n	80072d4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	781a      	ldrb	r2, [r3, #0]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	b292      	uxth	r2, r2
 80072cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	3301      	adds	r3, #1
 80072d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072da:	b29b      	uxth	r3, r3
 80072dc:	3b01      	subs	r3, #1
 80072de:	b29a      	uxth	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1cb      	bne.n	800728a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	2200      	movs	r2, #0
 80072fa:	2140      	movs	r1, #64	; 0x40
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f000 ffae 	bl	800825e <UART_WaitOnFlagUntilTimeout>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d001      	beq.n	800730c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e005      	b.n	8007318 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2220      	movs	r2, #32
 8007310:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	e000      	b.n	8007318 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007316:	2302      	movs	r3, #2
  }
}
 8007318:	4618      	mov	r0, r3
 800731a:	3720      	adds	r7, #32
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b08a      	sub	sp, #40	; 0x28
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	4613      	mov	r3, r2
 800732c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007332:	2b20      	cmp	r3, #32
 8007334:	d142      	bne.n	80073bc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d002      	beq.n	8007342 <HAL_UART_Receive_IT+0x22>
 800733c:	88fb      	ldrh	r3, [r7, #6]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d101      	bne.n	8007346 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e03b      	b.n	80073be <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800734c:	2b01      	cmp	r3, #1
 800734e:	d101      	bne.n	8007354 <HAL_UART_Receive_IT+0x34>
 8007350:	2302      	movs	r3, #2
 8007352:	e034      	b.n	80073be <HAL_UART_Receive_IT+0x9e>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a18      	ldr	r2, [pc, #96]	; (80073c8 <HAL_UART_Receive_IT+0xa8>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d01f      	beq.n	80073ac <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d018      	beq.n	80073ac <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	e853 3f00 	ldrex	r3, [r3]
 8007386:	613b      	str	r3, [r7, #16]
   return(result);
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800738e:	627b      	str	r3, [r7, #36]	; 0x24
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	461a      	mov	r2, r3
 8007396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007398:	623b      	str	r3, [r7, #32]
 800739a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739c:	69f9      	ldr	r1, [r7, #28]
 800739e:	6a3a      	ldr	r2, [r7, #32]
 80073a0:	e841 2300 	strex	r3, r2, [r1]
 80073a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1e6      	bne.n	800737a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80073ac:	88fb      	ldrh	r3, [r7, #6]
 80073ae:	461a      	mov	r2, r3
 80073b0:	68b9      	ldr	r1, [r7, #8]
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f001 f818 	bl	80083e8 <UART_Start_Receive_IT>
 80073b8:	4603      	mov	r3, r0
 80073ba:	e000      	b.n	80073be <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80073bc:	2302      	movs	r3, #2
  }
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3728      	adds	r7, #40	; 0x28
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	40008000 	.word	0x40008000

080073cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b0ba      	sub	sp, #232	; 0xe8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	69db      	ldr	r3, [r3, #28]
 80073da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80073f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80073f6:	f640 030f 	movw	r3, #2063	; 0x80f
 80073fa:	4013      	ands	r3, r2
 80073fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007400:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007404:	2b00      	cmp	r3, #0
 8007406:	d115      	bne.n	8007434 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800740c:	f003 0320 	and.w	r3, r3, #32
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00f      	beq.n	8007434 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007418:	f003 0320 	and.w	r3, r3, #32
 800741c:	2b00      	cmp	r3, #0
 800741e:	d009      	beq.n	8007434 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 82a6 	beq.w	8007976 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	4798      	blx	r3
      }
      return;
 8007432:	e2a0      	b.n	8007976 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007434:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007438:	2b00      	cmp	r3, #0
 800743a:	f000 8117 	beq.w	800766c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800743e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	d106      	bne.n	8007458 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800744a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800744e:	4b85      	ldr	r3, [pc, #532]	; (8007664 <HAL_UART_IRQHandler+0x298>)
 8007450:	4013      	ands	r3, r2
 8007452:	2b00      	cmp	r3, #0
 8007454:	f000 810a 	beq.w	800766c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800745c:	f003 0301 	and.w	r3, r3, #1
 8007460:	2b00      	cmp	r3, #0
 8007462:	d011      	beq.n	8007488 <HAL_UART_IRQHandler+0xbc>
 8007464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00b      	beq.n	8007488 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2201      	movs	r2, #1
 8007476:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800747e:	f043 0201 	orr.w	r2, r3, #1
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800748c:	f003 0302 	and.w	r3, r3, #2
 8007490:	2b00      	cmp	r3, #0
 8007492:	d011      	beq.n	80074b8 <HAL_UART_IRQHandler+0xec>
 8007494:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007498:	f003 0301 	and.w	r3, r3, #1
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00b      	beq.n	80074b8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2202      	movs	r2, #2
 80074a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074ae:	f043 0204 	orr.w	r2, r3, #4
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074bc:	f003 0304 	and.w	r3, r3, #4
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d011      	beq.n	80074e8 <HAL_UART_IRQHandler+0x11c>
 80074c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074c8:	f003 0301 	and.w	r3, r3, #1
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00b      	beq.n	80074e8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2204      	movs	r2, #4
 80074d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074de:	f043 0202 	orr.w	r2, r3, #2
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80074e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ec:	f003 0308 	and.w	r3, r3, #8
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d017      	beq.n	8007524 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80074f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074f8:	f003 0320 	and.w	r3, r3, #32
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d105      	bne.n	800750c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007500:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007504:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00b      	beq.n	8007524 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2208      	movs	r2, #8
 8007512:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800751a:	f043 0208 	orr.w	r2, r3, #8
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800752c:	2b00      	cmp	r3, #0
 800752e:	d012      	beq.n	8007556 <HAL_UART_IRQHandler+0x18a>
 8007530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007534:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00c      	beq.n	8007556 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007544:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800754c:	f043 0220 	orr.w	r2, r3, #32
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800755c:	2b00      	cmp	r3, #0
 800755e:	f000 820c 	beq.w	800797a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007566:	f003 0320 	and.w	r3, r3, #32
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00d      	beq.n	800758a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800756e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007572:	f003 0320 	and.w	r3, r3, #32
 8007576:	2b00      	cmp	r3, #0
 8007578:	d007      	beq.n	800758a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800757e:	2b00      	cmp	r3, #0
 8007580:	d003      	beq.n	800758a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007590:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800759e:	2b40      	cmp	r3, #64	; 0x40
 80075a0:	d005      	beq.n	80075ae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80075a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80075a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d04f      	beq.n	800764e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 ffe4 	bl	800857c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075be:	2b40      	cmp	r3, #64	; 0x40
 80075c0:	d141      	bne.n	8007646 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	3308      	adds	r3, #8
 80075c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075d0:	e853 3f00 	ldrex	r3, [r3]
 80075d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80075d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	3308      	adds	r3, #8
 80075ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80075ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80075f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80075fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80075fe:	e841 2300 	strex	r3, r2, [r1]
 8007602:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007606:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1d9      	bne.n	80075c2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007612:	2b00      	cmp	r3, #0
 8007614:	d013      	beq.n	800763e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800761a:	4a13      	ldr	r2, [pc, #76]	; (8007668 <HAL_UART_IRQHandler+0x29c>)
 800761c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007622:	4618      	mov	r0, r3
 8007624:	f7fd ff2a 	bl	800547c <HAL_DMA_Abort_IT>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d017      	beq.n	800765e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007638:	4610      	mov	r0, r2
 800763a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800763c:	e00f      	b.n	800765e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 f9b0 	bl	80079a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007644:	e00b      	b.n	800765e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f9ac 	bl	80079a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800764c:	e007      	b.n	800765e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f9a8 	bl	80079a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800765c:	e18d      	b.n	800797a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800765e:	bf00      	nop
    return;
 8007660:	e18b      	b.n	800797a <HAL_UART_IRQHandler+0x5ae>
 8007662:	bf00      	nop
 8007664:	04000120 	.word	0x04000120
 8007668:	08008643 	.word	0x08008643

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007670:	2b01      	cmp	r3, #1
 8007672:	f040 8146 	bne.w	8007902 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800767a:	f003 0310 	and.w	r3, r3, #16
 800767e:	2b00      	cmp	r3, #0
 8007680:	f000 813f 	beq.w	8007902 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007688:	f003 0310 	and.w	r3, r3, #16
 800768c:	2b00      	cmp	r3, #0
 800768e:	f000 8138 	beq.w	8007902 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2210      	movs	r2, #16
 8007698:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a4:	2b40      	cmp	r3, #64	; 0x40
 80076a6:	f040 80b4 	bne.w	8007812 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80076b6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	f000 815f 	beq.w	800797e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80076c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076ca:	429a      	cmp	r2, r3
 80076cc:	f080 8157 	bcs.w	800797e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0320 	and.w	r3, r3, #32
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f040 8085 	bne.w	80077f6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076f8:	e853 3f00 	ldrex	r3, [r3]
 80076fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007700:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007708:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	461a      	mov	r2, r3
 8007712:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007716:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800771a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007722:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007726:	e841 2300 	strex	r3, r2, [r1]
 800772a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800772e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1da      	bne.n	80076ec <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3308      	adds	r3, #8
 800773c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007740:	e853 3f00 	ldrex	r3, [r3]
 8007744:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007748:	f023 0301 	bic.w	r3, r3, #1
 800774c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	3308      	adds	r3, #8
 8007756:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800775a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800775e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007760:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007762:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007766:	e841 2300 	strex	r3, r2, [r1]
 800776a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800776c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1e1      	bne.n	8007736 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	3308      	adds	r3, #8
 8007778:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800777c:	e853 3f00 	ldrex	r3, [r3]
 8007780:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007788:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	3308      	adds	r3, #8
 8007792:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007796:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007798:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800779c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800779e:	e841 2300 	strex	r3, r2, [r1]
 80077a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80077a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1e3      	bne.n	8007772 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2220      	movs	r2, #32
 80077ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077be:	e853 3f00 	ldrex	r3, [r3]
 80077c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80077c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077c6:	f023 0310 	bic.w	r3, r3, #16
 80077ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	461a      	mov	r2, r3
 80077d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80077da:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80077de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077e0:	e841 2300 	strex	r3, r2, [r1]
 80077e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80077e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1e4      	bne.n	80077b6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7fd fe05 	bl	8005400 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007802:	b29b      	uxth	r3, r3
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	b29b      	uxth	r3, r3
 8007808:	4619      	mov	r1, r3
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f8d4 	bl	80079b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007810:	e0b5      	b.n	800797e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800781e:	b29b      	uxth	r3, r3
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800782c:	b29b      	uxth	r3, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	f000 80a7 	beq.w	8007982 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8007834:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 80a2 	beq.w	8007982 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007846:	e853 3f00 	ldrex	r3, [r3]
 800784a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800784c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800784e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007852:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	461a      	mov	r2, r3
 800785c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007860:	647b      	str	r3, [r7, #68]	; 0x44
 8007862:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007864:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007866:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007868:	e841 2300 	strex	r3, r2, [r1]
 800786c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800786e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1e4      	bne.n	800783e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	3308      	adds	r3, #8
 800787a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787e:	e853 3f00 	ldrex	r3, [r3]
 8007882:	623b      	str	r3, [r7, #32]
   return(result);
 8007884:	6a3b      	ldr	r3, [r7, #32]
 8007886:	f023 0301 	bic.w	r3, r3, #1
 800788a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	3308      	adds	r3, #8
 8007894:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007898:	633a      	str	r2, [r7, #48]	; 0x30
 800789a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800789e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078a0:	e841 2300 	strex	r3, r2, [r1]
 80078a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1e3      	bne.n	8007874 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2220      	movs	r2, #32
 80078b0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	e853 3f00 	ldrex	r3, [r3]
 80078ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f023 0310 	bic.w	r3, r3, #16
 80078d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	461a      	mov	r2, r3
 80078dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80078e0:	61fb      	str	r3, [r7, #28]
 80078e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e4:	69b9      	ldr	r1, [r7, #24]
 80078e6:	69fa      	ldr	r2, [r7, #28]
 80078e8:	e841 2300 	strex	r3, r2, [r1]
 80078ec:	617b      	str	r3, [r7, #20]
   return(result);
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1e4      	bne.n	80078be <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078f8:	4619      	mov	r1, r3
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f85c 	bl	80079b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007900:	e03f      	b.n	8007982 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00e      	beq.n	800792c <HAL_UART_IRQHandler+0x560>
 800790e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007916:	2b00      	cmp	r3, #0
 8007918:	d008      	beq.n	800792c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007922:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f001 f82c 	bl	8008982 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800792a:	e02d      	b.n	8007988 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800792c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00e      	beq.n	8007956 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800793c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007940:	2b00      	cmp	r3, #0
 8007942:	d008      	beq.n	8007956 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007948:	2b00      	cmp	r3, #0
 800794a:	d01c      	beq.n	8007986 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	4798      	blx	r3
    }
    return;
 8007954:	e017      	b.n	8007986 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800795a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800795e:	2b00      	cmp	r3, #0
 8007960:	d012      	beq.n	8007988 <HAL_UART_IRQHandler+0x5bc>
 8007962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00c      	beq.n	8007988 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 fe7d 	bl	800866e <UART_EndTransmit_IT>
    return;
 8007974:	e008      	b.n	8007988 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007976:	bf00      	nop
 8007978:	e006      	b.n	8007988 <HAL_UART_IRQHandler+0x5bc>
    return;
 800797a:	bf00      	nop
 800797c:	e004      	b.n	8007988 <HAL_UART_IRQHandler+0x5bc>
      return;
 800797e:	bf00      	nop
 8007980:	e002      	b.n	8007988 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007982:	bf00      	nop
 8007984:	e000      	b.n	8007988 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007986:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007988:	37e8      	adds	r7, #232	; 0xe8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop

08007990 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	460b      	mov	r3, r1
 80079c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079c4:	bf00      	nop
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b08f      	sub	sp, #60	; 0x3c
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d101      	bne.n	80079e6 <HAL_HalfDuplex_EnableTransmitter+0x16>
 80079e2:	2302      	movs	r3, #2
 80079e4:	e040      	b.n	8007a68 <HAL_HalfDuplex_EnableTransmitter+0x98>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2201      	movs	r2, #1
 80079ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2224      	movs	r2, #36	; 0x24
 80079f2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fa:	6a3b      	ldr	r3, [r7, #32]
 80079fc:	e853 3f00 	ldrex	r3, [r3]
 8007a00:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	f023 030c 	bic.w	r3, r3, #12
 8007a08:	637b      	str	r3, [r7, #52]	; 0x34
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a14:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a1a:	e841 2300 	strex	r3, r2, [r1]
 8007a1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1e6      	bne.n	80079f4 <HAL_HalfDuplex_EnableTransmitter+0x24>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	e853 3f00 	ldrex	r3, [r3]
 8007a32:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	f043 0308 	orr.w	r3, r3, #8
 8007a3a:	633b      	str	r3, [r7, #48]	; 0x30
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	461a      	mov	r2, r3
 8007a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a44:	61bb      	str	r3, [r7, #24]
 8007a46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a48:	6979      	ldr	r1, [r7, #20]
 8007a4a:	69ba      	ldr	r2, [r7, #24]
 8007a4c:	e841 2300 	strex	r3, r2, [r1]
 8007a50:	613b      	str	r3, [r7, #16]
   return(result);
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1e6      	bne.n	8007a26 <HAL_HalfDuplex_EnableTransmitter+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2220      	movs	r2, #32
 8007a5c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	373c      	adds	r7, #60	; 0x3c
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b08f      	sub	sp, #60	; 0x3c
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d101      	bne.n	8007a8a <HAL_HalfDuplex_EnableReceiver+0x16>
 8007a86:	2302      	movs	r3, #2
 8007a88:	e040      	b.n	8007b0c <HAL_HalfDuplex_EnableReceiver+0x98>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2224      	movs	r2, #36	; 0x24
 8007a96:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9e:	6a3b      	ldr	r3, [r7, #32]
 8007aa0:	e853 3f00 	ldrex	r3, [r3]
 8007aa4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	f023 030c 	bic.w	r3, r3, #12
 8007aac:	637b      	str	r3, [r7, #52]	; 0x34
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ab8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007abc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007abe:	e841 2300 	strex	r3, r2, [r1]
 8007ac2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1e6      	bne.n	8007a98 <HAL_HalfDuplex_EnableReceiver+0x24>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	e853 3f00 	ldrex	r3, [r3]
 8007ad6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	f043 0304 	orr.w	r3, r3, #4
 8007ade:	633b      	str	r3, [r7, #48]	; 0x30
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae8:	61bb      	str	r3, [r7, #24]
 8007aea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aec:	6979      	ldr	r1, [r7, #20]
 8007aee:	69ba      	ldr	r2, [r7, #24]
 8007af0:	e841 2300 	strex	r3, r2, [r1]
 8007af4:	613b      	str	r3, [r7, #16]
   return(result);
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d1e6      	bne.n	8007aca <HAL_HalfDuplex_EnableReceiver+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2220      	movs	r2, #32
 8007b00:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	373c      	adds	r7, #60	; 0x3c
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b1c:	b08a      	sub	sp, #40	; 0x28
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	689a      	ldr	r2, [r3, #8]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	431a      	orrs	r2, r3
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	695b      	ldr	r3, [r3, #20]
 8007b36:	431a      	orrs	r2, r3
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	69db      	ldr	r3, [r3, #28]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	4ba4      	ldr	r3, [pc, #656]	; (8007dd8 <UART_SetConfig+0x2c0>)
 8007b48:	4013      	ands	r3, r2
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	6812      	ldr	r2, [r2, #0]
 8007b4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b50:	430b      	orrs	r3, r1
 8007b52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	68da      	ldr	r2, [r3, #12]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	430a      	orrs	r2, r1
 8007b68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a99      	ldr	r2, [pc, #612]	; (8007ddc <UART_SetConfig+0x2c4>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d004      	beq.n	8007b84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6a1b      	ldr	r3, [r3, #32]
 8007b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b80:	4313      	orrs	r3, r2
 8007b82:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b94:	430a      	orrs	r2, r1
 8007b96:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a90      	ldr	r2, [pc, #576]	; (8007de0 <UART_SetConfig+0x2c8>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d126      	bne.n	8007bf0 <UART_SetConfig+0xd8>
 8007ba2:	4b90      	ldr	r3, [pc, #576]	; (8007de4 <UART_SetConfig+0x2cc>)
 8007ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ba8:	f003 0303 	and.w	r3, r3, #3
 8007bac:	2b03      	cmp	r3, #3
 8007bae:	d81b      	bhi.n	8007be8 <UART_SetConfig+0xd0>
 8007bb0:	a201      	add	r2, pc, #4	; (adr r2, 8007bb8 <UART_SetConfig+0xa0>)
 8007bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb6:	bf00      	nop
 8007bb8:	08007bc9 	.word	0x08007bc9
 8007bbc:	08007bd9 	.word	0x08007bd9
 8007bc0:	08007bd1 	.word	0x08007bd1
 8007bc4:	08007be1 	.word	0x08007be1
 8007bc8:	2301      	movs	r3, #1
 8007bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bce:	e116      	b.n	8007dfe <UART_SetConfig+0x2e6>
 8007bd0:	2302      	movs	r3, #2
 8007bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bd6:	e112      	b.n	8007dfe <UART_SetConfig+0x2e6>
 8007bd8:	2304      	movs	r3, #4
 8007bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bde:	e10e      	b.n	8007dfe <UART_SetConfig+0x2e6>
 8007be0:	2308      	movs	r3, #8
 8007be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007be6:	e10a      	b.n	8007dfe <UART_SetConfig+0x2e6>
 8007be8:	2310      	movs	r3, #16
 8007bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bee:	e106      	b.n	8007dfe <UART_SetConfig+0x2e6>
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a7c      	ldr	r2, [pc, #496]	; (8007de8 <UART_SetConfig+0x2d0>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d138      	bne.n	8007c6c <UART_SetConfig+0x154>
 8007bfa:	4b7a      	ldr	r3, [pc, #488]	; (8007de4 <UART_SetConfig+0x2cc>)
 8007bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c00:	f003 030c 	and.w	r3, r3, #12
 8007c04:	2b0c      	cmp	r3, #12
 8007c06:	d82d      	bhi.n	8007c64 <UART_SetConfig+0x14c>
 8007c08:	a201      	add	r2, pc, #4	; (adr r2, 8007c10 <UART_SetConfig+0xf8>)
 8007c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0e:	bf00      	nop
 8007c10:	08007c45 	.word	0x08007c45
 8007c14:	08007c65 	.word	0x08007c65
 8007c18:	08007c65 	.word	0x08007c65
 8007c1c:	08007c65 	.word	0x08007c65
 8007c20:	08007c55 	.word	0x08007c55
 8007c24:	08007c65 	.word	0x08007c65
 8007c28:	08007c65 	.word	0x08007c65
 8007c2c:	08007c65 	.word	0x08007c65
 8007c30:	08007c4d 	.word	0x08007c4d
 8007c34:	08007c65 	.word	0x08007c65
 8007c38:	08007c65 	.word	0x08007c65
 8007c3c:	08007c65 	.word	0x08007c65
 8007c40:	08007c5d 	.word	0x08007c5d
 8007c44:	2300      	movs	r3, #0
 8007c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c4a:	e0d8      	b.n	8007dfe <UART_SetConfig+0x2e6>
 8007c4c:	2302      	movs	r3, #2
 8007c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c52:	e0d4      	b.n	8007dfe <UART_SetConfig+0x2e6>
 8007c54:	2304      	movs	r3, #4
 8007c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c5a:	e0d0      	b.n	8007dfe <UART_SetConfig+0x2e6>
 8007c5c:	2308      	movs	r3, #8
 8007c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c62:	e0cc      	b.n	8007dfe <UART_SetConfig+0x2e6>
 8007c64:	2310      	movs	r3, #16
 8007c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c6a:	e0c8      	b.n	8007dfe <UART_SetConfig+0x2e6>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a5e      	ldr	r2, [pc, #376]	; (8007dec <UART_SetConfig+0x2d4>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d125      	bne.n	8007cc2 <UART_SetConfig+0x1aa>
 8007c76:	4b5b      	ldr	r3, [pc, #364]	; (8007de4 <UART_SetConfig+0x2cc>)
 8007c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c80:	2b30      	cmp	r3, #48	; 0x30
 8007c82:	d016      	beq.n	8007cb2 <UART_SetConfig+0x19a>
 8007c84:	2b30      	cmp	r3, #48	; 0x30
 8007c86:	d818      	bhi.n	8007cba <UART_SetConfig+0x1a2>
 8007c88:	2b20      	cmp	r3, #32
 8007c8a:	d00a      	beq.n	8007ca2 <UART_SetConfig+0x18a>
 8007c8c:	2b20      	cmp	r3, #32
 8007c8e:	d814      	bhi.n	8007cba <UART_SetConfig+0x1a2>
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d002      	beq.n	8007c9a <UART_SetConfig+0x182>
 8007c94:	2b10      	cmp	r3, #16
 8007c96:	d008      	beq.n	8007caa <UART_SetConfig+0x192>
 8007c98:	e00f      	b.n	8007cba <UART_SetConfig+0x1a2>
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ca0:	e0ad      	b.n	8007dfe <UART_SetConfig+0x2e6>
 8007ca2:	2302      	movs	r3, #2
 8007ca4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ca8:	e0a9      	b.n	8007dfe <UART_SetConfig+0x2e6>
 8007caa:	2304      	movs	r3, #4
 8007cac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cb0:	e0a5      	b.n	8007dfe <UART_SetConfig+0x2e6>
 8007cb2:	2308      	movs	r3, #8
 8007cb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cb8:	e0a1      	b.n	8007dfe <UART_SetConfig+0x2e6>
 8007cba:	2310      	movs	r3, #16
 8007cbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cc0:	e09d      	b.n	8007dfe <UART_SetConfig+0x2e6>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a4a      	ldr	r2, [pc, #296]	; (8007df0 <UART_SetConfig+0x2d8>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d125      	bne.n	8007d18 <UART_SetConfig+0x200>
 8007ccc:	4b45      	ldr	r3, [pc, #276]	; (8007de4 <UART_SetConfig+0x2cc>)
 8007cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cd2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007cd6:	2bc0      	cmp	r3, #192	; 0xc0
 8007cd8:	d016      	beq.n	8007d08 <UART_SetConfig+0x1f0>
 8007cda:	2bc0      	cmp	r3, #192	; 0xc0
 8007cdc:	d818      	bhi.n	8007d10 <UART_SetConfig+0x1f8>
 8007cde:	2b80      	cmp	r3, #128	; 0x80
 8007ce0:	d00a      	beq.n	8007cf8 <UART_SetConfig+0x1e0>
 8007ce2:	2b80      	cmp	r3, #128	; 0x80
 8007ce4:	d814      	bhi.n	8007d10 <UART_SetConfig+0x1f8>
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d002      	beq.n	8007cf0 <UART_SetConfig+0x1d8>
 8007cea:	2b40      	cmp	r3, #64	; 0x40
 8007cec:	d008      	beq.n	8007d00 <UART_SetConfig+0x1e8>
 8007cee:	e00f      	b.n	8007d10 <UART_SetConfig+0x1f8>
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cf6:	e082      	b.n	8007dfe <UART_SetConfig+0x2e6>
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cfe:	e07e      	b.n	8007dfe <UART_SetConfig+0x2e6>
 8007d00:	2304      	movs	r3, #4
 8007d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d06:	e07a      	b.n	8007dfe <UART_SetConfig+0x2e6>
 8007d08:	2308      	movs	r3, #8
 8007d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d0e:	e076      	b.n	8007dfe <UART_SetConfig+0x2e6>
 8007d10:	2310      	movs	r3, #16
 8007d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d16:	e072      	b.n	8007dfe <UART_SetConfig+0x2e6>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a35      	ldr	r2, [pc, #212]	; (8007df4 <UART_SetConfig+0x2dc>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d12a      	bne.n	8007d78 <UART_SetConfig+0x260>
 8007d22:	4b30      	ldr	r3, [pc, #192]	; (8007de4 <UART_SetConfig+0x2cc>)
 8007d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d30:	d01a      	beq.n	8007d68 <UART_SetConfig+0x250>
 8007d32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d36:	d81b      	bhi.n	8007d70 <UART_SetConfig+0x258>
 8007d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d3c:	d00c      	beq.n	8007d58 <UART_SetConfig+0x240>
 8007d3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d42:	d815      	bhi.n	8007d70 <UART_SetConfig+0x258>
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d003      	beq.n	8007d50 <UART_SetConfig+0x238>
 8007d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d4c:	d008      	beq.n	8007d60 <UART_SetConfig+0x248>
 8007d4e:	e00f      	b.n	8007d70 <UART_SetConfig+0x258>
 8007d50:	2300      	movs	r3, #0
 8007d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d56:	e052      	b.n	8007dfe <UART_SetConfig+0x2e6>
 8007d58:	2302      	movs	r3, #2
 8007d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d5e:	e04e      	b.n	8007dfe <UART_SetConfig+0x2e6>
 8007d60:	2304      	movs	r3, #4
 8007d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d66:	e04a      	b.n	8007dfe <UART_SetConfig+0x2e6>
 8007d68:	2308      	movs	r3, #8
 8007d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d6e:	e046      	b.n	8007dfe <UART_SetConfig+0x2e6>
 8007d70:	2310      	movs	r3, #16
 8007d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d76:	e042      	b.n	8007dfe <UART_SetConfig+0x2e6>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a17      	ldr	r2, [pc, #92]	; (8007ddc <UART_SetConfig+0x2c4>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d13a      	bne.n	8007df8 <UART_SetConfig+0x2e0>
 8007d82:	4b18      	ldr	r3, [pc, #96]	; (8007de4 <UART_SetConfig+0x2cc>)
 8007d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d90:	d01a      	beq.n	8007dc8 <UART_SetConfig+0x2b0>
 8007d92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d96:	d81b      	bhi.n	8007dd0 <UART_SetConfig+0x2b8>
 8007d98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d9c:	d00c      	beq.n	8007db8 <UART_SetConfig+0x2a0>
 8007d9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007da2:	d815      	bhi.n	8007dd0 <UART_SetConfig+0x2b8>
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d003      	beq.n	8007db0 <UART_SetConfig+0x298>
 8007da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dac:	d008      	beq.n	8007dc0 <UART_SetConfig+0x2a8>
 8007dae:	e00f      	b.n	8007dd0 <UART_SetConfig+0x2b8>
 8007db0:	2300      	movs	r3, #0
 8007db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007db6:	e022      	b.n	8007dfe <UART_SetConfig+0x2e6>
 8007db8:	2302      	movs	r3, #2
 8007dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dbe:	e01e      	b.n	8007dfe <UART_SetConfig+0x2e6>
 8007dc0:	2304      	movs	r3, #4
 8007dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dc6:	e01a      	b.n	8007dfe <UART_SetConfig+0x2e6>
 8007dc8:	2308      	movs	r3, #8
 8007dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dce:	e016      	b.n	8007dfe <UART_SetConfig+0x2e6>
 8007dd0:	2310      	movs	r3, #16
 8007dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dd6:	e012      	b.n	8007dfe <UART_SetConfig+0x2e6>
 8007dd8:	efff69f3 	.word	0xefff69f3
 8007ddc:	40008000 	.word	0x40008000
 8007de0:	40013800 	.word	0x40013800
 8007de4:	40021000 	.word	0x40021000
 8007de8:	40004400 	.word	0x40004400
 8007dec:	40004800 	.word	0x40004800
 8007df0:	40004c00 	.word	0x40004c00
 8007df4:	40005000 	.word	0x40005000
 8007df8:	2310      	movs	r3, #16
 8007dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a9f      	ldr	r2, [pc, #636]	; (8008080 <UART_SetConfig+0x568>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d17a      	bne.n	8007efe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e0c:	2b08      	cmp	r3, #8
 8007e0e:	d824      	bhi.n	8007e5a <UART_SetConfig+0x342>
 8007e10:	a201      	add	r2, pc, #4	; (adr r2, 8007e18 <UART_SetConfig+0x300>)
 8007e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e16:	bf00      	nop
 8007e18:	08007e3d 	.word	0x08007e3d
 8007e1c:	08007e5b 	.word	0x08007e5b
 8007e20:	08007e45 	.word	0x08007e45
 8007e24:	08007e5b 	.word	0x08007e5b
 8007e28:	08007e4b 	.word	0x08007e4b
 8007e2c:	08007e5b 	.word	0x08007e5b
 8007e30:	08007e5b 	.word	0x08007e5b
 8007e34:	08007e5b 	.word	0x08007e5b
 8007e38:	08007e53 	.word	0x08007e53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e3c:	f7fe fbf0 	bl	8006620 <HAL_RCC_GetPCLK1Freq>
 8007e40:	61f8      	str	r0, [r7, #28]
        break;
 8007e42:	e010      	b.n	8007e66 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e44:	4b8f      	ldr	r3, [pc, #572]	; (8008084 <UART_SetConfig+0x56c>)
 8007e46:	61fb      	str	r3, [r7, #28]
        break;
 8007e48:	e00d      	b.n	8007e66 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e4a:	f7fe fb51 	bl	80064f0 <HAL_RCC_GetSysClockFreq>
 8007e4e:	61f8      	str	r0, [r7, #28]
        break;
 8007e50:	e009      	b.n	8007e66 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e56:	61fb      	str	r3, [r7, #28]
        break;
 8007e58:	e005      	b.n	8007e66 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007e64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f000 80fb 	beq.w	8008064 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	4613      	mov	r3, r2
 8007e74:	005b      	lsls	r3, r3, #1
 8007e76:	4413      	add	r3, r2
 8007e78:	69fa      	ldr	r2, [r7, #28]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d305      	bcc.n	8007e8a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007e84:	69fa      	ldr	r2, [r7, #28]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d903      	bls.n	8007e92 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007e90:	e0e8      	b.n	8008064 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	2200      	movs	r2, #0
 8007e96:	461c      	mov	r4, r3
 8007e98:	4615      	mov	r5, r2
 8007e9a:	f04f 0200 	mov.w	r2, #0
 8007e9e:	f04f 0300 	mov.w	r3, #0
 8007ea2:	022b      	lsls	r3, r5, #8
 8007ea4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007ea8:	0222      	lsls	r2, r4, #8
 8007eaa:	68f9      	ldr	r1, [r7, #12]
 8007eac:	6849      	ldr	r1, [r1, #4]
 8007eae:	0849      	lsrs	r1, r1, #1
 8007eb0:	2000      	movs	r0, #0
 8007eb2:	4688      	mov	r8, r1
 8007eb4:	4681      	mov	r9, r0
 8007eb6:	eb12 0a08 	adds.w	sl, r2, r8
 8007eba:	eb43 0b09 	adc.w	fp, r3, r9
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	603b      	str	r3, [r7, #0]
 8007ec6:	607a      	str	r2, [r7, #4]
 8007ec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ecc:	4650      	mov	r0, sl
 8007ece:	4659      	mov	r1, fp
 8007ed0:	f7f8 feda 	bl	8000c88 <__aeabi_uldivmod>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	4613      	mov	r3, r2
 8007eda:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ee2:	d308      	bcc.n	8007ef6 <UART_SetConfig+0x3de>
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007eea:	d204      	bcs.n	8007ef6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	69ba      	ldr	r2, [r7, #24]
 8007ef2:	60da      	str	r2, [r3, #12]
 8007ef4:	e0b6      	b.n	8008064 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007efc:	e0b2      	b.n	8008064 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	69db      	ldr	r3, [r3, #28]
 8007f02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f06:	d15e      	bne.n	8007fc6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007f08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f0c:	2b08      	cmp	r3, #8
 8007f0e:	d828      	bhi.n	8007f62 <UART_SetConfig+0x44a>
 8007f10:	a201      	add	r2, pc, #4	; (adr r2, 8007f18 <UART_SetConfig+0x400>)
 8007f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f16:	bf00      	nop
 8007f18:	08007f3d 	.word	0x08007f3d
 8007f1c:	08007f45 	.word	0x08007f45
 8007f20:	08007f4d 	.word	0x08007f4d
 8007f24:	08007f63 	.word	0x08007f63
 8007f28:	08007f53 	.word	0x08007f53
 8007f2c:	08007f63 	.word	0x08007f63
 8007f30:	08007f63 	.word	0x08007f63
 8007f34:	08007f63 	.word	0x08007f63
 8007f38:	08007f5b 	.word	0x08007f5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f3c:	f7fe fb70 	bl	8006620 <HAL_RCC_GetPCLK1Freq>
 8007f40:	61f8      	str	r0, [r7, #28]
        break;
 8007f42:	e014      	b.n	8007f6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f44:	f7fe fb82 	bl	800664c <HAL_RCC_GetPCLK2Freq>
 8007f48:	61f8      	str	r0, [r7, #28]
        break;
 8007f4a:	e010      	b.n	8007f6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f4c:	4b4d      	ldr	r3, [pc, #308]	; (8008084 <UART_SetConfig+0x56c>)
 8007f4e:	61fb      	str	r3, [r7, #28]
        break;
 8007f50:	e00d      	b.n	8007f6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f52:	f7fe facd 	bl	80064f0 <HAL_RCC_GetSysClockFreq>
 8007f56:	61f8      	str	r0, [r7, #28]
        break;
 8007f58:	e009      	b.n	8007f6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f5e:	61fb      	str	r3, [r7, #28]
        break;
 8007f60:	e005      	b.n	8007f6e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007f62:	2300      	movs	r3, #0
 8007f64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007f6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d077      	beq.n	8008064 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	005a      	lsls	r2, r3, #1
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	085b      	lsrs	r3, r3, #1
 8007f7e:	441a      	add	r2, r3
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f88:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	2b0f      	cmp	r3, #15
 8007f8e:	d916      	bls.n	8007fbe <UART_SetConfig+0x4a6>
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f96:	d212      	bcs.n	8007fbe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	f023 030f 	bic.w	r3, r3, #15
 8007fa0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	085b      	lsrs	r3, r3, #1
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	f003 0307 	and.w	r3, r3, #7
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	8afb      	ldrh	r3, [r7, #22]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	8afa      	ldrh	r2, [r7, #22]
 8007fba:	60da      	str	r2, [r3, #12]
 8007fbc:	e052      	b.n	8008064 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007fc4:	e04e      	b.n	8008064 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007fc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007fca:	2b08      	cmp	r3, #8
 8007fcc:	d827      	bhi.n	800801e <UART_SetConfig+0x506>
 8007fce:	a201      	add	r2, pc, #4	; (adr r2, 8007fd4 <UART_SetConfig+0x4bc>)
 8007fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd4:	08007ff9 	.word	0x08007ff9
 8007fd8:	08008001 	.word	0x08008001
 8007fdc:	08008009 	.word	0x08008009
 8007fe0:	0800801f 	.word	0x0800801f
 8007fe4:	0800800f 	.word	0x0800800f
 8007fe8:	0800801f 	.word	0x0800801f
 8007fec:	0800801f 	.word	0x0800801f
 8007ff0:	0800801f 	.word	0x0800801f
 8007ff4:	08008017 	.word	0x08008017
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ff8:	f7fe fb12 	bl	8006620 <HAL_RCC_GetPCLK1Freq>
 8007ffc:	61f8      	str	r0, [r7, #28]
        break;
 8007ffe:	e014      	b.n	800802a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008000:	f7fe fb24 	bl	800664c <HAL_RCC_GetPCLK2Freq>
 8008004:	61f8      	str	r0, [r7, #28]
        break;
 8008006:	e010      	b.n	800802a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008008:	4b1e      	ldr	r3, [pc, #120]	; (8008084 <UART_SetConfig+0x56c>)
 800800a:	61fb      	str	r3, [r7, #28]
        break;
 800800c:	e00d      	b.n	800802a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800800e:	f7fe fa6f 	bl	80064f0 <HAL_RCC_GetSysClockFreq>
 8008012:	61f8      	str	r0, [r7, #28]
        break;
 8008014:	e009      	b.n	800802a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800801a:	61fb      	str	r3, [r7, #28]
        break;
 800801c:	e005      	b.n	800802a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800801e:	2300      	movs	r3, #0
 8008020:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008028:	bf00      	nop
    }

    if (pclk != 0U)
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d019      	beq.n	8008064 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	085a      	lsrs	r2, r3, #1
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	441a      	add	r2, r3
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008042:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	2b0f      	cmp	r3, #15
 8008048:	d909      	bls.n	800805e <UART_SetConfig+0x546>
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008050:	d205      	bcs.n	800805e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	b29a      	uxth	r2, r3
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	60da      	str	r2, [r3, #12]
 800805c:	e002      	b.n	8008064 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2200      	movs	r2, #0
 8008068:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2200      	movs	r2, #0
 800806e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008070:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008074:	4618      	mov	r0, r3
 8008076:	3728      	adds	r7, #40	; 0x28
 8008078:	46bd      	mov	sp, r7
 800807a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800807e:	bf00      	nop
 8008080:	40008000 	.word	0x40008000
 8008084:	00f42400 	.word	0x00f42400

08008088 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008094:	f003 0301 	and.w	r3, r3, #1
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00a      	beq.n	80080b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	430a      	orrs	r2, r1
 80080b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b6:	f003 0302 	and.w	r3, r3, #2
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00a      	beq.n	80080d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	430a      	orrs	r2, r1
 80080d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d8:	f003 0304 	and.w	r3, r3, #4
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00a      	beq.n	80080f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	430a      	orrs	r2, r1
 80080f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fa:	f003 0308 	and.w	r3, r3, #8
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00a      	beq.n	8008118 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	430a      	orrs	r2, r1
 8008116:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811c:	f003 0310 	and.w	r3, r3, #16
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00a      	beq.n	800813a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	430a      	orrs	r2, r1
 8008138:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813e:	f003 0320 	and.w	r3, r3, #32
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00a      	beq.n	800815c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	430a      	orrs	r2, r1
 800815a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008164:	2b00      	cmp	r3, #0
 8008166:	d01a      	beq.n	800819e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	430a      	orrs	r2, r1
 800817c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008182:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008186:	d10a      	bne.n	800819e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	430a      	orrs	r2, r1
 800819c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00a      	beq.n	80081c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	430a      	orrs	r2, r1
 80081be:	605a      	str	r2, [r3, #4]
  }
}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b086      	sub	sp, #24
 80081d0:	af02      	add	r7, sp, #8
 80081d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081dc:	f7fb fbbe 	bl	800395c <HAL_GetTick>
 80081e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 0308 	and.w	r3, r3, #8
 80081ec:	2b08      	cmp	r3, #8
 80081ee:	d10e      	bne.n	800820e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081f4:	9300      	str	r3, [sp, #0]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 f82d 	bl	800825e <UART_WaitOnFlagUntilTimeout>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d001      	beq.n	800820e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800820a:	2303      	movs	r3, #3
 800820c:	e023      	b.n	8008256 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 0304 	and.w	r3, r3, #4
 8008218:	2b04      	cmp	r3, #4
 800821a:	d10e      	bne.n	800823a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800821c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008220:	9300      	str	r3, [sp, #0]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f817 	bl	800825e <UART_WaitOnFlagUntilTimeout>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d001      	beq.n	800823a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008236:	2303      	movs	r3, #3
 8008238:	e00d      	b.n	8008256 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2220      	movs	r2, #32
 800823e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2220      	movs	r2, #32
 8008244:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b09c      	sub	sp, #112	; 0x70
 8008262:	af00      	add	r7, sp, #0
 8008264:	60f8      	str	r0, [r7, #12]
 8008266:	60b9      	str	r1, [r7, #8]
 8008268:	603b      	str	r3, [r7, #0]
 800826a:	4613      	mov	r3, r2
 800826c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800826e:	e0a5      	b.n	80083bc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008270:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008272:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008276:	f000 80a1 	beq.w	80083bc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800827a:	f7fb fb6f 	bl	800395c <HAL_GetTick>
 800827e:	4602      	mov	r2, r0
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	1ad3      	subs	r3, r2, r3
 8008284:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008286:	429a      	cmp	r2, r3
 8008288:	d302      	bcc.n	8008290 <UART_WaitOnFlagUntilTimeout+0x32>
 800828a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800828c:	2b00      	cmp	r3, #0
 800828e:	d13e      	bne.n	800830e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008298:	e853 3f00 	ldrex	r3, [r3]
 800829c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800829e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082a4:	667b      	str	r3, [r7, #100]	; 0x64
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	461a      	mov	r2, r3
 80082ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082b0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80082b6:	e841 2300 	strex	r3, r2, [r1]
 80082ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80082bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d1e6      	bne.n	8008290 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	3308      	adds	r3, #8
 80082c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082cc:	e853 3f00 	ldrex	r3, [r3]
 80082d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d4:	f023 0301 	bic.w	r3, r3, #1
 80082d8:	663b      	str	r3, [r7, #96]	; 0x60
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	3308      	adds	r3, #8
 80082e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80082e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80082e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80082e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082ea:	e841 2300 	strex	r3, r2, [r1]
 80082ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80082f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1e5      	bne.n	80082c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2220      	movs	r2, #32
 80082fa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2220      	movs	r2, #32
 8008300:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800830a:	2303      	movs	r3, #3
 800830c:	e067      	b.n	80083de <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 0304 	and.w	r3, r3, #4
 8008318:	2b00      	cmp	r3, #0
 800831a:	d04f      	beq.n	80083bc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	69db      	ldr	r3, [r3, #28]
 8008322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008326:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800832a:	d147      	bne.n	80083bc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008334:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833e:	e853 3f00 	ldrex	r3, [r3]
 8008342:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008346:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800834a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	461a      	mov	r2, r3
 8008352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008354:	637b      	str	r3, [r7, #52]	; 0x34
 8008356:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008358:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800835a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800835c:	e841 2300 	strex	r3, r2, [r1]
 8008360:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008364:	2b00      	cmp	r3, #0
 8008366:	d1e6      	bne.n	8008336 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3308      	adds	r3, #8
 800836e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	e853 3f00 	ldrex	r3, [r3]
 8008376:	613b      	str	r3, [r7, #16]
   return(result);
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	f023 0301 	bic.w	r3, r3, #1
 800837e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	3308      	adds	r3, #8
 8008386:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008388:	623a      	str	r2, [r7, #32]
 800838a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838c:	69f9      	ldr	r1, [r7, #28]
 800838e:	6a3a      	ldr	r2, [r7, #32]
 8008390:	e841 2300 	strex	r3, r2, [r1]
 8008394:	61bb      	str	r3, [r7, #24]
   return(result);
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1e5      	bne.n	8008368 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2220      	movs	r2, #32
 80083a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2220      	movs	r2, #32
 80083a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2220      	movs	r2, #32
 80083ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80083b8:	2303      	movs	r3, #3
 80083ba:	e010      	b.n	80083de <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	69da      	ldr	r2, [r3, #28]
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	4013      	ands	r3, r2
 80083c6:	68ba      	ldr	r2, [r7, #8]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	bf0c      	ite	eq
 80083cc:	2301      	moveq	r3, #1
 80083ce:	2300      	movne	r3, #0
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	461a      	mov	r2, r3
 80083d4:	79fb      	ldrb	r3, [r7, #7]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	f43f af4a 	beq.w	8008270 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3770      	adds	r7, #112	; 0x70
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
	...

080083e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b097      	sub	sp, #92	; 0x5c
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	4613      	mov	r3, r2
 80083f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	68ba      	ldr	r2, [r7, #8]
 80083fa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	88fa      	ldrh	r2, [r7, #6]
 8008400:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	88fa      	ldrh	r2, [r7, #6]
 8008408:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800841a:	d10e      	bne.n	800843a <UART_Start_Receive_IT+0x52>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d105      	bne.n	8008430 <UART_Start_Receive_IT+0x48>
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f240 12ff 	movw	r2, #511	; 0x1ff
 800842a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800842e:	e02d      	b.n	800848c <UART_Start_Receive_IT+0xa4>
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	22ff      	movs	r2, #255	; 0xff
 8008434:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008438:	e028      	b.n	800848c <UART_Start_Receive_IT+0xa4>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d10d      	bne.n	800845e <UART_Start_Receive_IT+0x76>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d104      	bne.n	8008454 <UART_Start_Receive_IT+0x6c>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	22ff      	movs	r2, #255	; 0xff
 800844e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008452:	e01b      	b.n	800848c <UART_Start_Receive_IT+0xa4>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	227f      	movs	r2, #127	; 0x7f
 8008458:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800845c:	e016      	b.n	800848c <UART_Start_Receive_IT+0xa4>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008466:	d10d      	bne.n	8008484 <UART_Start_Receive_IT+0x9c>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d104      	bne.n	800847a <UART_Start_Receive_IT+0x92>
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	227f      	movs	r2, #127	; 0x7f
 8008474:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008478:	e008      	b.n	800848c <UART_Start_Receive_IT+0xa4>
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	223f      	movs	r2, #63	; 0x3f
 800847e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008482:	e003      	b.n	800848c <UART_Start_Receive_IT+0xa4>
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2200      	movs	r2, #0
 8008490:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2222      	movs	r2, #34	; 0x22
 8008498:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	3308      	adds	r3, #8
 80084a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084a4:	e853 3f00 	ldrex	r3, [r3]
 80084a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ac:	f043 0301 	orr.w	r3, r3, #1
 80084b0:	657b      	str	r3, [r7, #84]	; 0x54
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	3308      	adds	r3, #8
 80084b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80084ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80084bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80084c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084c2:	e841 2300 	strex	r3, r2, [r1]
 80084c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80084c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1e5      	bne.n	800849a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084d6:	d107      	bne.n	80084e8 <UART_Start_Receive_IT+0x100>
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d103      	bne.n	80084e8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	4a24      	ldr	r2, [pc, #144]	; (8008574 <UART_Start_Receive_IT+0x18c>)
 80084e4:	665a      	str	r2, [r3, #100]	; 0x64
 80084e6:	e002      	b.n	80084ee <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	4a23      	ldr	r2, [pc, #140]	; (8008578 <UART_Start_Receive_IT+0x190>)
 80084ec:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d019      	beq.n	8008532 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008506:	e853 3f00 	ldrex	r3, [r3]
 800850a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800850c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008512:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	461a      	mov	r2, r3
 800851a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800851c:	637b      	str	r3, [r7, #52]	; 0x34
 800851e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008520:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008524:	e841 2300 	strex	r3, r2, [r1]
 8008528:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800852a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800852c:	2b00      	cmp	r3, #0
 800852e:	d1e6      	bne.n	80084fe <UART_Start_Receive_IT+0x116>
 8008530:	e018      	b.n	8008564 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	e853 3f00 	ldrex	r3, [r3]
 800853e:	613b      	str	r3, [r7, #16]
   return(result);
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	f043 0320 	orr.w	r3, r3, #32
 8008546:	653b      	str	r3, [r7, #80]	; 0x50
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	461a      	mov	r2, r3
 800854e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008550:	623b      	str	r3, [r7, #32]
 8008552:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008554:	69f9      	ldr	r1, [r7, #28]
 8008556:	6a3a      	ldr	r2, [r7, #32]
 8008558:	e841 2300 	strex	r3, r2, [r1]
 800855c:	61bb      	str	r3, [r7, #24]
   return(result);
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d1e6      	bne.n	8008532 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	375c      	adds	r7, #92	; 0x5c
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	08008823 	.word	0x08008823
 8008578:	080086c3 	.word	0x080086c3

0800857c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800857c:	b480      	push	{r7}
 800857e:	b095      	sub	sp, #84	; 0x54
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800858c:	e853 3f00 	ldrex	r3, [r3]
 8008590:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008594:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008598:	64fb      	str	r3, [r7, #76]	; 0x4c
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	461a      	mov	r2, r3
 80085a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085a2:	643b      	str	r3, [r7, #64]	; 0x40
 80085a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80085a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085aa:	e841 2300 	strex	r3, r2, [r1]
 80085ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d1e6      	bne.n	8008584 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	3308      	adds	r3, #8
 80085bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085be:	6a3b      	ldr	r3, [r7, #32]
 80085c0:	e853 3f00 	ldrex	r3, [r3]
 80085c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	f023 0301 	bic.w	r3, r3, #1
 80085cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	3308      	adds	r3, #8
 80085d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085de:	e841 2300 	strex	r3, r2, [r1]
 80085e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d1e5      	bne.n	80085b6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d118      	bne.n	8008624 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	e853 3f00 	ldrex	r3, [r3]
 80085fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	f023 0310 	bic.w	r3, r3, #16
 8008606:	647b      	str	r3, [r7, #68]	; 0x44
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	461a      	mov	r2, r3
 800860e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008610:	61bb      	str	r3, [r7, #24]
 8008612:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008614:	6979      	ldr	r1, [r7, #20]
 8008616:	69ba      	ldr	r2, [r7, #24]
 8008618:	e841 2300 	strex	r3, r2, [r1]
 800861c:	613b      	str	r3, [r7, #16]
   return(result);
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1e6      	bne.n	80085f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2220      	movs	r2, #32
 8008628:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008636:	bf00      	nop
 8008638:	3754      	adds	r7, #84	; 0x54
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr

08008642 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b084      	sub	sp, #16
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800864e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2200      	movs	r2, #0
 8008654:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2200      	movs	r2, #0
 800865c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f7ff f99f 	bl	80079a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008666:	bf00      	nop
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b088      	sub	sp, #32
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	e853 3f00 	ldrex	r3, [r3]
 8008682:	60bb      	str	r3, [r7, #8]
   return(result);
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800868a:	61fb      	str	r3, [r7, #28]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	461a      	mov	r2, r3
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	61bb      	str	r3, [r7, #24]
 8008696:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008698:	6979      	ldr	r1, [r7, #20]
 800869a:	69ba      	ldr	r2, [r7, #24]
 800869c:	e841 2300 	strex	r3, r2, [r1]
 80086a0:	613b      	str	r3, [r7, #16]
   return(result);
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d1e6      	bne.n	8008676 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2220      	movs	r2, #32
 80086ac:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f7ff f96b 	bl	8007990 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086ba:	bf00      	nop
 80086bc:	3720      	adds	r7, #32
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b096      	sub	sp, #88	; 0x58
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80086d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086d8:	2b22      	cmp	r3, #34	; 0x22
 80086da:	f040 8094 	bne.w	8008806 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80086e4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80086e8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80086ec:	b2d9      	uxtb	r1, r3
 80086ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80086f2:	b2da      	uxtb	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086f8:	400a      	ands	r2, r1
 80086fa:	b2d2      	uxtb	r2, r2
 80086fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008702:	1c5a      	adds	r2, r3, #1
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800870e:	b29b      	uxth	r3, r3
 8008710:	3b01      	subs	r3, #1
 8008712:	b29a      	uxth	r2, r3
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008720:	b29b      	uxth	r3, r3
 8008722:	2b00      	cmp	r3, #0
 8008724:	d179      	bne.n	800881a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872e:	e853 3f00 	ldrex	r3, [r3]
 8008732:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008736:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800873a:	653b      	str	r3, [r7, #80]	; 0x50
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	461a      	mov	r2, r3
 8008742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008744:	647b      	str	r3, [r7, #68]	; 0x44
 8008746:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008748:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800874a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800874c:	e841 2300 	strex	r3, r2, [r1]
 8008750:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1e6      	bne.n	8008726 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	3308      	adds	r3, #8
 800875e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008762:	e853 3f00 	ldrex	r3, [r3]
 8008766:	623b      	str	r3, [r7, #32]
   return(result);
 8008768:	6a3b      	ldr	r3, [r7, #32]
 800876a:	f023 0301 	bic.w	r3, r3, #1
 800876e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	3308      	adds	r3, #8
 8008776:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008778:	633a      	str	r2, [r7, #48]	; 0x30
 800877a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800877e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008780:	e841 2300 	strex	r3, r2, [r1]
 8008784:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008788:	2b00      	cmp	r3, #0
 800878a:	d1e5      	bne.n	8008758 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2220      	movs	r2, #32
 8008790:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800879c:	2b01      	cmp	r3, #1
 800879e:	d12e      	bne.n	80087fe <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	e853 3f00 	ldrex	r3, [r3]
 80087b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f023 0310 	bic.w	r3, r3, #16
 80087ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	461a      	mov	r2, r3
 80087c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087c4:	61fb      	str	r3, [r7, #28]
 80087c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c8:	69b9      	ldr	r1, [r7, #24]
 80087ca:	69fa      	ldr	r2, [r7, #28]
 80087cc:	e841 2300 	strex	r3, r2, [r1]
 80087d0:	617b      	str	r3, [r7, #20]
   return(result);
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1e6      	bne.n	80087a6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	69db      	ldr	r3, [r3, #28]
 80087de:	f003 0310 	and.w	r3, r3, #16
 80087e2:	2b10      	cmp	r3, #16
 80087e4:	d103      	bne.n	80087ee <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2210      	movs	r2, #16
 80087ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80087f4:	4619      	mov	r1, r3
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f7ff f8de 	bl	80079b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80087fc:	e00d      	b.n	800881a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f7f9 fe90 	bl	8002524 <HAL_UART_RxCpltCallback>
}
 8008804:	e009      	b.n	800881a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	8b1b      	ldrh	r3, [r3, #24]
 800880c:	b29a      	uxth	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f042 0208 	orr.w	r2, r2, #8
 8008816:	b292      	uxth	r2, r2
 8008818:	831a      	strh	r2, [r3, #24]
}
 800881a:	bf00      	nop
 800881c:	3758      	adds	r7, #88	; 0x58
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b096      	sub	sp, #88	; 0x58
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008830:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008838:	2b22      	cmp	r3, #34	; 0x22
 800883a:	f040 8094 	bne.w	8008966 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008844:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800884c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800884e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008852:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008856:	4013      	ands	r3, r2
 8008858:	b29a      	uxth	r2, r3
 800885a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800885c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008862:	1c9a      	adds	r2, r3, #2
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800886e:	b29b      	uxth	r3, r3
 8008870:	3b01      	subs	r3, #1
 8008872:	b29a      	uxth	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008880:	b29b      	uxth	r3, r3
 8008882:	2b00      	cmp	r3, #0
 8008884:	d179      	bne.n	800897a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800888e:	e853 3f00 	ldrex	r3, [r3]
 8008892:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008896:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800889a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	461a      	mov	r2, r3
 80088a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088a4:	643b      	str	r3, [r7, #64]	; 0x40
 80088a6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088ac:	e841 2300 	strex	r3, r2, [r1]
 80088b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d1e6      	bne.n	8008886 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	3308      	adds	r3, #8
 80088be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c0:	6a3b      	ldr	r3, [r7, #32]
 80088c2:	e853 3f00 	ldrex	r3, [r3]
 80088c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	f023 0301 	bic.w	r3, r3, #1
 80088ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	3308      	adds	r3, #8
 80088d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088e0:	e841 2300 	strex	r3, r2, [r1]
 80088e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d1e5      	bne.n	80088b8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2220      	movs	r2, #32
 80088f0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d12e      	bne.n	800895e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	e853 3f00 	ldrex	r3, [r3]
 8008912:	60bb      	str	r3, [r7, #8]
   return(result);
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	f023 0310 	bic.w	r3, r3, #16
 800891a:	647b      	str	r3, [r7, #68]	; 0x44
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	461a      	mov	r2, r3
 8008922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008924:	61bb      	str	r3, [r7, #24]
 8008926:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008928:	6979      	ldr	r1, [r7, #20]
 800892a:	69ba      	ldr	r2, [r7, #24]
 800892c:	e841 2300 	strex	r3, r2, [r1]
 8008930:	613b      	str	r3, [r7, #16]
   return(result);
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d1e6      	bne.n	8008906 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	69db      	ldr	r3, [r3, #28]
 800893e:	f003 0310 	and.w	r3, r3, #16
 8008942:	2b10      	cmp	r3, #16
 8008944:	d103      	bne.n	800894e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2210      	movs	r2, #16
 800894c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008954:	4619      	mov	r1, r3
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f7ff f82e 	bl	80079b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800895c:	e00d      	b.n	800897a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f7f9 fde0 	bl	8002524 <HAL_UART_RxCpltCallback>
}
 8008964:	e009      	b.n	800897a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	8b1b      	ldrh	r3, [r3, #24]
 800896c:	b29a      	uxth	r2, r3
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f042 0208 	orr.w	r2, r2, #8
 8008976:	b292      	uxth	r2, r2
 8008978:	831a      	strh	r2, [r3, #24]
}
 800897a:	bf00      	nop
 800897c:	3758      	adds	r7, #88	; 0x58
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008982:	b480      	push	{r7}
 8008984:	b083      	sub	sp, #12
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800898a:	bf00      	nop
 800898c:	370c      	adds	r7, #12
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr
	...

08008998 <__errno>:
 8008998:	4b01      	ldr	r3, [pc, #4]	; (80089a0 <__errno+0x8>)
 800899a:	6818      	ldr	r0, [r3, #0]
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	2000000c 	.word	0x2000000c

080089a4 <__libc_init_array>:
 80089a4:	b570      	push	{r4, r5, r6, lr}
 80089a6:	4d0d      	ldr	r5, [pc, #52]	; (80089dc <__libc_init_array+0x38>)
 80089a8:	4c0d      	ldr	r4, [pc, #52]	; (80089e0 <__libc_init_array+0x3c>)
 80089aa:	1b64      	subs	r4, r4, r5
 80089ac:	10a4      	asrs	r4, r4, #2
 80089ae:	2600      	movs	r6, #0
 80089b0:	42a6      	cmp	r6, r4
 80089b2:	d109      	bne.n	80089c8 <__libc_init_array+0x24>
 80089b4:	4d0b      	ldr	r5, [pc, #44]	; (80089e4 <__libc_init_array+0x40>)
 80089b6:	4c0c      	ldr	r4, [pc, #48]	; (80089e8 <__libc_init_array+0x44>)
 80089b8:	f005 fb2c 	bl	800e014 <_init>
 80089bc:	1b64      	subs	r4, r4, r5
 80089be:	10a4      	asrs	r4, r4, #2
 80089c0:	2600      	movs	r6, #0
 80089c2:	42a6      	cmp	r6, r4
 80089c4:	d105      	bne.n	80089d2 <__libc_init_array+0x2e>
 80089c6:	bd70      	pop	{r4, r5, r6, pc}
 80089c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80089cc:	4798      	blx	r3
 80089ce:	3601      	adds	r6, #1
 80089d0:	e7ee      	b.n	80089b0 <__libc_init_array+0xc>
 80089d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80089d6:	4798      	blx	r3
 80089d8:	3601      	adds	r6, #1
 80089da:	e7f2      	b.n	80089c2 <__libc_init_array+0x1e>
 80089dc:	0800e6d0 	.word	0x0800e6d0
 80089e0:	0800e6d0 	.word	0x0800e6d0
 80089e4:	0800e6d0 	.word	0x0800e6d0
 80089e8:	0800e6d4 	.word	0x0800e6d4

080089ec <memcpy>:
 80089ec:	440a      	add	r2, r1
 80089ee:	4291      	cmp	r1, r2
 80089f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80089f4:	d100      	bne.n	80089f8 <memcpy+0xc>
 80089f6:	4770      	bx	lr
 80089f8:	b510      	push	{r4, lr}
 80089fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a02:	4291      	cmp	r1, r2
 8008a04:	d1f9      	bne.n	80089fa <memcpy+0xe>
 8008a06:	bd10      	pop	{r4, pc}

08008a08 <memset>:
 8008a08:	4402      	add	r2, r0
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d100      	bne.n	8008a12 <memset+0xa>
 8008a10:	4770      	bx	lr
 8008a12:	f803 1b01 	strb.w	r1, [r3], #1
 8008a16:	e7f9      	b.n	8008a0c <memset+0x4>

08008a18 <__cvt>:
 8008a18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a1c:	ec55 4b10 	vmov	r4, r5, d0
 8008a20:	2d00      	cmp	r5, #0
 8008a22:	460e      	mov	r6, r1
 8008a24:	4619      	mov	r1, r3
 8008a26:	462b      	mov	r3, r5
 8008a28:	bfbb      	ittet	lt
 8008a2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008a2e:	461d      	movlt	r5, r3
 8008a30:	2300      	movge	r3, #0
 8008a32:	232d      	movlt	r3, #45	; 0x2d
 8008a34:	700b      	strb	r3, [r1, #0]
 8008a36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008a3c:	4691      	mov	r9, r2
 8008a3e:	f023 0820 	bic.w	r8, r3, #32
 8008a42:	bfbc      	itt	lt
 8008a44:	4622      	movlt	r2, r4
 8008a46:	4614      	movlt	r4, r2
 8008a48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a4c:	d005      	beq.n	8008a5a <__cvt+0x42>
 8008a4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008a52:	d100      	bne.n	8008a56 <__cvt+0x3e>
 8008a54:	3601      	adds	r6, #1
 8008a56:	2102      	movs	r1, #2
 8008a58:	e000      	b.n	8008a5c <__cvt+0x44>
 8008a5a:	2103      	movs	r1, #3
 8008a5c:	ab03      	add	r3, sp, #12
 8008a5e:	9301      	str	r3, [sp, #4]
 8008a60:	ab02      	add	r3, sp, #8
 8008a62:	9300      	str	r3, [sp, #0]
 8008a64:	ec45 4b10 	vmov	d0, r4, r5
 8008a68:	4653      	mov	r3, sl
 8008a6a:	4632      	mov	r2, r6
 8008a6c:	f000 fce4 	bl	8009438 <_dtoa_r>
 8008a70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008a74:	4607      	mov	r7, r0
 8008a76:	d102      	bne.n	8008a7e <__cvt+0x66>
 8008a78:	f019 0f01 	tst.w	r9, #1
 8008a7c:	d022      	beq.n	8008ac4 <__cvt+0xac>
 8008a7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a82:	eb07 0906 	add.w	r9, r7, r6
 8008a86:	d110      	bne.n	8008aaa <__cvt+0x92>
 8008a88:	783b      	ldrb	r3, [r7, #0]
 8008a8a:	2b30      	cmp	r3, #48	; 0x30
 8008a8c:	d10a      	bne.n	8008aa4 <__cvt+0x8c>
 8008a8e:	2200      	movs	r2, #0
 8008a90:	2300      	movs	r3, #0
 8008a92:	4620      	mov	r0, r4
 8008a94:	4629      	mov	r1, r5
 8008a96:	f7f8 f817 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a9a:	b918      	cbnz	r0, 8008aa4 <__cvt+0x8c>
 8008a9c:	f1c6 0601 	rsb	r6, r6, #1
 8008aa0:	f8ca 6000 	str.w	r6, [sl]
 8008aa4:	f8da 3000 	ldr.w	r3, [sl]
 8008aa8:	4499      	add	r9, r3
 8008aaa:	2200      	movs	r2, #0
 8008aac:	2300      	movs	r3, #0
 8008aae:	4620      	mov	r0, r4
 8008ab0:	4629      	mov	r1, r5
 8008ab2:	f7f8 f809 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ab6:	b108      	cbz	r0, 8008abc <__cvt+0xa4>
 8008ab8:	f8cd 900c 	str.w	r9, [sp, #12]
 8008abc:	2230      	movs	r2, #48	; 0x30
 8008abe:	9b03      	ldr	r3, [sp, #12]
 8008ac0:	454b      	cmp	r3, r9
 8008ac2:	d307      	bcc.n	8008ad4 <__cvt+0xbc>
 8008ac4:	9b03      	ldr	r3, [sp, #12]
 8008ac6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ac8:	1bdb      	subs	r3, r3, r7
 8008aca:	4638      	mov	r0, r7
 8008acc:	6013      	str	r3, [r2, #0]
 8008ace:	b004      	add	sp, #16
 8008ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ad4:	1c59      	adds	r1, r3, #1
 8008ad6:	9103      	str	r1, [sp, #12]
 8008ad8:	701a      	strb	r2, [r3, #0]
 8008ada:	e7f0      	b.n	8008abe <__cvt+0xa6>

08008adc <__exponent>:
 8008adc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2900      	cmp	r1, #0
 8008ae2:	bfb8      	it	lt
 8008ae4:	4249      	neglt	r1, r1
 8008ae6:	f803 2b02 	strb.w	r2, [r3], #2
 8008aea:	bfb4      	ite	lt
 8008aec:	222d      	movlt	r2, #45	; 0x2d
 8008aee:	222b      	movge	r2, #43	; 0x2b
 8008af0:	2909      	cmp	r1, #9
 8008af2:	7042      	strb	r2, [r0, #1]
 8008af4:	dd2a      	ble.n	8008b4c <__exponent+0x70>
 8008af6:	f10d 0407 	add.w	r4, sp, #7
 8008afa:	46a4      	mov	ip, r4
 8008afc:	270a      	movs	r7, #10
 8008afe:	46a6      	mov	lr, r4
 8008b00:	460a      	mov	r2, r1
 8008b02:	fb91 f6f7 	sdiv	r6, r1, r7
 8008b06:	fb07 1516 	mls	r5, r7, r6, r1
 8008b0a:	3530      	adds	r5, #48	; 0x30
 8008b0c:	2a63      	cmp	r2, #99	; 0x63
 8008b0e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008b12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008b16:	4631      	mov	r1, r6
 8008b18:	dcf1      	bgt.n	8008afe <__exponent+0x22>
 8008b1a:	3130      	adds	r1, #48	; 0x30
 8008b1c:	f1ae 0502 	sub.w	r5, lr, #2
 8008b20:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008b24:	1c44      	adds	r4, r0, #1
 8008b26:	4629      	mov	r1, r5
 8008b28:	4561      	cmp	r1, ip
 8008b2a:	d30a      	bcc.n	8008b42 <__exponent+0x66>
 8008b2c:	f10d 0209 	add.w	r2, sp, #9
 8008b30:	eba2 020e 	sub.w	r2, r2, lr
 8008b34:	4565      	cmp	r5, ip
 8008b36:	bf88      	it	hi
 8008b38:	2200      	movhi	r2, #0
 8008b3a:	4413      	add	r3, r2
 8008b3c:	1a18      	subs	r0, r3, r0
 8008b3e:	b003      	add	sp, #12
 8008b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b46:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008b4a:	e7ed      	b.n	8008b28 <__exponent+0x4c>
 8008b4c:	2330      	movs	r3, #48	; 0x30
 8008b4e:	3130      	adds	r1, #48	; 0x30
 8008b50:	7083      	strb	r3, [r0, #2]
 8008b52:	70c1      	strb	r1, [r0, #3]
 8008b54:	1d03      	adds	r3, r0, #4
 8008b56:	e7f1      	b.n	8008b3c <__exponent+0x60>

08008b58 <_printf_float>:
 8008b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b5c:	ed2d 8b02 	vpush	{d8}
 8008b60:	b08d      	sub	sp, #52	; 0x34
 8008b62:	460c      	mov	r4, r1
 8008b64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008b68:	4616      	mov	r6, r2
 8008b6a:	461f      	mov	r7, r3
 8008b6c:	4605      	mov	r5, r0
 8008b6e:	f001 fb47 	bl	800a200 <_localeconv_r>
 8008b72:	f8d0 a000 	ldr.w	sl, [r0]
 8008b76:	4650      	mov	r0, sl
 8008b78:	f7f7 fb2a 	bl	80001d0 <strlen>
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	930a      	str	r3, [sp, #40]	; 0x28
 8008b80:	6823      	ldr	r3, [r4, #0]
 8008b82:	9305      	str	r3, [sp, #20]
 8008b84:	f8d8 3000 	ldr.w	r3, [r8]
 8008b88:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008b8c:	3307      	adds	r3, #7
 8008b8e:	f023 0307 	bic.w	r3, r3, #7
 8008b92:	f103 0208 	add.w	r2, r3, #8
 8008b96:	f8c8 2000 	str.w	r2, [r8]
 8008b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008ba2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008ba6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008baa:	9307      	str	r3, [sp, #28]
 8008bac:	f8cd 8018 	str.w	r8, [sp, #24]
 8008bb0:	ee08 0a10 	vmov	s16, r0
 8008bb4:	4b9f      	ldr	r3, [pc, #636]	; (8008e34 <_printf_float+0x2dc>)
 8008bb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bbe:	f7f7 ffb5 	bl	8000b2c <__aeabi_dcmpun>
 8008bc2:	bb88      	cbnz	r0, 8008c28 <_printf_float+0xd0>
 8008bc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bc8:	4b9a      	ldr	r3, [pc, #616]	; (8008e34 <_printf_float+0x2dc>)
 8008bca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bce:	f7f7 ff8f 	bl	8000af0 <__aeabi_dcmple>
 8008bd2:	bb48      	cbnz	r0, 8008c28 <_printf_float+0xd0>
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	4640      	mov	r0, r8
 8008bda:	4649      	mov	r1, r9
 8008bdc:	f7f7 ff7e 	bl	8000adc <__aeabi_dcmplt>
 8008be0:	b110      	cbz	r0, 8008be8 <_printf_float+0x90>
 8008be2:	232d      	movs	r3, #45	; 0x2d
 8008be4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008be8:	4b93      	ldr	r3, [pc, #588]	; (8008e38 <_printf_float+0x2e0>)
 8008bea:	4894      	ldr	r0, [pc, #592]	; (8008e3c <_printf_float+0x2e4>)
 8008bec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008bf0:	bf94      	ite	ls
 8008bf2:	4698      	movls	r8, r3
 8008bf4:	4680      	movhi	r8, r0
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	6123      	str	r3, [r4, #16]
 8008bfa:	9b05      	ldr	r3, [sp, #20]
 8008bfc:	f023 0204 	bic.w	r2, r3, #4
 8008c00:	6022      	str	r2, [r4, #0]
 8008c02:	f04f 0900 	mov.w	r9, #0
 8008c06:	9700      	str	r7, [sp, #0]
 8008c08:	4633      	mov	r3, r6
 8008c0a:	aa0b      	add	r2, sp, #44	; 0x2c
 8008c0c:	4621      	mov	r1, r4
 8008c0e:	4628      	mov	r0, r5
 8008c10:	f000 f9d8 	bl	8008fc4 <_printf_common>
 8008c14:	3001      	adds	r0, #1
 8008c16:	f040 8090 	bne.w	8008d3a <_printf_float+0x1e2>
 8008c1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c1e:	b00d      	add	sp, #52	; 0x34
 8008c20:	ecbd 8b02 	vpop	{d8}
 8008c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c28:	4642      	mov	r2, r8
 8008c2a:	464b      	mov	r3, r9
 8008c2c:	4640      	mov	r0, r8
 8008c2e:	4649      	mov	r1, r9
 8008c30:	f7f7 ff7c 	bl	8000b2c <__aeabi_dcmpun>
 8008c34:	b140      	cbz	r0, 8008c48 <_printf_float+0xf0>
 8008c36:	464b      	mov	r3, r9
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	bfbc      	itt	lt
 8008c3c:	232d      	movlt	r3, #45	; 0x2d
 8008c3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008c42:	487f      	ldr	r0, [pc, #508]	; (8008e40 <_printf_float+0x2e8>)
 8008c44:	4b7f      	ldr	r3, [pc, #508]	; (8008e44 <_printf_float+0x2ec>)
 8008c46:	e7d1      	b.n	8008bec <_printf_float+0x94>
 8008c48:	6863      	ldr	r3, [r4, #4]
 8008c4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008c4e:	9206      	str	r2, [sp, #24]
 8008c50:	1c5a      	adds	r2, r3, #1
 8008c52:	d13f      	bne.n	8008cd4 <_printf_float+0x17c>
 8008c54:	2306      	movs	r3, #6
 8008c56:	6063      	str	r3, [r4, #4]
 8008c58:	9b05      	ldr	r3, [sp, #20]
 8008c5a:	6861      	ldr	r1, [r4, #4]
 8008c5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008c60:	2300      	movs	r3, #0
 8008c62:	9303      	str	r3, [sp, #12]
 8008c64:	ab0a      	add	r3, sp, #40	; 0x28
 8008c66:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008c6a:	ab09      	add	r3, sp, #36	; 0x24
 8008c6c:	ec49 8b10 	vmov	d0, r8, r9
 8008c70:	9300      	str	r3, [sp, #0]
 8008c72:	6022      	str	r2, [r4, #0]
 8008c74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008c78:	4628      	mov	r0, r5
 8008c7a:	f7ff fecd 	bl	8008a18 <__cvt>
 8008c7e:	9b06      	ldr	r3, [sp, #24]
 8008c80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c82:	2b47      	cmp	r3, #71	; 0x47
 8008c84:	4680      	mov	r8, r0
 8008c86:	d108      	bne.n	8008c9a <_printf_float+0x142>
 8008c88:	1cc8      	adds	r0, r1, #3
 8008c8a:	db02      	blt.n	8008c92 <_printf_float+0x13a>
 8008c8c:	6863      	ldr	r3, [r4, #4]
 8008c8e:	4299      	cmp	r1, r3
 8008c90:	dd41      	ble.n	8008d16 <_printf_float+0x1be>
 8008c92:	f1ab 0b02 	sub.w	fp, fp, #2
 8008c96:	fa5f fb8b 	uxtb.w	fp, fp
 8008c9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008c9e:	d820      	bhi.n	8008ce2 <_printf_float+0x18a>
 8008ca0:	3901      	subs	r1, #1
 8008ca2:	465a      	mov	r2, fp
 8008ca4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008ca8:	9109      	str	r1, [sp, #36]	; 0x24
 8008caa:	f7ff ff17 	bl	8008adc <__exponent>
 8008cae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cb0:	1813      	adds	r3, r2, r0
 8008cb2:	2a01      	cmp	r2, #1
 8008cb4:	4681      	mov	r9, r0
 8008cb6:	6123      	str	r3, [r4, #16]
 8008cb8:	dc02      	bgt.n	8008cc0 <_printf_float+0x168>
 8008cba:	6822      	ldr	r2, [r4, #0]
 8008cbc:	07d2      	lsls	r2, r2, #31
 8008cbe:	d501      	bpl.n	8008cc4 <_printf_float+0x16c>
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	6123      	str	r3, [r4, #16]
 8008cc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d09c      	beq.n	8008c06 <_printf_float+0xae>
 8008ccc:	232d      	movs	r3, #45	; 0x2d
 8008cce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cd2:	e798      	b.n	8008c06 <_printf_float+0xae>
 8008cd4:	9a06      	ldr	r2, [sp, #24]
 8008cd6:	2a47      	cmp	r2, #71	; 0x47
 8008cd8:	d1be      	bne.n	8008c58 <_printf_float+0x100>
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1bc      	bne.n	8008c58 <_printf_float+0x100>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e7b9      	b.n	8008c56 <_printf_float+0xfe>
 8008ce2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008ce6:	d118      	bne.n	8008d1a <_printf_float+0x1c2>
 8008ce8:	2900      	cmp	r1, #0
 8008cea:	6863      	ldr	r3, [r4, #4]
 8008cec:	dd0b      	ble.n	8008d06 <_printf_float+0x1ae>
 8008cee:	6121      	str	r1, [r4, #16]
 8008cf0:	b913      	cbnz	r3, 8008cf8 <_printf_float+0x1a0>
 8008cf2:	6822      	ldr	r2, [r4, #0]
 8008cf4:	07d0      	lsls	r0, r2, #31
 8008cf6:	d502      	bpl.n	8008cfe <_printf_float+0x1a6>
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	440b      	add	r3, r1
 8008cfc:	6123      	str	r3, [r4, #16]
 8008cfe:	65a1      	str	r1, [r4, #88]	; 0x58
 8008d00:	f04f 0900 	mov.w	r9, #0
 8008d04:	e7de      	b.n	8008cc4 <_printf_float+0x16c>
 8008d06:	b913      	cbnz	r3, 8008d0e <_printf_float+0x1b6>
 8008d08:	6822      	ldr	r2, [r4, #0]
 8008d0a:	07d2      	lsls	r2, r2, #31
 8008d0c:	d501      	bpl.n	8008d12 <_printf_float+0x1ba>
 8008d0e:	3302      	adds	r3, #2
 8008d10:	e7f4      	b.n	8008cfc <_printf_float+0x1a4>
 8008d12:	2301      	movs	r3, #1
 8008d14:	e7f2      	b.n	8008cfc <_printf_float+0x1a4>
 8008d16:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d1c:	4299      	cmp	r1, r3
 8008d1e:	db05      	blt.n	8008d2c <_printf_float+0x1d4>
 8008d20:	6823      	ldr	r3, [r4, #0]
 8008d22:	6121      	str	r1, [r4, #16]
 8008d24:	07d8      	lsls	r0, r3, #31
 8008d26:	d5ea      	bpl.n	8008cfe <_printf_float+0x1a6>
 8008d28:	1c4b      	adds	r3, r1, #1
 8008d2a:	e7e7      	b.n	8008cfc <_printf_float+0x1a4>
 8008d2c:	2900      	cmp	r1, #0
 8008d2e:	bfd4      	ite	le
 8008d30:	f1c1 0202 	rsble	r2, r1, #2
 8008d34:	2201      	movgt	r2, #1
 8008d36:	4413      	add	r3, r2
 8008d38:	e7e0      	b.n	8008cfc <_printf_float+0x1a4>
 8008d3a:	6823      	ldr	r3, [r4, #0]
 8008d3c:	055a      	lsls	r2, r3, #21
 8008d3e:	d407      	bmi.n	8008d50 <_printf_float+0x1f8>
 8008d40:	6923      	ldr	r3, [r4, #16]
 8008d42:	4642      	mov	r2, r8
 8008d44:	4631      	mov	r1, r6
 8008d46:	4628      	mov	r0, r5
 8008d48:	47b8      	blx	r7
 8008d4a:	3001      	adds	r0, #1
 8008d4c:	d12c      	bne.n	8008da8 <_printf_float+0x250>
 8008d4e:	e764      	b.n	8008c1a <_printf_float+0xc2>
 8008d50:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d54:	f240 80e0 	bls.w	8008f18 <_printf_float+0x3c0>
 8008d58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	2300      	movs	r3, #0
 8008d60:	f7f7 feb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d64:	2800      	cmp	r0, #0
 8008d66:	d034      	beq.n	8008dd2 <_printf_float+0x27a>
 8008d68:	4a37      	ldr	r2, [pc, #220]	; (8008e48 <_printf_float+0x2f0>)
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	4631      	mov	r1, r6
 8008d6e:	4628      	mov	r0, r5
 8008d70:	47b8      	blx	r7
 8008d72:	3001      	adds	r0, #1
 8008d74:	f43f af51 	beq.w	8008c1a <_printf_float+0xc2>
 8008d78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	db02      	blt.n	8008d86 <_printf_float+0x22e>
 8008d80:	6823      	ldr	r3, [r4, #0]
 8008d82:	07d8      	lsls	r0, r3, #31
 8008d84:	d510      	bpl.n	8008da8 <_printf_float+0x250>
 8008d86:	ee18 3a10 	vmov	r3, s16
 8008d8a:	4652      	mov	r2, sl
 8008d8c:	4631      	mov	r1, r6
 8008d8e:	4628      	mov	r0, r5
 8008d90:	47b8      	blx	r7
 8008d92:	3001      	adds	r0, #1
 8008d94:	f43f af41 	beq.w	8008c1a <_printf_float+0xc2>
 8008d98:	f04f 0800 	mov.w	r8, #0
 8008d9c:	f104 091a 	add.w	r9, r4, #26
 8008da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008da2:	3b01      	subs	r3, #1
 8008da4:	4543      	cmp	r3, r8
 8008da6:	dc09      	bgt.n	8008dbc <_printf_float+0x264>
 8008da8:	6823      	ldr	r3, [r4, #0]
 8008daa:	079b      	lsls	r3, r3, #30
 8008dac:	f100 8105 	bmi.w	8008fba <_printf_float+0x462>
 8008db0:	68e0      	ldr	r0, [r4, #12]
 8008db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008db4:	4298      	cmp	r0, r3
 8008db6:	bfb8      	it	lt
 8008db8:	4618      	movlt	r0, r3
 8008dba:	e730      	b.n	8008c1e <_printf_float+0xc6>
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	464a      	mov	r2, r9
 8008dc0:	4631      	mov	r1, r6
 8008dc2:	4628      	mov	r0, r5
 8008dc4:	47b8      	blx	r7
 8008dc6:	3001      	adds	r0, #1
 8008dc8:	f43f af27 	beq.w	8008c1a <_printf_float+0xc2>
 8008dcc:	f108 0801 	add.w	r8, r8, #1
 8008dd0:	e7e6      	b.n	8008da0 <_printf_float+0x248>
 8008dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	dc39      	bgt.n	8008e4c <_printf_float+0x2f4>
 8008dd8:	4a1b      	ldr	r2, [pc, #108]	; (8008e48 <_printf_float+0x2f0>)
 8008dda:	2301      	movs	r3, #1
 8008ddc:	4631      	mov	r1, r6
 8008dde:	4628      	mov	r0, r5
 8008de0:	47b8      	blx	r7
 8008de2:	3001      	adds	r0, #1
 8008de4:	f43f af19 	beq.w	8008c1a <_printf_float+0xc2>
 8008de8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008dec:	4313      	orrs	r3, r2
 8008dee:	d102      	bne.n	8008df6 <_printf_float+0x29e>
 8008df0:	6823      	ldr	r3, [r4, #0]
 8008df2:	07d9      	lsls	r1, r3, #31
 8008df4:	d5d8      	bpl.n	8008da8 <_printf_float+0x250>
 8008df6:	ee18 3a10 	vmov	r3, s16
 8008dfa:	4652      	mov	r2, sl
 8008dfc:	4631      	mov	r1, r6
 8008dfe:	4628      	mov	r0, r5
 8008e00:	47b8      	blx	r7
 8008e02:	3001      	adds	r0, #1
 8008e04:	f43f af09 	beq.w	8008c1a <_printf_float+0xc2>
 8008e08:	f04f 0900 	mov.w	r9, #0
 8008e0c:	f104 0a1a 	add.w	sl, r4, #26
 8008e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e12:	425b      	negs	r3, r3
 8008e14:	454b      	cmp	r3, r9
 8008e16:	dc01      	bgt.n	8008e1c <_printf_float+0x2c4>
 8008e18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e1a:	e792      	b.n	8008d42 <_printf_float+0x1ea>
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	4652      	mov	r2, sl
 8008e20:	4631      	mov	r1, r6
 8008e22:	4628      	mov	r0, r5
 8008e24:	47b8      	blx	r7
 8008e26:	3001      	adds	r0, #1
 8008e28:	f43f aef7 	beq.w	8008c1a <_printf_float+0xc2>
 8008e2c:	f109 0901 	add.w	r9, r9, #1
 8008e30:	e7ee      	b.n	8008e10 <_printf_float+0x2b8>
 8008e32:	bf00      	nop
 8008e34:	7fefffff 	.word	0x7fefffff
 8008e38:	0800e0a8 	.word	0x0800e0a8
 8008e3c:	0800e0ac 	.word	0x0800e0ac
 8008e40:	0800e0b4 	.word	0x0800e0b4
 8008e44:	0800e0b0 	.word	0x0800e0b0
 8008e48:	0800e0b8 	.word	0x0800e0b8
 8008e4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e50:	429a      	cmp	r2, r3
 8008e52:	bfa8      	it	ge
 8008e54:	461a      	movge	r2, r3
 8008e56:	2a00      	cmp	r2, #0
 8008e58:	4691      	mov	r9, r2
 8008e5a:	dc37      	bgt.n	8008ecc <_printf_float+0x374>
 8008e5c:	f04f 0b00 	mov.w	fp, #0
 8008e60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e64:	f104 021a 	add.w	r2, r4, #26
 8008e68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e6a:	9305      	str	r3, [sp, #20]
 8008e6c:	eba3 0309 	sub.w	r3, r3, r9
 8008e70:	455b      	cmp	r3, fp
 8008e72:	dc33      	bgt.n	8008edc <_printf_float+0x384>
 8008e74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	db3b      	blt.n	8008ef4 <_printf_float+0x39c>
 8008e7c:	6823      	ldr	r3, [r4, #0]
 8008e7e:	07da      	lsls	r2, r3, #31
 8008e80:	d438      	bmi.n	8008ef4 <_printf_float+0x39c>
 8008e82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e84:	9a05      	ldr	r2, [sp, #20]
 8008e86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e88:	1a9a      	subs	r2, r3, r2
 8008e8a:	eba3 0901 	sub.w	r9, r3, r1
 8008e8e:	4591      	cmp	r9, r2
 8008e90:	bfa8      	it	ge
 8008e92:	4691      	movge	r9, r2
 8008e94:	f1b9 0f00 	cmp.w	r9, #0
 8008e98:	dc35      	bgt.n	8008f06 <_printf_float+0x3ae>
 8008e9a:	f04f 0800 	mov.w	r8, #0
 8008e9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ea2:	f104 0a1a 	add.w	sl, r4, #26
 8008ea6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008eaa:	1a9b      	subs	r3, r3, r2
 8008eac:	eba3 0309 	sub.w	r3, r3, r9
 8008eb0:	4543      	cmp	r3, r8
 8008eb2:	f77f af79 	ble.w	8008da8 <_printf_float+0x250>
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	4652      	mov	r2, sl
 8008eba:	4631      	mov	r1, r6
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	47b8      	blx	r7
 8008ec0:	3001      	adds	r0, #1
 8008ec2:	f43f aeaa 	beq.w	8008c1a <_printf_float+0xc2>
 8008ec6:	f108 0801 	add.w	r8, r8, #1
 8008eca:	e7ec      	b.n	8008ea6 <_printf_float+0x34e>
 8008ecc:	4613      	mov	r3, r2
 8008ece:	4631      	mov	r1, r6
 8008ed0:	4642      	mov	r2, r8
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	47b8      	blx	r7
 8008ed6:	3001      	adds	r0, #1
 8008ed8:	d1c0      	bne.n	8008e5c <_printf_float+0x304>
 8008eda:	e69e      	b.n	8008c1a <_printf_float+0xc2>
 8008edc:	2301      	movs	r3, #1
 8008ede:	4631      	mov	r1, r6
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	9205      	str	r2, [sp, #20]
 8008ee4:	47b8      	blx	r7
 8008ee6:	3001      	adds	r0, #1
 8008ee8:	f43f ae97 	beq.w	8008c1a <_printf_float+0xc2>
 8008eec:	9a05      	ldr	r2, [sp, #20]
 8008eee:	f10b 0b01 	add.w	fp, fp, #1
 8008ef2:	e7b9      	b.n	8008e68 <_printf_float+0x310>
 8008ef4:	ee18 3a10 	vmov	r3, s16
 8008ef8:	4652      	mov	r2, sl
 8008efa:	4631      	mov	r1, r6
 8008efc:	4628      	mov	r0, r5
 8008efe:	47b8      	blx	r7
 8008f00:	3001      	adds	r0, #1
 8008f02:	d1be      	bne.n	8008e82 <_printf_float+0x32a>
 8008f04:	e689      	b.n	8008c1a <_printf_float+0xc2>
 8008f06:	9a05      	ldr	r2, [sp, #20]
 8008f08:	464b      	mov	r3, r9
 8008f0a:	4442      	add	r2, r8
 8008f0c:	4631      	mov	r1, r6
 8008f0e:	4628      	mov	r0, r5
 8008f10:	47b8      	blx	r7
 8008f12:	3001      	adds	r0, #1
 8008f14:	d1c1      	bne.n	8008e9a <_printf_float+0x342>
 8008f16:	e680      	b.n	8008c1a <_printf_float+0xc2>
 8008f18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f1a:	2a01      	cmp	r2, #1
 8008f1c:	dc01      	bgt.n	8008f22 <_printf_float+0x3ca>
 8008f1e:	07db      	lsls	r3, r3, #31
 8008f20:	d538      	bpl.n	8008f94 <_printf_float+0x43c>
 8008f22:	2301      	movs	r3, #1
 8008f24:	4642      	mov	r2, r8
 8008f26:	4631      	mov	r1, r6
 8008f28:	4628      	mov	r0, r5
 8008f2a:	47b8      	blx	r7
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	f43f ae74 	beq.w	8008c1a <_printf_float+0xc2>
 8008f32:	ee18 3a10 	vmov	r3, s16
 8008f36:	4652      	mov	r2, sl
 8008f38:	4631      	mov	r1, r6
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	47b8      	blx	r7
 8008f3e:	3001      	adds	r0, #1
 8008f40:	f43f ae6b 	beq.w	8008c1a <_printf_float+0xc2>
 8008f44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f48:	2200      	movs	r2, #0
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	f7f7 fdbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f50:	b9d8      	cbnz	r0, 8008f8a <_printf_float+0x432>
 8008f52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f54:	f108 0201 	add.w	r2, r8, #1
 8008f58:	3b01      	subs	r3, #1
 8008f5a:	4631      	mov	r1, r6
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	47b8      	blx	r7
 8008f60:	3001      	adds	r0, #1
 8008f62:	d10e      	bne.n	8008f82 <_printf_float+0x42a>
 8008f64:	e659      	b.n	8008c1a <_printf_float+0xc2>
 8008f66:	2301      	movs	r3, #1
 8008f68:	4652      	mov	r2, sl
 8008f6a:	4631      	mov	r1, r6
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	47b8      	blx	r7
 8008f70:	3001      	adds	r0, #1
 8008f72:	f43f ae52 	beq.w	8008c1a <_printf_float+0xc2>
 8008f76:	f108 0801 	add.w	r8, r8, #1
 8008f7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	4543      	cmp	r3, r8
 8008f80:	dcf1      	bgt.n	8008f66 <_printf_float+0x40e>
 8008f82:	464b      	mov	r3, r9
 8008f84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008f88:	e6dc      	b.n	8008d44 <_printf_float+0x1ec>
 8008f8a:	f04f 0800 	mov.w	r8, #0
 8008f8e:	f104 0a1a 	add.w	sl, r4, #26
 8008f92:	e7f2      	b.n	8008f7a <_printf_float+0x422>
 8008f94:	2301      	movs	r3, #1
 8008f96:	4642      	mov	r2, r8
 8008f98:	e7df      	b.n	8008f5a <_printf_float+0x402>
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	464a      	mov	r2, r9
 8008f9e:	4631      	mov	r1, r6
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	47b8      	blx	r7
 8008fa4:	3001      	adds	r0, #1
 8008fa6:	f43f ae38 	beq.w	8008c1a <_printf_float+0xc2>
 8008faa:	f108 0801 	add.w	r8, r8, #1
 8008fae:	68e3      	ldr	r3, [r4, #12]
 8008fb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008fb2:	1a5b      	subs	r3, r3, r1
 8008fb4:	4543      	cmp	r3, r8
 8008fb6:	dcf0      	bgt.n	8008f9a <_printf_float+0x442>
 8008fb8:	e6fa      	b.n	8008db0 <_printf_float+0x258>
 8008fba:	f04f 0800 	mov.w	r8, #0
 8008fbe:	f104 0919 	add.w	r9, r4, #25
 8008fc2:	e7f4      	b.n	8008fae <_printf_float+0x456>

08008fc4 <_printf_common>:
 8008fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc8:	4616      	mov	r6, r2
 8008fca:	4699      	mov	r9, r3
 8008fcc:	688a      	ldr	r2, [r1, #8]
 8008fce:	690b      	ldr	r3, [r1, #16]
 8008fd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	bfb8      	it	lt
 8008fd8:	4613      	movlt	r3, r2
 8008fda:	6033      	str	r3, [r6, #0]
 8008fdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008fe0:	4607      	mov	r7, r0
 8008fe2:	460c      	mov	r4, r1
 8008fe4:	b10a      	cbz	r2, 8008fea <_printf_common+0x26>
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	6033      	str	r3, [r6, #0]
 8008fea:	6823      	ldr	r3, [r4, #0]
 8008fec:	0699      	lsls	r1, r3, #26
 8008fee:	bf42      	ittt	mi
 8008ff0:	6833      	ldrmi	r3, [r6, #0]
 8008ff2:	3302      	addmi	r3, #2
 8008ff4:	6033      	strmi	r3, [r6, #0]
 8008ff6:	6825      	ldr	r5, [r4, #0]
 8008ff8:	f015 0506 	ands.w	r5, r5, #6
 8008ffc:	d106      	bne.n	800900c <_printf_common+0x48>
 8008ffe:	f104 0a19 	add.w	sl, r4, #25
 8009002:	68e3      	ldr	r3, [r4, #12]
 8009004:	6832      	ldr	r2, [r6, #0]
 8009006:	1a9b      	subs	r3, r3, r2
 8009008:	42ab      	cmp	r3, r5
 800900a:	dc26      	bgt.n	800905a <_printf_common+0x96>
 800900c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009010:	1e13      	subs	r3, r2, #0
 8009012:	6822      	ldr	r2, [r4, #0]
 8009014:	bf18      	it	ne
 8009016:	2301      	movne	r3, #1
 8009018:	0692      	lsls	r2, r2, #26
 800901a:	d42b      	bmi.n	8009074 <_printf_common+0xb0>
 800901c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009020:	4649      	mov	r1, r9
 8009022:	4638      	mov	r0, r7
 8009024:	47c0      	blx	r8
 8009026:	3001      	adds	r0, #1
 8009028:	d01e      	beq.n	8009068 <_printf_common+0xa4>
 800902a:	6823      	ldr	r3, [r4, #0]
 800902c:	68e5      	ldr	r5, [r4, #12]
 800902e:	6832      	ldr	r2, [r6, #0]
 8009030:	f003 0306 	and.w	r3, r3, #6
 8009034:	2b04      	cmp	r3, #4
 8009036:	bf08      	it	eq
 8009038:	1aad      	subeq	r5, r5, r2
 800903a:	68a3      	ldr	r3, [r4, #8]
 800903c:	6922      	ldr	r2, [r4, #16]
 800903e:	bf0c      	ite	eq
 8009040:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009044:	2500      	movne	r5, #0
 8009046:	4293      	cmp	r3, r2
 8009048:	bfc4      	itt	gt
 800904a:	1a9b      	subgt	r3, r3, r2
 800904c:	18ed      	addgt	r5, r5, r3
 800904e:	2600      	movs	r6, #0
 8009050:	341a      	adds	r4, #26
 8009052:	42b5      	cmp	r5, r6
 8009054:	d11a      	bne.n	800908c <_printf_common+0xc8>
 8009056:	2000      	movs	r0, #0
 8009058:	e008      	b.n	800906c <_printf_common+0xa8>
 800905a:	2301      	movs	r3, #1
 800905c:	4652      	mov	r2, sl
 800905e:	4649      	mov	r1, r9
 8009060:	4638      	mov	r0, r7
 8009062:	47c0      	blx	r8
 8009064:	3001      	adds	r0, #1
 8009066:	d103      	bne.n	8009070 <_printf_common+0xac>
 8009068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800906c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009070:	3501      	adds	r5, #1
 8009072:	e7c6      	b.n	8009002 <_printf_common+0x3e>
 8009074:	18e1      	adds	r1, r4, r3
 8009076:	1c5a      	adds	r2, r3, #1
 8009078:	2030      	movs	r0, #48	; 0x30
 800907a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800907e:	4422      	add	r2, r4
 8009080:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009084:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009088:	3302      	adds	r3, #2
 800908a:	e7c7      	b.n	800901c <_printf_common+0x58>
 800908c:	2301      	movs	r3, #1
 800908e:	4622      	mov	r2, r4
 8009090:	4649      	mov	r1, r9
 8009092:	4638      	mov	r0, r7
 8009094:	47c0      	blx	r8
 8009096:	3001      	adds	r0, #1
 8009098:	d0e6      	beq.n	8009068 <_printf_common+0xa4>
 800909a:	3601      	adds	r6, #1
 800909c:	e7d9      	b.n	8009052 <_printf_common+0x8e>
	...

080090a0 <_printf_i>:
 80090a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090a4:	7e0f      	ldrb	r7, [r1, #24]
 80090a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80090a8:	2f78      	cmp	r7, #120	; 0x78
 80090aa:	4691      	mov	r9, r2
 80090ac:	4680      	mov	r8, r0
 80090ae:	460c      	mov	r4, r1
 80090b0:	469a      	mov	sl, r3
 80090b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80090b6:	d807      	bhi.n	80090c8 <_printf_i+0x28>
 80090b8:	2f62      	cmp	r7, #98	; 0x62
 80090ba:	d80a      	bhi.n	80090d2 <_printf_i+0x32>
 80090bc:	2f00      	cmp	r7, #0
 80090be:	f000 80d8 	beq.w	8009272 <_printf_i+0x1d2>
 80090c2:	2f58      	cmp	r7, #88	; 0x58
 80090c4:	f000 80a3 	beq.w	800920e <_printf_i+0x16e>
 80090c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80090d0:	e03a      	b.n	8009148 <_printf_i+0xa8>
 80090d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80090d6:	2b15      	cmp	r3, #21
 80090d8:	d8f6      	bhi.n	80090c8 <_printf_i+0x28>
 80090da:	a101      	add	r1, pc, #4	; (adr r1, 80090e0 <_printf_i+0x40>)
 80090dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80090e0:	08009139 	.word	0x08009139
 80090e4:	0800914d 	.word	0x0800914d
 80090e8:	080090c9 	.word	0x080090c9
 80090ec:	080090c9 	.word	0x080090c9
 80090f0:	080090c9 	.word	0x080090c9
 80090f4:	080090c9 	.word	0x080090c9
 80090f8:	0800914d 	.word	0x0800914d
 80090fc:	080090c9 	.word	0x080090c9
 8009100:	080090c9 	.word	0x080090c9
 8009104:	080090c9 	.word	0x080090c9
 8009108:	080090c9 	.word	0x080090c9
 800910c:	08009259 	.word	0x08009259
 8009110:	0800917d 	.word	0x0800917d
 8009114:	0800923b 	.word	0x0800923b
 8009118:	080090c9 	.word	0x080090c9
 800911c:	080090c9 	.word	0x080090c9
 8009120:	0800927b 	.word	0x0800927b
 8009124:	080090c9 	.word	0x080090c9
 8009128:	0800917d 	.word	0x0800917d
 800912c:	080090c9 	.word	0x080090c9
 8009130:	080090c9 	.word	0x080090c9
 8009134:	08009243 	.word	0x08009243
 8009138:	682b      	ldr	r3, [r5, #0]
 800913a:	1d1a      	adds	r2, r3, #4
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	602a      	str	r2, [r5, #0]
 8009140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009144:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009148:	2301      	movs	r3, #1
 800914a:	e0a3      	b.n	8009294 <_printf_i+0x1f4>
 800914c:	6820      	ldr	r0, [r4, #0]
 800914e:	6829      	ldr	r1, [r5, #0]
 8009150:	0606      	lsls	r6, r0, #24
 8009152:	f101 0304 	add.w	r3, r1, #4
 8009156:	d50a      	bpl.n	800916e <_printf_i+0xce>
 8009158:	680e      	ldr	r6, [r1, #0]
 800915a:	602b      	str	r3, [r5, #0]
 800915c:	2e00      	cmp	r6, #0
 800915e:	da03      	bge.n	8009168 <_printf_i+0xc8>
 8009160:	232d      	movs	r3, #45	; 0x2d
 8009162:	4276      	negs	r6, r6
 8009164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009168:	485e      	ldr	r0, [pc, #376]	; (80092e4 <_printf_i+0x244>)
 800916a:	230a      	movs	r3, #10
 800916c:	e019      	b.n	80091a2 <_printf_i+0x102>
 800916e:	680e      	ldr	r6, [r1, #0]
 8009170:	602b      	str	r3, [r5, #0]
 8009172:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009176:	bf18      	it	ne
 8009178:	b236      	sxthne	r6, r6
 800917a:	e7ef      	b.n	800915c <_printf_i+0xbc>
 800917c:	682b      	ldr	r3, [r5, #0]
 800917e:	6820      	ldr	r0, [r4, #0]
 8009180:	1d19      	adds	r1, r3, #4
 8009182:	6029      	str	r1, [r5, #0]
 8009184:	0601      	lsls	r1, r0, #24
 8009186:	d501      	bpl.n	800918c <_printf_i+0xec>
 8009188:	681e      	ldr	r6, [r3, #0]
 800918a:	e002      	b.n	8009192 <_printf_i+0xf2>
 800918c:	0646      	lsls	r6, r0, #25
 800918e:	d5fb      	bpl.n	8009188 <_printf_i+0xe8>
 8009190:	881e      	ldrh	r6, [r3, #0]
 8009192:	4854      	ldr	r0, [pc, #336]	; (80092e4 <_printf_i+0x244>)
 8009194:	2f6f      	cmp	r7, #111	; 0x6f
 8009196:	bf0c      	ite	eq
 8009198:	2308      	moveq	r3, #8
 800919a:	230a      	movne	r3, #10
 800919c:	2100      	movs	r1, #0
 800919e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091a2:	6865      	ldr	r5, [r4, #4]
 80091a4:	60a5      	str	r5, [r4, #8]
 80091a6:	2d00      	cmp	r5, #0
 80091a8:	bfa2      	ittt	ge
 80091aa:	6821      	ldrge	r1, [r4, #0]
 80091ac:	f021 0104 	bicge.w	r1, r1, #4
 80091b0:	6021      	strge	r1, [r4, #0]
 80091b2:	b90e      	cbnz	r6, 80091b8 <_printf_i+0x118>
 80091b4:	2d00      	cmp	r5, #0
 80091b6:	d04d      	beq.n	8009254 <_printf_i+0x1b4>
 80091b8:	4615      	mov	r5, r2
 80091ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80091be:	fb03 6711 	mls	r7, r3, r1, r6
 80091c2:	5dc7      	ldrb	r7, [r0, r7]
 80091c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80091c8:	4637      	mov	r7, r6
 80091ca:	42bb      	cmp	r3, r7
 80091cc:	460e      	mov	r6, r1
 80091ce:	d9f4      	bls.n	80091ba <_printf_i+0x11a>
 80091d0:	2b08      	cmp	r3, #8
 80091d2:	d10b      	bne.n	80091ec <_printf_i+0x14c>
 80091d4:	6823      	ldr	r3, [r4, #0]
 80091d6:	07de      	lsls	r6, r3, #31
 80091d8:	d508      	bpl.n	80091ec <_printf_i+0x14c>
 80091da:	6923      	ldr	r3, [r4, #16]
 80091dc:	6861      	ldr	r1, [r4, #4]
 80091de:	4299      	cmp	r1, r3
 80091e0:	bfde      	ittt	le
 80091e2:	2330      	movle	r3, #48	; 0x30
 80091e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80091e8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80091ec:	1b52      	subs	r2, r2, r5
 80091ee:	6122      	str	r2, [r4, #16]
 80091f0:	f8cd a000 	str.w	sl, [sp]
 80091f4:	464b      	mov	r3, r9
 80091f6:	aa03      	add	r2, sp, #12
 80091f8:	4621      	mov	r1, r4
 80091fa:	4640      	mov	r0, r8
 80091fc:	f7ff fee2 	bl	8008fc4 <_printf_common>
 8009200:	3001      	adds	r0, #1
 8009202:	d14c      	bne.n	800929e <_printf_i+0x1fe>
 8009204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009208:	b004      	add	sp, #16
 800920a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800920e:	4835      	ldr	r0, [pc, #212]	; (80092e4 <_printf_i+0x244>)
 8009210:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009214:	6829      	ldr	r1, [r5, #0]
 8009216:	6823      	ldr	r3, [r4, #0]
 8009218:	f851 6b04 	ldr.w	r6, [r1], #4
 800921c:	6029      	str	r1, [r5, #0]
 800921e:	061d      	lsls	r5, r3, #24
 8009220:	d514      	bpl.n	800924c <_printf_i+0x1ac>
 8009222:	07df      	lsls	r7, r3, #31
 8009224:	bf44      	itt	mi
 8009226:	f043 0320 	orrmi.w	r3, r3, #32
 800922a:	6023      	strmi	r3, [r4, #0]
 800922c:	b91e      	cbnz	r6, 8009236 <_printf_i+0x196>
 800922e:	6823      	ldr	r3, [r4, #0]
 8009230:	f023 0320 	bic.w	r3, r3, #32
 8009234:	6023      	str	r3, [r4, #0]
 8009236:	2310      	movs	r3, #16
 8009238:	e7b0      	b.n	800919c <_printf_i+0xfc>
 800923a:	6823      	ldr	r3, [r4, #0]
 800923c:	f043 0320 	orr.w	r3, r3, #32
 8009240:	6023      	str	r3, [r4, #0]
 8009242:	2378      	movs	r3, #120	; 0x78
 8009244:	4828      	ldr	r0, [pc, #160]	; (80092e8 <_printf_i+0x248>)
 8009246:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800924a:	e7e3      	b.n	8009214 <_printf_i+0x174>
 800924c:	0659      	lsls	r1, r3, #25
 800924e:	bf48      	it	mi
 8009250:	b2b6      	uxthmi	r6, r6
 8009252:	e7e6      	b.n	8009222 <_printf_i+0x182>
 8009254:	4615      	mov	r5, r2
 8009256:	e7bb      	b.n	80091d0 <_printf_i+0x130>
 8009258:	682b      	ldr	r3, [r5, #0]
 800925a:	6826      	ldr	r6, [r4, #0]
 800925c:	6961      	ldr	r1, [r4, #20]
 800925e:	1d18      	adds	r0, r3, #4
 8009260:	6028      	str	r0, [r5, #0]
 8009262:	0635      	lsls	r5, r6, #24
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	d501      	bpl.n	800926c <_printf_i+0x1cc>
 8009268:	6019      	str	r1, [r3, #0]
 800926a:	e002      	b.n	8009272 <_printf_i+0x1d2>
 800926c:	0670      	lsls	r0, r6, #25
 800926e:	d5fb      	bpl.n	8009268 <_printf_i+0x1c8>
 8009270:	8019      	strh	r1, [r3, #0]
 8009272:	2300      	movs	r3, #0
 8009274:	6123      	str	r3, [r4, #16]
 8009276:	4615      	mov	r5, r2
 8009278:	e7ba      	b.n	80091f0 <_printf_i+0x150>
 800927a:	682b      	ldr	r3, [r5, #0]
 800927c:	1d1a      	adds	r2, r3, #4
 800927e:	602a      	str	r2, [r5, #0]
 8009280:	681d      	ldr	r5, [r3, #0]
 8009282:	6862      	ldr	r2, [r4, #4]
 8009284:	2100      	movs	r1, #0
 8009286:	4628      	mov	r0, r5
 8009288:	f7f6 ffaa 	bl	80001e0 <memchr>
 800928c:	b108      	cbz	r0, 8009292 <_printf_i+0x1f2>
 800928e:	1b40      	subs	r0, r0, r5
 8009290:	6060      	str	r0, [r4, #4]
 8009292:	6863      	ldr	r3, [r4, #4]
 8009294:	6123      	str	r3, [r4, #16]
 8009296:	2300      	movs	r3, #0
 8009298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800929c:	e7a8      	b.n	80091f0 <_printf_i+0x150>
 800929e:	6923      	ldr	r3, [r4, #16]
 80092a0:	462a      	mov	r2, r5
 80092a2:	4649      	mov	r1, r9
 80092a4:	4640      	mov	r0, r8
 80092a6:	47d0      	blx	sl
 80092a8:	3001      	adds	r0, #1
 80092aa:	d0ab      	beq.n	8009204 <_printf_i+0x164>
 80092ac:	6823      	ldr	r3, [r4, #0]
 80092ae:	079b      	lsls	r3, r3, #30
 80092b0:	d413      	bmi.n	80092da <_printf_i+0x23a>
 80092b2:	68e0      	ldr	r0, [r4, #12]
 80092b4:	9b03      	ldr	r3, [sp, #12]
 80092b6:	4298      	cmp	r0, r3
 80092b8:	bfb8      	it	lt
 80092ba:	4618      	movlt	r0, r3
 80092bc:	e7a4      	b.n	8009208 <_printf_i+0x168>
 80092be:	2301      	movs	r3, #1
 80092c0:	4632      	mov	r2, r6
 80092c2:	4649      	mov	r1, r9
 80092c4:	4640      	mov	r0, r8
 80092c6:	47d0      	blx	sl
 80092c8:	3001      	adds	r0, #1
 80092ca:	d09b      	beq.n	8009204 <_printf_i+0x164>
 80092cc:	3501      	adds	r5, #1
 80092ce:	68e3      	ldr	r3, [r4, #12]
 80092d0:	9903      	ldr	r1, [sp, #12]
 80092d2:	1a5b      	subs	r3, r3, r1
 80092d4:	42ab      	cmp	r3, r5
 80092d6:	dcf2      	bgt.n	80092be <_printf_i+0x21e>
 80092d8:	e7eb      	b.n	80092b2 <_printf_i+0x212>
 80092da:	2500      	movs	r5, #0
 80092dc:	f104 0619 	add.w	r6, r4, #25
 80092e0:	e7f5      	b.n	80092ce <_printf_i+0x22e>
 80092e2:	bf00      	nop
 80092e4:	0800e0ba 	.word	0x0800e0ba
 80092e8:	0800e0cb 	.word	0x0800e0cb

080092ec <iprintf>:
 80092ec:	b40f      	push	{r0, r1, r2, r3}
 80092ee:	4b0a      	ldr	r3, [pc, #40]	; (8009318 <iprintf+0x2c>)
 80092f0:	b513      	push	{r0, r1, r4, lr}
 80092f2:	681c      	ldr	r4, [r3, #0]
 80092f4:	b124      	cbz	r4, 8009300 <iprintf+0x14>
 80092f6:	69a3      	ldr	r3, [r4, #24]
 80092f8:	b913      	cbnz	r3, 8009300 <iprintf+0x14>
 80092fa:	4620      	mov	r0, r4
 80092fc:	f000 fee2 	bl	800a0c4 <__sinit>
 8009300:	ab05      	add	r3, sp, #20
 8009302:	9a04      	ldr	r2, [sp, #16]
 8009304:	68a1      	ldr	r1, [r4, #8]
 8009306:	9301      	str	r3, [sp, #4]
 8009308:	4620      	mov	r0, r4
 800930a:	f001 fc2d 	bl	800ab68 <_vfiprintf_r>
 800930e:	b002      	add	sp, #8
 8009310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009314:	b004      	add	sp, #16
 8009316:	4770      	bx	lr
 8009318:	2000000c 	.word	0x2000000c

0800931c <quorem>:
 800931c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009320:	6903      	ldr	r3, [r0, #16]
 8009322:	690c      	ldr	r4, [r1, #16]
 8009324:	42a3      	cmp	r3, r4
 8009326:	4607      	mov	r7, r0
 8009328:	f2c0 8081 	blt.w	800942e <quorem+0x112>
 800932c:	3c01      	subs	r4, #1
 800932e:	f101 0814 	add.w	r8, r1, #20
 8009332:	f100 0514 	add.w	r5, r0, #20
 8009336:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800933a:	9301      	str	r3, [sp, #4]
 800933c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009340:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009344:	3301      	adds	r3, #1
 8009346:	429a      	cmp	r2, r3
 8009348:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800934c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009350:	fbb2 f6f3 	udiv	r6, r2, r3
 8009354:	d331      	bcc.n	80093ba <quorem+0x9e>
 8009356:	f04f 0e00 	mov.w	lr, #0
 800935a:	4640      	mov	r0, r8
 800935c:	46ac      	mov	ip, r5
 800935e:	46f2      	mov	sl, lr
 8009360:	f850 2b04 	ldr.w	r2, [r0], #4
 8009364:	b293      	uxth	r3, r2
 8009366:	fb06 e303 	mla	r3, r6, r3, lr
 800936a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800936e:	b29b      	uxth	r3, r3
 8009370:	ebaa 0303 	sub.w	r3, sl, r3
 8009374:	f8dc a000 	ldr.w	sl, [ip]
 8009378:	0c12      	lsrs	r2, r2, #16
 800937a:	fa13 f38a 	uxtah	r3, r3, sl
 800937e:	fb06 e202 	mla	r2, r6, r2, lr
 8009382:	9300      	str	r3, [sp, #0]
 8009384:	9b00      	ldr	r3, [sp, #0]
 8009386:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800938a:	b292      	uxth	r2, r2
 800938c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009390:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009394:	f8bd 3000 	ldrh.w	r3, [sp]
 8009398:	4581      	cmp	r9, r0
 800939a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800939e:	f84c 3b04 	str.w	r3, [ip], #4
 80093a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80093a6:	d2db      	bcs.n	8009360 <quorem+0x44>
 80093a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80093ac:	b92b      	cbnz	r3, 80093ba <quorem+0x9e>
 80093ae:	9b01      	ldr	r3, [sp, #4]
 80093b0:	3b04      	subs	r3, #4
 80093b2:	429d      	cmp	r5, r3
 80093b4:	461a      	mov	r2, r3
 80093b6:	d32e      	bcc.n	8009416 <quorem+0xfa>
 80093b8:	613c      	str	r4, [r7, #16]
 80093ba:	4638      	mov	r0, r7
 80093bc:	f001 f9b2 	bl	800a724 <__mcmp>
 80093c0:	2800      	cmp	r0, #0
 80093c2:	db24      	blt.n	800940e <quorem+0xf2>
 80093c4:	3601      	adds	r6, #1
 80093c6:	4628      	mov	r0, r5
 80093c8:	f04f 0c00 	mov.w	ip, #0
 80093cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80093d0:	f8d0 e000 	ldr.w	lr, [r0]
 80093d4:	b293      	uxth	r3, r2
 80093d6:	ebac 0303 	sub.w	r3, ip, r3
 80093da:	0c12      	lsrs	r2, r2, #16
 80093dc:	fa13 f38e 	uxtah	r3, r3, lr
 80093e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80093e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093ee:	45c1      	cmp	r9, r8
 80093f0:	f840 3b04 	str.w	r3, [r0], #4
 80093f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80093f8:	d2e8      	bcs.n	80093cc <quorem+0xb0>
 80093fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009402:	b922      	cbnz	r2, 800940e <quorem+0xf2>
 8009404:	3b04      	subs	r3, #4
 8009406:	429d      	cmp	r5, r3
 8009408:	461a      	mov	r2, r3
 800940a:	d30a      	bcc.n	8009422 <quorem+0x106>
 800940c:	613c      	str	r4, [r7, #16]
 800940e:	4630      	mov	r0, r6
 8009410:	b003      	add	sp, #12
 8009412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009416:	6812      	ldr	r2, [r2, #0]
 8009418:	3b04      	subs	r3, #4
 800941a:	2a00      	cmp	r2, #0
 800941c:	d1cc      	bne.n	80093b8 <quorem+0x9c>
 800941e:	3c01      	subs	r4, #1
 8009420:	e7c7      	b.n	80093b2 <quorem+0x96>
 8009422:	6812      	ldr	r2, [r2, #0]
 8009424:	3b04      	subs	r3, #4
 8009426:	2a00      	cmp	r2, #0
 8009428:	d1f0      	bne.n	800940c <quorem+0xf0>
 800942a:	3c01      	subs	r4, #1
 800942c:	e7eb      	b.n	8009406 <quorem+0xea>
 800942e:	2000      	movs	r0, #0
 8009430:	e7ee      	b.n	8009410 <quorem+0xf4>
 8009432:	0000      	movs	r0, r0
 8009434:	0000      	movs	r0, r0
	...

08009438 <_dtoa_r>:
 8009438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800943c:	ed2d 8b04 	vpush	{d8-d9}
 8009440:	ec57 6b10 	vmov	r6, r7, d0
 8009444:	b093      	sub	sp, #76	; 0x4c
 8009446:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009448:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800944c:	9106      	str	r1, [sp, #24]
 800944e:	ee10 aa10 	vmov	sl, s0
 8009452:	4604      	mov	r4, r0
 8009454:	9209      	str	r2, [sp, #36]	; 0x24
 8009456:	930c      	str	r3, [sp, #48]	; 0x30
 8009458:	46bb      	mov	fp, r7
 800945a:	b975      	cbnz	r5, 800947a <_dtoa_r+0x42>
 800945c:	2010      	movs	r0, #16
 800945e:	f000 fed7 	bl	800a210 <malloc>
 8009462:	4602      	mov	r2, r0
 8009464:	6260      	str	r0, [r4, #36]	; 0x24
 8009466:	b920      	cbnz	r0, 8009472 <_dtoa_r+0x3a>
 8009468:	4ba7      	ldr	r3, [pc, #668]	; (8009708 <_dtoa_r+0x2d0>)
 800946a:	21ea      	movs	r1, #234	; 0xea
 800946c:	48a7      	ldr	r0, [pc, #668]	; (800970c <_dtoa_r+0x2d4>)
 800946e:	f001 fdd1 	bl	800b014 <__assert_func>
 8009472:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009476:	6005      	str	r5, [r0, #0]
 8009478:	60c5      	str	r5, [r0, #12]
 800947a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800947c:	6819      	ldr	r1, [r3, #0]
 800947e:	b151      	cbz	r1, 8009496 <_dtoa_r+0x5e>
 8009480:	685a      	ldr	r2, [r3, #4]
 8009482:	604a      	str	r2, [r1, #4]
 8009484:	2301      	movs	r3, #1
 8009486:	4093      	lsls	r3, r2
 8009488:	608b      	str	r3, [r1, #8]
 800948a:	4620      	mov	r0, r4
 800948c:	f000 ff08 	bl	800a2a0 <_Bfree>
 8009490:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009492:	2200      	movs	r2, #0
 8009494:	601a      	str	r2, [r3, #0]
 8009496:	1e3b      	subs	r3, r7, #0
 8009498:	bfaa      	itet	ge
 800949a:	2300      	movge	r3, #0
 800949c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80094a0:	f8c8 3000 	strge.w	r3, [r8]
 80094a4:	4b9a      	ldr	r3, [pc, #616]	; (8009710 <_dtoa_r+0x2d8>)
 80094a6:	bfbc      	itt	lt
 80094a8:	2201      	movlt	r2, #1
 80094aa:	f8c8 2000 	strlt.w	r2, [r8]
 80094ae:	ea33 030b 	bics.w	r3, r3, fp
 80094b2:	d11b      	bne.n	80094ec <_dtoa_r+0xb4>
 80094b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80094ba:	6013      	str	r3, [r2, #0]
 80094bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094c0:	4333      	orrs	r3, r6
 80094c2:	f000 8592 	beq.w	8009fea <_dtoa_r+0xbb2>
 80094c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094c8:	b963      	cbnz	r3, 80094e4 <_dtoa_r+0xac>
 80094ca:	4b92      	ldr	r3, [pc, #584]	; (8009714 <_dtoa_r+0x2dc>)
 80094cc:	e022      	b.n	8009514 <_dtoa_r+0xdc>
 80094ce:	4b92      	ldr	r3, [pc, #584]	; (8009718 <_dtoa_r+0x2e0>)
 80094d0:	9301      	str	r3, [sp, #4]
 80094d2:	3308      	adds	r3, #8
 80094d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80094d6:	6013      	str	r3, [r2, #0]
 80094d8:	9801      	ldr	r0, [sp, #4]
 80094da:	b013      	add	sp, #76	; 0x4c
 80094dc:	ecbd 8b04 	vpop	{d8-d9}
 80094e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094e4:	4b8b      	ldr	r3, [pc, #556]	; (8009714 <_dtoa_r+0x2dc>)
 80094e6:	9301      	str	r3, [sp, #4]
 80094e8:	3303      	adds	r3, #3
 80094ea:	e7f3      	b.n	80094d4 <_dtoa_r+0x9c>
 80094ec:	2200      	movs	r2, #0
 80094ee:	2300      	movs	r3, #0
 80094f0:	4650      	mov	r0, sl
 80094f2:	4659      	mov	r1, fp
 80094f4:	f7f7 fae8 	bl	8000ac8 <__aeabi_dcmpeq>
 80094f8:	ec4b ab19 	vmov	d9, sl, fp
 80094fc:	4680      	mov	r8, r0
 80094fe:	b158      	cbz	r0, 8009518 <_dtoa_r+0xe0>
 8009500:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009502:	2301      	movs	r3, #1
 8009504:	6013      	str	r3, [r2, #0]
 8009506:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009508:	2b00      	cmp	r3, #0
 800950a:	f000 856b 	beq.w	8009fe4 <_dtoa_r+0xbac>
 800950e:	4883      	ldr	r0, [pc, #524]	; (800971c <_dtoa_r+0x2e4>)
 8009510:	6018      	str	r0, [r3, #0]
 8009512:	1e43      	subs	r3, r0, #1
 8009514:	9301      	str	r3, [sp, #4]
 8009516:	e7df      	b.n	80094d8 <_dtoa_r+0xa0>
 8009518:	ec4b ab10 	vmov	d0, sl, fp
 800951c:	aa10      	add	r2, sp, #64	; 0x40
 800951e:	a911      	add	r1, sp, #68	; 0x44
 8009520:	4620      	mov	r0, r4
 8009522:	f001 f9a5 	bl	800a870 <__d2b>
 8009526:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800952a:	ee08 0a10 	vmov	s16, r0
 800952e:	2d00      	cmp	r5, #0
 8009530:	f000 8084 	beq.w	800963c <_dtoa_r+0x204>
 8009534:	ee19 3a90 	vmov	r3, s19
 8009538:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800953c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009540:	4656      	mov	r6, sl
 8009542:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009546:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800954a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800954e:	4b74      	ldr	r3, [pc, #464]	; (8009720 <_dtoa_r+0x2e8>)
 8009550:	2200      	movs	r2, #0
 8009552:	4630      	mov	r0, r6
 8009554:	4639      	mov	r1, r7
 8009556:	f7f6 fe97 	bl	8000288 <__aeabi_dsub>
 800955a:	a365      	add	r3, pc, #404	; (adr r3, 80096f0 <_dtoa_r+0x2b8>)
 800955c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009560:	f7f7 f84a 	bl	80005f8 <__aeabi_dmul>
 8009564:	a364      	add	r3, pc, #400	; (adr r3, 80096f8 <_dtoa_r+0x2c0>)
 8009566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956a:	f7f6 fe8f 	bl	800028c <__adddf3>
 800956e:	4606      	mov	r6, r0
 8009570:	4628      	mov	r0, r5
 8009572:	460f      	mov	r7, r1
 8009574:	f7f6 ffd6 	bl	8000524 <__aeabi_i2d>
 8009578:	a361      	add	r3, pc, #388	; (adr r3, 8009700 <_dtoa_r+0x2c8>)
 800957a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957e:	f7f7 f83b 	bl	80005f8 <__aeabi_dmul>
 8009582:	4602      	mov	r2, r0
 8009584:	460b      	mov	r3, r1
 8009586:	4630      	mov	r0, r6
 8009588:	4639      	mov	r1, r7
 800958a:	f7f6 fe7f 	bl	800028c <__adddf3>
 800958e:	4606      	mov	r6, r0
 8009590:	460f      	mov	r7, r1
 8009592:	f7f7 fae1 	bl	8000b58 <__aeabi_d2iz>
 8009596:	2200      	movs	r2, #0
 8009598:	9000      	str	r0, [sp, #0]
 800959a:	2300      	movs	r3, #0
 800959c:	4630      	mov	r0, r6
 800959e:	4639      	mov	r1, r7
 80095a0:	f7f7 fa9c 	bl	8000adc <__aeabi_dcmplt>
 80095a4:	b150      	cbz	r0, 80095bc <_dtoa_r+0x184>
 80095a6:	9800      	ldr	r0, [sp, #0]
 80095a8:	f7f6 ffbc 	bl	8000524 <__aeabi_i2d>
 80095ac:	4632      	mov	r2, r6
 80095ae:	463b      	mov	r3, r7
 80095b0:	f7f7 fa8a 	bl	8000ac8 <__aeabi_dcmpeq>
 80095b4:	b910      	cbnz	r0, 80095bc <_dtoa_r+0x184>
 80095b6:	9b00      	ldr	r3, [sp, #0]
 80095b8:	3b01      	subs	r3, #1
 80095ba:	9300      	str	r3, [sp, #0]
 80095bc:	9b00      	ldr	r3, [sp, #0]
 80095be:	2b16      	cmp	r3, #22
 80095c0:	d85a      	bhi.n	8009678 <_dtoa_r+0x240>
 80095c2:	9a00      	ldr	r2, [sp, #0]
 80095c4:	4b57      	ldr	r3, [pc, #348]	; (8009724 <_dtoa_r+0x2ec>)
 80095c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ce:	ec51 0b19 	vmov	r0, r1, d9
 80095d2:	f7f7 fa83 	bl	8000adc <__aeabi_dcmplt>
 80095d6:	2800      	cmp	r0, #0
 80095d8:	d050      	beq.n	800967c <_dtoa_r+0x244>
 80095da:	9b00      	ldr	r3, [sp, #0]
 80095dc:	3b01      	subs	r3, #1
 80095de:	9300      	str	r3, [sp, #0]
 80095e0:	2300      	movs	r3, #0
 80095e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80095e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80095e6:	1b5d      	subs	r5, r3, r5
 80095e8:	1e6b      	subs	r3, r5, #1
 80095ea:	9305      	str	r3, [sp, #20]
 80095ec:	bf45      	ittet	mi
 80095ee:	f1c5 0301 	rsbmi	r3, r5, #1
 80095f2:	9304      	strmi	r3, [sp, #16]
 80095f4:	2300      	movpl	r3, #0
 80095f6:	2300      	movmi	r3, #0
 80095f8:	bf4c      	ite	mi
 80095fa:	9305      	strmi	r3, [sp, #20]
 80095fc:	9304      	strpl	r3, [sp, #16]
 80095fe:	9b00      	ldr	r3, [sp, #0]
 8009600:	2b00      	cmp	r3, #0
 8009602:	db3d      	blt.n	8009680 <_dtoa_r+0x248>
 8009604:	9b05      	ldr	r3, [sp, #20]
 8009606:	9a00      	ldr	r2, [sp, #0]
 8009608:	920a      	str	r2, [sp, #40]	; 0x28
 800960a:	4413      	add	r3, r2
 800960c:	9305      	str	r3, [sp, #20]
 800960e:	2300      	movs	r3, #0
 8009610:	9307      	str	r3, [sp, #28]
 8009612:	9b06      	ldr	r3, [sp, #24]
 8009614:	2b09      	cmp	r3, #9
 8009616:	f200 8089 	bhi.w	800972c <_dtoa_r+0x2f4>
 800961a:	2b05      	cmp	r3, #5
 800961c:	bfc4      	itt	gt
 800961e:	3b04      	subgt	r3, #4
 8009620:	9306      	strgt	r3, [sp, #24]
 8009622:	9b06      	ldr	r3, [sp, #24]
 8009624:	f1a3 0302 	sub.w	r3, r3, #2
 8009628:	bfcc      	ite	gt
 800962a:	2500      	movgt	r5, #0
 800962c:	2501      	movle	r5, #1
 800962e:	2b03      	cmp	r3, #3
 8009630:	f200 8087 	bhi.w	8009742 <_dtoa_r+0x30a>
 8009634:	e8df f003 	tbb	[pc, r3]
 8009638:	59383a2d 	.word	0x59383a2d
 800963c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009640:	441d      	add	r5, r3
 8009642:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009646:	2b20      	cmp	r3, #32
 8009648:	bfc1      	itttt	gt
 800964a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800964e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009652:	fa0b f303 	lslgt.w	r3, fp, r3
 8009656:	fa26 f000 	lsrgt.w	r0, r6, r0
 800965a:	bfda      	itte	le
 800965c:	f1c3 0320 	rsble	r3, r3, #32
 8009660:	fa06 f003 	lslle.w	r0, r6, r3
 8009664:	4318      	orrgt	r0, r3
 8009666:	f7f6 ff4d 	bl	8000504 <__aeabi_ui2d>
 800966a:	2301      	movs	r3, #1
 800966c:	4606      	mov	r6, r0
 800966e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009672:	3d01      	subs	r5, #1
 8009674:	930e      	str	r3, [sp, #56]	; 0x38
 8009676:	e76a      	b.n	800954e <_dtoa_r+0x116>
 8009678:	2301      	movs	r3, #1
 800967a:	e7b2      	b.n	80095e2 <_dtoa_r+0x1aa>
 800967c:	900b      	str	r0, [sp, #44]	; 0x2c
 800967e:	e7b1      	b.n	80095e4 <_dtoa_r+0x1ac>
 8009680:	9b04      	ldr	r3, [sp, #16]
 8009682:	9a00      	ldr	r2, [sp, #0]
 8009684:	1a9b      	subs	r3, r3, r2
 8009686:	9304      	str	r3, [sp, #16]
 8009688:	4253      	negs	r3, r2
 800968a:	9307      	str	r3, [sp, #28]
 800968c:	2300      	movs	r3, #0
 800968e:	930a      	str	r3, [sp, #40]	; 0x28
 8009690:	e7bf      	b.n	8009612 <_dtoa_r+0x1da>
 8009692:	2300      	movs	r3, #0
 8009694:	9308      	str	r3, [sp, #32]
 8009696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009698:	2b00      	cmp	r3, #0
 800969a:	dc55      	bgt.n	8009748 <_dtoa_r+0x310>
 800969c:	2301      	movs	r3, #1
 800969e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80096a2:	461a      	mov	r2, r3
 80096a4:	9209      	str	r2, [sp, #36]	; 0x24
 80096a6:	e00c      	b.n	80096c2 <_dtoa_r+0x28a>
 80096a8:	2301      	movs	r3, #1
 80096aa:	e7f3      	b.n	8009694 <_dtoa_r+0x25c>
 80096ac:	2300      	movs	r3, #0
 80096ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096b0:	9308      	str	r3, [sp, #32]
 80096b2:	9b00      	ldr	r3, [sp, #0]
 80096b4:	4413      	add	r3, r2
 80096b6:	9302      	str	r3, [sp, #8]
 80096b8:	3301      	adds	r3, #1
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	9303      	str	r3, [sp, #12]
 80096be:	bfb8      	it	lt
 80096c0:	2301      	movlt	r3, #1
 80096c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80096c4:	2200      	movs	r2, #0
 80096c6:	6042      	str	r2, [r0, #4]
 80096c8:	2204      	movs	r2, #4
 80096ca:	f102 0614 	add.w	r6, r2, #20
 80096ce:	429e      	cmp	r6, r3
 80096d0:	6841      	ldr	r1, [r0, #4]
 80096d2:	d93d      	bls.n	8009750 <_dtoa_r+0x318>
 80096d4:	4620      	mov	r0, r4
 80096d6:	f000 fda3 	bl	800a220 <_Balloc>
 80096da:	9001      	str	r0, [sp, #4]
 80096dc:	2800      	cmp	r0, #0
 80096de:	d13b      	bne.n	8009758 <_dtoa_r+0x320>
 80096e0:	4b11      	ldr	r3, [pc, #68]	; (8009728 <_dtoa_r+0x2f0>)
 80096e2:	4602      	mov	r2, r0
 80096e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80096e8:	e6c0      	b.n	800946c <_dtoa_r+0x34>
 80096ea:	2301      	movs	r3, #1
 80096ec:	e7df      	b.n	80096ae <_dtoa_r+0x276>
 80096ee:	bf00      	nop
 80096f0:	636f4361 	.word	0x636f4361
 80096f4:	3fd287a7 	.word	0x3fd287a7
 80096f8:	8b60c8b3 	.word	0x8b60c8b3
 80096fc:	3fc68a28 	.word	0x3fc68a28
 8009700:	509f79fb 	.word	0x509f79fb
 8009704:	3fd34413 	.word	0x3fd34413
 8009708:	0800e0e9 	.word	0x0800e0e9
 800970c:	0800e100 	.word	0x0800e100
 8009710:	7ff00000 	.word	0x7ff00000
 8009714:	0800e0e5 	.word	0x0800e0e5
 8009718:	0800e0dc 	.word	0x0800e0dc
 800971c:	0800e0b9 	.word	0x0800e0b9
 8009720:	3ff80000 	.word	0x3ff80000
 8009724:	0800e250 	.word	0x0800e250
 8009728:	0800e15b 	.word	0x0800e15b
 800972c:	2501      	movs	r5, #1
 800972e:	2300      	movs	r3, #0
 8009730:	9306      	str	r3, [sp, #24]
 8009732:	9508      	str	r5, [sp, #32]
 8009734:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009738:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800973c:	2200      	movs	r2, #0
 800973e:	2312      	movs	r3, #18
 8009740:	e7b0      	b.n	80096a4 <_dtoa_r+0x26c>
 8009742:	2301      	movs	r3, #1
 8009744:	9308      	str	r3, [sp, #32]
 8009746:	e7f5      	b.n	8009734 <_dtoa_r+0x2fc>
 8009748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800974a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800974e:	e7b8      	b.n	80096c2 <_dtoa_r+0x28a>
 8009750:	3101      	adds	r1, #1
 8009752:	6041      	str	r1, [r0, #4]
 8009754:	0052      	lsls	r2, r2, #1
 8009756:	e7b8      	b.n	80096ca <_dtoa_r+0x292>
 8009758:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800975a:	9a01      	ldr	r2, [sp, #4]
 800975c:	601a      	str	r2, [r3, #0]
 800975e:	9b03      	ldr	r3, [sp, #12]
 8009760:	2b0e      	cmp	r3, #14
 8009762:	f200 809d 	bhi.w	80098a0 <_dtoa_r+0x468>
 8009766:	2d00      	cmp	r5, #0
 8009768:	f000 809a 	beq.w	80098a0 <_dtoa_r+0x468>
 800976c:	9b00      	ldr	r3, [sp, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	dd32      	ble.n	80097d8 <_dtoa_r+0x3a0>
 8009772:	4ab7      	ldr	r2, [pc, #732]	; (8009a50 <_dtoa_r+0x618>)
 8009774:	f003 030f 	and.w	r3, r3, #15
 8009778:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800977c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009780:	9b00      	ldr	r3, [sp, #0]
 8009782:	05d8      	lsls	r0, r3, #23
 8009784:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009788:	d516      	bpl.n	80097b8 <_dtoa_r+0x380>
 800978a:	4bb2      	ldr	r3, [pc, #712]	; (8009a54 <_dtoa_r+0x61c>)
 800978c:	ec51 0b19 	vmov	r0, r1, d9
 8009790:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009794:	f7f7 f85a 	bl	800084c <__aeabi_ddiv>
 8009798:	f007 070f 	and.w	r7, r7, #15
 800979c:	4682      	mov	sl, r0
 800979e:	468b      	mov	fp, r1
 80097a0:	2503      	movs	r5, #3
 80097a2:	4eac      	ldr	r6, [pc, #688]	; (8009a54 <_dtoa_r+0x61c>)
 80097a4:	b957      	cbnz	r7, 80097bc <_dtoa_r+0x384>
 80097a6:	4642      	mov	r2, r8
 80097a8:	464b      	mov	r3, r9
 80097aa:	4650      	mov	r0, sl
 80097ac:	4659      	mov	r1, fp
 80097ae:	f7f7 f84d 	bl	800084c <__aeabi_ddiv>
 80097b2:	4682      	mov	sl, r0
 80097b4:	468b      	mov	fp, r1
 80097b6:	e028      	b.n	800980a <_dtoa_r+0x3d2>
 80097b8:	2502      	movs	r5, #2
 80097ba:	e7f2      	b.n	80097a2 <_dtoa_r+0x36a>
 80097bc:	07f9      	lsls	r1, r7, #31
 80097be:	d508      	bpl.n	80097d2 <_dtoa_r+0x39a>
 80097c0:	4640      	mov	r0, r8
 80097c2:	4649      	mov	r1, r9
 80097c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80097c8:	f7f6 ff16 	bl	80005f8 <__aeabi_dmul>
 80097cc:	3501      	adds	r5, #1
 80097ce:	4680      	mov	r8, r0
 80097d0:	4689      	mov	r9, r1
 80097d2:	107f      	asrs	r7, r7, #1
 80097d4:	3608      	adds	r6, #8
 80097d6:	e7e5      	b.n	80097a4 <_dtoa_r+0x36c>
 80097d8:	f000 809b 	beq.w	8009912 <_dtoa_r+0x4da>
 80097dc:	9b00      	ldr	r3, [sp, #0]
 80097de:	4f9d      	ldr	r7, [pc, #628]	; (8009a54 <_dtoa_r+0x61c>)
 80097e0:	425e      	negs	r6, r3
 80097e2:	4b9b      	ldr	r3, [pc, #620]	; (8009a50 <_dtoa_r+0x618>)
 80097e4:	f006 020f 	and.w	r2, r6, #15
 80097e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f0:	ec51 0b19 	vmov	r0, r1, d9
 80097f4:	f7f6 ff00 	bl	80005f8 <__aeabi_dmul>
 80097f8:	1136      	asrs	r6, r6, #4
 80097fa:	4682      	mov	sl, r0
 80097fc:	468b      	mov	fp, r1
 80097fe:	2300      	movs	r3, #0
 8009800:	2502      	movs	r5, #2
 8009802:	2e00      	cmp	r6, #0
 8009804:	d17a      	bne.n	80098fc <_dtoa_r+0x4c4>
 8009806:	2b00      	cmp	r3, #0
 8009808:	d1d3      	bne.n	80097b2 <_dtoa_r+0x37a>
 800980a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800980c:	2b00      	cmp	r3, #0
 800980e:	f000 8082 	beq.w	8009916 <_dtoa_r+0x4de>
 8009812:	4b91      	ldr	r3, [pc, #580]	; (8009a58 <_dtoa_r+0x620>)
 8009814:	2200      	movs	r2, #0
 8009816:	4650      	mov	r0, sl
 8009818:	4659      	mov	r1, fp
 800981a:	f7f7 f95f 	bl	8000adc <__aeabi_dcmplt>
 800981e:	2800      	cmp	r0, #0
 8009820:	d079      	beq.n	8009916 <_dtoa_r+0x4de>
 8009822:	9b03      	ldr	r3, [sp, #12]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d076      	beq.n	8009916 <_dtoa_r+0x4de>
 8009828:	9b02      	ldr	r3, [sp, #8]
 800982a:	2b00      	cmp	r3, #0
 800982c:	dd36      	ble.n	800989c <_dtoa_r+0x464>
 800982e:	9b00      	ldr	r3, [sp, #0]
 8009830:	4650      	mov	r0, sl
 8009832:	4659      	mov	r1, fp
 8009834:	1e5f      	subs	r7, r3, #1
 8009836:	2200      	movs	r2, #0
 8009838:	4b88      	ldr	r3, [pc, #544]	; (8009a5c <_dtoa_r+0x624>)
 800983a:	f7f6 fedd 	bl	80005f8 <__aeabi_dmul>
 800983e:	9e02      	ldr	r6, [sp, #8]
 8009840:	4682      	mov	sl, r0
 8009842:	468b      	mov	fp, r1
 8009844:	3501      	adds	r5, #1
 8009846:	4628      	mov	r0, r5
 8009848:	f7f6 fe6c 	bl	8000524 <__aeabi_i2d>
 800984c:	4652      	mov	r2, sl
 800984e:	465b      	mov	r3, fp
 8009850:	f7f6 fed2 	bl	80005f8 <__aeabi_dmul>
 8009854:	4b82      	ldr	r3, [pc, #520]	; (8009a60 <_dtoa_r+0x628>)
 8009856:	2200      	movs	r2, #0
 8009858:	f7f6 fd18 	bl	800028c <__adddf3>
 800985c:	46d0      	mov	r8, sl
 800985e:	46d9      	mov	r9, fp
 8009860:	4682      	mov	sl, r0
 8009862:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009866:	2e00      	cmp	r6, #0
 8009868:	d158      	bne.n	800991c <_dtoa_r+0x4e4>
 800986a:	4b7e      	ldr	r3, [pc, #504]	; (8009a64 <_dtoa_r+0x62c>)
 800986c:	2200      	movs	r2, #0
 800986e:	4640      	mov	r0, r8
 8009870:	4649      	mov	r1, r9
 8009872:	f7f6 fd09 	bl	8000288 <__aeabi_dsub>
 8009876:	4652      	mov	r2, sl
 8009878:	465b      	mov	r3, fp
 800987a:	4680      	mov	r8, r0
 800987c:	4689      	mov	r9, r1
 800987e:	f7f7 f94b 	bl	8000b18 <__aeabi_dcmpgt>
 8009882:	2800      	cmp	r0, #0
 8009884:	f040 8295 	bne.w	8009db2 <_dtoa_r+0x97a>
 8009888:	4652      	mov	r2, sl
 800988a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800988e:	4640      	mov	r0, r8
 8009890:	4649      	mov	r1, r9
 8009892:	f7f7 f923 	bl	8000adc <__aeabi_dcmplt>
 8009896:	2800      	cmp	r0, #0
 8009898:	f040 8289 	bne.w	8009dae <_dtoa_r+0x976>
 800989c:	ec5b ab19 	vmov	sl, fp, d9
 80098a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f2c0 8148 	blt.w	8009b38 <_dtoa_r+0x700>
 80098a8:	9a00      	ldr	r2, [sp, #0]
 80098aa:	2a0e      	cmp	r2, #14
 80098ac:	f300 8144 	bgt.w	8009b38 <_dtoa_r+0x700>
 80098b0:	4b67      	ldr	r3, [pc, #412]	; (8009a50 <_dtoa_r+0x618>)
 80098b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80098ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098bc:	2b00      	cmp	r3, #0
 80098be:	f280 80d5 	bge.w	8009a6c <_dtoa_r+0x634>
 80098c2:	9b03      	ldr	r3, [sp, #12]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	f300 80d1 	bgt.w	8009a6c <_dtoa_r+0x634>
 80098ca:	f040 826f 	bne.w	8009dac <_dtoa_r+0x974>
 80098ce:	4b65      	ldr	r3, [pc, #404]	; (8009a64 <_dtoa_r+0x62c>)
 80098d0:	2200      	movs	r2, #0
 80098d2:	4640      	mov	r0, r8
 80098d4:	4649      	mov	r1, r9
 80098d6:	f7f6 fe8f 	bl	80005f8 <__aeabi_dmul>
 80098da:	4652      	mov	r2, sl
 80098dc:	465b      	mov	r3, fp
 80098de:	f7f7 f911 	bl	8000b04 <__aeabi_dcmpge>
 80098e2:	9e03      	ldr	r6, [sp, #12]
 80098e4:	4637      	mov	r7, r6
 80098e6:	2800      	cmp	r0, #0
 80098e8:	f040 8245 	bne.w	8009d76 <_dtoa_r+0x93e>
 80098ec:	9d01      	ldr	r5, [sp, #4]
 80098ee:	2331      	movs	r3, #49	; 0x31
 80098f0:	f805 3b01 	strb.w	r3, [r5], #1
 80098f4:	9b00      	ldr	r3, [sp, #0]
 80098f6:	3301      	adds	r3, #1
 80098f8:	9300      	str	r3, [sp, #0]
 80098fa:	e240      	b.n	8009d7e <_dtoa_r+0x946>
 80098fc:	07f2      	lsls	r2, r6, #31
 80098fe:	d505      	bpl.n	800990c <_dtoa_r+0x4d4>
 8009900:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009904:	f7f6 fe78 	bl	80005f8 <__aeabi_dmul>
 8009908:	3501      	adds	r5, #1
 800990a:	2301      	movs	r3, #1
 800990c:	1076      	asrs	r6, r6, #1
 800990e:	3708      	adds	r7, #8
 8009910:	e777      	b.n	8009802 <_dtoa_r+0x3ca>
 8009912:	2502      	movs	r5, #2
 8009914:	e779      	b.n	800980a <_dtoa_r+0x3d2>
 8009916:	9f00      	ldr	r7, [sp, #0]
 8009918:	9e03      	ldr	r6, [sp, #12]
 800991a:	e794      	b.n	8009846 <_dtoa_r+0x40e>
 800991c:	9901      	ldr	r1, [sp, #4]
 800991e:	4b4c      	ldr	r3, [pc, #304]	; (8009a50 <_dtoa_r+0x618>)
 8009920:	4431      	add	r1, r6
 8009922:	910d      	str	r1, [sp, #52]	; 0x34
 8009924:	9908      	ldr	r1, [sp, #32]
 8009926:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800992a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800992e:	2900      	cmp	r1, #0
 8009930:	d043      	beq.n	80099ba <_dtoa_r+0x582>
 8009932:	494d      	ldr	r1, [pc, #308]	; (8009a68 <_dtoa_r+0x630>)
 8009934:	2000      	movs	r0, #0
 8009936:	f7f6 ff89 	bl	800084c <__aeabi_ddiv>
 800993a:	4652      	mov	r2, sl
 800993c:	465b      	mov	r3, fp
 800993e:	f7f6 fca3 	bl	8000288 <__aeabi_dsub>
 8009942:	9d01      	ldr	r5, [sp, #4]
 8009944:	4682      	mov	sl, r0
 8009946:	468b      	mov	fp, r1
 8009948:	4649      	mov	r1, r9
 800994a:	4640      	mov	r0, r8
 800994c:	f7f7 f904 	bl	8000b58 <__aeabi_d2iz>
 8009950:	4606      	mov	r6, r0
 8009952:	f7f6 fde7 	bl	8000524 <__aeabi_i2d>
 8009956:	4602      	mov	r2, r0
 8009958:	460b      	mov	r3, r1
 800995a:	4640      	mov	r0, r8
 800995c:	4649      	mov	r1, r9
 800995e:	f7f6 fc93 	bl	8000288 <__aeabi_dsub>
 8009962:	3630      	adds	r6, #48	; 0x30
 8009964:	f805 6b01 	strb.w	r6, [r5], #1
 8009968:	4652      	mov	r2, sl
 800996a:	465b      	mov	r3, fp
 800996c:	4680      	mov	r8, r0
 800996e:	4689      	mov	r9, r1
 8009970:	f7f7 f8b4 	bl	8000adc <__aeabi_dcmplt>
 8009974:	2800      	cmp	r0, #0
 8009976:	d163      	bne.n	8009a40 <_dtoa_r+0x608>
 8009978:	4642      	mov	r2, r8
 800997a:	464b      	mov	r3, r9
 800997c:	4936      	ldr	r1, [pc, #216]	; (8009a58 <_dtoa_r+0x620>)
 800997e:	2000      	movs	r0, #0
 8009980:	f7f6 fc82 	bl	8000288 <__aeabi_dsub>
 8009984:	4652      	mov	r2, sl
 8009986:	465b      	mov	r3, fp
 8009988:	f7f7 f8a8 	bl	8000adc <__aeabi_dcmplt>
 800998c:	2800      	cmp	r0, #0
 800998e:	f040 80b5 	bne.w	8009afc <_dtoa_r+0x6c4>
 8009992:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009994:	429d      	cmp	r5, r3
 8009996:	d081      	beq.n	800989c <_dtoa_r+0x464>
 8009998:	4b30      	ldr	r3, [pc, #192]	; (8009a5c <_dtoa_r+0x624>)
 800999a:	2200      	movs	r2, #0
 800999c:	4650      	mov	r0, sl
 800999e:	4659      	mov	r1, fp
 80099a0:	f7f6 fe2a 	bl	80005f8 <__aeabi_dmul>
 80099a4:	4b2d      	ldr	r3, [pc, #180]	; (8009a5c <_dtoa_r+0x624>)
 80099a6:	4682      	mov	sl, r0
 80099a8:	468b      	mov	fp, r1
 80099aa:	4640      	mov	r0, r8
 80099ac:	4649      	mov	r1, r9
 80099ae:	2200      	movs	r2, #0
 80099b0:	f7f6 fe22 	bl	80005f8 <__aeabi_dmul>
 80099b4:	4680      	mov	r8, r0
 80099b6:	4689      	mov	r9, r1
 80099b8:	e7c6      	b.n	8009948 <_dtoa_r+0x510>
 80099ba:	4650      	mov	r0, sl
 80099bc:	4659      	mov	r1, fp
 80099be:	f7f6 fe1b 	bl	80005f8 <__aeabi_dmul>
 80099c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099c4:	9d01      	ldr	r5, [sp, #4]
 80099c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80099c8:	4682      	mov	sl, r0
 80099ca:	468b      	mov	fp, r1
 80099cc:	4649      	mov	r1, r9
 80099ce:	4640      	mov	r0, r8
 80099d0:	f7f7 f8c2 	bl	8000b58 <__aeabi_d2iz>
 80099d4:	4606      	mov	r6, r0
 80099d6:	f7f6 fda5 	bl	8000524 <__aeabi_i2d>
 80099da:	3630      	adds	r6, #48	; 0x30
 80099dc:	4602      	mov	r2, r0
 80099de:	460b      	mov	r3, r1
 80099e0:	4640      	mov	r0, r8
 80099e2:	4649      	mov	r1, r9
 80099e4:	f7f6 fc50 	bl	8000288 <__aeabi_dsub>
 80099e8:	f805 6b01 	strb.w	r6, [r5], #1
 80099ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099ee:	429d      	cmp	r5, r3
 80099f0:	4680      	mov	r8, r0
 80099f2:	4689      	mov	r9, r1
 80099f4:	f04f 0200 	mov.w	r2, #0
 80099f8:	d124      	bne.n	8009a44 <_dtoa_r+0x60c>
 80099fa:	4b1b      	ldr	r3, [pc, #108]	; (8009a68 <_dtoa_r+0x630>)
 80099fc:	4650      	mov	r0, sl
 80099fe:	4659      	mov	r1, fp
 8009a00:	f7f6 fc44 	bl	800028c <__adddf3>
 8009a04:	4602      	mov	r2, r0
 8009a06:	460b      	mov	r3, r1
 8009a08:	4640      	mov	r0, r8
 8009a0a:	4649      	mov	r1, r9
 8009a0c:	f7f7 f884 	bl	8000b18 <__aeabi_dcmpgt>
 8009a10:	2800      	cmp	r0, #0
 8009a12:	d173      	bne.n	8009afc <_dtoa_r+0x6c4>
 8009a14:	4652      	mov	r2, sl
 8009a16:	465b      	mov	r3, fp
 8009a18:	4913      	ldr	r1, [pc, #76]	; (8009a68 <_dtoa_r+0x630>)
 8009a1a:	2000      	movs	r0, #0
 8009a1c:	f7f6 fc34 	bl	8000288 <__aeabi_dsub>
 8009a20:	4602      	mov	r2, r0
 8009a22:	460b      	mov	r3, r1
 8009a24:	4640      	mov	r0, r8
 8009a26:	4649      	mov	r1, r9
 8009a28:	f7f7 f858 	bl	8000adc <__aeabi_dcmplt>
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	f43f af35 	beq.w	800989c <_dtoa_r+0x464>
 8009a32:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009a34:	1e6b      	subs	r3, r5, #1
 8009a36:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a38:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009a3c:	2b30      	cmp	r3, #48	; 0x30
 8009a3e:	d0f8      	beq.n	8009a32 <_dtoa_r+0x5fa>
 8009a40:	9700      	str	r7, [sp, #0]
 8009a42:	e049      	b.n	8009ad8 <_dtoa_r+0x6a0>
 8009a44:	4b05      	ldr	r3, [pc, #20]	; (8009a5c <_dtoa_r+0x624>)
 8009a46:	f7f6 fdd7 	bl	80005f8 <__aeabi_dmul>
 8009a4a:	4680      	mov	r8, r0
 8009a4c:	4689      	mov	r9, r1
 8009a4e:	e7bd      	b.n	80099cc <_dtoa_r+0x594>
 8009a50:	0800e250 	.word	0x0800e250
 8009a54:	0800e228 	.word	0x0800e228
 8009a58:	3ff00000 	.word	0x3ff00000
 8009a5c:	40240000 	.word	0x40240000
 8009a60:	401c0000 	.word	0x401c0000
 8009a64:	40140000 	.word	0x40140000
 8009a68:	3fe00000 	.word	0x3fe00000
 8009a6c:	9d01      	ldr	r5, [sp, #4]
 8009a6e:	4656      	mov	r6, sl
 8009a70:	465f      	mov	r7, fp
 8009a72:	4642      	mov	r2, r8
 8009a74:	464b      	mov	r3, r9
 8009a76:	4630      	mov	r0, r6
 8009a78:	4639      	mov	r1, r7
 8009a7a:	f7f6 fee7 	bl	800084c <__aeabi_ddiv>
 8009a7e:	f7f7 f86b 	bl	8000b58 <__aeabi_d2iz>
 8009a82:	4682      	mov	sl, r0
 8009a84:	f7f6 fd4e 	bl	8000524 <__aeabi_i2d>
 8009a88:	4642      	mov	r2, r8
 8009a8a:	464b      	mov	r3, r9
 8009a8c:	f7f6 fdb4 	bl	80005f8 <__aeabi_dmul>
 8009a90:	4602      	mov	r2, r0
 8009a92:	460b      	mov	r3, r1
 8009a94:	4630      	mov	r0, r6
 8009a96:	4639      	mov	r1, r7
 8009a98:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009a9c:	f7f6 fbf4 	bl	8000288 <__aeabi_dsub>
 8009aa0:	f805 6b01 	strb.w	r6, [r5], #1
 8009aa4:	9e01      	ldr	r6, [sp, #4]
 8009aa6:	9f03      	ldr	r7, [sp, #12]
 8009aa8:	1bae      	subs	r6, r5, r6
 8009aaa:	42b7      	cmp	r7, r6
 8009aac:	4602      	mov	r2, r0
 8009aae:	460b      	mov	r3, r1
 8009ab0:	d135      	bne.n	8009b1e <_dtoa_r+0x6e6>
 8009ab2:	f7f6 fbeb 	bl	800028c <__adddf3>
 8009ab6:	4642      	mov	r2, r8
 8009ab8:	464b      	mov	r3, r9
 8009aba:	4606      	mov	r6, r0
 8009abc:	460f      	mov	r7, r1
 8009abe:	f7f7 f82b 	bl	8000b18 <__aeabi_dcmpgt>
 8009ac2:	b9d0      	cbnz	r0, 8009afa <_dtoa_r+0x6c2>
 8009ac4:	4642      	mov	r2, r8
 8009ac6:	464b      	mov	r3, r9
 8009ac8:	4630      	mov	r0, r6
 8009aca:	4639      	mov	r1, r7
 8009acc:	f7f6 fffc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ad0:	b110      	cbz	r0, 8009ad8 <_dtoa_r+0x6a0>
 8009ad2:	f01a 0f01 	tst.w	sl, #1
 8009ad6:	d110      	bne.n	8009afa <_dtoa_r+0x6c2>
 8009ad8:	4620      	mov	r0, r4
 8009ada:	ee18 1a10 	vmov	r1, s16
 8009ade:	f000 fbdf 	bl	800a2a0 <_Bfree>
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	9800      	ldr	r0, [sp, #0]
 8009ae6:	702b      	strb	r3, [r5, #0]
 8009ae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009aea:	3001      	adds	r0, #1
 8009aec:	6018      	str	r0, [r3, #0]
 8009aee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f43f acf1 	beq.w	80094d8 <_dtoa_r+0xa0>
 8009af6:	601d      	str	r5, [r3, #0]
 8009af8:	e4ee      	b.n	80094d8 <_dtoa_r+0xa0>
 8009afa:	9f00      	ldr	r7, [sp, #0]
 8009afc:	462b      	mov	r3, r5
 8009afe:	461d      	mov	r5, r3
 8009b00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b04:	2a39      	cmp	r2, #57	; 0x39
 8009b06:	d106      	bne.n	8009b16 <_dtoa_r+0x6de>
 8009b08:	9a01      	ldr	r2, [sp, #4]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d1f7      	bne.n	8009afe <_dtoa_r+0x6c6>
 8009b0e:	9901      	ldr	r1, [sp, #4]
 8009b10:	2230      	movs	r2, #48	; 0x30
 8009b12:	3701      	adds	r7, #1
 8009b14:	700a      	strb	r2, [r1, #0]
 8009b16:	781a      	ldrb	r2, [r3, #0]
 8009b18:	3201      	adds	r2, #1
 8009b1a:	701a      	strb	r2, [r3, #0]
 8009b1c:	e790      	b.n	8009a40 <_dtoa_r+0x608>
 8009b1e:	4ba6      	ldr	r3, [pc, #664]	; (8009db8 <_dtoa_r+0x980>)
 8009b20:	2200      	movs	r2, #0
 8009b22:	f7f6 fd69 	bl	80005f8 <__aeabi_dmul>
 8009b26:	2200      	movs	r2, #0
 8009b28:	2300      	movs	r3, #0
 8009b2a:	4606      	mov	r6, r0
 8009b2c:	460f      	mov	r7, r1
 8009b2e:	f7f6 ffcb 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b32:	2800      	cmp	r0, #0
 8009b34:	d09d      	beq.n	8009a72 <_dtoa_r+0x63a>
 8009b36:	e7cf      	b.n	8009ad8 <_dtoa_r+0x6a0>
 8009b38:	9a08      	ldr	r2, [sp, #32]
 8009b3a:	2a00      	cmp	r2, #0
 8009b3c:	f000 80d7 	beq.w	8009cee <_dtoa_r+0x8b6>
 8009b40:	9a06      	ldr	r2, [sp, #24]
 8009b42:	2a01      	cmp	r2, #1
 8009b44:	f300 80ba 	bgt.w	8009cbc <_dtoa_r+0x884>
 8009b48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b4a:	2a00      	cmp	r2, #0
 8009b4c:	f000 80b2 	beq.w	8009cb4 <_dtoa_r+0x87c>
 8009b50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009b54:	9e07      	ldr	r6, [sp, #28]
 8009b56:	9d04      	ldr	r5, [sp, #16]
 8009b58:	9a04      	ldr	r2, [sp, #16]
 8009b5a:	441a      	add	r2, r3
 8009b5c:	9204      	str	r2, [sp, #16]
 8009b5e:	9a05      	ldr	r2, [sp, #20]
 8009b60:	2101      	movs	r1, #1
 8009b62:	441a      	add	r2, r3
 8009b64:	4620      	mov	r0, r4
 8009b66:	9205      	str	r2, [sp, #20]
 8009b68:	f000 fc52 	bl	800a410 <__i2b>
 8009b6c:	4607      	mov	r7, r0
 8009b6e:	2d00      	cmp	r5, #0
 8009b70:	dd0c      	ble.n	8009b8c <_dtoa_r+0x754>
 8009b72:	9b05      	ldr	r3, [sp, #20]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	dd09      	ble.n	8009b8c <_dtoa_r+0x754>
 8009b78:	42ab      	cmp	r3, r5
 8009b7a:	9a04      	ldr	r2, [sp, #16]
 8009b7c:	bfa8      	it	ge
 8009b7e:	462b      	movge	r3, r5
 8009b80:	1ad2      	subs	r2, r2, r3
 8009b82:	9204      	str	r2, [sp, #16]
 8009b84:	9a05      	ldr	r2, [sp, #20]
 8009b86:	1aed      	subs	r5, r5, r3
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	9305      	str	r3, [sp, #20]
 8009b8c:	9b07      	ldr	r3, [sp, #28]
 8009b8e:	b31b      	cbz	r3, 8009bd8 <_dtoa_r+0x7a0>
 8009b90:	9b08      	ldr	r3, [sp, #32]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f000 80af 	beq.w	8009cf6 <_dtoa_r+0x8be>
 8009b98:	2e00      	cmp	r6, #0
 8009b9a:	dd13      	ble.n	8009bc4 <_dtoa_r+0x78c>
 8009b9c:	4639      	mov	r1, r7
 8009b9e:	4632      	mov	r2, r6
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	f000 fcf5 	bl	800a590 <__pow5mult>
 8009ba6:	ee18 2a10 	vmov	r2, s16
 8009baa:	4601      	mov	r1, r0
 8009bac:	4607      	mov	r7, r0
 8009bae:	4620      	mov	r0, r4
 8009bb0:	f000 fc44 	bl	800a43c <__multiply>
 8009bb4:	ee18 1a10 	vmov	r1, s16
 8009bb8:	4680      	mov	r8, r0
 8009bba:	4620      	mov	r0, r4
 8009bbc:	f000 fb70 	bl	800a2a0 <_Bfree>
 8009bc0:	ee08 8a10 	vmov	s16, r8
 8009bc4:	9b07      	ldr	r3, [sp, #28]
 8009bc6:	1b9a      	subs	r2, r3, r6
 8009bc8:	d006      	beq.n	8009bd8 <_dtoa_r+0x7a0>
 8009bca:	ee18 1a10 	vmov	r1, s16
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f000 fcde 	bl	800a590 <__pow5mult>
 8009bd4:	ee08 0a10 	vmov	s16, r0
 8009bd8:	2101      	movs	r1, #1
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f000 fc18 	bl	800a410 <__i2b>
 8009be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	4606      	mov	r6, r0
 8009be6:	f340 8088 	ble.w	8009cfa <_dtoa_r+0x8c2>
 8009bea:	461a      	mov	r2, r3
 8009bec:	4601      	mov	r1, r0
 8009bee:	4620      	mov	r0, r4
 8009bf0:	f000 fcce 	bl	800a590 <__pow5mult>
 8009bf4:	9b06      	ldr	r3, [sp, #24]
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	4606      	mov	r6, r0
 8009bfa:	f340 8081 	ble.w	8009d00 <_dtoa_r+0x8c8>
 8009bfe:	f04f 0800 	mov.w	r8, #0
 8009c02:	6933      	ldr	r3, [r6, #16]
 8009c04:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009c08:	6918      	ldr	r0, [r3, #16]
 8009c0a:	f000 fbb1 	bl	800a370 <__hi0bits>
 8009c0e:	f1c0 0020 	rsb	r0, r0, #32
 8009c12:	9b05      	ldr	r3, [sp, #20]
 8009c14:	4418      	add	r0, r3
 8009c16:	f010 001f 	ands.w	r0, r0, #31
 8009c1a:	f000 8092 	beq.w	8009d42 <_dtoa_r+0x90a>
 8009c1e:	f1c0 0320 	rsb	r3, r0, #32
 8009c22:	2b04      	cmp	r3, #4
 8009c24:	f340 808a 	ble.w	8009d3c <_dtoa_r+0x904>
 8009c28:	f1c0 001c 	rsb	r0, r0, #28
 8009c2c:	9b04      	ldr	r3, [sp, #16]
 8009c2e:	4403      	add	r3, r0
 8009c30:	9304      	str	r3, [sp, #16]
 8009c32:	9b05      	ldr	r3, [sp, #20]
 8009c34:	4403      	add	r3, r0
 8009c36:	4405      	add	r5, r0
 8009c38:	9305      	str	r3, [sp, #20]
 8009c3a:	9b04      	ldr	r3, [sp, #16]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	dd07      	ble.n	8009c50 <_dtoa_r+0x818>
 8009c40:	ee18 1a10 	vmov	r1, s16
 8009c44:	461a      	mov	r2, r3
 8009c46:	4620      	mov	r0, r4
 8009c48:	f000 fcfc 	bl	800a644 <__lshift>
 8009c4c:	ee08 0a10 	vmov	s16, r0
 8009c50:	9b05      	ldr	r3, [sp, #20]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	dd05      	ble.n	8009c62 <_dtoa_r+0x82a>
 8009c56:	4631      	mov	r1, r6
 8009c58:	461a      	mov	r2, r3
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	f000 fcf2 	bl	800a644 <__lshift>
 8009c60:	4606      	mov	r6, r0
 8009c62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d06e      	beq.n	8009d46 <_dtoa_r+0x90e>
 8009c68:	ee18 0a10 	vmov	r0, s16
 8009c6c:	4631      	mov	r1, r6
 8009c6e:	f000 fd59 	bl	800a724 <__mcmp>
 8009c72:	2800      	cmp	r0, #0
 8009c74:	da67      	bge.n	8009d46 <_dtoa_r+0x90e>
 8009c76:	9b00      	ldr	r3, [sp, #0]
 8009c78:	3b01      	subs	r3, #1
 8009c7a:	ee18 1a10 	vmov	r1, s16
 8009c7e:	9300      	str	r3, [sp, #0]
 8009c80:	220a      	movs	r2, #10
 8009c82:	2300      	movs	r3, #0
 8009c84:	4620      	mov	r0, r4
 8009c86:	f000 fb2d 	bl	800a2e4 <__multadd>
 8009c8a:	9b08      	ldr	r3, [sp, #32]
 8009c8c:	ee08 0a10 	vmov	s16, r0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	f000 81b1 	beq.w	8009ff8 <_dtoa_r+0xbc0>
 8009c96:	2300      	movs	r3, #0
 8009c98:	4639      	mov	r1, r7
 8009c9a:	220a      	movs	r2, #10
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	f000 fb21 	bl	800a2e4 <__multadd>
 8009ca2:	9b02      	ldr	r3, [sp, #8]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	4607      	mov	r7, r0
 8009ca8:	f300 808e 	bgt.w	8009dc8 <_dtoa_r+0x990>
 8009cac:	9b06      	ldr	r3, [sp, #24]
 8009cae:	2b02      	cmp	r3, #2
 8009cb0:	dc51      	bgt.n	8009d56 <_dtoa_r+0x91e>
 8009cb2:	e089      	b.n	8009dc8 <_dtoa_r+0x990>
 8009cb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009cb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009cba:	e74b      	b.n	8009b54 <_dtoa_r+0x71c>
 8009cbc:	9b03      	ldr	r3, [sp, #12]
 8009cbe:	1e5e      	subs	r6, r3, #1
 8009cc0:	9b07      	ldr	r3, [sp, #28]
 8009cc2:	42b3      	cmp	r3, r6
 8009cc4:	bfbf      	itttt	lt
 8009cc6:	9b07      	ldrlt	r3, [sp, #28]
 8009cc8:	9607      	strlt	r6, [sp, #28]
 8009cca:	1af2      	sublt	r2, r6, r3
 8009ccc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009cce:	bfb6      	itet	lt
 8009cd0:	189b      	addlt	r3, r3, r2
 8009cd2:	1b9e      	subge	r6, r3, r6
 8009cd4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009cd6:	9b03      	ldr	r3, [sp, #12]
 8009cd8:	bfb8      	it	lt
 8009cda:	2600      	movlt	r6, #0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	bfb7      	itett	lt
 8009ce0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009ce4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009ce8:	1a9d      	sublt	r5, r3, r2
 8009cea:	2300      	movlt	r3, #0
 8009cec:	e734      	b.n	8009b58 <_dtoa_r+0x720>
 8009cee:	9e07      	ldr	r6, [sp, #28]
 8009cf0:	9d04      	ldr	r5, [sp, #16]
 8009cf2:	9f08      	ldr	r7, [sp, #32]
 8009cf4:	e73b      	b.n	8009b6e <_dtoa_r+0x736>
 8009cf6:	9a07      	ldr	r2, [sp, #28]
 8009cf8:	e767      	b.n	8009bca <_dtoa_r+0x792>
 8009cfa:	9b06      	ldr	r3, [sp, #24]
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	dc18      	bgt.n	8009d32 <_dtoa_r+0x8fa>
 8009d00:	f1ba 0f00 	cmp.w	sl, #0
 8009d04:	d115      	bne.n	8009d32 <_dtoa_r+0x8fa>
 8009d06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d0a:	b993      	cbnz	r3, 8009d32 <_dtoa_r+0x8fa>
 8009d0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d10:	0d1b      	lsrs	r3, r3, #20
 8009d12:	051b      	lsls	r3, r3, #20
 8009d14:	b183      	cbz	r3, 8009d38 <_dtoa_r+0x900>
 8009d16:	9b04      	ldr	r3, [sp, #16]
 8009d18:	3301      	adds	r3, #1
 8009d1a:	9304      	str	r3, [sp, #16]
 8009d1c:	9b05      	ldr	r3, [sp, #20]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	9305      	str	r3, [sp, #20]
 8009d22:	f04f 0801 	mov.w	r8, #1
 8009d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	f47f af6a 	bne.w	8009c02 <_dtoa_r+0x7ca>
 8009d2e:	2001      	movs	r0, #1
 8009d30:	e76f      	b.n	8009c12 <_dtoa_r+0x7da>
 8009d32:	f04f 0800 	mov.w	r8, #0
 8009d36:	e7f6      	b.n	8009d26 <_dtoa_r+0x8ee>
 8009d38:	4698      	mov	r8, r3
 8009d3a:	e7f4      	b.n	8009d26 <_dtoa_r+0x8ee>
 8009d3c:	f43f af7d 	beq.w	8009c3a <_dtoa_r+0x802>
 8009d40:	4618      	mov	r0, r3
 8009d42:	301c      	adds	r0, #28
 8009d44:	e772      	b.n	8009c2c <_dtoa_r+0x7f4>
 8009d46:	9b03      	ldr	r3, [sp, #12]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	dc37      	bgt.n	8009dbc <_dtoa_r+0x984>
 8009d4c:	9b06      	ldr	r3, [sp, #24]
 8009d4e:	2b02      	cmp	r3, #2
 8009d50:	dd34      	ble.n	8009dbc <_dtoa_r+0x984>
 8009d52:	9b03      	ldr	r3, [sp, #12]
 8009d54:	9302      	str	r3, [sp, #8]
 8009d56:	9b02      	ldr	r3, [sp, #8]
 8009d58:	b96b      	cbnz	r3, 8009d76 <_dtoa_r+0x93e>
 8009d5a:	4631      	mov	r1, r6
 8009d5c:	2205      	movs	r2, #5
 8009d5e:	4620      	mov	r0, r4
 8009d60:	f000 fac0 	bl	800a2e4 <__multadd>
 8009d64:	4601      	mov	r1, r0
 8009d66:	4606      	mov	r6, r0
 8009d68:	ee18 0a10 	vmov	r0, s16
 8009d6c:	f000 fcda 	bl	800a724 <__mcmp>
 8009d70:	2800      	cmp	r0, #0
 8009d72:	f73f adbb 	bgt.w	80098ec <_dtoa_r+0x4b4>
 8009d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d78:	9d01      	ldr	r5, [sp, #4]
 8009d7a:	43db      	mvns	r3, r3
 8009d7c:	9300      	str	r3, [sp, #0]
 8009d7e:	f04f 0800 	mov.w	r8, #0
 8009d82:	4631      	mov	r1, r6
 8009d84:	4620      	mov	r0, r4
 8009d86:	f000 fa8b 	bl	800a2a0 <_Bfree>
 8009d8a:	2f00      	cmp	r7, #0
 8009d8c:	f43f aea4 	beq.w	8009ad8 <_dtoa_r+0x6a0>
 8009d90:	f1b8 0f00 	cmp.w	r8, #0
 8009d94:	d005      	beq.n	8009da2 <_dtoa_r+0x96a>
 8009d96:	45b8      	cmp	r8, r7
 8009d98:	d003      	beq.n	8009da2 <_dtoa_r+0x96a>
 8009d9a:	4641      	mov	r1, r8
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	f000 fa7f 	bl	800a2a0 <_Bfree>
 8009da2:	4639      	mov	r1, r7
 8009da4:	4620      	mov	r0, r4
 8009da6:	f000 fa7b 	bl	800a2a0 <_Bfree>
 8009daa:	e695      	b.n	8009ad8 <_dtoa_r+0x6a0>
 8009dac:	2600      	movs	r6, #0
 8009dae:	4637      	mov	r7, r6
 8009db0:	e7e1      	b.n	8009d76 <_dtoa_r+0x93e>
 8009db2:	9700      	str	r7, [sp, #0]
 8009db4:	4637      	mov	r7, r6
 8009db6:	e599      	b.n	80098ec <_dtoa_r+0x4b4>
 8009db8:	40240000 	.word	0x40240000
 8009dbc:	9b08      	ldr	r3, [sp, #32]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	f000 80ca 	beq.w	8009f58 <_dtoa_r+0xb20>
 8009dc4:	9b03      	ldr	r3, [sp, #12]
 8009dc6:	9302      	str	r3, [sp, #8]
 8009dc8:	2d00      	cmp	r5, #0
 8009dca:	dd05      	ble.n	8009dd8 <_dtoa_r+0x9a0>
 8009dcc:	4639      	mov	r1, r7
 8009dce:	462a      	mov	r2, r5
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	f000 fc37 	bl	800a644 <__lshift>
 8009dd6:	4607      	mov	r7, r0
 8009dd8:	f1b8 0f00 	cmp.w	r8, #0
 8009ddc:	d05b      	beq.n	8009e96 <_dtoa_r+0xa5e>
 8009dde:	6879      	ldr	r1, [r7, #4]
 8009de0:	4620      	mov	r0, r4
 8009de2:	f000 fa1d 	bl	800a220 <_Balloc>
 8009de6:	4605      	mov	r5, r0
 8009de8:	b928      	cbnz	r0, 8009df6 <_dtoa_r+0x9be>
 8009dea:	4b87      	ldr	r3, [pc, #540]	; (800a008 <_dtoa_r+0xbd0>)
 8009dec:	4602      	mov	r2, r0
 8009dee:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009df2:	f7ff bb3b 	b.w	800946c <_dtoa_r+0x34>
 8009df6:	693a      	ldr	r2, [r7, #16]
 8009df8:	3202      	adds	r2, #2
 8009dfa:	0092      	lsls	r2, r2, #2
 8009dfc:	f107 010c 	add.w	r1, r7, #12
 8009e00:	300c      	adds	r0, #12
 8009e02:	f7fe fdf3 	bl	80089ec <memcpy>
 8009e06:	2201      	movs	r2, #1
 8009e08:	4629      	mov	r1, r5
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	f000 fc1a 	bl	800a644 <__lshift>
 8009e10:	9b01      	ldr	r3, [sp, #4]
 8009e12:	f103 0901 	add.w	r9, r3, #1
 8009e16:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	9305      	str	r3, [sp, #20]
 8009e1e:	f00a 0301 	and.w	r3, sl, #1
 8009e22:	46b8      	mov	r8, r7
 8009e24:	9304      	str	r3, [sp, #16]
 8009e26:	4607      	mov	r7, r0
 8009e28:	4631      	mov	r1, r6
 8009e2a:	ee18 0a10 	vmov	r0, s16
 8009e2e:	f7ff fa75 	bl	800931c <quorem>
 8009e32:	4641      	mov	r1, r8
 8009e34:	9002      	str	r0, [sp, #8]
 8009e36:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009e3a:	ee18 0a10 	vmov	r0, s16
 8009e3e:	f000 fc71 	bl	800a724 <__mcmp>
 8009e42:	463a      	mov	r2, r7
 8009e44:	9003      	str	r0, [sp, #12]
 8009e46:	4631      	mov	r1, r6
 8009e48:	4620      	mov	r0, r4
 8009e4a:	f000 fc87 	bl	800a75c <__mdiff>
 8009e4e:	68c2      	ldr	r2, [r0, #12]
 8009e50:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8009e54:	4605      	mov	r5, r0
 8009e56:	bb02      	cbnz	r2, 8009e9a <_dtoa_r+0xa62>
 8009e58:	4601      	mov	r1, r0
 8009e5a:	ee18 0a10 	vmov	r0, s16
 8009e5e:	f000 fc61 	bl	800a724 <__mcmp>
 8009e62:	4602      	mov	r2, r0
 8009e64:	4629      	mov	r1, r5
 8009e66:	4620      	mov	r0, r4
 8009e68:	9207      	str	r2, [sp, #28]
 8009e6a:	f000 fa19 	bl	800a2a0 <_Bfree>
 8009e6e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009e72:	ea43 0102 	orr.w	r1, r3, r2
 8009e76:	9b04      	ldr	r3, [sp, #16]
 8009e78:	430b      	orrs	r3, r1
 8009e7a:	464d      	mov	r5, r9
 8009e7c:	d10f      	bne.n	8009e9e <_dtoa_r+0xa66>
 8009e7e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009e82:	d02a      	beq.n	8009eda <_dtoa_r+0xaa2>
 8009e84:	9b03      	ldr	r3, [sp, #12]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	dd02      	ble.n	8009e90 <_dtoa_r+0xa58>
 8009e8a:	9b02      	ldr	r3, [sp, #8]
 8009e8c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009e90:	f88b a000 	strb.w	sl, [fp]
 8009e94:	e775      	b.n	8009d82 <_dtoa_r+0x94a>
 8009e96:	4638      	mov	r0, r7
 8009e98:	e7ba      	b.n	8009e10 <_dtoa_r+0x9d8>
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	e7e2      	b.n	8009e64 <_dtoa_r+0xa2c>
 8009e9e:	9b03      	ldr	r3, [sp, #12]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	db04      	blt.n	8009eae <_dtoa_r+0xa76>
 8009ea4:	9906      	ldr	r1, [sp, #24]
 8009ea6:	430b      	orrs	r3, r1
 8009ea8:	9904      	ldr	r1, [sp, #16]
 8009eaa:	430b      	orrs	r3, r1
 8009eac:	d122      	bne.n	8009ef4 <_dtoa_r+0xabc>
 8009eae:	2a00      	cmp	r2, #0
 8009eb0:	ddee      	ble.n	8009e90 <_dtoa_r+0xa58>
 8009eb2:	ee18 1a10 	vmov	r1, s16
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	4620      	mov	r0, r4
 8009eba:	f000 fbc3 	bl	800a644 <__lshift>
 8009ebe:	4631      	mov	r1, r6
 8009ec0:	ee08 0a10 	vmov	s16, r0
 8009ec4:	f000 fc2e 	bl	800a724 <__mcmp>
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	dc03      	bgt.n	8009ed4 <_dtoa_r+0xa9c>
 8009ecc:	d1e0      	bne.n	8009e90 <_dtoa_r+0xa58>
 8009ece:	f01a 0f01 	tst.w	sl, #1
 8009ed2:	d0dd      	beq.n	8009e90 <_dtoa_r+0xa58>
 8009ed4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009ed8:	d1d7      	bne.n	8009e8a <_dtoa_r+0xa52>
 8009eda:	2339      	movs	r3, #57	; 0x39
 8009edc:	f88b 3000 	strb.w	r3, [fp]
 8009ee0:	462b      	mov	r3, r5
 8009ee2:	461d      	mov	r5, r3
 8009ee4:	3b01      	subs	r3, #1
 8009ee6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009eea:	2a39      	cmp	r2, #57	; 0x39
 8009eec:	d071      	beq.n	8009fd2 <_dtoa_r+0xb9a>
 8009eee:	3201      	adds	r2, #1
 8009ef0:	701a      	strb	r2, [r3, #0]
 8009ef2:	e746      	b.n	8009d82 <_dtoa_r+0x94a>
 8009ef4:	2a00      	cmp	r2, #0
 8009ef6:	dd07      	ble.n	8009f08 <_dtoa_r+0xad0>
 8009ef8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009efc:	d0ed      	beq.n	8009eda <_dtoa_r+0xaa2>
 8009efe:	f10a 0301 	add.w	r3, sl, #1
 8009f02:	f88b 3000 	strb.w	r3, [fp]
 8009f06:	e73c      	b.n	8009d82 <_dtoa_r+0x94a>
 8009f08:	9b05      	ldr	r3, [sp, #20]
 8009f0a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009f0e:	4599      	cmp	r9, r3
 8009f10:	d047      	beq.n	8009fa2 <_dtoa_r+0xb6a>
 8009f12:	ee18 1a10 	vmov	r1, s16
 8009f16:	2300      	movs	r3, #0
 8009f18:	220a      	movs	r2, #10
 8009f1a:	4620      	mov	r0, r4
 8009f1c:	f000 f9e2 	bl	800a2e4 <__multadd>
 8009f20:	45b8      	cmp	r8, r7
 8009f22:	ee08 0a10 	vmov	s16, r0
 8009f26:	f04f 0300 	mov.w	r3, #0
 8009f2a:	f04f 020a 	mov.w	r2, #10
 8009f2e:	4641      	mov	r1, r8
 8009f30:	4620      	mov	r0, r4
 8009f32:	d106      	bne.n	8009f42 <_dtoa_r+0xb0a>
 8009f34:	f000 f9d6 	bl	800a2e4 <__multadd>
 8009f38:	4680      	mov	r8, r0
 8009f3a:	4607      	mov	r7, r0
 8009f3c:	f109 0901 	add.w	r9, r9, #1
 8009f40:	e772      	b.n	8009e28 <_dtoa_r+0x9f0>
 8009f42:	f000 f9cf 	bl	800a2e4 <__multadd>
 8009f46:	4639      	mov	r1, r7
 8009f48:	4680      	mov	r8, r0
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	220a      	movs	r2, #10
 8009f4e:	4620      	mov	r0, r4
 8009f50:	f000 f9c8 	bl	800a2e4 <__multadd>
 8009f54:	4607      	mov	r7, r0
 8009f56:	e7f1      	b.n	8009f3c <_dtoa_r+0xb04>
 8009f58:	9b03      	ldr	r3, [sp, #12]
 8009f5a:	9302      	str	r3, [sp, #8]
 8009f5c:	9d01      	ldr	r5, [sp, #4]
 8009f5e:	ee18 0a10 	vmov	r0, s16
 8009f62:	4631      	mov	r1, r6
 8009f64:	f7ff f9da 	bl	800931c <quorem>
 8009f68:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009f6c:	9b01      	ldr	r3, [sp, #4]
 8009f6e:	f805 ab01 	strb.w	sl, [r5], #1
 8009f72:	1aea      	subs	r2, r5, r3
 8009f74:	9b02      	ldr	r3, [sp, #8]
 8009f76:	4293      	cmp	r3, r2
 8009f78:	dd09      	ble.n	8009f8e <_dtoa_r+0xb56>
 8009f7a:	ee18 1a10 	vmov	r1, s16
 8009f7e:	2300      	movs	r3, #0
 8009f80:	220a      	movs	r2, #10
 8009f82:	4620      	mov	r0, r4
 8009f84:	f000 f9ae 	bl	800a2e4 <__multadd>
 8009f88:	ee08 0a10 	vmov	s16, r0
 8009f8c:	e7e7      	b.n	8009f5e <_dtoa_r+0xb26>
 8009f8e:	9b02      	ldr	r3, [sp, #8]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	bfc8      	it	gt
 8009f94:	461d      	movgt	r5, r3
 8009f96:	9b01      	ldr	r3, [sp, #4]
 8009f98:	bfd8      	it	le
 8009f9a:	2501      	movle	r5, #1
 8009f9c:	441d      	add	r5, r3
 8009f9e:	f04f 0800 	mov.w	r8, #0
 8009fa2:	ee18 1a10 	vmov	r1, s16
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	4620      	mov	r0, r4
 8009faa:	f000 fb4b 	bl	800a644 <__lshift>
 8009fae:	4631      	mov	r1, r6
 8009fb0:	ee08 0a10 	vmov	s16, r0
 8009fb4:	f000 fbb6 	bl	800a724 <__mcmp>
 8009fb8:	2800      	cmp	r0, #0
 8009fba:	dc91      	bgt.n	8009ee0 <_dtoa_r+0xaa8>
 8009fbc:	d102      	bne.n	8009fc4 <_dtoa_r+0xb8c>
 8009fbe:	f01a 0f01 	tst.w	sl, #1
 8009fc2:	d18d      	bne.n	8009ee0 <_dtoa_r+0xaa8>
 8009fc4:	462b      	mov	r3, r5
 8009fc6:	461d      	mov	r5, r3
 8009fc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009fcc:	2a30      	cmp	r2, #48	; 0x30
 8009fce:	d0fa      	beq.n	8009fc6 <_dtoa_r+0xb8e>
 8009fd0:	e6d7      	b.n	8009d82 <_dtoa_r+0x94a>
 8009fd2:	9a01      	ldr	r2, [sp, #4]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d184      	bne.n	8009ee2 <_dtoa_r+0xaaa>
 8009fd8:	9b00      	ldr	r3, [sp, #0]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	9300      	str	r3, [sp, #0]
 8009fde:	2331      	movs	r3, #49	; 0x31
 8009fe0:	7013      	strb	r3, [r2, #0]
 8009fe2:	e6ce      	b.n	8009d82 <_dtoa_r+0x94a>
 8009fe4:	4b09      	ldr	r3, [pc, #36]	; (800a00c <_dtoa_r+0xbd4>)
 8009fe6:	f7ff ba95 	b.w	8009514 <_dtoa_r+0xdc>
 8009fea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	f47f aa6e 	bne.w	80094ce <_dtoa_r+0x96>
 8009ff2:	4b07      	ldr	r3, [pc, #28]	; (800a010 <_dtoa_r+0xbd8>)
 8009ff4:	f7ff ba8e 	b.w	8009514 <_dtoa_r+0xdc>
 8009ff8:	9b02      	ldr	r3, [sp, #8]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	dcae      	bgt.n	8009f5c <_dtoa_r+0xb24>
 8009ffe:	9b06      	ldr	r3, [sp, #24]
 800a000:	2b02      	cmp	r3, #2
 800a002:	f73f aea8 	bgt.w	8009d56 <_dtoa_r+0x91e>
 800a006:	e7a9      	b.n	8009f5c <_dtoa_r+0xb24>
 800a008:	0800e15b 	.word	0x0800e15b
 800a00c:	0800e0b8 	.word	0x0800e0b8
 800a010:	0800e0dc 	.word	0x0800e0dc

0800a014 <std>:
 800a014:	2300      	movs	r3, #0
 800a016:	b510      	push	{r4, lr}
 800a018:	4604      	mov	r4, r0
 800a01a:	e9c0 3300 	strd	r3, r3, [r0]
 800a01e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a022:	6083      	str	r3, [r0, #8]
 800a024:	8181      	strh	r1, [r0, #12]
 800a026:	6643      	str	r3, [r0, #100]	; 0x64
 800a028:	81c2      	strh	r2, [r0, #14]
 800a02a:	6183      	str	r3, [r0, #24]
 800a02c:	4619      	mov	r1, r3
 800a02e:	2208      	movs	r2, #8
 800a030:	305c      	adds	r0, #92	; 0x5c
 800a032:	f7fe fce9 	bl	8008a08 <memset>
 800a036:	4b05      	ldr	r3, [pc, #20]	; (800a04c <std+0x38>)
 800a038:	6263      	str	r3, [r4, #36]	; 0x24
 800a03a:	4b05      	ldr	r3, [pc, #20]	; (800a050 <std+0x3c>)
 800a03c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a03e:	4b05      	ldr	r3, [pc, #20]	; (800a054 <std+0x40>)
 800a040:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a042:	4b05      	ldr	r3, [pc, #20]	; (800a058 <std+0x44>)
 800a044:	6224      	str	r4, [r4, #32]
 800a046:	6323      	str	r3, [r4, #48]	; 0x30
 800a048:	bd10      	pop	{r4, pc}
 800a04a:	bf00      	nop
 800a04c:	0800ade9 	.word	0x0800ade9
 800a050:	0800ae0b 	.word	0x0800ae0b
 800a054:	0800ae43 	.word	0x0800ae43
 800a058:	0800ae67 	.word	0x0800ae67

0800a05c <_cleanup_r>:
 800a05c:	4901      	ldr	r1, [pc, #4]	; (800a064 <_cleanup_r+0x8>)
 800a05e:	f000 b8af 	b.w	800a1c0 <_fwalk_reent>
 800a062:	bf00      	nop
 800a064:	0800b17d 	.word	0x0800b17d

0800a068 <__sfmoreglue>:
 800a068:	b570      	push	{r4, r5, r6, lr}
 800a06a:	2268      	movs	r2, #104	; 0x68
 800a06c:	1e4d      	subs	r5, r1, #1
 800a06e:	4355      	muls	r5, r2
 800a070:	460e      	mov	r6, r1
 800a072:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a076:	f000 fcd9 	bl	800aa2c <_malloc_r>
 800a07a:	4604      	mov	r4, r0
 800a07c:	b140      	cbz	r0, 800a090 <__sfmoreglue+0x28>
 800a07e:	2100      	movs	r1, #0
 800a080:	e9c0 1600 	strd	r1, r6, [r0]
 800a084:	300c      	adds	r0, #12
 800a086:	60a0      	str	r0, [r4, #8]
 800a088:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a08c:	f7fe fcbc 	bl	8008a08 <memset>
 800a090:	4620      	mov	r0, r4
 800a092:	bd70      	pop	{r4, r5, r6, pc}

0800a094 <__sfp_lock_acquire>:
 800a094:	4801      	ldr	r0, [pc, #4]	; (800a09c <__sfp_lock_acquire+0x8>)
 800a096:	f000 b8b8 	b.w	800a20a <__retarget_lock_acquire_recursive>
 800a09a:	bf00      	nop
 800a09c:	20000625 	.word	0x20000625

0800a0a0 <__sfp_lock_release>:
 800a0a0:	4801      	ldr	r0, [pc, #4]	; (800a0a8 <__sfp_lock_release+0x8>)
 800a0a2:	f000 b8b3 	b.w	800a20c <__retarget_lock_release_recursive>
 800a0a6:	bf00      	nop
 800a0a8:	20000625 	.word	0x20000625

0800a0ac <__sinit_lock_acquire>:
 800a0ac:	4801      	ldr	r0, [pc, #4]	; (800a0b4 <__sinit_lock_acquire+0x8>)
 800a0ae:	f000 b8ac 	b.w	800a20a <__retarget_lock_acquire_recursive>
 800a0b2:	bf00      	nop
 800a0b4:	20000626 	.word	0x20000626

0800a0b8 <__sinit_lock_release>:
 800a0b8:	4801      	ldr	r0, [pc, #4]	; (800a0c0 <__sinit_lock_release+0x8>)
 800a0ba:	f000 b8a7 	b.w	800a20c <__retarget_lock_release_recursive>
 800a0be:	bf00      	nop
 800a0c0:	20000626 	.word	0x20000626

0800a0c4 <__sinit>:
 800a0c4:	b510      	push	{r4, lr}
 800a0c6:	4604      	mov	r4, r0
 800a0c8:	f7ff fff0 	bl	800a0ac <__sinit_lock_acquire>
 800a0cc:	69a3      	ldr	r3, [r4, #24]
 800a0ce:	b11b      	cbz	r3, 800a0d8 <__sinit+0x14>
 800a0d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0d4:	f7ff bff0 	b.w	800a0b8 <__sinit_lock_release>
 800a0d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a0dc:	6523      	str	r3, [r4, #80]	; 0x50
 800a0de:	4b13      	ldr	r3, [pc, #76]	; (800a12c <__sinit+0x68>)
 800a0e0:	4a13      	ldr	r2, [pc, #76]	; (800a130 <__sinit+0x6c>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a0e6:	42a3      	cmp	r3, r4
 800a0e8:	bf04      	itt	eq
 800a0ea:	2301      	moveq	r3, #1
 800a0ec:	61a3      	streq	r3, [r4, #24]
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	f000 f820 	bl	800a134 <__sfp>
 800a0f4:	6060      	str	r0, [r4, #4]
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f000 f81c 	bl	800a134 <__sfp>
 800a0fc:	60a0      	str	r0, [r4, #8]
 800a0fe:	4620      	mov	r0, r4
 800a100:	f000 f818 	bl	800a134 <__sfp>
 800a104:	2200      	movs	r2, #0
 800a106:	60e0      	str	r0, [r4, #12]
 800a108:	2104      	movs	r1, #4
 800a10a:	6860      	ldr	r0, [r4, #4]
 800a10c:	f7ff ff82 	bl	800a014 <std>
 800a110:	68a0      	ldr	r0, [r4, #8]
 800a112:	2201      	movs	r2, #1
 800a114:	2109      	movs	r1, #9
 800a116:	f7ff ff7d 	bl	800a014 <std>
 800a11a:	68e0      	ldr	r0, [r4, #12]
 800a11c:	2202      	movs	r2, #2
 800a11e:	2112      	movs	r1, #18
 800a120:	f7ff ff78 	bl	800a014 <std>
 800a124:	2301      	movs	r3, #1
 800a126:	61a3      	str	r3, [r4, #24]
 800a128:	e7d2      	b.n	800a0d0 <__sinit+0xc>
 800a12a:	bf00      	nop
 800a12c:	0800e0a4 	.word	0x0800e0a4
 800a130:	0800a05d 	.word	0x0800a05d

0800a134 <__sfp>:
 800a134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a136:	4607      	mov	r7, r0
 800a138:	f7ff ffac 	bl	800a094 <__sfp_lock_acquire>
 800a13c:	4b1e      	ldr	r3, [pc, #120]	; (800a1b8 <__sfp+0x84>)
 800a13e:	681e      	ldr	r6, [r3, #0]
 800a140:	69b3      	ldr	r3, [r6, #24]
 800a142:	b913      	cbnz	r3, 800a14a <__sfp+0x16>
 800a144:	4630      	mov	r0, r6
 800a146:	f7ff ffbd 	bl	800a0c4 <__sinit>
 800a14a:	3648      	adds	r6, #72	; 0x48
 800a14c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a150:	3b01      	subs	r3, #1
 800a152:	d503      	bpl.n	800a15c <__sfp+0x28>
 800a154:	6833      	ldr	r3, [r6, #0]
 800a156:	b30b      	cbz	r3, 800a19c <__sfp+0x68>
 800a158:	6836      	ldr	r6, [r6, #0]
 800a15a:	e7f7      	b.n	800a14c <__sfp+0x18>
 800a15c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a160:	b9d5      	cbnz	r5, 800a198 <__sfp+0x64>
 800a162:	4b16      	ldr	r3, [pc, #88]	; (800a1bc <__sfp+0x88>)
 800a164:	60e3      	str	r3, [r4, #12]
 800a166:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a16a:	6665      	str	r5, [r4, #100]	; 0x64
 800a16c:	f000 f84c 	bl	800a208 <__retarget_lock_init_recursive>
 800a170:	f7ff ff96 	bl	800a0a0 <__sfp_lock_release>
 800a174:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a178:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a17c:	6025      	str	r5, [r4, #0]
 800a17e:	61a5      	str	r5, [r4, #24]
 800a180:	2208      	movs	r2, #8
 800a182:	4629      	mov	r1, r5
 800a184:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a188:	f7fe fc3e 	bl	8008a08 <memset>
 800a18c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a190:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a194:	4620      	mov	r0, r4
 800a196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a198:	3468      	adds	r4, #104	; 0x68
 800a19a:	e7d9      	b.n	800a150 <__sfp+0x1c>
 800a19c:	2104      	movs	r1, #4
 800a19e:	4638      	mov	r0, r7
 800a1a0:	f7ff ff62 	bl	800a068 <__sfmoreglue>
 800a1a4:	4604      	mov	r4, r0
 800a1a6:	6030      	str	r0, [r6, #0]
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	d1d5      	bne.n	800a158 <__sfp+0x24>
 800a1ac:	f7ff ff78 	bl	800a0a0 <__sfp_lock_release>
 800a1b0:	230c      	movs	r3, #12
 800a1b2:	603b      	str	r3, [r7, #0]
 800a1b4:	e7ee      	b.n	800a194 <__sfp+0x60>
 800a1b6:	bf00      	nop
 800a1b8:	0800e0a4 	.word	0x0800e0a4
 800a1bc:	ffff0001 	.word	0xffff0001

0800a1c0 <_fwalk_reent>:
 800a1c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1c4:	4606      	mov	r6, r0
 800a1c6:	4688      	mov	r8, r1
 800a1c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a1cc:	2700      	movs	r7, #0
 800a1ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a1d2:	f1b9 0901 	subs.w	r9, r9, #1
 800a1d6:	d505      	bpl.n	800a1e4 <_fwalk_reent+0x24>
 800a1d8:	6824      	ldr	r4, [r4, #0]
 800a1da:	2c00      	cmp	r4, #0
 800a1dc:	d1f7      	bne.n	800a1ce <_fwalk_reent+0xe>
 800a1de:	4638      	mov	r0, r7
 800a1e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1e4:	89ab      	ldrh	r3, [r5, #12]
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	d907      	bls.n	800a1fa <_fwalk_reent+0x3a>
 800a1ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	d003      	beq.n	800a1fa <_fwalk_reent+0x3a>
 800a1f2:	4629      	mov	r1, r5
 800a1f4:	4630      	mov	r0, r6
 800a1f6:	47c0      	blx	r8
 800a1f8:	4307      	orrs	r7, r0
 800a1fa:	3568      	adds	r5, #104	; 0x68
 800a1fc:	e7e9      	b.n	800a1d2 <_fwalk_reent+0x12>
	...

0800a200 <_localeconv_r>:
 800a200:	4800      	ldr	r0, [pc, #0]	; (800a204 <_localeconv_r+0x4>)
 800a202:	4770      	bx	lr
 800a204:	20000160 	.word	0x20000160

0800a208 <__retarget_lock_init_recursive>:
 800a208:	4770      	bx	lr

0800a20a <__retarget_lock_acquire_recursive>:
 800a20a:	4770      	bx	lr

0800a20c <__retarget_lock_release_recursive>:
 800a20c:	4770      	bx	lr
	...

0800a210 <malloc>:
 800a210:	4b02      	ldr	r3, [pc, #8]	; (800a21c <malloc+0xc>)
 800a212:	4601      	mov	r1, r0
 800a214:	6818      	ldr	r0, [r3, #0]
 800a216:	f000 bc09 	b.w	800aa2c <_malloc_r>
 800a21a:	bf00      	nop
 800a21c:	2000000c 	.word	0x2000000c

0800a220 <_Balloc>:
 800a220:	b570      	push	{r4, r5, r6, lr}
 800a222:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a224:	4604      	mov	r4, r0
 800a226:	460d      	mov	r5, r1
 800a228:	b976      	cbnz	r6, 800a248 <_Balloc+0x28>
 800a22a:	2010      	movs	r0, #16
 800a22c:	f7ff fff0 	bl	800a210 <malloc>
 800a230:	4602      	mov	r2, r0
 800a232:	6260      	str	r0, [r4, #36]	; 0x24
 800a234:	b920      	cbnz	r0, 800a240 <_Balloc+0x20>
 800a236:	4b18      	ldr	r3, [pc, #96]	; (800a298 <_Balloc+0x78>)
 800a238:	4818      	ldr	r0, [pc, #96]	; (800a29c <_Balloc+0x7c>)
 800a23a:	2166      	movs	r1, #102	; 0x66
 800a23c:	f000 feea 	bl	800b014 <__assert_func>
 800a240:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a244:	6006      	str	r6, [r0, #0]
 800a246:	60c6      	str	r6, [r0, #12]
 800a248:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a24a:	68f3      	ldr	r3, [r6, #12]
 800a24c:	b183      	cbz	r3, 800a270 <_Balloc+0x50>
 800a24e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a256:	b9b8      	cbnz	r0, 800a288 <_Balloc+0x68>
 800a258:	2101      	movs	r1, #1
 800a25a:	fa01 f605 	lsl.w	r6, r1, r5
 800a25e:	1d72      	adds	r2, r6, #5
 800a260:	0092      	lsls	r2, r2, #2
 800a262:	4620      	mov	r0, r4
 800a264:	f000 fb60 	bl	800a928 <_calloc_r>
 800a268:	b160      	cbz	r0, 800a284 <_Balloc+0x64>
 800a26a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a26e:	e00e      	b.n	800a28e <_Balloc+0x6e>
 800a270:	2221      	movs	r2, #33	; 0x21
 800a272:	2104      	movs	r1, #4
 800a274:	4620      	mov	r0, r4
 800a276:	f000 fb57 	bl	800a928 <_calloc_r>
 800a27a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a27c:	60f0      	str	r0, [r6, #12]
 800a27e:	68db      	ldr	r3, [r3, #12]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d1e4      	bne.n	800a24e <_Balloc+0x2e>
 800a284:	2000      	movs	r0, #0
 800a286:	bd70      	pop	{r4, r5, r6, pc}
 800a288:	6802      	ldr	r2, [r0, #0]
 800a28a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a28e:	2300      	movs	r3, #0
 800a290:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a294:	e7f7      	b.n	800a286 <_Balloc+0x66>
 800a296:	bf00      	nop
 800a298:	0800e0e9 	.word	0x0800e0e9
 800a29c:	0800e1cc 	.word	0x0800e1cc

0800a2a0 <_Bfree>:
 800a2a0:	b570      	push	{r4, r5, r6, lr}
 800a2a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a2a4:	4605      	mov	r5, r0
 800a2a6:	460c      	mov	r4, r1
 800a2a8:	b976      	cbnz	r6, 800a2c8 <_Bfree+0x28>
 800a2aa:	2010      	movs	r0, #16
 800a2ac:	f7ff ffb0 	bl	800a210 <malloc>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	6268      	str	r0, [r5, #36]	; 0x24
 800a2b4:	b920      	cbnz	r0, 800a2c0 <_Bfree+0x20>
 800a2b6:	4b09      	ldr	r3, [pc, #36]	; (800a2dc <_Bfree+0x3c>)
 800a2b8:	4809      	ldr	r0, [pc, #36]	; (800a2e0 <_Bfree+0x40>)
 800a2ba:	218a      	movs	r1, #138	; 0x8a
 800a2bc:	f000 feaa 	bl	800b014 <__assert_func>
 800a2c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2c4:	6006      	str	r6, [r0, #0]
 800a2c6:	60c6      	str	r6, [r0, #12]
 800a2c8:	b13c      	cbz	r4, 800a2da <_Bfree+0x3a>
 800a2ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a2cc:	6862      	ldr	r2, [r4, #4]
 800a2ce:	68db      	ldr	r3, [r3, #12]
 800a2d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2d4:	6021      	str	r1, [r4, #0]
 800a2d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a2da:	bd70      	pop	{r4, r5, r6, pc}
 800a2dc:	0800e0e9 	.word	0x0800e0e9
 800a2e0:	0800e1cc 	.word	0x0800e1cc

0800a2e4 <__multadd>:
 800a2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2e8:	690d      	ldr	r5, [r1, #16]
 800a2ea:	4607      	mov	r7, r0
 800a2ec:	460c      	mov	r4, r1
 800a2ee:	461e      	mov	r6, r3
 800a2f0:	f101 0c14 	add.w	ip, r1, #20
 800a2f4:	2000      	movs	r0, #0
 800a2f6:	f8dc 3000 	ldr.w	r3, [ip]
 800a2fa:	b299      	uxth	r1, r3
 800a2fc:	fb02 6101 	mla	r1, r2, r1, r6
 800a300:	0c1e      	lsrs	r6, r3, #16
 800a302:	0c0b      	lsrs	r3, r1, #16
 800a304:	fb02 3306 	mla	r3, r2, r6, r3
 800a308:	b289      	uxth	r1, r1
 800a30a:	3001      	adds	r0, #1
 800a30c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a310:	4285      	cmp	r5, r0
 800a312:	f84c 1b04 	str.w	r1, [ip], #4
 800a316:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a31a:	dcec      	bgt.n	800a2f6 <__multadd+0x12>
 800a31c:	b30e      	cbz	r6, 800a362 <__multadd+0x7e>
 800a31e:	68a3      	ldr	r3, [r4, #8]
 800a320:	42ab      	cmp	r3, r5
 800a322:	dc19      	bgt.n	800a358 <__multadd+0x74>
 800a324:	6861      	ldr	r1, [r4, #4]
 800a326:	4638      	mov	r0, r7
 800a328:	3101      	adds	r1, #1
 800a32a:	f7ff ff79 	bl	800a220 <_Balloc>
 800a32e:	4680      	mov	r8, r0
 800a330:	b928      	cbnz	r0, 800a33e <__multadd+0x5a>
 800a332:	4602      	mov	r2, r0
 800a334:	4b0c      	ldr	r3, [pc, #48]	; (800a368 <__multadd+0x84>)
 800a336:	480d      	ldr	r0, [pc, #52]	; (800a36c <__multadd+0x88>)
 800a338:	21b5      	movs	r1, #181	; 0xb5
 800a33a:	f000 fe6b 	bl	800b014 <__assert_func>
 800a33e:	6922      	ldr	r2, [r4, #16]
 800a340:	3202      	adds	r2, #2
 800a342:	f104 010c 	add.w	r1, r4, #12
 800a346:	0092      	lsls	r2, r2, #2
 800a348:	300c      	adds	r0, #12
 800a34a:	f7fe fb4f 	bl	80089ec <memcpy>
 800a34e:	4621      	mov	r1, r4
 800a350:	4638      	mov	r0, r7
 800a352:	f7ff ffa5 	bl	800a2a0 <_Bfree>
 800a356:	4644      	mov	r4, r8
 800a358:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a35c:	3501      	adds	r5, #1
 800a35e:	615e      	str	r6, [r3, #20]
 800a360:	6125      	str	r5, [r4, #16]
 800a362:	4620      	mov	r0, r4
 800a364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a368:	0800e15b 	.word	0x0800e15b
 800a36c:	0800e1cc 	.word	0x0800e1cc

0800a370 <__hi0bits>:
 800a370:	0c03      	lsrs	r3, r0, #16
 800a372:	041b      	lsls	r3, r3, #16
 800a374:	b9d3      	cbnz	r3, 800a3ac <__hi0bits+0x3c>
 800a376:	0400      	lsls	r0, r0, #16
 800a378:	2310      	movs	r3, #16
 800a37a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a37e:	bf04      	itt	eq
 800a380:	0200      	lsleq	r0, r0, #8
 800a382:	3308      	addeq	r3, #8
 800a384:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a388:	bf04      	itt	eq
 800a38a:	0100      	lsleq	r0, r0, #4
 800a38c:	3304      	addeq	r3, #4
 800a38e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a392:	bf04      	itt	eq
 800a394:	0080      	lsleq	r0, r0, #2
 800a396:	3302      	addeq	r3, #2
 800a398:	2800      	cmp	r0, #0
 800a39a:	db05      	blt.n	800a3a8 <__hi0bits+0x38>
 800a39c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a3a0:	f103 0301 	add.w	r3, r3, #1
 800a3a4:	bf08      	it	eq
 800a3a6:	2320      	moveq	r3, #32
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	4770      	bx	lr
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	e7e4      	b.n	800a37a <__hi0bits+0xa>

0800a3b0 <__lo0bits>:
 800a3b0:	6803      	ldr	r3, [r0, #0]
 800a3b2:	f013 0207 	ands.w	r2, r3, #7
 800a3b6:	4601      	mov	r1, r0
 800a3b8:	d00b      	beq.n	800a3d2 <__lo0bits+0x22>
 800a3ba:	07da      	lsls	r2, r3, #31
 800a3bc:	d423      	bmi.n	800a406 <__lo0bits+0x56>
 800a3be:	0798      	lsls	r0, r3, #30
 800a3c0:	bf49      	itett	mi
 800a3c2:	085b      	lsrmi	r3, r3, #1
 800a3c4:	089b      	lsrpl	r3, r3, #2
 800a3c6:	2001      	movmi	r0, #1
 800a3c8:	600b      	strmi	r3, [r1, #0]
 800a3ca:	bf5c      	itt	pl
 800a3cc:	600b      	strpl	r3, [r1, #0]
 800a3ce:	2002      	movpl	r0, #2
 800a3d0:	4770      	bx	lr
 800a3d2:	b298      	uxth	r0, r3
 800a3d4:	b9a8      	cbnz	r0, 800a402 <__lo0bits+0x52>
 800a3d6:	0c1b      	lsrs	r3, r3, #16
 800a3d8:	2010      	movs	r0, #16
 800a3da:	b2da      	uxtb	r2, r3
 800a3dc:	b90a      	cbnz	r2, 800a3e2 <__lo0bits+0x32>
 800a3de:	3008      	adds	r0, #8
 800a3e0:	0a1b      	lsrs	r3, r3, #8
 800a3e2:	071a      	lsls	r2, r3, #28
 800a3e4:	bf04      	itt	eq
 800a3e6:	091b      	lsreq	r3, r3, #4
 800a3e8:	3004      	addeq	r0, #4
 800a3ea:	079a      	lsls	r2, r3, #30
 800a3ec:	bf04      	itt	eq
 800a3ee:	089b      	lsreq	r3, r3, #2
 800a3f0:	3002      	addeq	r0, #2
 800a3f2:	07da      	lsls	r2, r3, #31
 800a3f4:	d403      	bmi.n	800a3fe <__lo0bits+0x4e>
 800a3f6:	085b      	lsrs	r3, r3, #1
 800a3f8:	f100 0001 	add.w	r0, r0, #1
 800a3fc:	d005      	beq.n	800a40a <__lo0bits+0x5a>
 800a3fe:	600b      	str	r3, [r1, #0]
 800a400:	4770      	bx	lr
 800a402:	4610      	mov	r0, r2
 800a404:	e7e9      	b.n	800a3da <__lo0bits+0x2a>
 800a406:	2000      	movs	r0, #0
 800a408:	4770      	bx	lr
 800a40a:	2020      	movs	r0, #32
 800a40c:	4770      	bx	lr
	...

0800a410 <__i2b>:
 800a410:	b510      	push	{r4, lr}
 800a412:	460c      	mov	r4, r1
 800a414:	2101      	movs	r1, #1
 800a416:	f7ff ff03 	bl	800a220 <_Balloc>
 800a41a:	4602      	mov	r2, r0
 800a41c:	b928      	cbnz	r0, 800a42a <__i2b+0x1a>
 800a41e:	4b05      	ldr	r3, [pc, #20]	; (800a434 <__i2b+0x24>)
 800a420:	4805      	ldr	r0, [pc, #20]	; (800a438 <__i2b+0x28>)
 800a422:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a426:	f000 fdf5 	bl	800b014 <__assert_func>
 800a42a:	2301      	movs	r3, #1
 800a42c:	6144      	str	r4, [r0, #20]
 800a42e:	6103      	str	r3, [r0, #16]
 800a430:	bd10      	pop	{r4, pc}
 800a432:	bf00      	nop
 800a434:	0800e15b 	.word	0x0800e15b
 800a438:	0800e1cc 	.word	0x0800e1cc

0800a43c <__multiply>:
 800a43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a440:	4691      	mov	r9, r2
 800a442:	690a      	ldr	r2, [r1, #16]
 800a444:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a448:	429a      	cmp	r2, r3
 800a44a:	bfb8      	it	lt
 800a44c:	460b      	movlt	r3, r1
 800a44e:	460c      	mov	r4, r1
 800a450:	bfbc      	itt	lt
 800a452:	464c      	movlt	r4, r9
 800a454:	4699      	movlt	r9, r3
 800a456:	6927      	ldr	r7, [r4, #16]
 800a458:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a45c:	68a3      	ldr	r3, [r4, #8]
 800a45e:	6861      	ldr	r1, [r4, #4]
 800a460:	eb07 060a 	add.w	r6, r7, sl
 800a464:	42b3      	cmp	r3, r6
 800a466:	b085      	sub	sp, #20
 800a468:	bfb8      	it	lt
 800a46a:	3101      	addlt	r1, #1
 800a46c:	f7ff fed8 	bl	800a220 <_Balloc>
 800a470:	b930      	cbnz	r0, 800a480 <__multiply+0x44>
 800a472:	4602      	mov	r2, r0
 800a474:	4b44      	ldr	r3, [pc, #272]	; (800a588 <__multiply+0x14c>)
 800a476:	4845      	ldr	r0, [pc, #276]	; (800a58c <__multiply+0x150>)
 800a478:	f240 115d 	movw	r1, #349	; 0x15d
 800a47c:	f000 fdca 	bl	800b014 <__assert_func>
 800a480:	f100 0514 	add.w	r5, r0, #20
 800a484:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a488:	462b      	mov	r3, r5
 800a48a:	2200      	movs	r2, #0
 800a48c:	4543      	cmp	r3, r8
 800a48e:	d321      	bcc.n	800a4d4 <__multiply+0x98>
 800a490:	f104 0314 	add.w	r3, r4, #20
 800a494:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a498:	f109 0314 	add.w	r3, r9, #20
 800a49c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a4a0:	9202      	str	r2, [sp, #8]
 800a4a2:	1b3a      	subs	r2, r7, r4
 800a4a4:	3a15      	subs	r2, #21
 800a4a6:	f022 0203 	bic.w	r2, r2, #3
 800a4aa:	3204      	adds	r2, #4
 800a4ac:	f104 0115 	add.w	r1, r4, #21
 800a4b0:	428f      	cmp	r7, r1
 800a4b2:	bf38      	it	cc
 800a4b4:	2204      	movcc	r2, #4
 800a4b6:	9201      	str	r2, [sp, #4]
 800a4b8:	9a02      	ldr	r2, [sp, #8]
 800a4ba:	9303      	str	r3, [sp, #12]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d80c      	bhi.n	800a4da <__multiply+0x9e>
 800a4c0:	2e00      	cmp	r6, #0
 800a4c2:	dd03      	ble.n	800a4cc <__multiply+0x90>
 800a4c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d05a      	beq.n	800a582 <__multiply+0x146>
 800a4cc:	6106      	str	r6, [r0, #16]
 800a4ce:	b005      	add	sp, #20
 800a4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4d4:	f843 2b04 	str.w	r2, [r3], #4
 800a4d8:	e7d8      	b.n	800a48c <__multiply+0x50>
 800a4da:	f8b3 a000 	ldrh.w	sl, [r3]
 800a4de:	f1ba 0f00 	cmp.w	sl, #0
 800a4e2:	d024      	beq.n	800a52e <__multiply+0xf2>
 800a4e4:	f104 0e14 	add.w	lr, r4, #20
 800a4e8:	46a9      	mov	r9, r5
 800a4ea:	f04f 0c00 	mov.w	ip, #0
 800a4ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a4f2:	f8d9 1000 	ldr.w	r1, [r9]
 800a4f6:	fa1f fb82 	uxth.w	fp, r2
 800a4fa:	b289      	uxth	r1, r1
 800a4fc:	fb0a 110b 	mla	r1, sl, fp, r1
 800a500:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a504:	f8d9 2000 	ldr.w	r2, [r9]
 800a508:	4461      	add	r1, ip
 800a50a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a50e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a512:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a516:	b289      	uxth	r1, r1
 800a518:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a51c:	4577      	cmp	r7, lr
 800a51e:	f849 1b04 	str.w	r1, [r9], #4
 800a522:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a526:	d8e2      	bhi.n	800a4ee <__multiply+0xb2>
 800a528:	9a01      	ldr	r2, [sp, #4]
 800a52a:	f845 c002 	str.w	ip, [r5, r2]
 800a52e:	9a03      	ldr	r2, [sp, #12]
 800a530:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a534:	3304      	adds	r3, #4
 800a536:	f1b9 0f00 	cmp.w	r9, #0
 800a53a:	d020      	beq.n	800a57e <__multiply+0x142>
 800a53c:	6829      	ldr	r1, [r5, #0]
 800a53e:	f104 0c14 	add.w	ip, r4, #20
 800a542:	46ae      	mov	lr, r5
 800a544:	f04f 0a00 	mov.w	sl, #0
 800a548:	f8bc b000 	ldrh.w	fp, [ip]
 800a54c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a550:	fb09 220b 	mla	r2, r9, fp, r2
 800a554:	4492      	add	sl, r2
 800a556:	b289      	uxth	r1, r1
 800a558:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a55c:	f84e 1b04 	str.w	r1, [lr], #4
 800a560:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a564:	f8be 1000 	ldrh.w	r1, [lr]
 800a568:	0c12      	lsrs	r2, r2, #16
 800a56a:	fb09 1102 	mla	r1, r9, r2, r1
 800a56e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a572:	4567      	cmp	r7, ip
 800a574:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a578:	d8e6      	bhi.n	800a548 <__multiply+0x10c>
 800a57a:	9a01      	ldr	r2, [sp, #4]
 800a57c:	50a9      	str	r1, [r5, r2]
 800a57e:	3504      	adds	r5, #4
 800a580:	e79a      	b.n	800a4b8 <__multiply+0x7c>
 800a582:	3e01      	subs	r6, #1
 800a584:	e79c      	b.n	800a4c0 <__multiply+0x84>
 800a586:	bf00      	nop
 800a588:	0800e15b 	.word	0x0800e15b
 800a58c:	0800e1cc 	.word	0x0800e1cc

0800a590 <__pow5mult>:
 800a590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a594:	4615      	mov	r5, r2
 800a596:	f012 0203 	ands.w	r2, r2, #3
 800a59a:	4606      	mov	r6, r0
 800a59c:	460f      	mov	r7, r1
 800a59e:	d007      	beq.n	800a5b0 <__pow5mult+0x20>
 800a5a0:	4c25      	ldr	r4, [pc, #148]	; (800a638 <__pow5mult+0xa8>)
 800a5a2:	3a01      	subs	r2, #1
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a5aa:	f7ff fe9b 	bl	800a2e4 <__multadd>
 800a5ae:	4607      	mov	r7, r0
 800a5b0:	10ad      	asrs	r5, r5, #2
 800a5b2:	d03d      	beq.n	800a630 <__pow5mult+0xa0>
 800a5b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a5b6:	b97c      	cbnz	r4, 800a5d8 <__pow5mult+0x48>
 800a5b8:	2010      	movs	r0, #16
 800a5ba:	f7ff fe29 	bl	800a210 <malloc>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	6270      	str	r0, [r6, #36]	; 0x24
 800a5c2:	b928      	cbnz	r0, 800a5d0 <__pow5mult+0x40>
 800a5c4:	4b1d      	ldr	r3, [pc, #116]	; (800a63c <__pow5mult+0xac>)
 800a5c6:	481e      	ldr	r0, [pc, #120]	; (800a640 <__pow5mult+0xb0>)
 800a5c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a5cc:	f000 fd22 	bl	800b014 <__assert_func>
 800a5d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a5d4:	6004      	str	r4, [r0, #0]
 800a5d6:	60c4      	str	r4, [r0, #12]
 800a5d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a5dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a5e0:	b94c      	cbnz	r4, 800a5f6 <__pow5mult+0x66>
 800a5e2:	f240 2171 	movw	r1, #625	; 0x271
 800a5e6:	4630      	mov	r0, r6
 800a5e8:	f7ff ff12 	bl	800a410 <__i2b>
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800a5f2:	4604      	mov	r4, r0
 800a5f4:	6003      	str	r3, [r0, #0]
 800a5f6:	f04f 0900 	mov.w	r9, #0
 800a5fa:	07eb      	lsls	r3, r5, #31
 800a5fc:	d50a      	bpl.n	800a614 <__pow5mult+0x84>
 800a5fe:	4639      	mov	r1, r7
 800a600:	4622      	mov	r2, r4
 800a602:	4630      	mov	r0, r6
 800a604:	f7ff ff1a 	bl	800a43c <__multiply>
 800a608:	4639      	mov	r1, r7
 800a60a:	4680      	mov	r8, r0
 800a60c:	4630      	mov	r0, r6
 800a60e:	f7ff fe47 	bl	800a2a0 <_Bfree>
 800a612:	4647      	mov	r7, r8
 800a614:	106d      	asrs	r5, r5, #1
 800a616:	d00b      	beq.n	800a630 <__pow5mult+0xa0>
 800a618:	6820      	ldr	r0, [r4, #0]
 800a61a:	b938      	cbnz	r0, 800a62c <__pow5mult+0x9c>
 800a61c:	4622      	mov	r2, r4
 800a61e:	4621      	mov	r1, r4
 800a620:	4630      	mov	r0, r6
 800a622:	f7ff ff0b 	bl	800a43c <__multiply>
 800a626:	6020      	str	r0, [r4, #0]
 800a628:	f8c0 9000 	str.w	r9, [r0]
 800a62c:	4604      	mov	r4, r0
 800a62e:	e7e4      	b.n	800a5fa <__pow5mult+0x6a>
 800a630:	4638      	mov	r0, r7
 800a632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a636:	bf00      	nop
 800a638:	0800e318 	.word	0x0800e318
 800a63c:	0800e0e9 	.word	0x0800e0e9
 800a640:	0800e1cc 	.word	0x0800e1cc

0800a644 <__lshift>:
 800a644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a648:	460c      	mov	r4, r1
 800a64a:	6849      	ldr	r1, [r1, #4]
 800a64c:	6923      	ldr	r3, [r4, #16]
 800a64e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a652:	68a3      	ldr	r3, [r4, #8]
 800a654:	4607      	mov	r7, r0
 800a656:	4691      	mov	r9, r2
 800a658:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a65c:	f108 0601 	add.w	r6, r8, #1
 800a660:	42b3      	cmp	r3, r6
 800a662:	db0b      	blt.n	800a67c <__lshift+0x38>
 800a664:	4638      	mov	r0, r7
 800a666:	f7ff fddb 	bl	800a220 <_Balloc>
 800a66a:	4605      	mov	r5, r0
 800a66c:	b948      	cbnz	r0, 800a682 <__lshift+0x3e>
 800a66e:	4602      	mov	r2, r0
 800a670:	4b2a      	ldr	r3, [pc, #168]	; (800a71c <__lshift+0xd8>)
 800a672:	482b      	ldr	r0, [pc, #172]	; (800a720 <__lshift+0xdc>)
 800a674:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a678:	f000 fccc 	bl	800b014 <__assert_func>
 800a67c:	3101      	adds	r1, #1
 800a67e:	005b      	lsls	r3, r3, #1
 800a680:	e7ee      	b.n	800a660 <__lshift+0x1c>
 800a682:	2300      	movs	r3, #0
 800a684:	f100 0114 	add.w	r1, r0, #20
 800a688:	f100 0210 	add.w	r2, r0, #16
 800a68c:	4618      	mov	r0, r3
 800a68e:	4553      	cmp	r3, sl
 800a690:	db37      	blt.n	800a702 <__lshift+0xbe>
 800a692:	6920      	ldr	r0, [r4, #16]
 800a694:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a698:	f104 0314 	add.w	r3, r4, #20
 800a69c:	f019 091f 	ands.w	r9, r9, #31
 800a6a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a6a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a6a8:	d02f      	beq.n	800a70a <__lshift+0xc6>
 800a6aa:	f1c9 0e20 	rsb	lr, r9, #32
 800a6ae:	468a      	mov	sl, r1
 800a6b0:	f04f 0c00 	mov.w	ip, #0
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	fa02 f209 	lsl.w	r2, r2, r9
 800a6ba:	ea42 020c 	orr.w	r2, r2, ip
 800a6be:	f84a 2b04 	str.w	r2, [sl], #4
 800a6c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6c6:	4298      	cmp	r0, r3
 800a6c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a6cc:	d8f2      	bhi.n	800a6b4 <__lshift+0x70>
 800a6ce:	1b03      	subs	r3, r0, r4
 800a6d0:	3b15      	subs	r3, #21
 800a6d2:	f023 0303 	bic.w	r3, r3, #3
 800a6d6:	3304      	adds	r3, #4
 800a6d8:	f104 0215 	add.w	r2, r4, #21
 800a6dc:	4290      	cmp	r0, r2
 800a6de:	bf38      	it	cc
 800a6e0:	2304      	movcc	r3, #4
 800a6e2:	f841 c003 	str.w	ip, [r1, r3]
 800a6e6:	f1bc 0f00 	cmp.w	ip, #0
 800a6ea:	d001      	beq.n	800a6f0 <__lshift+0xac>
 800a6ec:	f108 0602 	add.w	r6, r8, #2
 800a6f0:	3e01      	subs	r6, #1
 800a6f2:	4638      	mov	r0, r7
 800a6f4:	612e      	str	r6, [r5, #16]
 800a6f6:	4621      	mov	r1, r4
 800a6f8:	f7ff fdd2 	bl	800a2a0 <_Bfree>
 800a6fc:	4628      	mov	r0, r5
 800a6fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a702:	f842 0f04 	str.w	r0, [r2, #4]!
 800a706:	3301      	adds	r3, #1
 800a708:	e7c1      	b.n	800a68e <__lshift+0x4a>
 800a70a:	3904      	subs	r1, #4
 800a70c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a710:	f841 2f04 	str.w	r2, [r1, #4]!
 800a714:	4298      	cmp	r0, r3
 800a716:	d8f9      	bhi.n	800a70c <__lshift+0xc8>
 800a718:	e7ea      	b.n	800a6f0 <__lshift+0xac>
 800a71a:	bf00      	nop
 800a71c:	0800e15b 	.word	0x0800e15b
 800a720:	0800e1cc 	.word	0x0800e1cc

0800a724 <__mcmp>:
 800a724:	b530      	push	{r4, r5, lr}
 800a726:	6902      	ldr	r2, [r0, #16]
 800a728:	690c      	ldr	r4, [r1, #16]
 800a72a:	1b12      	subs	r2, r2, r4
 800a72c:	d10e      	bne.n	800a74c <__mcmp+0x28>
 800a72e:	f100 0314 	add.w	r3, r0, #20
 800a732:	3114      	adds	r1, #20
 800a734:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a738:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a73c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a740:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a744:	42a5      	cmp	r5, r4
 800a746:	d003      	beq.n	800a750 <__mcmp+0x2c>
 800a748:	d305      	bcc.n	800a756 <__mcmp+0x32>
 800a74a:	2201      	movs	r2, #1
 800a74c:	4610      	mov	r0, r2
 800a74e:	bd30      	pop	{r4, r5, pc}
 800a750:	4283      	cmp	r3, r0
 800a752:	d3f3      	bcc.n	800a73c <__mcmp+0x18>
 800a754:	e7fa      	b.n	800a74c <__mcmp+0x28>
 800a756:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a75a:	e7f7      	b.n	800a74c <__mcmp+0x28>

0800a75c <__mdiff>:
 800a75c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a760:	460c      	mov	r4, r1
 800a762:	4606      	mov	r6, r0
 800a764:	4611      	mov	r1, r2
 800a766:	4620      	mov	r0, r4
 800a768:	4690      	mov	r8, r2
 800a76a:	f7ff ffdb 	bl	800a724 <__mcmp>
 800a76e:	1e05      	subs	r5, r0, #0
 800a770:	d110      	bne.n	800a794 <__mdiff+0x38>
 800a772:	4629      	mov	r1, r5
 800a774:	4630      	mov	r0, r6
 800a776:	f7ff fd53 	bl	800a220 <_Balloc>
 800a77a:	b930      	cbnz	r0, 800a78a <__mdiff+0x2e>
 800a77c:	4b3a      	ldr	r3, [pc, #232]	; (800a868 <__mdiff+0x10c>)
 800a77e:	4602      	mov	r2, r0
 800a780:	f240 2132 	movw	r1, #562	; 0x232
 800a784:	4839      	ldr	r0, [pc, #228]	; (800a86c <__mdiff+0x110>)
 800a786:	f000 fc45 	bl	800b014 <__assert_func>
 800a78a:	2301      	movs	r3, #1
 800a78c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a790:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a794:	bfa4      	itt	ge
 800a796:	4643      	movge	r3, r8
 800a798:	46a0      	movge	r8, r4
 800a79a:	4630      	mov	r0, r6
 800a79c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a7a0:	bfa6      	itte	ge
 800a7a2:	461c      	movge	r4, r3
 800a7a4:	2500      	movge	r5, #0
 800a7a6:	2501      	movlt	r5, #1
 800a7a8:	f7ff fd3a 	bl	800a220 <_Balloc>
 800a7ac:	b920      	cbnz	r0, 800a7b8 <__mdiff+0x5c>
 800a7ae:	4b2e      	ldr	r3, [pc, #184]	; (800a868 <__mdiff+0x10c>)
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a7b6:	e7e5      	b.n	800a784 <__mdiff+0x28>
 800a7b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a7bc:	6926      	ldr	r6, [r4, #16]
 800a7be:	60c5      	str	r5, [r0, #12]
 800a7c0:	f104 0914 	add.w	r9, r4, #20
 800a7c4:	f108 0514 	add.w	r5, r8, #20
 800a7c8:	f100 0e14 	add.w	lr, r0, #20
 800a7cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a7d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a7d4:	f108 0210 	add.w	r2, r8, #16
 800a7d8:	46f2      	mov	sl, lr
 800a7da:	2100      	movs	r1, #0
 800a7dc:	f859 3b04 	ldr.w	r3, [r9], #4
 800a7e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a7e4:	fa1f f883 	uxth.w	r8, r3
 800a7e8:	fa11 f18b 	uxtah	r1, r1, fp
 800a7ec:	0c1b      	lsrs	r3, r3, #16
 800a7ee:	eba1 0808 	sub.w	r8, r1, r8
 800a7f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a7f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a7fa:	fa1f f888 	uxth.w	r8, r8
 800a7fe:	1419      	asrs	r1, r3, #16
 800a800:	454e      	cmp	r6, r9
 800a802:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a806:	f84a 3b04 	str.w	r3, [sl], #4
 800a80a:	d8e7      	bhi.n	800a7dc <__mdiff+0x80>
 800a80c:	1b33      	subs	r3, r6, r4
 800a80e:	3b15      	subs	r3, #21
 800a810:	f023 0303 	bic.w	r3, r3, #3
 800a814:	3304      	adds	r3, #4
 800a816:	3415      	adds	r4, #21
 800a818:	42a6      	cmp	r6, r4
 800a81a:	bf38      	it	cc
 800a81c:	2304      	movcc	r3, #4
 800a81e:	441d      	add	r5, r3
 800a820:	4473      	add	r3, lr
 800a822:	469e      	mov	lr, r3
 800a824:	462e      	mov	r6, r5
 800a826:	4566      	cmp	r6, ip
 800a828:	d30e      	bcc.n	800a848 <__mdiff+0xec>
 800a82a:	f10c 0203 	add.w	r2, ip, #3
 800a82e:	1b52      	subs	r2, r2, r5
 800a830:	f022 0203 	bic.w	r2, r2, #3
 800a834:	3d03      	subs	r5, #3
 800a836:	45ac      	cmp	ip, r5
 800a838:	bf38      	it	cc
 800a83a:	2200      	movcc	r2, #0
 800a83c:	441a      	add	r2, r3
 800a83e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a842:	b17b      	cbz	r3, 800a864 <__mdiff+0x108>
 800a844:	6107      	str	r7, [r0, #16]
 800a846:	e7a3      	b.n	800a790 <__mdiff+0x34>
 800a848:	f856 8b04 	ldr.w	r8, [r6], #4
 800a84c:	fa11 f288 	uxtah	r2, r1, r8
 800a850:	1414      	asrs	r4, r2, #16
 800a852:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a856:	b292      	uxth	r2, r2
 800a858:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a85c:	f84e 2b04 	str.w	r2, [lr], #4
 800a860:	1421      	asrs	r1, r4, #16
 800a862:	e7e0      	b.n	800a826 <__mdiff+0xca>
 800a864:	3f01      	subs	r7, #1
 800a866:	e7ea      	b.n	800a83e <__mdiff+0xe2>
 800a868:	0800e15b 	.word	0x0800e15b
 800a86c:	0800e1cc 	.word	0x0800e1cc

0800a870 <__d2b>:
 800a870:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a874:	4689      	mov	r9, r1
 800a876:	2101      	movs	r1, #1
 800a878:	ec57 6b10 	vmov	r6, r7, d0
 800a87c:	4690      	mov	r8, r2
 800a87e:	f7ff fccf 	bl	800a220 <_Balloc>
 800a882:	4604      	mov	r4, r0
 800a884:	b930      	cbnz	r0, 800a894 <__d2b+0x24>
 800a886:	4602      	mov	r2, r0
 800a888:	4b25      	ldr	r3, [pc, #148]	; (800a920 <__d2b+0xb0>)
 800a88a:	4826      	ldr	r0, [pc, #152]	; (800a924 <__d2b+0xb4>)
 800a88c:	f240 310a 	movw	r1, #778	; 0x30a
 800a890:	f000 fbc0 	bl	800b014 <__assert_func>
 800a894:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a898:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a89c:	bb35      	cbnz	r5, 800a8ec <__d2b+0x7c>
 800a89e:	2e00      	cmp	r6, #0
 800a8a0:	9301      	str	r3, [sp, #4]
 800a8a2:	d028      	beq.n	800a8f6 <__d2b+0x86>
 800a8a4:	4668      	mov	r0, sp
 800a8a6:	9600      	str	r6, [sp, #0]
 800a8a8:	f7ff fd82 	bl	800a3b0 <__lo0bits>
 800a8ac:	9900      	ldr	r1, [sp, #0]
 800a8ae:	b300      	cbz	r0, 800a8f2 <__d2b+0x82>
 800a8b0:	9a01      	ldr	r2, [sp, #4]
 800a8b2:	f1c0 0320 	rsb	r3, r0, #32
 800a8b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ba:	430b      	orrs	r3, r1
 800a8bc:	40c2      	lsrs	r2, r0
 800a8be:	6163      	str	r3, [r4, #20]
 800a8c0:	9201      	str	r2, [sp, #4]
 800a8c2:	9b01      	ldr	r3, [sp, #4]
 800a8c4:	61a3      	str	r3, [r4, #24]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	bf14      	ite	ne
 800a8ca:	2202      	movne	r2, #2
 800a8cc:	2201      	moveq	r2, #1
 800a8ce:	6122      	str	r2, [r4, #16]
 800a8d0:	b1d5      	cbz	r5, 800a908 <__d2b+0x98>
 800a8d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a8d6:	4405      	add	r5, r0
 800a8d8:	f8c9 5000 	str.w	r5, [r9]
 800a8dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a8e0:	f8c8 0000 	str.w	r0, [r8]
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	b003      	add	sp, #12
 800a8e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8f0:	e7d5      	b.n	800a89e <__d2b+0x2e>
 800a8f2:	6161      	str	r1, [r4, #20]
 800a8f4:	e7e5      	b.n	800a8c2 <__d2b+0x52>
 800a8f6:	a801      	add	r0, sp, #4
 800a8f8:	f7ff fd5a 	bl	800a3b0 <__lo0bits>
 800a8fc:	9b01      	ldr	r3, [sp, #4]
 800a8fe:	6163      	str	r3, [r4, #20]
 800a900:	2201      	movs	r2, #1
 800a902:	6122      	str	r2, [r4, #16]
 800a904:	3020      	adds	r0, #32
 800a906:	e7e3      	b.n	800a8d0 <__d2b+0x60>
 800a908:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a90c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a910:	f8c9 0000 	str.w	r0, [r9]
 800a914:	6918      	ldr	r0, [r3, #16]
 800a916:	f7ff fd2b 	bl	800a370 <__hi0bits>
 800a91a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a91e:	e7df      	b.n	800a8e0 <__d2b+0x70>
 800a920:	0800e15b 	.word	0x0800e15b
 800a924:	0800e1cc 	.word	0x0800e1cc

0800a928 <_calloc_r>:
 800a928:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a92a:	fba1 2402 	umull	r2, r4, r1, r2
 800a92e:	b94c      	cbnz	r4, 800a944 <_calloc_r+0x1c>
 800a930:	4611      	mov	r1, r2
 800a932:	9201      	str	r2, [sp, #4]
 800a934:	f000 f87a 	bl	800aa2c <_malloc_r>
 800a938:	9a01      	ldr	r2, [sp, #4]
 800a93a:	4605      	mov	r5, r0
 800a93c:	b930      	cbnz	r0, 800a94c <_calloc_r+0x24>
 800a93e:	4628      	mov	r0, r5
 800a940:	b003      	add	sp, #12
 800a942:	bd30      	pop	{r4, r5, pc}
 800a944:	220c      	movs	r2, #12
 800a946:	6002      	str	r2, [r0, #0]
 800a948:	2500      	movs	r5, #0
 800a94a:	e7f8      	b.n	800a93e <_calloc_r+0x16>
 800a94c:	4621      	mov	r1, r4
 800a94e:	f7fe f85b 	bl	8008a08 <memset>
 800a952:	e7f4      	b.n	800a93e <_calloc_r+0x16>

0800a954 <_free_r>:
 800a954:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a956:	2900      	cmp	r1, #0
 800a958:	d044      	beq.n	800a9e4 <_free_r+0x90>
 800a95a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a95e:	9001      	str	r0, [sp, #4]
 800a960:	2b00      	cmp	r3, #0
 800a962:	f1a1 0404 	sub.w	r4, r1, #4
 800a966:	bfb8      	it	lt
 800a968:	18e4      	addlt	r4, r4, r3
 800a96a:	f000 fcdf 	bl	800b32c <__malloc_lock>
 800a96e:	4a1e      	ldr	r2, [pc, #120]	; (800a9e8 <_free_r+0x94>)
 800a970:	9801      	ldr	r0, [sp, #4]
 800a972:	6813      	ldr	r3, [r2, #0]
 800a974:	b933      	cbnz	r3, 800a984 <_free_r+0x30>
 800a976:	6063      	str	r3, [r4, #4]
 800a978:	6014      	str	r4, [r2, #0]
 800a97a:	b003      	add	sp, #12
 800a97c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a980:	f000 bcda 	b.w	800b338 <__malloc_unlock>
 800a984:	42a3      	cmp	r3, r4
 800a986:	d908      	bls.n	800a99a <_free_r+0x46>
 800a988:	6825      	ldr	r5, [r4, #0]
 800a98a:	1961      	adds	r1, r4, r5
 800a98c:	428b      	cmp	r3, r1
 800a98e:	bf01      	itttt	eq
 800a990:	6819      	ldreq	r1, [r3, #0]
 800a992:	685b      	ldreq	r3, [r3, #4]
 800a994:	1949      	addeq	r1, r1, r5
 800a996:	6021      	streq	r1, [r4, #0]
 800a998:	e7ed      	b.n	800a976 <_free_r+0x22>
 800a99a:	461a      	mov	r2, r3
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	b10b      	cbz	r3, 800a9a4 <_free_r+0x50>
 800a9a0:	42a3      	cmp	r3, r4
 800a9a2:	d9fa      	bls.n	800a99a <_free_r+0x46>
 800a9a4:	6811      	ldr	r1, [r2, #0]
 800a9a6:	1855      	adds	r5, r2, r1
 800a9a8:	42a5      	cmp	r5, r4
 800a9aa:	d10b      	bne.n	800a9c4 <_free_r+0x70>
 800a9ac:	6824      	ldr	r4, [r4, #0]
 800a9ae:	4421      	add	r1, r4
 800a9b0:	1854      	adds	r4, r2, r1
 800a9b2:	42a3      	cmp	r3, r4
 800a9b4:	6011      	str	r1, [r2, #0]
 800a9b6:	d1e0      	bne.n	800a97a <_free_r+0x26>
 800a9b8:	681c      	ldr	r4, [r3, #0]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	6053      	str	r3, [r2, #4]
 800a9be:	4421      	add	r1, r4
 800a9c0:	6011      	str	r1, [r2, #0]
 800a9c2:	e7da      	b.n	800a97a <_free_r+0x26>
 800a9c4:	d902      	bls.n	800a9cc <_free_r+0x78>
 800a9c6:	230c      	movs	r3, #12
 800a9c8:	6003      	str	r3, [r0, #0]
 800a9ca:	e7d6      	b.n	800a97a <_free_r+0x26>
 800a9cc:	6825      	ldr	r5, [r4, #0]
 800a9ce:	1961      	adds	r1, r4, r5
 800a9d0:	428b      	cmp	r3, r1
 800a9d2:	bf04      	itt	eq
 800a9d4:	6819      	ldreq	r1, [r3, #0]
 800a9d6:	685b      	ldreq	r3, [r3, #4]
 800a9d8:	6063      	str	r3, [r4, #4]
 800a9da:	bf04      	itt	eq
 800a9dc:	1949      	addeq	r1, r1, r5
 800a9de:	6021      	streq	r1, [r4, #0]
 800a9e0:	6054      	str	r4, [r2, #4]
 800a9e2:	e7ca      	b.n	800a97a <_free_r+0x26>
 800a9e4:	b003      	add	sp, #12
 800a9e6:	bd30      	pop	{r4, r5, pc}
 800a9e8:	20000628 	.word	0x20000628

0800a9ec <sbrk_aligned>:
 800a9ec:	b570      	push	{r4, r5, r6, lr}
 800a9ee:	4e0e      	ldr	r6, [pc, #56]	; (800aa28 <sbrk_aligned+0x3c>)
 800a9f0:	460c      	mov	r4, r1
 800a9f2:	6831      	ldr	r1, [r6, #0]
 800a9f4:	4605      	mov	r5, r0
 800a9f6:	b911      	cbnz	r1, 800a9fe <sbrk_aligned+0x12>
 800a9f8:	f000 f9e6 	bl	800adc8 <_sbrk_r>
 800a9fc:	6030      	str	r0, [r6, #0]
 800a9fe:	4621      	mov	r1, r4
 800aa00:	4628      	mov	r0, r5
 800aa02:	f000 f9e1 	bl	800adc8 <_sbrk_r>
 800aa06:	1c43      	adds	r3, r0, #1
 800aa08:	d00a      	beq.n	800aa20 <sbrk_aligned+0x34>
 800aa0a:	1cc4      	adds	r4, r0, #3
 800aa0c:	f024 0403 	bic.w	r4, r4, #3
 800aa10:	42a0      	cmp	r0, r4
 800aa12:	d007      	beq.n	800aa24 <sbrk_aligned+0x38>
 800aa14:	1a21      	subs	r1, r4, r0
 800aa16:	4628      	mov	r0, r5
 800aa18:	f000 f9d6 	bl	800adc8 <_sbrk_r>
 800aa1c:	3001      	adds	r0, #1
 800aa1e:	d101      	bne.n	800aa24 <sbrk_aligned+0x38>
 800aa20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800aa24:	4620      	mov	r0, r4
 800aa26:	bd70      	pop	{r4, r5, r6, pc}
 800aa28:	2000062c 	.word	0x2000062c

0800aa2c <_malloc_r>:
 800aa2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa30:	1ccd      	adds	r5, r1, #3
 800aa32:	f025 0503 	bic.w	r5, r5, #3
 800aa36:	3508      	adds	r5, #8
 800aa38:	2d0c      	cmp	r5, #12
 800aa3a:	bf38      	it	cc
 800aa3c:	250c      	movcc	r5, #12
 800aa3e:	2d00      	cmp	r5, #0
 800aa40:	4607      	mov	r7, r0
 800aa42:	db01      	blt.n	800aa48 <_malloc_r+0x1c>
 800aa44:	42a9      	cmp	r1, r5
 800aa46:	d905      	bls.n	800aa54 <_malloc_r+0x28>
 800aa48:	230c      	movs	r3, #12
 800aa4a:	603b      	str	r3, [r7, #0]
 800aa4c:	2600      	movs	r6, #0
 800aa4e:	4630      	mov	r0, r6
 800aa50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa54:	4e2e      	ldr	r6, [pc, #184]	; (800ab10 <_malloc_r+0xe4>)
 800aa56:	f000 fc69 	bl	800b32c <__malloc_lock>
 800aa5a:	6833      	ldr	r3, [r6, #0]
 800aa5c:	461c      	mov	r4, r3
 800aa5e:	bb34      	cbnz	r4, 800aaae <_malloc_r+0x82>
 800aa60:	4629      	mov	r1, r5
 800aa62:	4638      	mov	r0, r7
 800aa64:	f7ff ffc2 	bl	800a9ec <sbrk_aligned>
 800aa68:	1c43      	adds	r3, r0, #1
 800aa6a:	4604      	mov	r4, r0
 800aa6c:	d14d      	bne.n	800ab0a <_malloc_r+0xde>
 800aa6e:	6834      	ldr	r4, [r6, #0]
 800aa70:	4626      	mov	r6, r4
 800aa72:	2e00      	cmp	r6, #0
 800aa74:	d140      	bne.n	800aaf8 <_malloc_r+0xcc>
 800aa76:	6823      	ldr	r3, [r4, #0]
 800aa78:	4631      	mov	r1, r6
 800aa7a:	4638      	mov	r0, r7
 800aa7c:	eb04 0803 	add.w	r8, r4, r3
 800aa80:	f000 f9a2 	bl	800adc8 <_sbrk_r>
 800aa84:	4580      	cmp	r8, r0
 800aa86:	d13a      	bne.n	800aafe <_malloc_r+0xd2>
 800aa88:	6821      	ldr	r1, [r4, #0]
 800aa8a:	3503      	adds	r5, #3
 800aa8c:	1a6d      	subs	r5, r5, r1
 800aa8e:	f025 0503 	bic.w	r5, r5, #3
 800aa92:	3508      	adds	r5, #8
 800aa94:	2d0c      	cmp	r5, #12
 800aa96:	bf38      	it	cc
 800aa98:	250c      	movcc	r5, #12
 800aa9a:	4629      	mov	r1, r5
 800aa9c:	4638      	mov	r0, r7
 800aa9e:	f7ff ffa5 	bl	800a9ec <sbrk_aligned>
 800aaa2:	3001      	adds	r0, #1
 800aaa4:	d02b      	beq.n	800aafe <_malloc_r+0xd2>
 800aaa6:	6823      	ldr	r3, [r4, #0]
 800aaa8:	442b      	add	r3, r5
 800aaaa:	6023      	str	r3, [r4, #0]
 800aaac:	e00e      	b.n	800aacc <_malloc_r+0xa0>
 800aaae:	6822      	ldr	r2, [r4, #0]
 800aab0:	1b52      	subs	r2, r2, r5
 800aab2:	d41e      	bmi.n	800aaf2 <_malloc_r+0xc6>
 800aab4:	2a0b      	cmp	r2, #11
 800aab6:	d916      	bls.n	800aae6 <_malloc_r+0xba>
 800aab8:	1961      	adds	r1, r4, r5
 800aaba:	42a3      	cmp	r3, r4
 800aabc:	6025      	str	r5, [r4, #0]
 800aabe:	bf18      	it	ne
 800aac0:	6059      	strne	r1, [r3, #4]
 800aac2:	6863      	ldr	r3, [r4, #4]
 800aac4:	bf08      	it	eq
 800aac6:	6031      	streq	r1, [r6, #0]
 800aac8:	5162      	str	r2, [r4, r5]
 800aaca:	604b      	str	r3, [r1, #4]
 800aacc:	4638      	mov	r0, r7
 800aace:	f104 060b 	add.w	r6, r4, #11
 800aad2:	f000 fc31 	bl	800b338 <__malloc_unlock>
 800aad6:	f026 0607 	bic.w	r6, r6, #7
 800aada:	1d23      	adds	r3, r4, #4
 800aadc:	1af2      	subs	r2, r6, r3
 800aade:	d0b6      	beq.n	800aa4e <_malloc_r+0x22>
 800aae0:	1b9b      	subs	r3, r3, r6
 800aae2:	50a3      	str	r3, [r4, r2]
 800aae4:	e7b3      	b.n	800aa4e <_malloc_r+0x22>
 800aae6:	6862      	ldr	r2, [r4, #4]
 800aae8:	42a3      	cmp	r3, r4
 800aaea:	bf0c      	ite	eq
 800aaec:	6032      	streq	r2, [r6, #0]
 800aaee:	605a      	strne	r2, [r3, #4]
 800aaf0:	e7ec      	b.n	800aacc <_malloc_r+0xa0>
 800aaf2:	4623      	mov	r3, r4
 800aaf4:	6864      	ldr	r4, [r4, #4]
 800aaf6:	e7b2      	b.n	800aa5e <_malloc_r+0x32>
 800aaf8:	4634      	mov	r4, r6
 800aafa:	6876      	ldr	r6, [r6, #4]
 800aafc:	e7b9      	b.n	800aa72 <_malloc_r+0x46>
 800aafe:	230c      	movs	r3, #12
 800ab00:	603b      	str	r3, [r7, #0]
 800ab02:	4638      	mov	r0, r7
 800ab04:	f000 fc18 	bl	800b338 <__malloc_unlock>
 800ab08:	e7a1      	b.n	800aa4e <_malloc_r+0x22>
 800ab0a:	6025      	str	r5, [r4, #0]
 800ab0c:	e7de      	b.n	800aacc <_malloc_r+0xa0>
 800ab0e:	bf00      	nop
 800ab10:	20000628 	.word	0x20000628

0800ab14 <__sfputc_r>:
 800ab14:	6893      	ldr	r3, [r2, #8]
 800ab16:	3b01      	subs	r3, #1
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	b410      	push	{r4}
 800ab1c:	6093      	str	r3, [r2, #8]
 800ab1e:	da08      	bge.n	800ab32 <__sfputc_r+0x1e>
 800ab20:	6994      	ldr	r4, [r2, #24]
 800ab22:	42a3      	cmp	r3, r4
 800ab24:	db01      	blt.n	800ab2a <__sfputc_r+0x16>
 800ab26:	290a      	cmp	r1, #10
 800ab28:	d103      	bne.n	800ab32 <__sfputc_r+0x1e>
 800ab2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab2e:	f000 b99f 	b.w	800ae70 <__swbuf_r>
 800ab32:	6813      	ldr	r3, [r2, #0]
 800ab34:	1c58      	adds	r0, r3, #1
 800ab36:	6010      	str	r0, [r2, #0]
 800ab38:	7019      	strb	r1, [r3, #0]
 800ab3a:	4608      	mov	r0, r1
 800ab3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab40:	4770      	bx	lr

0800ab42 <__sfputs_r>:
 800ab42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab44:	4606      	mov	r6, r0
 800ab46:	460f      	mov	r7, r1
 800ab48:	4614      	mov	r4, r2
 800ab4a:	18d5      	adds	r5, r2, r3
 800ab4c:	42ac      	cmp	r4, r5
 800ab4e:	d101      	bne.n	800ab54 <__sfputs_r+0x12>
 800ab50:	2000      	movs	r0, #0
 800ab52:	e007      	b.n	800ab64 <__sfputs_r+0x22>
 800ab54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab58:	463a      	mov	r2, r7
 800ab5a:	4630      	mov	r0, r6
 800ab5c:	f7ff ffda 	bl	800ab14 <__sfputc_r>
 800ab60:	1c43      	adds	r3, r0, #1
 800ab62:	d1f3      	bne.n	800ab4c <__sfputs_r+0xa>
 800ab64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ab68 <_vfiprintf_r>:
 800ab68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab6c:	460d      	mov	r5, r1
 800ab6e:	b09d      	sub	sp, #116	; 0x74
 800ab70:	4614      	mov	r4, r2
 800ab72:	4698      	mov	r8, r3
 800ab74:	4606      	mov	r6, r0
 800ab76:	b118      	cbz	r0, 800ab80 <_vfiprintf_r+0x18>
 800ab78:	6983      	ldr	r3, [r0, #24]
 800ab7a:	b90b      	cbnz	r3, 800ab80 <_vfiprintf_r+0x18>
 800ab7c:	f7ff faa2 	bl	800a0c4 <__sinit>
 800ab80:	4b89      	ldr	r3, [pc, #548]	; (800ada8 <_vfiprintf_r+0x240>)
 800ab82:	429d      	cmp	r5, r3
 800ab84:	d11b      	bne.n	800abbe <_vfiprintf_r+0x56>
 800ab86:	6875      	ldr	r5, [r6, #4]
 800ab88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab8a:	07d9      	lsls	r1, r3, #31
 800ab8c:	d405      	bmi.n	800ab9a <_vfiprintf_r+0x32>
 800ab8e:	89ab      	ldrh	r3, [r5, #12]
 800ab90:	059a      	lsls	r2, r3, #22
 800ab92:	d402      	bmi.n	800ab9a <_vfiprintf_r+0x32>
 800ab94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab96:	f7ff fb38 	bl	800a20a <__retarget_lock_acquire_recursive>
 800ab9a:	89ab      	ldrh	r3, [r5, #12]
 800ab9c:	071b      	lsls	r3, r3, #28
 800ab9e:	d501      	bpl.n	800aba4 <_vfiprintf_r+0x3c>
 800aba0:	692b      	ldr	r3, [r5, #16]
 800aba2:	b9eb      	cbnz	r3, 800abe0 <_vfiprintf_r+0x78>
 800aba4:	4629      	mov	r1, r5
 800aba6:	4630      	mov	r0, r6
 800aba8:	f000 f9c6 	bl	800af38 <__swsetup_r>
 800abac:	b1c0      	cbz	r0, 800abe0 <_vfiprintf_r+0x78>
 800abae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abb0:	07dc      	lsls	r4, r3, #31
 800abb2:	d50e      	bpl.n	800abd2 <_vfiprintf_r+0x6a>
 800abb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abb8:	b01d      	add	sp, #116	; 0x74
 800abba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abbe:	4b7b      	ldr	r3, [pc, #492]	; (800adac <_vfiprintf_r+0x244>)
 800abc0:	429d      	cmp	r5, r3
 800abc2:	d101      	bne.n	800abc8 <_vfiprintf_r+0x60>
 800abc4:	68b5      	ldr	r5, [r6, #8]
 800abc6:	e7df      	b.n	800ab88 <_vfiprintf_r+0x20>
 800abc8:	4b79      	ldr	r3, [pc, #484]	; (800adb0 <_vfiprintf_r+0x248>)
 800abca:	429d      	cmp	r5, r3
 800abcc:	bf08      	it	eq
 800abce:	68f5      	ldreq	r5, [r6, #12]
 800abd0:	e7da      	b.n	800ab88 <_vfiprintf_r+0x20>
 800abd2:	89ab      	ldrh	r3, [r5, #12]
 800abd4:	0598      	lsls	r0, r3, #22
 800abd6:	d4ed      	bmi.n	800abb4 <_vfiprintf_r+0x4c>
 800abd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abda:	f7ff fb17 	bl	800a20c <__retarget_lock_release_recursive>
 800abde:	e7e9      	b.n	800abb4 <_vfiprintf_r+0x4c>
 800abe0:	2300      	movs	r3, #0
 800abe2:	9309      	str	r3, [sp, #36]	; 0x24
 800abe4:	2320      	movs	r3, #32
 800abe6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800abea:	f8cd 800c 	str.w	r8, [sp, #12]
 800abee:	2330      	movs	r3, #48	; 0x30
 800abf0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800adb4 <_vfiprintf_r+0x24c>
 800abf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800abf8:	f04f 0901 	mov.w	r9, #1
 800abfc:	4623      	mov	r3, r4
 800abfe:	469a      	mov	sl, r3
 800ac00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac04:	b10a      	cbz	r2, 800ac0a <_vfiprintf_r+0xa2>
 800ac06:	2a25      	cmp	r2, #37	; 0x25
 800ac08:	d1f9      	bne.n	800abfe <_vfiprintf_r+0x96>
 800ac0a:	ebba 0b04 	subs.w	fp, sl, r4
 800ac0e:	d00b      	beq.n	800ac28 <_vfiprintf_r+0xc0>
 800ac10:	465b      	mov	r3, fp
 800ac12:	4622      	mov	r2, r4
 800ac14:	4629      	mov	r1, r5
 800ac16:	4630      	mov	r0, r6
 800ac18:	f7ff ff93 	bl	800ab42 <__sfputs_r>
 800ac1c:	3001      	adds	r0, #1
 800ac1e:	f000 80aa 	beq.w	800ad76 <_vfiprintf_r+0x20e>
 800ac22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac24:	445a      	add	r2, fp
 800ac26:	9209      	str	r2, [sp, #36]	; 0x24
 800ac28:	f89a 3000 	ldrb.w	r3, [sl]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	f000 80a2 	beq.w	800ad76 <_vfiprintf_r+0x20e>
 800ac32:	2300      	movs	r3, #0
 800ac34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac3c:	f10a 0a01 	add.w	sl, sl, #1
 800ac40:	9304      	str	r3, [sp, #16]
 800ac42:	9307      	str	r3, [sp, #28]
 800ac44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac48:	931a      	str	r3, [sp, #104]	; 0x68
 800ac4a:	4654      	mov	r4, sl
 800ac4c:	2205      	movs	r2, #5
 800ac4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac52:	4858      	ldr	r0, [pc, #352]	; (800adb4 <_vfiprintf_r+0x24c>)
 800ac54:	f7f5 fac4 	bl	80001e0 <memchr>
 800ac58:	9a04      	ldr	r2, [sp, #16]
 800ac5a:	b9d8      	cbnz	r0, 800ac94 <_vfiprintf_r+0x12c>
 800ac5c:	06d1      	lsls	r1, r2, #27
 800ac5e:	bf44      	itt	mi
 800ac60:	2320      	movmi	r3, #32
 800ac62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac66:	0713      	lsls	r3, r2, #28
 800ac68:	bf44      	itt	mi
 800ac6a:	232b      	movmi	r3, #43	; 0x2b
 800ac6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac70:	f89a 3000 	ldrb.w	r3, [sl]
 800ac74:	2b2a      	cmp	r3, #42	; 0x2a
 800ac76:	d015      	beq.n	800aca4 <_vfiprintf_r+0x13c>
 800ac78:	9a07      	ldr	r2, [sp, #28]
 800ac7a:	4654      	mov	r4, sl
 800ac7c:	2000      	movs	r0, #0
 800ac7e:	f04f 0c0a 	mov.w	ip, #10
 800ac82:	4621      	mov	r1, r4
 800ac84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac88:	3b30      	subs	r3, #48	; 0x30
 800ac8a:	2b09      	cmp	r3, #9
 800ac8c:	d94e      	bls.n	800ad2c <_vfiprintf_r+0x1c4>
 800ac8e:	b1b0      	cbz	r0, 800acbe <_vfiprintf_r+0x156>
 800ac90:	9207      	str	r2, [sp, #28]
 800ac92:	e014      	b.n	800acbe <_vfiprintf_r+0x156>
 800ac94:	eba0 0308 	sub.w	r3, r0, r8
 800ac98:	fa09 f303 	lsl.w	r3, r9, r3
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	9304      	str	r3, [sp, #16]
 800aca0:	46a2      	mov	sl, r4
 800aca2:	e7d2      	b.n	800ac4a <_vfiprintf_r+0xe2>
 800aca4:	9b03      	ldr	r3, [sp, #12]
 800aca6:	1d19      	adds	r1, r3, #4
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	9103      	str	r1, [sp, #12]
 800acac:	2b00      	cmp	r3, #0
 800acae:	bfbb      	ittet	lt
 800acb0:	425b      	neglt	r3, r3
 800acb2:	f042 0202 	orrlt.w	r2, r2, #2
 800acb6:	9307      	strge	r3, [sp, #28]
 800acb8:	9307      	strlt	r3, [sp, #28]
 800acba:	bfb8      	it	lt
 800acbc:	9204      	strlt	r2, [sp, #16]
 800acbe:	7823      	ldrb	r3, [r4, #0]
 800acc0:	2b2e      	cmp	r3, #46	; 0x2e
 800acc2:	d10c      	bne.n	800acde <_vfiprintf_r+0x176>
 800acc4:	7863      	ldrb	r3, [r4, #1]
 800acc6:	2b2a      	cmp	r3, #42	; 0x2a
 800acc8:	d135      	bne.n	800ad36 <_vfiprintf_r+0x1ce>
 800acca:	9b03      	ldr	r3, [sp, #12]
 800accc:	1d1a      	adds	r2, r3, #4
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	9203      	str	r2, [sp, #12]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	bfb8      	it	lt
 800acd6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800acda:	3402      	adds	r4, #2
 800acdc:	9305      	str	r3, [sp, #20]
 800acde:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800adc4 <_vfiprintf_r+0x25c>
 800ace2:	7821      	ldrb	r1, [r4, #0]
 800ace4:	2203      	movs	r2, #3
 800ace6:	4650      	mov	r0, sl
 800ace8:	f7f5 fa7a 	bl	80001e0 <memchr>
 800acec:	b140      	cbz	r0, 800ad00 <_vfiprintf_r+0x198>
 800acee:	2340      	movs	r3, #64	; 0x40
 800acf0:	eba0 000a 	sub.w	r0, r0, sl
 800acf4:	fa03 f000 	lsl.w	r0, r3, r0
 800acf8:	9b04      	ldr	r3, [sp, #16]
 800acfa:	4303      	orrs	r3, r0
 800acfc:	3401      	adds	r4, #1
 800acfe:	9304      	str	r3, [sp, #16]
 800ad00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad04:	482c      	ldr	r0, [pc, #176]	; (800adb8 <_vfiprintf_r+0x250>)
 800ad06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad0a:	2206      	movs	r2, #6
 800ad0c:	f7f5 fa68 	bl	80001e0 <memchr>
 800ad10:	2800      	cmp	r0, #0
 800ad12:	d03f      	beq.n	800ad94 <_vfiprintf_r+0x22c>
 800ad14:	4b29      	ldr	r3, [pc, #164]	; (800adbc <_vfiprintf_r+0x254>)
 800ad16:	bb1b      	cbnz	r3, 800ad60 <_vfiprintf_r+0x1f8>
 800ad18:	9b03      	ldr	r3, [sp, #12]
 800ad1a:	3307      	adds	r3, #7
 800ad1c:	f023 0307 	bic.w	r3, r3, #7
 800ad20:	3308      	adds	r3, #8
 800ad22:	9303      	str	r3, [sp, #12]
 800ad24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad26:	443b      	add	r3, r7
 800ad28:	9309      	str	r3, [sp, #36]	; 0x24
 800ad2a:	e767      	b.n	800abfc <_vfiprintf_r+0x94>
 800ad2c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad30:	460c      	mov	r4, r1
 800ad32:	2001      	movs	r0, #1
 800ad34:	e7a5      	b.n	800ac82 <_vfiprintf_r+0x11a>
 800ad36:	2300      	movs	r3, #0
 800ad38:	3401      	adds	r4, #1
 800ad3a:	9305      	str	r3, [sp, #20]
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	f04f 0c0a 	mov.w	ip, #10
 800ad42:	4620      	mov	r0, r4
 800ad44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad48:	3a30      	subs	r2, #48	; 0x30
 800ad4a:	2a09      	cmp	r2, #9
 800ad4c:	d903      	bls.n	800ad56 <_vfiprintf_r+0x1ee>
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d0c5      	beq.n	800acde <_vfiprintf_r+0x176>
 800ad52:	9105      	str	r1, [sp, #20]
 800ad54:	e7c3      	b.n	800acde <_vfiprintf_r+0x176>
 800ad56:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad5a:	4604      	mov	r4, r0
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	e7f0      	b.n	800ad42 <_vfiprintf_r+0x1da>
 800ad60:	ab03      	add	r3, sp, #12
 800ad62:	9300      	str	r3, [sp, #0]
 800ad64:	462a      	mov	r2, r5
 800ad66:	4b16      	ldr	r3, [pc, #88]	; (800adc0 <_vfiprintf_r+0x258>)
 800ad68:	a904      	add	r1, sp, #16
 800ad6a:	4630      	mov	r0, r6
 800ad6c:	f7fd fef4 	bl	8008b58 <_printf_float>
 800ad70:	4607      	mov	r7, r0
 800ad72:	1c78      	adds	r0, r7, #1
 800ad74:	d1d6      	bne.n	800ad24 <_vfiprintf_r+0x1bc>
 800ad76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad78:	07d9      	lsls	r1, r3, #31
 800ad7a:	d405      	bmi.n	800ad88 <_vfiprintf_r+0x220>
 800ad7c:	89ab      	ldrh	r3, [r5, #12]
 800ad7e:	059a      	lsls	r2, r3, #22
 800ad80:	d402      	bmi.n	800ad88 <_vfiprintf_r+0x220>
 800ad82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad84:	f7ff fa42 	bl	800a20c <__retarget_lock_release_recursive>
 800ad88:	89ab      	ldrh	r3, [r5, #12]
 800ad8a:	065b      	lsls	r3, r3, #25
 800ad8c:	f53f af12 	bmi.w	800abb4 <_vfiprintf_r+0x4c>
 800ad90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad92:	e711      	b.n	800abb8 <_vfiprintf_r+0x50>
 800ad94:	ab03      	add	r3, sp, #12
 800ad96:	9300      	str	r3, [sp, #0]
 800ad98:	462a      	mov	r2, r5
 800ad9a:	4b09      	ldr	r3, [pc, #36]	; (800adc0 <_vfiprintf_r+0x258>)
 800ad9c:	a904      	add	r1, sp, #16
 800ad9e:	4630      	mov	r0, r6
 800ada0:	f7fe f97e 	bl	80090a0 <_printf_i>
 800ada4:	e7e4      	b.n	800ad70 <_vfiprintf_r+0x208>
 800ada6:	bf00      	nop
 800ada8:	0800e18c 	.word	0x0800e18c
 800adac:	0800e1ac 	.word	0x0800e1ac
 800adb0:	0800e16c 	.word	0x0800e16c
 800adb4:	0800e324 	.word	0x0800e324
 800adb8:	0800e32e 	.word	0x0800e32e
 800adbc:	08008b59 	.word	0x08008b59
 800adc0:	0800ab43 	.word	0x0800ab43
 800adc4:	0800e32a 	.word	0x0800e32a

0800adc8 <_sbrk_r>:
 800adc8:	b538      	push	{r3, r4, r5, lr}
 800adca:	4d06      	ldr	r5, [pc, #24]	; (800ade4 <_sbrk_r+0x1c>)
 800adcc:	2300      	movs	r3, #0
 800adce:	4604      	mov	r4, r0
 800add0:	4608      	mov	r0, r1
 800add2:	602b      	str	r3, [r5, #0]
 800add4:	f7f8 fce0 	bl	8003798 <_sbrk>
 800add8:	1c43      	adds	r3, r0, #1
 800adda:	d102      	bne.n	800ade2 <_sbrk_r+0x1a>
 800addc:	682b      	ldr	r3, [r5, #0]
 800adde:	b103      	cbz	r3, 800ade2 <_sbrk_r+0x1a>
 800ade0:	6023      	str	r3, [r4, #0]
 800ade2:	bd38      	pop	{r3, r4, r5, pc}
 800ade4:	20000630 	.word	0x20000630

0800ade8 <__sread>:
 800ade8:	b510      	push	{r4, lr}
 800adea:	460c      	mov	r4, r1
 800adec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adf0:	f000 faa8 	bl	800b344 <_read_r>
 800adf4:	2800      	cmp	r0, #0
 800adf6:	bfab      	itete	ge
 800adf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800adfa:	89a3      	ldrhlt	r3, [r4, #12]
 800adfc:	181b      	addge	r3, r3, r0
 800adfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae02:	bfac      	ite	ge
 800ae04:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae06:	81a3      	strhlt	r3, [r4, #12]
 800ae08:	bd10      	pop	{r4, pc}

0800ae0a <__swrite>:
 800ae0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae0e:	461f      	mov	r7, r3
 800ae10:	898b      	ldrh	r3, [r1, #12]
 800ae12:	05db      	lsls	r3, r3, #23
 800ae14:	4605      	mov	r5, r0
 800ae16:	460c      	mov	r4, r1
 800ae18:	4616      	mov	r6, r2
 800ae1a:	d505      	bpl.n	800ae28 <__swrite+0x1e>
 800ae1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae20:	2302      	movs	r3, #2
 800ae22:	2200      	movs	r2, #0
 800ae24:	f000 f9f8 	bl	800b218 <_lseek_r>
 800ae28:	89a3      	ldrh	r3, [r4, #12]
 800ae2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae32:	81a3      	strh	r3, [r4, #12]
 800ae34:	4632      	mov	r2, r6
 800ae36:	463b      	mov	r3, r7
 800ae38:	4628      	mov	r0, r5
 800ae3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae3e:	f000 b869 	b.w	800af14 <_write_r>

0800ae42 <__sseek>:
 800ae42:	b510      	push	{r4, lr}
 800ae44:	460c      	mov	r4, r1
 800ae46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae4a:	f000 f9e5 	bl	800b218 <_lseek_r>
 800ae4e:	1c43      	adds	r3, r0, #1
 800ae50:	89a3      	ldrh	r3, [r4, #12]
 800ae52:	bf15      	itete	ne
 800ae54:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae5e:	81a3      	strheq	r3, [r4, #12]
 800ae60:	bf18      	it	ne
 800ae62:	81a3      	strhne	r3, [r4, #12]
 800ae64:	bd10      	pop	{r4, pc}

0800ae66 <__sclose>:
 800ae66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae6a:	f000 b8f1 	b.w	800b050 <_close_r>
	...

0800ae70 <__swbuf_r>:
 800ae70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae72:	460e      	mov	r6, r1
 800ae74:	4614      	mov	r4, r2
 800ae76:	4605      	mov	r5, r0
 800ae78:	b118      	cbz	r0, 800ae82 <__swbuf_r+0x12>
 800ae7a:	6983      	ldr	r3, [r0, #24]
 800ae7c:	b90b      	cbnz	r3, 800ae82 <__swbuf_r+0x12>
 800ae7e:	f7ff f921 	bl	800a0c4 <__sinit>
 800ae82:	4b21      	ldr	r3, [pc, #132]	; (800af08 <__swbuf_r+0x98>)
 800ae84:	429c      	cmp	r4, r3
 800ae86:	d12b      	bne.n	800aee0 <__swbuf_r+0x70>
 800ae88:	686c      	ldr	r4, [r5, #4]
 800ae8a:	69a3      	ldr	r3, [r4, #24]
 800ae8c:	60a3      	str	r3, [r4, #8]
 800ae8e:	89a3      	ldrh	r3, [r4, #12]
 800ae90:	071a      	lsls	r2, r3, #28
 800ae92:	d52f      	bpl.n	800aef4 <__swbuf_r+0x84>
 800ae94:	6923      	ldr	r3, [r4, #16]
 800ae96:	b36b      	cbz	r3, 800aef4 <__swbuf_r+0x84>
 800ae98:	6923      	ldr	r3, [r4, #16]
 800ae9a:	6820      	ldr	r0, [r4, #0]
 800ae9c:	1ac0      	subs	r0, r0, r3
 800ae9e:	6963      	ldr	r3, [r4, #20]
 800aea0:	b2f6      	uxtb	r6, r6
 800aea2:	4283      	cmp	r3, r0
 800aea4:	4637      	mov	r7, r6
 800aea6:	dc04      	bgt.n	800aeb2 <__swbuf_r+0x42>
 800aea8:	4621      	mov	r1, r4
 800aeaa:	4628      	mov	r0, r5
 800aeac:	f000 f966 	bl	800b17c <_fflush_r>
 800aeb0:	bb30      	cbnz	r0, 800af00 <__swbuf_r+0x90>
 800aeb2:	68a3      	ldr	r3, [r4, #8]
 800aeb4:	3b01      	subs	r3, #1
 800aeb6:	60a3      	str	r3, [r4, #8]
 800aeb8:	6823      	ldr	r3, [r4, #0]
 800aeba:	1c5a      	adds	r2, r3, #1
 800aebc:	6022      	str	r2, [r4, #0]
 800aebe:	701e      	strb	r6, [r3, #0]
 800aec0:	6963      	ldr	r3, [r4, #20]
 800aec2:	3001      	adds	r0, #1
 800aec4:	4283      	cmp	r3, r0
 800aec6:	d004      	beq.n	800aed2 <__swbuf_r+0x62>
 800aec8:	89a3      	ldrh	r3, [r4, #12]
 800aeca:	07db      	lsls	r3, r3, #31
 800aecc:	d506      	bpl.n	800aedc <__swbuf_r+0x6c>
 800aece:	2e0a      	cmp	r6, #10
 800aed0:	d104      	bne.n	800aedc <__swbuf_r+0x6c>
 800aed2:	4621      	mov	r1, r4
 800aed4:	4628      	mov	r0, r5
 800aed6:	f000 f951 	bl	800b17c <_fflush_r>
 800aeda:	b988      	cbnz	r0, 800af00 <__swbuf_r+0x90>
 800aedc:	4638      	mov	r0, r7
 800aede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aee0:	4b0a      	ldr	r3, [pc, #40]	; (800af0c <__swbuf_r+0x9c>)
 800aee2:	429c      	cmp	r4, r3
 800aee4:	d101      	bne.n	800aeea <__swbuf_r+0x7a>
 800aee6:	68ac      	ldr	r4, [r5, #8]
 800aee8:	e7cf      	b.n	800ae8a <__swbuf_r+0x1a>
 800aeea:	4b09      	ldr	r3, [pc, #36]	; (800af10 <__swbuf_r+0xa0>)
 800aeec:	429c      	cmp	r4, r3
 800aeee:	bf08      	it	eq
 800aef0:	68ec      	ldreq	r4, [r5, #12]
 800aef2:	e7ca      	b.n	800ae8a <__swbuf_r+0x1a>
 800aef4:	4621      	mov	r1, r4
 800aef6:	4628      	mov	r0, r5
 800aef8:	f000 f81e 	bl	800af38 <__swsetup_r>
 800aefc:	2800      	cmp	r0, #0
 800aefe:	d0cb      	beq.n	800ae98 <__swbuf_r+0x28>
 800af00:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800af04:	e7ea      	b.n	800aedc <__swbuf_r+0x6c>
 800af06:	bf00      	nop
 800af08:	0800e18c 	.word	0x0800e18c
 800af0c:	0800e1ac 	.word	0x0800e1ac
 800af10:	0800e16c 	.word	0x0800e16c

0800af14 <_write_r>:
 800af14:	b538      	push	{r3, r4, r5, lr}
 800af16:	4d07      	ldr	r5, [pc, #28]	; (800af34 <_write_r+0x20>)
 800af18:	4604      	mov	r4, r0
 800af1a:	4608      	mov	r0, r1
 800af1c:	4611      	mov	r1, r2
 800af1e:	2200      	movs	r2, #0
 800af20:	602a      	str	r2, [r5, #0]
 800af22:	461a      	mov	r2, r3
 800af24:	f7f6 faad 	bl	8001482 <_write>
 800af28:	1c43      	adds	r3, r0, #1
 800af2a:	d102      	bne.n	800af32 <_write_r+0x1e>
 800af2c:	682b      	ldr	r3, [r5, #0]
 800af2e:	b103      	cbz	r3, 800af32 <_write_r+0x1e>
 800af30:	6023      	str	r3, [r4, #0]
 800af32:	bd38      	pop	{r3, r4, r5, pc}
 800af34:	20000630 	.word	0x20000630

0800af38 <__swsetup_r>:
 800af38:	4b32      	ldr	r3, [pc, #200]	; (800b004 <__swsetup_r+0xcc>)
 800af3a:	b570      	push	{r4, r5, r6, lr}
 800af3c:	681d      	ldr	r5, [r3, #0]
 800af3e:	4606      	mov	r6, r0
 800af40:	460c      	mov	r4, r1
 800af42:	b125      	cbz	r5, 800af4e <__swsetup_r+0x16>
 800af44:	69ab      	ldr	r3, [r5, #24]
 800af46:	b913      	cbnz	r3, 800af4e <__swsetup_r+0x16>
 800af48:	4628      	mov	r0, r5
 800af4a:	f7ff f8bb 	bl	800a0c4 <__sinit>
 800af4e:	4b2e      	ldr	r3, [pc, #184]	; (800b008 <__swsetup_r+0xd0>)
 800af50:	429c      	cmp	r4, r3
 800af52:	d10f      	bne.n	800af74 <__swsetup_r+0x3c>
 800af54:	686c      	ldr	r4, [r5, #4]
 800af56:	89a3      	ldrh	r3, [r4, #12]
 800af58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af5c:	0719      	lsls	r1, r3, #28
 800af5e:	d42c      	bmi.n	800afba <__swsetup_r+0x82>
 800af60:	06dd      	lsls	r5, r3, #27
 800af62:	d411      	bmi.n	800af88 <__swsetup_r+0x50>
 800af64:	2309      	movs	r3, #9
 800af66:	6033      	str	r3, [r6, #0]
 800af68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af6c:	81a3      	strh	r3, [r4, #12]
 800af6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af72:	e03e      	b.n	800aff2 <__swsetup_r+0xba>
 800af74:	4b25      	ldr	r3, [pc, #148]	; (800b00c <__swsetup_r+0xd4>)
 800af76:	429c      	cmp	r4, r3
 800af78:	d101      	bne.n	800af7e <__swsetup_r+0x46>
 800af7a:	68ac      	ldr	r4, [r5, #8]
 800af7c:	e7eb      	b.n	800af56 <__swsetup_r+0x1e>
 800af7e:	4b24      	ldr	r3, [pc, #144]	; (800b010 <__swsetup_r+0xd8>)
 800af80:	429c      	cmp	r4, r3
 800af82:	bf08      	it	eq
 800af84:	68ec      	ldreq	r4, [r5, #12]
 800af86:	e7e6      	b.n	800af56 <__swsetup_r+0x1e>
 800af88:	0758      	lsls	r0, r3, #29
 800af8a:	d512      	bpl.n	800afb2 <__swsetup_r+0x7a>
 800af8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af8e:	b141      	cbz	r1, 800afa2 <__swsetup_r+0x6a>
 800af90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af94:	4299      	cmp	r1, r3
 800af96:	d002      	beq.n	800af9e <__swsetup_r+0x66>
 800af98:	4630      	mov	r0, r6
 800af9a:	f7ff fcdb 	bl	800a954 <_free_r>
 800af9e:	2300      	movs	r3, #0
 800afa0:	6363      	str	r3, [r4, #52]	; 0x34
 800afa2:	89a3      	ldrh	r3, [r4, #12]
 800afa4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800afa8:	81a3      	strh	r3, [r4, #12]
 800afaa:	2300      	movs	r3, #0
 800afac:	6063      	str	r3, [r4, #4]
 800afae:	6923      	ldr	r3, [r4, #16]
 800afb0:	6023      	str	r3, [r4, #0]
 800afb2:	89a3      	ldrh	r3, [r4, #12]
 800afb4:	f043 0308 	orr.w	r3, r3, #8
 800afb8:	81a3      	strh	r3, [r4, #12]
 800afba:	6923      	ldr	r3, [r4, #16]
 800afbc:	b94b      	cbnz	r3, 800afd2 <__swsetup_r+0x9a>
 800afbe:	89a3      	ldrh	r3, [r4, #12]
 800afc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800afc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afc8:	d003      	beq.n	800afd2 <__swsetup_r+0x9a>
 800afca:	4621      	mov	r1, r4
 800afcc:	4630      	mov	r0, r6
 800afce:	f000 f95b 	bl	800b288 <__smakebuf_r>
 800afd2:	89a0      	ldrh	r0, [r4, #12]
 800afd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800afd8:	f010 0301 	ands.w	r3, r0, #1
 800afdc:	d00a      	beq.n	800aff4 <__swsetup_r+0xbc>
 800afde:	2300      	movs	r3, #0
 800afe0:	60a3      	str	r3, [r4, #8]
 800afe2:	6963      	ldr	r3, [r4, #20]
 800afe4:	425b      	negs	r3, r3
 800afe6:	61a3      	str	r3, [r4, #24]
 800afe8:	6923      	ldr	r3, [r4, #16]
 800afea:	b943      	cbnz	r3, 800affe <__swsetup_r+0xc6>
 800afec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aff0:	d1ba      	bne.n	800af68 <__swsetup_r+0x30>
 800aff2:	bd70      	pop	{r4, r5, r6, pc}
 800aff4:	0781      	lsls	r1, r0, #30
 800aff6:	bf58      	it	pl
 800aff8:	6963      	ldrpl	r3, [r4, #20]
 800affa:	60a3      	str	r3, [r4, #8]
 800affc:	e7f4      	b.n	800afe8 <__swsetup_r+0xb0>
 800affe:	2000      	movs	r0, #0
 800b000:	e7f7      	b.n	800aff2 <__swsetup_r+0xba>
 800b002:	bf00      	nop
 800b004:	2000000c 	.word	0x2000000c
 800b008:	0800e18c 	.word	0x0800e18c
 800b00c:	0800e1ac 	.word	0x0800e1ac
 800b010:	0800e16c 	.word	0x0800e16c

0800b014 <__assert_func>:
 800b014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b016:	4614      	mov	r4, r2
 800b018:	461a      	mov	r2, r3
 800b01a:	4b09      	ldr	r3, [pc, #36]	; (800b040 <__assert_func+0x2c>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4605      	mov	r5, r0
 800b020:	68d8      	ldr	r0, [r3, #12]
 800b022:	b14c      	cbz	r4, 800b038 <__assert_func+0x24>
 800b024:	4b07      	ldr	r3, [pc, #28]	; (800b044 <__assert_func+0x30>)
 800b026:	9100      	str	r1, [sp, #0]
 800b028:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b02c:	4906      	ldr	r1, [pc, #24]	; (800b048 <__assert_func+0x34>)
 800b02e:	462b      	mov	r3, r5
 800b030:	f000 f8e0 	bl	800b1f4 <fiprintf>
 800b034:	f000 f9a5 	bl	800b382 <abort>
 800b038:	4b04      	ldr	r3, [pc, #16]	; (800b04c <__assert_func+0x38>)
 800b03a:	461c      	mov	r4, r3
 800b03c:	e7f3      	b.n	800b026 <__assert_func+0x12>
 800b03e:	bf00      	nop
 800b040:	2000000c 	.word	0x2000000c
 800b044:	0800e335 	.word	0x0800e335
 800b048:	0800e342 	.word	0x0800e342
 800b04c:	0800e370 	.word	0x0800e370

0800b050 <_close_r>:
 800b050:	b538      	push	{r3, r4, r5, lr}
 800b052:	4d06      	ldr	r5, [pc, #24]	; (800b06c <_close_r+0x1c>)
 800b054:	2300      	movs	r3, #0
 800b056:	4604      	mov	r4, r0
 800b058:	4608      	mov	r0, r1
 800b05a:	602b      	str	r3, [r5, #0]
 800b05c:	f7f8 fb67 	bl	800372e <_close>
 800b060:	1c43      	adds	r3, r0, #1
 800b062:	d102      	bne.n	800b06a <_close_r+0x1a>
 800b064:	682b      	ldr	r3, [r5, #0]
 800b066:	b103      	cbz	r3, 800b06a <_close_r+0x1a>
 800b068:	6023      	str	r3, [r4, #0]
 800b06a:	bd38      	pop	{r3, r4, r5, pc}
 800b06c:	20000630 	.word	0x20000630

0800b070 <__sflush_r>:
 800b070:	898a      	ldrh	r2, [r1, #12]
 800b072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b076:	4605      	mov	r5, r0
 800b078:	0710      	lsls	r0, r2, #28
 800b07a:	460c      	mov	r4, r1
 800b07c:	d458      	bmi.n	800b130 <__sflush_r+0xc0>
 800b07e:	684b      	ldr	r3, [r1, #4]
 800b080:	2b00      	cmp	r3, #0
 800b082:	dc05      	bgt.n	800b090 <__sflush_r+0x20>
 800b084:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b086:	2b00      	cmp	r3, #0
 800b088:	dc02      	bgt.n	800b090 <__sflush_r+0x20>
 800b08a:	2000      	movs	r0, #0
 800b08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b090:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b092:	2e00      	cmp	r6, #0
 800b094:	d0f9      	beq.n	800b08a <__sflush_r+0x1a>
 800b096:	2300      	movs	r3, #0
 800b098:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b09c:	682f      	ldr	r7, [r5, #0]
 800b09e:	602b      	str	r3, [r5, #0]
 800b0a0:	d032      	beq.n	800b108 <__sflush_r+0x98>
 800b0a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b0a4:	89a3      	ldrh	r3, [r4, #12]
 800b0a6:	075a      	lsls	r2, r3, #29
 800b0a8:	d505      	bpl.n	800b0b6 <__sflush_r+0x46>
 800b0aa:	6863      	ldr	r3, [r4, #4]
 800b0ac:	1ac0      	subs	r0, r0, r3
 800b0ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b0b0:	b10b      	cbz	r3, 800b0b6 <__sflush_r+0x46>
 800b0b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b0b4:	1ac0      	subs	r0, r0, r3
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	4602      	mov	r2, r0
 800b0ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0bc:	6a21      	ldr	r1, [r4, #32]
 800b0be:	4628      	mov	r0, r5
 800b0c0:	47b0      	blx	r6
 800b0c2:	1c43      	adds	r3, r0, #1
 800b0c4:	89a3      	ldrh	r3, [r4, #12]
 800b0c6:	d106      	bne.n	800b0d6 <__sflush_r+0x66>
 800b0c8:	6829      	ldr	r1, [r5, #0]
 800b0ca:	291d      	cmp	r1, #29
 800b0cc:	d82c      	bhi.n	800b128 <__sflush_r+0xb8>
 800b0ce:	4a2a      	ldr	r2, [pc, #168]	; (800b178 <__sflush_r+0x108>)
 800b0d0:	40ca      	lsrs	r2, r1
 800b0d2:	07d6      	lsls	r6, r2, #31
 800b0d4:	d528      	bpl.n	800b128 <__sflush_r+0xb8>
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	6062      	str	r2, [r4, #4]
 800b0da:	04d9      	lsls	r1, r3, #19
 800b0dc:	6922      	ldr	r2, [r4, #16]
 800b0de:	6022      	str	r2, [r4, #0]
 800b0e0:	d504      	bpl.n	800b0ec <__sflush_r+0x7c>
 800b0e2:	1c42      	adds	r2, r0, #1
 800b0e4:	d101      	bne.n	800b0ea <__sflush_r+0x7a>
 800b0e6:	682b      	ldr	r3, [r5, #0]
 800b0e8:	b903      	cbnz	r3, 800b0ec <__sflush_r+0x7c>
 800b0ea:	6560      	str	r0, [r4, #84]	; 0x54
 800b0ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0ee:	602f      	str	r7, [r5, #0]
 800b0f0:	2900      	cmp	r1, #0
 800b0f2:	d0ca      	beq.n	800b08a <__sflush_r+0x1a>
 800b0f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0f8:	4299      	cmp	r1, r3
 800b0fa:	d002      	beq.n	800b102 <__sflush_r+0x92>
 800b0fc:	4628      	mov	r0, r5
 800b0fe:	f7ff fc29 	bl	800a954 <_free_r>
 800b102:	2000      	movs	r0, #0
 800b104:	6360      	str	r0, [r4, #52]	; 0x34
 800b106:	e7c1      	b.n	800b08c <__sflush_r+0x1c>
 800b108:	6a21      	ldr	r1, [r4, #32]
 800b10a:	2301      	movs	r3, #1
 800b10c:	4628      	mov	r0, r5
 800b10e:	47b0      	blx	r6
 800b110:	1c41      	adds	r1, r0, #1
 800b112:	d1c7      	bne.n	800b0a4 <__sflush_r+0x34>
 800b114:	682b      	ldr	r3, [r5, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d0c4      	beq.n	800b0a4 <__sflush_r+0x34>
 800b11a:	2b1d      	cmp	r3, #29
 800b11c:	d001      	beq.n	800b122 <__sflush_r+0xb2>
 800b11e:	2b16      	cmp	r3, #22
 800b120:	d101      	bne.n	800b126 <__sflush_r+0xb6>
 800b122:	602f      	str	r7, [r5, #0]
 800b124:	e7b1      	b.n	800b08a <__sflush_r+0x1a>
 800b126:	89a3      	ldrh	r3, [r4, #12]
 800b128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b12c:	81a3      	strh	r3, [r4, #12]
 800b12e:	e7ad      	b.n	800b08c <__sflush_r+0x1c>
 800b130:	690f      	ldr	r7, [r1, #16]
 800b132:	2f00      	cmp	r7, #0
 800b134:	d0a9      	beq.n	800b08a <__sflush_r+0x1a>
 800b136:	0793      	lsls	r3, r2, #30
 800b138:	680e      	ldr	r6, [r1, #0]
 800b13a:	bf08      	it	eq
 800b13c:	694b      	ldreq	r3, [r1, #20]
 800b13e:	600f      	str	r7, [r1, #0]
 800b140:	bf18      	it	ne
 800b142:	2300      	movne	r3, #0
 800b144:	eba6 0807 	sub.w	r8, r6, r7
 800b148:	608b      	str	r3, [r1, #8]
 800b14a:	f1b8 0f00 	cmp.w	r8, #0
 800b14e:	dd9c      	ble.n	800b08a <__sflush_r+0x1a>
 800b150:	6a21      	ldr	r1, [r4, #32]
 800b152:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b154:	4643      	mov	r3, r8
 800b156:	463a      	mov	r2, r7
 800b158:	4628      	mov	r0, r5
 800b15a:	47b0      	blx	r6
 800b15c:	2800      	cmp	r0, #0
 800b15e:	dc06      	bgt.n	800b16e <__sflush_r+0xfe>
 800b160:	89a3      	ldrh	r3, [r4, #12]
 800b162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b166:	81a3      	strh	r3, [r4, #12]
 800b168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b16c:	e78e      	b.n	800b08c <__sflush_r+0x1c>
 800b16e:	4407      	add	r7, r0
 800b170:	eba8 0800 	sub.w	r8, r8, r0
 800b174:	e7e9      	b.n	800b14a <__sflush_r+0xda>
 800b176:	bf00      	nop
 800b178:	20400001 	.word	0x20400001

0800b17c <_fflush_r>:
 800b17c:	b538      	push	{r3, r4, r5, lr}
 800b17e:	690b      	ldr	r3, [r1, #16]
 800b180:	4605      	mov	r5, r0
 800b182:	460c      	mov	r4, r1
 800b184:	b913      	cbnz	r3, 800b18c <_fflush_r+0x10>
 800b186:	2500      	movs	r5, #0
 800b188:	4628      	mov	r0, r5
 800b18a:	bd38      	pop	{r3, r4, r5, pc}
 800b18c:	b118      	cbz	r0, 800b196 <_fflush_r+0x1a>
 800b18e:	6983      	ldr	r3, [r0, #24]
 800b190:	b90b      	cbnz	r3, 800b196 <_fflush_r+0x1a>
 800b192:	f7fe ff97 	bl	800a0c4 <__sinit>
 800b196:	4b14      	ldr	r3, [pc, #80]	; (800b1e8 <_fflush_r+0x6c>)
 800b198:	429c      	cmp	r4, r3
 800b19a:	d11b      	bne.n	800b1d4 <_fflush_r+0x58>
 800b19c:	686c      	ldr	r4, [r5, #4]
 800b19e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d0ef      	beq.n	800b186 <_fflush_r+0xa>
 800b1a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b1a8:	07d0      	lsls	r0, r2, #31
 800b1aa:	d404      	bmi.n	800b1b6 <_fflush_r+0x3a>
 800b1ac:	0599      	lsls	r1, r3, #22
 800b1ae:	d402      	bmi.n	800b1b6 <_fflush_r+0x3a>
 800b1b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1b2:	f7ff f82a 	bl	800a20a <__retarget_lock_acquire_recursive>
 800b1b6:	4628      	mov	r0, r5
 800b1b8:	4621      	mov	r1, r4
 800b1ba:	f7ff ff59 	bl	800b070 <__sflush_r>
 800b1be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1c0:	07da      	lsls	r2, r3, #31
 800b1c2:	4605      	mov	r5, r0
 800b1c4:	d4e0      	bmi.n	800b188 <_fflush_r+0xc>
 800b1c6:	89a3      	ldrh	r3, [r4, #12]
 800b1c8:	059b      	lsls	r3, r3, #22
 800b1ca:	d4dd      	bmi.n	800b188 <_fflush_r+0xc>
 800b1cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1ce:	f7ff f81d 	bl	800a20c <__retarget_lock_release_recursive>
 800b1d2:	e7d9      	b.n	800b188 <_fflush_r+0xc>
 800b1d4:	4b05      	ldr	r3, [pc, #20]	; (800b1ec <_fflush_r+0x70>)
 800b1d6:	429c      	cmp	r4, r3
 800b1d8:	d101      	bne.n	800b1de <_fflush_r+0x62>
 800b1da:	68ac      	ldr	r4, [r5, #8]
 800b1dc:	e7df      	b.n	800b19e <_fflush_r+0x22>
 800b1de:	4b04      	ldr	r3, [pc, #16]	; (800b1f0 <_fflush_r+0x74>)
 800b1e0:	429c      	cmp	r4, r3
 800b1e2:	bf08      	it	eq
 800b1e4:	68ec      	ldreq	r4, [r5, #12]
 800b1e6:	e7da      	b.n	800b19e <_fflush_r+0x22>
 800b1e8:	0800e18c 	.word	0x0800e18c
 800b1ec:	0800e1ac 	.word	0x0800e1ac
 800b1f0:	0800e16c 	.word	0x0800e16c

0800b1f4 <fiprintf>:
 800b1f4:	b40e      	push	{r1, r2, r3}
 800b1f6:	b503      	push	{r0, r1, lr}
 800b1f8:	4601      	mov	r1, r0
 800b1fa:	ab03      	add	r3, sp, #12
 800b1fc:	4805      	ldr	r0, [pc, #20]	; (800b214 <fiprintf+0x20>)
 800b1fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800b202:	6800      	ldr	r0, [r0, #0]
 800b204:	9301      	str	r3, [sp, #4]
 800b206:	f7ff fcaf 	bl	800ab68 <_vfiprintf_r>
 800b20a:	b002      	add	sp, #8
 800b20c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b210:	b003      	add	sp, #12
 800b212:	4770      	bx	lr
 800b214:	2000000c 	.word	0x2000000c

0800b218 <_lseek_r>:
 800b218:	b538      	push	{r3, r4, r5, lr}
 800b21a:	4d07      	ldr	r5, [pc, #28]	; (800b238 <_lseek_r+0x20>)
 800b21c:	4604      	mov	r4, r0
 800b21e:	4608      	mov	r0, r1
 800b220:	4611      	mov	r1, r2
 800b222:	2200      	movs	r2, #0
 800b224:	602a      	str	r2, [r5, #0]
 800b226:	461a      	mov	r2, r3
 800b228:	f7f8 faa8 	bl	800377c <_lseek>
 800b22c:	1c43      	adds	r3, r0, #1
 800b22e:	d102      	bne.n	800b236 <_lseek_r+0x1e>
 800b230:	682b      	ldr	r3, [r5, #0]
 800b232:	b103      	cbz	r3, 800b236 <_lseek_r+0x1e>
 800b234:	6023      	str	r3, [r4, #0]
 800b236:	bd38      	pop	{r3, r4, r5, pc}
 800b238:	20000630 	.word	0x20000630

0800b23c <__swhatbuf_r>:
 800b23c:	b570      	push	{r4, r5, r6, lr}
 800b23e:	460e      	mov	r6, r1
 800b240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b244:	2900      	cmp	r1, #0
 800b246:	b096      	sub	sp, #88	; 0x58
 800b248:	4614      	mov	r4, r2
 800b24a:	461d      	mov	r5, r3
 800b24c:	da08      	bge.n	800b260 <__swhatbuf_r+0x24>
 800b24e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b252:	2200      	movs	r2, #0
 800b254:	602a      	str	r2, [r5, #0]
 800b256:	061a      	lsls	r2, r3, #24
 800b258:	d410      	bmi.n	800b27c <__swhatbuf_r+0x40>
 800b25a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b25e:	e00e      	b.n	800b27e <__swhatbuf_r+0x42>
 800b260:	466a      	mov	r2, sp
 800b262:	f000 f895 	bl	800b390 <_fstat_r>
 800b266:	2800      	cmp	r0, #0
 800b268:	dbf1      	blt.n	800b24e <__swhatbuf_r+0x12>
 800b26a:	9a01      	ldr	r2, [sp, #4]
 800b26c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b270:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b274:	425a      	negs	r2, r3
 800b276:	415a      	adcs	r2, r3
 800b278:	602a      	str	r2, [r5, #0]
 800b27a:	e7ee      	b.n	800b25a <__swhatbuf_r+0x1e>
 800b27c:	2340      	movs	r3, #64	; 0x40
 800b27e:	2000      	movs	r0, #0
 800b280:	6023      	str	r3, [r4, #0]
 800b282:	b016      	add	sp, #88	; 0x58
 800b284:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b288 <__smakebuf_r>:
 800b288:	898b      	ldrh	r3, [r1, #12]
 800b28a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b28c:	079d      	lsls	r5, r3, #30
 800b28e:	4606      	mov	r6, r0
 800b290:	460c      	mov	r4, r1
 800b292:	d507      	bpl.n	800b2a4 <__smakebuf_r+0x1c>
 800b294:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b298:	6023      	str	r3, [r4, #0]
 800b29a:	6123      	str	r3, [r4, #16]
 800b29c:	2301      	movs	r3, #1
 800b29e:	6163      	str	r3, [r4, #20]
 800b2a0:	b002      	add	sp, #8
 800b2a2:	bd70      	pop	{r4, r5, r6, pc}
 800b2a4:	ab01      	add	r3, sp, #4
 800b2a6:	466a      	mov	r2, sp
 800b2a8:	f7ff ffc8 	bl	800b23c <__swhatbuf_r>
 800b2ac:	9900      	ldr	r1, [sp, #0]
 800b2ae:	4605      	mov	r5, r0
 800b2b0:	4630      	mov	r0, r6
 800b2b2:	f7ff fbbb 	bl	800aa2c <_malloc_r>
 800b2b6:	b948      	cbnz	r0, 800b2cc <__smakebuf_r+0x44>
 800b2b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2bc:	059a      	lsls	r2, r3, #22
 800b2be:	d4ef      	bmi.n	800b2a0 <__smakebuf_r+0x18>
 800b2c0:	f023 0303 	bic.w	r3, r3, #3
 800b2c4:	f043 0302 	orr.w	r3, r3, #2
 800b2c8:	81a3      	strh	r3, [r4, #12]
 800b2ca:	e7e3      	b.n	800b294 <__smakebuf_r+0xc>
 800b2cc:	4b0d      	ldr	r3, [pc, #52]	; (800b304 <__smakebuf_r+0x7c>)
 800b2ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800b2d0:	89a3      	ldrh	r3, [r4, #12]
 800b2d2:	6020      	str	r0, [r4, #0]
 800b2d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2d8:	81a3      	strh	r3, [r4, #12]
 800b2da:	9b00      	ldr	r3, [sp, #0]
 800b2dc:	6163      	str	r3, [r4, #20]
 800b2de:	9b01      	ldr	r3, [sp, #4]
 800b2e0:	6120      	str	r0, [r4, #16]
 800b2e2:	b15b      	cbz	r3, 800b2fc <__smakebuf_r+0x74>
 800b2e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	f000 f863 	bl	800b3b4 <_isatty_r>
 800b2ee:	b128      	cbz	r0, 800b2fc <__smakebuf_r+0x74>
 800b2f0:	89a3      	ldrh	r3, [r4, #12]
 800b2f2:	f023 0303 	bic.w	r3, r3, #3
 800b2f6:	f043 0301 	orr.w	r3, r3, #1
 800b2fa:	81a3      	strh	r3, [r4, #12]
 800b2fc:	89a0      	ldrh	r0, [r4, #12]
 800b2fe:	4305      	orrs	r5, r0
 800b300:	81a5      	strh	r5, [r4, #12]
 800b302:	e7cd      	b.n	800b2a0 <__smakebuf_r+0x18>
 800b304:	0800a05d 	.word	0x0800a05d

0800b308 <__ascii_mbtowc>:
 800b308:	b082      	sub	sp, #8
 800b30a:	b901      	cbnz	r1, 800b30e <__ascii_mbtowc+0x6>
 800b30c:	a901      	add	r1, sp, #4
 800b30e:	b142      	cbz	r2, 800b322 <__ascii_mbtowc+0x1a>
 800b310:	b14b      	cbz	r3, 800b326 <__ascii_mbtowc+0x1e>
 800b312:	7813      	ldrb	r3, [r2, #0]
 800b314:	600b      	str	r3, [r1, #0]
 800b316:	7812      	ldrb	r2, [r2, #0]
 800b318:	1e10      	subs	r0, r2, #0
 800b31a:	bf18      	it	ne
 800b31c:	2001      	movne	r0, #1
 800b31e:	b002      	add	sp, #8
 800b320:	4770      	bx	lr
 800b322:	4610      	mov	r0, r2
 800b324:	e7fb      	b.n	800b31e <__ascii_mbtowc+0x16>
 800b326:	f06f 0001 	mvn.w	r0, #1
 800b32a:	e7f8      	b.n	800b31e <__ascii_mbtowc+0x16>

0800b32c <__malloc_lock>:
 800b32c:	4801      	ldr	r0, [pc, #4]	; (800b334 <__malloc_lock+0x8>)
 800b32e:	f7fe bf6c 	b.w	800a20a <__retarget_lock_acquire_recursive>
 800b332:	bf00      	nop
 800b334:	20000624 	.word	0x20000624

0800b338 <__malloc_unlock>:
 800b338:	4801      	ldr	r0, [pc, #4]	; (800b340 <__malloc_unlock+0x8>)
 800b33a:	f7fe bf67 	b.w	800a20c <__retarget_lock_release_recursive>
 800b33e:	bf00      	nop
 800b340:	20000624 	.word	0x20000624

0800b344 <_read_r>:
 800b344:	b538      	push	{r3, r4, r5, lr}
 800b346:	4d07      	ldr	r5, [pc, #28]	; (800b364 <_read_r+0x20>)
 800b348:	4604      	mov	r4, r0
 800b34a:	4608      	mov	r0, r1
 800b34c:	4611      	mov	r1, r2
 800b34e:	2200      	movs	r2, #0
 800b350:	602a      	str	r2, [r5, #0]
 800b352:	461a      	mov	r2, r3
 800b354:	f7f8 f9ce 	bl	80036f4 <_read>
 800b358:	1c43      	adds	r3, r0, #1
 800b35a:	d102      	bne.n	800b362 <_read_r+0x1e>
 800b35c:	682b      	ldr	r3, [r5, #0]
 800b35e:	b103      	cbz	r3, 800b362 <_read_r+0x1e>
 800b360:	6023      	str	r3, [r4, #0]
 800b362:	bd38      	pop	{r3, r4, r5, pc}
 800b364:	20000630 	.word	0x20000630

0800b368 <__ascii_wctomb>:
 800b368:	b149      	cbz	r1, 800b37e <__ascii_wctomb+0x16>
 800b36a:	2aff      	cmp	r2, #255	; 0xff
 800b36c:	bf85      	ittet	hi
 800b36e:	238a      	movhi	r3, #138	; 0x8a
 800b370:	6003      	strhi	r3, [r0, #0]
 800b372:	700a      	strbls	r2, [r1, #0]
 800b374:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b378:	bf98      	it	ls
 800b37a:	2001      	movls	r0, #1
 800b37c:	4770      	bx	lr
 800b37e:	4608      	mov	r0, r1
 800b380:	4770      	bx	lr

0800b382 <abort>:
 800b382:	b508      	push	{r3, lr}
 800b384:	2006      	movs	r0, #6
 800b386:	f000 f84d 	bl	800b424 <raise>
 800b38a:	2001      	movs	r0, #1
 800b38c:	f7f8 f9a8 	bl	80036e0 <_exit>

0800b390 <_fstat_r>:
 800b390:	b538      	push	{r3, r4, r5, lr}
 800b392:	4d07      	ldr	r5, [pc, #28]	; (800b3b0 <_fstat_r+0x20>)
 800b394:	2300      	movs	r3, #0
 800b396:	4604      	mov	r4, r0
 800b398:	4608      	mov	r0, r1
 800b39a:	4611      	mov	r1, r2
 800b39c:	602b      	str	r3, [r5, #0]
 800b39e:	f7f8 f9d2 	bl	8003746 <_fstat>
 800b3a2:	1c43      	adds	r3, r0, #1
 800b3a4:	d102      	bne.n	800b3ac <_fstat_r+0x1c>
 800b3a6:	682b      	ldr	r3, [r5, #0]
 800b3a8:	b103      	cbz	r3, 800b3ac <_fstat_r+0x1c>
 800b3aa:	6023      	str	r3, [r4, #0]
 800b3ac:	bd38      	pop	{r3, r4, r5, pc}
 800b3ae:	bf00      	nop
 800b3b0:	20000630 	.word	0x20000630

0800b3b4 <_isatty_r>:
 800b3b4:	b538      	push	{r3, r4, r5, lr}
 800b3b6:	4d06      	ldr	r5, [pc, #24]	; (800b3d0 <_isatty_r+0x1c>)
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	4604      	mov	r4, r0
 800b3bc:	4608      	mov	r0, r1
 800b3be:	602b      	str	r3, [r5, #0]
 800b3c0:	f7f8 f9d1 	bl	8003766 <_isatty>
 800b3c4:	1c43      	adds	r3, r0, #1
 800b3c6:	d102      	bne.n	800b3ce <_isatty_r+0x1a>
 800b3c8:	682b      	ldr	r3, [r5, #0]
 800b3ca:	b103      	cbz	r3, 800b3ce <_isatty_r+0x1a>
 800b3cc:	6023      	str	r3, [r4, #0]
 800b3ce:	bd38      	pop	{r3, r4, r5, pc}
 800b3d0:	20000630 	.word	0x20000630

0800b3d4 <_raise_r>:
 800b3d4:	291f      	cmp	r1, #31
 800b3d6:	b538      	push	{r3, r4, r5, lr}
 800b3d8:	4604      	mov	r4, r0
 800b3da:	460d      	mov	r5, r1
 800b3dc:	d904      	bls.n	800b3e8 <_raise_r+0x14>
 800b3de:	2316      	movs	r3, #22
 800b3e0:	6003      	str	r3, [r0, #0]
 800b3e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3e6:	bd38      	pop	{r3, r4, r5, pc}
 800b3e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b3ea:	b112      	cbz	r2, 800b3f2 <_raise_r+0x1e>
 800b3ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b3f0:	b94b      	cbnz	r3, 800b406 <_raise_r+0x32>
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	f000 f830 	bl	800b458 <_getpid_r>
 800b3f8:	462a      	mov	r2, r5
 800b3fa:	4601      	mov	r1, r0
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b402:	f000 b817 	b.w	800b434 <_kill_r>
 800b406:	2b01      	cmp	r3, #1
 800b408:	d00a      	beq.n	800b420 <_raise_r+0x4c>
 800b40a:	1c59      	adds	r1, r3, #1
 800b40c:	d103      	bne.n	800b416 <_raise_r+0x42>
 800b40e:	2316      	movs	r3, #22
 800b410:	6003      	str	r3, [r0, #0]
 800b412:	2001      	movs	r0, #1
 800b414:	e7e7      	b.n	800b3e6 <_raise_r+0x12>
 800b416:	2400      	movs	r4, #0
 800b418:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b41c:	4628      	mov	r0, r5
 800b41e:	4798      	blx	r3
 800b420:	2000      	movs	r0, #0
 800b422:	e7e0      	b.n	800b3e6 <_raise_r+0x12>

0800b424 <raise>:
 800b424:	4b02      	ldr	r3, [pc, #8]	; (800b430 <raise+0xc>)
 800b426:	4601      	mov	r1, r0
 800b428:	6818      	ldr	r0, [r3, #0]
 800b42a:	f7ff bfd3 	b.w	800b3d4 <_raise_r>
 800b42e:	bf00      	nop
 800b430:	2000000c 	.word	0x2000000c

0800b434 <_kill_r>:
 800b434:	b538      	push	{r3, r4, r5, lr}
 800b436:	4d07      	ldr	r5, [pc, #28]	; (800b454 <_kill_r+0x20>)
 800b438:	2300      	movs	r3, #0
 800b43a:	4604      	mov	r4, r0
 800b43c:	4608      	mov	r0, r1
 800b43e:	4611      	mov	r1, r2
 800b440:	602b      	str	r3, [r5, #0]
 800b442:	f7f8 f93d 	bl	80036c0 <_kill>
 800b446:	1c43      	adds	r3, r0, #1
 800b448:	d102      	bne.n	800b450 <_kill_r+0x1c>
 800b44a:	682b      	ldr	r3, [r5, #0]
 800b44c:	b103      	cbz	r3, 800b450 <_kill_r+0x1c>
 800b44e:	6023      	str	r3, [r4, #0]
 800b450:	bd38      	pop	{r3, r4, r5, pc}
 800b452:	bf00      	nop
 800b454:	20000630 	.word	0x20000630

0800b458 <_getpid_r>:
 800b458:	f7f8 b92a 	b.w	80036b0 <_getpid>
 800b45c:	0000      	movs	r0, r0
	...

0800b460 <atan>:
 800b460:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b464:	ec55 4b10 	vmov	r4, r5, d0
 800b468:	4bc3      	ldr	r3, [pc, #780]	; (800b778 <atan+0x318>)
 800b46a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b46e:	429e      	cmp	r6, r3
 800b470:	46ab      	mov	fp, r5
 800b472:	dd18      	ble.n	800b4a6 <atan+0x46>
 800b474:	4bc1      	ldr	r3, [pc, #772]	; (800b77c <atan+0x31c>)
 800b476:	429e      	cmp	r6, r3
 800b478:	dc01      	bgt.n	800b47e <atan+0x1e>
 800b47a:	d109      	bne.n	800b490 <atan+0x30>
 800b47c:	b144      	cbz	r4, 800b490 <atan+0x30>
 800b47e:	4622      	mov	r2, r4
 800b480:	462b      	mov	r3, r5
 800b482:	4620      	mov	r0, r4
 800b484:	4629      	mov	r1, r5
 800b486:	f7f4 ff01 	bl	800028c <__adddf3>
 800b48a:	4604      	mov	r4, r0
 800b48c:	460d      	mov	r5, r1
 800b48e:	e006      	b.n	800b49e <atan+0x3e>
 800b490:	f1bb 0f00 	cmp.w	fp, #0
 800b494:	f300 8131 	bgt.w	800b6fa <atan+0x29a>
 800b498:	a59b      	add	r5, pc, #620	; (adr r5, 800b708 <atan+0x2a8>)
 800b49a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b49e:	ec45 4b10 	vmov	d0, r4, r5
 800b4a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4a6:	4bb6      	ldr	r3, [pc, #728]	; (800b780 <atan+0x320>)
 800b4a8:	429e      	cmp	r6, r3
 800b4aa:	dc14      	bgt.n	800b4d6 <atan+0x76>
 800b4ac:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b4b0:	429e      	cmp	r6, r3
 800b4b2:	dc0d      	bgt.n	800b4d0 <atan+0x70>
 800b4b4:	a396      	add	r3, pc, #600	; (adr r3, 800b710 <atan+0x2b0>)
 800b4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ba:	ee10 0a10 	vmov	r0, s0
 800b4be:	4629      	mov	r1, r5
 800b4c0:	f7f4 fee4 	bl	800028c <__adddf3>
 800b4c4:	4baf      	ldr	r3, [pc, #700]	; (800b784 <atan+0x324>)
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	f7f5 fb26 	bl	8000b18 <__aeabi_dcmpgt>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	d1e6      	bne.n	800b49e <atan+0x3e>
 800b4d0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b4d4:	e02b      	b.n	800b52e <atan+0xce>
 800b4d6:	f000 f9b7 	bl	800b848 <fabs>
 800b4da:	4bab      	ldr	r3, [pc, #684]	; (800b788 <atan+0x328>)
 800b4dc:	429e      	cmp	r6, r3
 800b4de:	ec55 4b10 	vmov	r4, r5, d0
 800b4e2:	f300 80bf 	bgt.w	800b664 <atan+0x204>
 800b4e6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b4ea:	429e      	cmp	r6, r3
 800b4ec:	f300 80a0 	bgt.w	800b630 <atan+0x1d0>
 800b4f0:	ee10 2a10 	vmov	r2, s0
 800b4f4:	ee10 0a10 	vmov	r0, s0
 800b4f8:	462b      	mov	r3, r5
 800b4fa:	4629      	mov	r1, r5
 800b4fc:	f7f4 fec6 	bl	800028c <__adddf3>
 800b500:	4ba0      	ldr	r3, [pc, #640]	; (800b784 <atan+0x324>)
 800b502:	2200      	movs	r2, #0
 800b504:	f7f4 fec0 	bl	8000288 <__aeabi_dsub>
 800b508:	2200      	movs	r2, #0
 800b50a:	4606      	mov	r6, r0
 800b50c:	460f      	mov	r7, r1
 800b50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b512:	4620      	mov	r0, r4
 800b514:	4629      	mov	r1, r5
 800b516:	f7f4 feb9 	bl	800028c <__adddf3>
 800b51a:	4602      	mov	r2, r0
 800b51c:	460b      	mov	r3, r1
 800b51e:	4630      	mov	r0, r6
 800b520:	4639      	mov	r1, r7
 800b522:	f7f5 f993 	bl	800084c <__aeabi_ddiv>
 800b526:	f04f 0a00 	mov.w	sl, #0
 800b52a:	4604      	mov	r4, r0
 800b52c:	460d      	mov	r5, r1
 800b52e:	4622      	mov	r2, r4
 800b530:	462b      	mov	r3, r5
 800b532:	4620      	mov	r0, r4
 800b534:	4629      	mov	r1, r5
 800b536:	f7f5 f85f 	bl	80005f8 <__aeabi_dmul>
 800b53a:	4602      	mov	r2, r0
 800b53c:	460b      	mov	r3, r1
 800b53e:	4680      	mov	r8, r0
 800b540:	4689      	mov	r9, r1
 800b542:	f7f5 f859 	bl	80005f8 <__aeabi_dmul>
 800b546:	a374      	add	r3, pc, #464	; (adr r3, 800b718 <atan+0x2b8>)
 800b548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54c:	4606      	mov	r6, r0
 800b54e:	460f      	mov	r7, r1
 800b550:	f7f5 f852 	bl	80005f8 <__aeabi_dmul>
 800b554:	a372      	add	r3, pc, #456	; (adr r3, 800b720 <atan+0x2c0>)
 800b556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55a:	f7f4 fe97 	bl	800028c <__adddf3>
 800b55e:	4632      	mov	r2, r6
 800b560:	463b      	mov	r3, r7
 800b562:	f7f5 f849 	bl	80005f8 <__aeabi_dmul>
 800b566:	a370      	add	r3, pc, #448	; (adr r3, 800b728 <atan+0x2c8>)
 800b568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56c:	f7f4 fe8e 	bl	800028c <__adddf3>
 800b570:	4632      	mov	r2, r6
 800b572:	463b      	mov	r3, r7
 800b574:	f7f5 f840 	bl	80005f8 <__aeabi_dmul>
 800b578:	a36d      	add	r3, pc, #436	; (adr r3, 800b730 <atan+0x2d0>)
 800b57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57e:	f7f4 fe85 	bl	800028c <__adddf3>
 800b582:	4632      	mov	r2, r6
 800b584:	463b      	mov	r3, r7
 800b586:	f7f5 f837 	bl	80005f8 <__aeabi_dmul>
 800b58a:	a36b      	add	r3, pc, #428	; (adr r3, 800b738 <atan+0x2d8>)
 800b58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b590:	f7f4 fe7c 	bl	800028c <__adddf3>
 800b594:	4632      	mov	r2, r6
 800b596:	463b      	mov	r3, r7
 800b598:	f7f5 f82e 	bl	80005f8 <__aeabi_dmul>
 800b59c:	a368      	add	r3, pc, #416	; (adr r3, 800b740 <atan+0x2e0>)
 800b59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a2:	f7f4 fe73 	bl	800028c <__adddf3>
 800b5a6:	4642      	mov	r2, r8
 800b5a8:	464b      	mov	r3, r9
 800b5aa:	f7f5 f825 	bl	80005f8 <__aeabi_dmul>
 800b5ae:	a366      	add	r3, pc, #408	; (adr r3, 800b748 <atan+0x2e8>)
 800b5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b4:	4680      	mov	r8, r0
 800b5b6:	4689      	mov	r9, r1
 800b5b8:	4630      	mov	r0, r6
 800b5ba:	4639      	mov	r1, r7
 800b5bc:	f7f5 f81c 	bl	80005f8 <__aeabi_dmul>
 800b5c0:	a363      	add	r3, pc, #396	; (adr r3, 800b750 <atan+0x2f0>)
 800b5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c6:	f7f4 fe5f 	bl	8000288 <__aeabi_dsub>
 800b5ca:	4632      	mov	r2, r6
 800b5cc:	463b      	mov	r3, r7
 800b5ce:	f7f5 f813 	bl	80005f8 <__aeabi_dmul>
 800b5d2:	a361      	add	r3, pc, #388	; (adr r3, 800b758 <atan+0x2f8>)
 800b5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d8:	f7f4 fe56 	bl	8000288 <__aeabi_dsub>
 800b5dc:	4632      	mov	r2, r6
 800b5de:	463b      	mov	r3, r7
 800b5e0:	f7f5 f80a 	bl	80005f8 <__aeabi_dmul>
 800b5e4:	a35e      	add	r3, pc, #376	; (adr r3, 800b760 <atan+0x300>)
 800b5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ea:	f7f4 fe4d 	bl	8000288 <__aeabi_dsub>
 800b5ee:	4632      	mov	r2, r6
 800b5f0:	463b      	mov	r3, r7
 800b5f2:	f7f5 f801 	bl	80005f8 <__aeabi_dmul>
 800b5f6:	a35c      	add	r3, pc, #368	; (adr r3, 800b768 <atan+0x308>)
 800b5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fc:	f7f4 fe44 	bl	8000288 <__aeabi_dsub>
 800b600:	4632      	mov	r2, r6
 800b602:	463b      	mov	r3, r7
 800b604:	f7f4 fff8 	bl	80005f8 <__aeabi_dmul>
 800b608:	4602      	mov	r2, r0
 800b60a:	460b      	mov	r3, r1
 800b60c:	4640      	mov	r0, r8
 800b60e:	4649      	mov	r1, r9
 800b610:	f7f4 fe3c 	bl	800028c <__adddf3>
 800b614:	4622      	mov	r2, r4
 800b616:	462b      	mov	r3, r5
 800b618:	f7f4 ffee 	bl	80005f8 <__aeabi_dmul>
 800b61c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800b620:	4602      	mov	r2, r0
 800b622:	460b      	mov	r3, r1
 800b624:	d14b      	bne.n	800b6be <atan+0x25e>
 800b626:	4620      	mov	r0, r4
 800b628:	4629      	mov	r1, r5
 800b62a:	f7f4 fe2d 	bl	8000288 <__aeabi_dsub>
 800b62e:	e72c      	b.n	800b48a <atan+0x2a>
 800b630:	ee10 0a10 	vmov	r0, s0
 800b634:	4b53      	ldr	r3, [pc, #332]	; (800b784 <atan+0x324>)
 800b636:	2200      	movs	r2, #0
 800b638:	4629      	mov	r1, r5
 800b63a:	f7f4 fe25 	bl	8000288 <__aeabi_dsub>
 800b63e:	4b51      	ldr	r3, [pc, #324]	; (800b784 <atan+0x324>)
 800b640:	4606      	mov	r6, r0
 800b642:	460f      	mov	r7, r1
 800b644:	2200      	movs	r2, #0
 800b646:	4620      	mov	r0, r4
 800b648:	4629      	mov	r1, r5
 800b64a:	f7f4 fe1f 	bl	800028c <__adddf3>
 800b64e:	4602      	mov	r2, r0
 800b650:	460b      	mov	r3, r1
 800b652:	4630      	mov	r0, r6
 800b654:	4639      	mov	r1, r7
 800b656:	f7f5 f8f9 	bl	800084c <__aeabi_ddiv>
 800b65a:	f04f 0a01 	mov.w	sl, #1
 800b65e:	4604      	mov	r4, r0
 800b660:	460d      	mov	r5, r1
 800b662:	e764      	b.n	800b52e <atan+0xce>
 800b664:	4b49      	ldr	r3, [pc, #292]	; (800b78c <atan+0x32c>)
 800b666:	429e      	cmp	r6, r3
 800b668:	da1d      	bge.n	800b6a6 <atan+0x246>
 800b66a:	ee10 0a10 	vmov	r0, s0
 800b66e:	4b48      	ldr	r3, [pc, #288]	; (800b790 <atan+0x330>)
 800b670:	2200      	movs	r2, #0
 800b672:	4629      	mov	r1, r5
 800b674:	f7f4 fe08 	bl	8000288 <__aeabi_dsub>
 800b678:	4b45      	ldr	r3, [pc, #276]	; (800b790 <atan+0x330>)
 800b67a:	4606      	mov	r6, r0
 800b67c:	460f      	mov	r7, r1
 800b67e:	2200      	movs	r2, #0
 800b680:	4620      	mov	r0, r4
 800b682:	4629      	mov	r1, r5
 800b684:	f7f4 ffb8 	bl	80005f8 <__aeabi_dmul>
 800b688:	4b3e      	ldr	r3, [pc, #248]	; (800b784 <atan+0x324>)
 800b68a:	2200      	movs	r2, #0
 800b68c:	f7f4 fdfe 	bl	800028c <__adddf3>
 800b690:	4602      	mov	r2, r0
 800b692:	460b      	mov	r3, r1
 800b694:	4630      	mov	r0, r6
 800b696:	4639      	mov	r1, r7
 800b698:	f7f5 f8d8 	bl	800084c <__aeabi_ddiv>
 800b69c:	f04f 0a02 	mov.w	sl, #2
 800b6a0:	4604      	mov	r4, r0
 800b6a2:	460d      	mov	r5, r1
 800b6a4:	e743      	b.n	800b52e <atan+0xce>
 800b6a6:	462b      	mov	r3, r5
 800b6a8:	ee10 2a10 	vmov	r2, s0
 800b6ac:	4939      	ldr	r1, [pc, #228]	; (800b794 <atan+0x334>)
 800b6ae:	2000      	movs	r0, #0
 800b6b0:	f7f5 f8cc 	bl	800084c <__aeabi_ddiv>
 800b6b4:	f04f 0a03 	mov.w	sl, #3
 800b6b8:	4604      	mov	r4, r0
 800b6ba:	460d      	mov	r5, r1
 800b6bc:	e737      	b.n	800b52e <atan+0xce>
 800b6be:	4b36      	ldr	r3, [pc, #216]	; (800b798 <atan+0x338>)
 800b6c0:	4e36      	ldr	r6, [pc, #216]	; (800b79c <atan+0x33c>)
 800b6c2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b6c6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800b6ca:	e9da 2300 	ldrd	r2, r3, [sl]
 800b6ce:	f7f4 fddb 	bl	8000288 <__aeabi_dsub>
 800b6d2:	4622      	mov	r2, r4
 800b6d4:	462b      	mov	r3, r5
 800b6d6:	f7f4 fdd7 	bl	8000288 <__aeabi_dsub>
 800b6da:	4602      	mov	r2, r0
 800b6dc:	460b      	mov	r3, r1
 800b6de:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b6e2:	f7f4 fdd1 	bl	8000288 <__aeabi_dsub>
 800b6e6:	f1bb 0f00 	cmp.w	fp, #0
 800b6ea:	4604      	mov	r4, r0
 800b6ec:	460d      	mov	r5, r1
 800b6ee:	f6bf aed6 	bge.w	800b49e <atan+0x3e>
 800b6f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b6f6:	461d      	mov	r5, r3
 800b6f8:	e6d1      	b.n	800b49e <atan+0x3e>
 800b6fa:	a51d      	add	r5, pc, #116	; (adr r5, 800b770 <atan+0x310>)
 800b6fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b700:	e6cd      	b.n	800b49e <atan+0x3e>
 800b702:	bf00      	nop
 800b704:	f3af 8000 	nop.w
 800b708:	54442d18 	.word	0x54442d18
 800b70c:	bff921fb 	.word	0xbff921fb
 800b710:	8800759c 	.word	0x8800759c
 800b714:	7e37e43c 	.word	0x7e37e43c
 800b718:	e322da11 	.word	0xe322da11
 800b71c:	3f90ad3a 	.word	0x3f90ad3a
 800b720:	24760deb 	.word	0x24760deb
 800b724:	3fa97b4b 	.word	0x3fa97b4b
 800b728:	a0d03d51 	.word	0xa0d03d51
 800b72c:	3fb10d66 	.word	0x3fb10d66
 800b730:	c54c206e 	.word	0xc54c206e
 800b734:	3fb745cd 	.word	0x3fb745cd
 800b738:	920083ff 	.word	0x920083ff
 800b73c:	3fc24924 	.word	0x3fc24924
 800b740:	5555550d 	.word	0x5555550d
 800b744:	3fd55555 	.word	0x3fd55555
 800b748:	2c6a6c2f 	.word	0x2c6a6c2f
 800b74c:	bfa2b444 	.word	0xbfa2b444
 800b750:	52defd9a 	.word	0x52defd9a
 800b754:	3fadde2d 	.word	0x3fadde2d
 800b758:	af749a6d 	.word	0xaf749a6d
 800b75c:	3fb3b0f2 	.word	0x3fb3b0f2
 800b760:	fe231671 	.word	0xfe231671
 800b764:	3fbc71c6 	.word	0x3fbc71c6
 800b768:	9998ebc4 	.word	0x9998ebc4
 800b76c:	3fc99999 	.word	0x3fc99999
 800b770:	54442d18 	.word	0x54442d18
 800b774:	3ff921fb 	.word	0x3ff921fb
 800b778:	440fffff 	.word	0x440fffff
 800b77c:	7ff00000 	.word	0x7ff00000
 800b780:	3fdbffff 	.word	0x3fdbffff
 800b784:	3ff00000 	.word	0x3ff00000
 800b788:	3ff2ffff 	.word	0x3ff2ffff
 800b78c:	40038000 	.word	0x40038000
 800b790:	3ff80000 	.word	0x3ff80000
 800b794:	bff00000 	.word	0xbff00000
 800b798:	0800e4a0 	.word	0x0800e4a0
 800b79c:	0800e480 	.word	0x0800e480

0800b7a0 <cos>:
 800b7a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b7a2:	ec53 2b10 	vmov	r2, r3, d0
 800b7a6:	4826      	ldr	r0, [pc, #152]	; (800b840 <cos+0xa0>)
 800b7a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b7ac:	4281      	cmp	r1, r0
 800b7ae:	dc06      	bgt.n	800b7be <cos+0x1e>
 800b7b0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b838 <cos+0x98>
 800b7b4:	b005      	add	sp, #20
 800b7b6:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7ba:	f001 bbfd 	b.w	800cfb8 <__kernel_cos>
 800b7be:	4821      	ldr	r0, [pc, #132]	; (800b844 <cos+0xa4>)
 800b7c0:	4281      	cmp	r1, r0
 800b7c2:	dd09      	ble.n	800b7d8 <cos+0x38>
 800b7c4:	ee10 0a10 	vmov	r0, s0
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	f7f4 fd5d 	bl	8000288 <__aeabi_dsub>
 800b7ce:	ec41 0b10 	vmov	d0, r0, r1
 800b7d2:	b005      	add	sp, #20
 800b7d4:	f85d fb04 	ldr.w	pc, [sp], #4
 800b7d8:	4668      	mov	r0, sp
 800b7da:	f001 f92d 	bl	800ca38 <__ieee754_rem_pio2>
 800b7de:	f000 0003 	and.w	r0, r0, #3
 800b7e2:	2801      	cmp	r0, #1
 800b7e4:	d00b      	beq.n	800b7fe <cos+0x5e>
 800b7e6:	2802      	cmp	r0, #2
 800b7e8:	d016      	beq.n	800b818 <cos+0x78>
 800b7ea:	b9e0      	cbnz	r0, 800b826 <cos+0x86>
 800b7ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b7f0:	ed9d 0b00 	vldr	d0, [sp]
 800b7f4:	f001 fbe0 	bl	800cfb8 <__kernel_cos>
 800b7f8:	ec51 0b10 	vmov	r0, r1, d0
 800b7fc:	e7e7      	b.n	800b7ce <cos+0x2e>
 800b7fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b802:	ed9d 0b00 	vldr	d0, [sp]
 800b806:	f001 ffef 	bl	800d7e8 <__kernel_sin>
 800b80a:	ec53 2b10 	vmov	r2, r3, d0
 800b80e:	ee10 0a10 	vmov	r0, s0
 800b812:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b816:	e7da      	b.n	800b7ce <cos+0x2e>
 800b818:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b81c:	ed9d 0b00 	vldr	d0, [sp]
 800b820:	f001 fbca 	bl	800cfb8 <__kernel_cos>
 800b824:	e7f1      	b.n	800b80a <cos+0x6a>
 800b826:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b82a:	ed9d 0b00 	vldr	d0, [sp]
 800b82e:	2001      	movs	r0, #1
 800b830:	f001 ffda 	bl	800d7e8 <__kernel_sin>
 800b834:	e7e0      	b.n	800b7f8 <cos+0x58>
 800b836:	bf00      	nop
	...
 800b840:	3fe921fb 	.word	0x3fe921fb
 800b844:	7fefffff 	.word	0x7fefffff

0800b848 <fabs>:
 800b848:	ec51 0b10 	vmov	r0, r1, d0
 800b84c:	ee10 2a10 	vmov	r2, s0
 800b850:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b854:	ec43 2b10 	vmov	d0, r2, r3
 800b858:	4770      	bx	lr
 800b85a:	0000      	movs	r0, r0
 800b85c:	0000      	movs	r0, r0
	...

0800b860 <sin>:
 800b860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b862:	ec53 2b10 	vmov	r2, r3, d0
 800b866:	4828      	ldr	r0, [pc, #160]	; (800b908 <sin+0xa8>)
 800b868:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b86c:	4281      	cmp	r1, r0
 800b86e:	dc07      	bgt.n	800b880 <sin+0x20>
 800b870:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800b900 <sin+0xa0>
 800b874:	2000      	movs	r0, #0
 800b876:	b005      	add	sp, #20
 800b878:	f85d eb04 	ldr.w	lr, [sp], #4
 800b87c:	f001 bfb4 	b.w	800d7e8 <__kernel_sin>
 800b880:	4822      	ldr	r0, [pc, #136]	; (800b90c <sin+0xac>)
 800b882:	4281      	cmp	r1, r0
 800b884:	dd09      	ble.n	800b89a <sin+0x3a>
 800b886:	ee10 0a10 	vmov	r0, s0
 800b88a:	4619      	mov	r1, r3
 800b88c:	f7f4 fcfc 	bl	8000288 <__aeabi_dsub>
 800b890:	ec41 0b10 	vmov	d0, r0, r1
 800b894:	b005      	add	sp, #20
 800b896:	f85d fb04 	ldr.w	pc, [sp], #4
 800b89a:	4668      	mov	r0, sp
 800b89c:	f001 f8cc 	bl	800ca38 <__ieee754_rem_pio2>
 800b8a0:	f000 0003 	and.w	r0, r0, #3
 800b8a4:	2801      	cmp	r0, #1
 800b8a6:	d00c      	beq.n	800b8c2 <sin+0x62>
 800b8a8:	2802      	cmp	r0, #2
 800b8aa:	d011      	beq.n	800b8d0 <sin+0x70>
 800b8ac:	b9f0      	cbnz	r0, 800b8ec <sin+0x8c>
 800b8ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b8b2:	ed9d 0b00 	vldr	d0, [sp]
 800b8b6:	2001      	movs	r0, #1
 800b8b8:	f001 ff96 	bl	800d7e8 <__kernel_sin>
 800b8bc:	ec51 0b10 	vmov	r0, r1, d0
 800b8c0:	e7e6      	b.n	800b890 <sin+0x30>
 800b8c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b8c6:	ed9d 0b00 	vldr	d0, [sp]
 800b8ca:	f001 fb75 	bl	800cfb8 <__kernel_cos>
 800b8ce:	e7f5      	b.n	800b8bc <sin+0x5c>
 800b8d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b8d4:	ed9d 0b00 	vldr	d0, [sp]
 800b8d8:	2001      	movs	r0, #1
 800b8da:	f001 ff85 	bl	800d7e8 <__kernel_sin>
 800b8de:	ec53 2b10 	vmov	r2, r3, d0
 800b8e2:	ee10 0a10 	vmov	r0, s0
 800b8e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b8ea:	e7d1      	b.n	800b890 <sin+0x30>
 800b8ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b8f0:	ed9d 0b00 	vldr	d0, [sp]
 800b8f4:	f001 fb60 	bl	800cfb8 <__kernel_cos>
 800b8f8:	e7f1      	b.n	800b8de <sin+0x7e>
 800b8fa:	bf00      	nop
 800b8fc:	f3af 8000 	nop.w
	...
 800b908:	3fe921fb 	.word	0x3fe921fb
 800b90c:	7fefffff 	.word	0x7fefffff

0800b910 <tan>:
 800b910:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b912:	ec53 2b10 	vmov	r2, r3, d0
 800b916:	4816      	ldr	r0, [pc, #88]	; (800b970 <tan+0x60>)
 800b918:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b91c:	4281      	cmp	r1, r0
 800b91e:	dc07      	bgt.n	800b930 <tan+0x20>
 800b920:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800b968 <tan+0x58>
 800b924:	2001      	movs	r0, #1
 800b926:	b005      	add	sp, #20
 800b928:	f85d eb04 	ldr.w	lr, [sp], #4
 800b92c:	f002 b81c 	b.w	800d968 <__kernel_tan>
 800b930:	4810      	ldr	r0, [pc, #64]	; (800b974 <tan+0x64>)
 800b932:	4281      	cmp	r1, r0
 800b934:	dd09      	ble.n	800b94a <tan+0x3a>
 800b936:	ee10 0a10 	vmov	r0, s0
 800b93a:	4619      	mov	r1, r3
 800b93c:	f7f4 fca4 	bl	8000288 <__aeabi_dsub>
 800b940:	ec41 0b10 	vmov	d0, r0, r1
 800b944:	b005      	add	sp, #20
 800b946:	f85d fb04 	ldr.w	pc, [sp], #4
 800b94a:	4668      	mov	r0, sp
 800b94c:	f001 f874 	bl	800ca38 <__ieee754_rem_pio2>
 800b950:	0040      	lsls	r0, r0, #1
 800b952:	f000 0002 	and.w	r0, r0, #2
 800b956:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b95a:	ed9d 0b00 	vldr	d0, [sp]
 800b95e:	f1c0 0001 	rsb	r0, r0, #1
 800b962:	f002 f801 	bl	800d968 <__kernel_tan>
 800b966:	e7ed      	b.n	800b944 <tan+0x34>
	...
 800b970:	3fe921fb 	.word	0x3fe921fb
 800b974:	7fefffff 	.word	0x7fefffff

0800b978 <acos>:
 800b978:	b538      	push	{r3, r4, r5, lr}
 800b97a:	ed2d 8b02 	vpush	{d8}
 800b97e:	ec55 4b10 	vmov	r4, r5, d0
 800b982:	f000 f8c9 	bl	800bb18 <__ieee754_acos>
 800b986:	4622      	mov	r2, r4
 800b988:	462b      	mov	r3, r5
 800b98a:	4620      	mov	r0, r4
 800b98c:	4629      	mov	r1, r5
 800b98e:	eeb0 8a40 	vmov.f32	s16, s0
 800b992:	eef0 8a60 	vmov.f32	s17, s1
 800b996:	f7f5 f8c9 	bl	8000b2c <__aeabi_dcmpun>
 800b99a:	b9a8      	cbnz	r0, 800b9c8 <acos+0x50>
 800b99c:	ec45 4b10 	vmov	d0, r4, r5
 800b9a0:	f7ff ff52 	bl	800b848 <fabs>
 800b9a4:	4b0c      	ldr	r3, [pc, #48]	; (800b9d8 <acos+0x60>)
 800b9a6:	ec51 0b10 	vmov	r0, r1, d0
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	f7f5 f8b4 	bl	8000b18 <__aeabi_dcmpgt>
 800b9b0:	b150      	cbz	r0, 800b9c8 <acos+0x50>
 800b9b2:	f7fc fff1 	bl	8008998 <__errno>
 800b9b6:	ecbd 8b02 	vpop	{d8}
 800b9ba:	2321      	movs	r3, #33	; 0x21
 800b9bc:	6003      	str	r3, [r0, #0]
 800b9be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9c2:	4806      	ldr	r0, [pc, #24]	; (800b9dc <acos+0x64>)
 800b9c4:	f002 ba98 	b.w	800def8 <nan>
 800b9c8:	eeb0 0a48 	vmov.f32	s0, s16
 800b9cc:	eef0 0a68 	vmov.f32	s1, s17
 800b9d0:	ecbd 8b02 	vpop	{d8}
 800b9d4:	bd38      	pop	{r3, r4, r5, pc}
 800b9d6:	bf00      	nop
 800b9d8:	3ff00000 	.word	0x3ff00000
 800b9dc:	0800e370 	.word	0x0800e370

0800b9e0 <pow>:
 800b9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9e2:	ed2d 8b02 	vpush	{d8}
 800b9e6:	eeb0 8a40 	vmov.f32	s16, s0
 800b9ea:	eef0 8a60 	vmov.f32	s17, s1
 800b9ee:	ec55 4b11 	vmov	r4, r5, d1
 800b9f2:	f000 faf1 	bl	800bfd8 <__ieee754_pow>
 800b9f6:	4622      	mov	r2, r4
 800b9f8:	462b      	mov	r3, r5
 800b9fa:	4620      	mov	r0, r4
 800b9fc:	4629      	mov	r1, r5
 800b9fe:	ec57 6b10 	vmov	r6, r7, d0
 800ba02:	f7f5 f893 	bl	8000b2c <__aeabi_dcmpun>
 800ba06:	2800      	cmp	r0, #0
 800ba08:	d13b      	bne.n	800ba82 <pow+0xa2>
 800ba0a:	ec51 0b18 	vmov	r0, r1, d8
 800ba0e:	2200      	movs	r2, #0
 800ba10:	2300      	movs	r3, #0
 800ba12:	f7f5 f859 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba16:	b1b8      	cbz	r0, 800ba48 <pow+0x68>
 800ba18:	2200      	movs	r2, #0
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	4620      	mov	r0, r4
 800ba1e:	4629      	mov	r1, r5
 800ba20:	f7f5 f852 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba24:	2800      	cmp	r0, #0
 800ba26:	d146      	bne.n	800bab6 <pow+0xd6>
 800ba28:	ec45 4b10 	vmov	d0, r4, r5
 800ba2c:	f002 f9d6 	bl	800dddc <finite>
 800ba30:	b338      	cbz	r0, 800ba82 <pow+0xa2>
 800ba32:	2200      	movs	r2, #0
 800ba34:	2300      	movs	r3, #0
 800ba36:	4620      	mov	r0, r4
 800ba38:	4629      	mov	r1, r5
 800ba3a:	f7f5 f84f 	bl	8000adc <__aeabi_dcmplt>
 800ba3e:	b300      	cbz	r0, 800ba82 <pow+0xa2>
 800ba40:	f7fc ffaa 	bl	8008998 <__errno>
 800ba44:	2322      	movs	r3, #34	; 0x22
 800ba46:	e01b      	b.n	800ba80 <pow+0xa0>
 800ba48:	ec47 6b10 	vmov	d0, r6, r7
 800ba4c:	f002 f9c6 	bl	800dddc <finite>
 800ba50:	b9e0      	cbnz	r0, 800ba8c <pow+0xac>
 800ba52:	eeb0 0a48 	vmov.f32	s0, s16
 800ba56:	eef0 0a68 	vmov.f32	s1, s17
 800ba5a:	f002 f9bf 	bl	800dddc <finite>
 800ba5e:	b1a8      	cbz	r0, 800ba8c <pow+0xac>
 800ba60:	ec45 4b10 	vmov	d0, r4, r5
 800ba64:	f002 f9ba 	bl	800dddc <finite>
 800ba68:	b180      	cbz	r0, 800ba8c <pow+0xac>
 800ba6a:	4632      	mov	r2, r6
 800ba6c:	463b      	mov	r3, r7
 800ba6e:	4630      	mov	r0, r6
 800ba70:	4639      	mov	r1, r7
 800ba72:	f7f5 f85b 	bl	8000b2c <__aeabi_dcmpun>
 800ba76:	2800      	cmp	r0, #0
 800ba78:	d0e2      	beq.n	800ba40 <pow+0x60>
 800ba7a:	f7fc ff8d 	bl	8008998 <__errno>
 800ba7e:	2321      	movs	r3, #33	; 0x21
 800ba80:	6003      	str	r3, [r0, #0]
 800ba82:	ecbd 8b02 	vpop	{d8}
 800ba86:	ec47 6b10 	vmov	d0, r6, r7
 800ba8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	2300      	movs	r3, #0
 800ba90:	4630      	mov	r0, r6
 800ba92:	4639      	mov	r1, r7
 800ba94:	f7f5 f818 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba98:	2800      	cmp	r0, #0
 800ba9a:	d0f2      	beq.n	800ba82 <pow+0xa2>
 800ba9c:	eeb0 0a48 	vmov.f32	s0, s16
 800baa0:	eef0 0a68 	vmov.f32	s1, s17
 800baa4:	f002 f99a 	bl	800dddc <finite>
 800baa8:	2800      	cmp	r0, #0
 800baaa:	d0ea      	beq.n	800ba82 <pow+0xa2>
 800baac:	ec45 4b10 	vmov	d0, r4, r5
 800bab0:	f002 f994 	bl	800dddc <finite>
 800bab4:	e7c3      	b.n	800ba3e <pow+0x5e>
 800bab6:	4f01      	ldr	r7, [pc, #4]	; (800babc <pow+0xdc>)
 800bab8:	2600      	movs	r6, #0
 800baba:	e7e2      	b.n	800ba82 <pow+0xa2>
 800babc:	3ff00000 	.word	0x3ff00000

0800bac0 <sqrt>:
 800bac0:	b538      	push	{r3, r4, r5, lr}
 800bac2:	ed2d 8b02 	vpush	{d8}
 800bac6:	ec55 4b10 	vmov	r4, r5, d0
 800baca:	f001 f9c1 	bl	800ce50 <__ieee754_sqrt>
 800bace:	4622      	mov	r2, r4
 800bad0:	462b      	mov	r3, r5
 800bad2:	4620      	mov	r0, r4
 800bad4:	4629      	mov	r1, r5
 800bad6:	eeb0 8a40 	vmov.f32	s16, s0
 800bada:	eef0 8a60 	vmov.f32	s17, s1
 800bade:	f7f5 f825 	bl	8000b2c <__aeabi_dcmpun>
 800bae2:	b990      	cbnz	r0, 800bb0a <sqrt+0x4a>
 800bae4:	2200      	movs	r2, #0
 800bae6:	2300      	movs	r3, #0
 800bae8:	4620      	mov	r0, r4
 800baea:	4629      	mov	r1, r5
 800baec:	f7f4 fff6 	bl	8000adc <__aeabi_dcmplt>
 800baf0:	b158      	cbz	r0, 800bb0a <sqrt+0x4a>
 800baf2:	f7fc ff51 	bl	8008998 <__errno>
 800baf6:	2321      	movs	r3, #33	; 0x21
 800baf8:	6003      	str	r3, [r0, #0]
 800bafa:	2200      	movs	r2, #0
 800bafc:	2300      	movs	r3, #0
 800bafe:	4610      	mov	r0, r2
 800bb00:	4619      	mov	r1, r3
 800bb02:	f7f4 fea3 	bl	800084c <__aeabi_ddiv>
 800bb06:	ec41 0b18 	vmov	d8, r0, r1
 800bb0a:	eeb0 0a48 	vmov.f32	s0, s16
 800bb0e:	eef0 0a68 	vmov.f32	s1, s17
 800bb12:	ecbd 8b02 	vpop	{d8}
 800bb16:	bd38      	pop	{r3, r4, r5, pc}

0800bb18 <__ieee754_acos>:
 800bb18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb1c:	ec55 4b10 	vmov	r4, r5, d0
 800bb20:	49b7      	ldr	r1, [pc, #732]	; (800be00 <__ieee754_acos+0x2e8>)
 800bb22:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bb26:	428b      	cmp	r3, r1
 800bb28:	dd1b      	ble.n	800bb62 <__ieee754_acos+0x4a>
 800bb2a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800bb2e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bb32:	4323      	orrs	r3, r4
 800bb34:	d106      	bne.n	800bb44 <__ieee754_acos+0x2c>
 800bb36:	2d00      	cmp	r5, #0
 800bb38:	f300 8211 	bgt.w	800bf5e <__ieee754_acos+0x446>
 800bb3c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800bd98 <__ieee754_acos+0x280>
 800bb40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb44:	ee10 2a10 	vmov	r2, s0
 800bb48:	462b      	mov	r3, r5
 800bb4a:	ee10 0a10 	vmov	r0, s0
 800bb4e:	4629      	mov	r1, r5
 800bb50:	f7f4 fb9a 	bl	8000288 <__aeabi_dsub>
 800bb54:	4602      	mov	r2, r0
 800bb56:	460b      	mov	r3, r1
 800bb58:	f7f4 fe78 	bl	800084c <__aeabi_ddiv>
 800bb5c:	ec41 0b10 	vmov	d0, r0, r1
 800bb60:	e7ee      	b.n	800bb40 <__ieee754_acos+0x28>
 800bb62:	49a8      	ldr	r1, [pc, #672]	; (800be04 <__ieee754_acos+0x2ec>)
 800bb64:	428b      	cmp	r3, r1
 800bb66:	f300 8087 	bgt.w	800bc78 <__ieee754_acos+0x160>
 800bb6a:	4aa7      	ldr	r2, [pc, #668]	; (800be08 <__ieee754_acos+0x2f0>)
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	f340 81f9 	ble.w	800bf64 <__ieee754_acos+0x44c>
 800bb72:	ee10 2a10 	vmov	r2, s0
 800bb76:	ee10 0a10 	vmov	r0, s0
 800bb7a:	462b      	mov	r3, r5
 800bb7c:	4629      	mov	r1, r5
 800bb7e:	f7f4 fd3b 	bl	80005f8 <__aeabi_dmul>
 800bb82:	a387      	add	r3, pc, #540	; (adr r3, 800bda0 <__ieee754_acos+0x288>)
 800bb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb88:	4606      	mov	r6, r0
 800bb8a:	460f      	mov	r7, r1
 800bb8c:	f7f4 fd34 	bl	80005f8 <__aeabi_dmul>
 800bb90:	a385      	add	r3, pc, #532	; (adr r3, 800bda8 <__ieee754_acos+0x290>)
 800bb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb96:	f7f4 fb79 	bl	800028c <__adddf3>
 800bb9a:	4632      	mov	r2, r6
 800bb9c:	463b      	mov	r3, r7
 800bb9e:	f7f4 fd2b 	bl	80005f8 <__aeabi_dmul>
 800bba2:	a383      	add	r3, pc, #524	; (adr r3, 800bdb0 <__ieee754_acos+0x298>)
 800bba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba8:	f7f4 fb6e 	bl	8000288 <__aeabi_dsub>
 800bbac:	4632      	mov	r2, r6
 800bbae:	463b      	mov	r3, r7
 800bbb0:	f7f4 fd22 	bl	80005f8 <__aeabi_dmul>
 800bbb4:	a380      	add	r3, pc, #512	; (adr r3, 800bdb8 <__ieee754_acos+0x2a0>)
 800bbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbba:	f7f4 fb67 	bl	800028c <__adddf3>
 800bbbe:	4632      	mov	r2, r6
 800bbc0:	463b      	mov	r3, r7
 800bbc2:	f7f4 fd19 	bl	80005f8 <__aeabi_dmul>
 800bbc6:	a37e      	add	r3, pc, #504	; (adr r3, 800bdc0 <__ieee754_acos+0x2a8>)
 800bbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbcc:	f7f4 fb5c 	bl	8000288 <__aeabi_dsub>
 800bbd0:	4632      	mov	r2, r6
 800bbd2:	463b      	mov	r3, r7
 800bbd4:	f7f4 fd10 	bl	80005f8 <__aeabi_dmul>
 800bbd8:	a37b      	add	r3, pc, #492	; (adr r3, 800bdc8 <__ieee754_acos+0x2b0>)
 800bbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbde:	f7f4 fb55 	bl	800028c <__adddf3>
 800bbe2:	4632      	mov	r2, r6
 800bbe4:	463b      	mov	r3, r7
 800bbe6:	f7f4 fd07 	bl	80005f8 <__aeabi_dmul>
 800bbea:	a379      	add	r3, pc, #484	; (adr r3, 800bdd0 <__ieee754_acos+0x2b8>)
 800bbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf0:	4680      	mov	r8, r0
 800bbf2:	4689      	mov	r9, r1
 800bbf4:	4630      	mov	r0, r6
 800bbf6:	4639      	mov	r1, r7
 800bbf8:	f7f4 fcfe 	bl	80005f8 <__aeabi_dmul>
 800bbfc:	a376      	add	r3, pc, #472	; (adr r3, 800bdd8 <__ieee754_acos+0x2c0>)
 800bbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc02:	f7f4 fb41 	bl	8000288 <__aeabi_dsub>
 800bc06:	4632      	mov	r2, r6
 800bc08:	463b      	mov	r3, r7
 800bc0a:	f7f4 fcf5 	bl	80005f8 <__aeabi_dmul>
 800bc0e:	a374      	add	r3, pc, #464	; (adr r3, 800bde0 <__ieee754_acos+0x2c8>)
 800bc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc14:	f7f4 fb3a 	bl	800028c <__adddf3>
 800bc18:	4632      	mov	r2, r6
 800bc1a:	463b      	mov	r3, r7
 800bc1c:	f7f4 fcec 	bl	80005f8 <__aeabi_dmul>
 800bc20:	a371      	add	r3, pc, #452	; (adr r3, 800bde8 <__ieee754_acos+0x2d0>)
 800bc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc26:	f7f4 fb2f 	bl	8000288 <__aeabi_dsub>
 800bc2a:	4632      	mov	r2, r6
 800bc2c:	463b      	mov	r3, r7
 800bc2e:	f7f4 fce3 	bl	80005f8 <__aeabi_dmul>
 800bc32:	4b76      	ldr	r3, [pc, #472]	; (800be0c <__ieee754_acos+0x2f4>)
 800bc34:	2200      	movs	r2, #0
 800bc36:	f7f4 fb29 	bl	800028c <__adddf3>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	4640      	mov	r0, r8
 800bc40:	4649      	mov	r1, r9
 800bc42:	f7f4 fe03 	bl	800084c <__aeabi_ddiv>
 800bc46:	4622      	mov	r2, r4
 800bc48:	462b      	mov	r3, r5
 800bc4a:	f7f4 fcd5 	bl	80005f8 <__aeabi_dmul>
 800bc4e:	4602      	mov	r2, r0
 800bc50:	460b      	mov	r3, r1
 800bc52:	a167      	add	r1, pc, #412	; (adr r1, 800bdf0 <__ieee754_acos+0x2d8>)
 800bc54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc58:	f7f4 fb16 	bl	8000288 <__aeabi_dsub>
 800bc5c:	4602      	mov	r2, r0
 800bc5e:	460b      	mov	r3, r1
 800bc60:	4620      	mov	r0, r4
 800bc62:	4629      	mov	r1, r5
 800bc64:	f7f4 fb10 	bl	8000288 <__aeabi_dsub>
 800bc68:	4602      	mov	r2, r0
 800bc6a:	460b      	mov	r3, r1
 800bc6c:	a162      	add	r1, pc, #392	; (adr r1, 800bdf8 <__ieee754_acos+0x2e0>)
 800bc6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc72:	f7f4 fb09 	bl	8000288 <__aeabi_dsub>
 800bc76:	e771      	b.n	800bb5c <__ieee754_acos+0x44>
 800bc78:	2d00      	cmp	r5, #0
 800bc7a:	f280 80cb 	bge.w	800be14 <__ieee754_acos+0x2fc>
 800bc7e:	ee10 0a10 	vmov	r0, s0
 800bc82:	4b62      	ldr	r3, [pc, #392]	; (800be0c <__ieee754_acos+0x2f4>)
 800bc84:	2200      	movs	r2, #0
 800bc86:	4629      	mov	r1, r5
 800bc88:	f7f4 fb00 	bl	800028c <__adddf3>
 800bc8c:	4b60      	ldr	r3, [pc, #384]	; (800be10 <__ieee754_acos+0x2f8>)
 800bc8e:	2200      	movs	r2, #0
 800bc90:	f7f4 fcb2 	bl	80005f8 <__aeabi_dmul>
 800bc94:	a342      	add	r3, pc, #264	; (adr r3, 800bda0 <__ieee754_acos+0x288>)
 800bc96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc9a:	4604      	mov	r4, r0
 800bc9c:	460d      	mov	r5, r1
 800bc9e:	f7f4 fcab 	bl	80005f8 <__aeabi_dmul>
 800bca2:	a341      	add	r3, pc, #260	; (adr r3, 800bda8 <__ieee754_acos+0x290>)
 800bca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca8:	f7f4 faf0 	bl	800028c <__adddf3>
 800bcac:	4622      	mov	r2, r4
 800bcae:	462b      	mov	r3, r5
 800bcb0:	f7f4 fca2 	bl	80005f8 <__aeabi_dmul>
 800bcb4:	a33e      	add	r3, pc, #248	; (adr r3, 800bdb0 <__ieee754_acos+0x298>)
 800bcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcba:	f7f4 fae5 	bl	8000288 <__aeabi_dsub>
 800bcbe:	4622      	mov	r2, r4
 800bcc0:	462b      	mov	r3, r5
 800bcc2:	f7f4 fc99 	bl	80005f8 <__aeabi_dmul>
 800bcc6:	a33c      	add	r3, pc, #240	; (adr r3, 800bdb8 <__ieee754_acos+0x2a0>)
 800bcc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bccc:	f7f4 fade 	bl	800028c <__adddf3>
 800bcd0:	4622      	mov	r2, r4
 800bcd2:	462b      	mov	r3, r5
 800bcd4:	f7f4 fc90 	bl	80005f8 <__aeabi_dmul>
 800bcd8:	a339      	add	r3, pc, #228	; (adr r3, 800bdc0 <__ieee754_acos+0x2a8>)
 800bcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcde:	f7f4 fad3 	bl	8000288 <__aeabi_dsub>
 800bce2:	4622      	mov	r2, r4
 800bce4:	462b      	mov	r3, r5
 800bce6:	f7f4 fc87 	bl	80005f8 <__aeabi_dmul>
 800bcea:	a337      	add	r3, pc, #220	; (adr r3, 800bdc8 <__ieee754_acos+0x2b0>)
 800bcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf0:	f7f4 facc 	bl	800028c <__adddf3>
 800bcf4:	4622      	mov	r2, r4
 800bcf6:	462b      	mov	r3, r5
 800bcf8:	f7f4 fc7e 	bl	80005f8 <__aeabi_dmul>
 800bcfc:	ec45 4b10 	vmov	d0, r4, r5
 800bd00:	4680      	mov	r8, r0
 800bd02:	4689      	mov	r9, r1
 800bd04:	f001 f8a4 	bl	800ce50 <__ieee754_sqrt>
 800bd08:	a331      	add	r3, pc, #196	; (adr r3, 800bdd0 <__ieee754_acos+0x2b8>)
 800bd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd0e:	4620      	mov	r0, r4
 800bd10:	4629      	mov	r1, r5
 800bd12:	ec57 6b10 	vmov	r6, r7, d0
 800bd16:	f7f4 fc6f 	bl	80005f8 <__aeabi_dmul>
 800bd1a:	a32f      	add	r3, pc, #188	; (adr r3, 800bdd8 <__ieee754_acos+0x2c0>)
 800bd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd20:	f7f4 fab2 	bl	8000288 <__aeabi_dsub>
 800bd24:	4622      	mov	r2, r4
 800bd26:	462b      	mov	r3, r5
 800bd28:	f7f4 fc66 	bl	80005f8 <__aeabi_dmul>
 800bd2c:	a32c      	add	r3, pc, #176	; (adr r3, 800bde0 <__ieee754_acos+0x2c8>)
 800bd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd32:	f7f4 faab 	bl	800028c <__adddf3>
 800bd36:	4622      	mov	r2, r4
 800bd38:	462b      	mov	r3, r5
 800bd3a:	f7f4 fc5d 	bl	80005f8 <__aeabi_dmul>
 800bd3e:	a32a      	add	r3, pc, #168	; (adr r3, 800bde8 <__ieee754_acos+0x2d0>)
 800bd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd44:	f7f4 faa0 	bl	8000288 <__aeabi_dsub>
 800bd48:	4622      	mov	r2, r4
 800bd4a:	462b      	mov	r3, r5
 800bd4c:	f7f4 fc54 	bl	80005f8 <__aeabi_dmul>
 800bd50:	4b2e      	ldr	r3, [pc, #184]	; (800be0c <__ieee754_acos+0x2f4>)
 800bd52:	2200      	movs	r2, #0
 800bd54:	f7f4 fa9a 	bl	800028c <__adddf3>
 800bd58:	4602      	mov	r2, r0
 800bd5a:	460b      	mov	r3, r1
 800bd5c:	4640      	mov	r0, r8
 800bd5e:	4649      	mov	r1, r9
 800bd60:	f7f4 fd74 	bl	800084c <__aeabi_ddiv>
 800bd64:	4632      	mov	r2, r6
 800bd66:	463b      	mov	r3, r7
 800bd68:	f7f4 fc46 	bl	80005f8 <__aeabi_dmul>
 800bd6c:	a320      	add	r3, pc, #128	; (adr r3, 800bdf0 <__ieee754_acos+0x2d8>)
 800bd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd72:	f7f4 fa89 	bl	8000288 <__aeabi_dsub>
 800bd76:	4632      	mov	r2, r6
 800bd78:	463b      	mov	r3, r7
 800bd7a:	f7f4 fa87 	bl	800028c <__adddf3>
 800bd7e:	4602      	mov	r2, r0
 800bd80:	460b      	mov	r3, r1
 800bd82:	f7f4 fa83 	bl	800028c <__adddf3>
 800bd86:	4602      	mov	r2, r0
 800bd88:	460b      	mov	r3, r1
 800bd8a:	a103      	add	r1, pc, #12	; (adr r1, 800bd98 <__ieee754_acos+0x280>)
 800bd8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd90:	e76f      	b.n	800bc72 <__ieee754_acos+0x15a>
 800bd92:	bf00      	nop
 800bd94:	f3af 8000 	nop.w
 800bd98:	54442d18 	.word	0x54442d18
 800bd9c:	400921fb 	.word	0x400921fb
 800bda0:	0dfdf709 	.word	0x0dfdf709
 800bda4:	3f023de1 	.word	0x3f023de1
 800bda8:	7501b288 	.word	0x7501b288
 800bdac:	3f49efe0 	.word	0x3f49efe0
 800bdb0:	b5688f3b 	.word	0xb5688f3b
 800bdb4:	3fa48228 	.word	0x3fa48228
 800bdb8:	0e884455 	.word	0x0e884455
 800bdbc:	3fc9c155 	.word	0x3fc9c155
 800bdc0:	03eb6f7d 	.word	0x03eb6f7d
 800bdc4:	3fd4d612 	.word	0x3fd4d612
 800bdc8:	55555555 	.word	0x55555555
 800bdcc:	3fc55555 	.word	0x3fc55555
 800bdd0:	b12e9282 	.word	0xb12e9282
 800bdd4:	3fb3b8c5 	.word	0x3fb3b8c5
 800bdd8:	1b8d0159 	.word	0x1b8d0159
 800bddc:	3fe6066c 	.word	0x3fe6066c
 800bde0:	9c598ac8 	.word	0x9c598ac8
 800bde4:	40002ae5 	.word	0x40002ae5
 800bde8:	1c8a2d4b 	.word	0x1c8a2d4b
 800bdec:	40033a27 	.word	0x40033a27
 800bdf0:	33145c07 	.word	0x33145c07
 800bdf4:	3c91a626 	.word	0x3c91a626
 800bdf8:	54442d18 	.word	0x54442d18
 800bdfc:	3ff921fb 	.word	0x3ff921fb
 800be00:	3fefffff 	.word	0x3fefffff
 800be04:	3fdfffff 	.word	0x3fdfffff
 800be08:	3c600000 	.word	0x3c600000
 800be0c:	3ff00000 	.word	0x3ff00000
 800be10:	3fe00000 	.word	0x3fe00000
 800be14:	ee10 2a10 	vmov	r2, s0
 800be18:	462b      	mov	r3, r5
 800be1a:	496d      	ldr	r1, [pc, #436]	; (800bfd0 <__ieee754_acos+0x4b8>)
 800be1c:	2000      	movs	r0, #0
 800be1e:	f7f4 fa33 	bl	8000288 <__aeabi_dsub>
 800be22:	4b6c      	ldr	r3, [pc, #432]	; (800bfd4 <__ieee754_acos+0x4bc>)
 800be24:	2200      	movs	r2, #0
 800be26:	f7f4 fbe7 	bl	80005f8 <__aeabi_dmul>
 800be2a:	4604      	mov	r4, r0
 800be2c:	460d      	mov	r5, r1
 800be2e:	ec45 4b10 	vmov	d0, r4, r5
 800be32:	f001 f80d 	bl	800ce50 <__ieee754_sqrt>
 800be36:	a34e      	add	r3, pc, #312	; (adr r3, 800bf70 <__ieee754_acos+0x458>)
 800be38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be3c:	4620      	mov	r0, r4
 800be3e:	4629      	mov	r1, r5
 800be40:	ec59 8b10 	vmov	r8, r9, d0
 800be44:	f7f4 fbd8 	bl	80005f8 <__aeabi_dmul>
 800be48:	a34b      	add	r3, pc, #300	; (adr r3, 800bf78 <__ieee754_acos+0x460>)
 800be4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4e:	f7f4 fa1d 	bl	800028c <__adddf3>
 800be52:	4622      	mov	r2, r4
 800be54:	462b      	mov	r3, r5
 800be56:	f7f4 fbcf 	bl	80005f8 <__aeabi_dmul>
 800be5a:	a349      	add	r3, pc, #292	; (adr r3, 800bf80 <__ieee754_acos+0x468>)
 800be5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be60:	f7f4 fa12 	bl	8000288 <__aeabi_dsub>
 800be64:	4622      	mov	r2, r4
 800be66:	462b      	mov	r3, r5
 800be68:	f7f4 fbc6 	bl	80005f8 <__aeabi_dmul>
 800be6c:	a346      	add	r3, pc, #280	; (adr r3, 800bf88 <__ieee754_acos+0x470>)
 800be6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be72:	f7f4 fa0b 	bl	800028c <__adddf3>
 800be76:	4622      	mov	r2, r4
 800be78:	462b      	mov	r3, r5
 800be7a:	f7f4 fbbd 	bl	80005f8 <__aeabi_dmul>
 800be7e:	a344      	add	r3, pc, #272	; (adr r3, 800bf90 <__ieee754_acos+0x478>)
 800be80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be84:	f7f4 fa00 	bl	8000288 <__aeabi_dsub>
 800be88:	4622      	mov	r2, r4
 800be8a:	462b      	mov	r3, r5
 800be8c:	f7f4 fbb4 	bl	80005f8 <__aeabi_dmul>
 800be90:	a341      	add	r3, pc, #260	; (adr r3, 800bf98 <__ieee754_acos+0x480>)
 800be92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be96:	f7f4 f9f9 	bl	800028c <__adddf3>
 800be9a:	4622      	mov	r2, r4
 800be9c:	462b      	mov	r3, r5
 800be9e:	f7f4 fbab 	bl	80005f8 <__aeabi_dmul>
 800bea2:	a33f      	add	r3, pc, #252	; (adr r3, 800bfa0 <__ieee754_acos+0x488>)
 800bea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea8:	4682      	mov	sl, r0
 800beaa:	468b      	mov	fp, r1
 800beac:	4620      	mov	r0, r4
 800beae:	4629      	mov	r1, r5
 800beb0:	f7f4 fba2 	bl	80005f8 <__aeabi_dmul>
 800beb4:	a33c      	add	r3, pc, #240	; (adr r3, 800bfa8 <__ieee754_acos+0x490>)
 800beb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beba:	f7f4 f9e5 	bl	8000288 <__aeabi_dsub>
 800bebe:	4622      	mov	r2, r4
 800bec0:	462b      	mov	r3, r5
 800bec2:	f7f4 fb99 	bl	80005f8 <__aeabi_dmul>
 800bec6:	a33a      	add	r3, pc, #232	; (adr r3, 800bfb0 <__ieee754_acos+0x498>)
 800bec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800becc:	f7f4 f9de 	bl	800028c <__adddf3>
 800bed0:	4622      	mov	r2, r4
 800bed2:	462b      	mov	r3, r5
 800bed4:	f7f4 fb90 	bl	80005f8 <__aeabi_dmul>
 800bed8:	a337      	add	r3, pc, #220	; (adr r3, 800bfb8 <__ieee754_acos+0x4a0>)
 800beda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bede:	f7f4 f9d3 	bl	8000288 <__aeabi_dsub>
 800bee2:	4622      	mov	r2, r4
 800bee4:	462b      	mov	r3, r5
 800bee6:	f7f4 fb87 	bl	80005f8 <__aeabi_dmul>
 800beea:	4b39      	ldr	r3, [pc, #228]	; (800bfd0 <__ieee754_acos+0x4b8>)
 800beec:	2200      	movs	r2, #0
 800beee:	f7f4 f9cd 	bl	800028c <__adddf3>
 800bef2:	4602      	mov	r2, r0
 800bef4:	460b      	mov	r3, r1
 800bef6:	4650      	mov	r0, sl
 800bef8:	4659      	mov	r1, fp
 800befa:	f7f4 fca7 	bl	800084c <__aeabi_ddiv>
 800befe:	4642      	mov	r2, r8
 800bf00:	464b      	mov	r3, r9
 800bf02:	f7f4 fb79 	bl	80005f8 <__aeabi_dmul>
 800bf06:	2600      	movs	r6, #0
 800bf08:	4682      	mov	sl, r0
 800bf0a:	468b      	mov	fp, r1
 800bf0c:	4632      	mov	r2, r6
 800bf0e:	464b      	mov	r3, r9
 800bf10:	4630      	mov	r0, r6
 800bf12:	4649      	mov	r1, r9
 800bf14:	f7f4 fb70 	bl	80005f8 <__aeabi_dmul>
 800bf18:	4602      	mov	r2, r0
 800bf1a:	460b      	mov	r3, r1
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	4629      	mov	r1, r5
 800bf20:	f7f4 f9b2 	bl	8000288 <__aeabi_dsub>
 800bf24:	4632      	mov	r2, r6
 800bf26:	4604      	mov	r4, r0
 800bf28:	460d      	mov	r5, r1
 800bf2a:	464b      	mov	r3, r9
 800bf2c:	4640      	mov	r0, r8
 800bf2e:	4649      	mov	r1, r9
 800bf30:	f7f4 f9ac 	bl	800028c <__adddf3>
 800bf34:	4602      	mov	r2, r0
 800bf36:	460b      	mov	r3, r1
 800bf38:	4620      	mov	r0, r4
 800bf3a:	4629      	mov	r1, r5
 800bf3c:	f7f4 fc86 	bl	800084c <__aeabi_ddiv>
 800bf40:	4602      	mov	r2, r0
 800bf42:	460b      	mov	r3, r1
 800bf44:	4650      	mov	r0, sl
 800bf46:	4659      	mov	r1, fp
 800bf48:	f7f4 f9a0 	bl	800028c <__adddf3>
 800bf4c:	4632      	mov	r2, r6
 800bf4e:	464b      	mov	r3, r9
 800bf50:	f7f4 f99c 	bl	800028c <__adddf3>
 800bf54:	4602      	mov	r2, r0
 800bf56:	460b      	mov	r3, r1
 800bf58:	f7f4 f998 	bl	800028c <__adddf3>
 800bf5c:	e5fe      	b.n	800bb5c <__ieee754_acos+0x44>
 800bf5e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800bfc0 <__ieee754_acos+0x4a8>
 800bf62:	e5ed      	b.n	800bb40 <__ieee754_acos+0x28>
 800bf64:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800bfc8 <__ieee754_acos+0x4b0>
 800bf68:	e5ea      	b.n	800bb40 <__ieee754_acos+0x28>
 800bf6a:	bf00      	nop
 800bf6c:	f3af 8000 	nop.w
 800bf70:	0dfdf709 	.word	0x0dfdf709
 800bf74:	3f023de1 	.word	0x3f023de1
 800bf78:	7501b288 	.word	0x7501b288
 800bf7c:	3f49efe0 	.word	0x3f49efe0
 800bf80:	b5688f3b 	.word	0xb5688f3b
 800bf84:	3fa48228 	.word	0x3fa48228
 800bf88:	0e884455 	.word	0x0e884455
 800bf8c:	3fc9c155 	.word	0x3fc9c155
 800bf90:	03eb6f7d 	.word	0x03eb6f7d
 800bf94:	3fd4d612 	.word	0x3fd4d612
 800bf98:	55555555 	.word	0x55555555
 800bf9c:	3fc55555 	.word	0x3fc55555
 800bfa0:	b12e9282 	.word	0xb12e9282
 800bfa4:	3fb3b8c5 	.word	0x3fb3b8c5
 800bfa8:	1b8d0159 	.word	0x1b8d0159
 800bfac:	3fe6066c 	.word	0x3fe6066c
 800bfb0:	9c598ac8 	.word	0x9c598ac8
 800bfb4:	40002ae5 	.word	0x40002ae5
 800bfb8:	1c8a2d4b 	.word	0x1c8a2d4b
 800bfbc:	40033a27 	.word	0x40033a27
	...
 800bfc8:	54442d18 	.word	0x54442d18
 800bfcc:	3ff921fb 	.word	0x3ff921fb
 800bfd0:	3ff00000 	.word	0x3ff00000
 800bfd4:	3fe00000 	.word	0x3fe00000

0800bfd8 <__ieee754_pow>:
 800bfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfdc:	ed2d 8b06 	vpush	{d8-d10}
 800bfe0:	b089      	sub	sp, #36	; 0x24
 800bfe2:	ed8d 1b00 	vstr	d1, [sp]
 800bfe6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800bfea:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800bfee:	ea58 0102 	orrs.w	r1, r8, r2
 800bff2:	ec57 6b10 	vmov	r6, r7, d0
 800bff6:	d115      	bne.n	800c024 <__ieee754_pow+0x4c>
 800bff8:	19b3      	adds	r3, r6, r6
 800bffa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800bffe:	4152      	adcs	r2, r2
 800c000:	4299      	cmp	r1, r3
 800c002:	4b89      	ldr	r3, [pc, #548]	; (800c228 <__ieee754_pow+0x250>)
 800c004:	4193      	sbcs	r3, r2
 800c006:	f080 84d2 	bcs.w	800c9ae <__ieee754_pow+0x9d6>
 800c00a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c00e:	4630      	mov	r0, r6
 800c010:	4639      	mov	r1, r7
 800c012:	f7f4 f93b 	bl	800028c <__adddf3>
 800c016:	ec41 0b10 	vmov	d0, r0, r1
 800c01a:	b009      	add	sp, #36	; 0x24
 800c01c:	ecbd 8b06 	vpop	{d8-d10}
 800c020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c024:	4b81      	ldr	r3, [pc, #516]	; (800c22c <__ieee754_pow+0x254>)
 800c026:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c02a:	429c      	cmp	r4, r3
 800c02c:	ee10 aa10 	vmov	sl, s0
 800c030:	463d      	mov	r5, r7
 800c032:	dc06      	bgt.n	800c042 <__ieee754_pow+0x6a>
 800c034:	d101      	bne.n	800c03a <__ieee754_pow+0x62>
 800c036:	2e00      	cmp	r6, #0
 800c038:	d1e7      	bne.n	800c00a <__ieee754_pow+0x32>
 800c03a:	4598      	cmp	r8, r3
 800c03c:	dc01      	bgt.n	800c042 <__ieee754_pow+0x6a>
 800c03e:	d10f      	bne.n	800c060 <__ieee754_pow+0x88>
 800c040:	b172      	cbz	r2, 800c060 <__ieee754_pow+0x88>
 800c042:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c046:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c04a:	ea55 050a 	orrs.w	r5, r5, sl
 800c04e:	d1dc      	bne.n	800c00a <__ieee754_pow+0x32>
 800c050:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c054:	18db      	adds	r3, r3, r3
 800c056:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c05a:	4152      	adcs	r2, r2
 800c05c:	429d      	cmp	r5, r3
 800c05e:	e7d0      	b.n	800c002 <__ieee754_pow+0x2a>
 800c060:	2d00      	cmp	r5, #0
 800c062:	da3b      	bge.n	800c0dc <__ieee754_pow+0x104>
 800c064:	4b72      	ldr	r3, [pc, #456]	; (800c230 <__ieee754_pow+0x258>)
 800c066:	4598      	cmp	r8, r3
 800c068:	dc51      	bgt.n	800c10e <__ieee754_pow+0x136>
 800c06a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c06e:	4598      	cmp	r8, r3
 800c070:	f340 84ac 	ble.w	800c9cc <__ieee754_pow+0x9f4>
 800c074:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c078:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c07c:	2b14      	cmp	r3, #20
 800c07e:	dd0f      	ble.n	800c0a0 <__ieee754_pow+0xc8>
 800c080:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c084:	fa22 f103 	lsr.w	r1, r2, r3
 800c088:	fa01 f303 	lsl.w	r3, r1, r3
 800c08c:	4293      	cmp	r3, r2
 800c08e:	f040 849d 	bne.w	800c9cc <__ieee754_pow+0x9f4>
 800c092:	f001 0101 	and.w	r1, r1, #1
 800c096:	f1c1 0302 	rsb	r3, r1, #2
 800c09a:	9304      	str	r3, [sp, #16]
 800c09c:	b182      	cbz	r2, 800c0c0 <__ieee754_pow+0xe8>
 800c09e:	e05f      	b.n	800c160 <__ieee754_pow+0x188>
 800c0a0:	2a00      	cmp	r2, #0
 800c0a2:	d15b      	bne.n	800c15c <__ieee754_pow+0x184>
 800c0a4:	f1c3 0314 	rsb	r3, r3, #20
 800c0a8:	fa48 f103 	asr.w	r1, r8, r3
 800c0ac:	fa01 f303 	lsl.w	r3, r1, r3
 800c0b0:	4543      	cmp	r3, r8
 800c0b2:	f040 8488 	bne.w	800c9c6 <__ieee754_pow+0x9ee>
 800c0b6:	f001 0101 	and.w	r1, r1, #1
 800c0ba:	f1c1 0302 	rsb	r3, r1, #2
 800c0be:	9304      	str	r3, [sp, #16]
 800c0c0:	4b5c      	ldr	r3, [pc, #368]	; (800c234 <__ieee754_pow+0x25c>)
 800c0c2:	4598      	cmp	r8, r3
 800c0c4:	d132      	bne.n	800c12c <__ieee754_pow+0x154>
 800c0c6:	f1b9 0f00 	cmp.w	r9, #0
 800c0ca:	f280 8478 	bge.w	800c9be <__ieee754_pow+0x9e6>
 800c0ce:	4959      	ldr	r1, [pc, #356]	; (800c234 <__ieee754_pow+0x25c>)
 800c0d0:	4632      	mov	r2, r6
 800c0d2:	463b      	mov	r3, r7
 800c0d4:	2000      	movs	r0, #0
 800c0d6:	f7f4 fbb9 	bl	800084c <__aeabi_ddiv>
 800c0da:	e79c      	b.n	800c016 <__ieee754_pow+0x3e>
 800c0dc:	2300      	movs	r3, #0
 800c0de:	9304      	str	r3, [sp, #16]
 800c0e0:	2a00      	cmp	r2, #0
 800c0e2:	d13d      	bne.n	800c160 <__ieee754_pow+0x188>
 800c0e4:	4b51      	ldr	r3, [pc, #324]	; (800c22c <__ieee754_pow+0x254>)
 800c0e6:	4598      	cmp	r8, r3
 800c0e8:	d1ea      	bne.n	800c0c0 <__ieee754_pow+0xe8>
 800c0ea:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c0ee:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c0f2:	ea53 030a 	orrs.w	r3, r3, sl
 800c0f6:	f000 845a 	beq.w	800c9ae <__ieee754_pow+0x9d6>
 800c0fa:	4b4f      	ldr	r3, [pc, #316]	; (800c238 <__ieee754_pow+0x260>)
 800c0fc:	429c      	cmp	r4, r3
 800c0fe:	dd08      	ble.n	800c112 <__ieee754_pow+0x13a>
 800c100:	f1b9 0f00 	cmp.w	r9, #0
 800c104:	f2c0 8457 	blt.w	800c9b6 <__ieee754_pow+0x9de>
 800c108:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c10c:	e783      	b.n	800c016 <__ieee754_pow+0x3e>
 800c10e:	2302      	movs	r3, #2
 800c110:	e7e5      	b.n	800c0de <__ieee754_pow+0x106>
 800c112:	f1b9 0f00 	cmp.w	r9, #0
 800c116:	f04f 0000 	mov.w	r0, #0
 800c11a:	f04f 0100 	mov.w	r1, #0
 800c11e:	f6bf af7a 	bge.w	800c016 <__ieee754_pow+0x3e>
 800c122:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c126:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c12a:	e774      	b.n	800c016 <__ieee754_pow+0x3e>
 800c12c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c130:	d106      	bne.n	800c140 <__ieee754_pow+0x168>
 800c132:	4632      	mov	r2, r6
 800c134:	463b      	mov	r3, r7
 800c136:	4630      	mov	r0, r6
 800c138:	4639      	mov	r1, r7
 800c13a:	f7f4 fa5d 	bl	80005f8 <__aeabi_dmul>
 800c13e:	e76a      	b.n	800c016 <__ieee754_pow+0x3e>
 800c140:	4b3e      	ldr	r3, [pc, #248]	; (800c23c <__ieee754_pow+0x264>)
 800c142:	4599      	cmp	r9, r3
 800c144:	d10c      	bne.n	800c160 <__ieee754_pow+0x188>
 800c146:	2d00      	cmp	r5, #0
 800c148:	db0a      	blt.n	800c160 <__ieee754_pow+0x188>
 800c14a:	ec47 6b10 	vmov	d0, r6, r7
 800c14e:	b009      	add	sp, #36	; 0x24
 800c150:	ecbd 8b06 	vpop	{d8-d10}
 800c154:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c158:	f000 be7a 	b.w	800ce50 <__ieee754_sqrt>
 800c15c:	2300      	movs	r3, #0
 800c15e:	9304      	str	r3, [sp, #16]
 800c160:	ec47 6b10 	vmov	d0, r6, r7
 800c164:	f7ff fb70 	bl	800b848 <fabs>
 800c168:	ec51 0b10 	vmov	r0, r1, d0
 800c16c:	f1ba 0f00 	cmp.w	sl, #0
 800c170:	d129      	bne.n	800c1c6 <__ieee754_pow+0x1ee>
 800c172:	b124      	cbz	r4, 800c17e <__ieee754_pow+0x1a6>
 800c174:	4b2f      	ldr	r3, [pc, #188]	; (800c234 <__ieee754_pow+0x25c>)
 800c176:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d123      	bne.n	800c1c6 <__ieee754_pow+0x1ee>
 800c17e:	f1b9 0f00 	cmp.w	r9, #0
 800c182:	da05      	bge.n	800c190 <__ieee754_pow+0x1b8>
 800c184:	4602      	mov	r2, r0
 800c186:	460b      	mov	r3, r1
 800c188:	2000      	movs	r0, #0
 800c18a:	492a      	ldr	r1, [pc, #168]	; (800c234 <__ieee754_pow+0x25c>)
 800c18c:	f7f4 fb5e 	bl	800084c <__aeabi_ddiv>
 800c190:	2d00      	cmp	r5, #0
 800c192:	f6bf af40 	bge.w	800c016 <__ieee754_pow+0x3e>
 800c196:	9b04      	ldr	r3, [sp, #16]
 800c198:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c19c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c1a0:	4323      	orrs	r3, r4
 800c1a2:	d108      	bne.n	800c1b6 <__ieee754_pow+0x1de>
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	460b      	mov	r3, r1
 800c1a8:	4610      	mov	r0, r2
 800c1aa:	4619      	mov	r1, r3
 800c1ac:	f7f4 f86c 	bl	8000288 <__aeabi_dsub>
 800c1b0:	4602      	mov	r2, r0
 800c1b2:	460b      	mov	r3, r1
 800c1b4:	e78f      	b.n	800c0d6 <__ieee754_pow+0xfe>
 800c1b6:	9b04      	ldr	r3, [sp, #16]
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	f47f af2c 	bne.w	800c016 <__ieee754_pow+0x3e>
 800c1be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	e727      	b.n	800c016 <__ieee754_pow+0x3e>
 800c1c6:	0feb      	lsrs	r3, r5, #31
 800c1c8:	3b01      	subs	r3, #1
 800c1ca:	9306      	str	r3, [sp, #24]
 800c1cc:	9a06      	ldr	r2, [sp, #24]
 800c1ce:	9b04      	ldr	r3, [sp, #16]
 800c1d0:	4313      	orrs	r3, r2
 800c1d2:	d102      	bne.n	800c1da <__ieee754_pow+0x202>
 800c1d4:	4632      	mov	r2, r6
 800c1d6:	463b      	mov	r3, r7
 800c1d8:	e7e6      	b.n	800c1a8 <__ieee754_pow+0x1d0>
 800c1da:	4b19      	ldr	r3, [pc, #100]	; (800c240 <__ieee754_pow+0x268>)
 800c1dc:	4598      	cmp	r8, r3
 800c1de:	f340 80fb 	ble.w	800c3d8 <__ieee754_pow+0x400>
 800c1e2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c1e6:	4598      	cmp	r8, r3
 800c1e8:	4b13      	ldr	r3, [pc, #76]	; (800c238 <__ieee754_pow+0x260>)
 800c1ea:	dd0c      	ble.n	800c206 <__ieee754_pow+0x22e>
 800c1ec:	429c      	cmp	r4, r3
 800c1ee:	dc0f      	bgt.n	800c210 <__ieee754_pow+0x238>
 800c1f0:	f1b9 0f00 	cmp.w	r9, #0
 800c1f4:	da0f      	bge.n	800c216 <__ieee754_pow+0x23e>
 800c1f6:	2000      	movs	r0, #0
 800c1f8:	b009      	add	sp, #36	; 0x24
 800c1fa:	ecbd 8b06 	vpop	{d8-d10}
 800c1fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c202:	f001 bde2 	b.w	800ddca <__math_oflow>
 800c206:	429c      	cmp	r4, r3
 800c208:	dbf2      	blt.n	800c1f0 <__ieee754_pow+0x218>
 800c20a:	4b0a      	ldr	r3, [pc, #40]	; (800c234 <__ieee754_pow+0x25c>)
 800c20c:	429c      	cmp	r4, r3
 800c20e:	dd19      	ble.n	800c244 <__ieee754_pow+0x26c>
 800c210:	f1b9 0f00 	cmp.w	r9, #0
 800c214:	dcef      	bgt.n	800c1f6 <__ieee754_pow+0x21e>
 800c216:	2000      	movs	r0, #0
 800c218:	b009      	add	sp, #36	; 0x24
 800c21a:	ecbd 8b06 	vpop	{d8-d10}
 800c21e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c222:	f001 bdc9 	b.w	800ddb8 <__math_uflow>
 800c226:	bf00      	nop
 800c228:	fff00000 	.word	0xfff00000
 800c22c:	7ff00000 	.word	0x7ff00000
 800c230:	433fffff 	.word	0x433fffff
 800c234:	3ff00000 	.word	0x3ff00000
 800c238:	3fefffff 	.word	0x3fefffff
 800c23c:	3fe00000 	.word	0x3fe00000
 800c240:	41e00000 	.word	0x41e00000
 800c244:	4b60      	ldr	r3, [pc, #384]	; (800c3c8 <__ieee754_pow+0x3f0>)
 800c246:	2200      	movs	r2, #0
 800c248:	f7f4 f81e 	bl	8000288 <__aeabi_dsub>
 800c24c:	a354      	add	r3, pc, #336	; (adr r3, 800c3a0 <__ieee754_pow+0x3c8>)
 800c24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c252:	4604      	mov	r4, r0
 800c254:	460d      	mov	r5, r1
 800c256:	f7f4 f9cf 	bl	80005f8 <__aeabi_dmul>
 800c25a:	a353      	add	r3, pc, #332	; (adr r3, 800c3a8 <__ieee754_pow+0x3d0>)
 800c25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c260:	4606      	mov	r6, r0
 800c262:	460f      	mov	r7, r1
 800c264:	4620      	mov	r0, r4
 800c266:	4629      	mov	r1, r5
 800c268:	f7f4 f9c6 	bl	80005f8 <__aeabi_dmul>
 800c26c:	4b57      	ldr	r3, [pc, #348]	; (800c3cc <__ieee754_pow+0x3f4>)
 800c26e:	4682      	mov	sl, r0
 800c270:	468b      	mov	fp, r1
 800c272:	2200      	movs	r2, #0
 800c274:	4620      	mov	r0, r4
 800c276:	4629      	mov	r1, r5
 800c278:	f7f4 f9be 	bl	80005f8 <__aeabi_dmul>
 800c27c:	4602      	mov	r2, r0
 800c27e:	460b      	mov	r3, r1
 800c280:	a14b      	add	r1, pc, #300	; (adr r1, 800c3b0 <__ieee754_pow+0x3d8>)
 800c282:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c286:	f7f3 ffff 	bl	8000288 <__aeabi_dsub>
 800c28a:	4622      	mov	r2, r4
 800c28c:	462b      	mov	r3, r5
 800c28e:	f7f4 f9b3 	bl	80005f8 <__aeabi_dmul>
 800c292:	4602      	mov	r2, r0
 800c294:	460b      	mov	r3, r1
 800c296:	2000      	movs	r0, #0
 800c298:	494d      	ldr	r1, [pc, #308]	; (800c3d0 <__ieee754_pow+0x3f8>)
 800c29a:	f7f3 fff5 	bl	8000288 <__aeabi_dsub>
 800c29e:	4622      	mov	r2, r4
 800c2a0:	4680      	mov	r8, r0
 800c2a2:	4689      	mov	r9, r1
 800c2a4:	462b      	mov	r3, r5
 800c2a6:	4620      	mov	r0, r4
 800c2a8:	4629      	mov	r1, r5
 800c2aa:	f7f4 f9a5 	bl	80005f8 <__aeabi_dmul>
 800c2ae:	4602      	mov	r2, r0
 800c2b0:	460b      	mov	r3, r1
 800c2b2:	4640      	mov	r0, r8
 800c2b4:	4649      	mov	r1, r9
 800c2b6:	f7f4 f99f 	bl	80005f8 <__aeabi_dmul>
 800c2ba:	a33f      	add	r3, pc, #252	; (adr r3, 800c3b8 <__ieee754_pow+0x3e0>)
 800c2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c0:	f7f4 f99a 	bl	80005f8 <__aeabi_dmul>
 800c2c4:	4602      	mov	r2, r0
 800c2c6:	460b      	mov	r3, r1
 800c2c8:	4650      	mov	r0, sl
 800c2ca:	4659      	mov	r1, fp
 800c2cc:	f7f3 ffdc 	bl	8000288 <__aeabi_dsub>
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	460b      	mov	r3, r1
 800c2d4:	4680      	mov	r8, r0
 800c2d6:	4689      	mov	r9, r1
 800c2d8:	4630      	mov	r0, r6
 800c2da:	4639      	mov	r1, r7
 800c2dc:	f7f3 ffd6 	bl	800028c <__adddf3>
 800c2e0:	2000      	movs	r0, #0
 800c2e2:	4632      	mov	r2, r6
 800c2e4:	463b      	mov	r3, r7
 800c2e6:	4604      	mov	r4, r0
 800c2e8:	460d      	mov	r5, r1
 800c2ea:	f7f3 ffcd 	bl	8000288 <__aeabi_dsub>
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	4640      	mov	r0, r8
 800c2f4:	4649      	mov	r1, r9
 800c2f6:	f7f3 ffc7 	bl	8000288 <__aeabi_dsub>
 800c2fa:	9b04      	ldr	r3, [sp, #16]
 800c2fc:	9a06      	ldr	r2, [sp, #24]
 800c2fe:	3b01      	subs	r3, #1
 800c300:	4313      	orrs	r3, r2
 800c302:	4682      	mov	sl, r0
 800c304:	468b      	mov	fp, r1
 800c306:	f040 81e7 	bne.w	800c6d8 <__ieee754_pow+0x700>
 800c30a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c3c0 <__ieee754_pow+0x3e8>
 800c30e:	eeb0 8a47 	vmov.f32	s16, s14
 800c312:	eef0 8a67 	vmov.f32	s17, s15
 800c316:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c31a:	2600      	movs	r6, #0
 800c31c:	4632      	mov	r2, r6
 800c31e:	463b      	mov	r3, r7
 800c320:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c324:	f7f3 ffb0 	bl	8000288 <__aeabi_dsub>
 800c328:	4622      	mov	r2, r4
 800c32a:	462b      	mov	r3, r5
 800c32c:	f7f4 f964 	bl	80005f8 <__aeabi_dmul>
 800c330:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c334:	4680      	mov	r8, r0
 800c336:	4689      	mov	r9, r1
 800c338:	4650      	mov	r0, sl
 800c33a:	4659      	mov	r1, fp
 800c33c:	f7f4 f95c 	bl	80005f8 <__aeabi_dmul>
 800c340:	4602      	mov	r2, r0
 800c342:	460b      	mov	r3, r1
 800c344:	4640      	mov	r0, r8
 800c346:	4649      	mov	r1, r9
 800c348:	f7f3 ffa0 	bl	800028c <__adddf3>
 800c34c:	4632      	mov	r2, r6
 800c34e:	463b      	mov	r3, r7
 800c350:	4680      	mov	r8, r0
 800c352:	4689      	mov	r9, r1
 800c354:	4620      	mov	r0, r4
 800c356:	4629      	mov	r1, r5
 800c358:	f7f4 f94e 	bl	80005f8 <__aeabi_dmul>
 800c35c:	460b      	mov	r3, r1
 800c35e:	4604      	mov	r4, r0
 800c360:	460d      	mov	r5, r1
 800c362:	4602      	mov	r2, r0
 800c364:	4649      	mov	r1, r9
 800c366:	4640      	mov	r0, r8
 800c368:	f7f3 ff90 	bl	800028c <__adddf3>
 800c36c:	4b19      	ldr	r3, [pc, #100]	; (800c3d4 <__ieee754_pow+0x3fc>)
 800c36e:	4299      	cmp	r1, r3
 800c370:	ec45 4b19 	vmov	d9, r4, r5
 800c374:	4606      	mov	r6, r0
 800c376:	460f      	mov	r7, r1
 800c378:	468b      	mov	fp, r1
 800c37a:	f340 82f1 	ble.w	800c960 <__ieee754_pow+0x988>
 800c37e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c382:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c386:	4303      	orrs	r3, r0
 800c388:	f000 81e4 	beq.w	800c754 <__ieee754_pow+0x77c>
 800c38c:	ec51 0b18 	vmov	r0, r1, d8
 800c390:	2200      	movs	r2, #0
 800c392:	2300      	movs	r3, #0
 800c394:	f7f4 fba2 	bl	8000adc <__aeabi_dcmplt>
 800c398:	3800      	subs	r0, #0
 800c39a:	bf18      	it	ne
 800c39c:	2001      	movne	r0, #1
 800c39e:	e72b      	b.n	800c1f8 <__ieee754_pow+0x220>
 800c3a0:	60000000 	.word	0x60000000
 800c3a4:	3ff71547 	.word	0x3ff71547
 800c3a8:	f85ddf44 	.word	0xf85ddf44
 800c3ac:	3e54ae0b 	.word	0x3e54ae0b
 800c3b0:	55555555 	.word	0x55555555
 800c3b4:	3fd55555 	.word	0x3fd55555
 800c3b8:	652b82fe 	.word	0x652b82fe
 800c3bc:	3ff71547 	.word	0x3ff71547
 800c3c0:	00000000 	.word	0x00000000
 800c3c4:	bff00000 	.word	0xbff00000
 800c3c8:	3ff00000 	.word	0x3ff00000
 800c3cc:	3fd00000 	.word	0x3fd00000
 800c3d0:	3fe00000 	.word	0x3fe00000
 800c3d4:	408fffff 	.word	0x408fffff
 800c3d8:	4bd5      	ldr	r3, [pc, #852]	; (800c730 <__ieee754_pow+0x758>)
 800c3da:	402b      	ands	r3, r5
 800c3dc:	2200      	movs	r2, #0
 800c3de:	b92b      	cbnz	r3, 800c3ec <__ieee754_pow+0x414>
 800c3e0:	4bd4      	ldr	r3, [pc, #848]	; (800c734 <__ieee754_pow+0x75c>)
 800c3e2:	f7f4 f909 	bl	80005f8 <__aeabi_dmul>
 800c3e6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c3ea:	460c      	mov	r4, r1
 800c3ec:	1523      	asrs	r3, r4, #20
 800c3ee:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c3f2:	4413      	add	r3, r2
 800c3f4:	9305      	str	r3, [sp, #20]
 800c3f6:	4bd0      	ldr	r3, [pc, #832]	; (800c738 <__ieee754_pow+0x760>)
 800c3f8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c3fc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c400:	429c      	cmp	r4, r3
 800c402:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c406:	dd08      	ble.n	800c41a <__ieee754_pow+0x442>
 800c408:	4bcc      	ldr	r3, [pc, #816]	; (800c73c <__ieee754_pow+0x764>)
 800c40a:	429c      	cmp	r4, r3
 800c40c:	f340 8162 	ble.w	800c6d4 <__ieee754_pow+0x6fc>
 800c410:	9b05      	ldr	r3, [sp, #20]
 800c412:	3301      	adds	r3, #1
 800c414:	9305      	str	r3, [sp, #20]
 800c416:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c41a:	2400      	movs	r4, #0
 800c41c:	00e3      	lsls	r3, r4, #3
 800c41e:	9307      	str	r3, [sp, #28]
 800c420:	4bc7      	ldr	r3, [pc, #796]	; (800c740 <__ieee754_pow+0x768>)
 800c422:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c426:	ed93 7b00 	vldr	d7, [r3]
 800c42a:	4629      	mov	r1, r5
 800c42c:	ec53 2b17 	vmov	r2, r3, d7
 800c430:	eeb0 9a47 	vmov.f32	s18, s14
 800c434:	eef0 9a67 	vmov.f32	s19, s15
 800c438:	4682      	mov	sl, r0
 800c43a:	f7f3 ff25 	bl	8000288 <__aeabi_dsub>
 800c43e:	4652      	mov	r2, sl
 800c440:	4606      	mov	r6, r0
 800c442:	460f      	mov	r7, r1
 800c444:	462b      	mov	r3, r5
 800c446:	ec51 0b19 	vmov	r0, r1, d9
 800c44a:	f7f3 ff1f 	bl	800028c <__adddf3>
 800c44e:	4602      	mov	r2, r0
 800c450:	460b      	mov	r3, r1
 800c452:	2000      	movs	r0, #0
 800c454:	49bb      	ldr	r1, [pc, #748]	; (800c744 <__ieee754_pow+0x76c>)
 800c456:	f7f4 f9f9 	bl	800084c <__aeabi_ddiv>
 800c45a:	ec41 0b1a 	vmov	d10, r0, r1
 800c45e:	4602      	mov	r2, r0
 800c460:	460b      	mov	r3, r1
 800c462:	4630      	mov	r0, r6
 800c464:	4639      	mov	r1, r7
 800c466:	f7f4 f8c7 	bl	80005f8 <__aeabi_dmul>
 800c46a:	2300      	movs	r3, #0
 800c46c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c470:	9302      	str	r3, [sp, #8]
 800c472:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c476:	46ab      	mov	fp, r5
 800c478:	106d      	asrs	r5, r5, #1
 800c47a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c47e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c482:	ec41 0b18 	vmov	d8, r0, r1
 800c486:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c48a:	2200      	movs	r2, #0
 800c48c:	4640      	mov	r0, r8
 800c48e:	4649      	mov	r1, r9
 800c490:	4614      	mov	r4, r2
 800c492:	461d      	mov	r5, r3
 800c494:	f7f4 f8b0 	bl	80005f8 <__aeabi_dmul>
 800c498:	4602      	mov	r2, r0
 800c49a:	460b      	mov	r3, r1
 800c49c:	4630      	mov	r0, r6
 800c49e:	4639      	mov	r1, r7
 800c4a0:	f7f3 fef2 	bl	8000288 <__aeabi_dsub>
 800c4a4:	ec53 2b19 	vmov	r2, r3, d9
 800c4a8:	4606      	mov	r6, r0
 800c4aa:	460f      	mov	r7, r1
 800c4ac:	4620      	mov	r0, r4
 800c4ae:	4629      	mov	r1, r5
 800c4b0:	f7f3 feea 	bl	8000288 <__aeabi_dsub>
 800c4b4:	4602      	mov	r2, r0
 800c4b6:	460b      	mov	r3, r1
 800c4b8:	4650      	mov	r0, sl
 800c4ba:	4659      	mov	r1, fp
 800c4bc:	f7f3 fee4 	bl	8000288 <__aeabi_dsub>
 800c4c0:	4642      	mov	r2, r8
 800c4c2:	464b      	mov	r3, r9
 800c4c4:	f7f4 f898 	bl	80005f8 <__aeabi_dmul>
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	460b      	mov	r3, r1
 800c4cc:	4630      	mov	r0, r6
 800c4ce:	4639      	mov	r1, r7
 800c4d0:	f7f3 feda 	bl	8000288 <__aeabi_dsub>
 800c4d4:	ec53 2b1a 	vmov	r2, r3, d10
 800c4d8:	f7f4 f88e 	bl	80005f8 <__aeabi_dmul>
 800c4dc:	ec53 2b18 	vmov	r2, r3, d8
 800c4e0:	ec41 0b19 	vmov	d9, r0, r1
 800c4e4:	ec51 0b18 	vmov	r0, r1, d8
 800c4e8:	f7f4 f886 	bl	80005f8 <__aeabi_dmul>
 800c4ec:	a37c      	add	r3, pc, #496	; (adr r3, 800c6e0 <__ieee754_pow+0x708>)
 800c4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f2:	4604      	mov	r4, r0
 800c4f4:	460d      	mov	r5, r1
 800c4f6:	f7f4 f87f 	bl	80005f8 <__aeabi_dmul>
 800c4fa:	a37b      	add	r3, pc, #492	; (adr r3, 800c6e8 <__ieee754_pow+0x710>)
 800c4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c500:	f7f3 fec4 	bl	800028c <__adddf3>
 800c504:	4622      	mov	r2, r4
 800c506:	462b      	mov	r3, r5
 800c508:	f7f4 f876 	bl	80005f8 <__aeabi_dmul>
 800c50c:	a378      	add	r3, pc, #480	; (adr r3, 800c6f0 <__ieee754_pow+0x718>)
 800c50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c512:	f7f3 febb 	bl	800028c <__adddf3>
 800c516:	4622      	mov	r2, r4
 800c518:	462b      	mov	r3, r5
 800c51a:	f7f4 f86d 	bl	80005f8 <__aeabi_dmul>
 800c51e:	a376      	add	r3, pc, #472	; (adr r3, 800c6f8 <__ieee754_pow+0x720>)
 800c520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c524:	f7f3 feb2 	bl	800028c <__adddf3>
 800c528:	4622      	mov	r2, r4
 800c52a:	462b      	mov	r3, r5
 800c52c:	f7f4 f864 	bl	80005f8 <__aeabi_dmul>
 800c530:	a373      	add	r3, pc, #460	; (adr r3, 800c700 <__ieee754_pow+0x728>)
 800c532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c536:	f7f3 fea9 	bl	800028c <__adddf3>
 800c53a:	4622      	mov	r2, r4
 800c53c:	462b      	mov	r3, r5
 800c53e:	f7f4 f85b 	bl	80005f8 <__aeabi_dmul>
 800c542:	a371      	add	r3, pc, #452	; (adr r3, 800c708 <__ieee754_pow+0x730>)
 800c544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c548:	f7f3 fea0 	bl	800028c <__adddf3>
 800c54c:	4622      	mov	r2, r4
 800c54e:	4606      	mov	r6, r0
 800c550:	460f      	mov	r7, r1
 800c552:	462b      	mov	r3, r5
 800c554:	4620      	mov	r0, r4
 800c556:	4629      	mov	r1, r5
 800c558:	f7f4 f84e 	bl	80005f8 <__aeabi_dmul>
 800c55c:	4602      	mov	r2, r0
 800c55e:	460b      	mov	r3, r1
 800c560:	4630      	mov	r0, r6
 800c562:	4639      	mov	r1, r7
 800c564:	f7f4 f848 	bl	80005f8 <__aeabi_dmul>
 800c568:	4642      	mov	r2, r8
 800c56a:	4604      	mov	r4, r0
 800c56c:	460d      	mov	r5, r1
 800c56e:	464b      	mov	r3, r9
 800c570:	ec51 0b18 	vmov	r0, r1, d8
 800c574:	f7f3 fe8a 	bl	800028c <__adddf3>
 800c578:	ec53 2b19 	vmov	r2, r3, d9
 800c57c:	f7f4 f83c 	bl	80005f8 <__aeabi_dmul>
 800c580:	4622      	mov	r2, r4
 800c582:	462b      	mov	r3, r5
 800c584:	f7f3 fe82 	bl	800028c <__adddf3>
 800c588:	4642      	mov	r2, r8
 800c58a:	4682      	mov	sl, r0
 800c58c:	468b      	mov	fp, r1
 800c58e:	464b      	mov	r3, r9
 800c590:	4640      	mov	r0, r8
 800c592:	4649      	mov	r1, r9
 800c594:	f7f4 f830 	bl	80005f8 <__aeabi_dmul>
 800c598:	4b6b      	ldr	r3, [pc, #428]	; (800c748 <__ieee754_pow+0x770>)
 800c59a:	2200      	movs	r2, #0
 800c59c:	4606      	mov	r6, r0
 800c59e:	460f      	mov	r7, r1
 800c5a0:	f7f3 fe74 	bl	800028c <__adddf3>
 800c5a4:	4652      	mov	r2, sl
 800c5a6:	465b      	mov	r3, fp
 800c5a8:	f7f3 fe70 	bl	800028c <__adddf3>
 800c5ac:	2000      	movs	r0, #0
 800c5ae:	4604      	mov	r4, r0
 800c5b0:	460d      	mov	r5, r1
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	4640      	mov	r0, r8
 800c5b8:	4649      	mov	r1, r9
 800c5ba:	f7f4 f81d 	bl	80005f8 <__aeabi_dmul>
 800c5be:	4b62      	ldr	r3, [pc, #392]	; (800c748 <__ieee754_pow+0x770>)
 800c5c0:	4680      	mov	r8, r0
 800c5c2:	4689      	mov	r9, r1
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	4629      	mov	r1, r5
 800c5ca:	f7f3 fe5d 	bl	8000288 <__aeabi_dsub>
 800c5ce:	4632      	mov	r2, r6
 800c5d0:	463b      	mov	r3, r7
 800c5d2:	f7f3 fe59 	bl	8000288 <__aeabi_dsub>
 800c5d6:	4602      	mov	r2, r0
 800c5d8:	460b      	mov	r3, r1
 800c5da:	4650      	mov	r0, sl
 800c5dc:	4659      	mov	r1, fp
 800c5de:	f7f3 fe53 	bl	8000288 <__aeabi_dsub>
 800c5e2:	ec53 2b18 	vmov	r2, r3, d8
 800c5e6:	f7f4 f807 	bl	80005f8 <__aeabi_dmul>
 800c5ea:	4622      	mov	r2, r4
 800c5ec:	4606      	mov	r6, r0
 800c5ee:	460f      	mov	r7, r1
 800c5f0:	462b      	mov	r3, r5
 800c5f2:	ec51 0b19 	vmov	r0, r1, d9
 800c5f6:	f7f3 ffff 	bl	80005f8 <__aeabi_dmul>
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	4630      	mov	r0, r6
 800c600:	4639      	mov	r1, r7
 800c602:	f7f3 fe43 	bl	800028c <__adddf3>
 800c606:	4606      	mov	r6, r0
 800c608:	460f      	mov	r7, r1
 800c60a:	4602      	mov	r2, r0
 800c60c:	460b      	mov	r3, r1
 800c60e:	4640      	mov	r0, r8
 800c610:	4649      	mov	r1, r9
 800c612:	f7f3 fe3b 	bl	800028c <__adddf3>
 800c616:	a33e      	add	r3, pc, #248	; (adr r3, 800c710 <__ieee754_pow+0x738>)
 800c618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c61c:	2000      	movs	r0, #0
 800c61e:	4604      	mov	r4, r0
 800c620:	460d      	mov	r5, r1
 800c622:	f7f3 ffe9 	bl	80005f8 <__aeabi_dmul>
 800c626:	4642      	mov	r2, r8
 800c628:	ec41 0b18 	vmov	d8, r0, r1
 800c62c:	464b      	mov	r3, r9
 800c62e:	4620      	mov	r0, r4
 800c630:	4629      	mov	r1, r5
 800c632:	f7f3 fe29 	bl	8000288 <__aeabi_dsub>
 800c636:	4602      	mov	r2, r0
 800c638:	460b      	mov	r3, r1
 800c63a:	4630      	mov	r0, r6
 800c63c:	4639      	mov	r1, r7
 800c63e:	f7f3 fe23 	bl	8000288 <__aeabi_dsub>
 800c642:	a335      	add	r3, pc, #212	; (adr r3, 800c718 <__ieee754_pow+0x740>)
 800c644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c648:	f7f3 ffd6 	bl	80005f8 <__aeabi_dmul>
 800c64c:	a334      	add	r3, pc, #208	; (adr r3, 800c720 <__ieee754_pow+0x748>)
 800c64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c652:	4606      	mov	r6, r0
 800c654:	460f      	mov	r7, r1
 800c656:	4620      	mov	r0, r4
 800c658:	4629      	mov	r1, r5
 800c65a:	f7f3 ffcd 	bl	80005f8 <__aeabi_dmul>
 800c65e:	4602      	mov	r2, r0
 800c660:	460b      	mov	r3, r1
 800c662:	4630      	mov	r0, r6
 800c664:	4639      	mov	r1, r7
 800c666:	f7f3 fe11 	bl	800028c <__adddf3>
 800c66a:	9a07      	ldr	r2, [sp, #28]
 800c66c:	4b37      	ldr	r3, [pc, #220]	; (800c74c <__ieee754_pow+0x774>)
 800c66e:	4413      	add	r3, r2
 800c670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c674:	f7f3 fe0a 	bl	800028c <__adddf3>
 800c678:	4682      	mov	sl, r0
 800c67a:	9805      	ldr	r0, [sp, #20]
 800c67c:	468b      	mov	fp, r1
 800c67e:	f7f3 ff51 	bl	8000524 <__aeabi_i2d>
 800c682:	9a07      	ldr	r2, [sp, #28]
 800c684:	4b32      	ldr	r3, [pc, #200]	; (800c750 <__ieee754_pow+0x778>)
 800c686:	4413      	add	r3, r2
 800c688:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c68c:	4606      	mov	r6, r0
 800c68e:	460f      	mov	r7, r1
 800c690:	4652      	mov	r2, sl
 800c692:	465b      	mov	r3, fp
 800c694:	ec51 0b18 	vmov	r0, r1, d8
 800c698:	f7f3 fdf8 	bl	800028c <__adddf3>
 800c69c:	4642      	mov	r2, r8
 800c69e:	464b      	mov	r3, r9
 800c6a0:	f7f3 fdf4 	bl	800028c <__adddf3>
 800c6a4:	4632      	mov	r2, r6
 800c6a6:	463b      	mov	r3, r7
 800c6a8:	f7f3 fdf0 	bl	800028c <__adddf3>
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	4632      	mov	r2, r6
 800c6b0:	463b      	mov	r3, r7
 800c6b2:	4604      	mov	r4, r0
 800c6b4:	460d      	mov	r5, r1
 800c6b6:	f7f3 fde7 	bl	8000288 <__aeabi_dsub>
 800c6ba:	4642      	mov	r2, r8
 800c6bc:	464b      	mov	r3, r9
 800c6be:	f7f3 fde3 	bl	8000288 <__aeabi_dsub>
 800c6c2:	ec53 2b18 	vmov	r2, r3, d8
 800c6c6:	f7f3 fddf 	bl	8000288 <__aeabi_dsub>
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	460b      	mov	r3, r1
 800c6ce:	4650      	mov	r0, sl
 800c6d0:	4659      	mov	r1, fp
 800c6d2:	e610      	b.n	800c2f6 <__ieee754_pow+0x31e>
 800c6d4:	2401      	movs	r4, #1
 800c6d6:	e6a1      	b.n	800c41c <__ieee754_pow+0x444>
 800c6d8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c728 <__ieee754_pow+0x750>
 800c6dc:	e617      	b.n	800c30e <__ieee754_pow+0x336>
 800c6de:	bf00      	nop
 800c6e0:	4a454eef 	.word	0x4a454eef
 800c6e4:	3fca7e28 	.word	0x3fca7e28
 800c6e8:	93c9db65 	.word	0x93c9db65
 800c6ec:	3fcd864a 	.word	0x3fcd864a
 800c6f0:	a91d4101 	.word	0xa91d4101
 800c6f4:	3fd17460 	.word	0x3fd17460
 800c6f8:	518f264d 	.word	0x518f264d
 800c6fc:	3fd55555 	.word	0x3fd55555
 800c700:	db6fabff 	.word	0xdb6fabff
 800c704:	3fdb6db6 	.word	0x3fdb6db6
 800c708:	33333303 	.word	0x33333303
 800c70c:	3fe33333 	.word	0x3fe33333
 800c710:	e0000000 	.word	0xe0000000
 800c714:	3feec709 	.word	0x3feec709
 800c718:	dc3a03fd 	.word	0xdc3a03fd
 800c71c:	3feec709 	.word	0x3feec709
 800c720:	145b01f5 	.word	0x145b01f5
 800c724:	be3e2fe0 	.word	0xbe3e2fe0
 800c728:	00000000 	.word	0x00000000
 800c72c:	3ff00000 	.word	0x3ff00000
 800c730:	7ff00000 	.word	0x7ff00000
 800c734:	43400000 	.word	0x43400000
 800c738:	0003988e 	.word	0x0003988e
 800c73c:	000bb679 	.word	0x000bb679
 800c740:	0800e4c0 	.word	0x0800e4c0
 800c744:	3ff00000 	.word	0x3ff00000
 800c748:	40080000 	.word	0x40080000
 800c74c:	0800e4e0 	.word	0x0800e4e0
 800c750:	0800e4d0 	.word	0x0800e4d0
 800c754:	a3b5      	add	r3, pc, #724	; (adr r3, 800ca2c <__ieee754_pow+0xa54>)
 800c756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75a:	4640      	mov	r0, r8
 800c75c:	4649      	mov	r1, r9
 800c75e:	f7f3 fd95 	bl	800028c <__adddf3>
 800c762:	4622      	mov	r2, r4
 800c764:	ec41 0b1a 	vmov	d10, r0, r1
 800c768:	462b      	mov	r3, r5
 800c76a:	4630      	mov	r0, r6
 800c76c:	4639      	mov	r1, r7
 800c76e:	f7f3 fd8b 	bl	8000288 <__aeabi_dsub>
 800c772:	4602      	mov	r2, r0
 800c774:	460b      	mov	r3, r1
 800c776:	ec51 0b1a 	vmov	r0, r1, d10
 800c77a:	f7f4 f9cd 	bl	8000b18 <__aeabi_dcmpgt>
 800c77e:	2800      	cmp	r0, #0
 800c780:	f47f ae04 	bne.w	800c38c <__ieee754_pow+0x3b4>
 800c784:	4aa4      	ldr	r2, [pc, #656]	; (800ca18 <__ieee754_pow+0xa40>)
 800c786:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c78a:	4293      	cmp	r3, r2
 800c78c:	f340 8108 	ble.w	800c9a0 <__ieee754_pow+0x9c8>
 800c790:	151b      	asrs	r3, r3, #20
 800c792:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c796:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c79a:	fa4a f303 	asr.w	r3, sl, r3
 800c79e:	445b      	add	r3, fp
 800c7a0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c7a4:	4e9d      	ldr	r6, [pc, #628]	; (800ca1c <__ieee754_pow+0xa44>)
 800c7a6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c7aa:	4116      	asrs	r6, r2
 800c7ac:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c7b0:	2000      	movs	r0, #0
 800c7b2:	ea23 0106 	bic.w	r1, r3, r6
 800c7b6:	f1c2 0214 	rsb	r2, r2, #20
 800c7ba:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c7be:	fa4a fa02 	asr.w	sl, sl, r2
 800c7c2:	f1bb 0f00 	cmp.w	fp, #0
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	4629      	mov	r1, r5
 800c7ce:	bfb8      	it	lt
 800c7d0:	f1ca 0a00 	rsblt	sl, sl, #0
 800c7d4:	f7f3 fd58 	bl	8000288 <__aeabi_dsub>
 800c7d8:	ec41 0b19 	vmov	d9, r0, r1
 800c7dc:	4642      	mov	r2, r8
 800c7de:	464b      	mov	r3, r9
 800c7e0:	ec51 0b19 	vmov	r0, r1, d9
 800c7e4:	f7f3 fd52 	bl	800028c <__adddf3>
 800c7e8:	a37b      	add	r3, pc, #492	; (adr r3, 800c9d8 <__ieee754_pow+0xa00>)
 800c7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ee:	2000      	movs	r0, #0
 800c7f0:	4604      	mov	r4, r0
 800c7f2:	460d      	mov	r5, r1
 800c7f4:	f7f3 ff00 	bl	80005f8 <__aeabi_dmul>
 800c7f8:	ec53 2b19 	vmov	r2, r3, d9
 800c7fc:	4606      	mov	r6, r0
 800c7fe:	460f      	mov	r7, r1
 800c800:	4620      	mov	r0, r4
 800c802:	4629      	mov	r1, r5
 800c804:	f7f3 fd40 	bl	8000288 <__aeabi_dsub>
 800c808:	4602      	mov	r2, r0
 800c80a:	460b      	mov	r3, r1
 800c80c:	4640      	mov	r0, r8
 800c80e:	4649      	mov	r1, r9
 800c810:	f7f3 fd3a 	bl	8000288 <__aeabi_dsub>
 800c814:	a372      	add	r3, pc, #456	; (adr r3, 800c9e0 <__ieee754_pow+0xa08>)
 800c816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81a:	f7f3 feed 	bl	80005f8 <__aeabi_dmul>
 800c81e:	a372      	add	r3, pc, #456	; (adr r3, 800c9e8 <__ieee754_pow+0xa10>)
 800c820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c824:	4680      	mov	r8, r0
 800c826:	4689      	mov	r9, r1
 800c828:	4620      	mov	r0, r4
 800c82a:	4629      	mov	r1, r5
 800c82c:	f7f3 fee4 	bl	80005f8 <__aeabi_dmul>
 800c830:	4602      	mov	r2, r0
 800c832:	460b      	mov	r3, r1
 800c834:	4640      	mov	r0, r8
 800c836:	4649      	mov	r1, r9
 800c838:	f7f3 fd28 	bl	800028c <__adddf3>
 800c83c:	4604      	mov	r4, r0
 800c83e:	460d      	mov	r5, r1
 800c840:	4602      	mov	r2, r0
 800c842:	460b      	mov	r3, r1
 800c844:	4630      	mov	r0, r6
 800c846:	4639      	mov	r1, r7
 800c848:	f7f3 fd20 	bl	800028c <__adddf3>
 800c84c:	4632      	mov	r2, r6
 800c84e:	463b      	mov	r3, r7
 800c850:	4680      	mov	r8, r0
 800c852:	4689      	mov	r9, r1
 800c854:	f7f3 fd18 	bl	8000288 <__aeabi_dsub>
 800c858:	4602      	mov	r2, r0
 800c85a:	460b      	mov	r3, r1
 800c85c:	4620      	mov	r0, r4
 800c85e:	4629      	mov	r1, r5
 800c860:	f7f3 fd12 	bl	8000288 <__aeabi_dsub>
 800c864:	4642      	mov	r2, r8
 800c866:	4606      	mov	r6, r0
 800c868:	460f      	mov	r7, r1
 800c86a:	464b      	mov	r3, r9
 800c86c:	4640      	mov	r0, r8
 800c86e:	4649      	mov	r1, r9
 800c870:	f7f3 fec2 	bl	80005f8 <__aeabi_dmul>
 800c874:	a35e      	add	r3, pc, #376	; (adr r3, 800c9f0 <__ieee754_pow+0xa18>)
 800c876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87a:	4604      	mov	r4, r0
 800c87c:	460d      	mov	r5, r1
 800c87e:	f7f3 febb 	bl	80005f8 <__aeabi_dmul>
 800c882:	a35d      	add	r3, pc, #372	; (adr r3, 800c9f8 <__ieee754_pow+0xa20>)
 800c884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c888:	f7f3 fcfe 	bl	8000288 <__aeabi_dsub>
 800c88c:	4622      	mov	r2, r4
 800c88e:	462b      	mov	r3, r5
 800c890:	f7f3 feb2 	bl	80005f8 <__aeabi_dmul>
 800c894:	a35a      	add	r3, pc, #360	; (adr r3, 800ca00 <__ieee754_pow+0xa28>)
 800c896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89a:	f7f3 fcf7 	bl	800028c <__adddf3>
 800c89e:	4622      	mov	r2, r4
 800c8a0:	462b      	mov	r3, r5
 800c8a2:	f7f3 fea9 	bl	80005f8 <__aeabi_dmul>
 800c8a6:	a358      	add	r3, pc, #352	; (adr r3, 800ca08 <__ieee754_pow+0xa30>)
 800c8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ac:	f7f3 fcec 	bl	8000288 <__aeabi_dsub>
 800c8b0:	4622      	mov	r2, r4
 800c8b2:	462b      	mov	r3, r5
 800c8b4:	f7f3 fea0 	bl	80005f8 <__aeabi_dmul>
 800c8b8:	a355      	add	r3, pc, #340	; (adr r3, 800ca10 <__ieee754_pow+0xa38>)
 800c8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8be:	f7f3 fce5 	bl	800028c <__adddf3>
 800c8c2:	4622      	mov	r2, r4
 800c8c4:	462b      	mov	r3, r5
 800c8c6:	f7f3 fe97 	bl	80005f8 <__aeabi_dmul>
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	4640      	mov	r0, r8
 800c8d0:	4649      	mov	r1, r9
 800c8d2:	f7f3 fcd9 	bl	8000288 <__aeabi_dsub>
 800c8d6:	4604      	mov	r4, r0
 800c8d8:	460d      	mov	r5, r1
 800c8da:	4602      	mov	r2, r0
 800c8dc:	460b      	mov	r3, r1
 800c8de:	4640      	mov	r0, r8
 800c8e0:	4649      	mov	r1, r9
 800c8e2:	f7f3 fe89 	bl	80005f8 <__aeabi_dmul>
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	ec41 0b19 	vmov	d9, r0, r1
 800c8ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	4629      	mov	r1, r5
 800c8f4:	f7f3 fcc8 	bl	8000288 <__aeabi_dsub>
 800c8f8:	4602      	mov	r2, r0
 800c8fa:	460b      	mov	r3, r1
 800c8fc:	ec51 0b19 	vmov	r0, r1, d9
 800c900:	f7f3 ffa4 	bl	800084c <__aeabi_ddiv>
 800c904:	4632      	mov	r2, r6
 800c906:	4604      	mov	r4, r0
 800c908:	460d      	mov	r5, r1
 800c90a:	463b      	mov	r3, r7
 800c90c:	4640      	mov	r0, r8
 800c90e:	4649      	mov	r1, r9
 800c910:	f7f3 fe72 	bl	80005f8 <__aeabi_dmul>
 800c914:	4632      	mov	r2, r6
 800c916:	463b      	mov	r3, r7
 800c918:	f7f3 fcb8 	bl	800028c <__adddf3>
 800c91c:	4602      	mov	r2, r0
 800c91e:	460b      	mov	r3, r1
 800c920:	4620      	mov	r0, r4
 800c922:	4629      	mov	r1, r5
 800c924:	f7f3 fcb0 	bl	8000288 <__aeabi_dsub>
 800c928:	4642      	mov	r2, r8
 800c92a:	464b      	mov	r3, r9
 800c92c:	f7f3 fcac 	bl	8000288 <__aeabi_dsub>
 800c930:	460b      	mov	r3, r1
 800c932:	4602      	mov	r2, r0
 800c934:	493a      	ldr	r1, [pc, #232]	; (800ca20 <__ieee754_pow+0xa48>)
 800c936:	2000      	movs	r0, #0
 800c938:	f7f3 fca6 	bl	8000288 <__aeabi_dsub>
 800c93c:	ec41 0b10 	vmov	d0, r0, r1
 800c940:	ee10 3a90 	vmov	r3, s1
 800c944:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c948:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c94c:	da2b      	bge.n	800c9a6 <__ieee754_pow+0x9ce>
 800c94e:	4650      	mov	r0, sl
 800c950:	f001 fada 	bl	800df08 <scalbn>
 800c954:	ec51 0b10 	vmov	r0, r1, d0
 800c958:	ec53 2b18 	vmov	r2, r3, d8
 800c95c:	f7ff bbed 	b.w	800c13a <__ieee754_pow+0x162>
 800c960:	4b30      	ldr	r3, [pc, #192]	; (800ca24 <__ieee754_pow+0xa4c>)
 800c962:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c966:	429e      	cmp	r6, r3
 800c968:	f77f af0c 	ble.w	800c784 <__ieee754_pow+0x7ac>
 800c96c:	4b2e      	ldr	r3, [pc, #184]	; (800ca28 <__ieee754_pow+0xa50>)
 800c96e:	440b      	add	r3, r1
 800c970:	4303      	orrs	r3, r0
 800c972:	d009      	beq.n	800c988 <__ieee754_pow+0x9b0>
 800c974:	ec51 0b18 	vmov	r0, r1, d8
 800c978:	2200      	movs	r2, #0
 800c97a:	2300      	movs	r3, #0
 800c97c:	f7f4 f8ae 	bl	8000adc <__aeabi_dcmplt>
 800c980:	3800      	subs	r0, #0
 800c982:	bf18      	it	ne
 800c984:	2001      	movne	r0, #1
 800c986:	e447      	b.n	800c218 <__ieee754_pow+0x240>
 800c988:	4622      	mov	r2, r4
 800c98a:	462b      	mov	r3, r5
 800c98c:	f7f3 fc7c 	bl	8000288 <__aeabi_dsub>
 800c990:	4642      	mov	r2, r8
 800c992:	464b      	mov	r3, r9
 800c994:	f7f4 f8b6 	bl	8000b04 <__aeabi_dcmpge>
 800c998:	2800      	cmp	r0, #0
 800c99a:	f43f aef3 	beq.w	800c784 <__ieee754_pow+0x7ac>
 800c99e:	e7e9      	b.n	800c974 <__ieee754_pow+0x99c>
 800c9a0:	f04f 0a00 	mov.w	sl, #0
 800c9a4:	e71a      	b.n	800c7dc <__ieee754_pow+0x804>
 800c9a6:	ec51 0b10 	vmov	r0, r1, d0
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	e7d4      	b.n	800c958 <__ieee754_pow+0x980>
 800c9ae:	491c      	ldr	r1, [pc, #112]	; (800ca20 <__ieee754_pow+0xa48>)
 800c9b0:	2000      	movs	r0, #0
 800c9b2:	f7ff bb30 	b.w	800c016 <__ieee754_pow+0x3e>
 800c9b6:	2000      	movs	r0, #0
 800c9b8:	2100      	movs	r1, #0
 800c9ba:	f7ff bb2c 	b.w	800c016 <__ieee754_pow+0x3e>
 800c9be:	4630      	mov	r0, r6
 800c9c0:	4639      	mov	r1, r7
 800c9c2:	f7ff bb28 	b.w	800c016 <__ieee754_pow+0x3e>
 800c9c6:	9204      	str	r2, [sp, #16]
 800c9c8:	f7ff bb7a 	b.w	800c0c0 <__ieee754_pow+0xe8>
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	f7ff bb64 	b.w	800c09a <__ieee754_pow+0xc2>
 800c9d2:	bf00      	nop
 800c9d4:	f3af 8000 	nop.w
 800c9d8:	00000000 	.word	0x00000000
 800c9dc:	3fe62e43 	.word	0x3fe62e43
 800c9e0:	fefa39ef 	.word	0xfefa39ef
 800c9e4:	3fe62e42 	.word	0x3fe62e42
 800c9e8:	0ca86c39 	.word	0x0ca86c39
 800c9ec:	be205c61 	.word	0xbe205c61
 800c9f0:	72bea4d0 	.word	0x72bea4d0
 800c9f4:	3e663769 	.word	0x3e663769
 800c9f8:	c5d26bf1 	.word	0xc5d26bf1
 800c9fc:	3ebbbd41 	.word	0x3ebbbd41
 800ca00:	af25de2c 	.word	0xaf25de2c
 800ca04:	3f11566a 	.word	0x3f11566a
 800ca08:	16bebd93 	.word	0x16bebd93
 800ca0c:	3f66c16c 	.word	0x3f66c16c
 800ca10:	5555553e 	.word	0x5555553e
 800ca14:	3fc55555 	.word	0x3fc55555
 800ca18:	3fe00000 	.word	0x3fe00000
 800ca1c:	000fffff 	.word	0x000fffff
 800ca20:	3ff00000 	.word	0x3ff00000
 800ca24:	4090cbff 	.word	0x4090cbff
 800ca28:	3f6f3400 	.word	0x3f6f3400
 800ca2c:	652b82fe 	.word	0x652b82fe
 800ca30:	3c971547 	.word	0x3c971547
 800ca34:	00000000 	.word	0x00000000

0800ca38 <__ieee754_rem_pio2>:
 800ca38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca3c:	ed2d 8b02 	vpush	{d8}
 800ca40:	ec55 4b10 	vmov	r4, r5, d0
 800ca44:	4bca      	ldr	r3, [pc, #808]	; (800cd70 <__ieee754_rem_pio2+0x338>)
 800ca46:	b08b      	sub	sp, #44	; 0x2c
 800ca48:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ca4c:	4598      	cmp	r8, r3
 800ca4e:	4682      	mov	sl, r0
 800ca50:	9502      	str	r5, [sp, #8]
 800ca52:	dc08      	bgt.n	800ca66 <__ieee754_rem_pio2+0x2e>
 800ca54:	2200      	movs	r2, #0
 800ca56:	2300      	movs	r3, #0
 800ca58:	ed80 0b00 	vstr	d0, [r0]
 800ca5c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ca60:	f04f 0b00 	mov.w	fp, #0
 800ca64:	e028      	b.n	800cab8 <__ieee754_rem_pio2+0x80>
 800ca66:	4bc3      	ldr	r3, [pc, #780]	; (800cd74 <__ieee754_rem_pio2+0x33c>)
 800ca68:	4598      	cmp	r8, r3
 800ca6a:	dc78      	bgt.n	800cb5e <__ieee754_rem_pio2+0x126>
 800ca6c:	9b02      	ldr	r3, [sp, #8]
 800ca6e:	4ec2      	ldr	r6, [pc, #776]	; (800cd78 <__ieee754_rem_pio2+0x340>)
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	ee10 0a10 	vmov	r0, s0
 800ca76:	a3b0      	add	r3, pc, #704	; (adr r3, 800cd38 <__ieee754_rem_pio2+0x300>)
 800ca78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca7c:	4629      	mov	r1, r5
 800ca7e:	dd39      	ble.n	800caf4 <__ieee754_rem_pio2+0xbc>
 800ca80:	f7f3 fc02 	bl	8000288 <__aeabi_dsub>
 800ca84:	45b0      	cmp	r8, r6
 800ca86:	4604      	mov	r4, r0
 800ca88:	460d      	mov	r5, r1
 800ca8a:	d01b      	beq.n	800cac4 <__ieee754_rem_pio2+0x8c>
 800ca8c:	a3ac      	add	r3, pc, #688	; (adr r3, 800cd40 <__ieee754_rem_pio2+0x308>)
 800ca8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca92:	f7f3 fbf9 	bl	8000288 <__aeabi_dsub>
 800ca96:	4602      	mov	r2, r0
 800ca98:	460b      	mov	r3, r1
 800ca9a:	e9ca 2300 	strd	r2, r3, [sl]
 800ca9e:	4620      	mov	r0, r4
 800caa0:	4629      	mov	r1, r5
 800caa2:	f7f3 fbf1 	bl	8000288 <__aeabi_dsub>
 800caa6:	a3a6      	add	r3, pc, #664	; (adr r3, 800cd40 <__ieee754_rem_pio2+0x308>)
 800caa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caac:	f7f3 fbec 	bl	8000288 <__aeabi_dsub>
 800cab0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cab4:	f04f 0b01 	mov.w	fp, #1
 800cab8:	4658      	mov	r0, fp
 800caba:	b00b      	add	sp, #44	; 0x2c
 800cabc:	ecbd 8b02 	vpop	{d8}
 800cac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cac4:	a3a0      	add	r3, pc, #640	; (adr r3, 800cd48 <__ieee754_rem_pio2+0x310>)
 800cac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caca:	f7f3 fbdd 	bl	8000288 <__aeabi_dsub>
 800cace:	a3a0      	add	r3, pc, #640	; (adr r3, 800cd50 <__ieee754_rem_pio2+0x318>)
 800cad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad4:	4604      	mov	r4, r0
 800cad6:	460d      	mov	r5, r1
 800cad8:	f7f3 fbd6 	bl	8000288 <__aeabi_dsub>
 800cadc:	4602      	mov	r2, r0
 800cade:	460b      	mov	r3, r1
 800cae0:	e9ca 2300 	strd	r2, r3, [sl]
 800cae4:	4620      	mov	r0, r4
 800cae6:	4629      	mov	r1, r5
 800cae8:	f7f3 fbce 	bl	8000288 <__aeabi_dsub>
 800caec:	a398      	add	r3, pc, #608	; (adr r3, 800cd50 <__ieee754_rem_pio2+0x318>)
 800caee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf2:	e7db      	b.n	800caac <__ieee754_rem_pio2+0x74>
 800caf4:	f7f3 fbca 	bl	800028c <__adddf3>
 800caf8:	45b0      	cmp	r8, r6
 800cafa:	4604      	mov	r4, r0
 800cafc:	460d      	mov	r5, r1
 800cafe:	d016      	beq.n	800cb2e <__ieee754_rem_pio2+0xf6>
 800cb00:	a38f      	add	r3, pc, #572	; (adr r3, 800cd40 <__ieee754_rem_pio2+0x308>)
 800cb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb06:	f7f3 fbc1 	bl	800028c <__adddf3>
 800cb0a:	4602      	mov	r2, r0
 800cb0c:	460b      	mov	r3, r1
 800cb0e:	e9ca 2300 	strd	r2, r3, [sl]
 800cb12:	4620      	mov	r0, r4
 800cb14:	4629      	mov	r1, r5
 800cb16:	f7f3 fbb7 	bl	8000288 <__aeabi_dsub>
 800cb1a:	a389      	add	r3, pc, #548	; (adr r3, 800cd40 <__ieee754_rem_pio2+0x308>)
 800cb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb20:	f7f3 fbb4 	bl	800028c <__adddf3>
 800cb24:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800cb28:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cb2c:	e7c4      	b.n	800cab8 <__ieee754_rem_pio2+0x80>
 800cb2e:	a386      	add	r3, pc, #536	; (adr r3, 800cd48 <__ieee754_rem_pio2+0x310>)
 800cb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb34:	f7f3 fbaa 	bl	800028c <__adddf3>
 800cb38:	a385      	add	r3, pc, #532	; (adr r3, 800cd50 <__ieee754_rem_pio2+0x318>)
 800cb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3e:	4604      	mov	r4, r0
 800cb40:	460d      	mov	r5, r1
 800cb42:	f7f3 fba3 	bl	800028c <__adddf3>
 800cb46:	4602      	mov	r2, r0
 800cb48:	460b      	mov	r3, r1
 800cb4a:	e9ca 2300 	strd	r2, r3, [sl]
 800cb4e:	4620      	mov	r0, r4
 800cb50:	4629      	mov	r1, r5
 800cb52:	f7f3 fb99 	bl	8000288 <__aeabi_dsub>
 800cb56:	a37e      	add	r3, pc, #504	; (adr r3, 800cd50 <__ieee754_rem_pio2+0x318>)
 800cb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb5c:	e7e0      	b.n	800cb20 <__ieee754_rem_pio2+0xe8>
 800cb5e:	4b87      	ldr	r3, [pc, #540]	; (800cd7c <__ieee754_rem_pio2+0x344>)
 800cb60:	4598      	cmp	r8, r3
 800cb62:	f300 80d9 	bgt.w	800cd18 <__ieee754_rem_pio2+0x2e0>
 800cb66:	f7fe fe6f 	bl	800b848 <fabs>
 800cb6a:	ec55 4b10 	vmov	r4, r5, d0
 800cb6e:	ee10 0a10 	vmov	r0, s0
 800cb72:	a379      	add	r3, pc, #484	; (adr r3, 800cd58 <__ieee754_rem_pio2+0x320>)
 800cb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb78:	4629      	mov	r1, r5
 800cb7a:	f7f3 fd3d 	bl	80005f8 <__aeabi_dmul>
 800cb7e:	4b80      	ldr	r3, [pc, #512]	; (800cd80 <__ieee754_rem_pio2+0x348>)
 800cb80:	2200      	movs	r2, #0
 800cb82:	f7f3 fb83 	bl	800028c <__adddf3>
 800cb86:	f7f3 ffe7 	bl	8000b58 <__aeabi_d2iz>
 800cb8a:	4683      	mov	fp, r0
 800cb8c:	f7f3 fcca 	bl	8000524 <__aeabi_i2d>
 800cb90:	4602      	mov	r2, r0
 800cb92:	460b      	mov	r3, r1
 800cb94:	ec43 2b18 	vmov	d8, r2, r3
 800cb98:	a367      	add	r3, pc, #412	; (adr r3, 800cd38 <__ieee754_rem_pio2+0x300>)
 800cb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb9e:	f7f3 fd2b 	bl	80005f8 <__aeabi_dmul>
 800cba2:	4602      	mov	r2, r0
 800cba4:	460b      	mov	r3, r1
 800cba6:	4620      	mov	r0, r4
 800cba8:	4629      	mov	r1, r5
 800cbaa:	f7f3 fb6d 	bl	8000288 <__aeabi_dsub>
 800cbae:	a364      	add	r3, pc, #400	; (adr r3, 800cd40 <__ieee754_rem_pio2+0x308>)
 800cbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb4:	4606      	mov	r6, r0
 800cbb6:	460f      	mov	r7, r1
 800cbb8:	ec51 0b18 	vmov	r0, r1, d8
 800cbbc:	f7f3 fd1c 	bl	80005f8 <__aeabi_dmul>
 800cbc0:	f1bb 0f1f 	cmp.w	fp, #31
 800cbc4:	4604      	mov	r4, r0
 800cbc6:	460d      	mov	r5, r1
 800cbc8:	dc0d      	bgt.n	800cbe6 <__ieee754_rem_pio2+0x1ae>
 800cbca:	4b6e      	ldr	r3, [pc, #440]	; (800cd84 <__ieee754_rem_pio2+0x34c>)
 800cbcc:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800cbd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbd4:	4543      	cmp	r3, r8
 800cbd6:	d006      	beq.n	800cbe6 <__ieee754_rem_pio2+0x1ae>
 800cbd8:	4622      	mov	r2, r4
 800cbda:	462b      	mov	r3, r5
 800cbdc:	4630      	mov	r0, r6
 800cbde:	4639      	mov	r1, r7
 800cbe0:	f7f3 fb52 	bl	8000288 <__aeabi_dsub>
 800cbe4:	e00f      	b.n	800cc06 <__ieee754_rem_pio2+0x1ce>
 800cbe6:	462b      	mov	r3, r5
 800cbe8:	4622      	mov	r2, r4
 800cbea:	4630      	mov	r0, r6
 800cbec:	4639      	mov	r1, r7
 800cbee:	f7f3 fb4b 	bl	8000288 <__aeabi_dsub>
 800cbf2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cbf6:	9303      	str	r3, [sp, #12]
 800cbf8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cbfc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800cc00:	f1b8 0f10 	cmp.w	r8, #16
 800cc04:	dc02      	bgt.n	800cc0c <__ieee754_rem_pio2+0x1d4>
 800cc06:	e9ca 0100 	strd	r0, r1, [sl]
 800cc0a:	e039      	b.n	800cc80 <__ieee754_rem_pio2+0x248>
 800cc0c:	a34e      	add	r3, pc, #312	; (adr r3, 800cd48 <__ieee754_rem_pio2+0x310>)
 800cc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc12:	ec51 0b18 	vmov	r0, r1, d8
 800cc16:	f7f3 fcef 	bl	80005f8 <__aeabi_dmul>
 800cc1a:	4604      	mov	r4, r0
 800cc1c:	460d      	mov	r5, r1
 800cc1e:	4602      	mov	r2, r0
 800cc20:	460b      	mov	r3, r1
 800cc22:	4630      	mov	r0, r6
 800cc24:	4639      	mov	r1, r7
 800cc26:	f7f3 fb2f 	bl	8000288 <__aeabi_dsub>
 800cc2a:	4602      	mov	r2, r0
 800cc2c:	460b      	mov	r3, r1
 800cc2e:	4680      	mov	r8, r0
 800cc30:	4689      	mov	r9, r1
 800cc32:	4630      	mov	r0, r6
 800cc34:	4639      	mov	r1, r7
 800cc36:	f7f3 fb27 	bl	8000288 <__aeabi_dsub>
 800cc3a:	4622      	mov	r2, r4
 800cc3c:	462b      	mov	r3, r5
 800cc3e:	f7f3 fb23 	bl	8000288 <__aeabi_dsub>
 800cc42:	a343      	add	r3, pc, #268	; (adr r3, 800cd50 <__ieee754_rem_pio2+0x318>)
 800cc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc48:	4604      	mov	r4, r0
 800cc4a:	460d      	mov	r5, r1
 800cc4c:	ec51 0b18 	vmov	r0, r1, d8
 800cc50:	f7f3 fcd2 	bl	80005f8 <__aeabi_dmul>
 800cc54:	4622      	mov	r2, r4
 800cc56:	462b      	mov	r3, r5
 800cc58:	f7f3 fb16 	bl	8000288 <__aeabi_dsub>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	460b      	mov	r3, r1
 800cc60:	4604      	mov	r4, r0
 800cc62:	460d      	mov	r5, r1
 800cc64:	4640      	mov	r0, r8
 800cc66:	4649      	mov	r1, r9
 800cc68:	f7f3 fb0e 	bl	8000288 <__aeabi_dsub>
 800cc6c:	9a03      	ldr	r2, [sp, #12]
 800cc6e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cc72:	1ad3      	subs	r3, r2, r3
 800cc74:	2b31      	cmp	r3, #49	; 0x31
 800cc76:	dc24      	bgt.n	800ccc2 <__ieee754_rem_pio2+0x28a>
 800cc78:	e9ca 0100 	strd	r0, r1, [sl]
 800cc7c:	4646      	mov	r6, r8
 800cc7e:	464f      	mov	r7, r9
 800cc80:	e9da 8900 	ldrd	r8, r9, [sl]
 800cc84:	4630      	mov	r0, r6
 800cc86:	4642      	mov	r2, r8
 800cc88:	464b      	mov	r3, r9
 800cc8a:	4639      	mov	r1, r7
 800cc8c:	f7f3 fafc 	bl	8000288 <__aeabi_dsub>
 800cc90:	462b      	mov	r3, r5
 800cc92:	4622      	mov	r2, r4
 800cc94:	f7f3 faf8 	bl	8000288 <__aeabi_dsub>
 800cc98:	9b02      	ldr	r3, [sp, #8]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cca0:	f6bf af0a 	bge.w	800cab8 <__ieee754_rem_pio2+0x80>
 800cca4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cca8:	f8ca 3004 	str.w	r3, [sl, #4]
 800ccac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ccb0:	f8ca 8000 	str.w	r8, [sl]
 800ccb4:	f8ca 0008 	str.w	r0, [sl, #8]
 800ccb8:	f8ca 300c 	str.w	r3, [sl, #12]
 800ccbc:	f1cb 0b00 	rsb	fp, fp, #0
 800ccc0:	e6fa      	b.n	800cab8 <__ieee754_rem_pio2+0x80>
 800ccc2:	a327      	add	r3, pc, #156	; (adr r3, 800cd60 <__ieee754_rem_pio2+0x328>)
 800ccc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc8:	ec51 0b18 	vmov	r0, r1, d8
 800cccc:	f7f3 fc94 	bl	80005f8 <__aeabi_dmul>
 800ccd0:	4604      	mov	r4, r0
 800ccd2:	460d      	mov	r5, r1
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	460b      	mov	r3, r1
 800ccd8:	4640      	mov	r0, r8
 800ccda:	4649      	mov	r1, r9
 800ccdc:	f7f3 fad4 	bl	8000288 <__aeabi_dsub>
 800cce0:	4602      	mov	r2, r0
 800cce2:	460b      	mov	r3, r1
 800cce4:	4606      	mov	r6, r0
 800cce6:	460f      	mov	r7, r1
 800cce8:	4640      	mov	r0, r8
 800ccea:	4649      	mov	r1, r9
 800ccec:	f7f3 facc 	bl	8000288 <__aeabi_dsub>
 800ccf0:	4622      	mov	r2, r4
 800ccf2:	462b      	mov	r3, r5
 800ccf4:	f7f3 fac8 	bl	8000288 <__aeabi_dsub>
 800ccf8:	a31b      	add	r3, pc, #108	; (adr r3, 800cd68 <__ieee754_rem_pio2+0x330>)
 800ccfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccfe:	4604      	mov	r4, r0
 800cd00:	460d      	mov	r5, r1
 800cd02:	ec51 0b18 	vmov	r0, r1, d8
 800cd06:	f7f3 fc77 	bl	80005f8 <__aeabi_dmul>
 800cd0a:	4622      	mov	r2, r4
 800cd0c:	462b      	mov	r3, r5
 800cd0e:	f7f3 fabb 	bl	8000288 <__aeabi_dsub>
 800cd12:	4604      	mov	r4, r0
 800cd14:	460d      	mov	r5, r1
 800cd16:	e75f      	b.n	800cbd8 <__ieee754_rem_pio2+0x1a0>
 800cd18:	4b1b      	ldr	r3, [pc, #108]	; (800cd88 <__ieee754_rem_pio2+0x350>)
 800cd1a:	4598      	cmp	r8, r3
 800cd1c:	dd36      	ble.n	800cd8c <__ieee754_rem_pio2+0x354>
 800cd1e:	ee10 2a10 	vmov	r2, s0
 800cd22:	462b      	mov	r3, r5
 800cd24:	4620      	mov	r0, r4
 800cd26:	4629      	mov	r1, r5
 800cd28:	f7f3 faae 	bl	8000288 <__aeabi_dsub>
 800cd2c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cd30:	e9ca 0100 	strd	r0, r1, [sl]
 800cd34:	e694      	b.n	800ca60 <__ieee754_rem_pio2+0x28>
 800cd36:	bf00      	nop
 800cd38:	54400000 	.word	0x54400000
 800cd3c:	3ff921fb 	.word	0x3ff921fb
 800cd40:	1a626331 	.word	0x1a626331
 800cd44:	3dd0b461 	.word	0x3dd0b461
 800cd48:	1a600000 	.word	0x1a600000
 800cd4c:	3dd0b461 	.word	0x3dd0b461
 800cd50:	2e037073 	.word	0x2e037073
 800cd54:	3ba3198a 	.word	0x3ba3198a
 800cd58:	6dc9c883 	.word	0x6dc9c883
 800cd5c:	3fe45f30 	.word	0x3fe45f30
 800cd60:	2e000000 	.word	0x2e000000
 800cd64:	3ba3198a 	.word	0x3ba3198a
 800cd68:	252049c1 	.word	0x252049c1
 800cd6c:	397b839a 	.word	0x397b839a
 800cd70:	3fe921fb 	.word	0x3fe921fb
 800cd74:	4002d97b 	.word	0x4002d97b
 800cd78:	3ff921fb 	.word	0x3ff921fb
 800cd7c:	413921fb 	.word	0x413921fb
 800cd80:	3fe00000 	.word	0x3fe00000
 800cd84:	0800e4f0 	.word	0x0800e4f0
 800cd88:	7fefffff 	.word	0x7fefffff
 800cd8c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800cd90:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800cd94:	ee10 0a10 	vmov	r0, s0
 800cd98:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800cd9c:	ee10 6a10 	vmov	r6, s0
 800cda0:	460f      	mov	r7, r1
 800cda2:	f7f3 fed9 	bl	8000b58 <__aeabi_d2iz>
 800cda6:	f7f3 fbbd 	bl	8000524 <__aeabi_i2d>
 800cdaa:	4602      	mov	r2, r0
 800cdac:	460b      	mov	r3, r1
 800cdae:	4630      	mov	r0, r6
 800cdb0:	4639      	mov	r1, r7
 800cdb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cdb6:	f7f3 fa67 	bl	8000288 <__aeabi_dsub>
 800cdba:	4b23      	ldr	r3, [pc, #140]	; (800ce48 <__ieee754_rem_pio2+0x410>)
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	f7f3 fc1b 	bl	80005f8 <__aeabi_dmul>
 800cdc2:	460f      	mov	r7, r1
 800cdc4:	4606      	mov	r6, r0
 800cdc6:	f7f3 fec7 	bl	8000b58 <__aeabi_d2iz>
 800cdca:	f7f3 fbab 	bl	8000524 <__aeabi_i2d>
 800cdce:	4602      	mov	r2, r0
 800cdd0:	460b      	mov	r3, r1
 800cdd2:	4630      	mov	r0, r6
 800cdd4:	4639      	mov	r1, r7
 800cdd6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cdda:	f7f3 fa55 	bl	8000288 <__aeabi_dsub>
 800cdde:	4b1a      	ldr	r3, [pc, #104]	; (800ce48 <__ieee754_rem_pio2+0x410>)
 800cde0:	2200      	movs	r2, #0
 800cde2:	f7f3 fc09 	bl	80005f8 <__aeabi_dmul>
 800cde6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cdea:	ad04      	add	r5, sp, #16
 800cdec:	f04f 0803 	mov.w	r8, #3
 800cdf0:	46a9      	mov	r9, r5
 800cdf2:	2600      	movs	r6, #0
 800cdf4:	2700      	movs	r7, #0
 800cdf6:	4632      	mov	r2, r6
 800cdf8:	463b      	mov	r3, r7
 800cdfa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800cdfe:	46c3      	mov	fp, r8
 800ce00:	3d08      	subs	r5, #8
 800ce02:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ce06:	f7f3 fe5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce0a:	2800      	cmp	r0, #0
 800ce0c:	d1f3      	bne.n	800cdf6 <__ieee754_rem_pio2+0x3be>
 800ce0e:	4b0f      	ldr	r3, [pc, #60]	; (800ce4c <__ieee754_rem_pio2+0x414>)
 800ce10:	9301      	str	r3, [sp, #4]
 800ce12:	2302      	movs	r3, #2
 800ce14:	9300      	str	r3, [sp, #0]
 800ce16:	4622      	mov	r2, r4
 800ce18:	465b      	mov	r3, fp
 800ce1a:	4651      	mov	r1, sl
 800ce1c:	4648      	mov	r0, r9
 800ce1e:	f000 f993 	bl	800d148 <__kernel_rem_pio2>
 800ce22:	9b02      	ldr	r3, [sp, #8]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	4683      	mov	fp, r0
 800ce28:	f6bf ae46 	bge.w	800cab8 <__ieee754_rem_pio2+0x80>
 800ce2c:	e9da 2100 	ldrd	r2, r1, [sl]
 800ce30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce34:	e9ca 2300 	strd	r2, r3, [sl]
 800ce38:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800ce3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce40:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800ce44:	e73a      	b.n	800ccbc <__ieee754_rem_pio2+0x284>
 800ce46:	bf00      	nop
 800ce48:	41700000 	.word	0x41700000
 800ce4c:	0800e570 	.word	0x0800e570

0800ce50 <__ieee754_sqrt>:
 800ce50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce54:	ec55 4b10 	vmov	r4, r5, d0
 800ce58:	4e55      	ldr	r6, [pc, #340]	; (800cfb0 <__ieee754_sqrt+0x160>)
 800ce5a:	43ae      	bics	r6, r5
 800ce5c:	ee10 0a10 	vmov	r0, s0
 800ce60:	ee10 3a10 	vmov	r3, s0
 800ce64:	462a      	mov	r2, r5
 800ce66:	4629      	mov	r1, r5
 800ce68:	d110      	bne.n	800ce8c <__ieee754_sqrt+0x3c>
 800ce6a:	ee10 2a10 	vmov	r2, s0
 800ce6e:	462b      	mov	r3, r5
 800ce70:	f7f3 fbc2 	bl	80005f8 <__aeabi_dmul>
 800ce74:	4602      	mov	r2, r0
 800ce76:	460b      	mov	r3, r1
 800ce78:	4620      	mov	r0, r4
 800ce7a:	4629      	mov	r1, r5
 800ce7c:	f7f3 fa06 	bl	800028c <__adddf3>
 800ce80:	4604      	mov	r4, r0
 800ce82:	460d      	mov	r5, r1
 800ce84:	ec45 4b10 	vmov	d0, r4, r5
 800ce88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce8c:	2d00      	cmp	r5, #0
 800ce8e:	dc10      	bgt.n	800ceb2 <__ieee754_sqrt+0x62>
 800ce90:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ce94:	4330      	orrs	r0, r6
 800ce96:	d0f5      	beq.n	800ce84 <__ieee754_sqrt+0x34>
 800ce98:	b15d      	cbz	r5, 800ceb2 <__ieee754_sqrt+0x62>
 800ce9a:	ee10 2a10 	vmov	r2, s0
 800ce9e:	462b      	mov	r3, r5
 800cea0:	ee10 0a10 	vmov	r0, s0
 800cea4:	f7f3 f9f0 	bl	8000288 <__aeabi_dsub>
 800cea8:	4602      	mov	r2, r0
 800ceaa:	460b      	mov	r3, r1
 800ceac:	f7f3 fcce 	bl	800084c <__aeabi_ddiv>
 800ceb0:	e7e6      	b.n	800ce80 <__ieee754_sqrt+0x30>
 800ceb2:	1512      	asrs	r2, r2, #20
 800ceb4:	d074      	beq.n	800cfa0 <__ieee754_sqrt+0x150>
 800ceb6:	07d4      	lsls	r4, r2, #31
 800ceb8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800cebc:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800cec0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800cec4:	bf5e      	ittt	pl
 800cec6:	0fda      	lsrpl	r2, r3, #31
 800cec8:	005b      	lslpl	r3, r3, #1
 800ceca:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800cece:	2400      	movs	r4, #0
 800ced0:	0fda      	lsrs	r2, r3, #31
 800ced2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ced6:	107f      	asrs	r7, r7, #1
 800ced8:	005b      	lsls	r3, r3, #1
 800ceda:	2516      	movs	r5, #22
 800cedc:	4620      	mov	r0, r4
 800cede:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800cee2:	1886      	adds	r6, r0, r2
 800cee4:	428e      	cmp	r6, r1
 800cee6:	bfde      	ittt	le
 800cee8:	1b89      	suble	r1, r1, r6
 800ceea:	18b0      	addle	r0, r6, r2
 800ceec:	18a4      	addle	r4, r4, r2
 800ceee:	0049      	lsls	r1, r1, #1
 800cef0:	3d01      	subs	r5, #1
 800cef2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800cef6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800cefa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cefe:	d1f0      	bne.n	800cee2 <__ieee754_sqrt+0x92>
 800cf00:	462a      	mov	r2, r5
 800cf02:	f04f 0e20 	mov.w	lr, #32
 800cf06:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800cf0a:	4281      	cmp	r1, r0
 800cf0c:	eb06 0c05 	add.w	ip, r6, r5
 800cf10:	dc02      	bgt.n	800cf18 <__ieee754_sqrt+0xc8>
 800cf12:	d113      	bne.n	800cf3c <__ieee754_sqrt+0xec>
 800cf14:	459c      	cmp	ip, r3
 800cf16:	d811      	bhi.n	800cf3c <__ieee754_sqrt+0xec>
 800cf18:	f1bc 0f00 	cmp.w	ip, #0
 800cf1c:	eb0c 0506 	add.w	r5, ip, r6
 800cf20:	da43      	bge.n	800cfaa <__ieee754_sqrt+0x15a>
 800cf22:	2d00      	cmp	r5, #0
 800cf24:	db41      	blt.n	800cfaa <__ieee754_sqrt+0x15a>
 800cf26:	f100 0801 	add.w	r8, r0, #1
 800cf2a:	1a09      	subs	r1, r1, r0
 800cf2c:	459c      	cmp	ip, r3
 800cf2e:	bf88      	it	hi
 800cf30:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800cf34:	eba3 030c 	sub.w	r3, r3, ip
 800cf38:	4432      	add	r2, r6
 800cf3a:	4640      	mov	r0, r8
 800cf3c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800cf40:	f1be 0e01 	subs.w	lr, lr, #1
 800cf44:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800cf48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cf4c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800cf50:	d1db      	bne.n	800cf0a <__ieee754_sqrt+0xba>
 800cf52:	430b      	orrs	r3, r1
 800cf54:	d006      	beq.n	800cf64 <__ieee754_sqrt+0x114>
 800cf56:	1c50      	adds	r0, r2, #1
 800cf58:	bf13      	iteet	ne
 800cf5a:	3201      	addne	r2, #1
 800cf5c:	3401      	addeq	r4, #1
 800cf5e:	4672      	moveq	r2, lr
 800cf60:	f022 0201 	bicne.w	r2, r2, #1
 800cf64:	1063      	asrs	r3, r4, #1
 800cf66:	0852      	lsrs	r2, r2, #1
 800cf68:	07e1      	lsls	r1, r4, #31
 800cf6a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cf6e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cf72:	bf48      	it	mi
 800cf74:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800cf78:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800cf7c:	4614      	mov	r4, r2
 800cf7e:	e781      	b.n	800ce84 <__ieee754_sqrt+0x34>
 800cf80:	0ad9      	lsrs	r1, r3, #11
 800cf82:	3815      	subs	r0, #21
 800cf84:	055b      	lsls	r3, r3, #21
 800cf86:	2900      	cmp	r1, #0
 800cf88:	d0fa      	beq.n	800cf80 <__ieee754_sqrt+0x130>
 800cf8a:	02cd      	lsls	r5, r1, #11
 800cf8c:	d50a      	bpl.n	800cfa4 <__ieee754_sqrt+0x154>
 800cf8e:	f1c2 0420 	rsb	r4, r2, #32
 800cf92:	fa23 f404 	lsr.w	r4, r3, r4
 800cf96:	1e55      	subs	r5, r2, #1
 800cf98:	4093      	lsls	r3, r2
 800cf9a:	4321      	orrs	r1, r4
 800cf9c:	1b42      	subs	r2, r0, r5
 800cf9e:	e78a      	b.n	800ceb6 <__ieee754_sqrt+0x66>
 800cfa0:	4610      	mov	r0, r2
 800cfa2:	e7f0      	b.n	800cf86 <__ieee754_sqrt+0x136>
 800cfa4:	0049      	lsls	r1, r1, #1
 800cfa6:	3201      	adds	r2, #1
 800cfa8:	e7ef      	b.n	800cf8a <__ieee754_sqrt+0x13a>
 800cfaa:	4680      	mov	r8, r0
 800cfac:	e7bd      	b.n	800cf2a <__ieee754_sqrt+0xda>
 800cfae:	bf00      	nop
 800cfb0:	7ff00000 	.word	0x7ff00000
 800cfb4:	00000000 	.word	0x00000000

0800cfb8 <__kernel_cos>:
 800cfb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfbc:	ec57 6b10 	vmov	r6, r7, d0
 800cfc0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800cfc4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800cfc8:	ed8d 1b00 	vstr	d1, [sp]
 800cfcc:	da07      	bge.n	800cfde <__kernel_cos+0x26>
 800cfce:	ee10 0a10 	vmov	r0, s0
 800cfd2:	4639      	mov	r1, r7
 800cfd4:	f7f3 fdc0 	bl	8000b58 <__aeabi_d2iz>
 800cfd8:	2800      	cmp	r0, #0
 800cfda:	f000 8088 	beq.w	800d0ee <__kernel_cos+0x136>
 800cfde:	4632      	mov	r2, r6
 800cfe0:	463b      	mov	r3, r7
 800cfe2:	4630      	mov	r0, r6
 800cfe4:	4639      	mov	r1, r7
 800cfe6:	f7f3 fb07 	bl	80005f8 <__aeabi_dmul>
 800cfea:	4b51      	ldr	r3, [pc, #324]	; (800d130 <__kernel_cos+0x178>)
 800cfec:	2200      	movs	r2, #0
 800cfee:	4604      	mov	r4, r0
 800cff0:	460d      	mov	r5, r1
 800cff2:	f7f3 fb01 	bl	80005f8 <__aeabi_dmul>
 800cff6:	a340      	add	r3, pc, #256	; (adr r3, 800d0f8 <__kernel_cos+0x140>)
 800cff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cffc:	4682      	mov	sl, r0
 800cffe:	468b      	mov	fp, r1
 800d000:	4620      	mov	r0, r4
 800d002:	4629      	mov	r1, r5
 800d004:	f7f3 faf8 	bl	80005f8 <__aeabi_dmul>
 800d008:	a33d      	add	r3, pc, #244	; (adr r3, 800d100 <__kernel_cos+0x148>)
 800d00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d00e:	f7f3 f93d 	bl	800028c <__adddf3>
 800d012:	4622      	mov	r2, r4
 800d014:	462b      	mov	r3, r5
 800d016:	f7f3 faef 	bl	80005f8 <__aeabi_dmul>
 800d01a:	a33b      	add	r3, pc, #236	; (adr r3, 800d108 <__kernel_cos+0x150>)
 800d01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d020:	f7f3 f932 	bl	8000288 <__aeabi_dsub>
 800d024:	4622      	mov	r2, r4
 800d026:	462b      	mov	r3, r5
 800d028:	f7f3 fae6 	bl	80005f8 <__aeabi_dmul>
 800d02c:	a338      	add	r3, pc, #224	; (adr r3, 800d110 <__kernel_cos+0x158>)
 800d02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d032:	f7f3 f92b 	bl	800028c <__adddf3>
 800d036:	4622      	mov	r2, r4
 800d038:	462b      	mov	r3, r5
 800d03a:	f7f3 fadd 	bl	80005f8 <__aeabi_dmul>
 800d03e:	a336      	add	r3, pc, #216	; (adr r3, 800d118 <__kernel_cos+0x160>)
 800d040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d044:	f7f3 f920 	bl	8000288 <__aeabi_dsub>
 800d048:	4622      	mov	r2, r4
 800d04a:	462b      	mov	r3, r5
 800d04c:	f7f3 fad4 	bl	80005f8 <__aeabi_dmul>
 800d050:	a333      	add	r3, pc, #204	; (adr r3, 800d120 <__kernel_cos+0x168>)
 800d052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d056:	f7f3 f919 	bl	800028c <__adddf3>
 800d05a:	4622      	mov	r2, r4
 800d05c:	462b      	mov	r3, r5
 800d05e:	f7f3 facb 	bl	80005f8 <__aeabi_dmul>
 800d062:	4622      	mov	r2, r4
 800d064:	462b      	mov	r3, r5
 800d066:	f7f3 fac7 	bl	80005f8 <__aeabi_dmul>
 800d06a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d06e:	4604      	mov	r4, r0
 800d070:	460d      	mov	r5, r1
 800d072:	4630      	mov	r0, r6
 800d074:	4639      	mov	r1, r7
 800d076:	f7f3 fabf 	bl	80005f8 <__aeabi_dmul>
 800d07a:	460b      	mov	r3, r1
 800d07c:	4602      	mov	r2, r0
 800d07e:	4629      	mov	r1, r5
 800d080:	4620      	mov	r0, r4
 800d082:	f7f3 f901 	bl	8000288 <__aeabi_dsub>
 800d086:	4b2b      	ldr	r3, [pc, #172]	; (800d134 <__kernel_cos+0x17c>)
 800d088:	4598      	cmp	r8, r3
 800d08a:	4606      	mov	r6, r0
 800d08c:	460f      	mov	r7, r1
 800d08e:	dc10      	bgt.n	800d0b2 <__kernel_cos+0xfa>
 800d090:	4602      	mov	r2, r0
 800d092:	460b      	mov	r3, r1
 800d094:	4650      	mov	r0, sl
 800d096:	4659      	mov	r1, fp
 800d098:	f7f3 f8f6 	bl	8000288 <__aeabi_dsub>
 800d09c:	460b      	mov	r3, r1
 800d09e:	4926      	ldr	r1, [pc, #152]	; (800d138 <__kernel_cos+0x180>)
 800d0a0:	4602      	mov	r2, r0
 800d0a2:	2000      	movs	r0, #0
 800d0a4:	f7f3 f8f0 	bl	8000288 <__aeabi_dsub>
 800d0a8:	ec41 0b10 	vmov	d0, r0, r1
 800d0ac:	b003      	add	sp, #12
 800d0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0b2:	4b22      	ldr	r3, [pc, #136]	; (800d13c <__kernel_cos+0x184>)
 800d0b4:	4920      	ldr	r1, [pc, #128]	; (800d138 <__kernel_cos+0x180>)
 800d0b6:	4598      	cmp	r8, r3
 800d0b8:	bfcc      	ite	gt
 800d0ba:	4d21      	ldrgt	r5, [pc, #132]	; (800d140 <__kernel_cos+0x188>)
 800d0bc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d0c0:	2400      	movs	r4, #0
 800d0c2:	4622      	mov	r2, r4
 800d0c4:	462b      	mov	r3, r5
 800d0c6:	2000      	movs	r0, #0
 800d0c8:	f7f3 f8de 	bl	8000288 <__aeabi_dsub>
 800d0cc:	4622      	mov	r2, r4
 800d0ce:	4680      	mov	r8, r0
 800d0d0:	4689      	mov	r9, r1
 800d0d2:	462b      	mov	r3, r5
 800d0d4:	4650      	mov	r0, sl
 800d0d6:	4659      	mov	r1, fp
 800d0d8:	f7f3 f8d6 	bl	8000288 <__aeabi_dsub>
 800d0dc:	4632      	mov	r2, r6
 800d0de:	463b      	mov	r3, r7
 800d0e0:	f7f3 f8d2 	bl	8000288 <__aeabi_dsub>
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	460b      	mov	r3, r1
 800d0e8:	4640      	mov	r0, r8
 800d0ea:	4649      	mov	r1, r9
 800d0ec:	e7da      	b.n	800d0a4 <__kernel_cos+0xec>
 800d0ee:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d128 <__kernel_cos+0x170>
 800d0f2:	e7db      	b.n	800d0ac <__kernel_cos+0xf4>
 800d0f4:	f3af 8000 	nop.w
 800d0f8:	be8838d4 	.word	0xbe8838d4
 800d0fc:	bda8fae9 	.word	0xbda8fae9
 800d100:	bdb4b1c4 	.word	0xbdb4b1c4
 800d104:	3e21ee9e 	.word	0x3e21ee9e
 800d108:	809c52ad 	.word	0x809c52ad
 800d10c:	3e927e4f 	.word	0x3e927e4f
 800d110:	19cb1590 	.word	0x19cb1590
 800d114:	3efa01a0 	.word	0x3efa01a0
 800d118:	16c15177 	.word	0x16c15177
 800d11c:	3f56c16c 	.word	0x3f56c16c
 800d120:	5555554c 	.word	0x5555554c
 800d124:	3fa55555 	.word	0x3fa55555
 800d128:	00000000 	.word	0x00000000
 800d12c:	3ff00000 	.word	0x3ff00000
 800d130:	3fe00000 	.word	0x3fe00000
 800d134:	3fd33332 	.word	0x3fd33332
 800d138:	3ff00000 	.word	0x3ff00000
 800d13c:	3fe90000 	.word	0x3fe90000
 800d140:	3fd20000 	.word	0x3fd20000
 800d144:	00000000 	.word	0x00000000

0800d148 <__kernel_rem_pio2>:
 800d148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d14c:	ed2d 8b02 	vpush	{d8}
 800d150:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800d154:	f112 0f14 	cmn.w	r2, #20
 800d158:	9308      	str	r3, [sp, #32]
 800d15a:	9101      	str	r1, [sp, #4]
 800d15c:	4bc4      	ldr	r3, [pc, #784]	; (800d470 <__kernel_rem_pio2+0x328>)
 800d15e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800d160:	900b      	str	r0, [sp, #44]	; 0x2c
 800d162:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d166:	9302      	str	r3, [sp, #8]
 800d168:	9b08      	ldr	r3, [sp, #32]
 800d16a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800d16e:	bfa8      	it	ge
 800d170:	1ed4      	subge	r4, r2, #3
 800d172:	9306      	str	r3, [sp, #24]
 800d174:	bfb2      	itee	lt
 800d176:	2400      	movlt	r4, #0
 800d178:	2318      	movge	r3, #24
 800d17a:	fb94 f4f3 	sdivge	r4, r4, r3
 800d17e:	f06f 0317 	mvn.w	r3, #23
 800d182:	fb04 3303 	mla	r3, r4, r3, r3
 800d186:	eb03 0a02 	add.w	sl, r3, r2
 800d18a:	9b02      	ldr	r3, [sp, #8]
 800d18c:	9a06      	ldr	r2, [sp, #24]
 800d18e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800d460 <__kernel_rem_pio2+0x318>
 800d192:	eb03 0802 	add.w	r8, r3, r2
 800d196:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d198:	1aa7      	subs	r7, r4, r2
 800d19a:	ae22      	add	r6, sp, #136	; 0x88
 800d19c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d1a0:	2500      	movs	r5, #0
 800d1a2:	4545      	cmp	r5, r8
 800d1a4:	dd13      	ble.n	800d1ce <__kernel_rem_pio2+0x86>
 800d1a6:	9b08      	ldr	r3, [sp, #32]
 800d1a8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800d460 <__kernel_rem_pio2+0x318>
 800d1ac:	aa22      	add	r2, sp, #136	; 0x88
 800d1ae:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d1b2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800d1b6:	f04f 0800 	mov.w	r8, #0
 800d1ba:	9b02      	ldr	r3, [sp, #8]
 800d1bc:	4598      	cmp	r8, r3
 800d1be:	dc2f      	bgt.n	800d220 <__kernel_rem_pio2+0xd8>
 800d1c0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d1c4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800d1c8:	462f      	mov	r7, r5
 800d1ca:	2600      	movs	r6, #0
 800d1cc:	e01b      	b.n	800d206 <__kernel_rem_pio2+0xbe>
 800d1ce:	42ef      	cmn	r7, r5
 800d1d0:	d407      	bmi.n	800d1e2 <__kernel_rem_pio2+0x9a>
 800d1d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d1d6:	f7f3 f9a5 	bl	8000524 <__aeabi_i2d>
 800d1da:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d1de:	3501      	adds	r5, #1
 800d1e0:	e7df      	b.n	800d1a2 <__kernel_rem_pio2+0x5a>
 800d1e2:	ec51 0b18 	vmov	r0, r1, d8
 800d1e6:	e7f8      	b.n	800d1da <__kernel_rem_pio2+0x92>
 800d1e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1ec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d1f0:	f7f3 fa02 	bl	80005f8 <__aeabi_dmul>
 800d1f4:	4602      	mov	r2, r0
 800d1f6:	460b      	mov	r3, r1
 800d1f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d1fc:	f7f3 f846 	bl	800028c <__adddf3>
 800d200:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d204:	3601      	adds	r6, #1
 800d206:	9b06      	ldr	r3, [sp, #24]
 800d208:	429e      	cmp	r6, r3
 800d20a:	f1a7 0708 	sub.w	r7, r7, #8
 800d20e:	ddeb      	ble.n	800d1e8 <__kernel_rem_pio2+0xa0>
 800d210:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d214:	f108 0801 	add.w	r8, r8, #1
 800d218:	ecab 7b02 	vstmia	fp!, {d7}
 800d21c:	3508      	adds	r5, #8
 800d21e:	e7cc      	b.n	800d1ba <__kernel_rem_pio2+0x72>
 800d220:	9b02      	ldr	r3, [sp, #8]
 800d222:	aa0e      	add	r2, sp, #56	; 0x38
 800d224:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d228:	930d      	str	r3, [sp, #52]	; 0x34
 800d22a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d22c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d230:	9c02      	ldr	r4, [sp, #8]
 800d232:	930c      	str	r3, [sp, #48]	; 0x30
 800d234:	00e3      	lsls	r3, r4, #3
 800d236:	930a      	str	r3, [sp, #40]	; 0x28
 800d238:	ab9a      	add	r3, sp, #616	; 0x268
 800d23a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d23e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d242:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800d246:	ab72      	add	r3, sp, #456	; 0x1c8
 800d248:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800d24c:	46c3      	mov	fp, r8
 800d24e:	46a1      	mov	r9, r4
 800d250:	f1b9 0f00 	cmp.w	r9, #0
 800d254:	f1a5 0508 	sub.w	r5, r5, #8
 800d258:	dc77      	bgt.n	800d34a <__kernel_rem_pio2+0x202>
 800d25a:	ec47 6b10 	vmov	d0, r6, r7
 800d25e:	4650      	mov	r0, sl
 800d260:	f000 fe52 	bl	800df08 <scalbn>
 800d264:	ec57 6b10 	vmov	r6, r7, d0
 800d268:	2200      	movs	r2, #0
 800d26a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d26e:	ee10 0a10 	vmov	r0, s0
 800d272:	4639      	mov	r1, r7
 800d274:	f7f3 f9c0 	bl	80005f8 <__aeabi_dmul>
 800d278:	ec41 0b10 	vmov	d0, r0, r1
 800d27c:	f000 fdbc 	bl	800ddf8 <floor>
 800d280:	4b7c      	ldr	r3, [pc, #496]	; (800d474 <__kernel_rem_pio2+0x32c>)
 800d282:	ec51 0b10 	vmov	r0, r1, d0
 800d286:	2200      	movs	r2, #0
 800d288:	f7f3 f9b6 	bl	80005f8 <__aeabi_dmul>
 800d28c:	4602      	mov	r2, r0
 800d28e:	460b      	mov	r3, r1
 800d290:	4630      	mov	r0, r6
 800d292:	4639      	mov	r1, r7
 800d294:	f7f2 fff8 	bl	8000288 <__aeabi_dsub>
 800d298:	460f      	mov	r7, r1
 800d29a:	4606      	mov	r6, r0
 800d29c:	f7f3 fc5c 	bl	8000b58 <__aeabi_d2iz>
 800d2a0:	9004      	str	r0, [sp, #16]
 800d2a2:	f7f3 f93f 	bl	8000524 <__aeabi_i2d>
 800d2a6:	4602      	mov	r2, r0
 800d2a8:	460b      	mov	r3, r1
 800d2aa:	4630      	mov	r0, r6
 800d2ac:	4639      	mov	r1, r7
 800d2ae:	f7f2 ffeb 	bl	8000288 <__aeabi_dsub>
 800d2b2:	f1ba 0f00 	cmp.w	sl, #0
 800d2b6:	4606      	mov	r6, r0
 800d2b8:	460f      	mov	r7, r1
 800d2ba:	dd6d      	ble.n	800d398 <__kernel_rem_pio2+0x250>
 800d2bc:	1e62      	subs	r2, r4, #1
 800d2be:	ab0e      	add	r3, sp, #56	; 0x38
 800d2c0:	9d04      	ldr	r5, [sp, #16]
 800d2c2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d2c6:	f1ca 0118 	rsb	r1, sl, #24
 800d2ca:	fa40 f301 	asr.w	r3, r0, r1
 800d2ce:	441d      	add	r5, r3
 800d2d0:	408b      	lsls	r3, r1
 800d2d2:	1ac0      	subs	r0, r0, r3
 800d2d4:	ab0e      	add	r3, sp, #56	; 0x38
 800d2d6:	9504      	str	r5, [sp, #16]
 800d2d8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d2dc:	f1ca 0317 	rsb	r3, sl, #23
 800d2e0:	fa40 fb03 	asr.w	fp, r0, r3
 800d2e4:	f1bb 0f00 	cmp.w	fp, #0
 800d2e8:	dd65      	ble.n	800d3b6 <__kernel_rem_pio2+0x26e>
 800d2ea:	9b04      	ldr	r3, [sp, #16]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	3301      	adds	r3, #1
 800d2f0:	9304      	str	r3, [sp, #16]
 800d2f2:	4615      	mov	r5, r2
 800d2f4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d2f8:	4294      	cmp	r4, r2
 800d2fa:	f300 809c 	bgt.w	800d436 <__kernel_rem_pio2+0x2ee>
 800d2fe:	f1ba 0f00 	cmp.w	sl, #0
 800d302:	dd07      	ble.n	800d314 <__kernel_rem_pio2+0x1cc>
 800d304:	f1ba 0f01 	cmp.w	sl, #1
 800d308:	f000 80c0 	beq.w	800d48c <__kernel_rem_pio2+0x344>
 800d30c:	f1ba 0f02 	cmp.w	sl, #2
 800d310:	f000 80c6 	beq.w	800d4a0 <__kernel_rem_pio2+0x358>
 800d314:	f1bb 0f02 	cmp.w	fp, #2
 800d318:	d14d      	bne.n	800d3b6 <__kernel_rem_pio2+0x26e>
 800d31a:	4632      	mov	r2, r6
 800d31c:	463b      	mov	r3, r7
 800d31e:	4956      	ldr	r1, [pc, #344]	; (800d478 <__kernel_rem_pio2+0x330>)
 800d320:	2000      	movs	r0, #0
 800d322:	f7f2 ffb1 	bl	8000288 <__aeabi_dsub>
 800d326:	4606      	mov	r6, r0
 800d328:	460f      	mov	r7, r1
 800d32a:	2d00      	cmp	r5, #0
 800d32c:	d043      	beq.n	800d3b6 <__kernel_rem_pio2+0x26e>
 800d32e:	4650      	mov	r0, sl
 800d330:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800d468 <__kernel_rem_pio2+0x320>
 800d334:	f000 fde8 	bl	800df08 <scalbn>
 800d338:	4630      	mov	r0, r6
 800d33a:	4639      	mov	r1, r7
 800d33c:	ec53 2b10 	vmov	r2, r3, d0
 800d340:	f7f2 ffa2 	bl	8000288 <__aeabi_dsub>
 800d344:	4606      	mov	r6, r0
 800d346:	460f      	mov	r7, r1
 800d348:	e035      	b.n	800d3b6 <__kernel_rem_pio2+0x26e>
 800d34a:	4b4c      	ldr	r3, [pc, #304]	; (800d47c <__kernel_rem_pio2+0x334>)
 800d34c:	2200      	movs	r2, #0
 800d34e:	4630      	mov	r0, r6
 800d350:	4639      	mov	r1, r7
 800d352:	f7f3 f951 	bl	80005f8 <__aeabi_dmul>
 800d356:	f7f3 fbff 	bl	8000b58 <__aeabi_d2iz>
 800d35a:	f7f3 f8e3 	bl	8000524 <__aeabi_i2d>
 800d35e:	4602      	mov	r2, r0
 800d360:	460b      	mov	r3, r1
 800d362:	ec43 2b18 	vmov	d8, r2, r3
 800d366:	4b46      	ldr	r3, [pc, #280]	; (800d480 <__kernel_rem_pio2+0x338>)
 800d368:	2200      	movs	r2, #0
 800d36a:	f7f3 f945 	bl	80005f8 <__aeabi_dmul>
 800d36e:	4602      	mov	r2, r0
 800d370:	460b      	mov	r3, r1
 800d372:	4630      	mov	r0, r6
 800d374:	4639      	mov	r1, r7
 800d376:	f7f2 ff87 	bl	8000288 <__aeabi_dsub>
 800d37a:	f7f3 fbed 	bl	8000b58 <__aeabi_d2iz>
 800d37e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d382:	f84b 0b04 	str.w	r0, [fp], #4
 800d386:	ec51 0b18 	vmov	r0, r1, d8
 800d38a:	f7f2 ff7f 	bl	800028c <__adddf3>
 800d38e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800d392:	4606      	mov	r6, r0
 800d394:	460f      	mov	r7, r1
 800d396:	e75b      	b.n	800d250 <__kernel_rem_pio2+0x108>
 800d398:	d106      	bne.n	800d3a8 <__kernel_rem_pio2+0x260>
 800d39a:	1e63      	subs	r3, r4, #1
 800d39c:	aa0e      	add	r2, sp, #56	; 0x38
 800d39e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d3a2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800d3a6:	e79d      	b.n	800d2e4 <__kernel_rem_pio2+0x19c>
 800d3a8:	4b36      	ldr	r3, [pc, #216]	; (800d484 <__kernel_rem_pio2+0x33c>)
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	f7f3 fbaa 	bl	8000b04 <__aeabi_dcmpge>
 800d3b0:	2800      	cmp	r0, #0
 800d3b2:	d13d      	bne.n	800d430 <__kernel_rem_pio2+0x2e8>
 800d3b4:	4683      	mov	fp, r0
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	4630      	mov	r0, r6
 800d3bc:	4639      	mov	r1, r7
 800d3be:	f7f3 fb83 	bl	8000ac8 <__aeabi_dcmpeq>
 800d3c2:	2800      	cmp	r0, #0
 800d3c4:	f000 80c0 	beq.w	800d548 <__kernel_rem_pio2+0x400>
 800d3c8:	1e65      	subs	r5, r4, #1
 800d3ca:	462b      	mov	r3, r5
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	9902      	ldr	r1, [sp, #8]
 800d3d0:	428b      	cmp	r3, r1
 800d3d2:	da6c      	bge.n	800d4ae <__kernel_rem_pio2+0x366>
 800d3d4:	2a00      	cmp	r2, #0
 800d3d6:	f000 8089 	beq.w	800d4ec <__kernel_rem_pio2+0x3a4>
 800d3da:	ab0e      	add	r3, sp, #56	; 0x38
 800d3dc:	f1aa 0a18 	sub.w	sl, sl, #24
 800d3e0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	f000 80ad 	beq.w	800d544 <__kernel_rem_pio2+0x3fc>
 800d3ea:	4650      	mov	r0, sl
 800d3ec:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800d468 <__kernel_rem_pio2+0x320>
 800d3f0:	f000 fd8a 	bl	800df08 <scalbn>
 800d3f4:	ab9a      	add	r3, sp, #616	; 0x268
 800d3f6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d3fa:	ec57 6b10 	vmov	r6, r7, d0
 800d3fe:	00ec      	lsls	r4, r5, #3
 800d400:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800d404:	46aa      	mov	sl, r5
 800d406:	f1ba 0f00 	cmp.w	sl, #0
 800d40a:	f280 80d6 	bge.w	800d5ba <__kernel_rem_pio2+0x472>
 800d40e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800d460 <__kernel_rem_pio2+0x318>
 800d412:	462e      	mov	r6, r5
 800d414:	2e00      	cmp	r6, #0
 800d416:	f2c0 8104 	blt.w	800d622 <__kernel_rem_pio2+0x4da>
 800d41a:	ab72      	add	r3, sp, #456	; 0x1c8
 800d41c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800d420:	f8df a064 	ldr.w	sl, [pc, #100]	; 800d488 <__kernel_rem_pio2+0x340>
 800d424:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800d428:	f04f 0800 	mov.w	r8, #0
 800d42c:	1baf      	subs	r7, r5, r6
 800d42e:	e0ea      	b.n	800d606 <__kernel_rem_pio2+0x4be>
 800d430:	f04f 0b02 	mov.w	fp, #2
 800d434:	e759      	b.n	800d2ea <__kernel_rem_pio2+0x1a2>
 800d436:	f8d8 3000 	ldr.w	r3, [r8]
 800d43a:	b955      	cbnz	r5, 800d452 <__kernel_rem_pio2+0x30a>
 800d43c:	b123      	cbz	r3, 800d448 <__kernel_rem_pio2+0x300>
 800d43e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d442:	f8c8 3000 	str.w	r3, [r8]
 800d446:	2301      	movs	r3, #1
 800d448:	3201      	adds	r2, #1
 800d44a:	f108 0804 	add.w	r8, r8, #4
 800d44e:	461d      	mov	r5, r3
 800d450:	e752      	b.n	800d2f8 <__kernel_rem_pio2+0x1b0>
 800d452:	1acb      	subs	r3, r1, r3
 800d454:	f8c8 3000 	str.w	r3, [r8]
 800d458:	462b      	mov	r3, r5
 800d45a:	e7f5      	b.n	800d448 <__kernel_rem_pio2+0x300>
 800d45c:	f3af 8000 	nop.w
	...
 800d46c:	3ff00000 	.word	0x3ff00000
 800d470:	0800e6b8 	.word	0x0800e6b8
 800d474:	40200000 	.word	0x40200000
 800d478:	3ff00000 	.word	0x3ff00000
 800d47c:	3e700000 	.word	0x3e700000
 800d480:	41700000 	.word	0x41700000
 800d484:	3fe00000 	.word	0x3fe00000
 800d488:	0800e678 	.word	0x0800e678
 800d48c:	1e62      	subs	r2, r4, #1
 800d48e:	ab0e      	add	r3, sp, #56	; 0x38
 800d490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d494:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d498:	a90e      	add	r1, sp, #56	; 0x38
 800d49a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d49e:	e739      	b.n	800d314 <__kernel_rem_pio2+0x1cc>
 800d4a0:	1e62      	subs	r2, r4, #1
 800d4a2:	ab0e      	add	r3, sp, #56	; 0x38
 800d4a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4a8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d4ac:	e7f4      	b.n	800d498 <__kernel_rem_pio2+0x350>
 800d4ae:	a90e      	add	r1, sp, #56	; 0x38
 800d4b0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d4b4:	3b01      	subs	r3, #1
 800d4b6:	430a      	orrs	r2, r1
 800d4b8:	e789      	b.n	800d3ce <__kernel_rem_pio2+0x286>
 800d4ba:	3301      	adds	r3, #1
 800d4bc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d4c0:	2900      	cmp	r1, #0
 800d4c2:	d0fa      	beq.n	800d4ba <__kernel_rem_pio2+0x372>
 800d4c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d4c6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800d4ca:	446a      	add	r2, sp
 800d4cc:	3a98      	subs	r2, #152	; 0x98
 800d4ce:	920a      	str	r2, [sp, #40]	; 0x28
 800d4d0:	9a08      	ldr	r2, [sp, #32]
 800d4d2:	18e3      	adds	r3, r4, r3
 800d4d4:	18a5      	adds	r5, r4, r2
 800d4d6:	aa22      	add	r2, sp, #136	; 0x88
 800d4d8:	f104 0801 	add.w	r8, r4, #1
 800d4dc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800d4e0:	9304      	str	r3, [sp, #16]
 800d4e2:	9b04      	ldr	r3, [sp, #16]
 800d4e4:	4543      	cmp	r3, r8
 800d4e6:	da04      	bge.n	800d4f2 <__kernel_rem_pio2+0x3aa>
 800d4e8:	461c      	mov	r4, r3
 800d4ea:	e6a3      	b.n	800d234 <__kernel_rem_pio2+0xec>
 800d4ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	e7e4      	b.n	800d4bc <__kernel_rem_pio2+0x374>
 800d4f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d4f4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d4f8:	f7f3 f814 	bl	8000524 <__aeabi_i2d>
 800d4fc:	e8e5 0102 	strd	r0, r1, [r5], #8
 800d500:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d502:	46ab      	mov	fp, r5
 800d504:	461c      	mov	r4, r3
 800d506:	f04f 0900 	mov.w	r9, #0
 800d50a:	2600      	movs	r6, #0
 800d50c:	2700      	movs	r7, #0
 800d50e:	9b06      	ldr	r3, [sp, #24]
 800d510:	4599      	cmp	r9, r3
 800d512:	dd06      	ble.n	800d522 <__kernel_rem_pio2+0x3da>
 800d514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d516:	e8e3 6702 	strd	r6, r7, [r3], #8
 800d51a:	f108 0801 	add.w	r8, r8, #1
 800d51e:	930a      	str	r3, [sp, #40]	; 0x28
 800d520:	e7df      	b.n	800d4e2 <__kernel_rem_pio2+0x39a>
 800d522:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d526:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d52a:	f7f3 f865 	bl	80005f8 <__aeabi_dmul>
 800d52e:	4602      	mov	r2, r0
 800d530:	460b      	mov	r3, r1
 800d532:	4630      	mov	r0, r6
 800d534:	4639      	mov	r1, r7
 800d536:	f7f2 fea9 	bl	800028c <__adddf3>
 800d53a:	f109 0901 	add.w	r9, r9, #1
 800d53e:	4606      	mov	r6, r0
 800d540:	460f      	mov	r7, r1
 800d542:	e7e4      	b.n	800d50e <__kernel_rem_pio2+0x3c6>
 800d544:	3d01      	subs	r5, #1
 800d546:	e748      	b.n	800d3da <__kernel_rem_pio2+0x292>
 800d548:	ec47 6b10 	vmov	d0, r6, r7
 800d54c:	f1ca 0000 	rsb	r0, sl, #0
 800d550:	f000 fcda 	bl	800df08 <scalbn>
 800d554:	ec57 6b10 	vmov	r6, r7, d0
 800d558:	4ba0      	ldr	r3, [pc, #640]	; (800d7dc <__kernel_rem_pio2+0x694>)
 800d55a:	ee10 0a10 	vmov	r0, s0
 800d55e:	2200      	movs	r2, #0
 800d560:	4639      	mov	r1, r7
 800d562:	f7f3 facf 	bl	8000b04 <__aeabi_dcmpge>
 800d566:	b1f8      	cbz	r0, 800d5a8 <__kernel_rem_pio2+0x460>
 800d568:	4b9d      	ldr	r3, [pc, #628]	; (800d7e0 <__kernel_rem_pio2+0x698>)
 800d56a:	2200      	movs	r2, #0
 800d56c:	4630      	mov	r0, r6
 800d56e:	4639      	mov	r1, r7
 800d570:	f7f3 f842 	bl	80005f8 <__aeabi_dmul>
 800d574:	f7f3 faf0 	bl	8000b58 <__aeabi_d2iz>
 800d578:	4680      	mov	r8, r0
 800d57a:	f7f2 ffd3 	bl	8000524 <__aeabi_i2d>
 800d57e:	4b97      	ldr	r3, [pc, #604]	; (800d7dc <__kernel_rem_pio2+0x694>)
 800d580:	2200      	movs	r2, #0
 800d582:	f7f3 f839 	bl	80005f8 <__aeabi_dmul>
 800d586:	460b      	mov	r3, r1
 800d588:	4602      	mov	r2, r0
 800d58a:	4639      	mov	r1, r7
 800d58c:	4630      	mov	r0, r6
 800d58e:	f7f2 fe7b 	bl	8000288 <__aeabi_dsub>
 800d592:	f7f3 fae1 	bl	8000b58 <__aeabi_d2iz>
 800d596:	1c65      	adds	r5, r4, #1
 800d598:	ab0e      	add	r3, sp, #56	; 0x38
 800d59a:	f10a 0a18 	add.w	sl, sl, #24
 800d59e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d5a2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800d5a6:	e720      	b.n	800d3ea <__kernel_rem_pio2+0x2a2>
 800d5a8:	4630      	mov	r0, r6
 800d5aa:	4639      	mov	r1, r7
 800d5ac:	f7f3 fad4 	bl	8000b58 <__aeabi_d2iz>
 800d5b0:	ab0e      	add	r3, sp, #56	; 0x38
 800d5b2:	4625      	mov	r5, r4
 800d5b4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d5b8:	e717      	b.n	800d3ea <__kernel_rem_pio2+0x2a2>
 800d5ba:	ab0e      	add	r3, sp, #56	; 0x38
 800d5bc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800d5c0:	f7f2 ffb0 	bl	8000524 <__aeabi_i2d>
 800d5c4:	4632      	mov	r2, r6
 800d5c6:	463b      	mov	r3, r7
 800d5c8:	f7f3 f816 	bl	80005f8 <__aeabi_dmul>
 800d5cc:	4b84      	ldr	r3, [pc, #528]	; (800d7e0 <__kernel_rem_pio2+0x698>)
 800d5ce:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	4630      	mov	r0, r6
 800d5d6:	4639      	mov	r1, r7
 800d5d8:	f7f3 f80e 	bl	80005f8 <__aeabi_dmul>
 800d5dc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d5e0:	4606      	mov	r6, r0
 800d5e2:	460f      	mov	r7, r1
 800d5e4:	e70f      	b.n	800d406 <__kernel_rem_pio2+0x2be>
 800d5e6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800d5ea:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800d5ee:	f7f3 f803 	bl	80005f8 <__aeabi_dmul>
 800d5f2:	4602      	mov	r2, r0
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d5fa:	f7f2 fe47 	bl	800028c <__adddf3>
 800d5fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d602:	f108 0801 	add.w	r8, r8, #1
 800d606:	9b02      	ldr	r3, [sp, #8]
 800d608:	4598      	cmp	r8, r3
 800d60a:	dc01      	bgt.n	800d610 <__kernel_rem_pio2+0x4c8>
 800d60c:	45b8      	cmp	r8, r7
 800d60e:	ddea      	ble.n	800d5e6 <__kernel_rem_pio2+0x49e>
 800d610:	ed9d 7b06 	vldr	d7, [sp, #24]
 800d614:	ab4a      	add	r3, sp, #296	; 0x128
 800d616:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800d61a:	ed87 7b00 	vstr	d7, [r7]
 800d61e:	3e01      	subs	r6, #1
 800d620:	e6f8      	b.n	800d414 <__kernel_rem_pio2+0x2cc>
 800d622:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800d624:	2b02      	cmp	r3, #2
 800d626:	dc0b      	bgt.n	800d640 <__kernel_rem_pio2+0x4f8>
 800d628:	2b00      	cmp	r3, #0
 800d62a:	dc35      	bgt.n	800d698 <__kernel_rem_pio2+0x550>
 800d62c:	d059      	beq.n	800d6e2 <__kernel_rem_pio2+0x59a>
 800d62e:	9b04      	ldr	r3, [sp, #16]
 800d630:	f003 0007 	and.w	r0, r3, #7
 800d634:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800d638:	ecbd 8b02 	vpop	{d8}
 800d63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d640:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800d642:	2b03      	cmp	r3, #3
 800d644:	d1f3      	bne.n	800d62e <__kernel_rem_pio2+0x4e6>
 800d646:	ab4a      	add	r3, sp, #296	; 0x128
 800d648:	4423      	add	r3, r4
 800d64a:	9306      	str	r3, [sp, #24]
 800d64c:	461c      	mov	r4, r3
 800d64e:	469a      	mov	sl, r3
 800d650:	9502      	str	r5, [sp, #8]
 800d652:	9b02      	ldr	r3, [sp, #8]
 800d654:	2b00      	cmp	r3, #0
 800d656:	f1aa 0a08 	sub.w	sl, sl, #8
 800d65a:	dc6b      	bgt.n	800d734 <__kernel_rem_pio2+0x5ec>
 800d65c:	46aa      	mov	sl, r5
 800d65e:	f1ba 0f01 	cmp.w	sl, #1
 800d662:	f1a4 0408 	sub.w	r4, r4, #8
 800d666:	f300 8085 	bgt.w	800d774 <__kernel_rem_pio2+0x62c>
 800d66a:	9c06      	ldr	r4, [sp, #24]
 800d66c:	2000      	movs	r0, #0
 800d66e:	3408      	adds	r4, #8
 800d670:	2100      	movs	r1, #0
 800d672:	2d01      	cmp	r5, #1
 800d674:	f300 809d 	bgt.w	800d7b2 <__kernel_rem_pio2+0x66a>
 800d678:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800d67c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800d680:	f1bb 0f00 	cmp.w	fp, #0
 800d684:	f040 809b 	bne.w	800d7be <__kernel_rem_pio2+0x676>
 800d688:	9b01      	ldr	r3, [sp, #4]
 800d68a:	e9c3 5600 	strd	r5, r6, [r3]
 800d68e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800d692:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d696:	e7ca      	b.n	800d62e <__kernel_rem_pio2+0x4e6>
 800d698:	3408      	adds	r4, #8
 800d69a:	ab4a      	add	r3, sp, #296	; 0x128
 800d69c:	441c      	add	r4, r3
 800d69e:	462e      	mov	r6, r5
 800d6a0:	2000      	movs	r0, #0
 800d6a2:	2100      	movs	r1, #0
 800d6a4:	2e00      	cmp	r6, #0
 800d6a6:	da36      	bge.n	800d716 <__kernel_rem_pio2+0x5ce>
 800d6a8:	f1bb 0f00 	cmp.w	fp, #0
 800d6ac:	d039      	beq.n	800d722 <__kernel_rem_pio2+0x5da>
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d6b4:	9c01      	ldr	r4, [sp, #4]
 800d6b6:	e9c4 2300 	strd	r2, r3, [r4]
 800d6ba:	4602      	mov	r2, r0
 800d6bc:	460b      	mov	r3, r1
 800d6be:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800d6c2:	f7f2 fde1 	bl	8000288 <__aeabi_dsub>
 800d6c6:	ae4c      	add	r6, sp, #304	; 0x130
 800d6c8:	2401      	movs	r4, #1
 800d6ca:	42a5      	cmp	r5, r4
 800d6cc:	da2c      	bge.n	800d728 <__kernel_rem_pio2+0x5e0>
 800d6ce:	f1bb 0f00 	cmp.w	fp, #0
 800d6d2:	d002      	beq.n	800d6da <__kernel_rem_pio2+0x592>
 800d6d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d6d8:	4619      	mov	r1, r3
 800d6da:	9b01      	ldr	r3, [sp, #4]
 800d6dc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d6e0:	e7a5      	b.n	800d62e <__kernel_rem_pio2+0x4e6>
 800d6e2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800d6e6:	eb0d 0403 	add.w	r4, sp, r3
 800d6ea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800d6ee:	2000      	movs	r0, #0
 800d6f0:	2100      	movs	r1, #0
 800d6f2:	2d00      	cmp	r5, #0
 800d6f4:	da09      	bge.n	800d70a <__kernel_rem_pio2+0x5c2>
 800d6f6:	f1bb 0f00 	cmp.w	fp, #0
 800d6fa:	d002      	beq.n	800d702 <__kernel_rem_pio2+0x5ba>
 800d6fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d700:	4619      	mov	r1, r3
 800d702:	9b01      	ldr	r3, [sp, #4]
 800d704:	e9c3 0100 	strd	r0, r1, [r3]
 800d708:	e791      	b.n	800d62e <__kernel_rem_pio2+0x4e6>
 800d70a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d70e:	f7f2 fdbd 	bl	800028c <__adddf3>
 800d712:	3d01      	subs	r5, #1
 800d714:	e7ed      	b.n	800d6f2 <__kernel_rem_pio2+0x5aa>
 800d716:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d71a:	f7f2 fdb7 	bl	800028c <__adddf3>
 800d71e:	3e01      	subs	r6, #1
 800d720:	e7c0      	b.n	800d6a4 <__kernel_rem_pio2+0x55c>
 800d722:	4602      	mov	r2, r0
 800d724:	460b      	mov	r3, r1
 800d726:	e7c5      	b.n	800d6b4 <__kernel_rem_pio2+0x56c>
 800d728:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800d72c:	f7f2 fdae 	bl	800028c <__adddf3>
 800d730:	3401      	adds	r4, #1
 800d732:	e7ca      	b.n	800d6ca <__kernel_rem_pio2+0x582>
 800d734:	e9da 8900 	ldrd	r8, r9, [sl]
 800d738:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d73c:	9b02      	ldr	r3, [sp, #8]
 800d73e:	3b01      	subs	r3, #1
 800d740:	9302      	str	r3, [sp, #8]
 800d742:	4632      	mov	r2, r6
 800d744:	463b      	mov	r3, r7
 800d746:	4640      	mov	r0, r8
 800d748:	4649      	mov	r1, r9
 800d74a:	f7f2 fd9f 	bl	800028c <__adddf3>
 800d74e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d752:	4602      	mov	r2, r0
 800d754:	460b      	mov	r3, r1
 800d756:	4640      	mov	r0, r8
 800d758:	4649      	mov	r1, r9
 800d75a:	f7f2 fd95 	bl	8000288 <__aeabi_dsub>
 800d75e:	4632      	mov	r2, r6
 800d760:	463b      	mov	r3, r7
 800d762:	f7f2 fd93 	bl	800028c <__adddf3>
 800d766:	ed9d 7b08 	vldr	d7, [sp, #32]
 800d76a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d76e:	ed8a 7b00 	vstr	d7, [sl]
 800d772:	e76e      	b.n	800d652 <__kernel_rem_pio2+0x50a>
 800d774:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d778:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800d77c:	4640      	mov	r0, r8
 800d77e:	4632      	mov	r2, r6
 800d780:	463b      	mov	r3, r7
 800d782:	4649      	mov	r1, r9
 800d784:	f7f2 fd82 	bl	800028c <__adddf3>
 800d788:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d78c:	4602      	mov	r2, r0
 800d78e:	460b      	mov	r3, r1
 800d790:	4640      	mov	r0, r8
 800d792:	4649      	mov	r1, r9
 800d794:	f7f2 fd78 	bl	8000288 <__aeabi_dsub>
 800d798:	4632      	mov	r2, r6
 800d79a:	463b      	mov	r3, r7
 800d79c:	f7f2 fd76 	bl	800028c <__adddf3>
 800d7a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d7a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d7a8:	ed84 7b00 	vstr	d7, [r4]
 800d7ac:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d7b0:	e755      	b.n	800d65e <__kernel_rem_pio2+0x516>
 800d7b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d7b6:	f7f2 fd69 	bl	800028c <__adddf3>
 800d7ba:	3d01      	subs	r5, #1
 800d7bc:	e759      	b.n	800d672 <__kernel_rem_pio2+0x52a>
 800d7be:	9b01      	ldr	r3, [sp, #4]
 800d7c0:	9a01      	ldr	r2, [sp, #4]
 800d7c2:	601d      	str	r5, [r3, #0]
 800d7c4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800d7c8:	605c      	str	r4, [r3, #4]
 800d7ca:	609f      	str	r7, [r3, #8]
 800d7cc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800d7d0:	60d3      	str	r3, [r2, #12]
 800d7d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d7d6:	6110      	str	r0, [r2, #16]
 800d7d8:	6153      	str	r3, [r2, #20]
 800d7da:	e728      	b.n	800d62e <__kernel_rem_pio2+0x4e6>
 800d7dc:	41700000 	.word	0x41700000
 800d7e0:	3e700000 	.word	0x3e700000
 800d7e4:	00000000 	.word	0x00000000

0800d7e8 <__kernel_sin>:
 800d7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7ec:	ed2d 8b04 	vpush	{d8-d9}
 800d7f0:	eeb0 8a41 	vmov.f32	s16, s2
 800d7f4:	eef0 8a61 	vmov.f32	s17, s3
 800d7f8:	ec55 4b10 	vmov	r4, r5, d0
 800d7fc:	b083      	sub	sp, #12
 800d7fe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d802:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d806:	9001      	str	r0, [sp, #4]
 800d808:	da06      	bge.n	800d818 <__kernel_sin+0x30>
 800d80a:	ee10 0a10 	vmov	r0, s0
 800d80e:	4629      	mov	r1, r5
 800d810:	f7f3 f9a2 	bl	8000b58 <__aeabi_d2iz>
 800d814:	2800      	cmp	r0, #0
 800d816:	d051      	beq.n	800d8bc <__kernel_sin+0xd4>
 800d818:	4622      	mov	r2, r4
 800d81a:	462b      	mov	r3, r5
 800d81c:	4620      	mov	r0, r4
 800d81e:	4629      	mov	r1, r5
 800d820:	f7f2 feea 	bl	80005f8 <__aeabi_dmul>
 800d824:	4682      	mov	sl, r0
 800d826:	468b      	mov	fp, r1
 800d828:	4602      	mov	r2, r0
 800d82a:	460b      	mov	r3, r1
 800d82c:	4620      	mov	r0, r4
 800d82e:	4629      	mov	r1, r5
 800d830:	f7f2 fee2 	bl	80005f8 <__aeabi_dmul>
 800d834:	a341      	add	r3, pc, #260	; (adr r3, 800d93c <__kernel_sin+0x154>)
 800d836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d83a:	4680      	mov	r8, r0
 800d83c:	4689      	mov	r9, r1
 800d83e:	4650      	mov	r0, sl
 800d840:	4659      	mov	r1, fp
 800d842:	f7f2 fed9 	bl	80005f8 <__aeabi_dmul>
 800d846:	a33f      	add	r3, pc, #252	; (adr r3, 800d944 <__kernel_sin+0x15c>)
 800d848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d84c:	f7f2 fd1c 	bl	8000288 <__aeabi_dsub>
 800d850:	4652      	mov	r2, sl
 800d852:	465b      	mov	r3, fp
 800d854:	f7f2 fed0 	bl	80005f8 <__aeabi_dmul>
 800d858:	a33c      	add	r3, pc, #240	; (adr r3, 800d94c <__kernel_sin+0x164>)
 800d85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d85e:	f7f2 fd15 	bl	800028c <__adddf3>
 800d862:	4652      	mov	r2, sl
 800d864:	465b      	mov	r3, fp
 800d866:	f7f2 fec7 	bl	80005f8 <__aeabi_dmul>
 800d86a:	a33a      	add	r3, pc, #232	; (adr r3, 800d954 <__kernel_sin+0x16c>)
 800d86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d870:	f7f2 fd0a 	bl	8000288 <__aeabi_dsub>
 800d874:	4652      	mov	r2, sl
 800d876:	465b      	mov	r3, fp
 800d878:	f7f2 febe 	bl	80005f8 <__aeabi_dmul>
 800d87c:	a337      	add	r3, pc, #220	; (adr r3, 800d95c <__kernel_sin+0x174>)
 800d87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d882:	f7f2 fd03 	bl	800028c <__adddf3>
 800d886:	9b01      	ldr	r3, [sp, #4]
 800d888:	4606      	mov	r6, r0
 800d88a:	460f      	mov	r7, r1
 800d88c:	b9eb      	cbnz	r3, 800d8ca <__kernel_sin+0xe2>
 800d88e:	4602      	mov	r2, r0
 800d890:	460b      	mov	r3, r1
 800d892:	4650      	mov	r0, sl
 800d894:	4659      	mov	r1, fp
 800d896:	f7f2 feaf 	bl	80005f8 <__aeabi_dmul>
 800d89a:	a325      	add	r3, pc, #148	; (adr r3, 800d930 <__kernel_sin+0x148>)
 800d89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a0:	f7f2 fcf2 	bl	8000288 <__aeabi_dsub>
 800d8a4:	4642      	mov	r2, r8
 800d8a6:	464b      	mov	r3, r9
 800d8a8:	f7f2 fea6 	bl	80005f8 <__aeabi_dmul>
 800d8ac:	4602      	mov	r2, r0
 800d8ae:	460b      	mov	r3, r1
 800d8b0:	4620      	mov	r0, r4
 800d8b2:	4629      	mov	r1, r5
 800d8b4:	f7f2 fcea 	bl	800028c <__adddf3>
 800d8b8:	4604      	mov	r4, r0
 800d8ba:	460d      	mov	r5, r1
 800d8bc:	ec45 4b10 	vmov	d0, r4, r5
 800d8c0:	b003      	add	sp, #12
 800d8c2:	ecbd 8b04 	vpop	{d8-d9}
 800d8c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ca:	4b1b      	ldr	r3, [pc, #108]	; (800d938 <__kernel_sin+0x150>)
 800d8cc:	ec51 0b18 	vmov	r0, r1, d8
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	f7f2 fe91 	bl	80005f8 <__aeabi_dmul>
 800d8d6:	4632      	mov	r2, r6
 800d8d8:	ec41 0b19 	vmov	d9, r0, r1
 800d8dc:	463b      	mov	r3, r7
 800d8de:	4640      	mov	r0, r8
 800d8e0:	4649      	mov	r1, r9
 800d8e2:	f7f2 fe89 	bl	80005f8 <__aeabi_dmul>
 800d8e6:	4602      	mov	r2, r0
 800d8e8:	460b      	mov	r3, r1
 800d8ea:	ec51 0b19 	vmov	r0, r1, d9
 800d8ee:	f7f2 fccb 	bl	8000288 <__aeabi_dsub>
 800d8f2:	4652      	mov	r2, sl
 800d8f4:	465b      	mov	r3, fp
 800d8f6:	f7f2 fe7f 	bl	80005f8 <__aeabi_dmul>
 800d8fa:	ec53 2b18 	vmov	r2, r3, d8
 800d8fe:	f7f2 fcc3 	bl	8000288 <__aeabi_dsub>
 800d902:	a30b      	add	r3, pc, #44	; (adr r3, 800d930 <__kernel_sin+0x148>)
 800d904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d908:	4606      	mov	r6, r0
 800d90a:	460f      	mov	r7, r1
 800d90c:	4640      	mov	r0, r8
 800d90e:	4649      	mov	r1, r9
 800d910:	f7f2 fe72 	bl	80005f8 <__aeabi_dmul>
 800d914:	4602      	mov	r2, r0
 800d916:	460b      	mov	r3, r1
 800d918:	4630      	mov	r0, r6
 800d91a:	4639      	mov	r1, r7
 800d91c:	f7f2 fcb6 	bl	800028c <__adddf3>
 800d920:	4602      	mov	r2, r0
 800d922:	460b      	mov	r3, r1
 800d924:	4620      	mov	r0, r4
 800d926:	4629      	mov	r1, r5
 800d928:	f7f2 fcae 	bl	8000288 <__aeabi_dsub>
 800d92c:	e7c4      	b.n	800d8b8 <__kernel_sin+0xd0>
 800d92e:	bf00      	nop
 800d930:	55555549 	.word	0x55555549
 800d934:	3fc55555 	.word	0x3fc55555
 800d938:	3fe00000 	.word	0x3fe00000
 800d93c:	5acfd57c 	.word	0x5acfd57c
 800d940:	3de5d93a 	.word	0x3de5d93a
 800d944:	8a2b9ceb 	.word	0x8a2b9ceb
 800d948:	3e5ae5e6 	.word	0x3e5ae5e6
 800d94c:	57b1fe7d 	.word	0x57b1fe7d
 800d950:	3ec71de3 	.word	0x3ec71de3
 800d954:	19c161d5 	.word	0x19c161d5
 800d958:	3f2a01a0 	.word	0x3f2a01a0
 800d95c:	1110f8a6 	.word	0x1110f8a6
 800d960:	3f811111 	.word	0x3f811111
 800d964:	00000000 	.word	0x00000000

0800d968 <__kernel_tan>:
 800d968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d96c:	ed2d 8b06 	vpush	{d8-d10}
 800d970:	ec5b ab10 	vmov	sl, fp, d0
 800d974:	4be0      	ldr	r3, [pc, #896]	; (800dcf8 <__kernel_tan+0x390>)
 800d976:	b083      	sub	sp, #12
 800d978:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800d97c:	429f      	cmp	r7, r3
 800d97e:	ec59 8b11 	vmov	r8, r9, d1
 800d982:	4606      	mov	r6, r0
 800d984:	f8cd b000 	str.w	fp, [sp]
 800d988:	dc61      	bgt.n	800da4e <__kernel_tan+0xe6>
 800d98a:	ee10 0a10 	vmov	r0, s0
 800d98e:	4659      	mov	r1, fp
 800d990:	f7f3 f8e2 	bl	8000b58 <__aeabi_d2iz>
 800d994:	4605      	mov	r5, r0
 800d996:	2800      	cmp	r0, #0
 800d998:	f040 8083 	bne.w	800daa2 <__kernel_tan+0x13a>
 800d99c:	1c73      	adds	r3, r6, #1
 800d99e:	4652      	mov	r2, sl
 800d9a0:	4313      	orrs	r3, r2
 800d9a2:	433b      	orrs	r3, r7
 800d9a4:	d112      	bne.n	800d9cc <__kernel_tan+0x64>
 800d9a6:	ec4b ab10 	vmov	d0, sl, fp
 800d9aa:	f7fd ff4d 	bl	800b848 <fabs>
 800d9ae:	49d3      	ldr	r1, [pc, #844]	; (800dcfc <__kernel_tan+0x394>)
 800d9b0:	ec53 2b10 	vmov	r2, r3, d0
 800d9b4:	2000      	movs	r0, #0
 800d9b6:	f7f2 ff49 	bl	800084c <__aeabi_ddiv>
 800d9ba:	4682      	mov	sl, r0
 800d9bc:	468b      	mov	fp, r1
 800d9be:	ec4b ab10 	vmov	d0, sl, fp
 800d9c2:	b003      	add	sp, #12
 800d9c4:	ecbd 8b06 	vpop	{d8-d10}
 800d9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9cc:	2e01      	cmp	r6, #1
 800d9ce:	d0f6      	beq.n	800d9be <__kernel_tan+0x56>
 800d9d0:	4642      	mov	r2, r8
 800d9d2:	464b      	mov	r3, r9
 800d9d4:	4650      	mov	r0, sl
 800d9d6:	4659      	mov	r1, fp
 800d9d8:	f7f2 fc58 	bl	800028c <__adddf3>
 800d9dc:	4602      	mov	r2, r0
 800d9de:	460b      	mov	r3, r1
 800d9e0:	460f      	mov	r7, r1
 800d9e2:	2000      	movs	r0, #0
 800d9e4:	49c6      	ldr	r1, [pc, #792]	; (800dd00 <__kernel_tan+0x398>)
 800d9e6:	f7f2 ff31 	bl	800084c <__aeabi_ddiv>
 800d9ea:	e9cd 0100 	strd	r0, r1, [sp]
 800d9ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d9f2:	462e      	mov	r6, r5
 800d9f4:	4652      	mov	r2, sl
 800d9f6:	462c      	mov	r4, r5
 800d9f8:	4630      	mov	r0, r6
 800d9fa:	461d      	mov	r5, r3
 800d9fc:	4639      	mov	r1, r7
 800d9fe:	465b      	mov	r3, fp
 800da00:	f7f2 fc42 	bl	8000288 <__aeabi_dsub>
 800da04:	4602      	mov	r2, r0
 800da06:	460b      	mov	r3, r1
 800da08:	4640      	mov	r0, r8
 800da0a:	4649      	mov	r1, r9
 800da0c:	f7f2 fc3c 	bl	8000288 <__aeabi_dsub>
 800da10:	4632      	mov	r2, r6
 800da12:	462b      	mov	r3, r5
 800da14:	f7f2 fdf0 	bl	80005f8 <__aeabi_dmul>
 800da18:	4632      	mov	r2, r6
 800da1a:	4680      	mov	r8, r0
 800da1c:	4689      	mov	r9, r1
 800da1e:	462b      	mov	r3, r5
 800da20:	4630      	mov	r0, r6
 800da22:	4639      	mov	r1, r7
 800da24:	f7f2 fde8 	bl	80005f8 <__aeabi_dmul>
 800da28:	4bb4      	ldr	r3, [pc, #720]	; (800dcfc <__kernel_tan+0x394>)
 800da2a:	2200      	movs	r2, #0
 800da2c:	f7f2 fc2e 	bl	800028c <__adddf3>
 800da30:	4602      	mov	r2, r0
 800da32:	460b      	mov	r3, r1
 800da34:	4640      	mov	r0, r8
 800da36:	4649      	mov	r1, r9
 800da38:	f7f2 fc28 	bl	800028c <__adddf3>
 800da3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da40:	f7f2 fdda 	bl	80005f8 <__aeabi_dmul>
 800da44:	4622      	mov	r2, r4
 800da46:	462b      	mov	r3, r5
 800da48:	f7f2 fc20 	bl	800028c <__adddf3>
 800da4c:	e7b5      	b.n	800d9ba <__kernel_tan+0x52>
 800da4e:	4bad      	ldr	r3, [pc, #692]	; (800dd04 <__kernel_tan+0x39c>)
 800da50:	429f      	cmp	r7, r3
 800da52:	dd26      	ble.n	800daa2 <__kernel_tan+0x13a>
 800da54:	9b00      	ldr	r3, [sp, #0]
 800da56:	2b00      	cmp	r3, #0
 800da58:	da09      	bge.n	800da6e <__kernel_tan+0x106>
 800da5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800da5e:	469b      	mov	fp, r3
 800da60:	ee10 aa10 	vmov	sl, s0
 800da64:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800da68:	ee11 8a10 	vmov	r8, s2
 800da6c:	4699      	mov	r9, r3
 800da6e:	4652      	mov	r2, sl
 800da70:	465b      	mov	r3, fp
 800da72:	a183      	add	r1, pc, #524	; (adr r1, 800dc80 <__kernel_tan+0x318>)
 800da74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da78:	f7f2 fc06 	bl	8000288 <__aeabi_dsub>
 800da7c:	4642      	mov	r2, r8
 800da7e:	464b      	mov	r3, r9
 800da80:	4604      	mov	r4, r0
 800da82:	460d      	mov	r5, r1
 800da84:	a180      	add	r1, pc, #512	; (adr r1, 800dc88 <__kernel_tan+0x320>)
 800da86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da8a:	f7f2 fbfd 	bl	8000288 <__aeabi_dsub>
 800da8e:	4622      	mov	r2, r4
 800da90:	462b      	mov	r3, r5
 800da92:	f7f2 fbfb 	bl	800028c <__adddf3>
 800da96:	f04f 0800 	mov.w	r8, #0
 800da9a:	4682      	mov	sl, r0
 800da9c:	468b      	mov	fp, r1
 800da9e:	f04f 0900 	mov.w	r9, #0
 800daa2:	4652      	mov	r2, sl
 800daa4:	465b      	mov	r3, fp
 800daa6:	4650      	mov	r0, sl
 800daa8:	4659      	mov	r1, fp
 800daaa:	f7f2 fda5 	bl	80005f8 <__aeabi_dmul>
 800daae:	4602      	mov	r2, r0
 800dab0:	460b      	mov	r3, r1
 800dab2:	ec43 2b18 	vmov	d8, r2, r3
 800dab6:	f7f2 fd9f 	bl	80005f8 <__aeabi_dmul>
 800daba:	ec53 2b18 	vmov	r2, r3, d8
 800dabe:	4604      	mov	r4, r0
 800dac0:	460d      	mov	r5, r1
 800dac2:	4650      	mov	r0, sl
 800dac4:	4659      	mov	r1, fp
 800dac6:	f7f2 fd97 	bl	80005f8 <__aeabi_dmul>
 800daca:	a371      	add	r3, pc, #452	; (adr r3, 800dc90 <__kernel_tan+0x328>)
 800dacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dad0:	ec41 0b19 	vmov	d9, r0, r1
 800dad4:	4620      	mov	r0, r4
 800dad6:	4629      	mov	r1, r5
 800dad8:	f7f2 fd8e 	bl	80005f8 <__aeabi_dmul>
 800dadc:	a36e      	add	r3, pc, #440	; (adr r3, 800dc98 <__kernel_tan+0x330>)
 800dade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae2:	f7f2 fbd3 	bl	800028c <__adddf3>
 800dae6:	4622      	mov	r2, r4
 800dae8:	462b      	mov	r3, r5
 800daea:	f7f2 fd85 	bl	80005f8 <__aeabi_dmul>
 800daee:	a36c      	add	r3, pc, #432	; (adr r3, 800dca0 <__kernel_tan+0x338>)
 800daf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf4:	f7f2 fbca 	bl	800028c <__adddf3>
 800daf8:	4622      	mov	r2, r4
 800dafa:	462b      	mov	r3, r5
 800dafc:	f7f2 fd7c 	bl	80005f8 <__aeabi_dmul>
 800db00:	a369      	add	r3, pc, #420	; (adr r3, 800dca8 <__kernel_tan+0x340>)
 800db02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db06:	f7f2 fbc1 	bl	800028c <__adddf3>
 800db0a:	4622      	mov	r2, r4
 800db0c:	462b      	mov	r3, r5
 800db0e:	f7f2 fd73 	bl	80005f8 <__aeabi_dmul>
 800db12:	a367      	add	r3, pc, #412	; (adr r3, 800dcb0 <__kernel_tan+0x348>)
 800db14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db18:	f7f2 fbb8 	bl	800028c <__adddf3>
 800db1c:	4622      	mov	r2, r4
 800db1e:	462b      	mov	r3, r5
 800db20:	f7f2 fd6a 	bl	80005f8 <__aeabi_dmul>
 800db24:	a364      	add	r3, pc, #400	; (adr r3, 800dcb8 <__kernel_tan+0x350>)
 800db26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db2a:	f7f2 fbaf 	bl	800028c <__adddf3>
 800db2e:	ec53 2b18 	vmov	r2, r3, d8
 800db32:	f7f2 fd61 	bl	80005f8 <__aeabi_dmul>
 800db36:	a362      	add	r3, pc, #392	; (adr r3, 800dcc0 <__kernel_tan+0x358>)
 800db38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db3c:	ec41 0b1a 	vmov	d10, r0, r1
 800db40:	4620      	mov	r0, r4
 800db42:	4629      	mov	r1, r5
 800db44:	f7f2 fd58 	bl	80005f8 <__aeabi_dmul>
 800db48:	a35f      	add	r3, pc, #380	; (adr r3, 800dcc8 <__kernel_tan+0x360>)
 800db4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4e:	f7f2 fb9d 	bl	800028c <__adddf3>
 800db52:	4622      	mov	r2, r4
 800db54:	462b      	mov	r3, r5
 800db56:	f7f2 fd4f 	bl	80005f8 <__aeabi_dmul>
 800db5a:	a35d      	add	r3, pc, #372	; (adr r3, 800dcd0 <__kernel_tan+0x368>)
 800db5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db60:	f7f2 fb94 	bl	800028c <__adddf3>
 800db64:	4622      	mov	r2, r4
 800db66:	462b      	mov	r3, r5
 800db68:	f7f2 fd46 	bl	80005f8 <__aeabi_dmul>
 800db6c:	a35a      	add	r3, pc, #360	; (adr r3, 800dcd8 <__kernel_tan+0x370>)
 800db6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db72:	f7f2 fb8b 	bl	800028c <__adddf3>
 800db76:	4622      	mov	r2, r4
 800db78:	462b      	mov	r3, r5
 800db7a:	f7f2 fd3d 	bl	80005f8 <__aeabi_dmul>
 800db7e:	a358      	add	r3, pc, #352	; (adr r3, 800dce0 <__kernel_tan+0x378>)
 800db80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db84:	f7f2 fb82 	bl	800028c <__adddf3>
 800db88:	4622      	mov	r2, r4
 800db8a:	462b      	mov	r3, r5
 800db8c:	f7f2 fd34 	bl	80005f8 <__aeabi_dmul>
 800db90:	a355      	add	r3, pc, #340	; (adr r3, 800dce8 <__kernel_tan+0x380>)
 800db92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db96:	f7f2 fb79 	bl	800028c <__adddf3>
 800db9a:	4602      	mov	r2, r0
 800db9c:	460b      	mov	r3, r1
 800db9e:	ec51 0b1a 	vmov	r0, r1, d10
 800dba2:	f7f2 fb73 	bl	800028c <__adddf3>
 800dba6:	ec53 2b19 	vmov	r2, r3, d9
 800dbaa:	f7f2 fd25 	bl	80005f8 <__aeabi_dmul>
 800dbae:	4642      	mov	r2, r8
 800dbb0:	464b      	mov	r3, r9
 800dbb2:	f7f2 fb6b 	bl	800028c <__adddf3>
 800dbb6:	ec53 2b18 	vmov	r2, r3, d8
 800dbba:	f7f2 fd1d 	bl	80005f8 <__aeabi_dmul>
 800dbbe:	4642      	mov	r2, r8
 800dbc0:	464b      	mov	r3, r9
 800dbc2:	f7f2 fb63 	bl	800028c <__adddf3>
 800dbc6:	a34a      	add	r3, pc, #296	; (adr r3, 800dcf0 <__kernel_tan+0x388>)
 800dbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbcc:	4604      	mov	r4, r0
 800dbce:	460d      	mov	r5, r1
 800dbd0:	ec51 0b19 	vmov	r0, r1, d9
 800dbd4:	f7f2 fd10 	bl	80005f8 <__aeabi_dmul>
 800dbd8:	4622      	mov	r2, r4
 800dbda:	462b      	mov	r3, r5
 800dbdc:	f7f2 fb56 	bl	800028c <__adddf3>
 800dbe0:	460b      	mov	r3, r1
 800dbe2:	ec41 0b18 	vmov	d8, r0, r1
 800dbe6:	4602      	mov	r2, r0
 800dbe8:	4659      	mov	r1, fp
 800dbea:	4650      	mov	r0, sl
 800dbec:	f7f2 fb4e 	bl	800028c <__adddf3>
 800dbf0:	4b44      	ldr	r3, [pc, #272]	; (800dd04 <__kernel_tan+0x39c>)
 800dbf2:	429f      	cmp	r7, r3
 800dbf4:	4604      	mov	r4, r0
 800dbf6:	460d      	mov	r5, r1
 800dbf8:	f340 8086 	ble.w	800dd08 <__kernel_tan+0x3a0>
 800dbfc:	4630      	mov	r0, r6
 800dbfe:	f7f2 fc91 	bl	8000524 <__aeabi_i2d>
 800dc02:	4622      	mov	r2, r4
 800dc04:	4680      	mov	r8, r0
 800dc06:	4689      	mov	r9, r1
 800dc08:	462b      	mov	r3, r5
 800dc0a:	4620      	mov	r0, r4
 800dc0c:	4629      	mov	r1, r5
 800dc0e:	f7f2 fcf3 	bl	80005f8 <__aeabi_dmul>
 800dc12:	4642      	mov	r2, r8
 800dc14:	4606      	mov	r6, r0
 800dc16:	460f      	mov	r7, r1
 800dc18:	464b      	mov	r3, r9
 800dc1a:	4620      	mov	r0, r4
 800dc1c:	4629      	mov	r1, r5
 800dc1e:	f7f2 fb35 	bl	800028c <__adddf3>
 800dc22:	4602      	mov	r2, r0
 800dc24:	460b      	mov	r3, r1
 800dc26:	4630      	mov	r0, r6
 800dc28:	4639      	mov	r1, r7
 800dc2a:	f7f2 fe0f 	bl	800084c <__aeabi_ddiv>
 800dc2e:	ec53 2b18 	vmov	r2, r3, d8
 800dc32:	f7f2 fb29 	bl	8000288 <__aeabi_dsub>
 800dc36:	4602      	mov	r2, r0
 800dc38:	460b      	mov	r3, r1
 800dc3a:	4650      	mov	r0, sl
 800dc3c:	4659      	mov	r1, fp
 800dc3e:	f7f2 fb23 	bl	8000288 <__aeabi_dsub>
 800dc42:	4602      	mov	r2, r0
 800dc44:	460b      	mov	r3, r1
 800dc46:	f7f2 fb21 	bl	800028c <__adddf3>
 800dc4a:	4602      	mov	r2, r0
 800dc4c:	460b      	mov	r3, r1
 800dc4e:	4640      	mov	r0, r8
 800dc50:	4649      	mov	r1, r9
 800dc52:	f7f2 fb19 	bl	8000288 <__aeabi_dsub>
 800dc56:	9b00      	ldr	r3, [sp, #0]
 800dc58:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800dc5c:	f00a 0a02 	and.w	sl, sl, #2
 800dc60:	4604      	mov	r4, r0
 800dc62:	f1ca 0001 	rsb	r0, sl, #1
 800dc66:	460d      	mov	r5, r1
 800dc68:	f7f2 fc5c 	bl	8000524 <__aeabi_i2d>
 800dc6c:	4602      	mov	r2, r0
 800dc6e:	460b      	mov	r3, r1
 800dc70:	4620      	mov	r0, r4
 800dc72:	4629      	mov	r1, r5
 800dc74:	f7f2 fcc0 	bl	80005f8 <__aeabi_dmul>
 800dc78:	e69f      	b.n	800d9ba <__kernel_tan+0x52>
 800dc7a:	bf00      	nop
 800dc7c:	f3af 8000 	nop.w
 800dc80:	54442d18 	.word	0x54442d18
 800dc84:	3fe921fb 	.word	0x3fe921fb
 800dc88:	33145c07 	.word	0x33145c07
 800dc8c:	3c81a626 	.word	0x3c81a626
 800dc90:	74bf7ad4 	.word	0x74bf7ad4
 800dc94:	3efb2a70 	.word	0x3efb2a70
 800dc98:	32f0a7e9 	.word	0x32f0a7e9
 800dc9c:	3f12b80f 	.word	0x3f12b80f
 800dca0:	1a8d1068 	.word	0x1a8d1068
 800dca4:	3f3026f7 	.word	0x3f3026f7
 800dca8:	fee08315 	.word	0xfee08315
 800dcac:	3f57dbc8 	.word	0x3f57dbc8
 800dcb0:	e96e8493 	.word	0xe96e8493
 800dcb4:	3f8226e3 	.word	0x3f8226e3
 800dcb8:	1bb341fe 	.word	0x1bb341fe
 800dcbc:	3faba1ba 	.word	0x3faba1ba
 800dcc0:	db605373 	.word	0xdb605373
 800dcc4:	bef375cb 	.word	0xbef375cb
 800dcc8:	a03792a6 	.word	0xa03792a6
 800dccc:	3f147e88 	.word	0x3f147e88
 800dcd0:	f2f26501 	.word	0xf2f26501
 800dcd4:	3f4344d8 	.word	0x3f4344d8
 800dcd8:	c9560328 	.word	0xc9560328
 800dcdc:	3f6d6d22 	.word	0x3f6d6d22
 800dce0:	8406d637 	.word	0x8406d637
 800dce4:	3f9664f4 	.word	0x3f9664f4
 800dce8:	1110fe7a 	.word	0x1110fe7a
 800dcec:	3fc11111 	.word	0x3fc11111
 800dcf0:	55555563 	.word	0x55555563
 800dcf4:	3fd55555 	.word	0x3fd55555
 800dcf8:	3e2fffff 	.word	0x3e2fffff
 800dcfc:	3ff00000 	.word	0x3ff00000
 800dd00:	bff00000 	.word	0xbff00000
 800dd04:	3fe59427 	.word	0x3fe59427
 800dd08:	2e01      	cmp	r6, #1
 800dd0a:	d02f      	beq.n	800dd6c <__kernel_tan+0x404>
 800dd0c:	460f      	mov	r7, r1
 800dd0e:	4602      	mov	r2, r0
 800dd10:	460b      	mov	r3, r1
 800dd12:	4689      	mov	r9, r1
 800dd14:	2000      	movs	r0, #0
 800dd16:	4917      	ldr	r1, [pc, #92]	; (800dd74 <__kernel_tan+0x40c>)
 800dd18:	f7f2 fd98 	bl	800084c <__aeabi_ddiv>
 800dd1c:	2600      	movs	r6, #0
 800dd1e:	e9cd 0100 	strd	r0, r1, [sp]
 800dd22:	4652      	mov	r2, sl
 800dd24:	465b      	mov	r3, fp
 800dd26:	4630      	mov	r0, r6
 800dd28:	4639      	mov	r1, r7
 800dd2a:	f7f2 faad 	bl	8000288 <__aeabi_dsub>
 800dd2e:	e9dd 4500 	ldrd	r4, r5, [sp]
 800dd32:	4602      	mov	r2, r0
 800dd34:	460b      	mov	r3, r1
 800dd36:	ec51 0b18 	vmov	r0, r1, d8
 800dd3a:	f7f2 faa5 	bl	8000288 <__aeabi_dsub>
 800dd3e:	4632      	mov	r2, r6
 800dd40:	462b      	mov	r3, r5
 800dd42:	f7f2 fc59 	bl	80005f8 <__aeabi_dmul>
 800dd46:	46b0      	mov	r8, r6
 800dd48:	460f      	mov	r7, r1
 800dd4a:	4642      	mov	r2, r8
 800dd4c:	462b      	mov	r3, r5
 800dd4e:	4634      	mov	r4, r6
 800dd50:	4649      	mov	r1, r9
 800dd52:	4606      	mov	r6, r0
 800dd54:	4640      	mov	r0, r8
 800dd56:	f7f2 fc4f 	bl	80005f8 <__aeabi_dmul>
 800dd5a:	4b07      	ldr	r3, [pc, #28]	; (800dd78 <__kernel_tan+0x410>)
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	f7f2 fa95 	bl	800028c <__adddf3>
 800dd62:	4602      	mov	r2, r0
 800dd64:	460b      	mov	r3, r1
 800dd66:	4630      	mov	r0, r6
 800dd68:	4639      	mov	r1, r7
 800dd6a:	e665      	b.n	800da38 <__kernel_tan+0xd0>
 800dd6c:	4682      	mov	sl, r0
 800dd6e:	468b      	mov	fp, r1
 800dd70:	e625      	b.n	800d9be <__kernel_tan+0x56>
 800dd72:	bf00      	nop
 800dd74:	bff00000 	.word	0xbff00000
 800dd78:	3ff00000 	.word	0x3ff00000

0800dd7c <with_errno>:
 800dd7c:	b570      	push	{r4, r5, r6, lr}
 800dd7e:	4604      	mov	r4, r0
 800dd80:	460d      	mov	r5, r1
 800dd82:	4616      	mov	r6, r2
 800dd84:	f7fa fe08 	bl	8008998 <__errno>
 800dd88:	4629      	mov	r1, r5
 800dd8a:	6006      	str	r6, [r0, #0]
 800dd8c:	4620      	mov	r0, r4
 800dd8e:	bd70      	pop	{r4, r5, r6, pc}

0800dd90 <xflow>:
 800dd90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd92:	4614      	mov	r4, r2
 800dd94:	461d      	mov	r5, r3
 800dd96:	b108      	cbz	r0, 800dd9c <xflow+0xc>
 800dd98:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dd9c:	e9cd 2300 	strd	r2, r3, [sp]
 800dda0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dda4:	4620      	mov	r0, r4
 800dda6:	4629      	mov	r1, r5
 800dda8:	f7f2 fc26 	bl	80005f8 <__aeabi_dmul>
 800ddac:	2222      	movs	r2, #34	; 0x22
 800ddae:	b003      	add	sp, #12
 800ddb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ddb4:	f7ff bfe2 	b.w	800dd7c <with_errno>

0800ddb8 <__math_uflow>:
 800ddb8:	b508      	push	{r3, lr}
 800ddba:	2200      	movs	r2, #0
 800ddbc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ddc0:	f7ff ffe6 	bl	800dd90 <xflow>
 800ddc4:	ec41 0b10 	vmov	d0, r0, r1
 800ddc8:	bd08      	pop	{r3, pc}

0800ddca <__math_oflow>:
 800ddca:	b508      	push	{r3, lr}
 800ddcc:	2200      	movs	r2, #0
 800ddce:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ddd2:	f7ff ffdd 	bl	800dd90 <xflow>
 800ddd6:	ec41 0b10 	vmov	d0, r0, r1
 800ddda:	bd08      	pop	{r3, pc}

0800dddc <finite>:
 800dddc:	b082      	sub	sp, #8
 800ddde:	ed8d 0b00 	vstr	d0, [sp]
 800dde2:	9801      	ldr	r0, [sp, #4]
 800dde4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800dde8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ddec:	0fc0      	lsrs	r0, r0, #31
 800ddee:	b002      	add	sp, #8
 800ddf0:	4770      	bx	lr
 800ddf2:	0000      	movs	r0, r0
 800ddf4:	0000      	movs	r0, r0
	...

0800ddf8 <floor>:
 800ddf8:	ec51 0b10 	vmov	r0, r1, d0
 800ddfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de00:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800de04:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800de08:	2e13      	cmp	r6, #19
 800de0a:	ee10 5a10 	vmov	r5, s0
 800de0e:	ee10 8a10 	vmov	r8, s0
 800de12:	460c      	mov	r4, r1
 800de14:	dc32      	bgt.n	800de7c <floor+0x84>
 800de16:	2e00      	cmp	r6, #0
 800de18:	da14      	bge.n	800de44 <floor+0x4c>
 800de1a:	a333      	add	r3, pc, #204	; (adr r3, 800dee8 <floor+0xf0>)
 800de1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de20:	f7f2 fa34 	bl	800028c <__adddf3>
 800de24:	2200      	movs	r2, #0
 800de26:	2300      	movs	r3, #0
 800de28:	f7f2 fe76 	bl	8000b18 <__aeabi_dcmpgt>
 800de2c:	b138      	cbz	r0, 800de3e <floor+0x46>
 800de2e:	2c00      	cmp	r4, #0
 800de30:	da57      	bge.n	800dee2 <floor+0xea>
 800de32:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800de36:	431d      	orrs	r5, r3
 800de38:	d001      	beq.n	800de3e <floor+0x46>
 800de3a:	4c2d      	ldr	r4, [pc, #180]	; (800def0 <floor+0xf8>)
 800de3c:	2500      	movs	r5, #0
 800de3e:	4621      	mov	r1, r4
 800de40:	4628      	mov	r0, r5
 800de42:	e025      	b.n	800de90 <floor+0x98>
 800de44:	4f2b      	ldr	r7, [pc, #172]	; (800def4 <floor+0xfc>)
 800de46:	4137      	asrs	r7, r6
 800de48:	ea01 0307 	and.w	r3, r1, r7
 800de4c:	4303      	orrs	r3, r0
 800de4e:	d01f      	beq.n	800de90 <floor+0x98>
 800de50:	a325      	add	r3, pc, #148	; (adr r3, 800dee8 <floor+0xf0>)
 800de52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de56:	f7f2 fa19 	bl	800028c <__adddf3>
 800de5a:	2200      	movs	r2, #0
 800de5c:	2300      	movs	r3, #0
 800de5e:	f7f2 fe5b 	bl	8000b18 <__aeabi_dcmpgt>
 800de62:	2800      	cmp	r0, #0
 800de64:	d0eb      	beq.n	800de3e <floor+0x46>
 800de66:	2c00      	cmp	r4, #0
 800de68:	bfbe      	ittt	lt
 800de6a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800de6e:	fa43 f606 	asrlt.w	r6, r3, r6
 800de72:	19a4      	addlt	r4, r4, r6
 800de74:	ea24 0407 	bic.w	r4, r4, r7
 800de78:	2500      	movs	r5, #0
 800de7a:	e7e0      	b.n	800de3e <floor+0x46>
 800de7c:	2e33      	cmp	r6, #51	; 0x33
 800de7e:	dd0b      	ble.n	800de98 <floor+0xa0>
 800de80:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800de84:	d104      	bne.n	800de90 <floor+0x98>
 800de86:	ee10 2a10 	vmov	r2, s0
 800de8a:	460b      	mov	r3, r1
 800de8c:	f7f2 f9fe 	bl	800028c <__adddf3>
 800de90:	ec41 0b10 	vmov	d0, r0, r1
 800de94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de98:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800de9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dea0:	fa23 f707 	lsr.w	r7, r3, r7
 800dea4:	4207      	tst	r7, r0
 800dea6:	d0f3      	beq.n	800de90 <floor+0x98>
 800dea8:	a30f      	add	r3, pc, #60	; (adr r3, 800dee8 <floor+0xf0>)
 800deaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deae:	f7f2 f9ed 	bl	800028c <__adddf3>
 800deb2:	2200      	movs	r2, #0
 800deb4:	2300      	movs	r3, #0
 800deb6:	f7f2 fe2f 	bl	8000b18 <__aeabi_dcmpgt>
 800deba:	2800      	cmp	r0, #0
 800debc:	d0bf      	beq.n	800de3e <floor+0x46>
 800debe:	2c00      	cmp	r4, #0
 800dec0:	da02      	bge.n	800dec8 <floor+0xd0>
 800dec2:	2e14      	cmp	r6, #20
 800dec4:	d103      	bne.n	800dece <floor+0xd6>
 800dec6:	3401      	adds	r4, #1
 800dec8:	ea25 0507 	bic.w	r5, r5, r7
 800decc:	e7b7      	b.n	800de3e <floor+0x46>
 800dece:	2301      	movs	r3, #1
 800ded0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ded4:	fa03 f606 	lsl.w	r6, r3, r6
 800ded8:	4435      	add	r5, r6
 800deda:	4545      	cmp	r5, r8
 800dedc:	bf38      	it	cc
 800dede:	18e4      	addcc	r4, r4, r3
 800dee0:	e7f2      	b.n	800dec8 <floor+0xd0>
 800dee2:	2500      	movs	r5, #0
 800dee4:	462c      	mov	r4, r5
 800dee6:	e7aa      	b.n	800de3e <floor+0x46>
 800dee8:	8800759c 	.word	0x8800759c
 800deec:	7e37e43c 	.word	0x7e37e43c
 800def0:	bff00000 	.word	0xbff00000
 800def4:	000fffff 	.word	0x000fffff

0800def8 <nan>:
 800def8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800df00 <nan+0x8>
 800defc:	4770      	bx	lr
 800defe:	bf00      	nop
 800df00:	00000000 	.word	0x00000000
 800df04:	7ff80000 	.word	0x7ff80000

0800df08 <scalbn>:
 800df08:	b570      	push	{r4, r5, r6, lr}
 800df0a:	ec55 4b10 	vmov	r4, r5, d0
 800df0e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800df12:	4606      	mov	r6, r0
 800df14:	462b      	mov	r3, r5
 800df16:	b99a      	cbnz	r2, 800df40 <scalbn+0x38>
 800df18:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800df1c:	4323      	orrs	r3, r4
 800df1e:	d036      	beq.n	800df8e <scalbn+0x86>
 800df20:	4b39      	ldr	r3, [pc, #228]	; (800e008 <scalbn+0x100>)
 800df22:	4629      	mov	r1, r5
 800df24:	ee10 0a10 	vmov	r0, s0
 800df28:	2200      	movs	r2, #0
 800df2a:	f7f2 fb65 	bl	80005f8 <__aeabi_dmul>
 800df2e:	4b37      	ldr	r3, [pc, #220]	; (800e00c <scalbn+0x104>)
 800df30:	429e      	cmp	r6, r3
 800df32:	4604      	mov	r4, r0
 800df34:	460d      	mov	r5, r1
 800df36:	da10      	bge.n	800df5a <scalbn+0x52>
 800df38:	a32b      	add	r3, pc, #172	; (adr r3, 800dfe8 <scalbn+0xe0>)
 800df3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df3e:	e03a      	b.n	800dfb6 <scalbn+0xae>
 800df40:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800df44:	428a      	cmp	r2, r1
 800df46:	d10c      	bne.n	800df62 <scalbn+0x5a>
 800df48:	ee10 2a10 	vmov	r2, s0
 800df4c:	4620      	mov	r0, r4
 800df4e:	4629      	mov	r1, r5
 800df50:	f7f2 f99c 	bl	800028c <__adddf3>
 800df54:	4604      	mov	r4, r0
 800df56:	460d      	mov	r5, r1
 800df58:	e019      	b.n	800df8e <scalbn+0x86>
 800df5a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800df5e:	460b      	mov	r3, r1
 800df60:	3a36      	subs	r2, #54	; 0x36
 800df62:	4432      	add	r2, r6
 800df64:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800df68:	428a      	cmp	r2, r1
 800df6a:	dd08      	ble.n	800df7e <scalbn+0x76>
 800df6c:	2d00      	cmp	r5, #0
 800df6e:	a120      	add	r1, pc, #128	; (adr r1, 800dff0 <scalbn+0xe8>)
 800df70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df74:	da1c      	bge.n	800dfb0 <scalbn+0xa8>
 800df76:	a120      	add	r1, pc, #128	; (adr r1, 800dff8 <scalbn+0xf0>)
 800df78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df7c:	e018      	b.n	800dfb0 <scalbn+0xa8>
 800df7e:	2a00      	cmp	r2, #0
 800df80:	dd08      	ble.n	800df94 <scalbn+0x8c>
 800df82:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800df86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800df8a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800df8e:	ec45 4b10 	vmov	d0, r4, r5
 800df92:	bd70      	pop	{r4, r5, r6, pc}
 800df94:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800df98:	da19      	bge.n	800dfce <scalbn+0xc6>
 800df9a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800df9e:	429e      	cmp	r6, r3
 800dfa0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800dfa4:	dd0a      	ble.n	800dfbc <scalbn+0xb4>
 800dfa6:	a112      	add	r1, pc, #72	; (adr r1, 800dff0 <scalbn+0xe8>)
 800dfa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d1e2      	bne.n	800df76 <scalbn+0x6e>
 800dfb0:	a30f      	add	r3, pc, #60	; (adr r3, 800dff0 <scalbn+0xe8>)
 800dfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb6:	f7f2 fb1f 	bl	80005f8 <__aeabi_dmul>
 800dfba:	e7cb      	b.n	800df54 <scalbn+0x4c>
 800dfbc:	a10a      	add	r1, pc, #40	; (adr r1, 800dfe8 <scalbn+0xe0>)
 800dfbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d0b8      	beq.n	800df38 <scalbn+0x30>
 800dfc6:	a10e      	add	r1, pc, #56	; (adr r1, 800e000 <scalbn+0xf8>)
 800dfc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfcc:	e7b4      	b.n	800df38 <scalbn+0x30>
 800dfce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dfd2:	3236      	adds	r2, #54	; 0x36
 800dfd4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dfd8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800dfdc:	4620      	mov	r0, r4
 800dfde:	4b0c      	ldr	r3, [pc, #48]	; (800e010 <scalbn+0x108>)
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	e7e8      	b.n	800dfb6 <scalbn+0xae>
 800dfe4:	f3af 8000 	nop.w
 800dfe8:	c2f8f359 	.word	0xc2f8f359
 800dfec:	01a56e1f 	.word	0x01a56e1f
 800dff0:	8800759c 	.word	0x8800759c
 800dff4:	7e37e43c 	.word	0x7e37e43c
 800dff8:	8800759c 	.word	0x8800759c
 800dffc:	fe37e43c 	.word	0xfe37e43c
 800e000:	c2f8f359 	.word	0xc2f8f359
 800e004:	81a56e1f 	.word	0x81a56e1f
 800e008:	43500000 	.word	0x43500000
 800e00c:	ffff3cb0 	.word	0xffff3cb0
 800e010:	3c900000 	.word	0x3c900000

0800e014 <_init>:
 800e014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e016:	bf00      	nop
 800e018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e01a:	bc08      	pop	{r3}
 800e01c:	469e      	mov	lr, r3
 800e01e:	4770      	bx	lr

0800e020 <_fini>:
 800e020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e022:	bf00      	nop
 800e024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e026:	bc08      	pop	{r3}
 800e028:	469e      	mov	lr, r3
 800e02a:	4770      	bx	lr
