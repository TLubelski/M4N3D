
M4N3D_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d734  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000770  0800d8c8  0800d8c8  0001d8c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e038  0800e038  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e038  0800e038  0001e038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e040  0800e040  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e040  0800e040  0001e040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e044  0800e044  0001e044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800e048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  200001e0  0800e224  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  0800e224  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a56  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d6b  00000000  00000000  00033c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  000369d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  000379d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a2a6  00000000  00000000  000388a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000131ce  00000000  00000000  00062b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffc71  00000000  00000000  00075d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017598d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005948  00000000  00000000  001759e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d8ac 	.word	0x0800d8ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800d8ac 	.word	0x0800d8ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <RobotParams_Init>:

MoveVect_t MoveVect;
RobotParams_t RobotParams;

void RobotParams_Init(double l1, double l2, double l3, double l4, double l5, double q1_off, double q2_off, double q3_off )
{
 8000eec:	b480      	push	{r7}
 8000eee:	b091      	sub	sp, #68	; 0x44
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 8000ef6:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 8000efa:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 8000efe:	ed87 3b08 	vstr	d3, [r7, #32]
 8000f02:	ed87 4b06 	vstr	d4, [r7, #24]
 8000f06:	ed87 5b04 	vstr	d5, [r7, #16]
 8000f0a:	ed87 6b02 	vstr	d6, [r7, #8]
 8000f0e:	ed87 7b00 	vstr	d7, [r7]
    RobotParams.l1 = l1;     // base to q2
 8000f12:	492b      	ldr	r1, [pc, #172]	; (8000fc0 <RobotParams_Init+0xd4>)
 8000f14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000f18:	e9c1 2300 	strd	r2, r3, [r1]
    RobotParams.l2 = l2;     // q2 to q3
 8000f1c:	4928      	ldr	r1, [pc, #160]	; (8000fc0 <RobotParams_Init+0xd4>)
 8000f1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000f22:	e9c1 2302 	strd	r2, r3, [r1, #8]
    RobotParams.l3 = l3;     // q3 to efector
 8000f26:	4926      	ldr	r1, [pc, #152]	; (8000fc0 <RobotParams_Init+0xd4>)
 8000f28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000f2c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    RobotParams.l4 = l4;     // right shift
 8000f30:	4923      	ldr	r1, [pc, #140]	; (8000fc0 <RobotParams_Init+0xd4>)
 8000f32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000f36:	e9c1 2306 	strd	r2, r3, [r1, #24]
    RobotParams.l5 = l5;     // efector height
 8000f3a:	4921      	ldr	r1, [pc, #132]	; (8000fc0 <RobotParams_Init+0xd4>)
 8000f3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f40:	e9c1 2308 	strd	r2, r3, [r1, #32]

    RobotParams.q1_off = q1_off;
 8000f44:	491e      	ldr	r1, [pc, #120]	; (8000fc0 <RobotParams_Init+0xd4>)
 8000f46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f4a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    RobotParams.q2_off = q2_off;
 8000f4e:	491c      	ldr	r1, [pc, #112]	; (8000fc0 <RobotParams_Init+0xd4>)
 8000f50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f54:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    RobotParams.q3_off = q3_off;
 8000f58:	4919      	ldr	r1, [pc, #100]	; (8000fc0 <RobotParams_Init+0xd4>)
 8000f5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f5e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    RobotParams.q1 = q1_off;
 8000f62:	4917      	ldr	r1, [pc, #92]	; (8000fc0 <RobotParams_Init+0xd4>)
 8000f64:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f68:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    RobotParams.q2 = q2_off;
 8000f6c:	4914      	ldr	r1, [pc, #80]	; (8000fc0 <RobotParams_Init+0xd4>)
 8000f6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f72:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    RobotParams.q3 = q3_off;
 8000f76:	4912      	ldr	r1, [pc, #72]	; (8000fc0 <RobotParams_Init+0xd4>)
 8000f78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f7c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

    RobotParams.fxState = false;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <RobotParams_Init+0xd4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

    MoveVect.x = 0;
 8000f88:	490e      	ldr	r1, [pc, #56]	; (8000fc4 <RobotParams_Init+0xd8>)
 8000f8a:	f04f 0200 	mov.w	r2, #0
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	e9c1 2300 	strd	r2, r3, [r1]
    MoveVect.y = 0;
 8000f96:	490b      	ldr	r1, [pc, #44]	; (8000fc4 <RobotParams_Init+0xd8>)
 8000f98:	f04f 0200 	mov.w	r2, #0
 8000f9c:	f04f 0300 	mov.w	r3, #0
 8000fa0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    MoveVect.z = 0;
 8000fa4:	4907      	ldr	r1, [pc, #28]	; (8000fc4 <RobotParams_Init+0xd8>)
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	f04f 0300 	mov.w	r3, #0
 8000fae:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8000fb2:	bf00      	nop
 8000fb4:	3744      	adds	r7, #68	; 0x44
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000218 	.word	0x20000218
 8000fc4:	20000200 	.word	0x20000200

08000fc8 <toggleFx>:


void toggleFx()
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	RobotParams.fxState = !RobotParams.fxState;
 8000fcc:	4b10      	ldr	r3, [pc, #64]	; (8001010 <toggleFx+0x48>)
 8000fce:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	bf14      	ite	ne
 8000fd6:	2301      	movne	r3, #1
 8000fd8:	2300      	moveq	r3, #0
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	f083 0301 	eor.w	r3, r3, #1
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	4b09      	ldr	r3, [pc, #36]	; (8001010 <toggleFx+0x48>)
 8000fea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	HAL_GPIO_WritePin(EFFECTOR_GPIO_Port, EFFECTOR_Pin, RobotParams.fxState);
 8000fee:	4b08      	ldr	r3, [pc, #32]	; (8001010 <toggleFx+0x48>)
 8000ff0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	2110      	movs	r1, #16
 8000ff8:	4806      	ldr	r0, [pc, #24]	; (8001014 <toggleFx+0x4c>)
 8000ffa:	f004 f8fd 	bl	80051f8 <HAL_GPIO_WritePin>
	PAD_setLedFx(RobotParams.fxState);
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <toggleFx+0x48>)
 8001000:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8001004:	4618      	mov	r0, r3
 8001006:	f001 fb7d 	bl	8002704 <PAD_setLedFx>
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000218 	.word	0x20000218
 8001014:	48000800 	.word	0x48000800

08001018 <CTRL_getMoveVect>:

void CTRL_getMoveVect()
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	MoveVect.x = (-PAD.axis_R_X)/10;
 800101c:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <CTRL_getMoveVect+0x70>)
 800101e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001022:	4a1a      	ldr	r2, [pc, #104]	; (800108c <CTRL_getMoveVect+0x74>)
 8001024:	fb82 1203 	smull	r1, r2, r2, r3
 8001028:	1092      	asrs	r2, r2, #2
 800102a:	17db      	asrs	r3, r3, #31
 800102c:	1a9b      	subs	r3, r3, r2
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fa78 	bl	8000524 <__aeabi_i2d>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4915      	ldr	r1, [pc, #84]	; (8001090 <CTRL_getMoveVect+0x78>)
 800103a:	e9c1 2300 	strd	r2, r3, [r1]
	MoveVect.y = (-PAD.axis_R_Y)/10;
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <CTRL_getMoveVect+0x70>)
 8001040:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001044:	4a11      	ldr	r2, [pc, #68]	; (800108c <CTRL_getMoveVect+0x74>)
 8001046:	fb82 1203 	smull	r1, r2, r2, r3
 800104a:	1092      	asrs	r2, r2, #2
 800104c:	17db      	asrs	r3, r3, #31
 800104e:	1a9b      	subs	r3, r3, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fa67 	bl	8000524 <__aeabi_i2d>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	490d      	ldr	r1, [pc, #52]	; (8001090 <CTRL_getMoveVect+0x78>)
 800105c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	MoveVect.z = (PAD.axis_L_Y)/10;
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <CTRL_getMoveVect+0x70>)
 8001062:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001066:	4a09      	ldr	r2, [pc, #36]	; (800108c <CTRL_getMoveVect+0x74>)
 8001068:	fb82 1203 	smull	r1, r2, r2, r3
 800106c:	1092      	asrs	r2, r2, #2
 800106e:	17db      	asrs	r3, r3, #31
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	b21b      	sxth	r3, r3
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fa55 	bl	8000524 <__aeabi_i2d>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4904      	ldr	r1, [pc, #16]	; (8001090 <CTRL_getMoveVect+0x78>)
 8001080:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000484 	.word	0x20000484
 800108c:	66666667 	.word	0x66666667
 8001090:	20000200 	.word	0x20000200

08001094 <CTRL_getRealParams>:

void CTRL_getRealParams()
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
	static uint32_t last_get = 0;
	uint32_t now = HAL_GetTick();
 800109a:	f002 f83b 	bl	8003114 <HAL_GetTick>
 800109e:	6078      	str	r0, [r7, #4]

	if(now-last_get > GETREAL_INTERVAL)
 80010a0:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <CTRL_getRealParams+0x80>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b0a      	cmp	r3, #10
 80010aa:	d92e      	bls.n	800110a <CTRL_getRealParams+0x76>
	{
		RobotParams.aq1 = srv2rad(SRV_readPosition(1));
 80010ac:	2001      	movs	r0, #1
 80010ae:	f001 fd15 	bl	8002adc <SRV_readPosition>
 80010b2:	4603      	mov	r3, r0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 fa6b 	bl	8001590 <srv2rad>
 80010ba:	eeb0 7a40 	vmov.f32	s14, s0
 80010be:	eef0 7a60 	vmov.f32	s15, s1
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <CTRL_getRealParams+0x84>)
 80010c4:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
		RobotParams.aq2 = srv2rad(SRV_readPosition(2));
 80010c8:	2002      	movs	r0, #2
 80010ca:	f001 fd07 	bl	8002adc <SRV_readPosition>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 fa5d 	bl	8001590 <srv2rad>
 80010d6:	eeb0 7a40 	vmov.f32	s14, s0
 80010da:	eef0 7a60 	vmov.f32	s15, s1
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <CTRL_getRealParams+0x84>)
 80010e0:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
		RobotParams.aq3 = srv2rad(SRV_readPosition(3));
 80010e4:	2003      	movs	r0, #3
 80010e6:	f001 fcf9 	bl	8002adc <SRV_readPosition>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 fa4f 	bl	8001590 <srv2rad>
 80010f2:	eeb0 7a40 	vmov.f32	s14, s0
 80010f6:	eef0 7a60 	vmov.f32	s15, s1
 80010fa:	4b07      	ldr	r3, [pc, #28]	; (8001118 <CTRL_getRealParams+0x84>)
 80010fc:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
		KS_calc_FK();
 8001100:	f000 fca4 	bl	8001a4c <KS_calc_FK>
		last_get = now;
 8001104:	4a03      	ldr	r2, [pc, #12]	; (8001114 <CTRL_getRealParams+0x80>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6013      	str	r3, [r2, #0]
	}
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200002c0 	.word	0x200002c0
 8001118:	20000218 	.word	0x20000218

0800111c <CTRL_pushTargetParams>:

void CTRL_pushTargetParams()
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	SRV_move(1, rad2srv(RobotParams.q1), MANUAL_SPEED);
 8001120:	4b17      	ldr	r3, [pc, #92]	; (8001180 <CTRL_pushTargetParams+0x64>)
 8001122:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8001126:	eeb0 0a47 	vmov.f32	s0, s14
 800112a:	eef0 0a67 	vmov.f32	s1, s15
 800112e:	f000 f9ff 	bl	8001530 <rad2srv>
 8001132:	4603      	mov	r3, r0
 8001134:	2223      	movs	r2, #35	; 0x23
 8001136:	4619      	mov	r1, r3
 8001138:	2001      	movs	r0, #1
 800113a:	f001 fc80 	bl	8002a3e <SRV_move>
	SRV_move(2, rad2srv(RobotParams.q2), MANUAL_SPEED);
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <CTRL_pushTargetParams+0x64>)
 8001140:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8001144:	eeb0 0a47 	vmov.f32	s0, s14
 8001148:	eef0 0a67 	vmov.f32	s1, s15
 800114c:	f000 f9f0 	bl	8001530 <rad2srv>
 8001150:	4603      	mov	r3, r0
 8001152:	2223      	movs	r2, #35	; 0x23
 8001154:	4619      	mov	r1, r3
 8001156:	2002      	movs	r0, #2
 8001158:	f001 fc71 	bl	8002a3e <SRV_move>
	SRV_move(3, rad2srv(RobotParams.q3), MANUAL_SPEED);
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <CTRL_pushTargetParams+0x64>)
 800115e:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8001162:	eeb0 0a47 	vmov.f32	s0, s14
 8001166:	eef0 0a67 	vmov.f32	s1, s15
 800116a:	f000 f9e1 	bl	8001530 <rad2srv>
 800116e:	4603      	mov	r3, r0
 8001170:	2223      	movs	r2, #35	; 0x23
 8001172:	4619      	mov	r1, r3
 8001174:	2003      	movs	r0, #3
 8001176:	f001 fc62 	bl	8002a3e <SRV_move>
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000218 	.word	0x20000218

08001184 <CTRL_destinationReached_J>:

bool CTRL_destinationReached_J()
{
 8001184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001188:	af00      	add	r7, sp, #0
	return ( fabs(RobotParams.q1-RobotParams.aq1) < THRESHOLD_J &&
 800118a:	4b27      	ldr	r3, [pc, #156]	; (8001228 <CTRL_destinationReached_J+0xa4>)
 800118c:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8001190:	4b25      	ldr	r3, [pc, #148]	; (8001228 <CTRL_destinationReached_J+0xa4>)
 8001192:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8001196:	f7ff f877 	bl	8000288 <__aeabi_dsub>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4692      	mov	sl, r2
 80011a0:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
			 fabs(RobotParams.q2-RobotParams.aq2) < THRESHOLD_J &&
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	4b20      	ldr	r3, [pc, #128]	; (800122c <CTRL_destinationReached_J+0xa8>)
 80011aa:	4650      	mov	r0, sl
 80011ac:	4659      	mov	r1, fp
 80011ae:	f7ff fc95 	bl	8000adc <__aeabi_dcmplt>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d02f      	beq.n	8001218 <CTRL_destinationReached_J+0x94>
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <CTRL_destinationReached_J+0xa4>)
 80011ba:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80011be:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <CTRL_destinationReached_J+0xa4>)
 80011c0:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80011c4:	f7ff f860 	bl	8000288 <__aeabi_dsub>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4690      	mov	r8, r2
 80011ce:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
	return ( fabs(RobotParams.q1-RobotParams.aq1) < THRESHOLD_J &&
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <CTRL_destinationReached_J+0xa8>)
 80011d8:	4640      	mov	r0, r8
 80011da:	4649      	mov	r1, r9
 80011dc:	f7ff fc7e 	bl	8000adc <__aeabi_dcmplt>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d018      	beq.n	8001218 <CTRL_destinationReached_J+0x94>
			 fabs(RobotParams.q3-RobotParams.aq3) < THRESHOLD_J    );
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <CTRL_destinationReached_J+0xa4>)
 80011e8:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80011ec:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <CTRL_destinationReached_J+0xa4>)
 80011ee:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80011f2:	f7ff f849 	bl	8000288 <__aeabi_dsub>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4614      	mov	r4, r2
 80011fc:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
			 fabs(RobotParams.q2-RobotParams.aq2) < THRESHOLD_J &&
 8001200:	f04f 0200 	mov.w	r2, #0
 8001204:	4b09      	ldr	r3, [pc, #36]	; (800122c <CTRL_destinationReached_J+0xa8>)
 8001206:	4620      	mov	r0, r4
 8001208:	4629      	mov	r1, r5
 800120a:	f7ff fc67 	bl	8000adc <__aeabi_dcmplt>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <CTRL_destinationReached_J+0x94>
 8001214:	2301      	movs	r3, #1
 8001216:	e000      	b.n	800121a <CTRL_destinationReached_J+0x96>
 8001218:	2300      	movs	r3, #0
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	b2db      	uxtb	r3, r3
}
 8001220:	4618      	mov	r0, r3
 8001222:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001226:	bf00      	nop
 8001228:	20000218 	.word	0x20000218
 800122c:	40080000 	.word	0x40080000

08001230 <CTRL_setPos>:
			 fabs(RobotParams.y-RobotParams.ay) < THRESHOLD_L &&
			 fabs(RobotParams.z-RobotParams.az) < THRESHOLD_L    );
}

void CTRL_setPos(double x, double y, double z)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	ed87 0b04 	vstr	d0, [r7, #16]
 800123a:	ed87 1b02 	vstr	d1, [r7, #8]
 800123e:	ed87 2b00 	vstr	d2, [r7]
	if(KS_calc_IK(x, y, z))
 8001242:	ed97 2b00 	vldr	d2, [r7]
 8001246:	ed97 1b02 	vldr	d1, [r7, #8]
 800124a:	ed97 0b04 	vldr	d0, [r7, #16]
 800124e:	f000 f9d3 	bl	80015f8 <KS_calc_IK>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d002      	beq.n	800125e <CTRL_setPos+0x2e>
		CTRL_pushTargetParams();
 8001258:	f7ff ff60 	bl	800111c <CTRL_pushTargetParams>
	else
		printf("Inverse kinematics error\r\n");
}
 800125c:	e002      	b.n	8001264 <CTRL_setPos+0x34>
		printf("Inverse kinematics error\r\n");
 800125e:	4803      	ldr	r0, [pc, #12]	; (800126c <CTRL_setPos+0x3c>)
 8001260:	f007 fca6 	bl	8008bb0 <puts>
}
 8001264:	bf00      	nop
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	0800d8c8 	.word	0x0800d8c8

08001270 <CTRL_startup>:

void CTRL_startup()
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
	PAD_setLedManual(1);
 8001276:	2001      	movs	r0, #1
 8001278:	f001 fa32 	bl	80026e0 <PAD_setLedManual>

	for(uint8_t i = 1; i <=3; i++)
 800127c:	2301      	movs	r3, #1
 800127e:	71fb      	strb	r3, [r7, #7]
 8001280:	e00c      	b.n	800129c <CTRL_startup+0x2c>
	{
		SRV_setLED(i, 1);
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2101      	movs	r1, #1
 8001286:	4618      	mov	r0, r3
 8001288:	f001 fbbb 	bl	8002a02 <SRV_setLED>
		SRV_enableTorque(i, 1);
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	2101      	movs	r1, #1
 8001290:	4618      	mov	r0, r3
 8001292:	f001 fc05 	bl	8002aa0 <SRV_enableTorque>
	for(uint8_t i = 1; i <=3; i++)
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	3301      	adds	r3, #1
 800129a:	71fb      	strb	r3, [r7, #7]
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	2b03      	cmp	r3, #3
 80012a0:	d9ef      	bls.n	8001282 <CTRL_startup+0x12>
	}

	CTRL_setPos(134, -33, 88);
 80012a2:	ed9f 2b07 	vldr	d2, [pc, #28]	; 80012c0 <CTRL_startup+0x50>
 80012a6:	ed9f 1b08 	vldr	d1, [pc, #32]	; 80012c8 <CTRL_startup+0x58>
 80012aa:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80012d0 <CTRL_startup+0x60>
 80012ae:	f7ff ffbf 	bl	8001230 <CTRL_setPos>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	f3af 8000 	nop.w
 80012c0:	00000000 	.word	0x00000000
 80012c4:	40560000 	.word	0x40560000
 80012c8:	00000000 	.word	0x00000000
 80012cc:	c0408000 	.word	0xc0408000
 80012d0:	00000000 	.word	0x00000000
 80012d4:	4060c000 	.word	0x4060c000

080012d8 <CTRL_moveByVect>:

void CTRL_moveByVect()
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	ed2d 8b04 	vpush	{d8-d9}
 80012de:	af00      	add	r7, sp, #0
	if( MoveVect.x != 0 || MoveVect.y != 0 || MoveVect.z != 0 )
 80012e0:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <CTRL_moveByVect+0xc0>)
 80012e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012e6:	f04f 0200 	mov.w	r2, #0
 80012ea:	f04f 0300 	mov.w	r3, #0
 80012ee:	f7ff fbeb 	bl	8000ac8 <__aeabi_dcmpeq>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d018      	beq.n	800132a <CTRL_moveByVect+0x52>
 80012f8:	4b27      	ldr	r3, [pc, #156]	; (8001398 <CTRL_moveByVect+0xc0>)
 80012fa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	f04f 0300 	mov.w	r3, #0
 8001306:	f7ff fbdf 	bl	8000ac8 <__aeabi_dcmpeq>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d00c      	beq.n	800132a <CTRL_moveByVect+0x52>
 8001310:	4b21      	ldr	r3, [pc, #132]	; (8001398 <CTRL_moveByVect+0xc0>)
 8001312:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	f7ff fbd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d000      	beq.n	800132a <CTRL_moveByVect+0x52>
		CTRL_setPos(RobotParams.x+MoveVect.x, RobotParams.y+MoveVect.y, RobotParams.z+MoveVect.z);
}
 8001328:	e031      	b.n	800138e <CTRL_moveByVect+0xb6>
		CTRL_setPos(RobotParams.x+MoveVect.x, RobotParams.y+MoveVect.y, RobotParams.z+MoveVect.z);
 800132a:	4b1c      	ldr	r3, [pc, #112]	; (800139c <CTRL_moveByVect+0xc4>)
 800132c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001330:	4b19      	ldr	r3, [pc, #100]	; (8001398 <CTRL_moveByVect+0xc0>)
 8001332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001336:	f7fe ffa9 	bl	800028c <__adddf3>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	ec43 2b18 	vmov	d8, r2, r3
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <CTRL_moveByVect+0xc4>)
 8001344:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8001348:	4b13      	ldr	r3, [pc, #76]	; (8001398 <CTRL_moveByVect+0xc0>)
 800134a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800134e:	f7fe ff9d 	bl	800028c <__adddf3>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	ec43 2b19 	vmov	d9, r2, r3
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <CTRL_moveByVect+0xc4>)
 800135c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001360:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <CTRL_moveByVect+0xc0>)
 8001362:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001366:	f7fe ff91 	bl	800028c <__adddf3>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	ec43 2b17 	vmov	d7, r2, r3
 8001372:	eeb0 2a47 	vmov.f32	s4, s14
 8001376:	eef0 2a67 	vmov.f32	s5, s15
 800137a:	eeb0 1a49 	vmov.f32	s2, s18
 800137e:	eef0 1a69 	vmov.f32	s3, s19
 8001382:	eeb0 0a48 	vmov.f32	s0, s16
 8001386:	eef0 0a68 	vmov.f32	s1, s17
 800138a:	f7ff ff51 	bl	8001230 <CTRL_setPos>
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	ecbd 8b04 	vpop	{d8-d9}
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000200 	.word	0x20000200
 800139c:	20000218 	.word	0x20000218

080013a0 <CTRL_Loop_Manual>:


void CTRL_Loop_Manual()
{
 80013a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013a4:	b08f      	sub	sp, #60	; 0x3c
 80013a6:	af0a      	add	r7, sp, #40	; 0x28
	static uint32_t last_print = 0;
	uint32_t now = HAL_GetTick();
 80013a8:	f001 feb4 	bl	8003114 <HAL_GetTick>
 80013ac:	60f8      	str	r0, [r7, #12]

	if( now-last_print > 100 )
 80013ae:	4b44      	ldr	r3, [pc, #272]	; (80014c0 <CTRL_Loop_Manual+0x120>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b64      	cmp	r3, #100	; 0x64
 80013b8:	d96e      	bls.n	8001498 <CTRL_Loop_Manual+0xf8>
	{
		printf("#PAD RX: %d, RY: %d, LX: %d, LY: %d\r\n", PAD.axis_R_X, PAD.axis_R_Y, PAD.axis_L_X, PAD.axis_L_Y);
 80013ba:	4b42      	ldr	r3, [pc, #264]	; (80014c4 <CTRL_Loop_Manual+0x124>)
 80013bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013c0:	4619      	mov	r1, r3
 80013c2:	4b40      	ldr	r3, [pc, #256]	; (80014c4 <CTRL_Loop_Manual+0x124>)
 80013c4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b3e      	ldr	r3, [pc, #248]	; (80014c4 <CTRL_Loop_Manual+0x124>)
 80013cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d0:	4618      	mov	r0, r3
 80013d2:	4b3c      	ldr	r3, [pc, #240]	; (80014c4 <CTRL_Loop_Manual+0x124>)
 80013d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	4603      	mov	r3, r0
 80013dc:	483a      	ldr	r0, [pc, #232]	; (80014c8 <CTRL_Loop_Manual+0x128>)
 80013de:	f007 fb61 	bl	8008aa4 <iprintf>
		printf("#VECT X: %.2f, Y: %.2f, Z: %.2f\r\n", MoveVect.x, MoveVect.y, MoveVect.z);
 80013e2:	4b3a      	ldr	r3, [pc, #232]	; (80014cc <CTRL_Loop_Manual+0x12c>)
 80013e4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80013e8:	4b38      	ldr	r3, [pc, #224]	; (80014cc <CTRL_Loop_Manual+0x12c>)
 80013ea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80013ee:	4937      	ldr	r1, [pc, #220]	; (80014cc <CTRL_Loop_Manual+0x12c>)
 80013f0:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80013f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80013f8:	e9cd 2300 	strd	r2, r3, [sp]
 80013fc:	4622      	mov	r2, r4
 80013fe:	462b      	mov	r3, r5
 8001400:	4833      	ldr	r0, [pc, #204]	; (80014d0 <CTRL_Loop_Manual+0x130>)
 8001402:	f007 fb4f 	bl	8008aa4 <iprintf>
		printf("#TARGET: Q1: %.2f, Q1: %.2f, Q1: %.2f, X: %.2f, Y: %.2f, Z: %.2f\r\n", RobotParams.q1, RobotParams.q2, RobotParams.q3, RobotParams.x, RobotParams.y, RobotParams.z);
 8001406:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <CTRL_Loop_Manual+0x134>)
 8001408:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 800140c:	ed87 7b00 	vstr	d7, [r7]
 8001410:	4b30      	ldr	r3, [pc, #192]	; (80014d4 <CTRL_Loop_Manual+0x134>)
 8001412:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001416:	492f      	ldr	r1, [pc, #188]	; (80014d4 <CTRL_Loop_Manual+0x134>)
 8001418:	e9d1 011a 	ldrd	r0, r1, [r1, #104]	; 0x68
 800141c:	4c2d      	ldr	r4, [pc, #180]	; (80014d4 <CTRL_Loop_Manual+0x134>)
 800141e:	e9d4 4510 	ldrd	r4, r5, [r4, #64]	; 0x40
 8001422:	4e2c      	ldr	r6, [pc, #176]	; (80014d4 <CTRL_Loop_Manual+0x134>)
 8001424:	e9d6 8912 	ldrd	r8, r9, [r6, #72]	; 0x48
 8001428:	4e2a      	ldr	r6, [pc, #168]	; (80014d4 <CTRL_Loop_Manual+0x134>)
 800142a:	e9d6 ab14 	ldrd	sl, fp, [r6, #80]	; 0x50
 800142e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8001432:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001436:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800143a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800143e:	e9cd 2300 	strd	r2, r3, [sp]
 8001442:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001446:	4824      	ldr	r0, [pc, #144]	; (80014d8 <CTRL_Loop_Manual+0x138>)
 8001448:	f007 fb2c 	bl	8008aa4 <iprintf>
		printf("#ACTUAL: Q1: %.2f, Q1: %.2f, Q1: %.2f, X: %.2f, Y: %.2f, Z: %.2f\r\n", RobotParams.aq1, RobotParams.aq2, RobotParams.aq3, RobotParams.ax, RobotParams.ay, RobotParams.az);
 800144c:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <CTRL_Loop_Manual+0x134>)
 800144e:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8001452:	ed87 7b00 	vstr	d7, [r7]
 8001456:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <CTRL_Loop_Manual+0x134>)
 8001458:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800145c:	491d      	ldr	r1, [pc, #116]	; (80014d4 <CTRL_Loop_Manual+0x134>)
 800145e:	e9d1 0120 	ldrd	r0, r1, [r1, #128]	; 0x80
 8001462:	4c1c      	ldr	r4, [pc, #112]	; (80014d4 <CTRL_Loop_Manual+0x134>)
 8001464:	e9d4 4522 	ldrd	r4, r5, [r4, #136]	; 0x88
 8001468:	4e1a      	ldr	r6, [pc, #104]	; (80014d4 <CTRL_Loop_Manual+0x134>)
 800146a:	e9d6 8924 	ldrd	r8, r9, [r6, #144]	; 0x90
 800146e:	4e19      	ldr	r6, [pc, #100]	; (80014d4 <CTRL_Loop_Manual+0x134>)
 8001470:	e9d6 ab26 	ldrd	sl, fp, [r6, #152]	; 0x98
 8001474:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8001478:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800147c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001480:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001484:	e9cd 2300 	strd	r2, r3, [sp]
 8001488:	e9d7 2300 	ldrd	r2, r3, [r7]
 800148c:	4813      	ldr	r0, [pc, #76]	; (80014dc <CTRL_Loop_Manual+0x13c>)
 800148e:	f007 fb09 	bl	8008aa4 <iprintf>

		last_print = now;
 8001492:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <CTRL_Loop_Manual+0x120>)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6013      	str	r3, [r2, #0]
	}

	if( PAD.btn_combo_short )
 8001498:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <CTRL_Loop_Manual+0x124>)
 800149a:	7b1b      	ldrb	r3, [r3, #12]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <CTRL_Loop_Manual+0x104>
		toggleFx();
 80014a0:	f7ff fd92 	bl	8000fc8 <toggleFx>


	CTRL_getMoveVect();
 80014a4:	f7ff fdb8 	bl	8001018 <CTRL_getMoveVect>
	if( CTRL_destinationReached_J() )
 80014a8:	f7ff fe6c 	bl	8001184 <CTRL_destinationReached_J>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <CTRL_Loop_Manual+0x116>
	{
		CTRL_moveByVect();
 80014b2:	f7ff ff11 	bl	80012d8 <CTRL_moveByVect>
	}
}
 80014b6:	bf00      	nop
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014c0:	200002c4 	.word	0x200002c4
 80014c4:	20000484 	.word	0x20000484
 80014c8:	0800d8e4 	.word	0x0800d8e4
 80014cc:	20000200 	.word	0x20000200
 80014d0:	0800d90c 	.word	0x0800d90c
 80014d4:	20000218 	.word	0x20000218
 80014d8:	0800d930 	.word	0x0800d930
 80014dc:	0800d974 	.word	0x0800d974

080014e0 <deg2rad>:
#include "kinematics.h"


double deg2rad(double deg) { return (deg/180.0f) * M_PI; }
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	ed87 0b00 	vstr	d0, [r7]
 80014ea:	f04f 0200 	mov.w	r2, #0
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <deg2rad+0x48>)
 80014f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014f4:	f7ff f9aa 	bl	800084c <__aeabi_ddiv>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4610      	mov	r0, r2
 80014fe:	4619      	mov	r1, r3
 8001500:	a307      	add	r3, pc, #28	; (adr r3, 8001520 <deg2rad+0x40>)
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	f7ff f877 	bl	80005f8 <__aeabi_dmul>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	ec43 2b17 	vmov	d7, r2, r3
 8001512:	eeb0 0a47 	vmov.f32	s0, s14
 8001516:	eef0 0a67 	vmov.f32	s1, s15
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	54442d18 	.word	0x54442d18
 8001524:	400921fb 	.word	0x400921fb
 8001528:	40668000 	.word	0x40668000
 800152c:	00000000 	.word	0x00000000

08001530 <rad2srv>:

double rad2deg(double rad) { return rad * (180.0f / M_PI); }

uint16_t rad2srv(double rad) { return (rad/M_PI)*512 + 512; }
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	ed87 0b00 	vstr	d0, [r7]
 800153a:	a313      	add	r3, pc, #76	; (adr r3, 8001588 <rad2srv+0x58>)
 800153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001540:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001544:	f7ff f982 	bl	800084c <__aeabi_ddiv>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001558:	f7ff f84e 	bl	80005f8 <__aeabi_dmul>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800156c:	f7fe fe8e 	bl	800028c <__adddf3>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4610      	mov	r0, r2
 8001576:	4619      	mov	r1, r3
 8001578:	f7ff fb16 	bl	8000ba8 <__aeabi_d2uiz>
 800157c:	4603      	mov	r3, r0
 800157e:	b29b      	uxth	r3, r3
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	54442d18 	.word	0x54442d18
 800158c:	400921fb 	.word	0x400921fb

08001590 <srv2rad>:

uint16_t deg2srv(double deg){ return (deg/180.0f)*512 + 512; }

double srv2rad(uint16_t srv){ return (((double)srv-512.0f)/512.0f)*M_PI; }
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	80fb      	strh	r3, [r7, #6]
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe ffb1 	bl	8000504 <__aeabi_ui2d>
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80015aa:	f7fe fe6d 	bl	8000288 <__aeabi_dsub>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80015be:	f7ff f945 	bl	800084c <__aeabi_ddiv>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	a309      	add	r3, pc, #36	; (adr r3, 80015f0 <srv2rad+0x60>)
 80015cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d0:	f7ff f812 	bl	80005f8 <__aeabi_dmul>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	ec43 2b17 	vmov	d7, r2, r3
 80015dc:	eeb0 0a47 	vmov.f32	s0, s14
 80015e0:	eef0 0a67 	vmov.f32	s1, s15
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	f3af 8000 	nop.w
 80015f0:	54442d18 	.word	0x54442d18
 80015f4:	400921fb 	.word	0x400921fb

080015f8 <KS_calc_IK>:

double srv2deg(uint16_t srv){ return (((double)srv-512.0f)/512.0f)*180.0f; }

bool KS_calc_IK(double x, double y, double z)
{
 80015f8:	b5b0      	push	{r4, r5, r7, lr}
 80015fa:	b0a0      	sub	sp, #128	; 0x80
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	ed87 0b04 	vstr	d0, [r7, #16]
 8001602:	ed87 1b02 	vstr	d1, [r7, #8]
 8001606:	ed87 2b00 	vstr	d2, [r7]
    double q1, q2, q3;
    double r1, r2, r3, phi1, phi2;

    double l1 = RobotParams.l1;     // base to q2
 800160a:	4bc5      	ldr	r3, [pc, #788]	; (8001920 <KS_calc_IK+0x328>)
 800160c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001610:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
    double l2 = RobotParams.l2;     // q2 to q3
 8001614:	4bc2      	ldr	r3, [pc, #776]	; (8001920 <KS_calc_IK+0x328>)
 8001616:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800161a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
    double l3 = RobotParams.l3;    	// q3 to efector
 800161e:	4bc0      	ldr	r3, [pc, #768]	; (8001920 <KS_calc_IK+0x328>)
 8001620:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001624:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    double l4 = RobotParams.l4;     // right shift
 8001628:	4bbd      	ldr	r3, [pc, #756]	; (8001920 <KS_calc_IK+0x328>)
 800162a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800162e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    double l5 = RobotParams.l5;     // efector height
 8001632:	4bbb      	ldr	r3, [pc, #748]	; (8001920 <KS_calc_IK+0x328>)
 8001634:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001638:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

    q1 = 2 * atan( (x - sqrt( x*x + y*y - l4*l4 )) / ( l4-y ) );
 800163c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001640:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001644:	f7fe ffd8 	bl	80005f8 <__aeabi_dmul>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4614      	mov	r4, r2
 800164e:	461d      	mov	r5, r3
 8001650:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001654:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001658:	f7fe ffce 	bl	80005f8 <__aeabi_dmul>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4620      	mov	r0, r4
 8001662:	4629      	mov	r1, r5
 8001664:	f7fe fe12 	bl	800028c <__adddf3>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4614      	mov	r4, r2
 800166e:	461d      	mov	r5, r3
 8001670:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001674:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001678:	f7fe ffbe 	bl	80005f8 <__aeabi_dmul>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4620      	mov	r0, r4
 8001682:	4629      	mov	r1, r5
 8001684:	f7fe fe00 	bl	8000288 <__aeabi_dsub>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	ec43 2b17 	vmov	d7, r2, r3
 8001690:	eeb0 0a47 	vmov.f32	s0, s14
 8001694:	eef0 0a67 	vmov.f32	s1, s15
 8001698:	f009 fe5e 	bl	800b358 <sqrt>
 800169c:	ec53 2b10 	vmov	r2, r3, d0
 80016a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016a4:	f7fe fdf0 	bl	8000288 <__aeabi_dsub>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4614      	mov	r4, r2
 80016ae:	461d      	mov	r5, r3
 80016b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016b4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80016b8:	f7fe fde6 	bl	8000288 <__aeabi_dsub>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4620      	mov	r0, r4
 80016c2:	4629      	mov	r1, r5
 80016c4:	f7ff f8c2 	bl	800084c <__aeabi_ddiv>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	ec43 2b17 	vmov	d7, r2, r3
 80016d0:	eeb0 0a47 	vmov.f32	s0, s14
 80016d4:	eef0 0a67 	vmov.f32	s1, s15
 80016d8:	f009 fb0e 	bl	800acf8 <atan>
 80016dc:	ec51 0b10 	vmov	r0, r1, d0
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	f7fe fdd2 	bl	800028c <__adddf3>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    r1 = sqrt( x*x + pow( y+l4/cos(q1), 2) ) - l4*tan(q1);
 80016f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016f8:	f7fe ff7e 	bl	80005f8 <__aeabi_dmul>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4614      	mov	r4, r2
 8001702:	461d      	mov	r5, r3
 8001704:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8001708:	f009 fc96 	bl	800b038 <cos>
 800170c:	ec53 2b10 	vmov	r2, r3, d0
 8001710:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001714:	f7ff f89a 	bl	800084c <__aeabi_ddiv>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4610      	mov	r0, r2
 800171e:	4619      	mov	r1, r3
 8001720:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001724:	f7fe fdb2 	bl	800028c <__adddf3>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	ec43 2b17 	vmov	d7, r2, r3
 8001730:	ed9f 1b77 	vldr	d1, [pc, #476]	; 8001910 <KS_calc_IK+0x318>
 8001734:	eeb0 0a47 	vmov.f32	s0, s14
 8001738:	eef0 0a67 	vmov.f32	s1, s15
 800173c:	f009 fd9c 	bl	800b278 <pow>
 8001740:	ec53 2b10 	vmov	r2, r3, d0
 8001744:	4620      	mov	r0, r4
 8001746:	4629      	mov	r1, r5
 8001748:	f7fe fda0 	bl	800028c <__adddf3>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	ec43 2b17 	vmov	d7, r2, r3
 8001754:	eeb0 0a47 	vmov.f32	s0, s14
 8001758:	eef0 0a67 	vmov.f32	s1, s15
 800175c:	f009 fdfc 	bl	800b358 <sqrt>
 8001760:	ec55 4b10 	vmov	r4, r5, d0
 8001764:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8001768:	f009 fd1e 	bl	800b1a8 <tan>
 800176c:	ec51 0b10 	vmov	r0, r1, d0
 8001770:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001774:	f7fe ff40 	bl	80005f8 <__aeabi_dmul>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4620      	mov	r0, r4
 800177e:	4629      	mov	r1, r5
 8001780:	f7fe fd82 	bl	8000288 <__aeabi_dsub>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    r2 = z - l1 + l5;
 800178c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001790:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001794:	f7fe fd78 	bl	8000288 <__aeabi_dsub>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80017a0:	f7fe fd74 	bl	800028c <__adddf3>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    r3 = sqrt( r1*r1 + r2*r2 );
 80017ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80017b0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80017b4:	f7fe ff20 	bl	80005f8 <__aeabi_dmul>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4614      	mov	r4, r2
 80017be:	461d      	mov	r5, r3
 80017c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80017c4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80017c8:	f7fe ff16 	bl	80005f8 <__aeabi_dmul>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4620      	mov	r0, r4
 80017d2:	4629      	mov	r1, r5
 80017d4:	f7fe fd5a 	bl	800028c <__adddf3>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	ec43 2b17 	vmov	d7, r2, r3
 80017e0:	eeb0 0a47 	vmov.f32	s0, s14
 80017e4:	eef0 0a67 	vmov.f32	s1, s15
 80017e8:	f009 fdb6 	bl	800b358 <sqrt>
 80017ec:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
    phi1 = atan( r2 / r1 );
 80017f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80017f4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80017f8:	f7ff f828 	bl	800084c <__aeabi_ddiv>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	ec43 2b17 	vmov	d7, r2, r3
 8001804:	eeb0 0a47 	vmov.f32	s0, s14
 8001808:	eef0 0a67 	vmov.f32	s1, s15
 800180c:	f009 fa74 	bl	800acf8 <atan>
 8001810:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
    phi2 = M_PI/2 - phi1;
 8001814:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001818:	a13f      	add	r1, pc, #252	; (adr r1, 8001918 <KS_calc_IK+0x320>)
 800181a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800181e:	f7fe fd33 	bl	8000288 <__aeabi_dsub>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    q2 = acos( ( l3*l3 - l2*l2 - r3*r3 ) / (-2*l2*r3) ) - phi2;
 800182a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800182e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001832:	f7fe fee1 	bl	80005f8 <__aeabi_dmul>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4614      	mov	r4, r2
 800183c:	461d      	mov	r5, r3
 800183e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001842:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001846:	f7fe fed7 	bl	80005f8 <__aeabi_dmul>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4620      	mov	r0, r4
 8001850:	4629      	mov	r1, r5
 8001852:	f7fe fd19 	bl	8000288 <__aeabi_dsub>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4614      	mov	r4, r2
 800185c:	461d      	mov	r5, r3
 800185e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001862:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001866:	f7fe fec7 	bl	80005f8 <__aeabi_dmul>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4620      	mov	r0, r4
 8001870:	4629      	mov	r1, r5
 8001872:	f7fe fd09 	bl	8000288 <__aeabi_dsub>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4614      	mov	r4, r2
 800187c:	461d      	mov	r5, r3
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001886:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800188a:	f7fe feb5 	bl	80005f8 <__aeabi_dmul>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4610      	mov	r0, r2
 8001894:	4619      	mov	r1, r3
 8001896:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800189a:	f7fe fead 	bl	80005f8 <__aeabi_dmul>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4620      	mov	r0, r4
 80018a4:	4629      	mov	r1, r5
 80018a6:	f7fe ffd1 	bl	800084c <__aeabi_ddiv>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	ec43 2b17 	vmov	d7, r2, r3
 80018b2:	eeb0 0a47 	vmov.f32	s0, s14
 80018b6:	eef0 0a67 	vmov.f32	s1, s15
 80018ba:	f009 fca9 	bl	800b210 <acos>
 80018be:	ec51 0b10 	vmov	r0, r1, d0
 80018c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018c6:	f7fe fcdf 	bl	8000288 <__aeabi_dsub>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	e9c7 2308 	strd	r2, r3, [r7, #32]
    q3 = acos( ( r3*r3 - l2*l2 - l3*l3 ) / (-2*l2*l3) ) - M_PI/2;
 80018d2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80018d6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80018da:	f7fe fe8d 	bl	80005f8 <__aeabi_dmul>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4614      	mov	r4, r2
 80018e4:	461d      	mov	r5, r3
 80018e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80018ea:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80018ee:	f7fe fe83 	bl	80005f8 <__aeabi_dmul>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4620      	mov	r0, r4
 80018f8:	4629      	mov	r1, r5
 80018fa:	f7fe fcc5 	bl	8000288 <__aeabi_dsub>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	4614      	mov	r4, r2
 8001904:	461d      	mov	r5, r3
 8001906:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800190a:	e00b      	b.n	8001924 <KS_calc_IK+0x32c>
 800190c:	f3af 8000 	nop.w
 8001910:	00000000 	.word	0x00000000
 8001914:	40000000 	.word	0x40000000
 8001918:	54442d18 	.word	0x54442d18
 800191c:	3ff921fb 	.word	0x3ff921fb
 8001920:	20000218 	.word	0x20000218
 8001924:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001928:	f7fe fe66 	bl	80005f8 <__aeabi_dmul>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4620      	mov	r0, r4
 8001932:	4629      	mov	r1, r5
 8001934:	f7fe fca8 	bl	8000288 <__aeabi_dsub>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4614      	mov	r4, r2
 800193e:	461d      	mov	r5, r3
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001948:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800194c:	f7fe fe54 	bl	80005f8 <__aeabi_dmul>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4610      	mov	r0, r2
 8001956:	4619      	mov	r1, r3
 8001958:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800195c:	f7fe fe4c 	bl	80005f8 <__aeabi_dmul>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4620      	mov	r0, r4
 8001966:	4629      	mov	r1, r5
 8001968:	f7fe ff70 	bl	800084c <__aeabi_ddiv>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	ec43 2b17 	vmov	d7, r2, r3
 8001974:	eeb0 0a47 	vmov.f32	s0, s14
 8001978:	eef0 0a67 	vmov.f32	s1, s15
 800197c:	f009 fc48 	bl	800b210 <acos>
 8001980:	ec51 0b10 	vmov	r0, r1, d0
 8001984:	a32f      	add	r3, pc, #188	; (adr r3, 8001a44 <KS_calc_IK+0x44c>)
 8001986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198a:	f7fe fc7d 	bl	8000288 <__aeabi_dsub>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	e9c7 2306 	strd	r2, r3, [r7, #24]

    //check for NaN
    if(q1 != q1 || q2 != q2 || q3 != q3)
 8001996:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800199a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800199e:	f7ff f893 	bl	8000ac8 <__aeabi_dcmpeq>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d011      	beq.n	80019cc <KS_calc_IK+0x3d4>
 80019a8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019ac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80019b0:	f7ff f88a 	bl	8000ac8 <__aeabi_dcmpeq>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d008      	beq.n	80019cc <KS_calc_IK+0x3d4>
 80019ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019c2:	f7ff f881 	bl	8000ac8 <__aeabi_dcmpeq>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <KS_calc_IK+0x3d8>
        return false;
 80019cc:	2300      	movs	r3, #0
 80019ce:	e033      	b.n	8001a38 <KS_calc_IK+0x440>

    RobotParams.q1 = RobotParams.q1_off + q1;
 80019d0:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <KS_calc_IK+0x448>)
 80019d2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80019d6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80019da:	f7fe fc57 	bl	800028c <__adddf3>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4917      	ldr	r1, [pc, #92]	; (8001a40 <KS_calc_IK+0x448>)
 80019e4:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    RobotParams.q2 = RobotParams.q2_off + q2;
 80019e8:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <KS_calc_IK+0x448>)
 80019ea:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80019ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019f2:	f7fe fc4b 	bl	800028c <__adddf3>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4911      	ldr	r1, [pc, #68]	; (8001a40 <KS_calc_IK+0x448>)
 80019fc:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    RobotParams.q3 = RobotParams.q3_off + q3;
 8001a00:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <KS_calc_IK+0x448>)
 8001a02:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001a06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a0a:	f7fe fc3f 	bl	800028c <__adddf3>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	490b      	ldr	r1, [pc, #44]	; (8001a40 <KS_calc_IK+0x448>)
 8001a14:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

    RobotParams.x = x;
 8001a18:	4909      	ldr	r1, [pc, #36]	; (8001a40 <KS_calc_IK+0x448>)
 8001a1a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a1e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    RobotParams.y = y;
 8001a22:	4907      	ldr	r1, [pc, #28]	; (8001a40 <KS_calc_IK+0x448>)
 8001a24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a28:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    RobotParams.z = z;
 8001a2c:	4904      	ldr	r1, [pc, #16]	; (8001a40 <KS_calc_IK+0x448>)
 8001a2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a32:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

    return true;
 8001a36:	2301      	movs	r3, #1
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3780      	adds	r7, #128	; 0x80
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a40:	20000218 	.word	0x20000218
 8001a44:	54442d18 	.word	0x54442d18
 8001a48:	3ff921fb 	.word	0x3ff921fb

08001a4c <KS_calc_FK>:

void KS_calc_FK()
{
 8001a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a50:	b092      	sub	sp, #72	; 0x48
 8001a52:	af00      	add	r7, sp, #0
    double l1 = RobotParams.l1;     // base to q2
 8001a54:	4ba4      	ldr	r3, [pc, #656]	; (8001ce8 <KS_calc_FK+0x29c>)
 8001a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    double l2 = RobotParams.l2;     // q2 to q3
 8001a5e:	4ba2      	ldr	r3, [pc, #648]	; (8001ce8 <KS_calc_FK+0x29c>)
 8001a60:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a64:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double l3 = RobotParams.l3;    	// q3 to efector
 8001a68:	4b9f      	ldr	r3, [pc, #636]	; (8001ce8 <KS_calc_FK+0x29c>)
 8001a6a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001a6e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    double l4 = RobotParams.l4;     // right shift
 8001a72:	4b9d      	ldr	r3, [pc, #628]	; (8001ce8 <KS_calc_FK+0x29c>)
 8001a74:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a78:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double l5 = RobotParams.l5;     // efector height
 8001a7c:	4b9a      	ldr	r3, [pc, #616]	; (8001ce8 <KS_calc_FK+0x29c>)
 8001a7e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001a82:	e9c7 2308 	strd	r2, r3, [r7, #32]

    double q1 = RobotParams.aq1 - RobotParams.q1_off;
 8001a86:	4b98      	ldr	r3, [pc, #608]	; (8001ce8 <KS_calc_FK+0x29c>)
 8001a88:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8001a8c:	4b96      	ldr	r3, [pc, #600]	; (8001ce8 <KS_calc_FK+0x29c>)
 8001a8e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001a92:	f7fe fbf9 	bl	8000288 <__aeabi_dsub>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double q2 = RobotParams.aq2 - RobotParams.q2_off;
 8001a9e:	4b92      	ldr	r3, [pc, #584]	; (8001ce8 <KS_calc_FK+0x29c>)
 8001aa0:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8001aa4:	4b90      	ldr	r3, [pc, #576]	; (8001ce8 <KS_calc_FK+0x29c>)
 8001aa6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001aaa:	f7fe fbed 	bl	8000288 <__aeabi_dsub>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double q3 = RobotParams.aq3 - RobotParams.q3_off;
 8001ab6:	4b8c      	ldr	r3, [pc, #560]	; (8001ce8 <KS_calc_FK+0x29c>)
 8001ab8:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8001abc:	4b8a      	ldr	r3, [pc, #552]	; (8001ce8 <KS_calc_FK+0x29c>)
 8001abe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001ac2:	f7fe fbe1 	bl	8000288 <__aeabi_dsub>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	e9c7 2302 	strd	r2, r3, [r7, #8]

    RobotParams.ax = -l2*sin(q2)*cos(q1) + l3*cos(q1)*cos(q2 + q3) + l4*sin(q1);
 8001ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ad0:	603b      	str	r3, [r7, #0]
 8001ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ad4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	ed97 0b04 	vldr	d0, [r7, #16]
 8001ade:	f009 fb0b 	bl	800b0f8 <sin>
 8001ae2:	ec53 2b10 	vmov	r2, r3, d0
 8001ae6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001aea:	f7fe fd85 	bl	80005f8 <__aeabi_dmul>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4690      	mov	r8, r2
 8001af4:	4699      	mov	r9, r3
 8001af6:	ed97 0b06 	vldr	d0, [r7, #24]
 8001afa:	f009 fa9d 	bl	800b038 <cos>
 8001afe:	ec53 2b10 	vmov	r2, r3, d0
 8001b02:	4640      	mov	r0, r8
 8001b04:	4649      	mov	r1, r9
 8001b06:	f7fe fd77 	bl	80005f8 <__aeabi_dmul>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4690      	mov	r8, r2
 8001b10:	4699      	mov	r9, r3
 8001b12:	ed97 0b06 	vldr	d0, [r7, #24]
 8001b16:	f009 fa8f 	bl	800b038 <cos>
 8001b1a:	ec51 0b10 	vmov	r0, r1, d0
 8001b1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001b22:	f7fe fd69 	bl	80005f8 <__aeabi_dmul>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4692      	mov	sl, r2
 8001b2c:	469b      	mov	fp, r3
 8001b2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b32:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b36:	f7fe fba9 	bl	800028c <__adddf3>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	ec43 2b17 	vmov	d7, r2, r3
 8001b42:	eeb0 0a47 	vmov.f32	s0, s14
 8001b46:	eef0 0a67 	vmov.f32	s1, s15
 8001b4a:	f009 fa75 	bl	800b038 <cos>
 8001b4e:	ec53 2b10 	vmov	r2, r3, d0
 8001b52:	4650      	mov	r0, sl
 8001b54:	4659      	mov	r1, fp
 8001b56:	f7fe fd4f 	bl	80005f8 <__aeabi_dmul>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4640      	mov	r0, r8
 8001b60:	4649      	mov	r1, r9
 8001b62:	f7fe fb93 	bl	800028c <__adddf3>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4690      	mov	r8, r2
 8001b6c:	4699      	mov	r9, r3
 8001b6e:	ed97 0b06 	vldr	d0, [r7, #24]
 8001b72:	f009 fac1 	bl	800b0f8 <sin>
 8001b76:	ec51 0b10 	vmov	r0, r1, d0
 8001b7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b7e:	f7fe fd3b 	bl	80005f8 <__aeabi_dmul>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4640      	mov	r0, r8
 8001b88:	4649      	mov	r1, r9
 8001b8a:	f7fe fb7f 	bl	800028c <__adddf3>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4955      	ldr	r1, [pc, #340]	; (8001ce8 <KS_calc_FK+0x29c>)
 8001b94:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
    RobotParams.ay = -l2*sin(q1)*sin(q2) + l3*sin(q1)*cos(q2 + q3) - l4*cos(q1);
 8001b98:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8001b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b9c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001ba0:	ed97 0b06 	vldr	d0, [r7, #24]
 8001ba4:	f009 faa8 	bl	800b0f8 <sin>
 8001ba8:	ec53 2b10 	vmov	r2, r3, d0
 8001bac:	4620      	mov	r0, r4
 8001bae:	4629      	mov	r1, r5
 8001bb0:	f7fe fd22 	bl	80005f8 <__aeabi_dmul>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4614      	mov	r4, r2
 8001bba:	461d      	mov	r5, r3
 8001bbc:	ed97 0b04 	vldr	d0, [r7, #16]
 8001bc0:	f009 fa9a 	bl	800b0f8 <sin>
 8001bc4:	ec53 2b10 	vmov	r2, r3, d0
 8001bc8:	4620      	mov	r0, r4
 8001bca:	4629      	mov	r1, r5
 8001bcc:	f7fe fd14 	bl	80005f8 <__aeabi_dmul>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4614      	mov	r4, r2
 8001bd6:	461d      	mov	r5, r3
 8001bd8:	ed97 0b06 	vldr	d0, [r7, #24]
 8001bdc:	f009 fa8c 	bl	800b0f8 <sin>
 8001be0:	ec51 0b10 	vmov	r0, r1, d0
 8001be4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001be8:	f7fe fd06 	bl	80005f8 <__aeabi_dmul>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4690      	mov	r8, r2
 8001bf2:	4699      	mov	r9, r3
 8001bf4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bf8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bfc:	f7fe fb46 	bl	800028c <__adddf3>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	ec43 2b17 	vmov	d7, r2, r3
 8001c08:	eeb0 0a47 	vmov.f32	s0, s14
 8001c0c:	eef0 0a67 	vmov.f32	s1, s15
 8001c10:	f009 fa12 	bl	800b038 <cos>
 8001c14:	ec53 2b10 	vmov	r2, r3, d0
 8001c18:	4640      	mov	r0, r8
 8001c1a:	4649      	mov	r1, r9
 8001c1c:	f7fe fcec 	bl	80005f8 <__aeabi_dmul>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4620      	mov	r0, r4
 8001c26:	4629      	mov	r1, r5
 8001c28:	f7fe fb30 	bl	800028c <__adddf3>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4614      	mov	r4, r2
 8001c32:	461d      	mov	r5, r3
 8001c34:	ed97 0b06 	vldr	d0, [r7, #24]
 8001c38:	f009 f9fe 	bl	800b038 <cos>
 8001c3c:	ec51 0b10 	vmov	r0, r1, d0
 8001c40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c44:	f7fe fcd8 	bl	80005f8 <__aeabi_dmul>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	4629      	mov	r1, r5
 8001c50:	f7fe fb1a 	bl	8000288 <__aeabi_dsub>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4923      	ldr	r1, [pc, #140]	; (8001ce8 <KS_calc_FK+0x29c>)
 8001c5a:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
    RobotParams.az = l1 + l2*cos(q2) + l3*sin(q2 + q3) - l5;
 8001c5e:	ed97 0b04 	vldr	d0, [r7, #16]
 8001c62:	f009 f9e9 	bl	800b038 <cos>
 8001c66:	ec51 0b10 	vmov	r0, r1, d0
 8001c6a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001c6e:	f7fe fcc3 	bl	80005f8 <__aeabi_dmul>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001c7e:	f7fe fb05 	bl	800028c <__adddf3>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4614      	mov	r4, r2
 8001c88:	461d      	mov	r5, r3
 8001c8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c92:	f7fe fafb 	bl	800028c <__adddf3>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	ec43 2b17 	vmov	d7, r2, r3
 8001c9e:	eeb0 0a47 	vmov.f32	s0, s14
 8001ca2:	eef0 0a67 	vmov.f32	s1, s15
 8001ca6:	f009 fa27 	bl	800b0f8 <sin>
 8001caa:	ec51 0b10 	vmov	r0, r1, d0
 8001cae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cb2:	f7fe fca1 	bl	80005f8 <__aeabi_dmul>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	4620      	mov	r0, r4
 8001cbc:	4629      	mov	r1, r5
 8001cbe:	f7fe fae5 	bl	800028c <__adddf3>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	4619      	mov	r1, r3
 8001cca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001cce:	f7fe fadb 	bl	8000288 <__aeabi_dsub>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4904      	ldr	r1, [pc, #16]	; (8001ce8 <KS_calc_FK+0x29c>)
 8001cd8:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
}
 8001cdc:	bf00      	nop
 8001cde:	3748      	adds	r7, #72	; 0x48
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000218 	.word	0x20000218

08001cec <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, unsigned char *ptr, int len)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, ptr, len, 50);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	2332      	movs	r3, #50	; 0x32
 8001cfe:	68b9      	ldr	r1, [r7, #8]
 8001d00:	4803      	ldr	r0, [pc, #12]	; (8001d10 <_write+0x24>)
 8001d02:	f004 fe55 	bl	80069b0 <HAL_UART_Transmit>
	return len;
 8001d06:	687b      	ldr	r3, [r7, #4]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	200003f8 	.word	0x200003f8

08001d14 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
	SRV_uartIRQ(huart);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 fd35 	bl	800278c <SRV_uartIRQ>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	0000      	movs	r0, r0
 8001d2c:	0000      	movs	r0, r0
	...

08001d30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	ed2d 8b04 	vpush	{d8-d9}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d38:	f001 f97c 	bl	8003034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d3c:	f000 f876 	bl	8001e2c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 8001d40:	f000 f9ce 	bl	80020e0 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d44:	f000 f9ea 	bl	800211c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001d48:	f000 f99a 	bl	8002080 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8001d4c:	f000 f9c8 	bl	80020e0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001d50:	f000 f966 	bl	8002020 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001d54:	f000 f8bc 	bl	8001ed0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  SRV_Init(&huart1);
 8001d58:	4831      	ldr	r0, [pc, #196]	; (8001e20 <main+0xf0>)
 8001d5a:	f000 fe35 	bl	80029c8 <SRV_Init>
  PAD_Init(&hadc1);
 8001d5e:	4831      	ldr	r0, [pc, #196]	; (8001e24 <main+0xf4>)
 8001d60:	f000 fa68 	bl	8002234 <PAD_Init>
  RobotParams_Init(L1, L2, L3, L4, L5, deg2rad(Q1_OFF), deg2rad(Q2_OFF), deg2rad(Q3_OFF));
 8001d64:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8001de0 <main+0xb0>
 8001d68:	f7ff fbba 	bl	80014e0 <deg2rad>
 8001d6c:	eeb0 8a40 	vmov.f32	s16, s0
 8001d70:	eef0 8a60 	vmov.f32	s17, s1
 8001d74:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8001de8 <main+0xb8>
 8001d78:	f7ff fbb2 	bl	80014e0 <deg2rad>
 8001d7c:	eeb0 9a40 	vmov.f32	s18, s0
 8001d80:	eef0 9a60 	vmov.f32	s19, s1
 8001d84:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8001df0 <main+0xc0>
 8001d88:	f7ff fbaa 	bl	80014e0 <deg2rad>
 8001d8c:	eeb0 7a40 	vmov.f32	s14, s0
 8001d90:	eef0 7a60 	vmov.f32	s15, s1
 8001d94:	eeb0 6a49 	vmov.f32	s12, s18
 8001d98:	eef0 6a69 	vmov.f32	s13, s19
 8001d9c:	eeb0 5a48 	vmov.f32	s10, s16
 8001da0:	eef0 5a68 	vmov.f32	s11, s17
 8001da4:	ed9f 4b14 	vldr	d4, [pc, #80]	; 8001df8 <main+0xc8>
 8001da8:	ed9f 3b15 	vldr	d3, [pc, #84]	; 8001e00 <main+0xd0>
 8001dac:	ed9f 2b16 	vldr	d2, [pc, #88]	; 8001e08 <main+0xd8>
 8001db0:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8001e10 <main+0xe0>
 8001db4:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8001e18 <main+0xe8>
 8001db8:	f7ff f898 	bl	8000eec <RobotParams_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_Delay(1000);
 8001dbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dc0:	f001 f9b4 	bl	800312c <HAL_Delay>

  printf("System started\r\n");
 8001dc4:	4818      	ldr	r0, [pc, #96]	; (8001e28 <main+0xf8>)
 8001dc6:	f006 fef3 	bl	8008bb0 <puts>

  CTRL_startup();
 8001dca:	f7ff fa51 	bl	8001270 <CTRL_startup>

  while (1)
  {
	  PAD_updateState();
 8001dce:	f000 fa65 	bl	800229c <PAD_updateState>
	  CTRL_getRealParams();
 8001dd2:	f7ff f95f 	bl	8001094 <CTRL_getRealParams>

	  CTRL_Loop_Manual();
 8001dd6:	f7ff fae3 	bl	80013a0 <CTRL_Loop_Manual>
	  PAD_updateState();
 8001dda:	e7f8      	b.n	8001dce <main+0x9e>
 8001ddc:	f3af 8000 	nop.w
	...
 8001dec:	40300000 	.word	0x40300000
 8001df0:	00000000 	.word	0x00000000
 8001df4:	c0140000 	.word	0xc0140000
 8001df8:	cccccccd 	.word	0xcccccccd
 8001dfc:	4042cccc 	.word	0x4042cccc
 8001e00:	00000000 	.word	0x00000000
 8001e04:	403fc000 	.word	0x403fc000
 8001e08:	9999999a 	.word	0x9999999a
 8001e0c:	40610999 	.word	0x40610999
 8001e10:	cccccccd 	.word	0xcccccccd
 8001e14:	4054cccc 	.word	0x4054cccc
 8001e18:	00000000 	.word	0x00000000
 8001e1c:	40464000 	.word	0x40464000
 8001e20:	20000374 	.word	0x20000374
 8001e24:	200002c8 	.word	0x200002c8
 8001e28:	0800d9b8 	.word	0x0800d9b8

08001e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b096      	sub	sp, #88	; 0x58
 8001e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e32:	f107 0314 	add.w	r3, r7, #20
 8001e36:	2244      	movs	r2, #68	; 0x44
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f006 f9c0 	bl	80081c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e40:	463b      	mov	r3, r7
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	605a      	str	r2, [r3, #4]
 8001e48:	609a      	str	r2, [r3, #8]
 8001e4a:	60da      	str	r2, [r3, #12]
 8001e4c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001e4e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001e52:	f003 f9f7 	bl	8005244 <HAL_PWREx_ControlVoltageScaling>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001e5c:	f000 f9e4 	bl	8002228 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e60:	2302      	movs	r3, #2
 8001e62:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e68:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e6a:	2310      	movs	r3, #16
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e72:	2302      	movs	r3, #2
 8001e74:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001e76:	2301      	movs	r3, #1
 8001e78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001e7a:	230a      	movs	r3, #10
 8001e7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001e7e:	2307      	movs	r3, #7
 8001e80:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e82:	2302      	movs	r3, #2
 8001e84:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e86:	2302      	movs	r3, #2
 8001e88:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e8a:	f107 0314 	add.w	r3, r7, #20
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f003 fa2e 	bl	80052f0 <HAL_RCC_OscConfig>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001e9a:	f000 f9c5 	bl	8002228 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e9e:	230f      	movs	r3, #15
 8001ea0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001eb2:	463b      	mov	r3, r7
 8001eb4:	2104      	movs	r1, #4
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f003 fdf6 	bl	8005aa8 <HAL_RCC_ClockConfig>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001ec2:	f000 f9b1 	bl	8002228 <Error_Handler>
  }
}
 8001ec6:	bf00      	nop
 8001ec8:	3758      	adds	r7, #88	; 0x58
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08a      	sub	sp, #40	; 0x28
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001ed6:	f107 031c 	add.w	r3, r7, #28
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001ee2:	1d3b      	adds	r3, r7, #4
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
 8001ef0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001ef2:	4b45      	ldr	r3, [pc, #276]	; (8002008 <MX_ADC1_Init+0x138>)
 8001ef4:	4a45      	ldr	r2, [pc, #276]	; (800200c <MX_ADC1_Init+0x13c>)
 8001ef6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001ef8:	4b43      	ldr	r3, [pc, #268]	; (8002008 <MX_ADC1_Init+0x138>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001efe:	4b42      	ldr	r3, [pc, #264]	; (8002008 <MX_ADC1_Init+0x138>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f04:	4b40      	ldr	r3, [pc, #256]	; (8002008 <MX_ADC1_Init+0x138>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001f0a:	4b3f      	ldr	r3, [pc, #252]	; (8002008 <MX_ADC1_Init+0x138>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f10:	4b3d      	ldr	r3, [pc, #244]	; (8002008 <MX_ADC1_Init+0x138>)
 8001f12:	2204      	movs	r2, #4
 8001f14:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001f16:	4b3c      	ldr	r3, [pc, #240]	; (8002008 <MX_ADC1_Init+0x138>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001f1c:	4b3a      	ldr	r3, [pc, #232]	; (8002008 <MX_ADC1_Init+0x138>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8001f22:	4b39      	ldr	r3, [pc, #228]	; (8002008 <MX_ADC1_Init+0x138>)
 8001f24:	2204      	movs	r2, #4
 8001f26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f28:	4b37      	ldr	r3, [pc, #220]	; (8002008 <MX_ADC1_Init+0x138>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f30:	4b35      	ldr	r3, [pc, #212]	; (8002008 <MX_ADC1_Init+0x138>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f36:	4b34      	ldr	r3, [pc, #208]	; (8002008 <MX_ADC1_Init+0x138>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001f3c:	4b32      	ldr	r3, [pc, #200]	; (8002008 <MX_ADC1_Init+0x138>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001f44:	4b30      	ldr	r3, [pc, #192]	; (8002008 <MX_ADC1_Init+0x138>)
 8001f46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f4a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001f4c:	4b2e      	ldr	r3, [pc, #184]	; (8002008 <MX_ADC1_Init+0x138>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f54:	482c      	ldr	r0, [pc, #176]	; (8002008 <MX_ADC1_Init+0x138>)
 8001f56:	f001 fb09 	bl	800356c <HAL_ADC_Init>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001f60:	f000 f962 	bl	8002228 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001f68:	f107 031c 	add.w	r3, r7, #28
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4826      	ldr	r0, [pc, #152]	; (8002008 <MX_ADC1_Init+0x138>)
 8001f70:	f002 fb48 	bl	8004604 <HAL_ADCEx_MultiModeConfigChannel>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001f7a:	f000 f955 	bl	8002228 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001f7e:	4b24      	ldr	r3, [pc, #144]	; (8002010 <MX_ADC1_Init+0x140>)
 8001f80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f82:	2306      	movs	r3, #6
 8001f84:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001f86:	2307      	movs	r3, #7
 8001f88:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001f8a:	237f      	movs	r3, #127	; 0x7f
 8001f8c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001f8e:	2304      	movs	r3, #4
 8001f90:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f96:	1d3b      	adds	r3, r7, #4
 8001f98:	4619      	mov	r1, r3
 8001f9a:	481b      	ldr	r0, [pc, #108]	; (8002008 <MX_ADC1_Init+0x138>)
 8001f9c:	f001 fd16 	bl	80039cc <HAL_ADC_ConfigChannel>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8001fa6:	f000 f93f 	bl	8002228 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001faa:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <MX_ADC1_Init+0x144>)
 8001fac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001fae:	230c      	movs	r3, #12
 8001fb0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fb2:	1d3b      	adds	r3, r7, #4
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4814      	ldr	r0, [pc, #80]	; (8002008 <MX_ADC1_Init+0x138>)
 8001fb8:	f001 fd08 	bl	80039cc <HAL_ADC_ConfigChannel>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8001fc2:	f000 f931 	bl	8002228 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001fc6:	4b14      	ldr	r3, [pc, #80]	; (8002018 <MX_ADC1_Init+0x148>)
 8001fc8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001fca:	2312      	movs	r3, #18
 8001fcc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	480d      	ldr	r0, [pc, #52]	; (8002008 <MX_ADC1_Init+0x138>)
 8001fd4:	f001 fcfa 	bl	80039cc <HAL_ADC_ConfigChannel>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8001fde:	f000 f923 	bl	8002228 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <MX_ADC1_Init+0x14c>)
 8001fe4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001fe6:	2318      	movs	r3, #24
 8001fe8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	4619      	mov	r1, r3
 8001fee:	4806      	ldr	r0, [pc, #24]	; (8002008 <MX_ADC1_Init+0x138>)
 8001ff0:	f001 fcec 	bl	80039cc <HAL_ADC_ConfigChannel>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_ADC1_Init+0x12e>
  {
    Error_Handler();
 8001ffa:	f000 f915 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ffe:	bf00      	nop
 8002000:	3728      	adds	r7, #40	; 0x28
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	200002c8 	.word	0x200002c8
 800200c:	50040000 	.word	0x50040000
 8002010:	04300002 	.word	0x04300002
 8002014:	08600004 	.word	0x08600004
 8002018:	0c900008 	.word	0x0c900008
 800201c:	10c00010 	.word	0x10c00010

08002020 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002024:	4b14      	ldr	r3, [pc, #80]	; (8002078 <MX_USART1_UART_Init+0x58>)
 8002026:	4a15      	ldr	r2, [pc, #84]	; (800207c <MX_USART1_UART_Init+0x5c>)
 8002028:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800202a:	4b13      	ldr	r3, [pc, #76]	; (8002078 <MX_USART1_UART_Init+0x58>)
 800202c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002030:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002032:	4b11      	ldr	r3, [pc, #68]	; (8002078 <MX_USART1_UART_Init+0x58>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <MX_USART1_UART_Init+0x58>)
 800203a:	2200      	movs	r2, #0
 800203c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800203e:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <MX_USART1_UART_Init+0x58>)
 8002040:	2200      	movs	r2, #0
 8002042:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002044:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <MX_USART1_UART_Init+0x58>)
 8002046:	220c      	movs	r2, #12
 8002048:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800204a:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <MX_USART1_UART_Init+0x58>)
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002050:	4b09      	ldr	r3, [pc, #36]	; (8002078 <MX_USART1_UART_Init+0x58>)
 8002052:	2200      	movs	r2, #0
 8002054:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002056:	4b08      	ldr	r3, [pc, #32]	; (8002078 <MX_USART1_UART_Init+0x58>)
 8002058:	2200      	movs	r2, #0
 800205a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <MX_USART1_UART_Init+0x58>)
 800205e:	2200      	movs	r2, #0
 8002060:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8002062:	4805      	ldr	r0, [pc, #20]	; (8002078 <MX_USART1_UART_Init+0x58>)
 8002064:	f004 fc4e 	bl	8006904 <HAL_HalfDuplex_Init>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800206e:	f000 f8db 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000374 	.word	0x20000374
 800207c:	40013800 	.word	0x40013800

08002080 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002084:	4b14      	ldr	r3, [pc, #80]	; (80020d8 <MX_USART2_UART_Init+0x58>)
 8002086:	4a15      	ldr	r2, [pc, #84]	; (80020dc <MX_USART2_UART_Init+0x5c>)
 8002088:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800208a:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <MX_USART2_UART_Init+0x58>)
 800208c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002090:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <MX_USART2_UART_Init+0x58>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002098:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <MX_USART2_UART_Init+0x58>)
 800209a:	2200      	movs	r2, #0
 800209c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <MX_USART2_UART_Init+0x58>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <MX_USART2_UART_Init+0x58>)
 80020a6:	220c      	movs	r2, #12
 80020a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020aa:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <MX_USART2_UART_Init+0x58>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b0:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <MX_USART2_UART_Init+0x58>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020b6:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <MX_USART2_UART_Init+0x58>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <MX_USART2_UART_Init+0x58>)
 80020be:	2200      	movs	r2, #0
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020c2:	4805      	ldr	r0, [pc, #20]	; (80020d8 <MX_USART2_UART_Init+0x58>)
 80020c4:	f004 fbd0 	bl	8006868 <HAL_UART_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80020ce:	f000 f8ab 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	200003f8 	.word	0x200003f8
 80020dc:	40004400 	.word	0x40004400

080020e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020e6:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <MX_DMA_Init+0x38>)
 80020e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ea:	4a0b      	ldr	r2, [pc, #44]	; (8002118 <MX_DMA_Init+0x38>)
 80020ec:	f043 0302 	orr.w	r3, r3, #2
 80020f0:	6493      	str	r3, [r2, #72]	; 0x48
 80020f2:	4b09      	ldr	r3, [pc, #36]	; (8002118 <MX_DMA_Init+0x38>)
 80020f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80020fe:	2200      	movs	r2, #0
 8002100:	2100      	movs	r1, #0
 8002102:	203a      	movs	r0, #58	; 0x3a
 8002104:	f002 fc09 	bl	800491a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8002108:	203a      	movs	r0, #58	; 0x3a
 800210a:	f002 fc22 	bl	8004952 <HAL_NVIC_EnableIRQ>

}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000

0800211c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08a      	sub	sp, #40	; 0x28
 8002120:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002122:	f107 0314 	add.w	r3, r7, #20
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	60da      	str	r2, [r3, #12]
 8002130:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002132:	4b3b      	ldr	r3, [pc, #236]	; (8002220 <MX_GPIO_Init+0x104>)
 8002134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002136:	4a3a      	ldr	r2, [pc, #232]	; (8002220 <MX_GPIO_Init+0x104>)
 8002138:	f043 0304 	orr.w	r3, r3, #4
 800213c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800213e:	4b38      	ldr	r3, [pc, #224]	; (8002220 <MX_GPIO_Init+0x104>)
 8002140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800214a:	4b35      	ldr	r3, [pc, #212]	; (8002220 <MX_GPIO_Init+0x104>)
 800214c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214e:	4a34      	ldr	r2, [pc, #208]	; (8002220 <MX_GPIO_Init+0x104>)
 8002150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002154:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002156:	4b32      	ldr	r3, [pc, #200]	; (8002220 <MX_GPIO_Init+0x104>)
 8002158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002162:	4b2f      	ldr	r3, [pc, #188]	; (8002220 <MX_GPIO_Init+0x104>)
 8002164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002166:	4a2e      	ldr	r2, [pc, #184]	; (8002220 <MX_GPIO_Init+0x104>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800216e:	4b2c      	ldr	r3, [pc, #176]	; (8002220 <MX_GPIO_Init+0x104>)
 8002170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800217a:	4b29      	ldr	r3, [pc, #164]	; (8002220 <MX_GPIO_Init+0x104>)
 800217c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217e:	4a28      	ldr	r2, [pc, #160]	; (8002220 <MX_GPIO_Init+0x104>)
 8002180:	f043 0302 	orr.w	r3, r3, #2
 8002184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002186:	4b26      	ldr	r3, [pc, #152]	; (8002220 <MX_GPIO_Init+0x104>)
 8002188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	607b      	str	r3, [r7, #4]
 8002190:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002192:	2200      	movs	r2, #0
 8002194:	2120      	movs	r1, #32
 8002196:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800219a:	f003 f82d 	bl	80051f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EFFECTOR_Pin|LED_MANUAL_Pin|LED_EFFECTOR_Pin, GPIO_PIN_RESET);
 800219e:	2200      	movs	r2, #0
 80021a0:	21d0      	movs	r1, #208	; 0xd0
 80021a2:	4820      	ldr	r0, [pc, #128]	; (8002224 <MX_GPIO_Init+0x108>)
 80021a4:	f003 f828 	bl	80051f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80021a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021ae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80021b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	4619      	mov	r1, r3
 80021be:	4819      	ldr	r0, [pc, #100]	; (8002224 <MX_GPIO_Init+0x108>)
 80021c0:	f002 fe58 	bl	8004e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80021c4:	2320      	movs	r3, #32
 80021c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c8:	2301      	movs	r3, #1
 80021ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d0:	2300      	movs	r3, #0
 80021d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	4619      	mov	r1, r3
 80021da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021de:	f002 fe49 	bl	8004e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : EFFECTOR_Pin LED_MANUAL_Pin LED_EFFECTOR_Pin */
  GPIO_InitStruct.Pin = EFFECTOR_Pin|LED_MANUAL_Pin|LED_EFFECTOR_Pin;
 80021e2:	23d0      	movs	r3, #208	; 0xd0
 80021e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e6:	2301      	movs	r3, #1
 80021e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ee:	2300      	movs	r3, #0
 80021f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021f2:	f107 0314 	add.w	r3, r7, #20
 80021f6:	4619      	mov	r1, r3
 80021f8:	480a      	ldr	r0, [pc, #40]	; (8002224 <MX_GPIO_Init+0x108>)
 80021fa:	f002 fe3b 	bl	8004e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAD_R_SW_Pin PAD_L_SW_Pin */
  GPIO_InitStruct.Pin = PAD_R_SW_Pin|PAD_L_SW_Pin;
 80021fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002204:	2300      	movs	r3, #0
 8002206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002208:	2301      	movs	r3, #1
 800220a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800220c:	f107 0314 	add.w	r3, r7, #20
 8002210:	4619      	mov	r1, r3
 8002212:	4804      	ldr	r0, [pc, #16]	; (8002224 <MX_GPIO_Init+0x108>)
 8002214:	f002 fe2e 	bl	8004e74 <HAL_GPIO_Init>

}
 8002218:	bf00      	nop
 800221a:	3728      	adds	r7, #40	; 0x28
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40021000 	.word	0x40021000
 8002224:	48000800 	.word	0x48000800

08002228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800222c:	b672      	cpsid	i
}
 800222e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002230:	e7fe      	b.n	8002230 <Error_Handler+0x8>
	...

08002234 <PAD_Init>:

volatile uint16_t adc_data[4];
PadState_t PAD;

void PAD_Init(ADC_HandleTypeDef* hadc)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
	HAL_ADCEx_Calibration_Start(hadc, ADC_SINGLE_ENDED);
 800223c:	217f      	movs	r1, #127	; 0x7f
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f002 f980 	bl	8004544 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(hadc, (uint32_t*)adc_data, 4);
 8002244:	2204      	movs	r2, #4
 8002246:	4913      	ldr	r1, [pc, #76]	; (8002294 <PAD_Init+0x60>)
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f001 fae5 	bl	8003818 <HAL_ADC_Start_DMA>
	PAD.axis_L_X = 0;
 800224e:	4b12      	ldr	r3, [pc, #72]	; (8002298 <PAD_Init+0x64>)
 8002250:	2200      	movs	r2, #0
 8002252:	801a      	strh	r2, [r3, #0]
	PAD.axis_L_Y = 0;
 8002254:	4b10      	ldr	r3, [pc, #64]	; (8002298 <PAD_Init+0x64>)
 8002256:	2200      	movs	r2, #0
 8002258:	805a      	strh	r2, [r3, #2]
	PAD.axis_R_X = 0;
 800225a:	4b0f      	ldr	r3, [pc, #60]	; (8002298 <PAD_Init+0x64>)
 800225c:	2200      	movs	r2, #0
 800225e:	809a      	strh	r2, [r3, #4]
	PAD.axis_R_Y = 0;
 8002260:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <PAD_Init+0x64>)
 8002262:	2200      	movs	r2, #0
 8002264:	80da      	strh	r2, [r3, #6]
	PAD.btn_L_short = false;
 8002266:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <PAD_Init+0x64>)
 8002268:	2200      	movs	r2, #0
 800226a:	721a      	strb	r2, [r3, #8]
	PAD.btn_L_long = false;
 800226c:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <PAD_Init+0x64>)
 800226e:	2200      	movs	r2, #0
 8002270:	729a      	strb	r2, [r3, #10]
	PAD.btn_R_short = false;
 8002272:	4b09      	ldr	r3, [pc, #36]	; (8002298 <PAD_Init+0x64>)
 8002274:	2200      	movs	r2, #0
 8002276:	725a      	strb	r2, [r3, #9]
	PAD.btn_R_long = false;
 8002278:	4b07      	ldr	r3, [pc, #28]	; (8002298 <PAD_Init+0x64>)
 800227a:	2200      	movs	r2, #0
 800227c:	72da      	strb	r2, [r3, #11]
	PAD.btn_combo_short = false;
 800227e:	4b06      	ldr	r3, [pc, #24]	; (8002298 <PAD_Init+0x64>)
 8002280:	2200      	movs	r2, #0
 8002282:	731a      	strb	r2, [r3, #12]
	PAD.btn_combo_long = false;
 8002284:	4b04      	ldr	r3, [pc, #16]	; (8002298 <PAD_Init+0x64>)
 8002286:	2200      	movs	r2, #0
 8002288:	735a      	strb	r2, [r3, #13]
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	2000047c 	.word	0x2000047c
 8002298:	20000484 	.word	0x20000484

0800229c <PAD_updateState>:

// SUPREME ULTIMATE MULTI BUTTON SHORT N LONG PRESS DEBOUNCING ALGORITHM
void PAD_updateState()
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
	// get actual time
	uint32_t now = HAL_GetTick();
 80022a2:	f000 ff37 	bl	8003114 <HAL_GetTick>
 80022a6:	6078      	str	r0, [r7, #4]
	static uint32_t last_combo = 0;


	// ##### HANDLE ADC #####
	static uint32_t last_adc = 0;
	if( now-last_adc > ADC_INTERVAL )
 80022a8:	4b90      	ldr	r3, [pc, #576]	; (80024ec <PAD_updateState+0x250>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d05b      	beq.n	800236a <PAD_updateState+0xce>
	{
		if( hold_lb || hold_long_lb || hold_rb || hold_long_rb)
 80022b2:	4b8f      	ldr	r3, [pc, #572]	; (80024f0 <PAD_updateState+0x254>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10b      	bne.n	80022d2 <PAD_updateState+0x36>
 80022ba:	4b8e      	ldr	r3, [pc, #568]	; (80024f4 <PAD_updateState+0x258>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d107      	bne.n	80022d2 <PAD_updateState+0x36>
 80022c2:	4b8d      	ldr	r3, [pc, #564]	; (80024f8 <PAD_updateState+0x25c>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d103      	bne.n	80022d2 <PAD_updateState+0x36>
 80022ca:	4b8c      	ldr	r3, [pc, #560]	; (80024fc <PAD_updateState+0x260>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00c      	beq.n	80022ec <PAD_updateState+0x50>
		{
			PAD.axis_L_X = 0;
 80022d2:	4b8b      	ldr	r3, [pc, #556]	; (8002500 <PAD_updateState+0x264>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	801a      	strh	r2, [r3, #0]
			PAD.axis_L_Y = 0;
 80022d8:	4b89      	ldr	r3, [pc, #548]	; (8002500 <PAD_updateState+0x264>)
 80022da:	2200      	movs	r2, #0
 80022dc:	805a      	strh	r2, [r3, #2]
			PAD.axis_R_X = 0;
 80022de:	4b88      	ldr	r3, [pc, #544]	; (8002500 <PAD_updateState+0x264>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	809a      	strh	r2, [r3, #4]
			PAD.axis_R_Y = 0;
 80022e4:	4b86      	ldr	r3, [pc, #536]	; (8002500 <PAD_updateState+0x264>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	80da      	strh	r2, [r3, #6]
 80022ea:	e03b      	b.n	8002364 <PAD_updateState+0xc8>
		}
		else
		{
			PAD.axis_L_X = ((4095-adc_data[1])-2048)/200;
 80022ec:	4b85      	ldr	r3, [pc, #532]	; (8002504 <PAD_updateState+0x268>)
 80022ee:	885b      	ldrh	r3, [r3, #2]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 80022f6:	3307      	adds	r3, #7
 80022f8:	4a83      	ldr	r2, [pc, #524]	; (8002508 <PAD_updateState+0x26c>)
 80022fa:	fb82 1203 	smull	r1, r2, r2, r3
 80022fe:	1192      	asrs	r2, r2, #6
 8002300:	17db      	asrs	r3, r3, #31
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	b21a      	sxth	r2, r3
 8002306:	4b7e      	ldr	r3, [pc, #504]	; (8002500 <PAD_updateState+0x264>)
 8002308:	801a      	strh	r2, [r3, #0]
			PAD.axis_L_Y = ((4095-adc_data[0])-2048)/200;
 800230a:	4b7e      	ldr	r3, [pc, #504]	; (8002504 <PAD_updateState+0x268>)
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	b29b      	uxth	r3, r3
 8002310:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 8002314:	3307      	adds	r3, #7
 8002316:	4a7c      	ldr	r2, [pc, #496]	; (8002508 <PAD_updateState+0x26c>)
 8002318:	fb82 1203 	smull	r1, r2, r2, r3
 800231c:	1192      	asrs	r2, r2, #6
 800231e:	17db      	asrs	r3, r3, #31
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	b21a      	sxth	r2, r3
 8002324:	4b76      	ldr	r3, [pc, #472]	; (8002500 <PAD_updateState+0x264>)
 8002326:	805a      	strh	r2, [r3, #2]
			PAD.axis_R_X = ((4095-adc_data[3])-2048)/200;
 8002328:	4b76      	ldr	r3, [pc, #472]	; (8002504 <PAD_updateState+0x268>)
 800232a:	88db      	ldrh	r3, [r3, #6]
 800232c:	b29b      	uxth	r3, r3
 800232e:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 8002332:	3307      	adds	r3, #7
 8002334:	4a74      	ldr	r2, [pc, #464]	; (8002508 <PAD_updateState+0x26c>)
 8002336:	fb82 1203 	smull	r1, r2, r2, r3
 800233a:	1192      	asrs	r2, r2, #6
 800233c:	17db      	asrs	r3, r3, #31
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	b21a      	sxth	r2, r3
 8002342:	4b6f      	ldr	r3, [pc, #444]	; (8002500 <PAD_updateState+0x264>)
 8002344:	809a      	strh	r2, [r3, #4]
			PAD.axis_R_Y = ((4095-adc_data[2])-2048)/200;
 8002346:	4b6f      	ldr	r3, [pc, #444]	; (8002504 <PAD_updateState+0x268>)
 8002348:	889b      	ldrh	r3, [r3, #4]
 800234a:	b29b      	uxth	r3, r3
 800234c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 8002350:	3307      	adds	r3, #7
 8002352:	4a6d      	ldr	r2, [pc, #436]	; (8002508 <PAD_updateState+0x26c>)
 8002354:	fb82 1203 	smull	r1, r2, r2, r3
 8002358:	1192      	asrs	r2, r2, #6
 800235a:	17db      	asrs	r3, r3, #31
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	b21a      	sxth	r2, r3
 8002360:	4b67      	ldr	r3, [pc, #412]	; (8002500 <PAD_updateState+0x264>)
 8002362:	80da      	strh	r2, [r3, #6]
		}
		last_adc = now;
 8002364:	4a61      	ldr	r2, [pc, #388]	; (80024ec <PAD_updateState+0x250>)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6013      	str	r3, [r2, #0]
	}

	// #### TURN OFF FLAGS
	if(PAD.btn_L_short) PAD.btn_L_short = false;
 800236a:	4b65      	ldr	r3, [pc, #404]	; (8002500 <PAD_updateState+0x264>)
 800236c:	7a1b      	ldrb	r3, [r3, #8]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <PAD_updateState+0xdc>
 8002372:	4b63      	ldr	r3, [pc, #396]	; (8002500 <PAD_updateState+0x264>)
 8002374:	2200      	movs	r2, #0
 8002376:	721a      	strb	r2, [r3, #8]
	if(PAD.btn_L_long) PAD.btn_L_long = false;
 8002378:	4b61      	ldr	r3, [pc, #388]	; (8002500 <PAD_updateState+0x264>)
 800237a:	7a9b      	ldrb	r3, [r3, #10]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d002      	beq.n	8002386 <PAD_updateState+0xea>
 8002380:	4b5f      	ldr	r3, [pc, #380]	; (8002500 <PAD_updateState+0x264>)
 8002382:	2200      	movs	r2, #0
 8002384:	729a      	strb	r2, [r3, #10]
	if(PAD.btn_R_short) PAD.btn_R_short = false;
 8002386:	4b5e      	ldr	r3, [pc, #376]	; (8002500 <PAD_updateState+0x264>)
 8002388:	7a5b      	ldrb	r3, [r3, #9]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d002      	beq.n	8002394 <PAD_updateState+0xf8>
 800238e:	4b5c      	ldr	r3, [pc, #368]	; (8002500 <PAD_updateState+0x264>)
 8002390:	2200      	movs	r2, #0
 8002392:	725a      	strb	r2, [r3, #9]
	if(PAD.btn_R_long) PAD.btn_R_long = false;
 8002394:	4b5a      	ldr	r3, [pc, #360]	; (8002500 <PAD_updateState+0x264>)
 8002396:	7adb      	ldrb	r3, [r3, #11]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d002      	beq.n	80023a2 <PAD_updateState+0x106>
 800239c:	4b58      	ldr	r3, [pc, #352]	; (8002500 <PAD_updateState+0x264>)
 800239e:	2200      	movs	r2, #0
 80023a0:	72da      	strb	r2, [r3, #11]
	if(PAD.btn_combo_short) PAD.btn_combo_short = false;
 80023a2:	4b57      	ldr	r3, [pc, #348]	; (8002500 <PAD_updateState+0x264>)
 80023a4:	7b1b      	ldrb	r3, [r3, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d002      	beq.n	80023b0 <PAD_updateState+0x114>
 80023aa:	4b55      	ldr	r3, [pc, #340]	; (8002500 <PAD_updateState+0x264>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	731a      	strb	r2, [r3, #12]
	if(PAD.btn_combo_long) PAD.btn_combo_long = false;
 80023b0:	4b53      	ldr	r3, [pc, #332]	; (8002500 <PAD_updateState+0x264>)
 80023b2:	7b5b      	ldrb	r3, [r3, #13]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d002      	beq.n	80023be <PAD_updateState+0x122>
 80023b8:	4b51      	ldr	r3, [pc, #324]	; (8002500 <PAD_updateState+0x264>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	735a      	strb	r2, [r3, #13]


	// ##### HANDLE LEFT BUTTON #####
	raw_lb = !HAL_GPIO_ReadPin(PAD_L_SW_GPIO_Port, PAD_L_SW_Pin);
 80023be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023c2:	4852      	ldr	r0, [pc, #328]	; (800250c <PAD_updateState+0x270>)
 80023c4:	f002 ff00 	bl	80051c8 <HAL_GPIO_ReadPin>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	bf0c      	ite	eq
 80023ce:	2301      	moveq	r3, #1
 80023d0:	2300      	movne	r3, #0
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	70fb      	strb	r3, [r7, #3]

	if( raw_lb && !hold_lb && now-last_end_lb > DEBOUNCE)
 80023d6:	78fb      	ldrb	r3, [r7, #3]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d012      	beq.n	8002402 <PAD_updateState+0x166>
 80023dc:	4b44      	ldr	r3, [pc, #272]	; (80024f0 <PAD_updateState+0x254>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	f083 0301 	eor.w	r3, r3, #1
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00b      	beq.n	8002402 <PAD_updateState+0x166>
 80023ea:	4b49      	ldr	r3, [pc, #292]	; (8002510 <PAD_updateState+0x274>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b14      	cmp	r3, #20
 80023f4:	d905      	bls.n	8002402 <PAD_updateState+0x166>
	{
		hold_lb = true;
 80023f6:	4b3e      	ldr	r3, [pc, #248]	; (80024f0 <PAD_updateState+0x254>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	701a      	strb	r2, [r3, #0]
		last_lb = now;
 80023fc:	4a45      	ldr	r2, [pc, #276]	; (8002514 <PAD_updateState+0x278>)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6013      	str	r3, [r2, #0]
	}

	if( hold_lb && now-last_lb > DEBOUNCE)
 8002402:	4b3b      	ldr	r3, [pc, #236]	; (80024f0 <PAD_updateState+0x254>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 809a 	beq.w	8002540 <PAD_updateState+0x2a4>
 800240c:	4b41      	ldr	r3, [pc, #260]	; (8002514 <PAD_updateState+0x278>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b14      	cmp	r3, #20
 8002416:	f240 8093 	bls.w	8002540 <PAD_updateState+0x2a4>
	{
		if( now-last_lb > LONG_PRESS )
 800241a:	4b3e      	ldr	r3, [pc, #248]	; (8002514 <PAD_updateState+0x278>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002426:	4293      	cmp	r3, r2
 8002428:	d936      	bls.n	8002498 <PAD_updateState+0x1fc>
		{
			if( !hold_long_lb )
 800242a:	4b32      	ldr	r3, [pc, #200]	; (80024f4 <PAD_updateState+0x258>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	f083 0301 	eor.w	r3, r3, #1
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	d01f      	beq.n	8002478 <PAD_updateState+0x1dc>
			{
				if(now-last_combo > DEAD_TIME)
 8002438:	4b37      	ldr	r3, [pc, #220]	; (8002518 <PAD_updateState+0x27c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002444:	d914      	bls.n	8002470 <PAD_updateState+0x1d4>
				{
					if( hold_long_rb )
 8002446:	4b2d      	ldr	r3, [pc, #180]	; (80024fc <PAD_updateState+0x260>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d006      	beq.n	800245c <PAD_updateState+0x1c0>
					{
						PAD.btn_combo_long = true;
 800244e:	4b2c      	ldr	r3, [pc, #176]	; (8002500 <PAD_updateState+0x264>)
 8002450:	2201      	movs	r2, #1
 8002452:	735a      	strb	r2, [r3, #13]
						last_combo = now;
 8002454:	4a30      	ldr	r2, [pc, #192]	; (8002518 <PAD_updateState+0x27c>)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	e009      	b.n	8002470 <PAD_updateState+0x1d4>
					}
					else if( !hold_rb )
 800245c:	4b26      	ldr	r3, [pc, #152]	; (80024f8 <PAD_updateState+0x25c>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	f083 0301 	eor.w	r3, r3, #1
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <PAD_updateState+0x1d4>
						PAD.btn_L_long = true;
 800246a:	4b25      	ldr	r3, [pc, #148]	; (8002500 <PAD_updateState+0x264>)
 800246c:	2201      	movs	r2, #1
 800246e:	729a      	strb	r2, [r3, #10]
				}
				hold_long_lb = true;
 8002470:	4b20      	ldr	r3, [pc, #128]	; (80024f4 <PAD_updateState+0x258>)
 8002472:	2201      	movs	r2, #1
 8002474:	701a      	strb	r2, [r3, #0]
 8002476:	e063      	b.n	8002540 <PAD_updateState+0x2a4>
			}
			else if( !raw_lb )
 8002478:	78fb      	ldrb	r3, [r7, #3]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d160      	bne.n	8002540 <PAD_updateState+0x2a4>
			{
				hold_lb = false;
 800247e:	4b1c      	ldr	r3, [pc, #112]	; (80024f0 <PAD_updateState+0x254>)
 8002480:	2200      	movs	r2, #0
 8002482:	701a      	strb	r2, [r3, #0]
				hold_long_lb = false;
 8002484:	4b1b      	ldr	r3, [pc, #108]	; (80024f4 <PAD_updateState+0x258>)
 8002486:	2200      	movs	r2, #0
 8002488:	701a      	strb	r2, [r3, #0]
				last_end_lb = now;
 800248a:	4a21      	ldr	r2, [pc, #132]	; (8002510 <PAD_updateState+0x274>)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6013      	str	r3, [r2, #0]
				last_end_long_lb = true;
 8002490:	4b22      	ldr	r3, [pc, #136]	; (800251c <PAD_updateState+0x280>)
 8002492:	2201      	movs	r2, #1
 8002494:	701a      	strb	r2, [r3, #0]
 8002496:	e053      	b.n	8002540 <PAD_updateState+0x2a4>
			}
		}
		else if( !raw_lb )
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d150      	bne.n	8002540 <PAD_updateState+0x2a4>
		{
			if(now-last_combo > DEAD_TIME)
 800249e:	4b1e      	ldr	r3, [pc, #120]	; (8002518 <PAD_updateState+0x27c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80024aa:	d940      	bls.n	800252e <PAD_updateState+0x292>
			{
				if( (hold_rb && !hold_long_rb) || (!last_end_long_rb && now-last_end_rb < DEBOUNCE ))
 80024ac:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <PAD_updateState+0x25c>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d006      	beq.n	80024c2 <PAD_updateState+0x226>
 80024b4:	4b11      	ldr	r3, [pc, #68]	; (80024fc <PAD_updateState+0x260>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	f083 0301 	eor.w	r3, r3, #1
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10c      	bne.n	80024dc <PAD_updateState+0x240>
 80024c2:	4b17      	ldr	r3, [pc, #92]	; (8002520 <PAD_updateState+0x284>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	f083 0301 	eor.w	r3, r3, #1
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d02b      	beq.n	8002528 <PAD_updateState+0x28c>
 80024d0:	4b14      	ldr	r3, [pc, #80]	; (8002524 <PAD_updateState+0x288>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b13      	cmp	r3, #19
 80024da:	d825      	bhi.n	8002528 <PAD_updateState+0x28c>
				{
					PAD.btn_combo_short = true;
 80024dc:	4b08      	ldr	r3, [pc, #32]	; (8002500 <PAD_updateState+0x264>)
 80024de:	2201      	movs	r2, #1
 80024e0:	731a      	strb	r2, [r3, #12]
					last_combo = now;
 80024e2:	4a0d      	ldr	r2, [pc, #52]	; (8002518 <PAD_updateState+0x27c>)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6013      	str	r3, [r2, #0]
 80024e8:	e021      	b.n	800252e <PAD_updateState+0x292>
 80024ea:	bf00      	nop
 80024ec:	20000494 	.word	0x20000494
 80024f0:	20000498 	.word	0x20000498
 80024f4:	20000499 	.word	0x20000499
 80024f8:	2000049a 	.word	0x2000049a
 80024fc:	2000049b 	.word	0x2000049b
 8002500:	20000484 	.word	0x20000484
 8002504:	2000047c 	.word	0x2000047c
 8002508:	51eb851f 	.word	0x51eb851f
 800250c:	48000800 	.word	0x48000800
 8002510:	2000049c 	.word	0x2000049c
 8002514:	200004a0 	.word	0x200004a0
 8002518:	200004a4 	.word	0x200004a4
 800251c:	200004a8 	.word	0x200004a8
 8002520:	200004a9 	.word	0x200004a9
 8002524:	200004ac 	.word	0x200004ac
				}
				else
					PAD.btn_L_short = true;
 8002528:	4b61      	ldr	r3, [pc, #388]	; (80026b0 <PAD_updateState+0x414>)
 800252a:	2201      	movs	r2, #1
 800252c:	721a      	strb	r2, [r3, #8]
			}
			hold_lb = false;
 800252e:	4b61      	ldr	r3, [pc, #388]	; (80026b4 <PAD_updateState+0x418>)
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]
            last_end_lb = now;
 8002534:	4a60      	ldr	r2, [pc, #384]	; (80026b8 <PAD_updateState+0x41c>)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6013      	str	r3, [r2, #0]
            last_end_long_lb = false;
 800253a:	4b60      	ldr	r3, [pc, #384]	; (80026bc <PAD_updateState+0x420>)
 800253c:	2200      	movs	r2, #0
 800253e:	701a      	strb	r2, [r3, #0]
		}
	}


	// ##### HANDLE RIGHT BUTTON #####
	raw_rb = !HAL_GPIO_ReadPin(PAD_R_SW_GPIO_Port, PAD_R_SW_Pin);
 8002540:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002544:	485e      	ldr	r0, [pc, #376]	; (80026c0 <PAD_updateState+0x424>)
 8002546:	f002 fe3f 	bl	80051c8 <HAL_GPIO_ReadPin>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	bf0c      	ite	eq
 8002550:	2301      	moveq	r3, #1
 8002552:	2300      	movne	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	70bb      	strb	r3, [r7, #2]

	if( raw_rb && !hold_rb && now-last_end_rb > DEBOUNCE)
 8002558:	78bb      	ldrb	r3, [r7, #2]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d012      	beq.n	8002584 <PAD_updateState+0x2e8>
 800255e:	4b59      	ldr	r3, [pc, #356]	; (80026c4 <PAD_updateState+0x428>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	f083 0301 	eor.w	r3, r3, #1
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00b      	beq.n	8002584 <PAD_updateState+0x2e8>
 800256c:	4b56      	ldr	r3, [pc, #344]	; (80026c8 <PAD_updateState+0x42c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b14      	cmp	r3, #20
 8002576:	d905      	bls.n	8002584 <PAD_updateState+0x2e8>
	{
		hold_rb = true;
 8002578:	4b52      	ldr	r3, [pc, #328]	; (80026c4 <PAD_updateState+0x428>)
 800257a:	2201      	movs	r2, #1
 800257c:	701a      	strb	r2, [r3, #0]
		last_rb = now;
 800257e:	4a53      	ldr	r2, [pc, #332]	; (80026cc <PAD_updateState+0x430>)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6013      	str	r3, [r2, #0]
	}

	if( hold_rb && now-last_rb > DEBOUNCE)
 8002584:	4b4f      	ldr	r3, [pc, #316]	; (80026c4 <PAD_updateState+0x428>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d079      	beq.n	8002680 <PAD_updateState+0x3e4>
 800258c:	4b4f      	ldr	r3, [pc, #316]	; (80026cc <PAD_updateState+0x430>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b14      	cmp	r3, #20
 8002596:	d973      	bls.n	8002680 <PAD_updateState+0x3e4>
	{
		if( now-last_rb > LONG_PRESS )
 8002598:	4b4c      	ldr	r3, [pc, #304]	; (80026cc <PAD_updateState+0x430>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d936      	bls.n	8002616 <PAD_updateState+0x37a>
		{
			if( !hold_long_rb )
 80025a8:	4b49      	ldr	r3, [pc, #292]	; (80026d0 <PAD_updateState+0x434>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	f083 0301 	eor.w	r3, r3, #1
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d01f      	beq.n	80025f6 <PAD_updateState+0x35a>
			{
				if(now-last_combo > DEAD_TIME)
 80025b6:	4b47      	ldr	r3, [pc, #284]	; (80026d4 <PAD_updateState+0x438>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80025c2:	d914      	bls.n	80025ee <PAD_updateState+0x352>
				{
					if( hold_long_lb )
 80025c4:	4b44      	ldr	r3, [pc, #272]	; (80026d8 <PAD_updateState+0x43c>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d006      	beq.n	80025da <PAD_updateState+0x33e>
					{
						PAD.btn_combo_long = true;
 80025cc:	4b38      	ldr	r3, [pc, #224]	; (80026b0 <PAD_updateState+0x414>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	735a      	strb	r2, [r3, #13]
						last_combo = now;
 80025d2:	4a40      	ldr	r2, [pc, #256]	; (80026d4 <PAD_updateState+0x438>)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6013      	str	r3, [r2, #0]
 80025d8:	e009      	b.n	80025ee <PAD_updateState+0x352>
					}
					else if( !hold_lb )
 80025da:	4b36      	ldr	r3, [pc, #216]	; (80026b4 <PAD_updateState+0x418>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	f083 0301 	eor.w	r3, r3, #1
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d002      	beq.n	80025ee <PAD_updateState+0x352>
						PAD.btn_R_long = true;
 80025e8:	4b31      	ldr	r3, [pc, #196]	; (80026b0 <PAD_updateState+0x414>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	72da      	strb	r2, [r3, #11]
				}
				hold_long_rb = true;
 80025ee:	4b38      	ldr	r3, [pc, #224]	; (80026d0 <PAD_updateState+0x434>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	701a      	strb	r2, [r3, #0]
 80025f4:	e044      	b.n	8002680 <PAD_updateState+0x3e4>
			}
			else if( !raw_rb )
 80025f6:	78bb      	ldrb	r3, [r7, #2]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d141      	bne.n	8002680 <PAD_updateState+0x3e4>
			{
				hold_rb = false;
 80025fc:	4b31      	ldr	r3, [pc, #196]	; (80026c4 <PAD_updateState+0x428>)
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]
				hold_long_rb = false;
 8002602:	4b33      	ldr	r3, [pc, #204]	; (80026d0 <PAD_updateState+0x434>)
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]
				last_end_rb = now;
 8002608:	4a2f      	ldr	r2, [pc, #188]	; (80026c8 <PAD_updateState+0x42c>)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6013      	str	r3, [r2, #0]
				last_end_long_rb = true;
 800260e:	4b33      	ldr	r3, [pc, #204]	; (80026dc <PAD_updateState+0x440>)
 8002610:	2201      	movs	r2, #1
 8002612:	701a      	strb	r2, [r3, #0]
 8002614:	e034      	b.n	8002680 <PAD_updateState+0x3e4>
			}
		}
		else if( !raw_rb )
 8002616:	78bb      	ldrb	r3, [r7, #2]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d131      	bne.n	8002680 <PAD_updateState+0x3e4>
		{
			if(now-last_combo > DEAD_TIME)
 800261c:	4b2d      	ldr	r3, [pc, #180]	; (80026d4 <PAD_updateState+0x438>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002628:	d921      	bls.n	800266e <PAD_updateState+0x3d2>
			{
				if( (hold_lb && !hold_long_lb) || (!last_end_long_lb && now-last_end_lb < DEBOUNCE ))
 800262a:	4b22      	ldr	r3, [pc, #136]	; (80026b4 <PAD_updateState+0x418>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d006      	beq.n	8002640 <PAD_updateState+0x3a4>
 8002632:	4b29      	ldr	r3, [pc, #164]	; (80026d8 <PAD_updateState+0x43c>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	f083 0301 	eor.w	r3, r3, #1
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10c      	bne.n	800265a <PAD_updateState+0x3be>
 8002640:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <PAD_updateState+0x420>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	f083 0301 	eor.w	r3, r3, #1
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00c      	beq.n	8002668 <PAD_updateState+0x3cc>
 800264e:	4b1a      	ldr	r3, [pc, #104]	; (80026b8 <PAD_updateState+0x41c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b13      	cmp	r3, #19
 8002658:	d806      	bhi.n	8002668 <PAD_updateState+0x3cc>
				{
					PAD.btn_combo_short = true;
 800265a:	4b15      	ldr	r3, [pc, #84]	; (80026b0 <PAD_updateState+0x414>)
 800265c:	2201      	movs	r2, #1
 800265e:	731a      	strb	r2, [r3, #12]
					last_combo = now;
 8002660:	4a1c      	ldr	r2, [pc, #112]	; (80026d4 <PAD_updateState+0x438>)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	e002      	b.n	800266e <PAD_updateState+0x3d2>
				}
				else
					PAD.btn_R_short = true;
 8002668:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <PAD_updateState+0x414>)
 800266a:	2201      	movs	r2, #1
 800266c:	725a      	strb	r2, [r3, #9]
			}
            hold_rb = false;
 800266e:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <PAD_updateState+0x428>)
 8002670:	2200      	movs	r2, #0
 8002672:	701a      	strb	r2, [r3, #0]
            last_end_rb = now;
 8002674:	4a14      	ldr	r2, [pc, #80]	; (80026c8 <PAD_updateState+0x42c>)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6013      	str	r3, [r2, #0]
            last_end_long_rb = false;
 800267a:	4b18      	ldr	r3, [pc, #96]	; (80026dc <PAD_updateState+0x440>)
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]
		}
	}

	//#### COMBO MASKING SINGLE #####
	if( PAD.btn_combo_short || PAD.btn_combo_long )
 8002680:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <PAD_updateState+0x414>)
 8002682:	7b1b      	ldrb	r3, [r3, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d103      	bne.n	8002690 <PAD_updateState+0x3f4>
 8002688:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <PAD_updateState+0x414>)
 800268a:	7b5b      	ldrb	r3, [r3, #13]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00b      	beq.n	80026a8 <PAD_updateState+0x40c>
	{
		PAD.btn_L_short = false;
 8002690:	4b07      	ldr	r3, [pc, #28]	; (80026b0 <PAD_updateState+0x414>)
 8002692:	2200      	movs	r2, #0
 8002694:	721a      	strb	r2, [r3, #8]
		PAD.btn_L_long = false;
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <PAD_updateState+0x414>)
 8002698:	2200      	movs	r2, #0
 800269a:	729a      	strb	r2, [r3, #10]
		PAD.btn_R_short = false;
 800269c:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <PAD_updateState+0x414>)
 800269e:	2200      	movs	r2, #0
 80026a0:	725a      	strb	r2, [r3, #9]
		PAD.btn_R_long = false;
 80026a2:	4b03      	ldr	r3, [pc, #12]	; (80026b0 <PAD_updateState+0x414>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	72da      	strb	r2, [r3, #11]
	}

}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	20000484 	.word	0x20000484
 80026b4:	20000498 	.word	0x20000498
 80026b8:	2000049c 	.word	0x2000049c
 80026bc:	200004a8 	.word	0x200004a8
 80026c0:	48000800 	.word	0x48000800
 80026c4:	2000049a 	.word	0x2000049a
 80026c8:	200004ac 	.word	0x200004ac
 80026cc:	200004b0 	.word	0x200004b0
 80026d0:	2000049b 	.word	0x2000049b
 80026d4:	200004a4 	.word	0x200004a4
 80026d8:	20000499 	.word	0x20000499
 80026dc:	200004a9 	.word	0x200004a9

080026e0 <PAD_setLedManual>:

inline void PAD_setLedManual(bool state) { HAL_GPIO_WritePin(LED_MANUAL_GPIO_Port, LED_MANUAL_Pin, state); }
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	71fb      	strb	r3, [r7, #7]
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	461a      	mov	r2, r3
 80026ee:	2140      	movs	r1, #64	; 0x40
 80026f0:	4803      	ldr	r0, [pc, #12]	; (8002700 <PAD_setLedManual+0x20>)
 80026f2:	f002 fd81 	bl	80051f8 <HAL_GPIO_WritePin>
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	48000800 	.word	0x48000800

08002704 <PAD_setLedFx>:

inline void PAD_setLedFx(bool state) { HAL_GPIO_WritePin(LED_EFFECTOR_GPIO_Port, LED_EFFECTOR_Pin, state); }
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	71fb      	strb	r3, [r7, #7]
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	461a      	mov	r2, r3
 8002712:	2180      	movs	r1, #128	; 0x80
 8002714:	4803      	ldr	r0, [pc, #12]	; (8002724 <PAD_setLedFx+0x20>)
 8002716:	f002 fd6f 	bl	80051f8 <HAL_GPIO_WritePin>
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	48000800 	.word	0x48000800

08002728 <SRV_uartClearBuff>:
volatile uint8_t* rx_head;
volatile uint8_t* rx_tail;


void SRV_uartClearBuff()
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
	rx_head = RxBuff;
 800272c:	4b05      	ldr	r3, [pc, #20]	; (8002744 <SRV_uartClearBuff+0x1c>)
 800272e:	4a06      	ldr	r2, [pc, #24]	; (8002748 <SRV_uartClearBuff+0x20>)
 8002730:	601a      	str	r2, [r3, #0]
	rx_tail = RxBuff;
 8002732:	4b06      	ldr	r3, [pc, #24]	; (800274c <SRV_uartClearBuff+0x24>)
 8002734:	4a04      	ldr	r2, [pc, #16]	; (8002748 <SRV_uartClearBuff+0x20>)
 8002736:	601a      	str	r2, [r3, #0]
}
 8002738:	bf00      	nop
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	200004c8 	.word	0x200004c8
 8002748:	200004b8 	.word	0x200004b8
 800274c:	200004cc 	.word	0x200004cc

08002750 <SRV_uartStopRx>:

static inline void SRV_uartStopRx()
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
	huart_srv->RxState = HAL_UART_STATE_READY;
 8002754:	4b04      	ldr	r3, [pc, #16]	; (8002768 <SRV_uartStopRx+0x18>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2220      	movs	r2, #32
 800275a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	200004b4 	.word	0x200004b4

0800276c <SRV_uartStartRx>:

static inline void SRV_uartStartRx()
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(huart_srv, (uint8_t*)rx_head, 1);
 8002770:	4b04      	ldr	r3, [pc, #16]	; (8002784 <SRV_uartStartRx+0x18>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a04      	ldr	r2, [pc, #16]	; (8002788 <SRV_uartStartRx+0x1c>)
 8002776:	6811      	ldr	r1, [r2, #0]
 8002778:	2201      	movs	r2, #1
 800277a:	4618      	mov	r0, r3
 800277c:	f004 f9ac 	bl	8006ad8 <HAL_UART_Receive_IT>
}
 8002780:	bf00      	nop
 8002782:	bd80      	pop	{r7, pc}
 8002784:	200004b4 	.word	0x200004b4
 8002788:	200004c8 	.word	0x200004c8

0800278c <SRV_uartIRQ>:

void SRV_uartIRQ(UART_HandleTypeDef* huart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
	if(huart == huart_srv)
 8002794:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <SRV_uartIRQ+0x38>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	429a      	cmp	r2, r3
 800279c:	d10e      	bne.n	80027bc <SRV_uartIRQ+0x30>
	{
		rx_head++;
 800279e:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <SRV_uartIRQ+0x3c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	3301      	adds	r3, #1
 80027a4:	4a08      	ldr	r2, [pc, #32]	; (80027c8 <SRV_uartIRQ+0x3c>)
 80027a6:	6013      	str	r3, [r2, #0]
		if( rx_head == RxBuff+RX_BUFF_SIZE)
 80027a8:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <SRV_uartIRQ+0x3c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a07      	ldr	r2, [pc, #28]	; (80027cc <SRV_uartIRQ+0x40>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d102      	bne.n	80027b8 <SRV_uartIRQ+0x2c>
			rx_head = RxBuff;
 80027b2:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <SRV_uartIRQ+0x3c>)
 80027b4:	4a06      	ldr	r2, [pc, #24]	; (80027d0 <SRV_uartIRQ+0x44>)
 80027b6:	601a      	str	r2, [r3, #0]
		SRV_uartStartRx();
 80027b8:	f7ff ffd8 	bl	800276c <SRV_uartStartRx>
	}
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	200004b4 	.word	0x200004b4
 80027c8:	200004c8 	.word	0x200004c8
 80027cc:	200004c8 	.word	0x200004c8
 80027d0:	200004b8 	.word	0x200004b8

080027d4 <SRV_uartDataAvailable>:

uint8_t SRV_uartDataAvailable()
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
	return rx_head-rx_tail;
 80027d8:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <SRV_uartDataAvailable+0x1c>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <SRV_uartDataAvailable+0x20>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	b2db      	uxtb	r3, r3
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	200004c8 	.word	0x200004c8
 80027f4:	200004cc 	.word	0x200004cc

080027f8 <SRV_uartReadByte>:

uint8_t SRV_uartReadByte()
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
	return *(rx_tail++);
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <SRV_uartReadByte+0x1c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	4904      	ldr	r1, [pc, #16]	; (8002814 <SRV_uartReadByte+0x1c>)
 8002804:	600a      	str	r2, [r1, #0]
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	b2db      	uxtb	r3, r3
}
 800280a:	4618      	mov	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	200004cc 	.word	0x200004cc

08002818 <SRV_uartPeek>:

uint8_t SRV_uartPeek()
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
	return *(rx_tail);
 800281c:	4b04      	ldr	r3, [pc, #16]	; (8002830 <SRV_uartPeek+0x18>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	b2db      	uxtb	r3, r3
}
 8002824:	4618      	mov	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	200004cc 	.word	0x200004cc

08002834 <SRV_uartSendPacket>:

void SRV_uartSendPacket(uint8_t* packet, uint8_t len)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	70fb      	strb	r3, [r7, #3]
	SRV_uartStopRx();
 8002840:	f7ff ff86 	bl	8002750 <SRV_uartStopRx>
	SRV_uartClearBuff();
 8002844:	f7ff ff70 	bl	8002728 <SRV_uartClearBuff>
	HAL_HalfDuplex_EnableTransmitter(huart_srv);
 8002848:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <SRV_uartSendPacket+0x44>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f004 fc9b 	bl	8007188 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(huart_srv, packet , len, UART_TIMEOUT);
 8002852:	4b09      	ldr	r3, [pc, #36]	; (8002878 <SRV_uartSendPacket+0x44>)
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	78fb      	ldrb	r3, [r7, #3]
 8002858:	b29a      	uxth	r2, r3
 800285a:	2332      	movs	r3, #50	; 0x32
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	f004 f8a7 	bl	80069b0 <HAL_UART_Transmit>
	HAL_HalfDuplex_EnableReceiver(huart_srv);
 8002862:	4b05      	ldr	r3, [pc, #20]	; (8002878 <SRV_uartSendPacket+0x44>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f004 fce0 	bl	800722c <HAL_HalfDuplex_EnableReceiver>
	SRV_uartStartRx();
 800286c:	f7ff ff7e 	bl	800276c <SRV_uartStartRx>
}
 8002870:	bf00      	nop
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	200004b4 	.word	0x200004b4

0800287c <SRV_sendCommand>:
/* #############################
 *   SERVO COMMUNICATION LAYER
 * #############################
 */
void SRV_sendCommand(uint8_t id, uint8_t* params)
{
 800287c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002880:	b087      	sub	sp, #28
 8002882:	af00      	add	r7, sp, #0
 8002884:	4603      	mov	r3, r0
 8002886:	6039      	str	r1, [r7, #0]
 8002888:	71fb      	strb	r3, [r7, #7]
 800288a:	466b      	mov	r3, sp
 800288c:	461e      	mov	r6, r3
	uint8_t base_len = 4;
 800288e:	2304      	movs	r3, #4
 8002890:	757b      	strb	r3, [r7, #21]
	uint8_t params_len = params[0];
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	753b      	strb	r3, [r7, #20]
	uint8_t len = base_len + params_len;
 8002898:	7d7a      	ldrb	r2, [r7, #21]
 800289a:	7d3b      	ldrb	r3, [r7, #20]
 800289c:	4413      	add	r3, r2
 800289e:	74fb      	strb	r3, [r7, #19]
	//preapare packet
	uint8_t packet[len];
 80028a0:	7cf9      	ldrb	r1, [r7, #19]
 80028a2:	460b      	mov	r3, r1
 80028a4:	3b01      	subs	r3, #1
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	b2cb      	uxtb	r3, r1
 80028aa:	2200      	movs	r2, #0
 80028ac:	4698      	mov	r8, r3
 80028ae:	4691      	mov	r9, r2
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	f04f 0300 	mov.w	r3, #0
 80028b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028c4:	b2cb      	uxtb	r3, r1
 80028c6:	2200      	movs	r2, #0
 80028c8:	461c      	mov	r4, r3
 80028ca:	4615      	mov	r5, r2
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	00eb      	lsls	r3, r5, #3
 80028d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028da:	00e2      	lsls	r2, r4, #3
 80028dc:	460b      	mov	r3, r1
 80028de:	3307      	adds	r3, #7
 80028e0:	08db      	lsrs	r3, r3, #3
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	ebad 0d03 	sub.w	sp, sp, r3
 80028e8:	466b      	mov	r3, sp
 80028ea:	3300      	adds	r3, #0
 80028ec:	60bb      	str	r3, [r7, #8]
	packet[0] = AX_START;
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	22ff      	movs	r2, #255	; 0xff
 80028f2:	701a      	strb	r2, [r3, #0]
	packet[1] = AX_START;
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	22ff      	movs	r2, #255	; 0xff
 80028f8:	705a      	strb	r2, [r3, #1]
	packet[2] = id;
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	79fa      	ldrb	r2, [r7, #7]
 80028fe:	709a      	strb	r2, [r3, #2]
	memcpy(packet+3, params, params_len);
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	3303      	adds	r3, #3
 8002904:	7d3a      	ldrb	r2, [r7, #20]
 8002906:	6839      	ldr	r1, [r7, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f005 fc4b 	bl	80081a4 <memcpy>

	//calculate checksum
	uint8_t checksum = 0;
 800290e:	2300      	movs	r3, #0
 8002910:	75bb      	strb	r3, [r7, #22]
	for( uint8_t i = 2; i < len-1; i++)
 8002912:	2302      	movs	r3, #2
 8002914:	75fb      	strb	r3, [r7, #23]
 8002916:	e008      	b.n	800292a <SRV_sendCommand+0xae>
		checksum += packet[i];
 8002918:	7dfb      	ldrb	r3, [r7, #23]
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	5cd2      	ldrb	r2, [r2, r3]
 800291e:	7dbb      	ldrb	r3, [r7, #22]
 8002920:	4413      	add	r3, r2
 8002922:	75bb      	strb	r3, [r7, #22]
	for( uint8_t i = 2; i < len-1; i++)
 8002924:	7dfb      	ldrb	r3, [r7, #23]
 8002926:	3301      	adds	r3, #1
 8002928:	75fb      	strb	r3, [r7, #23]
 800292a:	7dfa      	ldrb	r2, [r7, #23]
 800292c:	7cfb      	ldrb	r3, [r7, #19]
 800292e:	3b01      	subs	r3, #1
 8002930:	429a      	cmp	r2, r3
 8002932:	dbf1      	blt.n	8002918 <SRV_sendCommand+0x9c>
	checksum = ( ~checksum ) & 0xFF;
 8002934:	7dbb      	ldrb	r3, [r7, #22]
 8002936:	43db      	mvns	r3, r3
 8002938:	75bb      	strb	r3, [r7, #22]
	packet[len-1] = checksum;
 800293a:	7cfb      	ldrb	r3, [r7, #19]
 800293c:	3b01      	subs	r3, #1
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	7db9      	ldrb	r1, [r7, #22]
 8002942:	54d1      	strb	r1, [r2, r3]

	//send via uart
	SRV_uartSendPacket(packet, len);
 8002944:	7cfb      	ldrb	r3, [r7, #19]
 8002946:	4619      	mov	r1, r3
 8002948:	68b8      	ldr	r0, [r7, #8]
 800294a:	f7ff ff73 	bl	8002834 <SRV_uartSendPacket>
 800294e:	46b5      	mov	sp, r6
}
 8002950:	bf00      	nop
 8002952:	371c      	adds	r7, #28
 8002954:	46bd      	mov	sp, r7
 8002956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800295a <SRV_getResponse>:

uint8_t SRV_getResponse(uint8_t* response, uint8_t len)
{
 800295a:	b590      	push	{r4, r7, lr}
 800295c:	b085      	sub	sp, #20
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	460b      	mov	r3, r1
 8002964:	70fb      	strb	r3, [r7, #3]
	uint32_t start = HAL_GetTick();
 8002966:	f000 fbd5 	bl	8003114 <HAL_GetTick>
 800296a:	60b8      	str	r0, [r7, #8]
	//wait for data to arrive
	while( SRV_uartDataAvailable() < len )
 800296c:	e008      	b.n	8002980 <SRV_getResponse+0x26>
	{
		if(HAL_GetTick()-start > UART_TIMEOUT) //fail when timed out
 800296e:	f000 fbd1 	bl	8003114 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b32      	cmp	r3, #50	; 0x32
 800297a:	d901      	bls.n	8002980 <SRV_getResponse+0x26>
			return 1;
 800297c:	2301      	movs	r3, #1
 800297e:	e01f      	b.n	80029c0 <SRV_getResponse+0x66>
	while( SRV_uartDataAvailable() < len )
 8002980:	f7ff ff28 	bl	80027d4 <SRV_uartDataAvailable>
 8002984:	4603      	mov	r3, r0
 8002986:	461a      	mov	r2, r3
 8002988:	78fb      	ldrb	r3, [r7, #3]
 800298a:	4293      	cmp	r3, r2
 800298c:	d8ef      	bhi.n	800296e <SRV_getResponse+0x14>
	}
	//check for start byte
	if( SRV_uartPeek() == AX_START )
 800298e:	f7ff ff43 	bl	8002818 <SRV_uartPeek>
 8002992:	4603      	mov	r3, r0
 8002994:	2bff      	cmp	r3, #255	; 0xff
 8002996:	d112      	bne.n	80029be <SRV_getResponse+0x64>
	{
		//copy from rx buff
		for(uint8_t i = 0; i < len; i++)
 8002998:	2300      	movs	r3, #0
 800299a:	73fb      	strb	r3, [r7, #15]
 800299c:	e009      	b.n	80029b2 <SRV_getResponse+0x58>
			response[i] = SRV_uartReadByte();
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	18d4      	adds	r4, r2, r3
 80029a4:	f7ff ff28 	bl	80027f8 <SRV_uartReadByte>
 80029a8:	4603      	mov	r3, r0
 80029aa:	7023      	strb	r3, [r4, #0]
		for(uint8_t i = 0; i < len; i++)
 80029ac:	7bfb      	ldrb	r3, [r7, #15]
 80029ae:	3301      	adds	r3, #1
 80029b0:	73fb      	strb	r3, [r7, #15]
 80029b2:	7bfa      	ldrb	r2, [r7, #15]
 80029b4:	78fb      	ldrb	r3, [r7, #3]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d3f1      	bcc.n	800299e <SRV_getResponse+0x44>
		return 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	e000      	b.n	80029c0 <SRV_getResponse+0x66>
	}
	else return 1;
 80029be:	2301      	movs	r3, #1
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd90      	pop	{r4, r7, pc}

080029c8 <SRV_Init>:
/* ###############################
 *   SERVO ABSTRACT COMMANDS
 * ###############################
 */
void SRV_Init(UART_HandleTypeDef* huart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
	huart_srv = huart;
 80029d0:	4a04      	ldr	r2, [pc, #16]	; (80029e4 <SRV_Init+0x1c>)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6013      	str	r3, [r2, #0]
	SRV_uartClearBuff();
 80029d6:	f7ff fea7 	bl	8002728 <SRV_uartClearBuff>
}
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	200004b4 	.word	0x200004b4

080029e8 <SRV_readError>:

uint8_t SRV_readError()
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
	uint8_t response[5];
	SRV_getResponse(response, 5);
 80029ee:	463b      	mov	r3, r7
 80029f0:	2105      	movs	r1, #5
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff ffb1 	bl	800295a <SRV_getResponse>
	return response[4];
 80029f8:	793b      	ldrb	r3, [r7, #4]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <SRV_setLED>:

uint8_t SRV_setLED(uint8_t id, uint8_t state)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b084      	sub	sp, #16
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	460a      	mov	r2, r1
 8002a0c:	71fb      	strb	r3, [r7, #7]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[] = { AX_LED_LENGTH, AX_WRITE_DATA, AX_LED, state};
 8002a12:	2304      	movs	r3, #4
 8002a14:	733b      	strb	r3, [r7, #12]
 8002a16:	2303      	movs	r3, #3
 8002a18:	737b      	strb	r3, [r7, #13]
 8002a1a:	2319      	movs	r3, #25
 8002a1c:	73bb      	strb	r3, [r7, #14]
 8002a1e:	79bb      	ldrb	r3, [r7, #6]
 8002a20:	73fb      	strb	r3, [r7, #15]
	SRV_sendCommand(id, cmd);
 8002a22:	f107 020c 	add.w	r2, r7, #12
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	4611      	mov	r1, r2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff ff26 	bl	800287c <SRV_sendCommand>
	return SRV_readError();
 8002a30:	f7ff ffda 	bl	80029e8 <SRV_readError>
 8002a34:	4603      	mov	r3, r0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <SRV_move>:

uint8_t SRV_move(uint8_t id, uint16_t position, uint16_t speed)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b086      	sub	sp, #24
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	4603      	mov	r3, r0
 8002a46:	71fb      	strb	r3, [r7, #7]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	80bb      	strh	r3, [r7, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	807b      	strh	r3, [r7, #2]
    uint8_t Position_H = position >> 8;           // 16 bits - 2 x 8 bits variables
 8002a50:	88bb      	ldrh	r3, [r7, #4]
 8002a52:	0a1b      	lsrs	r3, r3, #8
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	75fb      	strb	r3, [r7, #23]
    uint8_t Position_L = position;
 8002a58:	88bb      	ldrh	r3, [r7, #4]
 8002a5a:	75bb      	strb	r3, [r7, #22]
    uint8_t Speed_H = speed >> 8;
 8002a5c:	887b      	ldrh	r3, [r7, #2]
 8002a5e:	0a1b      	lsrs	r3, r3, #8
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	757b      	strb	r3, [r7, #21]
    uint8_t Speed_L = speed;                      // 16 bits - 2 x 8 bits variables
 8002a64:	887b      	ldrh	r3, [r7, #2]
 8002a66:	753b      	strb	r3, [r7, #20]

	uint8_t cmd[] = {AX_GOAL_SP_LENGTH, AX_WRITE_DATA, AX_GOAL_POSITION_L, Position_L, Position_H, Speed_L, Speed_H };
 8002a68:	2307      	movs	r3, #7
 8002a6a:	733b      	strb	r3, [r7, #12]
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	737b      	strb	r3, [r7, #13]
 8002a70:	231e      	movs	r3, #30
 8002a72:	73bb      	strb	r3, [r7, #14]
 8002a74:	7dbb      	ldrb	r3, [r7, #22]
 8002a76:	73fb      	strb	r3, [r7, #15]
 8002a78:	7dfb      	ldrb	r3, [r7, #23]
 8002a7a:	743b      	strb	r3, [r7, #16]
 8002a7c:	7d3b      	ldrb	r3, [r7, #20]
 8002a7e:	747b      	strb	r3, [r7, #17]
 8002a80:	7d7b      	ldrb	r3, [r7, #21]
 8002a82:	74bb      	strb	r3, [r7, #18]
	SRV_sendCommand(id, cmd);
 8002a84:	f107 020c 	add.w	r2, r7, #12
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff fef5 	bl	800287c <SRV_sendCommand>
	return SRV_readError();
 8002a92:	f7ff ffa9 	bl	80029e8 <SRV_readError>
 8002a96:	4603      	mov	r3, r0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <SRV_enableTorque>:

uint8_t SRV_enableTorque(uint8_t id, uint8_t state)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	460a      	mov	r2, r1
 8002aaa:	71fb      	strb	r3, [r7, #7]
 8002aac:	4613      	mov	r3, r2
 8002aae:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[] = { AX_TORQUE_LENGTH, AX_WRITE_DATA, AX_TORQUE_ENABLE, state };
 8002ab0:	2304      	movs	r3, #4
 8002ab2:	733b      	strb	r3, [r7, #12]
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	737b      	strb	r3, [r7, #13]
 8002ab8:	2318      	movs	r3, #24
 8002aba:	73bb      	strb	r3, [r7, #14]
 8002abc:	79bb      	ldrb	r3, [r7, #6]
 8002abe:	73fb      	strb	r3, [r7, #15]
	SRV_sendCommand(id, cmd);
 8002ac0:	f107 020c 	add.w	r2, r7, #12
 8002ac4:	79fb      	ldrb	r3, [r7, #7]
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fed7 	bl	800287c <SRV_sendCommand>
	return SRV_readError();
 8002ace:	f7ff ff8b 	bl	80029e8 <SRV_readError>
 8002ad2:	4603      	mov	r3, r0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <SRV_readPosition>:

uint16_t SRV_readPosition(uint8_t id)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[] = {AX_POS_LENGTH, AX_READ_DATA, AX_PRESENT_POSITION_L, AX_BYTE_READ_POS};
 8002ae6:	4b0d      	ldr	r3, [pc, #52]	; (8002b1c <SRV_readPosition+0x40>)
 8002ae8:	617b      	str	r3, [r7, #20]
	SRV_sendCommand(id, cmd);
 8002aea:	f107 0214 	add.w	r2, r7, #20
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	4611      	mov	r1, r2
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff fec2 	bl	800287c <SRV_sendCommand>

	uint8_t response[8];
	SRV_getResponse(response,8);
 8002af8:	f107 030c 	add.w	r3, r7, #12
 8002afc:	2108      	movs	r1, #8
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff ff2b 	bl	800295a <SRV_getResponse>
	return (response[6]<<8) + response[5];
 8002b04:	7cbb      	ldrb	r3, [r7, #18]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	021b      	lsls	r3, r3, #8
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	7c7b      	ldrb	r3, [r7, #17]
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	4413      	add	r3, r2
 8002b12:	b29b      	uxth	r3, r3
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	02240204 	.word	0x02240204

08002b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b26:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <HAL_MspInit+0x44>)
 8002b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2a:	4a0e      	ldr	r2, [pc, #56]	; (8002b64 <HAL_MspInit+0x44>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	6613      	str	r3, [r2, #96]	; 0x60
 8002b32:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <HAL_MspInit+0x44>)
 8002b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	607b      	str	r3, [r7, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b3e:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <HAL_MspInit+0x44>)
 8002b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b42:	4a08      	ldr	r2, [pc, #32]	; (8002b64 <HAL_MspInit+0x44>)
 8002b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b48:	6593      	str	r3, [r2, #88]	; 0x58
 8002b4a:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <HAL_MspInit+0x44>)
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b52:	603b      	str	r3, [r7, #0]
 8002b54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40021000 	.word	0x40021000

08002b68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b0ac      	sub	sp, #176	; 0xb0
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b70:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b80:	f107 0314 	add.w	r3, r7, #20
 8002b84:	2288      	movs	r2, #136	; 0x88
 8002b86:	2100      	movs	r1, #0
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f005 fb19 	bl	80081c0 <memset>
  if(hadc->Instance==ADC1)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a3c      	ldr	r2, [pc, #240]	; (8002c84 <HAL_ADC_MspInit+0x11c>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d171      	bne.n	8002c7c <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002b98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b9c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002b9e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002ba2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002baa:	2301      	movs	r3, #1
 8002bac:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002bae:	2308      	movs	r3, #8
 8002bb0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002bb2:	2307      	movs	r3, #7
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002bbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bc2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bc4:	f107 0314 	add.w	r3, r7, #20
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f003 f991 	bl	8005ef0 <HAL_RCCEx_PeriphCLKConfig>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8002bd4:	f7ff fb28 	bl	8002228 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002bd8:	4b2b      	ldr	r3, [pc, #172]	; (8002c88 <HAL_ADC_MspInit+0x120>)
 8002bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bdc:	4a2a      	ldr	r2, [pc, #168]	; (8002c88 <HAL_ADC_MspInit+0x120>)
 8002bde:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002be2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002be4:	4b28      	ldr	r3, [pc, #160]	; (8002c88 <HAL_ADC_MspInit+0x120>)
 8002be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bf0:	4b25      	ldr	r3, [pc, #148]	; (8002c88 <HAL_ADC_MspInit+0x120>)
 8002bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf4:	4a24      	ldr	r2, [pc, #144]	; (8002c88 <HAL_ADC_MspInit+0x120>)
 8002bf6:	f043 0304 	orr.w	r3, r3, #4
 8002bfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bfc:	4b22      	ldr	r3, [pc, #136]	; (8002c88 <HAL_ADC_MspInit+0x120>)
 8002bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC11_L_X_Pin|ADC12_L_Y_Pin|ADC13_R_X_Pin|ADC14_R_Y_Pin;
 8002c08:	230f      	movs	r3, #15
 8002c0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002c0e:	230b      	movs	r3, #11
 8002c10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c1a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c1e:	4619      	mov	r1, r3
 8002c20:	481a      	ldr	r0, [pc, #104]	; (8002c8c <HAL_ADC_MspInit+0x124>)
 8002c22:	f002 f927 	bl	8004e74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel3;
 8002c26:	4b1a      	ldr	r3, [pc, #104]	; (8002c90 <HAL_ADC_MspInit+0x128>)
 8002c28:	4a1a      	ldr	r2, [pc, #104]	; (8002c94 <HAL_ADC_MspInit+0x12c>)
 8002c2a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002c2c:	4b18      	ldr	r3, [pc, #96]	; (8002c90 <HAL_ADC_MspInit+0x128>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c32:	4b17      	ldr	r3, [pc, #92]	; (8002c90 <HAL_ADC_MspInit+0x128>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c38:	4b15      	ldr	r3, [pc, #84]	; (8002c90 <HAL_ADC_MspInit+0x128>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002c3e:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <HAL_ADC_MspInit+0x128>)
 8002c40:	2280      	movs	r2, #128	; 0x80
 8002c42:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c44:	4b12      	ldr	r3, [pc, #72]	; (8002c90 <HAL_ADC_MspInit+0x128>)
 8002c46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c4a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c4c:	4b10      	ldr	r3, [pc, #64]	; (8002c90 <HAL_ADC_MspInit+0x128>)
 8002c4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c52:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002c54:	4b0e      	ldr	r3, [pc, #56]	; (8002c90 <HAL_ADC_MspInit+0x128>)
 8002c56:	2220      	movs	r2, #32
 8002c58:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002c5a:	4b0d      	ldr	r3, [pc, #52]	; (8002c90 <HAL_ADC_MspInit+0x128>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002c60:	480b      	ldr	r0, [pc, #44]	; (8002c90 <HAL_ADC_MspInit+0x128>)
 8002c62:	f001 fe91 	bl	8004988 <HAL_DMA_Init>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 8002c6c:	f7ff fadc 	bl	8002228 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a07      	ldr	r2, [pc, #28]	; (8002c90 <HAL_ADC_MspInit+0x128>)
 8002c74:	64da      	str	r2, [r3, #76]	; 0x4c
 8002c76:	4a06      	ldr	r2, [pc, #24]	; (8002c90 <HAL_ADC_MspInit+0x128>)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002c7c:	bf00      	nop
 8002c7e:	37b0      	adds	r7, #176	; 0xb0
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	50040000 	.word	0x50040000
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	48000800 	.word	0x48000800
 8002c90:	2000032c 	.word	0x2000032c
 8002c94:	40020430 	.word	0x40020430

08002c98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b0ae      	sub	sp, #184	; 0xb8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]
 8002cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cb0:	f107 031c 	add.w	r3, r7, #28
 8002cb4:	2288      	movs	r2, #136	; 0x88
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f005 fa81 	bl	80081c0 <memset>
  if(huart->Instance==USART1)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a47      	ldr	r2, [pc, #284]	; (8002de0 <HAL_UART_MspInit+0x148>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d145      	bne.n	8002d54 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cd0:	f107 031c 	add.w	r3, r7, #28
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f003 f90b 	bl	8005ef0 <HAL_RCCEx_PeriphCLKConfig>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002ce0:	f7ff faa2 	bl	8002228 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ce4:	4b3f      	ldr	r3, [pc, #252]	; (8002de4 <HAL_UART_MspInit+0x14c>)
 8002ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce8:	4a3e      	ldr	r2, [pc, #248]	; (8002de4 <HAL_UART_MspInit+0x14c>)
 8002cea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cee:	6613      	str	r3, [r2, #96]	; 0x60
 8002cf0:	4b3c      	ldr	r3, [pc, #240]	; (8002de4 <HAL_UART_MspInit+0x14c>)
 8002cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cf8:	61bb      	str	r3, [r7, #24]
 8002cfa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfc:	4b39      	ldr	r3, [pc, #228]	; (8002de4 <HAL_UART_MspInit+0x14c>)
 8002cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d00:	4a38      	ldr	r2, [pc, #224]	; (8002de4 <HAL_UART_MspInit+0x14c>)
 8002d02:	f043 0301 	orr.w	r3, r3, #1
 8002d06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d08:	4b36      	ldr	r3, [pc, #216]	; (8002de4 <HAL_UART_MspInit+0x14c>)
 8002d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	617b      	str	r3, [r7, #20]
 8002d12:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = SRV_UART_RXTX_Pin;
 8002d14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d1c:	2312      	movs	r3, #18
 8002d1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d22:	2301      	movs	r3, #1
 8002d24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d2e:	2307      	movs	r3, #7
 8002d30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(SRV_UART_RXTX_GPIO_Port, &GPIO_InitStruct);
 8002d34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d38:	4619      	mov	r1, r3
 8002d3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d3e:	f002 f899 	bl	8004e74 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d42:	2200      	movs	r2, #0
 8002d44:	2100      	movs	r1, #0
 8002d46:	2025      	movs	r0, #37	; 0x25
 8002d48:	f001 fde7 	bl	800491a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d4c:	2025      	movs	r0, #37	; 0x25
 8002d4e:	f001 fe00 	bl	8004952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d52:	e040      	b.n	8002dd6 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a23      	ldr	r2, [pc, #140]	; (8002de8 <HAL_UART_MspInit+0x150>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d13b      	bne.n	8002dd6 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d5e:	2302      	movs	r3, #2
 8002d60:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002d62:	2300      	movs	r3, #0
 8002d64:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d66:	f107 031c 	add.w	r3, r7, #28
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f003 f8c0 	bl	8005ef0 <HAL_RCCEx_PeriphCLKConfig>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8002d76:	f7ff fa57 	bl	8002228 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d7a:	4b1a      	ldr	r3, [pc, #104]	; (8002de4 <HAL_UART_MspInit+0x14c>)
 8002d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7e:	4a19      	ldr	r2, [pc, #100]	; (8002de4 <HAL_UART_MspInit+0x14c>)
 8002d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d84:	6593      	str	r3, [r2, #88]	; 0x58
 8002d86:	4b17      	ldr	r3, [pc, #92]	; (8002de4 <HAL_UART_MspInit+0x14c>)
 8002d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	613b      	str	r3, [r7, #16]
 8002d90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d92:	4b14      	ldr	r3, [pc, #80]	; (8002de4 <HAL_UART_MspInit+0x14c>)
 8002d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d96:	4a13      	ldr	r2, [pc, #76]	; (8002de4 <HAL_UART_MspInit+0x14c>)
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d9e:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <HAL_UART_MspInit+0x14c>)
 8002da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TTY_UART_TX_Pin|TTY_UART_RX_Pin;
 8002daa:	230c      	movs	r3, #12
 8002dac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db0:	2302      	movs	r3, #2
 8002db2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dc2:	2307      	movs	r3, #7
 8002dc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002dcc:	4619      	mov	r1, r3
 8002dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dd2:	f002 f84f 	bl	8004e74 <HAL_GPIO_Init>
}
 8002dd6:	bf00      	nop
 8002dd8:	37b8      	adds	r7, #184	; 0xb8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40013800 	.word	0x40013800
 8002de4:	40021000 	.word	0x40021000
 8002de8:	40004400 	.word	0x40004400

08002dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002df0:	e7fe      	b.n	8002df0 <NMI_Handler+0x4>

08002df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002df2:	b480      	push	{r7}
 8002df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002df6:	e7fe      	b.n	8002df6 <HardFault_Handler+0x4>

08002df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dfc:	e7fe      	b.n	8002dfc <MemManage_Handler+0x4>

08002dfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e02:	e7fe      	b.n	8002e02 <BusFault_Handler+0x4>

08002e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e08:	e7fe      	b.n	8002e08 <UsageFault_Handler+0x4>

08002e0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e1c:	bf00      	nop
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e26:	b480      	push	{r7}
 8002e28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e2a:	bf00      	nop
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e38:	f000 f958 	bl	80030ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e3c:	bf00      	nop
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e44:	4802      	ldr	r0, [pc, #8]	; (8002e50 <USART1_IRQHandler+0x10>)
 8002e46:	f003 fe9d 	bl	8006b84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	20000374 	.word	0x20000374

08002e54 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e58:	4802      	ldr	r0, [pc, #8]	; (8002e64 <DMA2_Channel3_IRQHandler+0x10>)
 8002e5a:	f001 ff2c 	bl	8004cb6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	2000032c 	.word	0x2000032c

08002e68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
	return 1;
 8002e6c:	2301      	movs	r3, #1
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <_kill>:

int _kill(int pid, int sig)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e82:	f005 f965 	bl	8008150 <__errno>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2216      	movs	r2, #22
 8002e8a:	601a      	str	r2, [r3, #0]
	return -1;
 8002e8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <_exit>:

void _exit (int status)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ea0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff ffe7 	bl	8002e78 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002eaa:	e7fe      	b.n	8002eaa <_exit+0x12>

08002eac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	e00a      	b.n	8002ed4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ebe:	f3af 8000 	nop.w
 8002ec2:	4601      	mov	r1, r0
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	60ba      	str	r2, [r7, #8]
 8002eca:	b2ca      	uxtb	r2, r1
 8002ecc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	dbf0      	blt.n	8002ebe <_read+0x12>
	}

return len;
 8002edc:	687b      	ldr	r3, [r7, #4]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3718      	adds	r7, #24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
	return -1;
 8002eee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f0e:	605a      	str	r2, [r3, #4]
	return 0;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <_isatty>:

int _isatty(int file)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
	return 1;
 8002f26:	2301      	movs	r3, #1
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
	return 0;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
	...

08002f50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f58:	4a14      	ldr	r2, [pc, #80]	; (8002fac <_sbrk+0x5c>)
 8002f5a:	4b15      	ldr	r3, [pc, #84]	; (8002fb0 <_sbrk+0x60>)
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f64:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <_sbrk+0x64>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d102      	bne.n	8002f72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f6c:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <_sbrk+0x64>)
 8002f6e:	4a12      	ldr	r2, [pc, #72]	; (8002fb8 <_sbrk+0x68>)
 8002f70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f72:	4b10      	ldr	r3, [pc, #64]	; (8002fb4 <_sbrk+0x64>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4413      	add	r3, r2
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d207      	bcs.n	8002f90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f80:	f005 f8e6 	bl	8008150 <__errno>
 8002f84:	4603      	mov	r3, r0
 8002f86:	220c      	movs	r2, #12
 8002f88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f8e:	e009      	b.n	8002fa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f90:	4b08      	ldr	r3, [pc, #32]	; (8002fb4 <_sbrk+0x64>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f96:	4b07      	ldr	r3, [pc, #28]	; (8002fb4 <_sbrk+0x64>)
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	4a05      	ldr	r2, [pc, #20]	; (8002fb4 <_sbrk+0x64>)
 8002fa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3718      	adds	r7, #24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	20018000 	.word	0x20018000
 8002fb0:	00000400 	.word	0x00000400
 8002fb4:	200004d0 	.word	0x200004d0
 8002fb8:	200004e8 	.word	0x200004e8

08002fbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002fc0:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <SystemInit+0x20>)
 8002fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc6:	4a05      	ldr	r2, [pc, #20]	; (8002fdc <SystemInit+0x20>)
 8002fc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002fd0:	bf00      	nop
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <Reset_Handler>:
 8002fe0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003018 <LoopForever+0x2>
 8002fe4:	f7ff ffea 	bl	8002fbc <SystemInit>
 8002fe8:	480c      	ldr	r0, [pc, #48]	; (800301c <LoopForever+0x6>)
 8002fea:	490d      	ldr	r1, [pc, #52]	; (8003020 <LoopForever+0xa>)
 8002fec:	4a0d      	ldr	r2, [pc, #52]	; (8003024 <LoopForever+0xe>)
 8002fee:	2300      	movs	r3, #0
 8002ff0:	e002      	b.n	8002ff8 <LoopCopyDataInit>

08002ff2 <CopyDataInit>:
 8002ff2:	58d4      	ldr	r4, [r2, r3]
 8002ff4:	50c4      	str	r4, [r0, r3]
 8002ff6:	3304      	adds	r3, #4

08002ff8 <LoopCopyDataInit>:
 8002ff8:	18c4      	adds	r4, r0, r3
 8002ffa:	428c      	cmp	r4, r1
 8002ffc:	d3f9      	bcc.n	8002ff2 <CopyDataInit>
 8002ffe:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <LoopForever+0x12>)
 8003000:	4c0a      	ldr	r4, [pc, #40]	; (800302c <LoopForever+0x16>)
 8003002:	2300      	movs	r3, #0
 8003004:	e001      	b.n	800300a <LoopFillZerobss>

08003006 <FillZerobss>:
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	3204      	adds	r2, #4

0800300a <LoopFillZerobss>:
 800300a:	42a2      	cmp	r2, r4
 800300c:	d3fb      	bcc.n	8003006 <FillZerobss>
 800300e:	f005 f8a5 	bl	800815c <__libc_init_array>
 8003012:	f7fe fe8d 	bl	8001d30 <main>

08003016 <LoopForever>:
 8003016:	e7fe      	b.n	8003016 <LoopForever>
 8003018:	20018000 	.word	0x20018000
 800301c:	20000000 	.word	0x20000000
 8003020:	200001dc 	.word	0x200001dc
 8003024:	0800e048 	.word	0x0800e048
 8003028:	200001e0 	.word	0x200001e0
 800302c:	200004e8 	.word	0x200004e8

08003030 <ADC1_2_IRQHandler>:
 8003030:	e7fe      	b.n	8003030 <ADC1_2_IRQHandler>
	...

08003034 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800303e:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <HAL_Init+0x3c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a0b      	ldr	r2, [pc, #44]	; (8003070 <HAL_Init+0x3c>)
 8003044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003048:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800304a:	2003      	movs	r0, #3
 800304c:	f001 fc5a 	bl	8004904 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003050:	2000      	movs	r0, #0
 8003052:	f000 f80f 	bl	8003074 <HAL_InitTick>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d002      	beq.n	8003062 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	71fb      	strb	r3, [r7, #7]
 8003060:	e001      	b.n	8003066 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003062:	f7ff fd5d 	bl	8002b20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003066:	79fb      	ldrb	r3, [r7, #7]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40022000 	.word	0x40022000

08003074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003080:	4b17      	ldr	r3, [pc, #92]	; (80030e0 <HAL_InitTick+0x6c>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d023      	beq.n	80030d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003088:	4b16      	ldr	r3, [pc, #88]	; (80030e4 <HAL_InitTick+0x70>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	4b14      	ldr	r3, [pc, #80]	; (80030e0 <HAL_InitTick+0x6c>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	4619      	mov	r1, r3
 8003092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003096:	fbb3 f3f1 	udiv	r3, r3, r1
 800309a:	fbb2 f3f3 	udiv	r3, r2, r3
 800309e:	4618      	mov	r0, r3
 80030a0:	f001 fc65 	bl	800496e <HAL_SYSTICK_Config>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10f      	bne.n	80030ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b0f      	cmp	r3, #15
 80030ae:	d809      	bhi.n	80030c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030b0:	2200      	movs	r2, #0
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030b8:	f001 fc2f 	bl	800491a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030bc:	4a0a      	ldr	r2, [pc, #40]	; (80030e8 <HAL_InitTick+0x74>)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	e007      	b.n	80030d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	73fb      	strb	r3, [r7, #15]
 80030c8:	e004      	b.n	80030d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	73fb      	strb	r3, [r7, #15]
 80030ce:	e001      	b.n	80030d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20000008 	.word	0x20000008
 80030e4:	20000000 	.word	0x20000000
 80030e8:	20000004 	.word	0x20000004

080030ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030f0:	4b06      	ldr	r3, [pc, #24]	; (800310c <HAL_IncTick+0x20>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	461a      	mov	r2, r3
 80030f6:	4b06      	ldr	r3, [pc, #24]	; (8003110 <HAL_IncTick+0x24>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4413      	add	r3, r2
 80030fc:	4a04      	ldr	r2, [pc, #16]	; (8003110 <HAL_IncTick+0x24>)
 80030fe:	6013      	str	r3, [r2, #0]
}
 8003100:	bf00      	nop
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	20000008 	.word	0x20000008
 8003110:	200004d4 	.word	0x200004d4

08003114 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  return uwTick;
 8003118:	4b03      	ldr	r3, [pc, #12]	; (8003128 <HAL_GetTick+0x14>)
 800311a:	681b      	ldr	r3, [r3, #0]
}
 800311c:	4618      	mov	r0, r3
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	200004d4 	.word	0x200004d4

0800312c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003134:	f7ff ffee 	bl	8003114 <HAL_GetTick>
 8003138:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003144:	d005      	beq.n	8003152 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003146:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <HAL_Delay+0x44>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4413      	add	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003152:	bf00      	nop
 8003154:	f7ff ffde 	bl	8003114 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	429a      	cmp	r2, r3
 8003162:	d8f7      	bhi.n	8003154 <HAL_Delay+0x28>
  {
  }
}
 8003164:	bf00      	nop
 8003166:	bf00      	nop
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20000008 	.word	0x20000008

08003174 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	609a      	str	r2, [r3, #8]
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
 80031a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	609a      	str	r2, [r3, #8]
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80031dc:	b480      	push	{r7}
 80031de:	b087      	sub	sp, #28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	3360      	adds	r3, #96	; 0x60
 80031ee:	461a      	mov	r2, r3
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	4b08      	ldr	r3, [pc, #32]	; (8003220 <LL_ADC_SetOffset+0x44>)
 80031fe:	4013      	ands	r3, r2
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	4313      	orrs	r3, r2
 800320c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003214:	bf00      	nop
 8003216:	371c      	adds	r7, #28
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	03fff000 	.word	0x03fff000

08003224 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3360      	adds	r3, #96	; 0x60
 8003232:	461a      	mov	r2, r3
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003244:	4618      	mov	r0, r3
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	3360      	adds	r3, #96	; 0x60
 8003260:	461a      	mov	r2, r3
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	431a      	orrs	r2, r3
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800327a:	bf00      	nop
 800327c:	371c      	adds	r7, #28
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b087      	sub	sp, #28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	3330      	adds	r3, #48	; 0x30
 80032bc:	461a      	mov	r2, r3
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	0a1b      	lsrs	r3, r3, #8
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	f003 030c 	and.w	r3, r3, #12
 80032c8:	4413      	add	r3, r2
 80032ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	f003 031f 	and.w	r3, r3, #31
 80032d6:	211f      	movs	r1, #31
 80032d8:	fa01 f303 	lsl.w	r3, r1, r3
 80032dc:	43db      	mvns	r3, r3
 80032de:	401a      	ands	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	0e9b      	lsrs	r3, r3, #26
 80032e4:	f003 011f 	and.w	r1, r3, #31
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f003 031f 	and.w	r3, r3, #31
 80032ee:	fa01 f303 	lsl.w	r3, r1, r3
 80032f2:	431a      	orrs	r2, r3
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80032f8:	bf00      	nop
 80032fa:	371c      	adds	r7, #28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003304:	b480      	push	{r7}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	3314      	adds	r3, #20
 8003314:	461a      	mov	r2, r3
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	0e5b      	lsrs	r3, r3, #25
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	4413      	add	r3, r2
 8003322:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	0d1b      	lsrs	r3, r3, #20
 800332c:	f003 031f 	and.w	r3, r3, #31
 8003330:	2107      	movs	r1, #7
 8003332:	fa01 f303 	lsl.w	r3, r1, r3
 8003336:	43db      	mvns	r3, r3
 8003338:	401a      	ands	r2, r3
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	0d1b      	lsrs	r3, r3, #20
 800333e:	f003 031f 	and.w	r3, r3, #31
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	fa01 f303 	lsl.w	r3, r1, r3
 8003348:	431a      	orrs	r2, r3
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800334e:	bf00      	nop
 8003350:	371c      	adds	r7, #28
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
	...

0800335c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003374:	43db      	mvns	r3, r3
 8003376:	401a      	ands	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f003 0318 	and.w	r3, r3, #24
 800337e:	4908      	ldr	r1, [pc, #32]	; (80033a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003380:	40d9      	lsrs	r1, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	400b      	ands	r3, r1
 8003386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800338a:	431a      	orrs	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003392:	bf00      	nop
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	0007ffff 	.word	0x0007ffff

080033a4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f003 031f 	and.w	r3, r3, #31
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80033d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6093      	str	r3, [r2, #8]
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033f8:	d101      	bne.n	80033fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800341c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003420:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003444:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003448:	d101      	bne.n	800344e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800346c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003470:	f043 0201 	orr.w	r2, r3, #1
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003494:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003498:	f043 0202 	orr.w	r2, r3, #2
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <LL_ADC_IsEnabled+0x18>
 80034c0:	2301      	movs	r3, #1
 80034c2:	e000      	b.n	80034c6 <LL_ADC_IsEnabled+0x1a>
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d101      	bne.n	80034ea <LL_ADC_IsDisableOngoing+0x18>
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <LL_ADC_IsDisableOngoing+0x1a>
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003508:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800350c:	f043 0204 	orr.w	r2, r3, #4
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b04      	cmp	r3, #4
 8003532:	d101      	bne.n	8003538 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b08      	cmp	r3, #8
 8003558:	d101      	bne.n	800355e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800355a:	2301      	movs	r3, #1
 800355c:	e000      	b.n	8003560 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800356c:	b590      	push	{r4, r7, lr}
 800356e:	b089      	sub	sp, #36	; 0x24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003574:	2300      	movs	r3, #0
 8003576:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003578:	2300      	movs	r3, #0
 800357a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e136      	b.n	80037f4 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003590:	2b00      	cmp	r3, #0
 8003592:	d109      	bne.n	80035a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff fae7 	bl	8002b68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff ff19 	bl	80033e4 <LL_ADC_IsDeepPowerDownEnabled>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d004      	beq.n	80035c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff feff 	bl	80033c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff ff34 	bl	8003434 <LL_ADC_IsInternalRegulatorEnabled>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d115      	bne.n	80035fe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff ff18 	bl	800340c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035dc:	4b87      	ldr	r3, [pc, #540]	; (80037fc <HAL_ADC_Init+0x290>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	099b      	lsrs	r3, r3, #6
 80035e2:	4a87      	ldr	r2, [pc, #540]	; (8003800 <HAL_ADC_Init+0x294>)
 80035e4:	fba2 2303 	umull	r2, r3, r2, r3
 80035e8:	099b      	lsrs	r3, r3, #6
 80035ea:	3301      	adds	r3, #1
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80035f0:	e002      	b.n	80035f8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	3b01      	subs	r3, #1
 80035f6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f9      	bne.n	80035f2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff ff16 	bl	8003434 <LL_ADC_IsInternalRegulatorEnabled>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10d      	bne.n	800362a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003612:	f043 0210 	orr.w	r2, r3, #16
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361e:	f043 0201 	orr.w	r2, r3, #1
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff ff76 	bl	8003520 <LL_ADC_REG_IsConversionOngoing>
 8003634:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363a:	f003 0310 	and.w	r3, r3, #16
 800363e:	2b00      	cmp	r3, #0
 8003640:	f040 80cf 	bne.w	80037e2 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	2b00      	cmp	r3, #0
 8003648:	f040 80cb 	bne.w	80037e2 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003650:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003654:	f043 0202 	orr.w	r2, r3, #2
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff ff23 	bl	80034ac <LL_ADC_IsEnabled>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d115      	bne.n	8003698 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800366c:	4865      	ldr	r0, [pc, #404]	; (8003804 <HAL_ADC_Init+0x298>)
 800366e:	f7ff ff1d 	bl	80034ac <LL_ADC_IsEnabled>
 8003672:	4604      	mov	r4, r0
 8003674:	4864      	ldr	r0, [pc, #400]	; (8003808 <HAL_ADC_Init+0x29c>)
 8003676:	f7ff ff19 	bl	80034ac <LL_ADC_IsEnabled>
 800367a:	4603      	mov	r3, r0
 800367c:	431c      	orrs	r4, r3
 800367e:	4863      	ldr	r0, [pc, #396]	; (800380c <HAL_ADC_Init+0x2a0>)
 8003680:	f7ff ff14 	bl	80034ac <LL_ADC_IsEnabled>
 8003684:	4603      	mov	r3, r0
 8003686:	4323      	orrs	r3, r4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d105      	bne.n	8003698 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	4619      	mov	r1, r3
 8003692:	485f      	ldr	r0, [pc, #380]	; (8003810 <HAL_ADC_Init+0x2a4>)
 8003694:	f7ff fd6e 	bl	8003174 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	7e5b      	ldrb	r3, [r3, #25]
 800369c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036a2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80036a8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80036ae:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036b6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036b8:	4313      	orrs	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d106      	bne.n	80036d4 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	3b01      	subs	r3, #1
 80036cc:	045b      	lsls	r3, r3, #17
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d009      	beq.n	80036f0 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68da      	ldr	r2, [r3, #12]
 80036f6:	4b47      	ldr	r3, [pc, #284]	; (8003814 <HAL_ADC_Init+0x2a8>)
 80036f8:	4013      	ands	r3, r2
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6812      	ldr	r2, [r2, #0]
 80036fe:	69b9      	ldr	r1, [r7, #24]
 8003700:	430b      	orrs	r3, r1
 8003702:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff ff09 	bl	8003520 <LL_ADC_REG_IsConversionOngoing>
 800370e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff ff16 	bl	8003546 <LL_ADC_INJ_IsConversionOngoing>
 800371a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d13d      	bne.n	800379e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d13a      	bne.n	800379e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800372c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003734:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003736:	4313      	orrs	r3, r2
 8003738:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003744:	f023 0302 	bic.w	r3, r3, #2
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6812      	ldr	r2, [r2, #0]
 800374c:	69b9      	ldr	r1, [r7, #24]
 800374e:	430b      	orrs	r3, r1
 8003750:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003758:	2b01      	cmp	r3, #1
 800375a:	d118      	bne.n	800378e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003766:	f023 0304 	bic.w	r3, r3, #4
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003772:	4311      	orrs	r1, r2
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003778:	4311      	orrs	r1, r2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800377e:	430a      	orrs	r2, r1
 8003780:	431a      	orrs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	611a      	str	r2, [r3, #16]
 800378c:	e007      	b.n	800379e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0201 	bic.w	r2, r2, #1
 800379c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d10c      	bne.n	80037c0 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ac:	f023 010f 	bic.w	r1, r3, #15
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	1e5a      	subs	r2, r3, #1
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	631a      	str	r2, [r3, #48]	; 0x30
 80037be:	e007      	b.n	80037d0 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 020f 	bic.w	r2, r2, #15
 80037ce:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d4:	f023 0303 	bic.w	r3, r3, #3
 80037d8:	f043 0201 	orr.w	r2, r3, #1
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	655a      	str	r2, [r3, #84]	; 0x54
 80037e0:	e007      	b.n	80037f2 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e6:	f043 0210 	orr.w	r2, r3, #16
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80037f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3724      	adds	r7, #36	; 0x24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd90      	pop	{r4, r7, pc}
 80037fc:	20000000 	.word	0x20000000
 8003800:	053e2d63 	.word	0x053e2d63
 8003804:	50040000 	.word	0x50040000
 8003808:	50040100 	.word	0x50040100
 800380c:	50040200 	.word	0x50040200
 8003810:	50040300 	.word	0x50040300
 8003814:	fff0c007 	.word	0xfff0c007

08003818 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003824:	4853      	ldr	r0, [pc, #332]	; (8003974 <HAL_ADC_Start_DMA+0x15c>)
 8003826:	f7ff fdbd 	bl	80033a4 <LL_ADC_GetMultimode>
 800382a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff fe75 	bl	8003520 <LL_ADC_REG_IsConversionOngoing>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	f040 8093 	bne.w	8003964 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <HAL_ADC_Start_DMA+0x34>
 8003848:	2302      	movs	r3, #2
 800384a:	e08e      	b.n	800396a <HAL_ADC_Start_DMA+0x152>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a47      	ldr	r2, [pc, #284]	; (8003978 <HAL_ADC_Start_DMA+0x160>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d008      	beq.n	8003870 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d005      	beq.n	8003870 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	2b05      	cmp	r3, #5
 8003868:	d002      	beq.n	8003870 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	2b09      	cmp	r3, #9
 800386e:	d172      	bne.n	8003956 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f000 fc9b 	bl	80041ac <ADC_Enable>
 8003876:	4603      	mov	r3, r0
 8003878:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800387a:	7dfb      	ldrb	r3, [r7, #23]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d165      	bne.n	800394c <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003884:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003888:	f023 0301 	bic.w	r3, r3, #1
 800388c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a38      	ldr	r2, [pc, #224]	; (800397c <HAL_ADC_Start_DMA+0x164>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d002      	beq.n	80038a4 <HAL_ADC_Start_DMA+0x8c>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	e000      	b.n	80038a6 <HAL_ADC_Start_DMA+0x8e>
 80038a4:	4b36      	ldr	r3, [pc, #216]	; (8003980 <HAL_ADC_Start_DMA+0x168>)
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	6812      	ldr	r2, [r2, #0]
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d002      	beq.n	80038b4 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d105      	bne.n	80038c0 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d006      	beq.n	80038da <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d0:	f023 0206 	bic.w	r2, r3, #6
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	659a      	str	r2, [r3, #88]	; 0x58
 80038d8:	e002      	b.n	80038e0 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e4:	4a27      	ldr	r2, [pc, #156]	; (8003984 <HAL_ADC_Start_DMA+0x16c>)
 80038e6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ec:	4a26      	ldr	r2, [pc, #152]	; (8003988 <HAL_ADC_Start_DMA+0x170>)
 80038ee:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f4:	4a25      	ldr	r2, [pc, #148]	; (800398c <HAL_ADC_Start_DMA+0x174>)
 80038f6:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	221c      	movs	r2, #28
 80038fe:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0210 	orr.w	r2, r2, #16
 8003916:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68da      	ldr	r2, [r3, #12]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0201 	orr.w	r2, r2, #1
 8003926:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	3340      	adds	r3, #64	; 0x40
 8003932:	4619      	mov	r1, r3
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f001 f8de 	bl	8004af8 <HAL_DMA_Start_IT>
 800393c:	4603      	mov	r3, r0
 800393e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff fdd7 	bl	80034f8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800394a:	e00d      	b.n	8003968 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003954:	e008      	b.n	8003968 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003962:	e001      	b.n	8003968 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003964:	2302      	movs	r3, #2
 8003966:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003968:	7dfb      	ldrb	r3, [r7, #23]
}
 800396a:	4618      	mov	r0, r3
 800396c:	3718      	adds	r7, #24
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	50040300 	.word	0x50040300
 8003978:	50040200 	.word	0x50040200
 800397c:	50040100 	.word	0x50040100
 8003980:	50040000 	.word	0x50040000
 8003984:	08004377 	.word	0x08004377
 8003988:	0800444f 	.word	0x0800444f
 800398c:	0800446b 	.word	0x0800446b

08003990 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b0b6      	sub	sp, #216	; 0xd8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80039dc:	2300      	movs	r3, #0
 80039de:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d101      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x22>
 80039ea:	2302      	movs	r3, #2
 80039ec:	e3c7      	b.n	800417e <HAL_ADC_ConfigChannel+0x7b2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff fd90 	bl	8003520 <LL_ADC_REG_IsConversionOngoing>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f040 83a8 	bne.w	8004158 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b05      	cmp	r3, #5
 8003a0e:	d824      	bhi.n	8003a5a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	3b02      	subs	r3, #2
 8003a16:	2b03      	cmp	r3, #3
 8003a18:	d81b      	bhi.n	8003a52 <HAL_ADC_ConfigChannel+0x86>
 8003a1a:	a201      	add	r2, pc, #4	; (adr r2, 8003a20 <HAL_ADC_ConfigChannel+0x54>)
 8003a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a20:	08003a31 	.word	0x08003a31
 8003a24:	08003a39 	.word	0x08003a39
 8003a28:	08003a41 	.word	0x08003a41
 8003a2c:	08003a49 	.word	0x08003a49
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	220c      	movs	r2, #12
 8003a34:	605a      	str	r2, [r3, #4]
          break;
 8003a36:	e011      	b.n	8003a5c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2212      	movs	r2, #18
 8003a3c:	605a      	str	r2, [r3, #4]
          break;
 8003a3e:	e00d      	b.n	8003a5c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	2218      	movs	r2, #24
 8003a44:	605a      	str	r2, [r3, #4]
          break;
 8003a46:	e009      	b.n	8003a5c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a4e:	605a      	str	r2, [r3, #4]
          break;
 8003a50:	e004      	b.n	8003a5c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2206      	movs	r2, #6
 8003a56:	605a      	str	r2, [r3, #4]
          break;
 8003a58:	e000      	b.n	8003a5c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003a5a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6818      	ldr	r0, [r3, #0]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	6859      	ldr	r1, [r3, #4]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	461a      	mov	r2, r3
 8003a6a:	f7ff fc1f 	bl	80032ac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff fd54 	bl	8003520 <LL_ADC_REG_IsConversionOngoing>
 8003a78:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff fd60 	bl	8003546 <LL_ADC_INJ_IsConversionOngoing>
 8003a86:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a8a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f040 81a6 	bne.w	8003de0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f040 81a1 	bne.w	8003de0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	6819      	ldr	r1, [r3, #0]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	f7ff fc2a 	bl	8003304 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	695a      	ldr	r2, [r3, #20]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	08db      	lsrs	r3, r3, #3
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d00a      	beq.n	8003ae8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6818      	ldr	r0, [r3, #0]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	6919      	ldr	r1, [r3, #16]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ae2:	f7ff fb7b 	bl	80031dc <LL_ADC_SetOffset>
 8003ae6:	e17b      	b.n	8003de0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2100      	movs	r1, #0
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff fb98 	bl	8003224 <LL_ADC_GetOffsetChannel>
 8003af4:	4603      	mov	r3, r0
 8003af6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10a      	bne.n	8003b14 <HAL_ADC_ConfigChannel+0x148>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2100      	movs	r1, #0
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff fb8d 	bl	8003224 <LL_ADC_GetOffsetChannel>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	0e9b      	lsrs	r3, r3, #26
 8003b0e:	f003 021f 	and.w	r2, r3, #31
 8003b12:	e01e      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x186>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff fb82 	bl	8003224 <LL_ADC_GetOffsetChannel>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b2a:	fa93 f3a3 	rbit	r3, r3
 8003b2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003b42:	2320      	movs	r3, #32
 8003b44:	e004      	b.n	8003b50 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003b46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b4a:	fab3 f383 	clz	r3, r3
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d105      	bne.n	8003b6a <HAL_ADC_ConfigChannel+0x19e>
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	0e9b      	lsrs	r3, r3, #26
 8003b64:	f003 031f 	and.w	r3, r3, #31
 8003b68:	e018      	b.n	8003b9c <HAL_ADC_ConfigChannel+0x1d0>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b72:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003b76:	fa93 f3a3 	rbit	r3, r3
 8003b7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003b7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003b86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003b8e:	2320      	movs	r3, #32
 8003b90:	e004      	b.n	8003b9c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003b92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003b96:	fab3 f383 	clz	r3, r3
 8003b9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d106      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff fb51 	bl	8003250 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff fb35 	bl	8003224 <LL_ADC_GetOffsetChannel>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10a      	bne.n	8003bda <HAL_ADC_ConfigChannel+0x20e>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2101      	movs	r1, #1
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7ff fb2a 	bl	8003224 <LL_ADC_GetOffsetChannel>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	0e9b      	lsrs	r3, r3, #26
 8003bd4:	f003 021f 	and.w	r2, r3, #31
 8003bd8:	e01e      	b.n	8003c18 <HAL_ADC_ConfigChannel+0x24c>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2101      	movs	r1, #1
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff fb1f 	bl	8003224 <LL_ADC_GetOffsetChannel>
 8003be6:	4603      	mov	r3, r0
 8003be8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003bf0:	fa93 f3a3 	rbit	r3, r3
 8003bf4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003bf8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003c00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003c08:	2320      	movs	r3, #32
 8003c0a:	e004      	b.n	8003c16 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003c0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c10:	fab3 f383 	clz	r3, r3
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d105      	bne.n	8003c30 <HAL_ADC_ConfigChannel+0x264>
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	0e9b      	lsrs	r3, r3, #26
 8003c2a:	f003 031f 	and.w	r3, r3, #31
 8003c2e:	e018      	b.n	8003c62 <HAL_ADC_ConfigChannel+0x296>
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c3c:	fa93 f3a3 	rbit	r3, r3
 8003c40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003c44:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003c48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003c4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003c54:	2320      	movs	r3, #32
 8003c56:	e004      	b.n	8003c62 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003c58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c5c:	fab3 f383 	clz	r3, r3
 8003c60:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d106      	bne.n	8003c74 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff faee 	bl	8003250 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2102      	movs	r1, #2
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7ff fad2 	bl	8003224 <LL_ADC_GetOffsetChannel>
 8003c80:	4603      	mov	r3, r0
 8003c82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10a      	bne.n	8003ca0 <HAL_ADC_ConfigChannel+0x2d4>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2102      	movs	r1, #2
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff fac7 	bl	8003224 <LL_ADC_GetOffsetChannel>
 8003c96:	4603      	mov	r3, r0
 8003c98:	0e9b      	lsrs	r3, r3, #26
 8003c9a:	f003 021f 	and.w	r2, r3, #31
 8003c9e:	e01e      	b.n	8003cde <HAL_ADC_ConfigChannel+0x312>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2102      	movs	r1, #2
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7ff fabc 	bl	8003224 <LL_ADC_GetOffsetChannel>
 8003cac:	4603      	mov	r3, r0
 8003cae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cb6:	fa93 f3a3 	rbit	r3, r3
 8003cba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003cbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003cc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003cce:	2320      	movs	r3, #32
 8003cd0:	e004      	b.n	8003cdc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003cd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003cd6:	fab3 f383 	clz	r3, r3
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d105      	bne.n	8003cf6 <HAL_ADC_ConfigChannel+0x32a>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	0e9b      	lsrs	r3, r3, #26
 8003cf0:	f003 031f 	and.w	r3, r3, #31
 8003cf4:	e016      	b.n	8003d24 <HAL_ADC_ConfigChannel+0x358>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d02:	fa93 f3a3 	rbit	r3, r3
 8003d06:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003d08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003d0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003d16:	2320      	movs	r3, #32
 8003d18:	e004      	b.n	8003d24 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003d1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d1e:	fab3 f383 	clz	r3, r3
 8003d22:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d106      	bne.n	8003d36 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2102      	movs	r1, #2
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff fa8d 	bl	8003250 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2103      	movs	r1, #3
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff fa71 	bl	8003224 <LL_ADC_GetOffsetChannel>
 8003d42:	4603      	mov	r3, r0
 8003d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10a      	bne.n	8003d62 <HAL_ADC_ConfigChannel+0x396>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2103      	movs	r1, #3
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff fa66 	bl	8003224 <LL_ADC_GetOffsetChannel>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	0e9b      	lsrs	r3, r3, #26
 8003d5c:	f003 021f 	and.w	r2, r3, #31
 8003d60:	e017      	b.n	8003d92 <HAL_ADC_ConfigChannel+0x3c6>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2103      	movs	r1, #3
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff fa5b 	bl	8003224 <LL_ADC_GetOffsetChannel>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d74:	fa93 f3a3 	rbit	r3, r3
 8003d78:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003d7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d7c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003d7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003d84:	2320      	movs	r3, #32
 8003d86:	e003      	b.n	8003d90 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003d88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d8a:	fab3 f383 	clz	r3, r3
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d105      	bne.n	8003daa <HAL_ADC_ConfigChannel+0x3de>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	0e9b      	lsrs	r3, r3, #26
 8003da4:	f003 031f 	and.w	r3, r3, #31
 8003da8:	e011      	b.n	8003dce <HAL_ADC_ConfigChannel+0x402>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003db2:	fa93 f3a3 	rbit	r3, r3
 8003db6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003db8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003dc2:	2320      	movs	r3, #32
 8003dc4:	e003      	b.n	8003dce <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc8:	fab3 f383 	clz	r3, r3
 8003dcc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d106      	bne.n	8003de0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	2103      	movs	r1, #3
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff fa38 	bl	8003250 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff fb61 	bl	80034ac <LL_ADC_IsEnabled>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f040 813f 	bne.w	8004070 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	6819      	ldr	r1, [r3, #0]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	f7ff faac 	bl	800335c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	4a8e      	ldr	r2, [pc, #568]	; (8004044 <HAL_ADC_ConfigChannel+0x678>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	f040 8130 	bne.w	8004070 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10b      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x46c>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	0e9b      	lsrs	r3, r3, #26
 8003e26:	3301      	adds	r3, #1
 8003e28:	f003 031f 	and.w	r3, r3, #31
 8003e2c:	2b09      	cmp	r3, #9
 8003e2e:	bf94      	ite	ls
 8003e30:	2301      	movls	r3, #1
 8003e32:	2300      	movhi	r3, #0
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	e019      	b.n	8003e6c <HAL_ADC_ConfigChannel+0x4a0>
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e40:	fa93 f3a3 	rbit	r3, r3
 8003e44:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003e46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e48:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003e4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003e50:	2320      	movs	r3, #32
 8003e52:	e003      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003e54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e56:	fab3 f383 	clz	r3, r3
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	f003 031f 	and.w	r3, r3, #31
 8003e62:	2b09      	cmp	r3, #9
 8003e64:	bf94      	ite	ls
 8003e66:	2301      	movls	r3, #1
 8003e68:	2300      	movhi	r3, #0
 8003e6a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d079      	beq.n	8003f64 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d107      	bne.n	8003e8c <HAL_ADC_ConfigChannel+0x4c0>
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	0e9b      	lsrs	r3, r3, #26
 8003e82:	3301      	adds	r3, #1
 8003e84:	069b      	lsls	r3, r3, #26
 8003e86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e8a:	e015      	b.n	8003eb8 <HAL_ADC_ConfigChannel+0x4ec>
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e94:	fa93 f3a3 	rbit	r3, r3
 8003e98:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e9c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003ea4:	2320      	movs	r3, #32
 8003ea6:	e003      	b.n	8003eb0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eaa:	fab3 f383 	clz	r3, r3
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	069b      	lsls	r3, r3, #26
 8003eb4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d109      	bne.n	8003ed8 <HAL_ADC_ConfigChannel+0x50c>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	0e9b      	lsrs	r3, r3, #26
 8003eca:	3301      	adds	r3, #1
 8003ecc:	f003 031f 	and.w	r3, r3, #31
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed6:	e017      	b.n	8003f08 <HAL_ADC_ConfigChannel+0x53c>
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ee0:	fa93 f3a3 	rbit	r3, r3
 8003ee4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ee8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003ef0:	2320      	movs	r3, #32
 8003ef2:	e003      	b.n	8003efc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ef6:	fab3 f383 	clz	r3, r3
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	3301      	adds	r3, #1
 8003efe:	f003 031f 	and.w	r3, r3, #31
 8003f02:	2101      	movs	r1, #1
 8003f04:	fa01 f303 	lsl.w	r3, r1, r3
 8003f08:	ea42 0103 	orr.w	r1, r2, r3
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10a      	bne.n	8003f2e <HAL_ADC_ConfigChannel+0x562>
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	0e9b      	lsrs	r3, r3, #26
 8003f1e:	3301      	adds	r3, #1
 8003f20:	f003 021f 	and.w	r2, r3, #31
 8003f24:	4613      	mov	r3, r2
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	4413      	add	r3, r2
 8003f2a:	051b      	lsls	r3, r3, #20
 8003f2c:	e018      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x594>
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f36:	fa93 f3a3 	rbit	r3, r3
 8003f3a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003f46:	2320      	movs	r3, #32
 8003f48:	e003      	b.n	8003f52 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f4c:	fab3 f383 	clz	r3, r3
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	3301      	adds	r3, #1
 8003f54:	f003 021f 	and.w	r2, r3, #31
 8003f58:	4613      	mov	r3, r2
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	4413      	add	r3, r2
 8003f5e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f60:	430b      	orrs	r3, r1
 8003f62:	e080      	b.n	8004066 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d107      	bne.n	8003f80 <HAL_ADC_ConfigChannel+0x5b4>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	0e9b      	lsrs	r3, r3, #26
 8003f76:	3301      	adds	r3, #1
 8003f78:	069b      	lsls	r3, r3, #26
 8003f7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f7e:	e015      	b.n	8003fac <HAL_ADC_ConfigChannel+0x5e0>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f88:	fa93 f3a3 	rbit	r3, r3
 8003f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f90:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003f98:	2320      	movs	r3, #32
 8003f9a:	e003      	b.n	8003fa4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9e:	fab3 f383 	clz	r3, r3
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	069b      	lsls	r3, r3, #26
 8003fa8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d109      	bne.n	8003fcc <HAL_ADC_ConfigChannel+0x600>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	0e9b      	lsrs	r3, r3, #26
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	f003 031f 	and.w	r3, r3, #31
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fca:	e017      	b.n	8003ffc <HAL_ADC_ConfigChannel+0x630>
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	fa93 f3a3 	rbit	r3, r3
 8003fd8:	61fb      	str	r3, [r7, #28]
  return result;
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003fe4:	2320      	movs	r3, #32
 8003fe6:	e003      	b.n	8003ff0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fea:	fab3 f383 	clz	r3, r3
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	f003 031f 	and.w	r3, r3, #31
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ffc:	ea42 0103 	orr.w	r1, r2, r3
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10d      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x65c>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	0e9b      	lsrs	r3, r3, #26
 8004012:	3301      	adds	r3, #1
 8004014:	f003 021f 	and.w	r2, r3, #31
 8004018:	4613      	mov	r3, r2
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	4413      	add	r3, r2
 800401e:	3b1e      	subs	r3, #30
 8004020:	051b      	lsls	r3, r3, #20
 8004022:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004026:	e01d      	b.n	8004064 <HAL_ADC_ConfigChannel+0x698>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	fa93 f3a3 	rbit	r3, r3
 8004034:	613b      	str	r3, [r7, #16]
  return result;
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d103      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004040:	2320      	movs	r3, #32
 8004042:	e005      	b.n	8004050 <HAL_ADC_ConfigChannel+0x684>
 8004044:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	fab3 f383 	clz	r3, r3
 800404e:	b2db      	uxtb	r3, r3
 8004050:	3301      	adds	r3, #1
 8004052:	f003 021f 	and.w	r2, r3, #31
 8004056:	4613      	mov	r3, r2
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	4413      	add	r3, r2
 800405c:	3b1e      	subs	r3, #30
 800405e:	051b      	lsls	r3, r3, #20
 8004060:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004064:	430b      	orrs	r3, r1
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	6892      	ldr	r2, [r2, #8]
 800406a:	4619      	mov	r1, r3
 800406c:	f7ff f94a 	bl	8003304 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	4b44      	ldr	r3, [pc, #272]	; (8004188 <HAL_ADC_ConfigChannel+0x7bc>)
 8004076:	4013      	ands	r3, r2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d07a      	beq.n	8004172 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800407c:	4843      	ldr	r0, [pc, #268]	; (800418c <HAL_ADC_ConfigChannel+0x7c0>)
 800407e:	f7ff f89f 	bl	80031c0 <LL_ADC_GetCommonPathInternalCh>
 8004082:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a41      	ldr	r2, [pc, #260]	; (8004190 <HAL_ADC_ConfigChannel+0x7c4>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d12c      	bne.n	80040ea <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004090:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004094:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d126      	bne.n	80040ea <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a3c      	ldr	r2, [pc, #240]	; (8004194 <HAL_ADC_ConfigChannel+0x7c8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d004      	beq.n	80040b0 <HAL_ADC_ConfigChannel+0x6e4>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a3b      	ldr	r2, [pc, #236]	; (8004198 <HAL_ADC_ConfigChannel+0x7cc>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d15d      	bne.n	800416c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80040b8:	4619      	mov	r1, r3
 80040ba:	4834      	ldr	r0, [pc, #208]	; (800418c <HAL_ADC_ConfigChannel+0x7c0>)
 80040bc:	f7ff f86d 	bl	800319a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040c0:	4b36      	ldr	r3, [pc, #216]	; (800419c <HAL_ADC_ConfigChannel+0x7d0>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	099b      	lsrs	r3, r3, #6
 80040c6:	4a36      	ldr	r2, [pc, #216]	; (80041a0 <HAL_ADC_ConfigChannel+0x7d4>)
 80040c8:	fba2 2303 	umull	r2, r3, r2, r3
 80040cc:	099b      	lsrs	r3, r3, #6
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	4613      	mov	r3, r2
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	4413      	add	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80040da:	e002      	b.n	80040e2 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	3b01      	subs	r3, #1
 80040e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1f9      	bne.n	80040dc <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040e8:	e040      	b.n	800416c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a2d      	ldr	r2, [pc, #180]	; (80041a4 <HAL_ADC_ConfigChannel+0x7d8>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d118      	bne.n	8004126 <HAL_ADC_ConfigChannel+0x75a>
 80040f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d112      	bne.n	8004126 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a23      	ldr	r2, [pc, #140]	; (8004194 <HAL_ADC_ConfigChannel+0x7c8>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d004      	beq.n	8004114 <HAL_ADC_ConfigChannel+0x748>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a22      	ldr	r2, [pc, #136]	; (8004198 <HAL_ADC_ConfigChannel+0x7cc>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d12d      	bne.n	8004170 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004114:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004118:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800411c:	4619      	mov	r1, r3
 800411e:	481b      	ldr	r0, [pc, #108]	; (800418c <HAL_ADC_ConfigChannel+0x7c0>)
 8004120:	f7ff f83b 	bl	800319a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004124:	e024      	b.n	8004170 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a1f      	ldr	r2, [pc, #124]	; (80041a8 <HAL_ADC_ConfigChannel+0x7dc>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d120      	bne.n	8004172 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004130:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004134:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d11a      	bne.n	8004172 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a14      	ldr	r2, [pc, #80]	; (8004194 <HAL_ADC_ConfigChannel+0x7c8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d115      	bne.n	8004172 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004146:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800414a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800414e:	4619      	mov	r1, r3
 8004150:	480e      	ldr	r0, [pc, #56]	; (800418c <HAL_ADC_ConfigChannel+0x7c0>)
 8004152:	f7ff f822 	bl	800319a <LL_ADC_SetCommonPathInternalCh>
 8004156:	e00c      	b.n	8004172 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415c:	f043 0220 	orr.w	r2, r3, #32
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800416a:	e002      	b.n	8004172 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800416c:	bf00      	nop
 800416e:	e000      	b.n	8004172 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004170:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800417a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800417e:	4618      	mov	r0, r3
 8004180:	37d8      	adds	r7, #216	; 0xd8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	80080000 	.word	0x80080000
 800418c:	50040300 	.word	0x50040300
 8004190:	c7520000 	.word	0xc7520000
 8004194:	50040000 	.word	0x50040000
 8004198:	50040200 	.word	0x50040200
 800419c:	20000000 	.word	0x20000000
 80041a0:	053e2d63 	.word	0x053e2d63
 80041a4:	cb840000 	.word	0xcb840000
 80041a8:	80000001 	.word	0x80000001

080041ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80041b4:	2300      	movs	r3, #0
 80041b6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff f975 	bl	80034ac <LL_ADC_IsEnabled>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d169      	bne.n	800429c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689a      	ldr	r2, [r3, #8]
 80041ce:	4b36      	ldr	r3, [pc, #216]	; (80042a8 <ADC_Enable+0xfc>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00d      	beq.n	80041f2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041da:	f043 0210 	orr.w	r2, r3, #16
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e6:	f043 0201 	orr.w	r2, r3, #1
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e055      	b.n	800429e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff f930 	bl	800345c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80041fc:	482b      	ldr	r0, [pc, #172]	; (80042ac <ADC_Enable+0x100>)
 80041fe:	f7fe ffdf 	bl	80031c0 <LL_ADC_GetCommonPathInternalCh>
 8004202:	4603      	mov	r3, r0
 8004204:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d013      	beq.n	8004234 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800420c:	4b28      	ldr	r3, [pc, #160]	; (80042b0 <ADC_Enable+0x104>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	099b      	lsrs	r3, r3, #6
 8004212:	4a28      	ldr	r2, [pc, #160]	; (80042b4 <ADC_Enable+0x108>)
 8004214:	fba2 2303 	umull	r2, r3, r2, r3
 8004218:	099b      	lsrs	r3, r3, #6
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	4613      	mov	r3, r2
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	4413      	add	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004226:	e002      	b.n	800422e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	3b01      	subs	r3, #1
 800422c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1f9      	bne.n	8004228 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004234:	f7fe ff6e 	bl	8003114 <HAL_GetTick>
 8004238:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800423a:	e028      	b.n	800428e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff f933 	bl	80034ac <LL_ADC_IsEnabled>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d104      	bne.n	8004256 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4618      	mov	r0, r3
 8004252:	f7ff f903 	bl	800345c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004256:	f7fe ff5d 	bl	8003114 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d914      	bls.n	800428e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b01      	cmp	r3, #1
 8004270:	d00d      	beq.n	800428e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004276:	f043 0210 	orr.w	r2, r3, #16
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004282:	f043 0201 	orr.w	r2, r3, #1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e007      	b.n	800429e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b01      	cmp	r3, #1
 800429a:	d1cf      	bne.n	800423c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	8000003f 	.word	0x8000003f
 80042ac:	50040300 	.word	0x50040300
 80042b0:	20000000 	.word	0x20000000
 80042b4:	053e2d63 	.word	0x053e2d63

080042b8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7ff f904 	bl	80034d2 <LL_ADC_IsDisableOngoing>
 80042ca:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7ff f8eb 	bl	80034ac <LL_ADC_IsEnabled>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d047      	beq.n	800436c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d144      	bne.n	800436c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f003 030d 	and.w	r3, r3, #13
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d10c      	bne.n	800430a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff f8c5 	bl	8003484 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2203      	movs	r2, #3
 8004300:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004302:	f7fe ff07 	bl	8003114 <HAL_GetTick>
 8004306:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004308:	e029      	b.n	800435e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430e:	f043 0210 	orr.w	r2, r3, #16
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431a:	f043 0201 	orr.w	r2, r3, #1
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e023      	b.n	800436e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004326:	f7fe fef5 	bl	8003114 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d914      	bls.n	800435e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00d      	beq.n	800435e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004346:	f043 0210 	orr.w	r2, r3, #16
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004352:	f043 0201 	orr.w	r2, r3, #1
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e007      	b.n	800436e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1dc      	bne.n	8004326 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b084      	sub	sp, #16
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004382:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004388:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800438c:	2b00      	cmp	r3, #0
 800438e:	d14b      	bne.n	8004428 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004394:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d021      	beq.n	80043ee <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fe ff69 	bl	8003286 <LL_ADC_REG_IsTriggerSourceSWStart>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d032      	beq.n	8004420 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d12b      	bne.n	8004420 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d11f      	bne.n	8004420 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e4:	f043 0201 	orr.w	r2, r3, #1
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	655a      	str	r2, [r3, #84]	; 0x54
 80043ec:	e018      	b.n	8004420 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d111      	bne.n	8004420 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004400:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d105      	bne.n	8004420 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004418:	f043 0201 	orr.w	r2, r3, #1
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f7ff fab5 	bl	8003990 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004426:	e00e      	b.n	8004446 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442c:	f003 0310 	and.w	r3, r3, #16
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f7ff fabf 	bl	80039b8 <HAL_ADC_ErrorCallback>
}
 800443a:	e004      	b.n	8004446 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	4798      	blx	r3
}
 8004446:	bf00      	nop
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b084      	sub	sp, #16
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f7ff faa1 	bl	80039a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004462:	bf00      	nop
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b084      	sub	sp, #16
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004476:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004488:	f043 0204 	orr.w	r2, r3, #4
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f7ff fa91 	bl	80039b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004496:	bf00      	nop
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <LL_ADC_IsEnabled>:
{
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d101      	bne.n	80044b6 <LL_ADC_IsEnabled+0x18>
 80044b2:	2301      	movs	r3, #1
 80044b4:	e000      	b.n	80044b8 <LL_ADC_IsEnabled+0x1a>
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <LL_ADC_StartCalibration>:
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80044d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80044e0:	4313      	orrs	r3, r2
 80044e2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	609a      	str	r2, [r3, #8]
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <LL_ADC_IsCalibrationOnGoing>:
{
 80044f6:	b480      	push	{r7}
 80044f8:	b083      	sub	sp, #12
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004506:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800450a:	d101      	bne.n	8004510 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800450c:	2301      	movs	r3, #1
 800450e:	e000      	b.n	8004512 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <LL_ADC_REG_IsConversionOngoing>:
{
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b04      	cmp	r3, #4
 8004530:	d101      	bne.n	8004536 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004532:	2301      	movs	r3, #1
 8004534:	e000      	b.n	8004538 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800454e:	2300      	movs	r3, #0
 8004550:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_ADCEx_Calibration_Start+0x1c>
 800455c:	2302      	movs	r3, #2
 800455e:	e04d      	b.n	80045fc <HAL_ADCEx_Calibration_Start+0xb8>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7ff fea5 	bl	80042b8 <ADC_Disable>
 800456e:	4603      	mov	r3, r0
 8004570:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004572:	7bfb      	ldrb	r3, [r7, #15]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d136      	bne.n	80045e6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004580:	f023 0302 	bic.w	r3, r3, #2
 8004584:	f043 0202 	orr.w	r2, r3, #2
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6839      	ldr	r1, [r7, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff ff96 	bl	80044c4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004598:	e014      	b.n	80045c4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	3301      	adds	r3, #1
 800459e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80045a6:	d30d      	bcc.n	80045c4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ac:	f023 0312 	bic.w	r3, r3, #18
 80045b0:	f043 0210 	orr.w	r2, r3, #16
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e01b      	b.n	80045fc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff ff94 	bl	80044f6 <LL_ADC_IsCalibrationOnGoing>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1e2      	bne.n	800459a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d8:	f023 0303 	bic.w	r3, r3, #3
 80045dc:	f043 0201 	orr.w	r2, r3, #1
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	655a      	str	r2, [r3, #84]	; 0x54
 80045e4:	e005      	b.n	80045f2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ea:	f043 0210 	orr.w	r2, r3, #16
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004604:	b590      	push	{r4, r7, lr}
 8004606:	b09f      	sub	sp, #124	; 0x7c
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800460e:	2300      	movs	r3, #0
 8004610:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800461e:	2302      	movs	r3, #2
 8004620:	e093      	b.n	800474a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800462a:	2300      	movs	r3, #0
 800462c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800462e:	2300      	movs	r3, #0
 8004630:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a47      	ldr	r2, [pc, #284]	; (8004754 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d102      	bne.n	8004642 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800463c:	4b46      	ldr	r3, [pc, #280]	; (8004758 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800463e:	60bb      	str	r3, [r7, #8]
 8004640:	e001      	b.n	8004646 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004642:	2300      	movs	r3, #0
 8004644:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10b      	bne.n	8004664 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004650:	f043 0220 	orr.w	r2, r3, #32
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e072      	b.n	800474a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	4618      	mov	r0, r3
 8004668:	f7ff ff59 	bl	800451e <LL_ADC_REG_IsConversionOngoing>
 800466c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f7ff ff53 	bl	800451e <LL_ADC_REG_IsConversionOngoing>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d154      	bne.n	8004728 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800467e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004680:	2b00      	cmp	r3, #0
 8004682:	d151      	bne.n	8004728 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004684:	4b35      	ldr	r3, [pc, #212]	; (800475c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004686:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d02c      	beq.n	80046ea <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	6859      	ldr	r1, [r3, #4]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046a2:	035b      	lsls	r3, r3, #13
 80046a4:	430b      	orrs	r3, r1
 80046a6:	431a      	orrs	r2, r3
 80046a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046ac:	4829      	ldr	r0, [pc, #164]	; (8004754 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80046ae:	f7ff fef6 	bl	800449e <LL_ADC_IsEnabled>
 80046b2:	4604      	mov	r4, r0
 80046b4:	4828      	ldr	r0, [pc, #160]	; (8004758 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80046b6:	f7ff fef2 	bl	800449e <LL_ADC_IsEnabled>
 80046ba:	4603      	mov	r3, r0
 80046bc:	431c      	orrs	r4, r3
 80046be:	4828      	ldr	r0, [pc, #160]	; (8004760 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80046c0:	f7ff feed 	bl	800449e <LL_ADC_IsEnabled>
 80046c4:	4603      	mov	r3, r0
 80046c6:	4323      	orrs	r3, r4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d137      	bne.n	800473c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80046cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80046d4:	f023 030f 	bic.w	r3, r3, #15
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	6811      	ldr	r1, [r2, #0]
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	6892      	ldr	r2, [r2, #8]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	431a      	orrs	r2, r3
 80046e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046e8:	e028      	b.n	800473c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80046ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046f6:	4817      	ldr	r0, [pc, #92]	; (8004754 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80046f8:	f7ff fed1 	bl	800449e <LL_ADC_IsEnabled>
 80046fc:	4604      	mov	r4, r0
 80046fe:	4816      	ldr	r0, [pc, #88]	; (8004758 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004700:	f7ff fecd 	bl	800449e <LL_ADC_IsEnabled>
 8004704:	4603      	mov	r3, r0
 8004706:	431c      	orrs	r4, r3
 8004708:	4815      	ldr	r0, [pc, #84]	; (8004760 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800470a:	f7ff fec8 	bl	800449e <LL_ADC_IsEnabled>
 800470e:	4603      	mov	r3, r0
 8004710:	4323      	orrs	r3, r4
 8004712:	2b00      	cmp	r3, #0
 8004714:	d112      	bne.n	800473c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800471e:	f023 030f 	bic.w	r3, r3, #15
 8004722:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004724:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004726:	e009      	b.n	800473c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472c:	f043 0220 	orr.w	r2, r3, #32
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800473a:	e000      	b.n	800473e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800473c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004746:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800474a:	4618      	mov	r0, r3
 800474c:	377c      	adds	r7, #124	; 0x7c
 800474e:	46bd      	mov	sp, r7
 8004750:	bd90      	pop	{r4, r7, pc}
 8004752:	bf00      	nop
 8004754:	50040000 	.word	0x50040000
 8004758:	50040100 	.word	0x50040100
 800475c:	50040300 	.word	0x50040300
 8004760:	50040200 	.word	0x50040200

08004764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004774:	4b0c      	ldr	r3, [pc, #48]	; (80047a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004780:	4013      	ands	r3, r2
 8004782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800478c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004796:	4a04      	ldr	r2, [pc, #16]	; (80047a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	60d3      	str	r3, [r2, #12]
}
 800479c:	bf00      	nop
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	e000ed00 	.word	0xe000ed00

080047ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047b0:	4b04      	ldr	r3, [pc, #16]	; (80047c4 <__NVIC_GetPriorityGrouping+0x18>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	0a1b      	lsrs	r3, r3, #8
 80047b6:	f003 0307 	and.w	r3, r3, #7
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	e000ed00 	.word	0xe000ed00

080047c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	4603      	mov	r3, r0
 80047d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	db0b      	blt.n	80047f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047da:	79fb      	ldrb	r3, [r7, #7]
 80047dc:	f003 021f 	and.w	r2, r3, #31
 80047e0:	4907      	ldr	r1, [pc, #28]	; (8004800 <__NVIC_EnableIRQ+0x38>)
 80047e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e6:	095b      	lsrs	r3, r3, #5
 80047e8:	2001      	movs	r0, #1
 80047ea:	fa00 f202 	lsl.w	r2, r0, r2
 80047ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	e000e100 	.word	0xe000e100

08004804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	4603      	mov	r3, r0
 800480c:	6039      	str	r1, [r7, #0]
 800480e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004814:	2b00      	cmp	r3, #0
 8004816:	db0a      	blt.n	800482e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	b2da      	uxtb	r2, r3
 800481c:	490c      	ldr	r1, [pc, #48]	; (8004850 <__NVIC_SetPriority+0x4c>)
 800481e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004822:	0112      	lsls	r2, r2, #4
 8004824:	b2d2      	uxtb	r2, r2
 8004826:	440b      	add	r3, r1
 8004828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800482c:	e00a      	b.n	8004844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	b2da      	uxtb	r2, r3
 8004832:	4908      	ldr	r1, [pc, #32]	; (8004854 <__NVIC_SetPriority+0x50>)
 8004834:	79fb      	ldrb	r3, [r7, #7]
 8004836:	f003 030f 	and.w	r3, r3, #15
 800483a:	3b04      	subs	r3, #4
 800483c:	0112      	lsls	r2, r2, #4
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	440b      	add	r3, r1
 8004842:	761a      	strb	r2, [r3, #24]
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	e000e100 	.word	0xe000e100
 8004854:	e000ed00 	.word	0xe000ed00

08004858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004858:	b480      	push	{r7}
 800485a:	b089      	sub	sp, #36	; 0x24
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f1c3 0307 	rsb	r3, r3, #7
 8004872:	2b04      	cmp	r3, #4
 8004874:	bf28      	it	cs
 8004876:	2304      	movcs	r3, #4
 8004878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	3304      	adds	r3, #4
 800487e:	2b06      	cmp	r3, #6
 8004880:	d902      	bls.n	8004888 <NVIC_EncodePriority+0x30>
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	3b03      	subs	r3, #3
 8004886:	e000      	b.n	800488a <NVIC_EncodePriority+0x32>
 8004888:	2300      	movs	r3, #0
 800488a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800488c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	fa02 f303 	lsl.w	r3, r2, r3
 8004896:	43da      	mvns	r2, r3
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	401a      	ands	r2, r3
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	fa01 f303 	lsl.w	r3, r1, r3
 80048aa:	43d9      	mvns	r1, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048b0:	4313      	orrs	r3, r2
         );
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3724      	adds	r7, #36	; 0x24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
	...

080048c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3b01      	subs	r3, #1
 80048cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048d0:	d301      	bcc.n	80048d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048d2:	2301      	movs	r3, #1
 80048d4:	e00f      	b.n	80048f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048d6:	4a0a      	ldr	r2, [pc, #40]	; (8004900 <SysTick_Config+0x40>)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3b01      	subs	r3, #1
 80048dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048de:	210f      	movs	r1, #15
 80048e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048e4:	f7ff ff8e 	bl	8004804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048e8:	4b05      	ldr	r3, [pc, #20]	; (8004900 <SysTick_Config+0x40>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048ee:	4b04      	ldr	r3, [pc, #16]	; (8004900 <SysTick_Config+0x40>)
 80048f0:	2207      	movs	r2, #7
 80048f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	e000e010 	.word	0xe000e010

08004904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7ff ff29 	bl	8004764 <__NVIC_SetPriorityGrouping>
}
 8004912:	bf00      	nop
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b086      	sub	sp, #24
 800491e:	af00      	add	r7, sp, #0
 8004920:	4603      	mov	r3, r0
 8004922:	60b9      	str	r1, [r7, #8]
 8004924:	607a      	str	r2, [r7, #4]
 8004926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004928:	2300      	movs	r3, #0
 800492a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800492c:	f7ff ff3e 	bl	80047ac <__NVIC_GetPriorityGrouping>
 8004930:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	68b9      	ldr	r1, [r7, #8]
 8004936:	6978      	ldr	r0, [r7, #20]
 8004938:	f7ff ff8e 	bl	8004858 <NVIC_EncodePriority>
 800493c:	4602      	mov	r2, r0
 800493e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004942:	4611      	mov	r1, r2
 8004944:	4618      	mov	r0, r3
 8004946:	f7ff ff5d 	bl	8004804 <__NVIC_SetPriority>
}
 800494a:	bf00      	nop
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b082      	sub	sp, #8
 8004956:	af00      	add	r7, sp, #0
 8004958:	4603      	mov	r3, r0
 800495a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800495c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff ff31 	bl	80047c8 <__NVIC_EnableIRQ>
}
 8004966:	bf00      	nop
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b082      	sub	sp, #8
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7ff ffa2 	bl	80048c0 <SysTick_Config>
 800497c:	4603      	mov	r3, r0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e098      	b.n	8004acc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	4b4d      	ldr	r3, [pc, #308]	; (8004ad8 <HAL_DMA_Init+0x150>)
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d80f      	bhi.n	80049c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	461a      	mov	r2, r3
 80049ac:	4b4b      	ldr	r3, [pc, #300]	; (8004adc <HAL_DMA_Init+0x154>)
 80049ae:	4413      	add	r3, r2
 80049b0:	4a4b      	ldr	r2, [pc, #300]	; (8004ae0 <HAL_DMA_Init+0x158>)
 80049b2:	fba2 2303 	umull	r2, r3, r2, r3
 80049b6:	091b      	lsrs	r3, r3, #4
 80049b8:	009a      	lsls	r2, r3, #2
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a48      	ldr	r2, [pc, #288]	; (8004ae4 <HAL_DMA_Init+0x15c>)
 80049c2:	641a      	str	r2, [r3, #64]	; 0x40
 80049c4:	e00e      	b.n	80049e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	461a      	mov	r2, r3
 80049cc:	4b46      	ldr	r3, [pc, #280]	; (8004ae8 <HAL_DMA_Init+0x160>)
 80049ce:	4413      	add	r3, r2
 80049d0:	4a43      	ldr	r2, [pc, #268]	; (8004ae0 <HAL_DMA_Init+0x158>)
 80049d2:	fba2 2303 	umull	r2, r3, r2, r3
 80049d6:	091b      	lsrs	r3, r3, #4
 80049d8:	009a      	lsls	r2, r3, #2
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a42      	ldr	r2, [pc, #264]	; (8004aec <HAL_DMA_Init+0x164>)
 80049e2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80049fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004a08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a3e:	d039      	beq.n	8004ab4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a44:	4a27      	ldr	r2, [pc, #156]	; (8004ae4 <HAL_DMA_Init+0x15c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d11a      	bne.n	8004a80 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004a4a:	4b29      	ldr	r3, [pc, #164]	; (8004af0 <HAL_DMA_Init+0x168>)
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a52:	f003 031c 	and.w	r3, r3, #28
 8004a56:	210f      	movs	r1, #15
 8004a58:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5c:	43db      	mvns	r3, r3
 8004a5e:	4924      	ldr	r1, [pc, #144]	; (8004af0 <HAL_DMA_Init+0x168>)
 8004a60:	4013      	ands	r3, r2
 8004a62:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004a64:	4b22      	ldr	r3, [pc, #136]	; (8004af0 <HAL_DMA_Init+0x168>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6859      	ldr	r1, [r3, #4]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a70:	f003 031c 	and.w	r3, r3, #28
 8004a74:	fa01 f303 	lsl.w	r3, r1, r3
 8004a78:	491d      	ldr	r1, [pc, #116]	; (8004af0 <HAL_DMA_Init+0x168>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	600b      	str	r3, [r1, #0]
 8004a7e:	e019      	b.n	8004ab4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004a80:	4b1c      	ldr	r3, [pc, #112]	; (8004af4 <HAL_DMA_Init+0x16c>)
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a88:	f003 031c 	and.w	r3, r3, #28
 8004a8c:	210f      	movs	r1, #15
 8004a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a92:	43db      	mvns	r3, r3
 8004a94:	4917      	ldr	r1, [pc, #92]	; (8004af4 <HAL_DMA_Init+0x16c>)
 8004a96:	4013      	ands	r3, r2
 8004a98:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004a9a:	4b16      	ldr	r3, [pc, #88]	; (8004af4 <HAL_DMA_Init+0x16c>)
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6859      	ldr	r1, [r3, #4]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa6:	f003 031c 	and.w	r3, r3, #28
 8004aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8004aae:	4911      	ldr	r1, [pc, #68]	; (8004af4 <HAL_DMA_Init+0x16c>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	40020407 	.word	0x40020407
 8004adc:	bffdfff8 	.word	0xbffdfff8
 8004ae0:	cccccccd 	.word	0xcccccccd
 8004ae4:	40020000 	.word	0x40020000
 8004ae8:	bffdfbf8 	.word	0xbffdfbf8
 8004aec:	40020400 	.word	0x40020400
 8004af0:	400200a8 	.word	0x400200a8
 8004af4:	400204a8 	.word	0x400204a8

08004af8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b06:	2300      	movs	r3, #0
 8004b08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d101      	bne.n	8004b18 <HAL_DMA_Start_IT+0x20>
 8004b14:	2302      	movs	r3, #2
 8004b16:	e04b      	b.n	8004bb0 <HAL_DMA_Start_IT+0xb8>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d13a      	bne.n	8004ba2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0201 	bic.w	r2, r2, #1
 8004b48:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	68b9      	ldr	r1, [r7, #8]
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 f95f 	bl	8004e14 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d008      	beq.n	8004b70 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f042 020e 	orr.w	r2, r2, #14
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	e00f      	b.n	8004b90 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0204 	bic.w	r2, r2, #4
 8004b7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f042 020a 	orr.w	r2, r2, #10
 8004b8e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 0201 	orr.w	r2, r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	e005      	b.n	8004bae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004baa:	2302      	movs	r3, #2
 8004bac:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d008      	beq.n	8004be2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2204      	movs	r2, #4
 8004bd4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e022      	b.n	8004c28 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 020e 	bic.w	r2, r2, #14
 8004bf0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0201 	bic.w	r2, r2, #1
 8004c00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c06:	f003 021c 	and.w	r2, r3, #28
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	2101      	movs	r1, #1
 8004c10:	fa01 f202 	lsl.w	r2, r1, r2
 8004c14:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004c26:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d005      	beq.n	8004c58 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2204      	movs	r2, #4
 8004c50:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	73fb      	strb	r3, [r7, #15]
 8004c56:	e029      	b.n	8004cac <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 020e 	bic.w	r2, r2, #14
 8004c66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 0201 	bic.w	r2, r2, #1
 8004c76:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7c:	f003 021c 	and.w	r2, r3, #28
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c84:	2101      	movs	r1, #1
 8004c86:	fa01 f202 	lsl.w	r2, r1, r2
 8004c8a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d003      	beq.n	8004cac <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	4798      	blx	r3
    }
  }
  return status;
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b084      	sub	sp, #16
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd2:	f003 031c 	and.w	r3, r3, #28
 8004cd6:	2204      	movs	r2, #4
 8004cd8:	409a      	lsls	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4013      	ands	r3, r2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d026      	beq.n	8004d30 <HAL_DMA_IRQHandler+0x7a>
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d021      	beq.n	8004d30 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0320 	and.w	r3, r3, #32
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d107      	bne.n	8004d0a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0204 	bic.w	r2, r2, #4
 8004d08:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0e:	f003 021c 	and.w	r2, r3, #28
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	2104      	movs	r1, #4
 8004d18:	fa01 f202 	lsl.w	r2, r1, r2
 8004d1c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d071      	beq.n	8004e0a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004d2e:	e06c      	b.n	8004e0a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d34:	f003 031c 	and.w	r3, r3, #28
 8004d38:	2202      	movs	r2, #2
 8004d3a:	409a      	lsls	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d02e      	beq.n	8004da2 <HAL_DMA_IRQHandler+0xec>
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d029      	beq.n	8004da2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0320 	and.w	r3, r3, #32
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10b      	bne.n	8004d74 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 020a 	bic.w	r2, r2, #10
 8004d6a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d78:	f003 021c 	and.w	r2, r3, #28
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d80:	2102      	movs	r1, #2
 8004d82:	fa01 f202 	lsl.w	r2, r1, r2
 8004d86:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d038      	beq.n	8004e0a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004da0:	e033      	b.n	8004e0a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da6:	f003 031c 	and.w	r3, r3, #28
 8004daa:	2208      	movs	r2, #8
 8004dac:	409a      	lsls	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4013      	ands	r3, r2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d02a      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x156>
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	f003 0308 	and.w	r3, r3, #8
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d025      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 020e 	bic.w	r2, r2, #14
 8004dce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd4:	f003 021c 	and.w	r2, r3, #28
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ddc:	2101      	movs	r1, #1
 8004dde:	fa01 f202 	lsl.w	r2, r1, r2
 8004de2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d004      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004e0a:	bf00      	nop
 8004e0c:	bf00      	nop
}
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
 8004e20:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e26:	f003 021c 	and.w	r2, r3, #28
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	2101      	movs	r1, #1
 8004e30:	fa01 f202 	lsl.w	r2, r1, r2
 8004e34:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	2b10      	cmp	r3, #16
 8004e44:	d108      	bne.n	8004e58 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004e56:	e007      	b.n	8004e68 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	60da      	str	r2, [r3, #12]
}
 8004e68:	bf00      	nop
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e82:	e17f      	b.n	8005184 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	2101      	movs	r1, #1
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e90:	4013      	ands	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 8171 	beq.w	800517e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f003 0303 	and.w	r3, r3, #3
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d005      	beq.n	8004eb4 <HAL_GPIO_Init+0x40>
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f003 0303 	and.w	r3, r3, #3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d130      	bne.n	8004f16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	2203      	movs	r2, #3
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	68da      	ldr	r2, [r3, #12]
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004eea:	2201      	movs	r2, #1
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef2:	43db      	mvns	r3, r3
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	091b      	lsrs	r3, r3, #4
 8004f00:	f003 0201 	and.w	r2, r3, #1
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	2b03      	cmp	r3, #3
 8004f20:	d118      	bne.n	8004f54 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004f28:	2201      	movs	r2, #1
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f30:	43db      	mvns	r3, r3
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4013      	ands	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	08db      	lsrs	r3, r3, #3
 8004f3e:	f003 0201 	and.w	r2, r3, #1
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	fa02 f303 	lsl.w	r3, r2, r3
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f003 0303 	and.w	r3, r3, #3
 8004f5c:	2b03      	cmp	r3, #3
 8004f5e:	d017      	beq.n	8004f90 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	2203      	movs	r2, #3
 8004f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f70:	43db      	mvns	r3, r3
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	4013      	ands	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	689a      	ldr	r2, [r3, #8]
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	fa02 f303 	lsl.w	r3, r2, r3
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f003 0303 	and.w	r3, r3, #3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d123      	bne.n	8004fe4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	08da      	lsrs	r2, r3, #3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3208      	adds	r2, #8
 8004fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	220f      	movs	r2, #15
 8004fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb8:	43db      	mvns	r3, r3
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	691a      	ldr	r2, [r3, #16]
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	08da      	lsrs	r2, r3, #3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	3208      	adds	r2, #8
 8004fde:	6939      	ldr	r1, [r7, #16]
 8004fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	2203      	movs	r2, #3
 8004ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff4:	43db      	mvns	r3, r3
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f003 0203 	and.w	r2, r3, #3
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	fa02 f303 	lsl.w	r3, r2, r3
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	4313      	orrs	r3, r2
 8005010:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 80ac 	beq.w	800517e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005026:	4b5f      	ldr	r3, [pc, #380]	; (80051a4 <HAL_GPIO_Init+0x330>)
 8005028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800502a:	4a5e      	ldr	r2, [pc, #376]	; (80051a4 <HAL_GPIO_Init+0x330>)
 800502c:	f043 0301 	orr.w	r3, r3, #1
 8005030:	6613      	str	r3, [r2, #96]	; 0x60
 8005032:	4b5c      	ldr	r3, [pc, #368]	; (80051a4 <HAL_GPIO_Init+0x330>)
 8005034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	60bb      	str	r3, [r7, #8]
 800503c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800503e:	4a5a      	ldr	r2, [pc, #360]	; (80051a8 <HAL_GPIO_Init+0x334>)
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	089b      	lsrs	r3, r3, #2
 8005044:	3302      	adds	r3, #2
 8005046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800504a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	220f      	movs	r2, #15
 8005056:	fa02 f303 	lsl.w	r3, r2, r3
 800505a:	43db      	mvns	r3, r3
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	4013      	ands	r3, r2
 8005060:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005068:	d025      	beq.n	80050b6 <HAL_GPIO_Init+0x242>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a4f      	ldr	r2, [pc, #316]	; (80051ac <HAL_GPIO_Init+0x338>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d01f      	beq.n	80050b2 <HAL_GPIO_Init+0x23e>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a4e      	ldr	r2, [pc, #312]	; (80051b0 <HAL_GPIO_Init+0x33c>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d019      	beq.n	80050ae <HAL_GPIO_Init+0x23a>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a4d      	ldr	r2, [pc, #308]	; (80051b4 <HAL_GPIO_Init+0x340>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d013      	beq.n	80050aa <HAL_GPIO_Init+0x236>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a4c      	ldr	r2, [pc, #304]	; (80051b8 <HAL_GPIO_Init+0x344>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d00d      	beq.n	80050a6 <HAL_GPIO_Init+0x232>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a4b      	ldr	r2, [pc, #300]	; (80051bc <HAL_GPIO_Init+0x348>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d007      	beq.n	80050a2 <HAL_GPIO_Init+0x22e>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a4a      	ldr	r2, [pc, #296]	; (80051c0 <HAL_GPIO_Init+0x34c>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d101      	bne.n	800509e <HAL_GPIO_Init+0x22a>
 800509a:	2306      	movs	r3, #6
 800509c:	e00c      	b.n	80050b8 <HAL_GPIO_Init+0x244>
 800509e:	2307      	movs	r3, #7
 80050a0:	e00a      	b.n	80050b8 <HAL_GPIO_Init+0x244>
 80050a2:	2305      	movs	r3, #5
 80050a4:	e008      	b.n	80050b8 <HAL_GPIO_Init+0x244>
 80050a6:	2304      	movs	r3, #4
 80050a8:	e006      	b.n	80050b8 <HAL_GPIO_Init+0x244>
 80050aa:	2303      	movs	r3, #3
 80050ac:	e004      	b.n	80050b8 <HAL_GPIO_Init+0x244>
 80050ae:	2302      	movs	r3, #2
 80050b0:	e002      	b.n	80050b8 <HAL_GPIO_Init+0x244>
 80050b2:	2301      	movs	r3, #1
 80050b4:	e000      	b.n	80050b8 <HAL_GPIO_Init+0x244>
 80050b6:	2300      	movs	r3, #0
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	f002 0203 	and.w	r2, r2, #3
 80050be:	0092      	lsls	r2, r2, #2
 80050c0:	4093      	lsls	r3, r2
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80050c8:	4937      	ldr	r1, [pc, #220]	; (80051a8 <HAL_GPIO_Init+0x334>)
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	089b      	lsrs	r3, r3, #2
 80050ce:	3302      	adds	r3, #2
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80050d6:	4b3b      	ldr	r3, [pc, #236]	; (80051c4 <HAL_GPIO_Init+0x350>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	43db      	mvns	r3, r3
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	4013      	ands	r3, r2
 80050e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80050fa:	4a32      	ldr	r2, [pc, #200]	; (80051c4 <HAL_GPIO_Init+0x350>)
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005100:	4b30      	ldr	r3, [pc, #192]	; (80051c4 <HAL_GPIO_Init+0x350>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	43db      	mvns	r3, r3
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	4013      	ands	r3, r2
 800510e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d003      	beq.n	8005124 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	4313      	orrs	r3, r2
 8005122:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005124:	4a27      	ldr	r2, [pc, #156]	; (80051c4 <HAL_GPIO_Init+0x350>)
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800512a:	4b26      	ldr	r3, [pc, #152]	; (80051c4 <HAL_GPIO_Init+0x350>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	43db      	mvns	r3, r3
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	4013      	ands	r3, r2
 8005138:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4313      	orrs	r3, r2
 800514c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800514e:	4a1d      	ldr	r2, [pc, #116]	; (80051c4 <HAL_GPIO_Init+0x350>)
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005154:	4b1b      	ldr	r3, [pc, #108]	; (80051c4 <HAL_GPIO_Init+0x350>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	43db      	mvns	r3, r3
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	4013      	ands	r3, r2
 8005162:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d003      	beq.n	8005178 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	4313      	orrs	r3, r2
 8005176:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005178:	4a12      	ldr	r2, [pc, #72]	; (80051c4 <HAL_GPIO_Init+0x350>)
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	3301      	adds	r3, #1
 8005182:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	fa22 f303 	lsr.w	r3, r2, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	f47f ae78 	bne.w	8004e84 <HAL_GPIO_Init+0x10>
  }
}
 8005194:	bf00      	nop
 8005196:	bf00      	nop
 8005198:	371c      	adds	r7, #28
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40021000 	.word	0x40021000
 80051a8:	40010000 	.word	0x40010000
 80051ac:	48000400 	.word	0x48000400
 80051b0:	48000800 	.word	0x48000800
 80051b4:	48000c00 	.word	0x48000c00
 80051b8:	48001000 	.word	0x48001000
 80051bc:	48001400 	.word	0x48001400
 80051c0:	48001800 	.word	0x48001800
 80051c4:	40010400 	.word	0x40010400

080051c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	460b      	mov	r3, r1
 80051d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691a      	ldr	r2, [r3, #16]
 80051d8:	887b      	ldrh	r3, [r7, #2]
 80051da:	4013      	ands	r3, r2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d002      	beq.n	80051e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051e0:	2301      	movs	r3, #1
 80051e2:	73fb      	strb	r3, [r7, #15]
 80051e4:	e001      	b.n	80051ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051e6:	2300      	movs	r3, #0
 80051e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	460b      	mov	r3, r1
 8005202:	807b      	strh	r3, [r7, #2]
 8005204:	4613      	mov	r3, r2
 8005206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005208:	787b      	ldrb	r3, [r7, #1]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800520e:	887a      	ldrh	r2, [r7, #2]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005214:	e002      	b.n	800521c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005216:	887a      	ldrh	r2, [r7, #2]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005228:	b480      	push	{r7}
 800522a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800522c:	4b04      	ldr	r3, [pc, #16]	; (8005240 <HAL_PWREx_GetVoltageRange+0x18>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005234:	4618      	mov	r0, r3
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	40007000 	.word	0x40007000

08005244 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005252:	d130      	bne.n	80052b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005254:	4b23      	ldr	r3, [pc, #140]	; (80052e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800525c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005260:	d038      	beq.n	80052d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005262:	4b20      	ldr	r3, [pc, #128]	; (80052e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800526a:	4a1e      	ldr	r2, [pc, #120]	; (80052e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800526c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005270:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005272:	4b1d      	ldr	r3, [pc, #116]	; (80052e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2232      	movs	r2, #50	; 0x32
 8005278:	fb02 f303 	mul.w	r3, r2, r3
 800527c:	4a1b      	ldr	r2, [pc, #108]	; (80052ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800527e:	fba2 2303 	umull	r2, r3, r2, r3
 8005282:	0c9b      	lsrs	r3, r3, #18
 8005284:	3301      	adds	r3, #1
 8005286:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005288:	e002      	b.n	8005290 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	3b01      	subs	r3, #1
 800528e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005290:	4b14      	ldr	r3, [pc, #80]	; (80052e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800529c:	d102      	bne.n	80052a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1f2      	bne.n	800528a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052a4:	4b0f      	ldr	r3, [pc, #60]	; (80052e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052b0:	d110      	bne.n	80052d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e00f      	b.n	80052d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80052b6:	4b0b      	ldr	r3, [pc, #44]	; (80052e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80052be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052c2:	d007      	beq.n	80052d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80052c4:	4b07      	ldr	r3, [pc, #28]	; (80052e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80052cc:	4a05      	ldr	r2, [pc, #20]	; (80052e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	40007000 	.word	0x40007000
 80052e8:	20000000 	.word	0x20000000
 80052ec:	431bde83 	.word	0x431bde83

080052f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b088      	sub	sp, #32
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e3ca      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005302:	4b97      	ldr	r3, [pc, #604]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f003 030c 	and.w	r3, r3, #12
 800530a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800530c:	4b94      	ldr	r3, [pc, #592]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f003 0303 	and.w	r3, r3, #3
 8005314:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0310 	and.w	r3, r3, #16
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 80e4 	beq.w	80054ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d007      	beq.n	800533a <HAL_RCC_OscConfig+0x4a>
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	2b0c      	cmp	r3, #12
 800532e:	f040 808b 	bne.w	8005448 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2b01      	cmp	r3, #1
 8005336:	f040 8087 	bne.w	8005448 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800533a:	4b89      	ldr	r3, [pc, #548]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d005      	beq.n	8005352 <HAL_RCC_OscConfig+0x62>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e3a2      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a1a      	ldr	r2, [r3, #32]
 8005356:	4b82      	ldr	r3, [pc, #520]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0308 	and.w	r3, r3, #8
 800535e:	2b00      	cmp	r3, #0
 8005360:	d004      	beq.n	800536c <HAL_RCC_OscConfig+0x7c>
 8005362:	4b7f      	ldr	r3, [pc, #508]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800536a:	e005      	b.n	8005378 <HAL_RCC_OscConfig+0x88>
 800536c:	4b7c      	ldr	r3, [pc, #496]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 800536e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005372:	091b      	lsrs	r3, r3, #4
 8005374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005378:	4293      	cmp	r3, r2
 800537a:	d223      	bcs.n	80053c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	4618      	mov	r0, r3
 8005382:	f000 fd55 	bl	8005e30 <RCC_SetFlashLatencyFromMSIRange>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d001      	beq.n	8005390 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e383      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005390:	4b73      	ldr	r3, [pc, #460]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a72      	ldr	r2, [pc, #456]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 8005396:	f043 0308 	orr.w	r3, r3, #8
 800539a:	6013      	str	r3, [r2, #0]
 800539c:	4b70      	ldr	r3, [pc, #448]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a1b      	ldr	r3, [r3, #32]
 80053a8:	496d      	ldr	r1, [pc, #436]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053ae:	4b6c      	ldr	r3, [pc, #432]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	021b      	lsls	r3, r3, #8
 80053bc:	4968      	ldr	r1, [pc, #416]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	604b      	str	r3, [r1, #4]
 80053c2:	e025      	b.n	8005410 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053c4:	4b66      	ldr	r3, [pc, #408]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a65      	ldr	r2, [pc, #404]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 80053ca:	f043 0308 	orr.w	r3, r3, #8
 80053ce:	6013      	str	r3, [r2, #0]
 80053d0:	4b63      	ldr	r3, [pc, #396]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	4960      	ldr	r1, [pc, #384]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053e2:	4b5f      	ldr	r3, [pc, #380]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	021b      	lsls	r3, r3, #8
 80053f0:	495b      	ldr	r1, [pc, #364]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d109      	bne.n	8005410 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	4618      	mov	r0, r3
 8005402:	f000 fd15 	bl	8005e30 <RCC_SetFlashLatencyFromMSIRange>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e343      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005410:	f000 fc4a 	bl	8005ca8 <HAL_RCC_GetSysClockFreq>
 8005414:	4602      	mov	r2, r0
 8005416:	4b52      	ldr	r3, [pc, #328]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	091b      	lsrs	r3, r3, #4
 800541c:	f003 030f 	and.w	r3, r3, #15
 8005420:	4950      	ldr	r1, [pc, #320]	; (8005564 <HAL_RCC_OscConfig+0x274>)
 8005422:	5ccb      	ldrb	r3, [r1, r3]
 8005424:	f003 031f 	and.w	r3, r3, #31
 8005428:	fa22 f303 	lsr.w	r3, r2, r3
 800542c:	4a4e      	ldr	r2, [pc, #312]	; (8005568 <HAL_RCC_OscConfig+0x278>)
 800542e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005430:	4b4e      	ldr	r3, [pc, #312]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4618      	mov	r0, r3
 8005436:	f7fd fe1d 	bl	8003074 <HAL_InitTick>
 800543a:	4603      	mov	r3, r0
 800543c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800543e:	7bfb      	ldrb	r3, [r7, #15]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d052      	beq.n	80054ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005444:	7bfb      	ldrb	r3, [r7, #15]
 8005446:	e327      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d032      	beq.n	80054b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005450:	4b43      	ldr	r3, [pc, #268]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a42      	ldr	r2, [pc, #264]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 8005456:	f043 0301 	orr.w	r3, r3, #1
 800545a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800545c:	f7fd fe5a 	bl	8003114 <HAL_GetTick>
 8005460:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005464:	f7fd fe56 	bl	8003114 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b02      	cmp	r3, #2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e310      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005476:	4b3a      	ldr	r3, [pc, #232]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d0f0      	beq.n	8005464 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005482:	4b37      	ldr	r3, [pc, #220]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a36      	ldr	r2, [pc, #216]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 8005488:	f043 0308 	orr.w	r3, r3, #8
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	4b34      	ldr	r3, [pc, #208]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	4931      	ldr	r1, [pc, #196]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 800549c:	4313      	orrs	r3, r2
 800549e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054a0:	4b2f      	ldr	r3, [pc, #188]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	69db      	ldr	r3, [r3, #28]
 80054ac:	021b      	lsls	r3, r3, #8
 80054ae:	492c      	ldr	r1, [pc, #176]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	604b      	str	r3, [r1, #4]
 80054b4:	e01a      	b.n	80054ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80054b6:	4b2a      	ldr	r3, [pc, #168]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a29      	ldr	r2, [pc, #164]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 80054bc:	f023 0301 	bic.w	r3, r3, #1
 80054c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80054c2:	f7fd fe27 	bl	8003114 <HAL_GetTick>
 80054c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80054c8:	e008      	b.n	80054dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054ca:	f7fd fe23 	bl	8003114 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d901      	bls.n	80054dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e2dd      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80054dc:	4b20      	ldr	r3, [pc, #128]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1f0      	bne.n	80054ca <HAL_RCC_OscConfig+0x1da>
 80054e8:	e000      	b.n	80054ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80054ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d074      	beq.n	80055e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	2b08      	cmp	r3, #8
 80054fc:	d005      	beq.n	800550a <HAL_RCC_OscConfig+0x21a>
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	2b0c      	cmp	r3, #12
 8005502:	d10e      	bne.n	8005522 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	2b03      	cmp	r3, #3
 8005508:	d10b      	bne.n	8005522 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800550a:	4b15      	ldr	r3, [pc, #84]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d064      	beq.n	80055e0 <HAL_RCC_OscConfig+0x2f0>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d160      	bne.n	80055e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e2ba      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800552a:	d106      	bne.n	800553a <HAL_RCC_OscConfig+0x24a>
 800552c:	4b0c      	ldr	r3, [pc, #48]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a0b      	ldr	r2, [pc, #44]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 8005532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005536:	6013      	str	r3, [r2, #0]
 8005538:	e026      	b.n	8005588 <HAL_RCC_OscConfig+0x298>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005542:	d115      	bne.n	8005570 <HAL_RCC_OscConfig+0x280>
 8005544:	4b06      	ldr	r3, [pc, #24]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a05      	ldr	r2, [pc, #20]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 800554a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	4b03      	ldr	r3, [pc, #12]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a02      	ldr	r2, [pc, #8]	; (8005560 <HAL_RCC_OscConfig+0x270>)
 8005556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800555a:	6013      	str	r3, [r2, #0]
 800555c:	e014      	b.n	8005588 <HAL_RCC_OscConfig+0x298>
 800555e:	bf00      	nop
 8005560:	40021000 	.word	0x40021000
 8005564:	0800d9c8 	.word	0x0800d9c8
 8005568:	20000000 	.word	0x20000000
 800556c:	20000004 	.word	0x20000004
 8005570:	4ba0      	ldr	r3, [pc, #640]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a9f      	ldr	r2, [pc, #636]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 8005576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	4b9d      	ldr	r3, [pc, #628]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a9c      	ldr	r2, [pc, #624]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 8005582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d013      	beq.n	80055b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005590:	f7fd fdc0 	bl	8003114 <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005596:	e008      	b.n	80055aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005598:	f7fd fdbc 	bl	8003114 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b64      	cmp	r3, #100	; 0x64
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e276      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055aa:	4b92      	ldr	r3, [pc, #584]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d0f0      	beq.n	8005598 <HAL_RCC_OscConfig+0x2a8>
 80055b6:	e014      	b.n	80055e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b8:	f7fd fdac 	bl	8003114 <HAL_GetTick>
 80055bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055be:	e008      	b.n	80055d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055c0:	f7fd fda8 	bl	8003114 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b64      	cmp	r3, #100	; 0x64
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e262      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055d2:	4b88      	ldr	r3, [pc, #544]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1f0      	bne.n	80055c0 <HAL_RCC_OscConfig+0x2d0>
 80055de:	e000      	b.n	80055e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d060      	beq.n	80056b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	2b04      	cmp	r3, #4
 80055f2:	d005      	beq.n	8005600 <HAL_RCC_OscConfig+0x310>
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	2b0c      	cmp	r3, #12
 80055f8:	d119      	bne.n	800562e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d116      	bne.n	800562e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005600:	4b7c      	ldr	r3, [pc, #496]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005608:	2b00      	cmp	r3, #0
 800560a:	d005      	beq.n	8005618 <HAL_RCC_OscConfig+0x328>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d101      	bne.n	8005618 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e23f      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005618:	4b76      	ldr	r3, [pc, #472]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	061b      	lsls	r3, r3, #24
 8005626:	4973      	ldr	r1, [pc, #460]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 8005628:	4313      	orrs	r3, r2
 800562a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800562c:	e040      	b.n	80056b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d023      	beq.n	800567e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005636:	4b6f      	ldr	r3, [pc, #444]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a6e      	ldr	r2, [pc, #440]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 800563c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005642:	f7fd fd67 	bl	8003114 <HAL_GetTick>
 8005646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005648:	e008      	b.n	800565c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800564a:	f7fd fd63 	bl	8003114 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b02      	cmp	r3, #2
 8005656:	d901      	bls.n	800565c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e21d      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800565c:	4b65      	ldr	r3, [pc, #404]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005664:	2b00      	cmp	r3, #0
 8005666:	d0f0      	beq.n	800564a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005668:	4b62      	ldr	r3, [pc, #392]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	061b      	lsls	r3, r3, #24
 8005676:	495f      	ldr	r1, [pc, #380]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 8005678:	4313      	orrs	r3, r2
 800567a:	604b      	str	r3, [r1, #4]
 800567c:	e018      	b.n	80056b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800567e:	4b5d      	ldr	r3, [pc, #372]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a5c      	ldr	r2, [pc, #368]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 8005684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800568a:	f7fd fd43 	bl	8003114 <HAL_GetTick>
 800568e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005690:	e008      	b.n	80056a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005692:	f7fd fd3f 	bl	8003114 <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	2b02      	cmp	r3, #2
 800569e:	d901      	bls.n	80056a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e1f9      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056a4:	4b53      	ldr	r3, [pc, #332]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1f0      	bne.n	8005692 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0308 	and.w	r3, r3, #8
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d03c      	beq.n	8005736 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d01c      	beq.n	80056fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056c4:	4b4b      	ldr	r3, [pc, #300]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 80056c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056ca:	4a4a      	ldr	r2, [pc, #296]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 80056cc:	f043 0301 	orr.w	r3, r3, #1
 80056d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d4:	f7fd fd1e 	bl	8003114 <HAL_GetTick>
 80056d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056da:	e008      	b.n	80056ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056dc:	f7fd fd1a 	bl	8003114 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e1d4      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056ee:	4b41      	ldr	r3, [pc, #260]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 80056f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d0ef      	beq.n	80056dc <HAL_RCC_OscConfig+0x3ec>
 80056fc:	e01b      	b.n	8005736 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056fe:	4b3d      	ldr	r3, [pc, #244]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 8005700:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005704:	4a3b      	ldr	r2, [pc, #236]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 8005706:	f023 0301 	bic.w	r3, r3, #1
 800570a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800570e:	f7fd fd01 	bl	8003114 <HAL_GetTick>
 8005712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005714:	e008      	b.n	8005728 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005716:	f7fd fcfd 	bl	8003114 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	2b02      	cmp	r3, #2
 8005722:	d901      	bls.n	8005728 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e1b7      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005728:	4b32      	ldr	r3, [pc, #200]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 800572a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1ef      	bne.n	8005716 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0304 	and.w	r3, r3, #4
 800573e:	2b00      	cmp	r3, #0
 8005740:	f000 80a6 	beq.w	8005890 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005744:	2300      	movs	r3, #0
 8005746:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005748:	4b2a      	ldr	r3, [pc, #168]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 800574a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800574c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10d      	bne.n	8005770 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005754:	4b27      	ldr	r3, [pc, #156]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 8005756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005758:	4a26      	ldr	r2, [pc, #152]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 800575a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800575e:	6593      	str	r3, [r2, #88]	; 0x58
 8005760:	4b24      	ldr	r3, [pc, #144]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 8005762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005768:	60bb      	str	r3, [r7, #8]
 800576a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800576c:	2301      	movs	r3, #1
 800576e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005770:	4b21      	ldr	r3, [pc, #132]	; (80057f8 <HAL_RCC_OscConfig+0x508>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005778:	2b00      	cmp	r3, #0
 800577a:	d118      	bne.n	80057ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800577c:	4b1e      	ldr	r3, [pc, #120]	; (80057f8 <HAL_RCC_OscConfig+0x508>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a1d      	ldr	r2, [pc, #116]	; (80057f8 <HAL_RCC_OscConfig+0x508>)
 8005782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005786:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005788:	f7fd fcc4 	bl	8003114 <HAL_GetTick>
 800578c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800578e:	e008      	b.n	80057a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005790:	f7fd fcc0 	bl	8003114 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b02      	cmp	r3, #2
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e17a      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057a2:	4b15      	ldr	r3, [pc, #84]	; (80057f8 <HAL_RCC_OscConfig+0x508>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0f0      	beq.n	8005790 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d108      	bne.n	80057c8 <HAL_RCC_OscConfig+0x4d8>
 80057b6:	4b0f      	ldr	r3, [pc, #60]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 80057b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057bc:	4a0d      	ldr	r2, [pc, #52]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 80057be:	f043 0301 	orr.w	r3, r3, #1
 80057c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057c6:	e029      	b.n	800581c <HAL_RCC_OscConfig+0x52c>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	2b05      	cmp	r3, #5
 80057ce:	d115      	bne.n	80057fc <HAL_RCC_OscConfig+0x50c>
 80057d0:	4b08      	ldr	r3, [pc, #32]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 80057d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d6:	4a07      	ldr	r2, [pc, #28]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 80057d8:	f043 0304 	orr.w	r3, r3, #4
 80057dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057e0:	4b04      	ldr	r3, [pc, #16]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 80057e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e6:	4a03      	ldr	r2, [pc, #12]	; (80057f4 <HAL_RCC_OscConfig+0x504>)
 80057e8:	f043 0301 	orr.w	r3, r3, #1
 80057ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057f0:	e014      	b.n	800581c <HAL_RCC_OscConfig+0x52c>
 80057f2:	bf00      	nop
 80057f4:	40021000 	.word	0x40021000
 80057f8:	40007000 	.word	0x40007000
 80057fc:	4b9c      	ldr	r3, [pc, #624]	; (8005a70 <HAL_RCC_OscConfig+0x780>)
 80057fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005802:	4a9b      	ldr	r2, [pc, #620]	; (8005a70 <HAL_RCC_OscConfig+0x780>)
 8005804:	f023 0301 	bic.w	r3, r3, #1
 8005808:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800580c:	4b98      	ldr	r3, [pc, #608]	; (8005a70 <HAL_RCC_OscConfig+0x780>)
 800580e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005812:	4a97      	ldr	r2, [pc, #604]	; (8005a70 <HAL_RCC_OscConfig+0x780>)
 8005814:	f023 0304 	bic.w	r3, r3, #4
 8005818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d016      	beq.n	8005852 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005824:	f7fd fc76 	bl	8003114 <HAL_GetTick>
 8005828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800582a:	e00a      	b.n	8005842 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800582c:	f7fd fc72 	bl	8003114 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	f241 3288 	movw	r2, #5000	; 0x1388
 800583a:	4293      	cmp	r3, r2
 800583c:	d901      	bls.n	8005842 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e12a      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005842:	4b8b      	ldr	r3, [pc, #556]	; (8005a70 <HAL_RCC_OscConfig+0x780>)
 8005844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d0ed      	beq.n	800582c <HAL_RCC_OscConfig+0x53c>
 8005850:	e015      	b.n	800587e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005852:	f7fd fc5f 	bl	8003114 <HAL_GetTick>
 8005856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005858:	e00a      	b.n	8005870 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800585a:	f7fd fc5b 	bl	8003114 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	f241 3288 	movw	r2, #5000	; 0x1388
 8005868:	4293      	cmp	r3, r2
 800586a:	d901      	bls.n	8005870 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e113      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005870:	4b7f      	ldr	r3, [pc, #508]	; (8005a70 <HAL_RCC_OscConfig+0x780>)
 8005872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1ed      	bne.n	800585a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800587e:	7ffb      	ldrb	r3, [r7, #31]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d105      	bne.n	8005890 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005884:	4b7a      	ldr	r3, [pc, #488]	; (8005a70 <HAL_RCC_OscConfig+0x780>)
 8005886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005888:	4a79      	ldr	r2, [pc, #484]	; (8005a70 <HAL_RCC_OscConfig+0x780>)
 800588a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800588e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 80fe 	beq.w	8005a96 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589e:	2b02      	cmp	r3, #2
 80058a0:	f040 80d0 	bne.w	8005a44 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80058a4:	4b72      	ldr	r3, [pc, #456]	; (8005a70 <HAL_RCC_OscConfig+0x780>)
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f003 0203 	and.w	r2, r3, #3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d130      	bne.n	800591a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c2:	3b01      	subs	r3, #1
 80058c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d127      	bne.n	800591a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d11f      	bne.n	800591a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058e4:	2a07      	cmp	r2, #7
 80058e6:	bf14      	ite	ne
 80058e8:	2201      	movne	r2, #1
 80058ea:	2200      	moveq	r2, #0
 80058ec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d113      	bne.n	800591a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fc:	085b      	lsrs	r3, r3, #1
 80058fe:	3b01      	subs	r3, #1
 8005900:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005902:	429a      	cmp	r2, r3
 8005904:	d109      	bne.n	800591a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005910:	085b      	lsrs	r3, r3, #1
 8005912:	3b01      	subs	r3, #1
 8005914:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005916:	429a      	cmp	r2, r3
 8005918:	d06e      	beq.n	80059f8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	2b0c      	cmp	r3, #12
 800591e:	d069      	beq.n	80059f4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005920:	4b53      	ldr	r3, [pc, #332]	; (8005a70 <HAL_RCC_OscConfig+0x780>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d105      	bne.n	8005938 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800592c:	4b50      	ldr	r3, [pc, #320]	; (8005a70 <HAL_RCC_OscConfig+0x780>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d001      	beq.n	800593c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e0ad      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800593c:	4b4c      	ldr	r3, [pc, #304]	; (8005a70 <HAL_RCC_OscConfig+0x780>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a4b      	ldr	r2, [pc, #300]	; (8005a70 <HAL_RCC_OscConfig+0x780>)
 8005942:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005946:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005948:	f7fd fbe4 	bl	8003114 <HAL_GetTick>
 800594c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800594e:	e008      	b.n	8005962 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005950:	f7fd fbe0 	bl	8003114 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	2b02      	cmp	r3, #2
 800595c:	d901      	bls.n	8005962 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e09a      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005962:	4b43      	ldr	r3, [pc, #268]	; (8005a70 <HAL_RCC_OscConfig+0x780>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1f0      	bne.n	8005950 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800596e:	4b40      	ldr	r3, [pc, #256]	; (8005a70 <HAL_RCC_OscConfig+0x780>)
 8005970:	68da      	ldr	r2, [r3, #12]
 8005972:	4b40      	ldr	r3, [pc, #256]	; (8005a74 <HAL_RCC_OscConfig+0x784>)
 8005974:	4013      	ands	r3, r2
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800597e:	3a01      	subs	r2, #1
 8005980:	0112      	lsls	r2, r2, #4
 8005982:	4311      	orrs	r1, r2
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005988:	0212      	lsls	r2, r2, #8
 800598a:	4311      	orrs	r1, r2
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005990:	0852      	lsrs	r2, r2, #1
 8005992:	3a01      	subs	r2, #1
 8005994:	0552      	lsls	r2, r2, #21
 8005996:	4311      	orrs	r1, r2
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800599c:	0852      	lsrs	r2, r2, #1
 800599e:	3a01      	subs	r2, #1
 80059a0:	0652      	lsls	r2, r2, #25
 80059a2:	4311      	orrs	r1, r2
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80059a8:	0912      	lsrs	r2, r2, #4
 80059aa:	0452      	lsls	r2, r2, #17
 80059ac:	430a      	orrs	r2, r1
 80059ae:	4930      	ldr	r1, [pc, #192]	; (8005a70 <HAL_RCC_OscConfig+0x780>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80059b4:	4b2e      	ldr	r3, [pc, #184]	; (8005a70 <HAL_RCC_OscConfig+0x780>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a2d      	ldr	r2, [pc, #180]	; (8005a70 <HAL_RCC_OscConfig+0x780>)
 80059ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059c0:	4b2b      	ldr	r3, [pc, #172]	; (8005a70 <HAL_RCC_OscConfig+0x780>)
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	4a2a      	ldr	r2, [pc, #168]	; (8005a70 <HAL_RCC_OscConfig+0x780>)
 80059c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80059cc:	f7fd fba2 	bl	8003114 <HAL_GetTick>
 80059d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059d2:	e008      	b.n	80059e6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059d4:	f7fd fb9e 	bl	8003114 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e058      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059e6:	4b22      	ldr	r3, [pc, #136]	; (8005a70 <HAL_RCC_OscConfig+0x780>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d0f0      	beq.n	80059d4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059f2:	e050      	b.n	8005a96 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e04f      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059f8:	4b1d      	ldr	r3, [pc, #116]	; (8005a70 <HAL_RCC_OscConfig+0x780>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d148      	bne.n	8005a96 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005a04:	4b1a      	ldr	r3, [pc, #104]	; (8005a70 <HAL_RCC_OscConfig+0x780>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a19      	ldr	r2, [pc, #100]	; (8005a70 <HAL_RCC_OscConfig+0x780>)
 8005a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a10:	4b17      	ldr	r3, [pc, #92]	; (8005a70 <HAL_RCC_OscConfig+0x780>)
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	4a16      	ldr	r2, [pc, #88]	; (8005a70 <HAL_RCC_OscConfig+0x780>)
 8005a16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a1c:	f7fd fb7a 	bl	8003114 <HAL_GetTick>
 8005a20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a22:	e008      	b.n	8005a36 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a24:	f7fd fb76 	bl	8003114 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d901      	bls.n	8005a36 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e030      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a36:	4b0e      	ldr	r3, [pc, #56]	; (8005a70 <HAL_RCC_OscConfig+0x780>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d0f0      	beq.n	8005a24 <HAL_RCC_OscConfig+0x734>
 8005a42:	e028      	b.n	8005a96 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	2b0c      	cmp	r3, #12
 8005a48:	d023      	beq.n	8005a92 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a4a:	4b09      	ldr	r3, [pc, #36]	; (8005a70 <HAL_RCC_OscConfig+0x780>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a08      	ldr	r2, [pc, #32]	; (8005a70 <HAL_RCC_OscConfig+0x780>)
 8005a50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a56:	f7fd fb5d 	bl	8003114 <HAL_GetTick>
 8005a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a5c:	e00c      	b.n	8005a78 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a5e:	f7fd fb59 	bl	8003114 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d905      	bls.n	8005a78 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e013      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a8>
 8005a70:	40021000 	.word	0x40021000
 8005a74:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a78:	4b09      	ldr	r3, [pc, #36]	; (8005aa0 <HAL_RCC_OscConfig+0x7b0>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1ec      	bne.n	8005a5e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005a84:	4b06      	ldr	r3, [pc, #24]	; (8005aa0 <HAL_RCC_OscConfig+0x7b0>)
 8005a86:	68da      	ldr	r2, [r3, #12]
 8005a88:	4905      	ldr	r1, [pc, #20]	; (8005aa0 <HAL_RCC_OscConfig+0x7b0>)
 8005a8a:	4b06      	ldr	r3, [pc, #24]	; (8005aa4 <HAL_RCC_OscConfig+0x7b4>)
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	60cb      	str	r3, [r1, #12]
 8005a90:	e001      	b.n	8005a96 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e000      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3720      	adds	r7, #32
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	40021000 	.word	0x40021000
 8005aa4:	feeefffc 	.word	0xfeeefffc

08005aa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e0e7      	b.n	8005c8c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005abc:	4b75      	ldr	r3, [pc, #468]	; (8005c94 <HAL_RCC_ClockConfig+0x1ec>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0307 	and.w	r3, r3, #7
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d910      	bls.n	8005aec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aca:	4b72      	ldr	r3, [pc, #456]	; (8005c94 <HAL_RCC_ClockConfig+0x1ec>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f023 0207 	bic.w	r2, r3, #7
 8005ad2:	4970      	ldr	r1, [pc, #448]	; (8005c94 <HAL_RCC_ClockConfig+0x1ec>)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ada:	4b6e      	ldr	r3, [pc, #440]	; (8005c94 <HAL_RCC_ClockConfig+0x1ec>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0307 	and.w	r3, r3, #7
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d001      	beq.n	8005aec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e0cf      	b.n	8005c8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0302 	and.w	r3, r3, #2
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d010      	beq.n	8005b1a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689a      	ldr	r2, [r3, #8]
 8005afc:	4b66      	ldr	r3, [pc, #408]	; (8005c98 <HAL_RCC_ClockConfig+0x1f0>)
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d908      	bls.n	8005b1a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b08:	4b63      	ldr	r3, [pc, #396]	; (8005c98 <HAL_RCC_ClockConfig+0x1f0>)
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	4960      	ldr	r1, [pc, #384]	; (8005c98 <HAL_RCC_ClockConfig+0x1f0>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d04c      	beq.n	8005bc0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	2b03      	cmp	r3, #3
 8005b2c:	d107      	bne.n	8005b3e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b2e:	4b5a      	ldr	r3, [pc, #360]	; (8005c98 <HAL_RCC_ClockConfig+0x1f0>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d121      	bne.n	8005b7e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e0a6      	b.n	8005c8c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d107      	bne.n	8005b56 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b46:	4b54      	ldr	r3, [pc, #336]	; (8005c98 <HAL_RCC_ClockConfig+0x1f0>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d115      	bne.n	8005b7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e09a      	b.n	8005c8c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d107      	bne.n	8005b6e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b5e:	4b4e      	ldr	r3, [pc, #312]	; (8005c98 <HAL_RCC_ClockConfig+0x1f0>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d109      	bne.n	8005b7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e08e      	b.n	8005c8c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b6e:	4b4a      	ldr	r3, [pc, #296]	; (8005c98 <HAL_RCC_ClockConfig+0x1f0>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e086      	b.n	8005c8c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b7e:	4b46      	ldr	r3, [pc, #280]	; (8005c98 <HAL_RCC_ClockConfig+0x1f0>)
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f023 0203 	bic.w	r2, r3, #3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	4943      	ldr	r1, [pc, #268]	; (8005c98 <HAL_RCC_ClockConfig+0x1f0>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b90:	f7fd fac0 	bl	8003114 <HAL_GetTick>
 8005b94:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b96:	e00a      	b.n	8005bae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b98:	f7fd fabc 	bl	8003114 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e06e      	b.n	8005c8c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bae:	4b3a      	ldr	r3, [pc, #232]	; (8005c98 <HAL_RCC_ClockConfig+0x1f0>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f003 020c 	and.w	r2, r3, #12
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d1eb      	bne.n	8005b98 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0302 	and.w	r3, r3, #2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d010      	beq.n	8005bee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	4b31      	ldr	r3, [pc, #196]	; (8005c98 <HAL_RCC_ClockConfig+0x1f0>)
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d208      	bcs.n	8005bee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bdc:	4b2e      	ldr	r3, [pc, #184]	; (8005c98 <HAL_RCC_ClockConfig+0x1f0>)
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	492b      	ldr	r1, [pc, #172]	; (8005c98 <HAL_RCC_ClockConfig+0x1f0>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bee:	4b29      	ldr	r3, [pc, #164]	; (8005c94 <HAL_RCC_ClockConfig+0x1ec>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0307 	and.w	r3, r3, #7
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d210      	bcs.n	8005c1e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bfc:	4b25      	ldr	r3, [pc, #148]	; (8005c94 <HAL_RCC_ClockConfig+0x1ec>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f023 0207 	bic.w	r2, r3, #7
 8005c04:	4923      	ldr	r1, [pc, #140]	; (8005c94 <HAL_RCC_ClockConfig+0x1ec>)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c0c:	4b21      	ldr	r3, [pc, #132]	; (8005c94 <HAL_RCC_ClockConfig+0x1ec>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0307 	and.w	r3, r3, #7
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d001      	beq.n	8005c1e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e036      	b.n	8005c8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0304 	and.w	r3, r3, #4
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d008      	beq.n	8005c3c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c2a:	4b1b      	ldr	r3, [pc, #108]	; (8005c98 <HAL_RCC_ClockConfig+0x1f0>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	4918      	ldr	r1, [pc, #96]	; (8005c98 <HAL_RCC_ClockConfig+0x1f0>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0308 	and.w	r3, r3, #8
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d009      	beq.n	8005c5c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c48:	4b13      	ldr	r3, [pc, #76]	; (8005c98 <HAL_RCC_ClockConfig+0x1f0>)
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	00db      	lsls	r3, r3, #3
 8005c56:	4910      	ldr	r1, [pc, #64]	; (8005c98 <HAL_RCC_ClockConfig+0x1f0>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c5c:	f000 f824 	bl	8005ca8 <HAL_RCC_GetSysClockFreq>
 8005c60:	4602      	mov	r2, r0
 8005c62:	4b0d      	ldr	r3, [pc, #52]	; (8005c98 <HAL_RCC_ClockConfig+0x1f0>)
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	091b      	lsrs	r3, r3, #4
 8005c68:	f003 030f 	and.w	r3, r3, #15
 8005c6c:	490b      	ldr	r1, [pc, #44]	; (8005c9c <HAL_RCC_ClockConfig+0x1f4>)
 8005c6e:	5ccb      	ldrb	r3, [r1, r3]
 8005c70:	f003 031f 	and.w	r3, r3, #31
 8005c74:	fa22 f303 	lsr.w	r3, r2, r3
 8005c78:	4a09      	ldr	r2, [pc, #36]	; (8005ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8005c7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005c7c:	4b09      	ldr	r3, [pc, #36]	; (8005ca4 <HAL_RCC_ClockConfig+0x1fc>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7fd f9f7 	bl	8003074 <HAL_InitTick>
 8005c86:	4603      	mov	r3, r0
 8005c88:	72fb      	strb	r3, [r7, #11]

  return status;
 8005c8a:	7afb      	ldrb	r3, [r7, #11]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	40022000 	.word	0x40022000
 8005c98:	40021000 	.word	0x40021000
 8005c9c:	0800d9c8 	.word	0x0800d9c8
 8005ca0:	20000000 	.word	0x20000000
 8005ca4:	20000004 	.word	0x20000004

08005ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b089      	sub	sp, #36	; 0x24
 8005cac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	61fb      	str	r3, [r7, #28]
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cb6:	4b3e      	ldr	r3, [pc, #248]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f003 030c 	and.w	r3, r3, #12
 8005cbe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005cc0:	4b3b      	ldr	r3, [pc, #236]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f003 0303 	and.w	r3, r3, #3
 8005cc8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d005      	beq.n	8005cdc <HAL_RCC_GetSysClockFreq+0x34>
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	2b0c      	cmp	r3, #12
 8005cd4:	d121      	bne.n	8005d1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d11e      	bne.n	8005d1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005cdc:	4b34      	ldr	r3, [pc, #208]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0308 	and.w	r3, r3, #8
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d107      	bne.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ce8:	4b31      	ldr	r3, [pc, #196]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cee:	0a1b      	lsrs	r3, r3, #8
 8005cf0:	f003 030f 	and.w	r3, r3, #15
 8005cf4:	61fb      	str	r3, [r7, #28]
 8005cf6:	e005      	b.n	8005d04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005cf8:	4b2d      	ldr	r3, [pc, #180]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	091b      	lsrs	r3, r3, #4
 8005cfe:	f003 030f 	and.w	r3, r3, #15
 8005d02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005d04:	4a2b      	ldr	r2, [pc, #172]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10d      	bne.n	8005d30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d18:	e00a      	b.n	8005d30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	2b04      	cmp	r3, #4
 8005d1e:	d102      	bne.n	8005d26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005d20:	4b25      	ldr	r3, [pc, #148]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005d22:	61bb      	str	r3, [r7, #24]
 8005d24:	e004      	b.n	8005d30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	2b08      	cmp	r3, #8
 8005d2a:	d101      	bne.n	8005d30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d2c:	4b23      	ldr	r3, [pc, #140]	; (8005dbc <HAL_RCC_GetSysClockFreq+0x114>)
 8005d2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	2b0c      	cmp	r3, #12
 8005d34:	d134      	bne.n	8005da0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d36:	4b1e      	ldr	r3, [pc, #120]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f003 0303 	and.w	r3, r3, #3
 8005d3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d003      	beq.n	8005d4e <HAL_RCC_GetSysClockFreq+0xa6>
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2b03      	cmp	r3, #3
 8005d4a:	d003      	beq.n	8005d54 <HAL_RCC_GetSysClockFreq+0xac>
 8005d4c:	e005      	b.n	8005d5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005d4e:	4b1a      	ldr	r3, [pc, #104]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005d50:	617b      	str	r3, [r7, #20]
      break;
 8005d52:	e005      	b.n	8005d60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005d54:	4b19      	ldr	r3, [pc, #100]	; (8005dbc <HAL_RCC_GetSysClockFreq+0x114>)
 8005d56:	617b      	str	r3, [r7, #20]
      break;
 8005d58:	e002      	b.n	8005d60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	617b      	str	r3, [r7, #20]
      break;
 8005d5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d60:	4b13      	ldr	r3, [pc, #76]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	091b      	lsrs	r3, r3, #4
 8005d66:	f003 0307 	and.w	r3, r3, #7
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005d6e:	4b10      	ldr	r3, [pc, #64]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	0a1b      	lsrs	r3, r3, #8
 8005d74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	fb03 f202 	mul.w	r2, r3, r2
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d86:	4b0a      	ldr	r3, [pc, #40]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	0e5b      	lsrs	r3, r3, #25
 8005d8c:	f003 0303 	and.w	r3, r3, #3
 8005d90:	3301      	adds	r3, #1
 8005d92:	005b      	lsls	r3, r3, #1
 8005d94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005da0:	69bb      	ldr	r3, [r7, #24]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3724      	adds	r7, #36	; 0x24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	40021000 	.word	0x40021000
 8005db4:	0800d9e0 	.word	0x0800d9e0
 8005db8:	00f42400 	.word	0x00f42400
 8005dbc:	007a1200 	.word	0x007a1200

08005dc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dc4:	4b03      	ldr	r3, [pc, #12]	; (8005dd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	20000000 	.word	0x20000000

08005dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ddc:	f7ff fff0 	bl	8005dc0 <HAL_RCC_GetHCLKFreq>
 8005de0:	4602      	mov	r2, r0
 8005de2:	4b06      	ldr	r3, [pc, #24]	; (8005dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	0a1b      	lsrs	r3, r3, #8
 8005de8:	f003 0307 	and.w	r3, r3, #7
 8005dec:	4904      	ldr	r1, [pc, #16]	; (8005e00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005dee:	5ccb      	ldrb	r3, [r1, r3]
 8005df0:	f003 031f 	and.w	r3, r3, #31
 8005df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	40021000 	.word	0x40021000
 8005e00:	0800d9d8 	.word	0x0800d9d8

08005e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005e08:	f7ff ffda 	bl	8005dc0 <HAL_RCC_GetHCLKFreq>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	4b06      	ldr	r3, [pc, #24]	; (8005e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	0adb      	lsrs	r3, r3, #11
 8005e14:	f003 0307 	and.w	r3, r3, #7
 8005e18:	4904      	ldr	r1, [pc, #16]	; (8005e2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e1a:	5ccb      	ldrb	r3, [r1, r3]
 8005e1c:	f003 031f 	and.w	r3, r3, #31
 8005e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	40021000 	.word	0x40021000
 8005e2c:	0800d9d8 	.word	0x0800d9d8

08005e30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005e38:	2300      	movs	r3, #0
 8005e3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005e3c:	4b2a      	ldr	r3, [pc, #168]	; (8005ee8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d003      	beq.n	8005e50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005e48:	f7ff f9ee 	bl	8005228 <HAL_PWREx_GetVoltageRange>
 8005e4c:	6178      	str	r0, [r7, #20]
 8005e4e:	e014      	b.n	8005e7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e50:	4b25      	ldr	r3, [pc, #148]	; (8005ee8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e54:	4a24      	ldr	r2, [pc, #144]	; (8005ee8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e5a:	6593      	str	r3, [r2, #88]	; 0x58
 8005e5c:	4b22      	ldr	r3, [pc, #136]	; (8005ee8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e64:	60fb      	str	r3, [r7, #12]
 8005e66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005e68:	f7ff f9de 	bl	8005228 <HAL_PWREx_GetVoltageRange>
 8005e6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005e6e:	4b1e      	ldr	r3, [pc, #120]	; (8005ee8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e72:	4a1d      	ldr	r2, [pc, #116]	; (8005ee8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e80:	d10b      	bne.n	8005e9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b80      	cmp	r3, #128	; 0x80
 8005e86:	d919      	bls.n	8005ebc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2ba0      	cmp	r3, #160	; 0xa0
 8005e8c:	d902      	bls.n	8005e94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005e8e:	2302      	movs	r3, #2
 8005e90:	613b      	str	r3, [r7, #16]
 8005e92:	e013      	b.n	8005ebc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e94:	2301      	movs	r3, #1
 8005e96:	613b      	str	r3, [r7, #16]
 8005e98:	e010      	b.n	8005ebc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2b80      	cmp	r3, #128	; 0x80
 8005e9e:	d902      	bls.n	8005ea6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	613b      	str	r3, [r7, #16]
 8005ea4:	e00a      	b.n	8005ebc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b80      	cmp	r3, #128	; 0x80
 8005eaa:	d102      	bne.n	8005eb2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005eac:	2302      	movs	r3, #2
 8005eae:	613b      	str	r3, [r7, #16]
 8005eb0:	e004      	b.n	8005ebc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b70      	cmp	r3, #112	; 0x70
 8005eb6:	d101      	bne.n	8005ebc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005eb8:	2301      	movs	r3, #1
 8005eba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005ebc:	4b0b      	ldr	r3, [pc, #44]	; (8005eec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f023 0207 	bic.w	r2, r3, #7
 8005ec4:	4909      	ldr	r1, [pc, #36]	; (8005eec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005ecc:	4b07      	ldr	r3, [pc, #28]	; (8005eec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0307 	and.w	r3, r3, #7
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d001      	beq.n	8005ede <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e000      	b.n	8005ee0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3718      	adds	r7, #24
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	40021000 	.word	0x40021000
 8005eec:	40022000 	.word	0x40022000

08005ef0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ef8:	2300      	movs	r3, #0
 8005efa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005efc:	2300      	movs	r3, #0
 8005efe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d041      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f14:	d02a      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005f16:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f1a:	d824      	bhi.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005f1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f20:	d008      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005f22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f26:	d81e      	bhi.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00a      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005f2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f30:	d010      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005f32:	e018      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005f34:	4b86      	ldr	r3, [pc, #536]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	4a85      	ldr	r2, [pc, #532]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f3e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f40:	e015      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	3304      	adds	r3, #4
 8005f46:	2100      	movs	r1, #0
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 fabb 	bl	80064c4 <RCCEx_PLLSAI1_Config>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f52:	e00c      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	3320      	adds	r3, #32
 8005f58:	2100      	movs	r1, #0
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 fba6 	bl	80066ac <RCCEx_PLLSAI2_Config>
 8005f60:	4603      	mov	r3, r0
 8005f62:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f64:	e003      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	74fb      	strb	r3, [r7, #19]
      break;
 8005f6a:	e000      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005f6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f6e:	7cfb      	ldrb	r3, [r7, #19]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10b      	bne.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f74:	4b76      	ldr	r3, [pc, #472]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f82:	4973      	ldr	r1, [pc, #460]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005f8a:	e001      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f8c:	7cfb      	ldrb	r3, [r7, #19]
 8005f8e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d041      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fa0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005fa4:	d02a      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005fa6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005faa:	d824      	bhi.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005fac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fb0:	d008      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005fb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fb6:	d81e      	bhi.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00a      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005fc0:	d010      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005fc2:	e018      	b.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005fc4:	4b62      	ldr	r3, [pc, #392]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	4a61      	ldr	r2, [pc, #388]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005fd0:	e015      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	3304      	adds	r3, #4
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f000 fa73 	bl	80064c4 <RCCEx_PLLSAI1_Config>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005fe2:	e00c      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	3320      	adds	r3, #32
 8005fe8:	2100      	movs	r1, #0
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 fb5e 	bl	80066ac <RCCEx_PLLSAI2_Config>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ff4:	e003      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	74fb      	strb	r3, [r7, #19]
      break;
 8005ffa:	e000      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005ffc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ffe:	7cfb      	ldrb	r3, [r7, #19]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10b      	bne.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006004:	4b52      	ldr	r3, [pc, #328]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800600a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006012:	494f      	ldr	r1, [pc, #316]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006014:	4313      	orrs	r3, r2
 8006016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800601a:	e001      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800601c:	7cfb      	ldrb	r3, [r7, #19]
 800601e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 80a0 	beq.w	800616e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800602e:	2300      	movs	r3, #0
 8006030:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006032:	4b47      	ldr	r3, [pc, #284]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800603e:	2301      	movs	r3, #1
 8006040:	e000      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006042:	2300      	movs	r3, #0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00d      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006048:	4b41      	ldr	r3, [pc, #260]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800604a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800604c:	4a40      	ldr	r2, [pc, #256]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800604e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006052:	6593      	str	r3, [r2, #88]	; 0x58
 8006054:	4b3e      	ldr	r3, [pc, #248]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800605c:	60bb      	str	r3, [r7, #8]
 800605e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006060:	2301      	movs	r3, #1
 8006062:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006064:	4b3b      	ldr	r3, [pc, #236]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a3a      	ldr	r2, [pc, #232]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800606a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800606e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006070:	f7fd f850 	bl	8003114 <HAL_GetTick>
 8006074:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006076:	e009      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006078:	f7fd f84c 	bl	8003114 <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	2b02      	cmp	r3, #2
 8006084:	d902      	bls.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	74fb      	strb	r3, [r7, #19]
        break;
 800608a:	e005      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800608c:	4b31      	ldr	r3, [pc, #196]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006094:	2b00      	cmp	r3, #0
 8006096:	d0ef      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006098:	7cfb      	ldrb	r3, [r7, #19]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d15c      	bne.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800609e:	4b2c      	ldr	r3, [pc, #176]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d01f      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d019      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060bc:	4b24      	ldr	r3, [pc, #144]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060c8:	4b21      	ldr	r3, [pc, #132]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ce:	4a20      	ldr	r2, [pc, #128]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060d8:	4b1d      	ldr	r3, [pc, #116]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060de:	4a1c      	ldr	r2, [pc, #112]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060e8:	4a19      	ldr	r2, [pc, #100]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d016      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060fa:	f7fd f80b 	bl	8003114 <HAL_GetTick>
 80060fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006100:	e00b      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006102:	f7fd f807 	bl	8003114 <HAL_GetTick>
 8006106:	4602      	mov	r2, r0
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006110:	4293      	cmp	r3, r2
 8006112:	d902      	bls.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	74fb      	strb	r3, [r7, #19]
            break;
 8006118:	e006      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800611a:	4b0d      	ldr	r3, [pc, #52]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800611c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006120:	f003 0302 	and.w	r3, r3, #2
 8006124:	2b00      	cmp	r3, #0
 8006126:	d0ec      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006128:	7cfb      	ldrb	r3, [r7, #19]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10c      	bne.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800612e:	4b08      	ldr	r3, [pc, #32]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006134:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800613e:	4904      	ldr	r1, [pc, #16]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006140:	4313      	orrs	r3, r2
 8006142:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006146:	e009      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006148:	7cfb      	ldrb	r3, [r7, #19]
 800614a:	74bb      	strb	r3, [r7, #18]
 800614c:	e006      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800614e:	bf00      	nop
 8006150:	40021000 	.word	0x40021000
 8006154:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006158:	7cfb      	ldrb	r3, [r7, #19]
 800615a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800615c:	7c7b      	ldrb	r3, [r7, #17]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d105      	bne.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006162:	4b9e      	ldr	r3, [pc, #632]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006166:	4a9d      	ldr	r2, [pc, #628]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800616c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0301 	and.w	r3, r3, #1
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00a      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800617a:	4b98      	ldr	r3, [pc, #608]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800617c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006180:	f023 0203 	bic.w	r2, r3, #3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006188:	4994      	ldr	r1, [pc, #592]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800618a:	4313      	orrs	r3, r2
 800618c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0302 	and.w	r3, r3, #2
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00a      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800619c:	4b8f      	ldr	r3, [pc, #572]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800619e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a2:	f023 020c 	bic.w	r2, r3, #12
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061aa:	498c      	ldr	r1, [pc, #560]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0304 	and.w	r3, r3, #4
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00a      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061be:	4b87      	ldr	r3, [pc, #540]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061cc:	4983      	ldr	r1, [pc, #524]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0308 	and.w	r3, r3, #8
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00a      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80061e0:	4b7e      	ldr	r3, [pc, #504]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ee:	497b      	ldr	r1, [pc, #492]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0310 	and.w	r3, r3, #16
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00a      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006202:	4b76      	ldr	r3, [pc, #472]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006208:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006210:	4972      	ldr	r1, [pc, #456]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006212:	4313      	orrs	r3, r2
 8006214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0320 	and.w	r3, r3, #32
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00a      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006224:	4b6d      	ldr	r3, [pc, #436]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800622a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006232:	496a      	ldr	r1, [pc, #424]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006234:	4313      	orrs	r3, r2
 8006236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00a      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006246:	4b65      	ldr	r3, [pc, #404]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800624c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006254:	4961      	ldr	r1, [pc, #388]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006256:	4313      	orrs	r3, r2
 8006258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00a      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006268:	4b5c      	ldr	r3, [pc, #368]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800626a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800626e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006276:	4959      	ldr	r1, [pc, #356]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006278:	4313      	orrs	r3, r2
 800627a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00a      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800628a:	4b54      	ldr	r3, [pc, #336]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800628c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006290:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006298:	4950      	ldr	r1, [pc, #320]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800629a:	4313      	orrs	r3, r2
 800629c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00a      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80062ac:	4b4b      	ldr	r3, [pc, #300]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ba:	4948      	ldr	r1, [pc, #288]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00a      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80062ce:	4b43      	ldr	r3, [pc, #268]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062dc:	493f      	ldr	r1, [pc, #252]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d028      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062f0:	4b3a      	ldr	r3, [pc, #232]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062fe:	4937      	ldr	r1, [pc, #220]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006300:	4313      	orrs	r3, r2
 8006302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800630a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800630e:	d106      	bne.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006310:	4b32      	ldr	r3, [pc, #200]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	4a31      	ldr	r2, [pc, #196]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006316:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800631a:	60d3      	str	r3, [r2, #12]
 800631c:	e011      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006322:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006326:	d10c      	bne.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	3304      	adds	r3, #4
 800632c:	2101      	movs	r1, #1
 800632e:	4618      	mov	r0, r3
 8006330:	f000 f8c8 	bl	80064c4 <RCCEx_PLLSAI1_Config>
 8006334:	4603      	mov	r3, r0
 8006336:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006338:	7cfb      	ldrb	r3, [r7, #19]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800633e:	7cfb      	ldrb	r3, [r7, #19]
 8006340:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d028      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800634e:	4b23      	ldr	r3, [pc, #140]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006354:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800635c:	491f      	ldr	r1, [pc, #124]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800635e:	4313      	orrs	r3, r2
 8006360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006368:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800636c:	d106      	bne.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800636e:	4b1b      	ldr	r3, [pc, #108]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	4a1a      	ldr	r2, [pc, #104]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006374:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006378:	60d3      	str	r3, [r2, #12]
 800637a:	e011      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006380:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006384:	d10c      	bne.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	3304      	adds	r3, #4
 800638a:	2101      	movs	r1, #1
 800638c:	4618      	mov	r0, r3
 800638e:	f000 f899 	bl	80064c4 <RCCEx_PLLSAI1_Config>
 8006392:	4603      	mov	r3, r0
 8006394:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006396:	7cfb      	ldrb	r3, [r7, #19]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800639c:	7cfb      	ldrb	r3, [r7, #19]
 800639e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d02b      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80063ac:	4b0b      	ldr	r3, [pc, #44]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063ba:	4908      	ldr	r1, [pc, #32]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063bc:	4313      	orrs	r3, r2
 80063be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063ca:	d109      	bne.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063cc:	4b03      	ldr	r3, [pc, #12]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	4a02      	ldr	r2, [pc, #8]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063d6:	60d3      	str	r3, [r2, #12]
 80063d8:	e014      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80063da:	bf00      	nop
 80063dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063e8:	d10c      	bne.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	3304      	adds	r3, #4
 80063ee:	2101      	movs	r1, #1
 80063f0:	4618      	mov	r0, r3
 80063f2:	f000 f867 	bl	80064c4 <RCCEx_PLLSAI1_Config>
 80063f6:	4603      	mov	r3, r0
 80063f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80063fa:	7cfb      	ldrb	r3, [r7, #19]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d001      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006400:	7cfb      	ldrb	r3, [r7, #19]
 8006402:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d02f      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006410:	4b2b      	ldr	r3, [pc, #172]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006416:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800641e:	4928      	ldr	r1, [pc, #160]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006420:	4313      	orrs	r3, r2
 8006422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800642a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800642e:	d10d      	bne.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	3304      	adds	r3, #4
 8006434:	2102      	movs	r1, #2
 8006436:	4618      	mov	r0, r3
 8006438:	f000 f844 	bl	80064c4 <RCCEx_PLLSAI1_Config>
 800643c:	4603      	mov	r3, r0
 800643e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006440:	7cfb      	ldrb	r3, [r7, #19]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d014      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006446:	7cfb      	ldrb	r3, [r7, #19]
 8006448:	74bb      	strb	r3, [r7, #18]
 800644a:	e011      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006454:	d10c      	bne.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	3320      	adds	r3, #32
 800645a:	2102      	movs	r1, #2
 800645c:	4618      	mov	r0, r3
 800645e:	f000 f925 	bl	80066ac <RCCEx_PLLSAI2_Config>
 8006462:	4603      	mov	r3, r0
 8006464:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006466:	7cfb      	ldrb	r3, [r7, #19]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800646c:	7cfb      	ldrb	r3, [r7, #19]
 800646e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00a      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800647c:	4b10      	ldr	r3, [pc, #64]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800647e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006482:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800648a:	490d      	ldr	r1, [pc, #52]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800648c:	4313      	orrs	r3, r2
 800648e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00b      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800649e:	4b08      	ldr	r3, [pc, #32]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80064a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064ae:	4904      	ldr	r1, [pc, #16]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80064b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3718      	adds	r7, #24
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	40021000 	.word	0x40021000

080064c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80064d2:	4b75      	ldr	r3, [pc, #468]	; (80066a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	f003 0303 	and.w	r3, r3, #3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d018      	beq.n	8006510 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80064de:	4b72      	ldr	r3, [pc, #456]	; (80066a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	f003 0203 	and.w	r2, r3, #3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d10d      	bne.n	800650a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
       ||
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d009      	beq.n	800650a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80064f6:	4b6c      	ldr	r3, [pc, #432]	; (80066a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	091b      	lsrs	r3, r3, #4
 80064fc:	f003 0307 	and.w	r3, r3, #7
 8006500:	1c5a      	adds	r2, r3, #1
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
       ||
 8006506:	429a      	cmp	r2, r3
 8006508:	d047      	beq.n	800659a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	73fb      	strb	r3, [r7, #15]
 800650e:	e044      	b.n	800659a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b03      	cmp	r3, #3
 8006516:	d018      	beq.n	800654a <RCCEx_PLLSAI1_Config+0x86>
 8006518:	2b03      	cmp	r3, #3
 800651a:	d825      	bhi.n	8006568 <RCCEx_PLLSAI1_Config+0xa4>
 800651c:	2b01      	cmp	r3, #1
 800651e:	d002      	beq.n	8006526 <RCCEx_PLLSAI1_Config+0x62>
 8006520:	2b02      	cmp	r3, #2
 8006522:	d009      	beq.n	8006538 <RCCEx_PLLSAI1_Config+0x74>
 8006524:	e020      	b.n	8006568 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006526:	4b60      	ldr	r3, [pc, #384]	; (80066a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d11d      	bne.n	800656e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006536:	e01a      	b.n	800656e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006538:	4b5b      	ldr	r3, [pc, #364]	; (80066a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006540:	2b00      	cmp	r3, #0
 8006542:	d116      	bne.n	8006572 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006548:	e013      	b.n	8006572 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800654a:	4b57      	ldr	r3, [pc, #348]	; (80066a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10f      	bne.n	8006576 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006556:	4b54      	ldr	r3, [pc, #336]	; (80066a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d109      	bne.n	8006576 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006566:	e006      	b.n	8006576 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	73fb      	strb	r3, [r7, #15]
      break;
 800656c:	e004      	b.n	8006578 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800656e:	bf00      	nop
 8006570:	e002      	b.n	8006578 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006572:	bf00      	nop
 8006574:	e000      	b.n	8006578 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006576:	bf00      	nop
    }

    if(status == HAL_OK)
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10d      	bne.n	800659a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800657e:	4b4a      	ldr	r3, [pc, #296]	; (80066a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6819      	ldr	r1, [r3, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	3b01      	subs	r3, #1
 8006590:	011b      	lsls	r3, r3, #4
 8006592:	430b      	orrs	r3, r1
 8006594:	4944      	ldr	r1, [pc, #272]	; (80066a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006596:	4313      	orrs	r3, r2
 8006598:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800659a:	7bfb      	ldrb	r3, [r7, #15]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d17d      	bne.n	800669c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80065a0:	4b41      	ldr	r3, [pc, #260]	; (80066a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a40      	ldr	r2, [pc, #256]	; (80066a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80065aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065ac:	f7fc fdb2 	bl	8003114 <HAL_GetTick>
 80065b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80065b2:	e009      	b.n	80065c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065b4:	f7fc fdae 	bl	8003114 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d902      	bls.n	80065c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	73fb      	strb	r3, [r7, #15]
        break;
 80065c6:	e005      	b.n	80065d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80065c8:	4b37      	ldr	r3, [pc, #220]	; (80066a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1ef      	bne.n	80065b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80065d4:	7bfb      	ldrb	r3, [r7, #15]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d160      	bne.n	800669c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d111      	bne.n	8006604 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065e0:	4b31      	ldr	r3, [pc, #196]	; (80066a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80065e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	6892      	ldr	r2, [r2, #8]
 80065f0:	0211      	lsls	r1, r2, #8
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	68d2      	ldr	r2, [r2, #12]
 80065f6:	0912      	lsrs	r2, r2, #4
 80065f8:	0452      	lsls	r2, r2, #17
 80065fa:	430a      	orrs	r2, r1
 80065fc:	492a      	ldr	r1, [pc, #168]	; (80066a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	610b      	str	r3, [r1, #16]
 8006602:	e027      	b.n	8006654 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d112      	bne.n	8006630 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800660a:	4b27      	ldr	r3, [pc, #156]	; (80066a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006612:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	6892      	ldr	r2, [r2, #8]
 800661a:	0211      	lsls	r1, r2, #8
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	6912      	ldr	r2, [r2, #16]
 8006620:	0852      	lsrs	r2, r2, #1
 8006622:	3a01      	subs	r2, #1
 8006624:	0552      	lsls	r2, r2, #21
 8006626:	430a      	orrs	r2, r1
 8006628:	491f      	ldr	r1, [pc, #124]	; (80066a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800662a:	4313      	orrs	r3, r2
 800662c:	610b      	str	r3, [r1, #16]
 800662e:	e011      	b.n	8006654 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006630:	4b1d      	ldr	r3, [pc, #116]	; (80066a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006638:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	6892      	ldr	r2, [r2, #8]
 8006640:	0211      	lsls	r1, r2, #8
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	6952      	ldr	r2, [r2, #20]
 8006646:	0852      	lsrs	r2, r2, #1
 8006648:	3a01      	subs	r2, #1
 800664a:	0652      	lsls	r2, r2, #25
 800664c:	430a      	orrs	r2, r1
 800664e:	4916      	ldr	r1, [pc, #88]	; (80066a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006650:	4313      	orrs	r3, r2
 8006652:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006654:	4b14      	ldr	r3, [pc, #80]	; (80066a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a13      	ldr	r2, [pc, #76]	; (80066a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800665a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800665e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006660:	f7fc fd58 	bl	8003114 <HAL_GetTick>
 8006664:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006666:	e009      	b.n	800667c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006668:	f7fc fd54 	bl	8003114 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	2b02      	cmp	r3, #2
 8006674:	d902      	bls.n	800667c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	73fb      	strb	r3, [r7, #15]
          break;
 800667a:	e005      	b.n	8006688 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800667c:	4b0a      	ldr	r3, [pc, #40]	; (80066a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d0ef      	beq.n	8006668 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006688:	7bfb      	ldrb	r3, [r7, #15]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d106      	bne.n	800669c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800668e:	4b06      	ldr	r3, [pc, #24]	; (80066a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006690:	691a      	ldr	r2, [r3, #16]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	4904      	ldr	r1, [pc, #16]	; (80066a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006698:	4313      	orrs	r3, r2
 800669a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800669c:	7bfb      	ldrb	r3, [r7, #15]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	40021000 	.word	0x40021000

080066ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066b6:	2300      	movs	r3, #0
 80066b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80066ba:	4b6a      	ldr	r3, [pc, #424]	; (8006864 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	f003 0303 	and.w	r3, r3, #3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d018      	beq.n	80066f8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80066c6:	4b67      	ldr	r3, [pc, #412]	; (8006864 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	f003 0203 	and.w	r2, r3, #3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d10d      	bne.n	80066f2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
       ||
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d009      	beq.n	80066f2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80066de:	4b61      	ldr	r3, [pc, #388]	; (8006864 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	091b      	lsrs	r3, r3, #4
 80066e4:	f003 0307 	and.w	r3, r3, #7
 80066e8:	1c5a      	adds	r2, r3, #1
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
       ||
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d047      	beq.n	8006782 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	73fb      	strb	r3, [r7, #15]
 80066f6:	e044      	b.n	8006782 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b03      	cmp	r3, #3
 80066fe:	d018      	beq.n	8006732 <RCCEx_PLLSAI2_Config+0x86>
 8006700:	2b03      	cmp	r3, #3
 8006702:	d825      	bhi.n	8006750 <RCCEx_PLLSAI2_Config+0xa4>
 8006704:	2b01      	cmp	r3, #1
 8006706:	d002      	beq.n	800670e <RCCEx_PLLSAI2_Config+0x62>
 8006708:	2b02      	cmp	r3, #2
 800670a:	d009      	beq.n	8006720 <RCCEx_PLLSAI2_Config+0x74>
 800670c:	e020      	b.n	8006750 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800670e:	4b55      	ldr	r3, [pc, #340]	; (8006864 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0302 	and.w	r3, r3, #2
 8006716:	2b00      	cmp	r3, #0
 8006718:	d11d      	bne.n	8006756 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800671e:	e01a      	b.n	8006756 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006720:	4b50      	ldr	r3, [pc, #320]	; (8006864 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006728:	2b00      	cmp	r3, #0
 800672a:	d116      	bne.n	800675a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006730:	e013      	b.n	800675a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006732:	4b4c      	ldr	r3, [pc, #304]	; (8006864 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10f      	bne.n	800675e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800673e:	4b49      	ldr	r3, [pc, #292]	; (8006864 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d109      	bne.n	800675e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800674e:	e006      	b.n	800675e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	73fb      	strb	r3, [r7, #15]
      break;
 8006754:	e004      	b.n	8006760 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006756:	bf00      	nop
 8006758:	e002      	b.n	8006760 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800675a:	bf00      	nop
 800675c:	e000      	b.n	8006760 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800675e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006760:	7bfb      	ldrb	r3, [r7, #15]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10d      	bne.n	8006782 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006766:	4b3f      	ldr	r3, [pc, #252]	; (8006864 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6819      	ldr	r1, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	3b01      	subs	r3, #1
 8006778:	011b      	lsls	r3, r3, #4
 800677a:	430b      	orrs	r3, r1
 800677c:	4939      	ldr	r1, [pc, #228]	; (8006864 <RCCEx_PLLSAI2_Config+0x1b8>)
 800677e:	4313      	orrs	r3, r2
 8006780:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006782:	7bfb      	ldrb	r3, [r7, #15]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d167      	bne.n	8006858 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006788:	4b36      	ldr	r3, [pc, #216]	; (8006864 <RCCEx_PLLSAI2_Config+0x1b8>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a35      	ldr	r2, [pc, #212]	; (8006864 <RCCEx_PLLSAI2_Config+0x1b8>)
 800678e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006792:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006794:	f7fc fcbe 	bl	8003114 <HAL_GetTick>
 8006798:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800679a:	e009      	b.n	80067b0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800679c:	f7fc fcba 	bl	8003114 <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d902      	bls.n	80067b0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	73fb      	strb	r3, [r7, #15]
        break;
 80067ae:	e005      	b.n	80067bc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80067b0:	4b2c      	ldr	r3, [pc, #176]	; (8006864 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1ef      	bne.n	800679c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80067bc:	7bfb      	ldrb	r3, [r7, #15]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d14a      	bne.n	8006858 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d111      	bne.n	80067ec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80067c8:	4b26      	ldr	r3, [pc, #152]	; (8006864 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80067d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	6892      	ldr	r2, [r2, #8]
 80067d8:	0211      	lsls	r1, r2, #8
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	68d2      	ldr	r2, [r2, #12]
 80067de:	0912      	lsrs	r2, r2, #4
 80067e0:	0452      	lsls	r2, r2, #17
 80067e2:	430a      	orrs	r2, r1
 80067e4:	491f      	ldr	r1, [pc, #124]	; (8006864 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	614b      	str	r3, [r1, #20]
 80067ea:	e011      	b.n	8006810 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80067ec:	4b1d      	ldr	r3, [pc, #116]	; (8006864 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80067f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	6892      	ldr	r2, [r2, #8]
 80067fc:	0211      	lsls	r1, r2, #8
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	6912      	ldr	r2, [r2, #16]
 8006802:	0852      	lsrs	r2, r2, #1
 8006804:	3a01      	subs	r2, #1
 8006806:	0652      	lsls	r2, r2, #25
 8006808:	430a      	orrs	r2, r1
 800680a:	4916      	ldr	r1, [pc, #88]	; (8006864 <RCCEx_PLLSAI2_Config+0x1b8>)
 800680c:	4313      	orrs	r3, r2
 800680e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006810:	4b14      	ldr	r3, [pc, #80]	; (8006864 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a13      	ldr	r2, [pc, #76]	; (8006864 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800681a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800681c:	f7fc fc7a 	bl	8003114 <HAL_GetTick>
 8006820:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006822:	e009      	b.n	8006838 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006824:	f7fc fc76 	bl	8003114 <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	2b02      	cmp	r3, #2
 8006830:	d902      	bls.n	8006838 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	73fb      	strb	r3, [r7, #15]
          break;
 8006836:	e005      	b.n	8006844 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006838:	4b0a      	ldr	r3, [pc, #40]	; (8006864 <RCCEx_PLLSAI2_Config+0x1b8>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d0ef      	beq.n	8006824 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006844:	7bfb      	ldrb	r3, [r7, #15]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d106      	bne.n	8006858 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800684a:	4b06      	ldr	r3, [pc, #24]	; (8006864 <RCCEx_PLLSAI2_Config+0x1b8>)
 800684c:	695a      	ldr	r2, [r3, #20]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	4904      	ldr	r1, [pc, #16]	; (8006864 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006854:	4313      	orrs	r3, r2
 8006856:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006858:	7bfb      	ldrb	r3, [r7, #15]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	40021000 	.word	0x40021000

08006868 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d101      	bne.n	800687a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e040      	b.n	80068fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800687e:	2b00      	cmp	r3, #0
 8006880:	d106      	bne.n	8006890 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f7fc fa04 	bl	8002c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2224      	movs	r2, #36	; 0x24
 8006894:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f022 0201 	bic.w	r2, r2, #1
 80068a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fd12 	bl	80072d0 <UART_SetConfig>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d101      	bne.n	80068b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e022      	b.n	80068fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d002      	beq.n	80068c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 ffbe 	bl	8007840 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685a      	ldr	r2, [r3, #4]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	689a      	ldr	r2, [r3, #8]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f042 0201 	orr.w	r2, r2, #1
 80068f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f001 f845 	bl	8007984 <UART_CheckIdleState>
 80068fa:	4603      	mov	r3, r0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3708      	adds	r7, #8
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e048      	b.n	80069a8 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800691a:	2b00      	cmp	r3, #0
 800691c:	d106      	bne.n	800692c <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7fc f9b6 	bl	8002c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2224      	movs	r2, #36	; 0x24
 8006930:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f022 0201 	bic.w	r2, r2, #1
 8006940:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 fcc4 	bl	80072d0 <UART_SetConfig>
 8006948:	4603      	mov	r3, r0
 800694a:	2b01      	cmp	r3, #1
 800694c:	d101      	bne.n	8006952 <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e02a      	b.n	80069a8 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006956:	2b00      	cmp	r3, #0
 8006958:	d002      	beq.n	8006960 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 ff70 	bl	8007840 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685a      	ldr	r2, [r3, #4]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800696e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	689a      	ldr	r2, [r3, #8]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800697e:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	689a      	ldr	r2, [r3, #8]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f042 0208 	orr.w	r2, r2, #8
 800698e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f042 0201 	orr.w	r2, r2, #1
 800699e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 ffef 	bl	8007984 <UART_CheckIdleState>
 80069a6:	4603      	mov	r3, r0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b08a      	sub	sp, #40	; 0x28
 80069b4:	af02      	add	r7, sp, #8
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	603b      	str	r3, [r7, #0]
 80069bc:	4613      	mov	r3, r2
 80069be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069c4:	2b20      	cmp	r3, #32
 80069c6:	f040 8082 	bne.w	8006ace <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d002      	beq.n	80069d6 <HAL_UART_Transmit+0x26>
 80069d0:	88fb      	ldrh	r3, [r7, #6]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e07a      	b.n	8006ad0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d101      	bne.n	80069e8 <HAL_UART_Transmit+0x38>
 80069e4:	2302      	movs	r3, #2
 80069e6:	e073      	b.n	8006ad0 <HAL_UART_Transmit+0x120>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2221      	movs	r2, #33	; 0x21
 80069fc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069fe:	f7fc fb89 	bl	8003114 <HAL_GetTick>
 8006a02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	88fa      	ldrh	r2, [r7, #6]
 8006a08:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	88fa      	ldrh	r2, [r7, #6]
 8006a10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a1c:	d108      	bne.n	8006a30 <HAL_UART_Transmit+0x80>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d104      	bne.n	8006a30 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006a26:	2300      	movs	r3, #0
 8006a28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	61bb      	str	r3, [r7, #24]
 8006a2e:	e003      	b.n	8006a38 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a34:	2300      	movs	r3, #0
 8006a36:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006a40:	e02d      	b.n	8006a9e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	2180      	movs	r1, #128	; 0x80
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f000 ffe2 	bl	8007a16 <UART_WaitOnFlagUntilTimeout>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d001      	beq.n	8006a5c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e039      	b.n	8006ad0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10b      	bne.n	8006a7a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	881a      	ldrh	r2, [r3, #0]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a6e:	b292      	uxth	r2, r2
 8006a70:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	3302      	adds	r3, #2
 8006a76:	61bb      	str	r3, [r7, #24]
 8006a78:	e008      	b.n	8006a8c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	781a      	ldrb	r2, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	b292      	uxth	r2, r2
 8006a84:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	3b01      	subs	r3, #1
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1cb      	bne.n	8006a42 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	2140      	movs	r1, #64	; 0x40
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 ffae 	bl	8007a16 <UART_WaitOnFlagUntilTimeout>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e005      	b.n	8006ad0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2220      	movs	r2, #32
 8006ac8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006aca:	2300      	movs	r3, #0
 8006acc:	e000      	b.n	8006ad0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006ace:	2302      	movs	r3, #2
  }
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3720      	adds	r7, #32
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b08a      	sub	sp, #40	; 0x28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006aea:	2b20      	cmp	r3, #32
 8006aec:	d142      	bne.n	8006b74 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d002      	beq.n	8006afa <HAL_UART_Receive_IT+0x22>
 8006af4:	88fb      	ldrh	r3, [r7, #6]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e03b      	b.n	8006b76 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d101      	bne.n	8006b0c <HAL_UART_Receive_IT+0x34>
 8006b08:	2302      	movs	r3, #2
 8006b0a:	e034      	b.n	8006b76 <HAL_UART_Receive_IT+0x9e>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a18      	ldr	r2, [pc, #96]	; (8006b80 <HAL_UART_Receive_IT+0xa8>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d01f      	beq.n	8006b64 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d018      	beq.n	8006b64 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	e853 3f00 	ldrex	r3, [r3]
 8006b3e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b46:	627b      	str	r3, [r7, #36]	; 0x24
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b50:	623b      	str	r3, [r7, #32]
 8006b52:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b54:	69f9      	ldr	r1, [r7, #28]
 8006b56:	6a3a      	ldr	r2, [r7, #32]
 8006b58:	e841 2300 	strex	r3, r2, [r1]
 8006b5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1e6      	bne.n	8006b32 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006b64:	88fb      	ldrh	r3, [r7, #6]
 8006b66:	461a      	mov	r2, r3
 8006b68:	68b9      	ldr	r1, [r7, #8]
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f001 f818 	bl	8007ba0 <UART_Start_Receive_IT>
 8006b70:	4603      	mov	r3, r0
 8006b72:	e000      	b.n	8006b76 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006b74:	2302      	movs	r3, #2
  }
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3728      	adds	r7, #40	; 0x28
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	40008000 	.word	0x40008000

08006b84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b0ba      	sub	sp, #232	; 0xe8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006baa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006bae:	f640 030f 	movw	r3, #2063	; 0x80f
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006bb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d115      	bne.n	8006bec <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc4:	f003 0320 	and.w	r3, r3, #32
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00f      	beq.n	8006bec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bd0:	f003 0320 	and.w	r3, r3, #32
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d009      	beq.n	8006bec <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f000 82a6 	beq.w	800712e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	4798      	blx	r3
      }
      return;
 8006bea:	e2a0      	b.n	800712e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006bec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 8117 	beq.w	8006e24 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006bf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d106      	bne.n	8006c10 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006c02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006c06:	4b85      	ldr	r3, [pc, #532]	; (8006e1c <HAL_UART_IRQHandler+0x298>)
 8006c08:	4013      	ands	r3, r2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 810a 	beq.w	8006e24 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c14:	f003 0301 	and.w	r3, r3, #1
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d011      	beq.n	8006c40 <HAL_UART_IRQHandler+0xbc>
 8006c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00b      	beq.n	8006c40 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c36:	f043 0201 	orr.w	r2, r3, #1
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c44:	f003 0302 	and.w	r3, r3, #2
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d011      	beq.n	8006c70 <HAL_UART_IRQHandler+0xec>
 8006c4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00b      	beq.n	8006c70 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2202      	movs	r2, #2
 8006c5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c66:	f043 0204 	orr.w	r2, r3, #4
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c74:	f003 0304 	and.w	r3, r3, #4
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d011      	beq.n	8006ca0 <HAL_UART_IRQHandler+0x11c>
 8006c7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c80:	f003 0301 	and.w	r3, r3, #1
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00b      	beq.n	8006ca0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2204      	movs	r2, #4
 8006c8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c96:	f043 0202 	orr.w	r2, r3, #2
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ca4:	f003 0308 	and.w	r3, r3, #8
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d017      	beq.n	8006cdc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cb0:	f003 0320 	and.w	r3, r3, #32
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d105      	bne.n	8006cc4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006cb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cbc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00b      	beq.n	8006cdc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2208      	movs	r2, #8
 8006cca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cd2:	f043 0208 	orr.w	r2, r3, #8
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d012      	beq.n	8006d0e <HAL_UART_IRQHandler+0x18a>
 8006ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00c      	beq.n	8006d0e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d04:	f043 0220 	orr.w	r2, r3, #32
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 820c 	beq.w	8007132 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d1e:	f003 0320 	and.w	r3, r3, #32
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00d      	beq.n	8006d42 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d2a:	f003 0320 	and.w	r3, r3, #32
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d007      	beq.n	8006d42 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d003      	beq.n	8006d42 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d56:	2b40      	cmp	r3, #64	; 0x40
 8006d58:	d005      	beq.n	8006d66 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d04f      	beq.n	8006e06 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 ffe4 	bl	8007d34 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d76:	2b40      	cmp	r3, #64	; 0x40
 8006d78:	d141      	bne.n	8006dfe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	3308      	adds	r3, #8
 8006d80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d88:	e853 3f00 	ldrex	r3, [r3]
 8006d8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	3308      	adds	r3, #8
 8006da2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006da6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006daa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006db2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006db6:	e841 2300 	strex	r3, r2, [r1]
 8006dba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006dbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1d9      	bne.n	8006d7a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d013      	beq.n	8006df6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd2:	4a13      	ldr	r2, [pc, #76]	; (8006e20 <HAL_UART_IRQHandler+0x29c>)
 8006dd4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7fd ff2a 	bl	8004c34 <HAL_DMA_Abort_IT>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d017      	beq.n	8006e16 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006df0:	4610      	mov	r0, r2
 8006df2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006df4:	e00f      	b.n	8006e16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f9b0 	bl	800715c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dfc:	e00b      	b.n	8006e16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f9ac 	bl	800715c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e04:	e007      	b.n	8006e16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f9a8 	bl	800715c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006e14:	e18d      	b.n	8007132 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e16:	bf00      	nop
    return;
 8006e18:	e18b      	b.n	8007132 <HAL_UART_IRQHandler+0x5ae>
 8006e1a:	bf00      	nop
 8006e1c:	04000120 	.word	0x04000120
 8006e20:	08007dfb 	.word	0x08007dfb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	f040 8146 	bne.w	80070ba <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e32:	f003 0310 	and.w	r3, r3, #16
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	f000 813f 	beq.w	80070ba <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e40:	f003 0310 	and.w	r3, r3, #16
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f000 8138 	beq.w	80070ba <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2210      	movs	r2, #16
 8006e50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e5c:	2b40      	cmp	r3, #64	; 0x40
 8006e5e:	f040 80b4 	bne.w	8006fca <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e6e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f000 815f 	beq.w	8007136 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e82:	429a      	cmp	r2, r3
 8006e84:	f080 8157 	bcs.w	8007136 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0320 	and.w	r3, r3, #32
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f040 8085 	bne.w	8006fae <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006eb0:	e853 3f00 	ldrex	r3, [r3]
 8006eb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006eb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ec0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ece:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006ed2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006eda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ede:	e841 2300 	strex	r3, r2, [r1]
 8006ee2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006ee6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1da      	bne.n	8006ea4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	3308      	adds	r3, #8
 8006ef4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ef8:	e853 3f00 	ldrex	r3, [r3]
 8006efc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006efe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f00:	f023 0301 	bic.w	r3, r3, #1
 8006f04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	3308      	adds	r3, #8
 8006f0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f1e:	e841 2300 	strex	r3, r2, [r1]
 8006f22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1e1      	bne.n	8006eee <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	3308      	adds	r3, #8
 8006f30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f34:	e853 3f00 	ldrex	r3, [r3]
 8006f38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	3308      	adds	r3, #8
 8006f4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f56:	e841 2300 	strex	r3, r2, [r1]
 8006f5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1e3      	bne.n	8006f2a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2220      	movs	r2, #32
 8006f66:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f76:	e853 3f00 	ldrex	r3, [r3]
 8006f7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f7e:	f023 0310 	bic.w	r3, r3, #16
 8006f82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f90:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f92:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f98:	e841 2300 	strex	r3, r2, [r1]
 8006f9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1e4      	bne.n	8006f6e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7fd fe05 	bl	8004bb8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 f8d4 	bl	8007170 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006fc8:	e0b5      	b.n	8007136 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f000 80a7 	beq.w	800713a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006fec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 80a2 	beq.w	800713a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffe:	e853 3f00 	ldrex	r3, [r3]
 8007002:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007006:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800700a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	461a      	mov	r2, r3
 8007014:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007018:	647b      	str	r3, [r7, #68]	; 0x44
 800701a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800701e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007020:	e841 2300 	strex	r3, r2, [r1]
 8007024:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1e4      	bne.n	8006ff6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	3308      	adds	r3, #8
 8007032:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007036:	e853 3f00 	ldrex	r3, [r3]
 800703a:	623b      	str	r3, [r7, #32]
   return(result);
 800703c:	6a3b      	ldr	r3, [r7, #32]
 800703e:	f023 0301 	bic.w	r3, r3, #1
 8007042:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3308      	adds	r3, #8
 800704c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007050:	633a      	str	r2, [r7, #48]	; 0x30
 8007052:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007054:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007058:	e841 2300 	strex	r3, r2, [r1]
 800705c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800705e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1e3      	bne.n	800702c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2220      	movs	r2, #32
 8007068:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	e853 3f00 	ldrex	r3, [r3]
 8007082:	60fb      	str	r3, [r7, #12]
   return(result);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f023 0310 	bic.w	r3, r3, #16
 800708a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	461a      	mov	r2, r3
 8007094:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007098:	61fb      	str	r3, [r7, #28]
 800709a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709c:	69b9      	ldr	r1, [r7, #24]
 800709e:	69fa      	ldr	r2, [r7, #28]
 80070a0:	e841 2300 	strex	r3, r2, [r1]
 80070a4:	617b      	str	r3, [r7, #20]
   return(result);
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1e4      	bne.n	8007076 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070b0:	4619      	mov	r1, r3
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f85c 	bl	8007170 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070b8:	e03f      	b.n	800713a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80070ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00e      	beq.n	80070e4 <HAL_UART_IRQHandler+0x560>
 80070c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d008      	beq.n	80070e4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80070da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f001 f82c 	bl	800813a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070e2:	e02d      	b.n	8007140 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80070e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00e      	beq.n	800710e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80070f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d008      	beq.n	800710e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007100:	2b00      	cmp	r3, #0
 8007102:	d01c      	beq.n	800713e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	4798      	blx	r3
    }
    return;
 800710c:	e017      	b.n	800713e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800710e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007116:	2b00      	cmp	r3, #0
 8007118:	d012      	beq.n	8007140 <HAL_UART_IRQHandler+0x5bc>
 800711a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800711e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00c      	beq.n	8007140 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fe7d 	bl	8007e26 <UART_EndTransmit_IT>
    return;
 800712c:	e008      	b.n	8007140 <HAL_UART_IRQHandler+0x5bc>
      return;
 800712e:	bf00      	nop
 8007130:	e006      	b.n	8007140 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007132:	bf00      	nop
 8007134:	e004      	b.n	8007140 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007136:	bf00      	nop
 8007138:	e002      	b.n	8007140 <HAL_UART_IRQHandler+0x5bc>
      return;
 800713a:	bf00      	nop
 800713c:	e000      	b.n	8007140 <HAL_UART_IRQHandler+0x5bc>
    return;
 800713e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007140:	37e8      	adds	r7, #232	; 0xe8
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop

08007148 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007164:	bf00      	nop
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	460b      	mov	r3, r1
 800717a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800717c:	bf00      	nop
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8007188:	b480      	push	{r7}
 800718a:	b08f      	sub	sp, #60	; 0x3c
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007196:	2b01      	cmp	r3, #1
 8007198:	d101      	bne.n	800719e <HAL_HalfDuplex_EnableTransmitter+0x16>
 800719a:	2302      	movs	r3, #2
 800719c:	e040      	b.n	8007220 <HAL_HalfDuplex_EnableTransmitter+0x98>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2224      	movs	r2, #36	; 0x24
 80071aa:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b2:	6a3b      	ldr	r3, [r7, #32]
 80071b4:	e853 3f00 	ldrex	r3, [r3]
 80071b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	f023 030c 	bic.w	r3, r3, #12
 80071c0:	637b      	str	r3, [r7, #52]	; 0x34
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	461a      	mov	r2, r3
 80071c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071cc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071d2:	e841 2300 	strex	r3, r2, [r1]
 80071d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1e6      	bne.n	80071ac <HAL_HalfDuplex_EnableTransmitter+0x24>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	e853 3f00 	ldrex	r3, [r3]
 80071ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	f043 0308 	orr.w	r3, r3, #8
 80071f2:	633b      	str	r3, [r7, #48]	; 0x30
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fc:	61bb      	str	r3, [r7, #24]
 80071fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007200:	6979      	ldr	r1, [r7, #20]
 8007202:	69ba      	ldr	r2, [r7, #24]
 8007204:	e841 2300 	strex	r3, r2, [r1]
 8007208:	613b      	str	r3, [r7, #16]
   return(result);
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1e6      	bne.n	80071de <HAL_HalfDuplex_EnableTransmitter+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2220      	movs	r2, #32
 8007214:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	373c      	adds	r7, #60	; 0x3c
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800722c:	b480      	push	{r7}
 800722e:	b08f      	sub	sp, #60	; 0x3c
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800723a:	2b01      	cmp	r3, #1
 800723c:	d101      	bne.n	8007242 <HAL_HalfDuplex_EnableReceiver+0x16>
 800723e:	2302      	movs	r3, #2
 8007240:	e040      	b.n	80072c4 <HAL_HalfDuplex_EnableReceiver+0x98>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2224      	movs	r2, #36	; 0x24
 800724e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007256:	6a3b      	ldr	r3, [r7, #32]
 8007258:	e853 3f00 	ldrex	r3, [r3]
 800725c:	61fb      	str	r3, [r7, #28]
   return(result);
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	f023 030c 	bic.w	r3, r3, #12
 8007264:	637b      	str	r3, [r7, #52]	; 0x34
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	461a      	mov	r2, r3
 800726c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800726e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007270:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007272:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007276:	e841 2300 	strex	r3, r2, [r1]
 800727a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800727c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1e6      	bne.n	8007250 <HAL_HalfDuplex_EnableReceiver+0x24>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	e853 3f00 	ldrex	r3, [r3]
 800728e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	f043 0304 	orr.w	r3, r3, #4
 8007296:	633b      	str	r3, [r7, #48]	; 0x30
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	461a      	mov	r2, r3
 800729e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a0:	61bb      	str	r3, [r7, #24]
 80072a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a4:	6979      	ldr	r1, [r7, #20]
 80072a6:	69ba      	ldr	r2, [r7, #24]
 80072a8:	e841 2300 	strex	r3, r2, [r1]
 80072ac:	613b      	str	r3, [r7, #16]
   return(result);
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d1e6      	bne.n	8007282 <HAL_HalfDuplex_EnableReceiver+0x56>

  huart->gState = HAL_UART_STATE_READY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2220      	movs	r2, #32
 80072b8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	373c      	adds	r7, #60	; 0x3c
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072d4:	b08a      	sub	sp, #40	; 0x28
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072da:	2300      	movs	r3, #0
 80072dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	689a      	ldr	r2, [r3, #8]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	431a      	orrs	r2, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	431a      	orrs	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	69db      	ldr	r3, [r3, #28]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	4ba4      	ldr	r3, [pc, #656]	; (8007590 <UART_SetConfig+0x2c0>)
 8007300:	4013      	ands	r3, r2
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	6812      	ldr	r2, [r2, #0]
 8007306:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007308:	430b      	orrs	r3, r1
 800730a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	68da      	ldr	r2, [r3, #12]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	430a      	orrs	r2, r1
 8007320:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a99      	ldr	r2, [pc, #612]	; (8007594 <UART_SetConfig+0x2c4>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d004      	beq.n	800733c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6a1b      	ldr	r3, [r3, #32]
 8007336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007338:	4313      	orrs	r3, r2
 800733a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800734c:	430a      	orrs	r2, r1
 800734e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a90      	ldr	r2, [pc, #576]	; (8007598 <UART_SetConfig+0x2c8>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d126      	bne.n	80073a8 <UART_SetConfig+0xd8>
 800735a:	4b90      	ldr	r3, [pc, #576]	; (800759c <UART_SetConfig+0x2cc>)
 800735c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007360:	f003 0303 	and.w	r3, r3, #3
 8007364:	2b03      	cmp	r3, #3
 8007366:	d81b      	bhi.n	80073a0 <UART_SetConfig+0xd0>
 8007368:	a201      	add	r2, pc, #4	; (adr r2, 8007370 <UART_SetConfig+0xa0>)
 800736a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736e:	bf00      	nop
 8007370:	08007381 	.word	0x08007381
 8007374:	08007391 	.word	0x08007391
 8007378:	08007389 	.word	0x08007389
 800737c:	08007399 	.word	0x08007399
 8007380:	2301      	movs	r3, #1
 8007382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007386:	e116      	b.n	80075b6 <UART_SetConfig+0x2e6>
 8007388:	2302      	movs	r3, #2
 800738a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800738e:	e112      	b.n	80075b6 <UART_SetConfig+0x2e6>
 8007390:	2304      	movs	r3, #4
 8007392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007396:	e10e      	b.n	80075b6 <UART_SetConfig+0x2e6>
 8007398:	2308      	movs	r3, #8
 800739a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800739e:	e10a      	b.n	80075b6 <UART_SetConfig+0x2e6>
 80073a0:	2310      	movs	r3, #16
 80073a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073a6:	e106      	b.n	80075b6 <UART_SetConfig+0x2e6>
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a7c      	ldr	r2, [pc, #496]	; (80075a0 <UART_SetConfig+0x2d0>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d138      	bne.n	8007424 <UART_SetConfig+0x154>
 80073b2:	4b7a      	ldr	r3, [pc, #488]	; (800759c <UART_SetConfig+0x2cc>)
 80073b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073b8:	f003 030c 	and.w	r3, r3, #12
 80073bc:	2b0c      	cmp	r3, #12
 80073be:	d82d      	bhi.n	800741c <UART_SetConfig+0x14c>
 80073c0:	a201      	add	r2, pc, #4	; (adr r2, 80073c8 <UART_SetConfig+0xf8>)
 80073c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c6:	bf00      	nop
 80073c8:	080073fd 	.word	0x080073fd
 80073cc:	0800741d 	.word	0x0800741d
 80073d0:	0800741d 	.word	0x0800741d
 80073d4:	0800741d 	.word	0x0800741d
 80073d8:	0800740d 	.word	0x0800740d
 80073dc:	0800741d 	.word	0x0800741d
 80073e0:	0800741d 	.word	0x0800741d
 80073e4:	0800741d 	.word	0x0800741d
 80073e8:	08007405 	.word	0x08007405
 80073ec:	0800741d 	.word	0x0800741d
 80073f0:	0800741d 	.word	0x0800741d
 80073f4:	0800741d 	.word	0x0800741d
 80073f8:	08007415 	.word	0x08007415
 80073fc:	2300      	movs	r3, #0
 80073fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007402:	e0d8      	b.n	80075b6 <UART_SetConfig+0x2e6>
 8007404:	2302      	movs	r3, #2
 8007406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800740a:	e0d4      	b.n	80075b6 <UART_SetConfig+0x2e6>
 800740c:	2304      	movs	r3, #4
 800740e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007412:	e0d0      	b.n	80075b6 <UART_SetConfig+0x2e6>
 8007414:	2308      	movs	r3, #8
 8007416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800741a:	e0cc      	b.n	80075b6 <UART_SetConfig+0x2e6>
 800741c:	2310      	movs	r3, #16
 800741e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007422:	e0c8      	b.n	80075b6 <UART_SetConfig+0x2e6>
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a5e      	ldr	r2, [pc, #376]	; (80075a4 <UART_SetConfig+0x2d4>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d125      	bne.n	800747a <UART_SetConfig+0x1aa>
 800742e:	4b5b      	ldr	r3, [pc, #364]	; (800759c <UART_SetConfig+0x2cc>)
 8007430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007434:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007438:	2b30      	cmp	r3, #48	; 0x30
 800743a:	d016      	beq.n	800746a <UART_SetConfig+0x19a>
 800743c:	2b30      	cmp	r3, #48	; 0x30
 800743e:	d818      	bhi.n	8007472 <UART_SetConfig+0x1a2>
 8007440:	2b20      	cmp	r3, #32
 8007442:	d00a      	beq.n	800745a <UART_SetConfig+0x18a>
 8007444:	2b20      	cmp	r3, #32
 8007446:	d814      	bhi.n	8007472 <UART_SetConfig+0x1a2>
 8007448:	2b00      	cmp	r3, #0
 800744a:	d002      	beq.n	8007452 <UART_SetConfig+0x182>
 800744c:	2b10      	cmp	r3, #16
 800744e:	d008      	beq.n	8007462 <UART_SetConfig+0x192>
 8007450:	e00f      	b.n	8007472 <UART_SetConfig+0x1a2>
 8007452:	2300      	movs	r3, #0
 8007454:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007458:	e0ad      	b.n	80075b6 <UART_SetConfig+0x2e6>
 800745a:	2302      	movs	r3, #2
 800745c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007460:	e0a9      	b.n	80075b6 <UART_SetConfig+0x2e6>
 8007462:	2304      	movs	r3, #4
 8007464:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007468:	e0a5      	b.n	80075b6 <UART_SetConfig+0x2e6>
 800746a:	2308      	movs	r3, #8
 800746c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007470:	e0a1      	b.n	80075b6 <UART_SetConfig+0x2e6>
 8007472:	2310      	movs	r3, #16
 8007474:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007478:	e09d      	b.n	80075b6 <UART_SetConfig+0x2e6>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a4a      	ldr	r2, [pc, #296]	; (80075a8 <UART_SetConfig+0x2d8>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d125      	bne.n	80074d0 <UART_SetConfig+0x200>
 8007484:	4b45      	ldr	r3, [pc, #276]	; (800759c <UART_SetConfig+0x2cc>)
 8007486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800748a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800748e:	2bc0      	cmp	r3, #192	; 0xc0
 8007490:	d016      	beq.n	80074c0 <UART_SetConfig+0x1f0>
 8007492:	2bc0      	cmp	r3, #192	; 0xc0
 8007494:	d818      	bhi.n	80074c8 <UART_SetConfig+0x1f8>
 8007496:	2b80      	cmp	r3, #128	; 0x80
 8007498:	d00a      	beq.n	80074b0 <UART_SetConfig+0x1e0>
 800749a:	2b80      	cmp	r3, #128	; 0x80
 800749c:	d814      	bhi.n	80074c8 <UART_SetConfig+0x1f8>
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d002      	beq.n	80074a8 <UART_SetConfig+0x1d8>
 80074a2:	2b40      	cmp	r3, #64	; 0x40
 80074a4:	d008      	beq.n	80074b8 <UART_SetConfig+0x1e8>
 80074a6:	e00f      	b.n	80074c8 <UART_SetConfig+0x1f8>
 80074a8:	2300      	movs	r3, #0
 80074aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074ae:	e082      	b.n	80075b6 <UART_SetConfig+0x2e6>
 80074b0:	2302      	movs	r3, #2
 80074b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074b6:	e07e      	b.n	80075b6 <UART_SetConfig+0x2e6>
 80074b8:	2304      	movs	r3, #4
 80074ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074be:	e07a      	b.n	80075b6 <UART_SetConfig+0x2e6>
 80074c0:	2308      	movs	r3, #8
 80074c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074c6:	e076      	b.n	80075b6 <UART_SetConfig+0x2e6>
 80074c8:	2310      	movs	r3, #16
 80074ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074ce:	e072      	b.n	80075b6 <UART_SetConfig+0x2e6>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a35      	ldr	r2, [pc, #212]	; (80075ac <UART_SetConfig+0x2dc>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d12a      	bne.n	8007530 <UART_SetConfig+0x260>
 80074da:	4b30      	ldr	r3, [pc, #192]	; (800759c <UART_SetConfig+0x2cc>)
 80074dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074e8:	d01a      	beq.n	8007520 <UART_SetConfig+0x250>
 80074ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074ee:	d81b      	bhi.n	8007528 <UART_SetConfig+0x258>
 80074f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074f4:	d00c      	beq.n	8007510 <UART_SetConfig+0x240>
 80074f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074fa:	d815      	bhi.n	8007528 <UART_SetConfig+0x258>
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d003      	beq.n	8007508 <UART_SetConfig+0x238>
 8007500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007504:	d008      	beq.n	8007518 <UART_SetConfig+0x248>
 8007506:	e00f      	b.n	8007528 <UART_SetConfig+0x258>
 8007508:	2300      	movs	r3, #0
 800750a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800750e:	e052      	b.n	80075b6 <UART_SetConfig+0x2e6>
 8007510:	2302      	movs	r3, #2
 8007512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007516:	e04e      	b.n	80075b6 <UART_SetConfig+0x2e6>
 8007518:	2304      	movs	r3, #4
 800751a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800751e:	e04a      	b.n	80075b6 <UART_SetConfig+0x2e6>
 8007520:	2308      	movs	r3, #8
 8007522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007526:	e046      	b.n	80075b6 <UART_SetConfig+0x2e6>
 8007528:	2310      	movs	r3, #16
 800752a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800752e:	e042      	b.n	80075b6 <UART_SetConfig+0x2e6>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a17      	ldr	r2, [pc, #92]	; (8007594 <UART_SetConfig+0x2c4>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d13a      	bne.n	80075b0 <UART_SetConfig+0x2e0>
 800753a:	4b18      	ldr	r3, [pc, #96]	; (800759c <UART_SetConfig+0x2cc>)
 800753c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007540:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007544:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007548:	d01a      	beq.n	8007580 <UART_SetConfig+0x2b0>
 800754a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800754e:	d81b      	bhi.n	8007588 <UART_SetConfig+0x2b8>
 8007550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007554:	d00c      	beq.n	8007570 <UART_SetConfig+0x2a0>
 8007556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800755a:	d815      	bhi.n	8007588 <UART_SetConfig+0x2b8>
 800755c:	2b00      	cmp	r3, #0
 800755e:	d003      	beq.n	8007568 <UART_SetConfig+0x298>
 8007560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007564:	d008      	beq.n	8007578 <UART_SetConfig+0x2a8>
 8007566:	e00f      	b.n	8007588 <UART_SetConfig+0x2b8>
 8007568:	2300      	movs	r3, #0
 800756a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800756e:	e022      	b.n	80075b6 <UART_SetConfig+0x2e6>
 8007570:	2302      	movs	r3, #2
 8007572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007576:	e01e      	b.n	80075b6 <UART_SetConfig+0x2e6>
 8007578:	2304      	movs	r3, #4
 800757a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800757e:	e01a      	b.n	80075b6 <UART_SetConfig+0x2e6>
 8007580:	2308      	movs	r3, #8
 8007582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007586:	e016      	b.n	80075b6 <UART_SetConfig+0x2e6>
 8007588:	2310      	movs	r3, #16
 800758a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800758e:	e012      	b.n	80075b6 <UART_SetConfig+0x2e6>
 8007590:	efff69f3 	.word	0xefff69f3
 8007594:	40008000 	.word	0x40008000
 8007598:	40013800 	.word	0x40013800
 800759c:	40021000 	.word	0x40021000
 80075a0:	40004400 	.word	0x40004400
 80075a4:	40004800 	.word	0x40004800
 80075a8:	40004c00 	.word	0x40004c00
 80075ac:	40005000 	.word	0x40005000
 80075b0:	2310      	movs	r3, #16
 80075b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a9f      	ldr	r2, [pc, #636]	; (8007838 <UART_SetConfig+0x568>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d17a      	bne.n	80076b6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075c4:	2b08      	cmp	r3, #8
 80075c6:	d824      	bhi.n	8007612 <UART_SetConfig+0x342>
 80075c8:	a201      	add	r2, pc, #4	; (adr r2, 80075d0 <UART_SetConfig+0x300>)
 80075ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ce:	bf00      	nop
 80075d0:	080075f5 	.word	0x080075f5
 80075d4:	08007613 	.word	0x08007613
 80075d8:	080075fd 	.word	0x080075fd
 80075dc:	08007613 	.word	0x08007613
 80075e0:	08007603 	.word	0x08007603
 80075e4:	08007613 	.word	0x08007613
 80075e8:	08007613 	.word	0x08007613
 80075ec:	08007613 	.word	0x08007613
 80075f0:	0800760b 	.word	0x0800760b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075f4:	f7fe fbf0 	bl	8005dd8 <HAL_RCC_GetPCLK1Freq>
 80075f8:	61f8      	str	r0, [r7, #28]
        break;
 80075fa:	e010      	b.n	800761e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075fc:	4b8f      	ldr	r3, [pc, #572]	; (800783c <UART_SetConfig+0x56c>)
 80075fe:	61fb      	str	r3, [r7, #28]
        break;
 8007600:	e00d      	b.n	800761e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007602:	f7fe fb51 	bl	8005ca8 <HAL_RCC_GetSysClockFreq>
 8007606:	61f8      	str	r0, [r7, #28]
        break;
 8007608:	e009      	b.n	800761e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800760a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800760e:	61fb      	str	r3, [r7, #28]
        break;
 8007610:	e005      	b.n	800761e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007612:	2300      	movs	r3, #0
 8007614:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800761c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	2b00      	cmp	r3, #0
 8007622:	f000 80fb 	beq.w	800781c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	685a      	ldr	r2, [r3, #4]
 800762a:	4613      	mov	r3, r2
 800762c:	005b      	lsls	r3, r3, #1
 800762e:	4413      	add	r3, r2
 8007630:	69fa      	ldr	r2, [r7, #28]
 8007632:	429a      	cmp	r2, r3
 8007634:	d305      	bcc.n	8007642 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800763c:	69fa      	ldr	r2, [r7, #28]
 800763e:	429a      	cmp	r2, r3
 8007640:	d903      	bls.n	800764a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007648:	e0e8      	b.n	800781c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	2200      	movs	r2, #0
 800764e:	461c      	mov	r4, r3
 8007650:	4615      	mov	r5, r2
 8007652:	f04f 0200 	mov.w	r2, #0
 8007656:	f04f 0300 	mov.w	r3, #0
 800765a:	022b      	lsls	r3, r5, #8
 800765c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007660:	0222      	lsls	r2, r4, #8
 8007662:	68f9      	ldr	r1, [r7, #12]
 8007664:	6849      	ldr	r1, [r1, #4]
 8007666:	0849      	lsrs	r1, r1, #1
 8007668:	2000      	movs	r0, #0
 800766a:	4688      	mov	r8, r1
 800766c:	4681      	mov	r9, r0
 800766e:	eb12 0a08 	adds.w	sl, r2, r8
 8007672:	eb43 0b09 	adc.w	fp, r3, r9
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	603b      	str	r3, [r7, #0]
 800767e:	607a      	str	r2, [r7, #4]
 8007680:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007684:	4650      	mov	r0, sl
 8007686:	4659      	mov	r1, fp
 8007688:	f7f9 faae 	bl	8000be8 <__aeabi_uldivmod>
 800768c:	4602      	mov	r2, r0
 800768e:	460b      	mov	r3, r1
 8007690:	4613      	mov	r3, r2
 8007692:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800769a:	d308      	bcc.n	80076ae <UART_SetConfig+0x3de>
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076a2:	d204      	bcs.n	80076ae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	69ba      	ldr	r2, [r7, #24]
 80076aa:	60da      	str	r2, [r3, #12]
 80076ac:	e0b6      	b.n	800781c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80076b4:	e0b2      	b.n	800781c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	69db      	ldr	r3, [r3, #28]
 80076ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076be:	d15e      	bne.n	800777e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80076c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076c4:	2b08      	cmp	r3, #8
 80076c6:	d828      	bhi.n	800771a <UART_SetConfig+0x44a>
 80076c8:	a201      	add	r2, pc, #4	; (adr r2, 80076d0 <UART_SetConfig+0x400>)
 80076ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ce:	bf00      	nop
 80076d0:	080076f5 	.word	0x080076f5
 80076d4:	080076fd 	.word	0x080076fd
 80076d8:	08007705 	.word	0x08007705
 80076dc:	0800771b 	.word	0x0800771b
 80076e0:	0800770b 	.word	0x0800770b
 80076e4:	0800771b 	.word	0x0800771b
 80076e8:	0800771b 	.word	0x0800771b
 80076ec:	0800771b 	.word	0x0800771b
 80076f0:	08007713 	.word	0x08007713
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076f4:	f7fe fb70 	bl	8005dd8 <HAL_RCC_GetPCLK1Freq>
 80076f8:	61f8      	str	r0, [r7, #28]
        break;
 80076fa:	e014      	b.n	8007726 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076fc:	f7fe fb82 	bl	8005e04 <HAL_RCC_GetPCLK2Freq>
 8007700:	61f8      	str	r0, [r7, #28]
        break;
 8007702:	e010      	b.n	8007726 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007704:	4b4d      	ldr	r3, [pc, #308]	; (800783c <UART_SetConfig+0x56c>)
 8007706:	61fb      	str	r3, [r7, #28]
        break;
 8007708:	e00d      	b.n	8007726 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800770a:	f7fe facd 	bl	8005ca8 <HAL_RCC_GetSysClockFreq>
 800770e:	61f8      	str	r0, [r7, #28]
        break;
 8007710:	e009      	b.n	8007726 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007716:	61fb      	str	r3, [r7, #28]
        break;
 8007718:	e005      	b.n	8007726 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800771a:	2300      	movs	r3, #0
 800771c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007724:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d077      	beq.n	800781c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	005a      	lsls	r2, r3, #1
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	085b      	lsrs	r3, r3, #1
 8007736:	441a      	add	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007740:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	2b0f      	cmp	r3, #15
 8007746:	d916      	bls.n	8007776 <UART_SetConfig+0x4a6>
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800774e:	d212      	bcs.n	8007776 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	b29b      	uxth	r3, r3
 8007754:	f023 030f 	bic.w	r3, r3, #15
 8007758:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	085b      	lsrs	r3, r3, #1
 800775e:	b29b      	uxth	r3, r3
 8007760:	f003 0307 	and.w	r3, r3, #7
 8007764:	b29a      	uxth	r2, r3
 8007766:	8afb      	ldrh	r3, [r7, #22]
 8007768:	4313      	orrs	r3, r2
 800776a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	8afa      	ldrh	r2, [r7, #22]
 8007772:	60da      	str	r2, [r3, #12]
 8007774:	e052      	b.n	800781c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800777c:	e04e      	b.n	800781c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800777e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007782:	2b08      	cmp	r3, #8
 8007784:	d827      	bhi.n	80077d6 <UART_SetConfig+0x506>
 8007786:	a201      	add	r2, pc, #4	; (adr r2, 800778c <UART_SetConfig+0x4bc>)
 8007788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778c:	080077b1 	.word	0x080077b1
 8007790:	080077b9 	.word	0x080077b9
 8007794:	080077c1 	.word	0x080077c1
 8007798:	080077d7 	.word	0x080077d7
 800779c:	080077c7 	.word	0x080077c7
 80077a0:	080077d7 	.word	0x080077d7
 80077a4:	080077d7 	.word	0x080077d7
 80077a8:	080077d7 	.word	0x080077d7
 80077ac:	080077cf 	.word	0x080077cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077b0:	f7fe fb12 	bl	8005dd8 <HAL_RCC_GetPCLK1Freq>
 80077b4:	61f8      	str	r0, [r7, #28]
        break;
 80077b6:	e014      	b.n	80077e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077b8:	f7fe fb24 	bl	8005e04 <HAL_RCC_GetPCLK2Freq>
 80077bc:	61f8      	str	r0, [r7, #28]
        break;
 80077be:	e010      	b.n	80077e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077c0:	4b1e      	ldr	r3, [pc, #120]	; (800783c <UART_SetConfig+0x56c>)
 80077c2:	61fb      	str	r3, [r7, #28]
        break;
 80077c4:	e00d      	b.n	80077e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077c6:	f7fe fa6f 	bl	8005ca8 <HAL_RCC_GetSysClockFreq>
 80077ca:	61f8      	str	r0, [r7, #28]
        break;
 80077cc:	e009      	b.n	80077e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077d2:	61fb      	str	r3, [r7, #28]
        break;
 80077d4:	e005      	b.n	80077e2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80077d6:	2300      	movs	r3, #0
 80077d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80077e0:	bf00      	nop
    }

    if (pclk != 0U)
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d019      	beq.n	800781c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	085a      	lsrs	r2, r3, #1
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	441a      	add	r2, r3
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80077fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	2b0f      	cmp	r3, #15
 8007800:	d909      	bls.n	8007816 <UART_SetConfig+0x546>
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007808:	d205      	bcs.n	8007816 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	b29a      	uxth	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	60da      	str	r2, [r3, #12]
 8007814:	e002      	b.n	800781c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2200      	movs	r2, #0
 8007826:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007828:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800782c:	4618      	mov	r0, r3
 800782e:	3728      	adds	r7, #40	; 0x28
 8007830:	46bd      	mov	sp, r7
 8007832:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007836:	bf00      	nop
 8007838:	40008000 	.word	0x40008000
 800783c:	00f42400 	.word	0x00f42400

08007840 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00a      	beq.n	800786a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	430a      	orrs	r2, r1
 8007868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786e:	f003 0302 	and.w	r3, r3, #2
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00a      	beq.n	800788c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	430a      	orrs	r2, r1
 800788a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007890:	f003 0304 	and.w	r3, r3, #4
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00a      	beq.n	80078ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	430a      	orrs	r2, r1
 80078ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b2:	f003 0308 	and.w	r3, r3, #8
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d00a      	beq.n	80078d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	430a      	orrs	r2, r1
 80078ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d4:	f003 0310 	and.w	r3, r3, #16
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00a      	beq.n	80078f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	430a      	orrs	r2, r1
 80078f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f6:	f003 0320 	and.w	r3, r3, #32
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00a      	beq.n	8007914 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	430a      	orrs	r2, r1
 8007912:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800791c:	2b00      	cmp	r3, #0
 800791e:	d01a      	beq.n	8007956 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	430a      	orrs	r2, r1
 8007934:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800793e:	d10a      	bne.n	8007956 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	430a      	orrs	r2, r1
 8007954:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00a      	beq.n	8007978 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	430a      	orrs	r2, r1
 8007976:	605a      	str	r2, [r3, #4]
  }
}
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af02      	add	r7, sp, #8
 800798a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007994:	f7fb fbbe 	bl	8003114 <HAL_GetTick>
 8007998:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 0308 	and.w	r3, r3, #8
 80079a4:	2b08      	cmp	r3, #8
 80079a6:	d10e      	bne.n	80079c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079ac:	9300      	str	r3, [sp, #0]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 f82d 	bl	8007a16 <UART_WaitOnFlagUntilTimeout>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d001      	beq.n	80079c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079c2:	2303      	movs	r3, #3
 80079c4:	e023      	b.n	8007a0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 0304 	and.w	r3, r3, #4
 80079d0:	2b04      	cmp	r3, #4
 80079d2:	d10e      	bne.n	80079f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079d8:	9300      	str	r3, [sp, #0]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f817 	bl	8007a16 <UART_WaitOnFlagUntilTimeout>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d001      	beq.n	80079f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e00d      	b.n	8007a0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2220      	movs	r2, #32
 80079f6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2220      	movs	r2, #32
 80079fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b09c      	sub	sp, #112	; 0x70
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	60f8      	str	r0, [r7, #12]
 8007a1e:	60b9      	str	r1, [r7, #8]
 8007a20:	603b      	str	r3, [r7, #0]
 8007a22:	4613      	mov	r3, r2
 8007a24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a26:	e0a5      	b.n	8007b74 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a2e:	f000 80a1 	beq.w	8007b74 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a32:	f7fb fb6f 	bl	8003114 <HAL_GetTick>
 8007a36:	4602      	mov	r2, r0
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d302      	bcc.n	8007a48 <UART_WaitOnFlagUntilTimeout+0x32>
 8007a42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d13e      	bne.n	8007ac6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a50:	e853 3f00 	ldrex	r3, [r3]
 8007a54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a5c:	667b      	str	r3, [r7, #100]	; 0x64
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	461a      	mov	r2, r3
 8007a64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a68:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a6e:	e841 2300 	strex	r3, r2, [r1]
 8007a72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1e6      	bne.n	8007a48 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	3308      	adds	r3, #8
 8007a80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a84:	e853 3f00 	ldrex	r3, [r3]
 8007a88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8c:	f023 0301 	bic.w	r3, r3, #1
 8007a90:	663b      	str	r3, [r7, #96]	; 0x60
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	3308      	adds	r3, #8
 8007a98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a9a:	64ba      	str	r2, [r7, #72]	; 0x48
 8007a9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007aa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007aa2:	e841 2300 	strex	r3, r2, [r1]
 8007aa6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1e5      	bne.n	8007a7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2220      	movs	r2, #32
 8007ab8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	e067      	b.n	8007b96 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0304 	and.w	r3, r3, #4
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d04f      	beq.n	8007b74 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	69db      	ldr	r3, [r3, #28]
 8007ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ae2:	d147      	bne.n	8007b74 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007aec:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af6:	e853 3f00 	ldrex	r3, [r3]
 8007afa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	461a      	mov	r2, r3
 8007b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b0e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b14:	e841 2300 	strex	r3, r2, [r1]
 8007b18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1e6      	bne.n	8007aee <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3308      	adds	r3, #8
 8007b26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	e853 3f00 	ldrex	r3, [r3]
 8007b2e:	613b      	str	r3, [r7, #16]
   return(result);
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	f023 0301 	bic.w	r3, r3, #1
 8007b36:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	3308      	adds	r3, #8
 8007b3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b40:	623a      	str	r2, [r7, #32]
 8007b42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b44:	69f9      	ldr	r1, [r7, #28]
 8007b46:	6a3a      	ldr	r2, [r7, #32]
 8007b48:	e841 2300 	strex	r3, r2, [r1]
 8007b4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1e5      	bne.n	8007b20 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2220      	movs	r2, #32
 8007b58:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2220      	movs	r2, #32
 8007b5e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2220      	movs	r2, #32
 8007b64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007b70:	2303      	movs	r3, #3
 8007b72:	e010      	b.n	8007b96 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	69da      	ldr	r2, [r3, #28]
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	bf0c      	ite	eq
 8007b84:	2301      	moveq	r3, #1
 8007b86:	2300      	movne	r3, #0
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	79fb      	ldrb	r3, [r7, #7]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	f43f af4a 	beq.w	8007a28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3770      	adds	r7, #112	; 0x70
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
	...

08007ba0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b097      	sub	sp, #92	; 0x5c
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	4613      	mov	r3, r2
 8007bac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	88fa      	ldrh	r2, [r7, #6]
 8007bb8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	88fa      	ldrh	r2, [r7, #6]
 8007bc0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bd2:	d10e      	bne.n	8007bf2 <UART_Start_Receive_IT+0x52>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d105      	bne.n	8007be8 <UART_Start_Receive_IT+0x48>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007be2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007be6:	e02d      	b.n	8007c44 <UART_Start_Receive_IT+0xa4>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	22ff      	movs	r2, #255	; 0xff
 8007bec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007bf0:	e028      	b.n	8007c44 <UART_Start_Receive_IT+0xa4>
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d10d      	bne.n	8007c16 <UART_Start_Receive_IT+0x76>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d104      	bne.n	8007c0c <UART_Start_Receive_IT+0x6c>
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	22ff      	movs	r2, #255	; 0xff
 8007c06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c0a:	e01b      	b.n	8007c44 <UART_Start_Receive_IT+0xa4>
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	227f      	movs	r2, #127	; 0x7f
 8007c10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c14:	e016      	b.n	8007c44 <UART_Start_Receive_IT+0xa4>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c1e:	d10d      	bne.n	8007c3c <UART_Start_Receive_IT+0x9c>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d104      	bne.n	8007c32 <UART_Start_Receive_IT+0x92>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	227f      	movs	r2, #127	; 0x7f
 8007c2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c30:	e008      	b.n	8007c44 <UART_Start_Receive_IT+0xa4>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	223f      	movs	r2, #63	; 0x3f
 8007c36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c3a:	e003      	b.n	8007c44 <UART_Start_Receive_IT+0xa4>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2222      	movs	r2, #34	; 0x22
 8007c50:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	3308      	adds	r3, #8
 8007c58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c5c:	e853 3f00 	ldrex	r3, [r3]
 8007c60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c64:	f043 0301 	orr.w	r3, r3, #1
 8007c68:	657b      	str	r3, [r7, #84]	; 0x54
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	3308      	adds	r3, #8
 8007c70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007c72:	64ba      	str	r2, [r7, #72]	; 0x48
 8007c74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c7a:	e841 2300 	strex	r3, r2, [r1]
 8007c7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1e5      	bne.n	8007c52 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c8e:	d107      	bne.n	8007ca0 <UART_Start_Receive_IT+0x100>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d103      	bne.n	8007ca0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	4a24      	ldr	r2, [pc, #144]	; (8007d2c <UART_Start_Receive_IT+0x18c>)
 8007c9c:	665a      	str	r2, [r3, #100]	; 0x64
 8007c9e:	e002      	b.n	8007ca6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	4a23      	ldr	r2, [pc, #140]	; (8007d30 <UART_Start_Receive_IT+0x190>)
 8007ca4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d019      	beq.n	8007cea <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbe:	e853 3f00 	ldrex	r3, [r3]
 8007cc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8007cd6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007cda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cdc:	e841 2300 	strex	r3, r2, [r1]
 8007ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1e6      	bne.n	8007cb6 <UART_Start_Receive_IT+0x116>
 8007ce8:	e018      	b.n	8007d1c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	e853 3f00 	ldrex	r3, [r3]
 8007cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	f043 0320 	orr.w	r3, r3, #32
 8007cfe:	653b      	str	r3, [r7, #80]	; 0x50
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	461a      	mov	r2, r3
 8007d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d08:	623b      	str	r3, [r7, #32]
 8007d0a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0c:	69f9      	ldr	r1, [r7, #28]
 8007d0e:	6a3a      	ldr	r2, [r7, #32]
 8007d10:	e841 2300 	strex	r3, r2, [r1]
 8007d14:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1e6      	bne.n	8007cea <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	375c      	adds	r7, #92	; 0x5c
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	08007fdb 	.word	0x08007fdb
 8007d30:	08007e7b 	.word	0x08007e7b

08007d34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b095      	sub	sp, #84	; 0x54
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d44:	e853 3f00 	ldrex	r3, [r3]
 8007d48:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	461a      	mov	r2, r3
 8007d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d5a:	643b      	str	r3, [r7, #64]	; 0x40
 8007d5c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d62:	e841 2300 	strex	r3, r2, [r1]
 8007d66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1e6      	bne.n	8007d3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	3308      	adds	r3, #8
 8007d74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d76:	6a3b      	ldr	r3, [r7, #32]
 8007d78:	e853 3f00 	ldrex	r3, [r3]
 8007d7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	f023 0301 	bic.w	r3, r3, #1
 8007d84:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	3308      	adds	r3, #8
 8007d8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d96:	e841 2300 	strex	r3, r2, [r1]
 8007d9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1e5      	bne.n	8007d6e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d118      	bne.n	8007ddc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	e853 3f00 	ldrex	r3, [r3]
 8007db6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	f023 0310 	bic.w	r3, r3, #16
 8007dbe:	647b      	str	r3, [r7, #68]	; 0x44
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dc8:	61bb      	str	r3, [r7, #24]
 8007dca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dcc:	6979      	ldr	r1, [r7, #20]
 8007dce:	69ba      	ldr	r2, [r7, #24]
 8007dd0:	e841 2300 	strex	r3, r2, [r1]
 8007dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1e6      	bne.n	8007daa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2220      	movs	r2, #32
 8007de0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007dee:	bf00      	nop
 8007df0:	3754      	adds	r7, #84	; 0x54
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b084      	sub	sp, #16
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f7ff f99f 	bl	800715c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e1e:	bf00      	nop
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b088      	sub	sp, #32
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	e853 3f00 	ldrex	r3, [r3]
 8007e3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e42:	61fb      	str	r3, [r7, #28]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	461a      	mov	r2, r3
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	61bb      	str	r3, [r7, #24]
 8007e4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e50:	6979      	ldr	r1, [r7, #20]
 8007e52:	69ba      	ldr	r2, [r7, #24]
 8007e54:	e841 2300 	strex	r3, r2, [r1]
 8007e58:	613b      	str	r3, [r7, #16]
   return(result);
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d1e6      	bne.n	8007e2e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2220      	movs	r2, #32
 8007e64:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f7ff f96b 	bl	8007148 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e72:	bf00      	nop
 8007e74:	3720      	adds	r7, #32
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b096      	sub	sp, #88	; 0x58
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e88:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e90:	2b22      	cmp	r3, #34	; 0x22
 8007e92:	f040 8094 	bne.w	8007fbe <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007e9c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007ea0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007ea4:	b2d9      	uxtb	r1, r3
 8007ea6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007eaa:	b2da      	uxtb	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb0:	400a      	ands	r2, r1
 8007eb2:	b2d2      	uxtb	r2, r2
 8007eb4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eba:	1c5a      	adds	r2, r3, #1
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d179      	bne.n	8007fd2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee6:	e853 3f00 	ldrex	r3, [r3]
 8007eea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ef2:	653b      	str	r3, [r7, #80]	; 0x50
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	461a      	mov	r2, r3
 8007efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007efc:	647b      	str	r3, [r7, #68]	; 0x44
 8007efe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f04:	e841 2300 	strex	r3, r2, [r1]
 8007f08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1e6      	bne.n	8007ede <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	3308      	adds	r3, #8
 8007f16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1a:	e853 3f00 	ldrex	r3, [r3]
 8007f1e:	623b      	str	r3, [r7, #32]
   return(result);
 8007f20:	6a3b      	ldr	r3, [r7, #32]
 8007f22:	f023 0301 	bic.w	r3, r3, #1
 8007f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	3308      	adds	r3, #8
 8007f2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f30:	633a      	str	r2, [r7, #48]	; 0x30
 8007f32:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f38:	e841 2300 	strex	r3, r2, [r1]
 8007f3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d1e5      	bne.n	8007f10 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2220      	movs	r2, #32
 8007f48:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d12e      	bne.n	8007fb6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	e853 3f00 	ldrex	r3, [r3]
 8007f6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f023 0310 	bic.w	r3, r3, #16
 8007f72:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	461a      	mov	r2, r3
 8007f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f7c:	61fb      	str	r3, [r7, #28]
 8007f7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f80:	69b9      	ldr	r1, [r7, #24]
 8007f82:	69fa      	ldr	r2, [r7, #28]
 8007f84:	e841 2300 	strex	r3, r2, [r1]
 8007f88:	617b      	str	r3, [r7, #20]
   return(result);
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1e6      	bne.n	8007f5e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	69db      	ldr	r3, [r3, #28]
 8007f96:	f003 0310 	and.w	r3, r3, #16
 8007f9a:	2b10      	cmp	r3, #16
 8007f9c:	d103      	bne.n	8007fa6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2210      	movs	r2, #16
 8007fa4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007fac:	4619      	mov	r1, r3
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f7ff f8de 	bl	8007170 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007fb4:	e00d      	b.n	8007fd2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f7f9 feac 	bl	8001d14 <HAL_UART_RxCpltCallback>
}
 8007fbc:	e009      	b.n	8007fd2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	8b1b      	ldrh	r3, [r3, #24]
 8007fc4:	b29a      	uxth	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f042 0208 	orr.w	r2, r2, #8
 8007fce:	b292      	uxth	r2, r2
 8007fd0:	831a      	strh	r2, [r3, #24]
}
 8007fd2:	bf00      	nop
 8007fd4:	3758      	adds	r7, #88	; 0x58
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b096      	sub	sp, #88	; 0x58
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007fe8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ff0:	2b22      	cmp	r3, #34	; 0x22
 8007ff2:	f040 8094 	bne.w	800811e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007ffc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008004:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008006:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800800a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800800e:	4013      	ands	r3, r2
 8008010:	b29a      	uxth	r2, r3
 8008012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008014:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800801a:	1c9a      	adds	r2, r3, #2
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008026:	b29b      	uxth	r3, r3
 8008028:	3b01      	subs	r3, #1
 800802a:	b29a      	uxth	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008038:	b29b      	uxth	r3, r3
 800803a:	2b00      	cmp	r3, #0
 800803c:	d179      	bne.n	8008132 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008046:	e853 3f00 	ldrex	r3, [r3]
 800804a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800804c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008052:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	461a      	mov	r2, r3
 800805a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800805c:	643b      	str	r3, [r7, #64]	; 0x40
 800805e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008060:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008062:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008064:	e841 2300 	strex	r3, r2, [r1]
 8008068:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800806a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806c:	2b00      	cmp	r3, #0
 800806e:	d1e6      	bne.n	800803e <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	3308      	adds	r3, #8
 8008076:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008078:	6a3b      	ldr	r3, [r7, #32]
 800807a:	e853 3f00 	ldrex	r3, [r3]
 800807e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	f023 0301 	bic.w	r3, r3, #1
 8008086:	64bb      	str	r3, [r7, #72]	; 0x48
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	3308      	adds	r3, #8
 800808e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008090:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008092:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008094:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008098:	e841 2300 	strex	r3, r2, [r1]
 800809c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800809e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d1e5      	bne.n	8008070 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2220      	movs	r2, #32
 80080a8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d12e      	bne.n	8008116 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	e853 3f00 	ldrex	r3, [r3]
 80080ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	f023 0310 	bic.w	r3, r3, #16
 80080d2:	647b      	str	r3, [r7, #68]	; 0x44
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	461a      	mov	r2, r3
 80080da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080dc:	61bb      	str	r3, [r7, #24]
 80080de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e0:	6979      	ldr	r1, [r7, #20]
 80080e2:	69ba      	ldr	r2, [r7, #24]
 80080e4:	e841 2300 	strex	r3, r2, [r1]
 80080e8:	613b      	str	r3, [r7, #16]
   return(result);
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d1e6      	bne.n	80080be <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	69db      	ldr	r3, [r3, #28]
 80080f6:	f003 0310 	and.w	r3, r3, #16
 80080fa:	2b10      	cmp	r3, #16
 80080fc:	d103      	bne.n	8008106 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2210      	movs	r2, #16
 8008104:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800810c:	4619      	mov	r1, r3
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f7ff f82e 	bl	8007170 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008114:	e00d      	b.n	8008132 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7f9 fdfc 	bl	8001d14 <HAL_UART_RxCpltCallback>
}
 800811c:	e009      	b.n	8008132 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	8b1b      	ldrh	r3, [r3, #24]
 8008124:	b29a      	uxth	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f042 0208 	orr.w	r2, r2, #8
 800812e:	b292      	uxth	r2, r2
 8008130:	831a      	strh	r2, [r3, #24]
}
 8008132:	bf00      	nop
 8008134:	3758      	adds	r7, #88	; 0x58
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800813a:	b480      	push	{r7}
 800813c:	b083      	sub	sp, #12
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008142:	bf00      	nop
 8008144:	370c      	adds	r7, #12
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr
	...

08008150 <__errno>:
 8008150:	4b01      	ldr	r3, [pc, #4]	; (8008158 <__errno+0x8>)
 8008152:	6818      	ldr	r0, [r3, #0]
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop
 8008158:	2000000c 	.word	0x2000000c

0800815c <__libc_init_array>:
 800815c:	b570      	push	{r4, r5, r6, lr}
 800815e:	4d0d      	ldr	r5, [pc, #52]	; (8008194 <__libc_init_array+0x38>)
 8008160:	4c0d      	ldr	r4, [pc, #52]	; (8008198 <__libc_init_array+0x3c>)
 8008162:	1b64      	subs	r4, r4, r5
 8008164:	10a4      	asrs	r4, r4, #2
 8008166:	2600      	movs	r6, #0
 8008168:	42a6      	cmp	r6, r4
 800816a:	d109      	bne.n	8008180 <__libc_init_array+0x24>
 800816c:	4d0b      	ldr	r5, [pc, #44]	; (800819c <__libc_init_array+0x40>)
 800816e:	4c0c      	ldr	r4, [pc, #48]	; (80081a0 <__libc_init_array+0x44>)
 8008170:	f005 fb9c 	bl	800d8ac <_init>
 8008174:	1b64      	subs	r4, r4, r5
 8008176:	10a4      	asrs	r4, r4, #2
 8008178:	2600      	movs	r6, #0
 800817a:	42a6      	cmp	r6, r4
 800817c:	d105      	bne.n	800818a <__libc_init_array+0x2e>
 800817e:	bd70      	pop	{r4, r5, r6, pc}
 8008180:	f855 3b04 	ldr.w	r3, [r5], #4
 8008184:	4798      	blx	r3
 8008186:	3601      	adds	r6, #1
 8008188:	e7ee      	b.n	8008168 <__libc_init_array+0xc>
 800818a:	f855 3b04 	ldr.w	r3, [r5], #4
 800818e:	4798      	blx	r3
 8008190:	3601      	adds	r6, #1
 8008192:	e7f2      	b.n	800817a <__libc_init_array+0x1e>
 8008194:	0800e040 	.word	0x0800e040
 8008198:	0800e040 	.word	0x0800e040
 800819c:	0800e040 	.word	0x0800e040
 80081a0:	0800e044 	.word	0x0800e044

080081a4 <memcpy>:
 80081a4:	440a      	add	r2, r1
 80081a6:	4291      	cmp	r1, r2
 80081a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80081ac:	d100      	bne.n	80081b0 <memcpy+0xc>
 80081ae:	4770      	bx	lr
 80081b0:	b510      	push	{r4, lr}
 80081b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081ba:	4291      	cmp	r1, r2
 80081bc:	d1f9      	bne.n	80081b2 <memcpy+0xe>
 80081be:	bd10      	pop	{r4, pc}

080081c0 <memset>:
 80081c0:	4402      	add	r2, r0
 80081c2:	4603      	mov	r3, r0
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d100      	bne.n	80081ca <memset+0xa>
 80081c8:	4770      	bx	lr
 80081ca:	f803 1b01 	strb.w	r1, [r3], #1
 80081ce:	e7f9      	b.n	80081c4 <memset+0x4>

080081d0 <__cvt>:
 80081d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081d4:	ec55 4b10 	vmov	r4, r5, d0
 80081d8:	2d00      	cmp	r5, #0
 80081da:	460e      	mov	r6, r1
 80081dc:	4619      	mov	r1, r3
 80081de:	462b      	mov	r3, r5
 80081e0:	bfbb      	ittet	lt
 80081e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80081e6:	461d      	movlt	r5, r3
 80081e8:	2300      	movge	r3, #0
 80081ea:	232d      	movlt	r3, #45	; 0x2d
 80081ec:	700b      	strb	r3, [r1, #0]
 80081ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80081f4:	4691      	mov	r9, r2
 80081f6:	f023 0820 	bic.w	r8, r3, #32
 80081fa:	bfbc      	itt	lt
 80081fc:	4622      	movlt	r2, r4
 80081fe:	4614      	movlt	r4, r2
 8008200:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008204:	d005      	beq.n	8008212 <__cvt+0x42>
 8008206:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800820a:	d100      	bne.n	800820e <__cvt+0x3e>
 800820c:	3601      	adds	r6, #1
 800820e:	2102      	movs	r1, #2
 8008210:	e000      	b.n	8008214 <__cvt+0x44>
 8008212:	2103      	movs	r1, #3
 8008214:	ab03      	add	r3, sp, #12
 8008216:	9301      	str	r3, [sp, #4]
 8008218:	ab02      	add	r3, sp, #8
 800821a:	9300      	str	r3, [sp, #0]
 800821c:	ec45 4b10 	vmov	d0, r4, r5
 8008220:	4653      	mov	r3, sl
 8008222:	4632      	mov	r2, r6
 8008224:	f000 fe18 	bl	8008e58 <_dtoa_r>
 8008228:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800822c:	4607      	mov	r7, r0
 800822e:	d102      	bne.n	8008236 <__cvt+0x66>
 8008230:	f019 0f01 	tst.w	r9, #1
 8008234:	d022      	beq.n	800827c <__cvt+0xac>
 8008236:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800823a:	eb07 0906 	add.w	r9, r7, r6
 800823e:	d110      	bne.n	8008262 <__cvt+0x92>
 8008240:	783b      	ldrb	r3, [r7, #0]
 8008242:	2b30      	cmp	r3, #48	; 0x30
 8008244:	d10a      	bne.n	800825c <__cvt+0x8c>
 8008246:	2200      	movs	r2, #0
 8008248:	2300      	movs	r3, #0
 800824a:	4620      	mov	r0, r4
 800824c:	4629      	mov	r1, r5
 800824e:	f7f8 fc3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008252:	b918      	cbnz	r0, 800825c <__cvt+0x8c>
 8008254:	f1c6 0601 	rsb	r6, r6, #1
 8008258:	f8ca 6000 	str.w	r6, [sl]
 800825c:	f8da 3000 	ldr.w	r3, [sl]
 8008260:	4499      	add	r9, r3
 8008262:	2200      	movs	r2, #0
 8008264:	2300      	movs	r3, #0
 8008266:	4620      	mov	r0, r4
 8008268:	4629      	mov	r1, r5
 800826a:	f7f8 fc2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800826e:	b108      	cbz	r0, 8008274 <__cvt+0xa4>
 8008270:	f8cd 900c 	str.w	r9, [sp, #12]
 8008274:	2230      	movs	r2, #48	; 0x30
 8008276:	9b03      	ldr	r3, [sp, #12]
 8008278:	454b      	cmp	r3, r9
 800827a:	d307      	bcc.n	800828c <__cvt+0xbc>
 800827c:	9b03      	ldr	r3, [sp, #12]
 800827e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008280:	1bdb      	subs	r3, r3, r7
 8008282:	4638      	mov	r0, r7
 8008284:	6013      	str	r3, [r2, #0]
 8008286:	b004      	add	sp, #16
 8008288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800828c:	1c59      	adds	r1, r3, #1
 800828e:	9103      	str	r1, [sp, #12]
 8008290:	701a      	strb	r2, [r3, #0]
 8008292:	e7f0      	b.n	8008276 <__cvt+0xa6>

08008294 <__exponent>:
 8008294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008296:	4603      	mov	r3, r0
 8008298:	2900      	cmp	r1, #0
 800829a:	bfb8      	it	lt
 800829c:	4249      	neglt	r1, r1
 800829e:	f803 2b02 	strb.w	r2, [r3], #2
 80082a2:	bfb4      	ite	lt
 80082a4:	222d      	movlt	r2, #45	; 0x2d
 80082a6:	222b      	movge	r2, #43	; 0x2b
 80082a8:	2909      	cmp	r1, #9
 80082aa:	7042      	strb	r2, [r0, #1]
 80082ac:	dd2a      	ble.n	8008304 <__exponent+0x70>
 80082ae:	f10d 0407 	add.w	r4, sp, #7
 80082b2:	46a4      	mov	ip, r4
 80082b4:	270a      	movs	r7, #10
 80082b6:	46a6      	mov	lr, r4
 80082b8:	460a      	mov	r2, r1
 80082ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80082be:	fb07 1516 	mls	r5, r7, r6, r1
 80082c2:	3530      	adds	r5, #48	; 0x30
 80082c4:	2a63      	cmp	r2, #99	; 0x63
 80082c6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80082ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80082ce:	4631      	mov	r1, r6
 80082d0:	dcf1      	bgt.n	80082b6 <__exponent+0x22>
 80082d2:	3130      	adds	r1, #48	; 0x30
 80082d4:	f1ae 0502 	sub.w	r5, lr, #2
 80082d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80082dc:	1c44      	adds	r4, r0, #1
 80082de:	4629      	mov	r1, r5
 80082e0:	4561      	cmp	r1, ip
 80082e2:	d30a      	bcc.n	80082fa <__exponent+0x66>
 80082e4:	f10d 0209 	add.w	r2, sp, #9
 80082e8:	eba2 020e 	sub.w	r2, r2, lr
 80082ec:	4565      	cmp	r5, ip
 80082ee:	bf88      	it	hi
 80082f0:	2200      	movhi	r2, #0
 80082f2:	4413      	add	r3, r2
 80082f4:	1a18      	subs	r0, r3, r0
 80082f6:	b003      	add	sp, #12
 80082f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008302:	e7ed      	b.n	80082e0 <__exponent+0x4c>
 8008304:	2330      	movs	r3, #48	; 0x30
 8008306:	3130      	adds	r1, #48	; 0x30
 8008308:	7083      	strb	r3, [r0, #2]
 800830a:	70c1      	strb	r1, [r0, #3]
 800830c:	1d03      	adds	r3, r0, #4
 800830e:	e7f1      	b.n	80082f4 <__exponent+0x60>

08008310 <_printf_float>:
 8008310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008314:	ed2d 8b02 	vpush	{d8}
 8008318:	b08d      	sub	sp, #52	; 0x34
 800831a:	460c      	mov	r4, r1
 800831c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008320:	4616      	mov	r6, r2
 8008322:	461f      	mov	r7, r3
 8008324:	4605      	mov	r5, r0
 8008326:	f001 fd3d 	bl	8009da4 <_localeconv_r>
 800832a:	f8d0 a000 	ldr.w	sl, [r0]
 800832e:	4650      	mov	r0, sl
 8008330:	f7f7 ff4e 	bl	80001d0 <strlen>
 8008334:	2300      	movs	r3, #0
 8008336:	930a      	str	r3, [sp, #40]	; 0x28
 8008338:	6823      	ldr	r3, [r4, #0]
 800833a:	9305      	str	r3, [sp, #20]
 800833c:	f8d8 3000 	ldr.w	r3, [r8]
 8008340:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008344:	3307      	adds	r3, #7
 8008346:	f023 0307 	bic.w	r3, r3, #7
 800834a:	f103 0208 	add.w	r2, r3, #8
 800834e:	f8c8 2000 	str.w	r2, [r8]
 8008352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008356:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800835a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800835e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008362:	9307      	str	r3, [sp, #28]
 8008364:	f8cd 8018 	str.w	r8, [sp, #24]
 8008368:	ee08 0a10 	vmov	s16, r0
 800836c:	4b9f      	ldr	r3, [pc, #636]	; (80085ec <_printf_float+0x2dc>)
 800836e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008372:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008376:	f7f8 fbd9 	bl	8000b2c <__aeabi_dcmpun>
 800837a:	bb88      	cbnz	r0, 80083e0 <_printf_float+0xd0>
 800837c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008380:	4b9a      	ldr	r3, [pc, #616]	; (80085ec <_printf_float+0x2dc>)
 8008382:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008386:	f7f8 fbb3 	bl	8000af0 <__aeabi_dcmple>
 800838a:	bb48      	cbnz	r0, 80083e0 <_printf_float+0xd0>
 800838c:	2200      	movs	r2, #0
 800838e:	2300      	movs	r3, #0
 8008390:	4640      	mov	r0, r8
 8008392:	4649      	mov	r1, r9
 8008394:	f7f8 fba2 	bl	8000adc <__aeabi_dcmplt>
 8008398:	b110      	cbz	r0, 80083a0 <_printf_float+0x90>
 800839a:	232d      	movs	r3, #45	; 0x2d
 800839c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083a0:	4b93      	ldr	r3, [pc, #588]	; (80085f0 <_printf_float+0x2e0>)
 80083a2:	4894      	ldr	r0, [pc, #592]	; (80085f4 <_printf_float+0x2e4>)
 80083a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80083a8:	bf94      	ite	ls
 80083aa:	4698      	movls	r8, r3
 80083ac:	4680      	movhi	r8, r0
 80083ae:	2303      	movs	r3, #3
 80083b0:	6123      	str	r3, [r4, #16]
 80083b2:	9b05      	ldr	r3, [sp, #20]
 80083b4:	f023 0204 	bic.w	r2, r3, #4
 80083b8:	6022      	str	r2, [r4, #0]
 80083ba:	f04f 0900 	mov.w	r9, #0
 80083be:	9700      	str	r7, [sp, #0]
 80083c0:	4633      	mov	r3, r6
 80083c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80083c4:	4621      	mov	r1, r4
 80083c6:	4628      	mov	r0, r5
 80083c8:	f000 f9d8 	bl	800877c <_printf_common>
 80083cc:	3001      	adds	r0, #1
 80083ce:	f040 8090 	bne.w	80084f2 <_printf_float+0x1e2>
 80083d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083d6:	b00d      	add	sp, #52	; 0x34
 80083d8:	ecbd 8b02 	vpop	{d8}
 80083dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e0:	4642      	mov	r2, r8
 80083e2:	464b      	mov	r3, r9
 80083e4:	4640      	mov	r0, r8
 80083e6:	4649      	mov	r1, r9
 80083e8:	f7f8 fba0 	bl	8000b2c <__aeabi_dcmpun>
 80083ec:	b140      	cbz	r0, 8008400 <_printf_float+0xf0>
 80083ee:	464b      	mov	r3, r9
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	bfbc      	itt	lt
 80083f4:	232d      	movlt	r3, #45	; 0x2d
 80083f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80083fa:	487f      	ldr	r0, [pc, #508]	; (80085f8 <_printf_float+0x2e8>)
 80083fc:	4b7f      	ldr	r3, [pc, #508]	; (80085fc <_printf_float+0x2ec>)
 80083fe:	e7d1      	b.n	80083a4 <_printf_float+0x94>
 8008400:	6863      	ldr	r3, [r4, #4]
 8008402:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008406:	9206      	str	r2, [sp, #24]
 8008408:	1c5a      	adds	r2, r3, #1
 800840a:	d13f      	bne.n	800848c <_printf_float+0x17c>
 800840c:	2306      	movs	r3, #6
 800840e:	6063      	str	r3, [r4, #4]
 8008410:	9b05      	ldr	r3, [sp, #20]
 8008412:	6861      	ldr	r1, [r4, #4]
 8008414:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008418:	2300      	movs	r3, #0
 800841a:	9303      	str	r3, [sp, #12]
 800841c:	ab0a      	add	r3, sp, #40	; 0x28
 800841e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008422:	ab09      	add	r3, sp, #36	; 0x24
 8008424:	ec49 8b10 	vmov	d0, r8, r9
 8008428:	9300      	str	r3, [sp, #0]
 800842a:	6022      	str	r2, [r4, #0]
 800842c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008430:	4628      	mov	r0, r5
 8008432:	f7ff fecd 	bl	80081d0 <__cvt>
 8008436:	9b06      	ldr	r3, [sp, #24]
 8008438:	9909      	ldr	r1, [sp, #36]	; 0x24
 800843a:	2b47      	cmp	r3, #71	; 0x47
 800843c:	4680      	mov	r8, r0
 800843e:	d108      	bne.n	8008452 <_printf_float+0x142>
 8008440:	1cc8      	adds	r0, r1, #3
 8008442:	db02      	blt.n	800844a <_printf_float+0x13a>
 8008444:	6863      	ldr	r3, [r4, #4]
 8008446:	4299      	cmp	r1, r3
 8008448:	dd41      	ble.n	80084ce <_printf_float+0x1be>
 800844a:	f1ab 0b02 	sub.w	fp, fp, #2
 800844e:	fa5f fb8b 	uxtb.w	fp, fp
 8008452:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008456:	d820      	bhi.n	800849a <_printf_float+0x18a>
 8008458:	3901      	subs	r1, #1
 800845a:	465a      	mov	r2, fp
 800845c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008460:	9109      	str	r1, [sp, #36]	; 0x24
 8008462:	f7ff ff17 	bl	8008294 <__exponent>
 8008466:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008468:	1813      	adds	r3, r2, r0
 800846a:	2a01      	cmp	r2, #1
 800846c:	4681      	mov	r9, r0
 800846e:	6123      	str	r3, [r4, #16]
 8008470:	dc02      	bgt.n	8008478 <_printf_float+0x168>
 8008472:	6822      	ldr	r2, [r4, #0]
 8008474:	07d2      	lsls	r2, r2, #31
 8008476:	d501      	bpl.n	800847c <_printf_float+0x16c>
 8008478:	3301      	adds	r3, #1
 800847a:	6123      	str	r3, [r4, #16]
 800847c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008480:	2b00      	cmp	r3, #0
 8008482:	d09c      	beq.n	80083be <_printf_float+0xae>
 8008484:	232d      	movs	r3, #45	; 0x2d
 8008486:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800848a:	e798      	b.n	80083be <_printf_float+0xae>
 800848c:	9a06      	ldr	r2, [sp, #24]
 800848e:	2a47      	cmp	r2, #71	; 0x47
 8008490:	d1be      	bne.n	8008410 <_printf_float+0x100>
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1bc      	bne.n	8008410 <_printf_float+0x100>
 8008496:	2301      	movs	r3, #1
 8008498:	e7b9      	b.n	800840e <_printf_float+0xfe>
 800849a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800849e:	d118      	bne.n	80084d2 <_printf_float+0x1c2>
 80084a0:	2900      	cmp	r1, #0
 80084a2:	6863      	ldr	r3, [r4, #4]
 80084a4:	dd0b      	ble.n	80084be <_printf_float+0x1ae>
 80084a6:	6121      	str	r1, [r4, #16]
 80084a8:	b913      	cbnz	r3, 80084b0 <_printf_float+0x1a0>
 80084aa:	6822      	ldr	r2, [r4, #0]
 80084ac:	07d0      	lsls	r0, r2, #31
 80084ae:	d502      	bpl.n	80084b6 <_printf_float+0x1a6>
 80084b0:	3301      	adds	r3, #1
 80084b2:	440b      	add	r3, r1
 80084b4:	6123      	str	r3, [r4, #16]
 80084b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80084b8:	f04f 0900 	mov.w	r9, #0
 80084bc:	e7de      	b.n	800847c <_printf_float+0x16c>
 80084be:	b913      	cbnz	r3, 80084c6 <_printf_float+0x1b6>
 80084c0:	6822      	ldr	r2, [r4, #0]
 80084c2:	07d2      	lsls	r2, r2, #31
 80084c4:	d501      	bpl.n	80084ca <_printf_float+0x1ba>
 80084c6:	3302      	adds	r3, #2
 80084c8:	e7f4      	b.n	80084b4 <_printf_float+0x1a4>
 80084ca:	2301      	movs	r3, #1
 80084cc:	e7f2      	b.n	80084b4 <_printf_float+0x1a4>
 80084ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80084d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084d4:	4299      	cmp	r1, r3
 80084d6:	db05      	blt.n	80084e4 <_printf_float+0x1d4>
 80084d8:	6823      	ldr	r3, [r4, #0]
 80084da:	6121      	str	r1, [r4, #16]
 80084dc:	07d8      	lsls	r0, r3, #31
 80084de:	d5ea      	bpl.n	80084b6 <_printf_float+0x1a6>
 80084e0:	1c4b      	adds	r3, r1, #1
 80084e2:	e7e7      	b.n	80084b4 <_printf_float+0x1a4>
 80084e4:	2900      	cmp	r1, #0
 80084e6:	bfd4      	ite	le
 80084e8:	f1c1 0202 	rsble	r2, r1, #2
 80084ec:	2201      	movgt	r2, #1
 80084ee:	4413      	add	r3, r2
 80084f0:	e7e0      	b.n	80084b4 <_printf_float+0x1a4>
 80084f2:	6823      	ldr	r3, [r4, #0]
 80084f4:	055a      	lsls	r2, r3, #21
 80084f6:	d407      	bmi.n	8008508 <_printf_float+0x1f8>
 80084f8:	6923      	ldr	r3, [r4, #16]
 80084fa:	4642      	mov	r2, r8
 80084fc:	4631      	mov	r1, r6
 80084fe:	4628      	mov	r0, r5
 8008500:	47b8      	blx	r7
 8008502:	3001      	adds	r0, #1
 8008504:	d12c      	bne.n	8008560 <_printf_float+0x250>
 8008506:	e764      	b.n	80083d2 <_printf_float+0xc2>
 8008508:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800850c:	f240 80e0 	bls.w	80086d0 <_printf_float+0x3c0>
 8008510:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008514:	2200      	movs	r2, #0
 8008516:	2300      	movs	r3, #0
 8008518:	f7f8 fad6 	bl	8000ac8 <__aeabi_dcmpeq>
 800851c:	2800      	cmp	r0, #0
 800851e:	d034      	beq.n	800858a <_printf_float+0x27a>
 8008520:	4a37      	ldr	r2, [pc, #220]	; (8008600 <_printf_float+0x2f0>)
 8008522:	2301      	movs	r3, #1
 8008524:	4631      	mov	r1, r6
 8008526:	4628      	mov	r0, r5
 8008528:	47b8      	blx	r7
 800852a:	3001      	adds	r0, #1
 800852c:	f43f af51 	beq.w	80083d2 <_printf_float+0xc2>
 8008530:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008534:	429a      	cmp	r2, r3
 8008536:	db02      	blt.n	800853e <_printf_float+0x22e>
 8008538:	6823      	ldr	r3, [r4, #0]
 800853a:	07d8      	lsls	r0, r3, #31
 800853c:	d510      	bpl.n	8008560 <_printf_float+0x250>
 800853e:	ee18 3a10 	vmov	r3, s16
 8008542:	4652      	mov	r2, sl
 8008544:	4631      	mov	r1, r6
 8008546:	4628      	mov	r0, r5
 8008548:	47b8      	blx	r7
 800854a:	3001      	adds	r0, #1
 800854c:	f43f af41 	beq.w	80083d2 <_printf_float+0xc2>
 8008550:	f04f 0800 	mov.w	r8, #0
 8008554:	f104 091a 	add.w	r9, r4, #26
 8008558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800855a:	3b01      	subs	r3, #1
 800855c:	4543      	cmp	r3, r8
 800855e:	dc09      	bgt.n	8008574 <_printf_float+0x264>
 8008560:	6823      	ldr	r3, [r4, #0]
 8008562:	079b      	lsls	r3, r3, #30
 8008564:	f100 8105 	bmi.w	8008772 <_printf_float+0x462>
 8008568:	68e0      	ldr	r0, [r4, #12]
 800856a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800856c:	4298      	cmp	r0, r3
 800856e:	bfb8      	it	lt
 8008570:	4618      	movlt	r0, r3
 8008572:	e730      	b.n	80083d6 <_printf_float+0xc6>
 8008574:	2301      	movs	r3, #1
 8008576:	464a      	mov	r2, r9
 8008578:	4631      	mov	r1, r6
 800857a:	4628      	mov	r0, r5
 800857c:	47b8      	blx	r7
 800857e:	3001      	adds	r0, #1
 8008580:	f43f af27 	beq.w	80083d2 <_printf_float+0xc2>
 8008584:	f108 0801 	add.w	r8, r8, #1
 8008588:	e7e6      	b.n	8008558 <_printf_float+0x248>
 800858a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800858c:	2b00      	cmp	r3, #0
 800858e:	dc39      	bgt.n	8008604 <_printf_float+0x2f4>
 8008590:	4a1b      	ldr	r2, [pc, #108]	; (8008600 <_printf_float+0x2f0>)
 8008592:	2301      	movs	r3, #1
 8008594:	4631      	mov	r1, r6
 8008596:	4628      	mov	r0, r5
 8008598:	47b8      	blx	r7
 800859a:	3001      	adds	r0, #1
 800859c:	f43f af19 	beq.w	80083d2 <_printf_float+0xc2>
 80085a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085a4:	4313      	orrs	r3, r2
 80085a6:	d102      	bne.n	80085ae <_printf_float+0x29e>
 80085a8:	6823      	ldr	r3, [r4, #0]
 80085aa:	07d9      	lsls	r1, r3, #31
 80085ac:	d5d8      	bpl.n	8008560 <_printf_float+0x250>
 80085ae:	ee18 3a10 	vmov	r3, s16
 80085b2:	4652      	mov	r2, sl
 80085b4:	4631      	mov	r1, r6
 80085b6:	4628      	mov	r0, r5
 80085b8:	47b8      	blx	r7
 80085ba:	3001      	adds	r0, #1
 80085bc:	f43f af09 	beq.w	80083d2 <_printf_float+0xc2>
 80085c0:	f04f 0900 	mov.w	r9, #0
 80085c4:	f104 0a1a 	add.w	sl, r4, #26
 80085c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ca:	425b      	negs	r3, r3
 80085cc:	454b      	cmp	r3, r9
 80085ce:	dc01      	bgt.n	80085d4 <_printf_float+0x2c4>
 80085d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085d2:	e792      	b.n	80084fa <_printf_float+0x1ea>
 80085d4:	2301      	movs	r3, #1
 80085d6:	4652      	mov	r2, sl
 80085d8:	4631      	mov	r1, r6
 80085da:	4628      	mov	r0, r5
 80085dc:	47b8      	blx	r7
 80085de:	3001      	adds	r0, #1
 80085e0:	f43f aef7 	beq.w	80083d2 <_printf_float+0xc2>
 80085e4:	f109 0901 	add.w	r9, r9, #1
 80085e8:	e7ee      	b.n	80085c8 <_printf_float+0x2b8>
 80085ea:	bf00      	nop
 80085ec:	7fefffff 	.word	0x7fefffff
 80085f0:	0800da14 	.word	0x0800da14
 80085f4:	0800da18 	.word	0x0800da18
 80085f8:	0800da20 	.word	0x0800da20
 80085fc:	0800da1c 	.word	0x0800da1c
 8008600:	0800da24 	.word	0x0800da24
 8008604:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008606:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008608:	429a      	cmp	r2, r3
 800860a:	bfa8      	it	ge
 800860c:	461a      	movge	r2, r3
 800860e:	2a00      	cmp	r2, #0
 8008610:	4691      	mov	r9, r2
 8008612:	dc37      	bgt.n	8008684 <_printf_float+0x374>
 8008614:	f04f 0b00 	mov.w	fp, #0
 8008618:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800861c:	f104 021a 	add.w	r2, r4, #26
 8008620:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008622:	9305      	str	r3, [sp, #20]
 8008624:	eba3 0309 	sub.w	r3, r3, r9
 8008628:	455b      	cmp	r3, fp
 800862a:	dc33      	bgt.n	8008694 <_printf_float+0x384>
 800862c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008630:	429a      	cmp	r2, r3
 8008632:	db3b      	blt.n	80086ac <_printf_float+0x39c>
 8008634:	6823      	ldr	r3, [r4, #0]
 8008636:	07da      	lsls	r2, r3, #31
 8008638:	d438      	bmi.n	80086ac <_printf_float+0x39c>
 800863a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800863c:	9a05      	ldr	r2, [sp, #20]
 800863e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008640:	1a9a      	subs	r2, r3, r2
 8008642:	eba3 0901 	sub.w	r9, r3, r1
 8008646:	4591      	cmp	r9, r2
 8008648:	bfa8      	it	ge
 800864a:	4691      	movge	r9, r2
 800864c:	f1b9 0f00 	cmp.w	r9, #0
 8008650:	dc35      	bgt.n	80086be <_printf_float+0x3ae>
 8008652:	f04f 0800 	mov.w	r8, #0
 8008656:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800865a:	f104 0a1a 	add.w	sl, r4, #26
 800865e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008662:	1a9b      	subs	r3, r3, r2
 8008664:	eba3 0309 	sub.w	r3, r3, r9
 8008668:	4543      	cmp	r3, r8
 800866a:	f77f af79 	ble.w	8008560 <_printf_float+0x250>
 800866e:	2301      	movs	r3, #1
 8008670:	4652      	mov	r2, sl
 8008672:	4631      	mov	r1, r6
 8008674:	4628      	mov	r0, r5
 8008676:	47b8      	blx	r7
 8008678:	3001      	adds	r0, #1
 800867a:	f43f aeaa 	beq.w	80083d2 <_printf_float+0xc2>
 800867e:	f108 0801 	add.w	r8, r8, #1
 8008682:	e7ec      	b.n	800865e <_printf_float+0x34e>
 8008684:	4613      	mov	r3, r2
 8008686:	4631      	mov	r1, r6
 8008688:	4642      	mov	r2, r8
 800868a:	4628      	mov	r0, r5
 800868c:	47b8      	blx	r7
 800868e:	3001      	adds	r0, #1
 8008690:	d1c0      	bne.n	8008614 <_printf_float+0x304>
 8008692:	e69e      	b.n	80083d2 <_printf_float+0xc2>
 8008694:	2301      	movs	r3, #1
 8008696:	4631      	mov	r1, r6
 8008698:	4628      	mov	r0, r5
 800869a:	9205      	str	r2, [sp, #20]
 800869c:	47b8      	blx	r7
 800869e:	3001      	adds	r0, #1
 80086a0:	f43f ae97 	beq.w	80083d2 <_printf_float+0xc2>
 80086a4:	9a05      	ldr	r2, [sp, #20]
 80086a6:	f10b 0b01 	add.w	fp, fp, #1
 80086aa:	e7b9      	b.n	8008620 <_printf_float+0x310>
 80086ac:	ee18 3a10 	vmov	r3, s16
 80086b0:	4652      	mov	r2, sl
 80086b2:	4631      	mov	r1, r6
 80086b4:	4628      	mov	r0, r5
 80086b6:	47b8      	blx	r7
 80086b8:	3001      	adds	r0, #1
 80086ba:	d1be      	bne.n	800863a <_printf_float+0x32a>
 80086bc:	e689      	b.n	80083d2 <_printf_float+0xc2>
 80086be:	9a05      	ldr	r2, [sp, #20]
 80086c0:	464b      	mov	r3, r9
 80086c2:	4442      	add	r2, r8
 80086c4:	4631      	mov	r1, r6
 80086c6:	4628      	mov	r0, r5
 80086c8:	47b8      	blx	r7
 80086ca:	3001      	adds	r0, #1
 80086cc:	d1c1      	bne.n	8008652 <_printf_float+0x342>
 80086ce:	e680      	b.n	80083d2 <_printf_float+0xc2>
 80086d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086d2:	2a01      	cmp	r2, #1
 80086d4:	dc01      	bgt.n	80086da <_printf_float+0x3ca>
 80086d6:	07db      	lsls	r3, r3, #31
 80086d8:	d538      	bpl.n	800874c <_printf_float+0x43c>
 80086da:	2301      	movs	r3, #1
 80086dc:	4642      	mov	r2, r8
 80086de:	4631      	mov	r1, r6
 80086e0:	4628      	mov	r0, r5
 80086e2:	47b8      	blx	r7
 80086e4:	3001      	adds	r0, #1
 80086e6:	f43f ae74 	beq.w	80083d2 <_printf_float+0xc2>
 80086ea:	ee18 3a10 	vmov	r3, s16
 80086ee:	4652      	mov	r2, sl
 80086f0:	4631      	mov	r1, r6
 80086f2:	4628      	mov	r0, r5
 80086f4:	47b8      	blx	r7
 80086f6:	3001      	adds	r0, #1
 80086f8:	f43f ae6b 	beq.w	80083d2 <_printf_float+0xc2>
 80086fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008700:	2200      	movs	r2, #0
 8008702:	2300      	movs	r3, #0
 8008704:	f7f8 f9e0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008708:	b9d8      	cbnz	r0, 8008742 <_printf_float+0x432>
 800870a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800870c:	f108 0201 	add.w	r2, r8, #1
 8008710:	3b01      	subs	r3, #1
 8008712:	4631      	mov	r1, r6
 8008714:	4628      	mov	r0, r5
 8008716:	47b8      	blx	r7
 8008718:	3001      	adds	r0, #1
 800871a:	d10e      	bne.n	800873a <_printf_float+0x42a>
 800871c:	e659      	b.n	80083d2 <_printf_float+0xc2>
 800871e:	2301      	movs	r3, #1
 8008720:	4652      	mov	r2, sl
 8008722:	4631      	mov	r1, r6
 8008724:	4628      	mov	r0, r5
 8008726:	47b8      	blx	r7
 8008728:	3001      	adds	r0, #1
 800872a:	f43f ae52 	beq.w	80083d2 <_printf_float+0xc2>
 800872e:	f108 0801 	add.w	r8, r8, #1
 8008732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008734:	3b01      	subs	r3, #1
 8008736:	4543      	cmp	r3, r8
 8008738:	dcf1      	bgt.n	800871e <_printf_float+0x40e>
 800873a:	464b      	mov	r3, r9
 800873c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008740:	e6dc      	b.n	80084fc <_printf_float+0x1ec>
 8008742:	f04f 0800 	mov.w	r8, #0
 8008746:	f104 0a1a 	add.w	sl, r4, #26
 800874a:	e7f2      	b.n	8008732 <_printf_float+0x422>
 800874c:	2301      	movs	r3, #1
 800874e:	4642      	mov	r2, r8
 8008750:	e7df      	b.n	8008712 <_printf_float+0x402>
 8008752:	2301      	movs	r3, #1
 8008754:	464a      	mov	r2, r9
 8008756:	4631      	mov	r1, r6
 8008758:	4628      	mov	r0, r5
 800875a:	47b8      	blx	r7
 800875c:	3001      	adds	r0, #1
 800875e:	f43f ae38 	beq.w	80083d2 <_printf_float+0xc2>
 8008762:	f108 0801 	add.w	r8, r8, #1
 8008766:	68e3      	ldr	r3, [r4, #12]
 8008768:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800876a:	1a5b      	subs	r3, r3, r1
 800876c:	4543      	cmp	r3, r8
 800876e:	dcf0      	bgt.n	8008752 <_printf_float+0x442>
 8008770:	e6fa      	b.n	8008568 <_printf_float+0x258>
 8008772:	f04f 0800 	mov.w	r8, #0
 8008776:	f104 0919 	add.w	r9, r4, #25
 800877a:	e7f4      	b.n	8008766 <_printf_float+0x456>

0800877c <_printf_common>:
 800877c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008780:	4616      	mov	r6, r2
 8008782:	4699      	mov	r9, r3
 8008784:	688a      	ldr	r2, [r1, #8]
 8008786:	690b      	ldr	r3, [r1, #16]
 8008788:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800878c:	4293      	cmp	r3, r2
 800878e:	bfb8      	it	lt
 8008790:	4613      	movlt	r3, r2
 8008792:	6033      	str	r3, [r6, #0]
 8008794:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008798:	4607      	mov	r7, r0
 800879a:	460c      	mov	r4, r1
 800879c:	b10a      	cbz	r2, 80087a2 <_printf_common+0x26>
 800879e:	3301      	adds	r3, #1
 80087a0:	6033      	str	r3, [r6, #0]
 80087a2:	6823      	ldr	r3, [r4, #0]
 80087a4:	0699      	lsls	r1, r3, #26
 80087a6:	bf42      	ittt	mi
 80087a8:	6833      	ldrmi	r3, [r6, #0]
 80087aa:	3302      	addmi	r3, #2
 80087ac:	6033      	strmi	r3, [r6, #0]
 80087ae:	6825      	ldr	r5, [r4, #0]
 80087b0:	f015 0506 	ands.w	r5, r5, #6
 80087b4:	d106      	bne.n	80087c4 <_printf_common+0x48>
 80087b6:	f104 0a19 	add.w	sl, r4, #25
 80087ba:	68e3      	ldr	r3, [r4, #12]
 80087bc:	6832      	ldr	r2, [r6, #0]
 80087be:	1a9b      	subs	r3, r3, r2
 80087c0:	42ab      	cmp	r3, r5
 80087c2:	dc26      	bgt.n	8008812 <_printf_common+0x96>
 80087c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087c8:	1e13      	subs	r3, r2, #0
 80087ca:	6822      	ldr	r2, [r4, #0]
 80087cc:	bf18      	it	ne
 80087ce:	2301      	movne	r3, #1
 80087d0:	0692      	lsls	r2, r2, #26
 80087d2:	d42b      	bmi.n	800882c <_printf_common+0xb0>
 80087d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087d8:	4649      	mov	r1, r9
 80087da:	4638      	mov	r0, r7
 80087dc:	47c0      	blx	r8
 80087de:	3001      	adds	r0, #1
 80087e0:	d01e      	beq.n	8008820 <_printf_common+0xa4>
 80087e2:	6823      	ldr	r3, [r4, #0]
 80087e4:	68e5      	ldr	r5, [r4, #12]
 80087e6:	6832      	ldr	r2, [r6, #0]
 80087e8:	f003 0306 	and.w	r3, r3, #6
 80087ec:	2b04      	cmp	r3, #4
 80087ee:	bf08      	it	eq
 80087f0:	1aad      	subeq	r5, r5, r2
 80087f2:	68a3      	ldr	r3, [r4, #8]
 80087f4:	6922      	ldr	r2, [r4, #16]
 80087f6:	bf0c      	ite	eq
 80087f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087fc:	2500      	movne	r5, #0
 80087fe:	4293      	cmp	r3, r2
 8008800:	bfc4      	itt	gt
 8008802:	1a9b      	subgt	r3, r3, r2
 8008804:	18ed      	addgt	r5, r5, r3
 8008806:	2600      	movs	r6, #0
 8008808:	341a      	adds	r4, #26
 800880a:	42b5      	cmp	r5, r6
 800880c:	d11a      	bne.n	8008844 <_printf_common+0xc8>
 800880e:	2000      	movs	r0, #0
 8008810:	e008      	b.n	8008824 <_printf_common+0xa8>
 8008812:	2301      	movs	r3, #1
 8008814:	4652      	mov	r2, sl
 8008816:	4649      	mov	r1, r9
 8008818:	4638      	mov	r0, r7
 800881a:	47c0      	blx	r8
 800881c:	3001      	adds	r0, #1
 800881e:	d103      	bne.n	8008828 <_printf_common+0xac>
 8008820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008828:	3501      	adds	r5, #1
 800882a:	e7c6      	b.n	80087ba <_printf_common+0x3e>
 800882c:	18e1      	adds	r1, r4, r3
 800882e:	1c5a      	adds	r2, r3, #1
 8008830:	2030      	movs	r0, #48	; 0x30
 8008832:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008836:	4422      	add	r2, r4
 8008838:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800883c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008840:	3302      	adds	r3, #2
 8008842:	e7c7      	b.n	80087d4 <_printf_common+0x58>
 8008844:	2301      	movs	r3, #1
 8008846:	4622      	mov	r2, r4
 8008848:	4649      	mov	r1, r9
 800884a:	4638      	mov	r0, r7
 800884c:	47c0      	blx	r8
 800884e:	3001      	adds	r0, #1
 8008850:	d0e6      	beq.n	8008820 <_printf_common+0xa4>
 8008852:	3601      	adds	r6, #1
 8008854:	e7d9      	b.n	800880a <_printf_common+0x8e>
	...

08008858 <_printf_i>:
 8008858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800885c:	7e0f      	ldrb	r7, [r1, #24]
 800885e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008860:	2f78      	cmp	r7, #120	; 0x78
 8008862:	4691      	mov	r9, r2
 8008864:	4680      	mov	r8, r0
 8008866:	460c      	mov	r4, r1
 8008868:	469a      	mov	sl, r3
 800886a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800886e:	d807      	bhi.n	8008880 <_printf_i+0x28>
 8008870:	2f62      	cmp	r7, #98	; 0x62
 8008872:	d80a      	bhi.n	800888a <_printf_i+0x32>
 8008874:	2f00      	cmp	r7, #0
 8008876:	f000 80d8 	beq.w	8008a2a <_printf_i+0x1d2>
 800887a:	2f58      	cmp	r7, #88	; 0x58
 800887c:	f000 80a3 	beq.w	80089c6 <_printf_i+0x16e>
 8008880:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008884:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008888:	e03a      	b.n	8008900 <_printf_i+0xa8>
 800888a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800888e:	2b15      	cmp	r3, #21
 8008890:	d8f6      	bhi.n	8008880 <_printf_i+0x28>
 8008892:	a101      	add	r1, pc, #4	; (adr r1, 8008898 <_printf_i+0x40>)
 8008894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008898:	080088f1 	.word	0x080088f1
 800889c:	08008905 	.word	0x08008905
 80088a0:	08008881 	.word	0x08008881
 80088a4:	08008881 	.word	0x08008881
 80088a8:	08008881 	.word	0x08008881
 80088ac:	08008881 	.word	0x08008881
 80088b0:	08008905 	.word	0x08008905
 80088b4:	08008881 	.word	0x08008881
 80088b8:	08008881 	.word	0x08008881
 80088bc:	08008881 	.word	0x08008881
 80088c0:	08008881 	.word	0x08008881
 80088c4:	08008a11 	.word	0x08008a11
 80088c8:	08008935 	.word	0x08008935
 80088cc:	080089f3 	.word	0x080089f3
 80088d0:	08008881 	.word	0x08008881
 80088d4:	08008881 	.word	0x08008881
 80088d8:	08008a33 	.word	0x08008a33
 80088dc:	08008881 	.word	0x08008881
 80088e0:	08008935 	.word	0x08008935
 80088e4:	08008881 	.word	0x08008881
 80088e8:	08008881 	.word	0x08008881
 80088ec:	080089fb 	.word	0x080089fb
 80088f0:	682b      	ldr	r3, [r5, #0]
 80088f2:	1d1a      	adds	r2, r3, #4
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	602a      	str	r2, [r5, #0]
 80088f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008900:	2301      	movs	r3, #1
 8008902:	e0a3      	b.n	8008a4c <_printf_i+0x1f4>
 8008904:	6820      	ldr	r0, [r4, #0]
 8008906:	6829      	ldr	r1, [r5, #0]
 8008908:	0606      	lsls	r6, r0, #24
 800890a:	f101 0304 	add.w	r3, r1, #4
 800890e:	d50a      	bpl.n	8008926 <_printf_i+0xce>
 8008910:	680e      	ldr	r6, [r1, #0]
 8008912:	602b      	str	r3, [r5, #0]
 8008914:	2e00      	cmp	r6, #0
 8008916:	da03      	bge.n	8008920 <_printf_i+0xc8>
 8008918:	232d      	movs	r3, #45	; 0x2d
 800891a:	4276      	negs	r6, r6
 800891c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008920:	485e      	ldr	r0, [pc, #376]	; (8008a9c <_printf_i+0x244>)
 8008922:	230a      	movs	r3, #10
 8008924:	e019      	b.n	800895a <_printf_i+0x102>
 8008926:	680e      	ldr	r6, [r1, #0]
 8008928:	602b      	str	r3, [r5, #0]
 800892a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800892e:	bf18      	it	ne
 8008930:	b236      	sxthne	r6, r6
 8008932:	e7ef      	b.n	8008914 <_printf_i+0xbc>
 8008934:	682b      	ldr	r3, [r5, #0]
 8008936:	6820      	ldr	r0, [r4, #0]
 8008938:	1d19      	adds	r1, r3, #4
 800893a:	6029      	str	r1, [r5, #0]
 800893c:	0601      	lsls	r1, r0, #24
 800893e:	d501      	bpl.n	8008944 <_printf_i+0xec>
 8008940:	681e      	ldr	r6, [r3, #0]
 8008942:	e002      	b.n	800894a <_printf_i+0xf2>
 8008944:	0646      	lsls	r6, r0, #25
 8008946:	d5fb      	bpl.n	8008940 <_printf_i+0xe8>
 8008948:	881e      	ldrh	r6, [r3, #0]
 800894a:	4854      	ldr	r0, [pc, #336]	; (8008a9c <_printf_i+0x244>)
 800894c:	2f6f      	cmp	r7, #111	; 0x6f
 800894e:	bf0c      	ite	eq
 8008950:	2308      	moveq	r3, #8
 8008952:	230a      	movne	r3, #10
 8008954:	2100      	movs	r1, #0
 8008956:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800895a:	6865      	ldr	r5, [r4, #4]
 800895c:	60a5      	str	r5, [r4, #8]
 800895e:	2d00      	cmp	r5, #0
 8008960:	bfa2      	ittt	ge
 8008962:	6821      	ldrge	r1, [r4, #0]
 8008964:	f021 0104 	bicge.w	r1, r1, #4
 8008968:	6021      	strge	r1, [r4, #0]
 800896a:	b90e      	cbnz	r6, 8008970 <_printf_i+0x118>
 800896c:	2d00      	cmp	r5, #0
 800896e:	d04d      	beq.n	8008a0c <_printf_i+0x1b4>
 8008970:	4615      	mov	r5, r2
 8008972:	fbb6 f1f3 	udiv	r1, r6, r3
 8008976:	fb03 6711 	mls	r7, r3, r1, r6
 800897a:	5dc7      	ldrb	r7, [r0, r7]
 800897c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008980:	4637      	mov	r7, r6
 8008982:	42bb      	cmp	r3, r7
 8008984:	460e      	mov	r6, r1
 8008986:	d9f4      	bls.n	8008972 <_printf_i+0x11a>
 8008988:	2b08      	cmp	r3, #8
 800898a:	d10b      	bne.n	80089a4 <_printf_i+0x14c>
 800898c:	6823      	ldr	r3, [r4, #0]
 800898e:	07de      	lsls	r6, r3, #31
 8008990:	d508      	bpl.n	80089a4 <_printf_i+0x14c>
 8008992:	6923      	ldr	r3, [r4, #16]
 8008994:	6861      	ldr	r1, [r4, #4]
 8008996:	4299      	cmp	r1, r3
 8008998:	bfde      	ittt	le
 800899a:	2330      	movle	r3, #48	; 0x30
 800899c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80089a0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80089a4:	1b52      	subs	r2, r2, r5
 80089a6:	6122      	str	r2, [r4, #16]
 80089a8:	f8cd a000 	str.w	sl, [sp]
 80089ac:	464b      	mov	r3, r9
 80089ae:	aa03      	add	r2, sp, #12
 80089b0:	4621      	mov	r1, r4
 80089b2:	4640      	mov	r0, r8
 80089b4:	f7ff fee2 	bl	800877c <_printf_common>
 80089b8:	3001      	adds	r0, #1
 80089ba:	d14c      	bne.n	8008a56 <_printf_i+0x1fe>
 80089bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089c0:	b004      	add	sp, #16
 80089c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089c6:	4835      	ldr	r0, [pc, #212]	; (8008a9c <_printf_i+0x244>)
 80089c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80089cc:	6829      	ldr	r1, [r5, #0]
 80089ce:	6823      	ldr	r3, [r4, #0]
 80089d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80089d4:	6029      	str	r1, [r5, #0]
 80089d6:	061d      	lsls	r5, r3, #24
 80089d8:	d514      	bpl.n	8008a04 <_printf_i+0x1ac>
 80089da:	07df      	lsls	r7, r3, #31
 80089dc:	bf44      	itt	mi
 80089de:	f043 0320 	orrmi.w	r3, r3, #32
 80089e2:	6023      	strmi	r3, [r4, #0]
 80089e4:	b91e      	cbnz	r6, 80089ee <_printf_i+0x196>
 80089e6:	6823      	ldr	r3, [r4, #0]
 80089e8:	f023 0320 	bic.w	r3, r3, #32
 80089ec:	6023      	str	r3, [r4, #0]
 80089ee:	2310      	movs	r3, #16
 80089f0:	e7b0      	b.n	8008954 <_printf_i+0xfc>
 80089f2:	6823      	ldr	r3, [r4, #0]
 80089f4:	f043 0320 	orr.w	r3, r3, #32
 80089f8:	6023      	str	r3, [r4, #0]
 80089fa:	2378      	movs	r3, #120	; 0x78
 80089fc:	4828      	ldr	r0, [pc, #160]	; (8008aa0 <_printf_i+0x248>)
 80089fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a02:	e7e3      	b.n	80089cc <_printf_i+0x174>
 8008a04:	0659      	lsls	r1, r3, #25
 8008a06:	bf48      	it	mi
 8008a08:	b2b6      	uxthmi	r6, r6
 8008a0a:	e7e6      	b.n	80089da <_printf_i+0x182>
 8008a0c:	4615      	mov	r5, r2
 8008a0e:	e7bb      	b.n	8008988 <_printf_i+0x130>
 8008a10:	682b      	ldr	r3, [r5, #0]
 8008a12:	6826      	ldr	r6, [r4, #0]
 8008a14:	6961      	ldr	r1, [r4, #20]
 8008a16:	1d18      	adds	r0, r3, #4
 8008a18:	6028      	str	r0, [r5, #0]
 8008a1a:	0635      	lsls	r5, r6, #24
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	d501      	bpl.n	8008a24 <_printf_i+0x1cc>
 8008a20:	6019      	str	r1, [r3, #0]
 8008a22:	e002      	b.n	8008a2a <_printf_i+0x1d2>
 8008a24:	0670      	lsls	r0, r6, #25
 8008a26:	d5fb      	bpl.n	8008a20 <_printf_i+0x1c8>
 8008a28:	8019      	strh	r1, [r3, #0]
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	6123      	str	r3, [r4, #16]
 8008a2e:	4615      	mov	r5, r2
 8008a30:	e7ba      	b.n	80089a8 <_printf_i+0x150>
 8008a32:	682b      	ldr	r3, [r5, #0]
 8008a34:	1d1a      	adds	r2, r3, #4
 8008a36:	602a      	str	r2, [r5, #0]
 8008a38:	681d      	ldr	r5, [r3, #0]
 8008a3a:	6862      	ldr	r2, [r4, #4]
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	4628      	mov	r0, r5
 8008a40:	f7f7 fbce 	bl	80001e0 <memchr>
 8008a44:	b108      	cbz	r0, 8008a4a <_printf_i+0x1f2>
 8008a46:	1b40      	subs	r0, r0, r5
 8008a48:	6060      	str	r0, [r4, #4]
 8008a4a:	6863      	ldr	r3, [r4, #4]
 8008a4c:	6123      	str	r3, [r4, #16]
 8008a4e:	2300      	movs	r3, #0
 8008a50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a54:	e7a8      	b.n	80089a8 <_printf_i+0x150>
 8008a56:	6923      	ldr	r3, [r4, #16]
 8008a58:	462a      	mov	r2, r5
 8008a5a:	4649      	mov	r1, r9
 8008a5c:	4640      	mov	r0, r8
 8008a5e:	47d0      	blx	sl
 8008a60:	3001      	adds	r0, #1
 8008a62:	d0ab      	beq.n	80089bc <_printf_i+0x164>
 8008a64:	6823      	ldr	r3, [r4, #0]
 8008a66:	079b      	lsls	r3, r3, #30
 8008a68:	d413      	bmi.n	8008a92 <_printf_i+0x23a>
 8008a6a:	68e0      	ldr	r0, [r4, #12]
 8008a6c:	9b03      	ldr	r3, [sp, #12]
 8008a6e:	4298      	cmp	r0, r3
 8008a70:	bfb8      	it	lt
 8008a72:	4618      	movlt	r0, r3
 8008a74:	e7a4      	b.n	80089c0 <_printf_i+0x168>
 8008a76:	2301      	movs	r3, #1
 8008a78:	4632      	mov	r2, r6
 8008a7a:	4649      	mov	r1, r9
 8008a7c:	4640      	mov	r0, r8
 8008a7e:	47d0      	blx	sl
 8008a80:	3001      	adds	r0, #1
 8008a82:	d09b      	beq.n	80089bc <_printf_i+0x164>
 8008a84:	3501      	adds	r5, #1
 8008a86:	68e3      	ldr	r3, [r4, #12]
 8008a88:	9903      	ldr	r1, [sp, #12]
 8008a8a:	1a5b      	subs	r3, r3, r1
 8008a8c:	42ab      	cmp	r3, r5
 8008a8e:	dcf2      	bgt.n	8008a76 <_printf_i+0x21e>
 8008a90:	e7eb      	b.n	8008a6a <_printf_i+0x212>
 8008a92:	2500      	movs	r5, #0
 8008a94:	f104 0619 	add.w	r6, r4, #25
 8008a98:	e7f5      	b.n	8008a86 <_printf_i+0x22e>
 8008a9a:	bf00      	nop
 8008a9c:	0800da26 	.word	0x0800da26
 8008aa0:	0800da37 	.word	0x0800da37

08008aa4 <iprintf>:
 8008aa4:	b40f      	push	{r0, r1, r2, r3}
 8008aa6:	4b0a      	ldr	r3, [pc, #40]	; (8008ad0 <iprintf+0x2c>)
 8008aa8:	b513      	push	{r0, r1, r4, lr}
 8008aaa:	681c      	ldr	r4, [r3, #0]
 8008aac:	b124      	cbz	r4, 8008ab8 <iprintf+0x14>
 8008aae:	69a3      	ldr	r3, [r4, #24]
 8008ab0:	b913      	cbnz	r3, 8008ab8 <iprintf+0x14>
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f001 f8d8 	bl	8009c68 <__sinit>
 8008ab8:	ab05      	add	r3, sp, #20
 8008aba:	9a04      	ldr	r2, [sp, #16]
 8008abc:	68a1      	ldr	r1, [r4, #8]
 8008abe:	9301      	str	r3, [sp, #4]
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	f001 fe87 	bl	800a7d4 <_vfiprintf_r>
 8008ac6:	b002      	add	sp, #8
 8008ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008acc:	b004      	add	sp, #16
 8008ace:	4770      	bx	lr
 8008ad0:	2000000c 	.word	0x2000000c

08008ad4 <_puts_r>:
 8008ad4:	b570      	push	{r4, r5, r6, lr}
 8008ad6:	460e      	mov	r6, r1
 8008ad8:	4605      	mov	r5, r0
 8008ada:	b118      	cbz	r0, 8008ae4 <_puts_r+0x10>
 8008adc:	6983      	ldr	r3, [r0, #24]
 8008ade:	b90b      	cbnz	r3, 8008ae4 <_puts_r+0x10>
 8008ae0:	f001 f8c2 	bl	8009c68 <__sinit>
 8008ae4:	69ab      	ldr	r3, [r5, #24]
 8008ae6:	68ac      	ldr	r4, [r5, #8]
 8008ae8:	b913      	cbnz	r3, 8008af0 <_puts_r+0x1c>
 8008aea:	4628      	mov	r0, r5
 8008aec:	f001 f8bc 	bl	8009c68 <__sinit>
 8008af0:	4b2c      	ldr	r3, [pc, #176]	; (8008ba4 <_puts_r+0xd0>)
 8008af2:	429c      	cmp	r4, r3
 8008af4:	d120      	bne.n	8008b38 <_puts_r+0x64>
 8008af6:	686c      	ldr	r4, [r5, #4]
 8008af8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008afa:	07db      	lsls	r3, r3, #31
 8008afc:	d405      	bmi.n	8008b0a <_puts_r+0x36>
 8008afe:	89a3      	ldrh	r3, [r4, #12]
 8008b00:	0598      	lsls	r0, r3, #22
 8008b02:	d402      	bmi.n	8008b0a <_puts_r+0x36>
 8008b04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b06:	f001 f952 	bl	8009dae <__retarget_lock_acquire_recursive>
 8008b0a:	89a3      	ldrh	r3, [r4, #12]
 8008b0c:	0719      	lsls	r1, r3, #28
 8008b0e:	d51d      	bpl.n	8008b4c <_puts_r+0x78>
 8008b10:	6923      	ldr	r3, [r4, #16]
 8008b12:	b1db      	cbz	r3, 8008b4c <_puts_r+0x78>
 8008b14:	3e01      	subs	r6, #1
 8008b16:	68a3      	ldr	r3, [r4, #8]
 8008b18:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	60a3      	str	r3, [r4, #8]
 8008b20:	bb39      	cbnz	r1, 8008b72 <_puts_r+0x9e>
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	da38      	bge.n	8008b98 <_puts_r+0xc4>
 8008b26:	4622      	mov	r2, r4
 8008b28:	210a      	movs	r1, #10
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	f000 f848 	bl	8008bc0 <__swbuf_r>
 8008b30:	3001      	adds	r0, #1
 8008b32:	d011      	beq.n	8008b58 <_puts_r+0x84>
 8008b34:	250a      	movs	r5, #10
 8008b36:	e011      	b.n	8008b5c <_puts_r+0x88>
 8008b38:	4b1b      	ldr	r3, [pc, #108]	; (8008ba8 <_puts_r+0xd4>)
 8008b3a:	429c      	cmp	r4, r3
 8008b3c:	d101      	bne.n	8008b42 <_puts_r+0x6e>
 8008b3e:	68ac      	ldr	r4, [r5, #8]
 8008b40:	e7da      	b.n	8008af8 <_puts_r+0x24>
 8008b42:	4b1a      	ldr	r3, [pc, #104]	; (8008bac <_puts_r+0xd8>)
 8008b44:	429c      	cmp	r4, r3
 8008b46:	bf08      	it	eq
 8008b48:	68ec      	ldreq	r4, [r5, #12]
 8008b4a:	e7d5      	b.n	8008af8 <_puts_r+0x24>
 8008b4c:	4621      	mov	r1, r4
 8008b4e:	4628      	mov	r0, r5
 8008b50:	f000 f888 	bl	8008c64 <__swsetup_r>
 8008b54:	2800      	cmp	r0, #0
 8008b56:	d0dd      	beq.n	8008b14 <_puts_r+0x40>
 8008b58:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008b5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b5e:	07da      	lsls	r2, r3, #31
 8008b60:	d405      	bmi.n	8008b6e <_puts_r+0x9a>
 8008b62:	89a3      	ldrh	r3, [r4, #12]
 8008b64:	059b      	lsls	r3, r3, #22
 8008b66:	d402      	bmi.n	8008b6e <_puts_r+0x9a>
 8008b68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b6a:	f001 f921 	bl	8009db0 <__retarget_lock_release_recursive>
 8008b6e:	4628      	mov	r0, r5
 8008b70:	bd70      	pop	{r4, r5, r6, pc}
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	da04      	bge.n	8008b80 <_puts_r+0xac>
 8008b76:	69a2      	ldr	r2, [r4, #24]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	dc06      	bgt.n	8008b8a <_puts_r+0xb6>
 8008b7c:	290a      	cmp	r1, #10
 8008b7e:	d004      	beq.n	8008b8a <_puts_r+0xb6>
 8008b80:	6823      	ldr	r3, [r4, #0]
 8008b82:	1c5a      	adds	r2, r3, #1
 8008b84:	6022      	str	r2, [r4, #0]
 8008b86:	7019      	strb	r1, [r3, #0]
 8008b88:	e7c5      	b.n	8008b16 <_puts_r+0x42>
 8008b8a:	4622      	mov	r2, r4
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	f000 f817 	bl	8008bc0 <__swbuf_r>
 8008b92:	3001      	adds	r0, #1
 8008b94:	d1bf      	bne.n	8008b16 <_puts_r+0x42>
 8008b96:	e7df      	b.n	8008b58 <_puts_r+0x84>
 8008b98:	6823      	ldr	r3, [r4, #0]
 8008b9a:	250a      	movs	r5, #10
 8008b9c:	1c5a      	adds	r2, r3, #1
 8008b9e:	6022      	str	r2, [r4, #0]
 8008ba0:	701d      	strb	r5, [r3, #0]
 8008ba2:	e7db      	b.n	8008b5c <_puts_r+0x88>
 8008ba4:	0800daf8 	.word	0x0800daf8
 8008ba8:	0800db18 	.word	0x0800db18
 8008bac:	0800dad8 	.word	0x0800dad8

08008bb0 <puts>:
 8008bb0:	4b02      	ldr	r3, [pc, #8]	; (8008bbc <puts+0xc>)
 8008bb2:	4601      	mov	r1, r0
 8008bb4:	6818      	ldr	r0, [r3, #0]
 8008bb6:	f7ff bf8d 	b.w	8008ad4 <_puts_r>
 8008bba:	bf00      	nop
 8008bbc:	2000000c 	.word	0x2000000c

08008bc0 <__swbuf_r>:
 8008bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc2:	460e      	mov	r6, r1
 8008bc4:	4614      	mov	r4, r2
 8008bc6:	4605      	mov	r5, r0
 8008bc8:	b118      	cbz	r0, 8008bd2 <__swbuf_r+0x12>
 8008bca:	6983      	ldr	r3, [r0, #24]
 8008bcc:	b90b      	cbnz	r3, 8008bd2 <__swbuf_r+0x12>
 8008bce:	f001 f84b 	bl	8009c68 <__sinit>
 8008bd2:	4b21      	ldr	r3, [pc, #132]	; (8008c58 <__swbuf_r+0x98>)
 8008bd4:	429c      	cmp	r4, r3
 8008bd6:	d12b      	bne.n	8008c30 <__swbuf_r+0x70>
 8008bd8:	686c      	ldr	r4, [r5, #4]
 8008bda:	69a3      	ldr	r3, [r4, #24]
 8008bdc:	60a3      	str	r3, [r4, #8]
 8008bde:	89a3      	ldrh	r3, [r4, #12]
 8008be0:	071a      	lsls	r2, r3, #28
 8008be2:	d52f      	bpl.n	8008c44 <__swbuf_r+0x84>
 8008be4:	6923      	ldr	r3, [r4, #16]
 8008be6:	b36b      	cbz	r3, 8008c44 <__swbuf_r+0x84>
 8008be8:	6923      	ldr	r3, [r4, #16]
 8008bea:	6820      	ldr	r0, [r4, #0]
 8008bec:	1ac0      	subs	r0, r0, r3
 8008bee:	6963      	ldr	r3, [r4, #20]
 8008bf0:	b2f6      	uxtb	r6, r6
 8008bf2:	4283      	cmp	r3, r0
 8008bf4:	4637      	mov	r7, r6
 8008bf6:	dc04      	bgt.n	8008c02 <__swbuf_r+0x42>
 8008bf8:	4621      	mov	r1, r4
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	f000 ffa0 	bl	8009b40 <_fflush_r>
 8008c00:	bb30      	cbnz	r0, 8008c50 <__swbuf_r+0x90>
 8008c02:	68a3      	ldr	r3, [r4, #8]
 8008c04:	3b01      	subs	r3, #1
 8008c06:	60a3      	str	r3, [r4, #8]
 8008c08:	6823      	ldr	r3, [r4, #0]
 8008c0a:	1c5a      	adds	r2, r3, #1
 8008c0c:	6022      	str	r2, [r4, #0]
 8008c0e:	701e      	strb	r6, [r3, #0]
 8008c10:	6963      	ldr	r3, [r4, #20]
 8008c12:	3001      	adds	r0, #1
 8008c14:	4283      	cmp	r3, r0
 8008c16:	d004      	beq.n	8008c22 <__swbuf_r+0x62>
 8008c18:	89a3      	ldrh	r3, [r4, #12]
 8008c1a:	07db      	lsls	r3, r3, #31
 8008c1c:	d506      	bpl.n	8008c2c <__swbuf_r+0x6c>
 8008c1e:	2e0a      	cmp	r6, #10
 8008c20:	d104      	bne.n	8008c2c <__swbuf_r+0x6c>
 8008c22:	4621      	mov	r1, r4
 8008c24:	4628      	mov	r0, r5
 8008c26:	f000 ff8b 	bl	8009b40 <_fflush_r>
 8008c2a:	b988      	cbnz	r0, 8008c50 <__swbuf_r+0x90>
 8008c2c:	4638      	mov	r0, r7
 8008c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c30:	4b0a      	ldr	r3, [pc, #40]	; (8008c5c <__swbuf_r+0x9c>)
 8008c32:	429c      	cmp	r4, r3
 8008c34:	d101      	bne.n	8008c3a <__swbuf_r+0x7a>
 8008c36:	68ac      	ldr	r4, [r5, #8]
 8008c38:	e7cf      	b.n	8008bda <__swbuf_r+0x1a>
 8008c3a:	4b09      	ldr	r3, [pc, #36]	; (8008c60 <__swbuf_r+0xa0>)
 8008c3c:	429c      	cmp	r4, r3
 8008c3e:	bf08      	it	eq
 8008c40:	68ec      	ldreq	r4, [r5, #12]
 8008c42:	e7ca      	b.n	8008bda <__swbuf_r+0x1a>
 8008c44:	4621      	mov	r1, r4
 8008c46:	4628      	mov	r0, r5
 8008c48:	f000 f80c 	bl	8008c64 <__swsetup_r>
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	d0cb      	beq.n	8008be8 <__swbuf_r+0x28>
 8008c50:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008c54:	e7ea      	b.n	8008c2c <__swbuf_r+0x6c>
 8008c56:	bf00      	nop
 8008c58:	0800daf8 	.word	0x0800daf8
 8008c5c:	0800db18 	.word	0x0800db18
 8008c60:	0800dad8 	.word	0x0800dad8

08008c64 <__swsetup_r>:
 8008c64:	4b32      	ldr	r3, [pc, #200]	; (8008d30 <__swsetup_r+0xcc>)
 8008c66:	b570      	push	{r4, r5, r6, lr}
 8008c68:	681d      	ldr	r5, [r3, #0]
 8008c6a:	4606      	mov	r6, r0
 8008c6c:	460c      	mov	r4, r1
 8008c6e:	b125      	cbz	r5, 8008c7a <__swsetup_r+0x16>
 8008c70:	69ab      	ldr	r3, [r5, #24]
 8008c72:	b913      	cbnz	r3, 8008c7a <__swsetup_r+0x16>
 8008c74:	4628      	mov	r0, r5
 8008c76:	f000 fff7 	bl	8009c68 <__sinit>
 8008c7a:	4b2e      	ldr	r3, [pc, #184]	; (8008d34 <__swsetup_r+0xd0>)
 8008c7c:	429c      	cmp	r4, r3
 8008c7e:	d10f      	bne.n	8008ca0 <__swsetup_r+0x3c>
 8008c80:	686c      	ldr	r4, [r5, #4]
 8008c82:	89a3      	ldrh	r3, [r4, #12]
 8008c84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c88:	0719      	lsls	r1, r3, #28
 8008c8a:	d42c      	bmi.n	8008ce6 <__swsetup_r+0x82>
 8008c8c:	06dd      	lsls	r5, r3, #27
 8008c8e:	d411      	bmi.n	8008cb4 <__swsetup_r+0x50>
 8008c90:	2309      	movs	r3, #9
 8008c92:	6033      	str	r3, [r6, #0]
 8008c94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008c98:	81a3      	strh	r3, [r4, #12]
 8008c9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c9e:	e03e      	b.n	8008d1e <__swsetup_r+0xba>
 8008ca0:	4b25      	ldr	r3, [pc, #148]	; (8008d38 <__swsetup_r+0xd4>)
 8008ca2:	429c      	cmp	r4, r3
 8008ca4:	d101      	bne.n	8008caa <__swsetup_r+0x46>
 8008ca6:	68ac      	ldr	r4, [r5, #8]
 8008ca8:	e7eb      	b.n	8008c82 <__swsetup_r+0x1e>
 8008caa:	4b24      	ldr	r3, [pc, #144]	; (8008d3c <__swsetup_r+0xd8>)
 8008cac:	429c      	cmp	r4, r3
 8008cae:	bf08      	it	eq
 8008cb0:	68ec      	ldreq	r4, [r5, #12]
 8008cb2:	e7e6      	b.n	8008c82 <__swsetup_r+0x1e>
 8008cb4:	0758      	lsls	r0, r3, #29
 8008cb6:	d512      	bpl.n	8008cde <__swsetup_r+0x7a>
 8008cb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cba:	b141      	cbz	r1, 8008cce <__swsetup_r+0x6a>
 8008cbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cc0:	4299      	cmp	r1, r3
 8008cc2:	d002      	beq.n	8008cca <__swsetup_r+0x66>
 8008cc4:	4630      	mov	r0, r6
 8008cc6:	f001 fc7b 	bl	800a5c0 <_free_r>
 8008cca:	2300      	movs	r3, #0
 8008ccc:	6363      	str	r3, [r4, #52]	; 0x34
 8008cce:	89a3      	ldrh	r3, [r4, #12]
 8008cd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008cd4:	81a3      	strh	r3, [r4, #12]
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	6063      	str	r3, [r4, #4]
 8008cda:	6923      	ldr	r3, [r4, #16]
 8008cdc:	6023      	str	r3, [r4, #0]
 8008cde:	89a3      	ldrh	r3, [r4, #12]
 8008ce0:	f043 0308 	orr.w	r3, r3, #8
 8008ce4:	81a3      	strh	r3, [r4, #12]
 8008ce6:	6923      	ldr	r3, [r4, #16]
 8008ce8:	b94b      	cbnz	r3, 8008cfe <__swsetup_r+0x9a>
 8008cea:	89a3      	ldrh	r3, [r4, #12]
 8008cec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cf4:	d003      	beq.n	8008cfe <__swsetup_r+0x9a>
 8008cf6:	4621      	mov	r1, r4
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	f001 f87f 	bl	8009dfc <__smakebuf_r>
 8008cfe:	89a0      	ldrh	r0, [r4, #12]
 8008d00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d04:	f010 0301 	ands.w	r3, r0, #1
 8008d08:	d00a      	beq.n	8008d20 <__swsetup_r+0xbc>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	60a3      	str	r3, [r4, #8]
 8008d0e:	6963      	ldr	r3, [r4, #20]
 8008d10:	425b      	negs	r3, r3
 8008d12:	61a3      	str	r3, [r4, #24]
 8008d14:	6923      	ldr	r3, [r4, #16]
 8008d16:	b943      	cbnz	r3, 8008d2a <__swsetup_r+0xc6>
 8008d18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d1c:	d1ba      	bne.n	8008c94 <__swsetup_r+0x30>
 8008d1e:	bd70      	pop	{r4, r5, r6, pc}
 8008d20:	0781      	lsls	r1, r0, #30
 8008d22:	bf58      	it	pl
 8008d24:	6963      	ldrpl	r3, [r4, #20]
 8008d26:	60a3      	str	r3, [r4, #8]
 8008d28:	e7f4      	b.n	8008d14 <__swsetup_r+0xb0>
 8008d2a:	2000      	movs	r0, #0
 8008d2c:	e7f7      	b.n	8008d1e <__swsetup_r+0xba>
 8008d2e:	bf00      	nop
 8008d30:	2000000c 	.word	0x2000000c
 8008d34:	0800daf8 	.word	0x0800daf8
 8008d38:	0800db18 	.word	0x0800db18
 8008d3c:	0800dad8 	.word	0x0800dad8

08008d40 <quorem>:
 8008d40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d44:	6903      	ldr	r3, [r0, #16]
 8008d46:	690c      	ldr	r4, [r1, #16]
 8008d48:	42a3      	cmp	r3, r4
 8008d4a:	4607      	mov	r7, r0
 8008d4c:	f2c0 8081 	blt.w	8008e52 <quorem+0x112>
 8008d50:	3c01      	subs	r4, #1
 8008d52:	f101 0814 	add.w	r8, r1, #20
 8008d56:	f100 0514 	add.w	r5, r0, #20
 8008d5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d5e:	9301      	str	r3, [sp, #4]
 8008d60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008d64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d68:	3301      	adds	r3, #1
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008d70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008d74:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d78:	d331      	bcc.n	8008dde <quorem+0x9e>
 8008d7a:	f04f 0e00 	mov.w	lr, #0
 8008d7e:	4640      	mov	r0, r8
 8008d80:	46ac      	mov	ip, r5
 8008d82:	46f2      	mov	sl, lr
 8008d84:	f850 2b04 	ldr.w	r2, [r0], #4
 8008d88:	b293      	uxth	r3, r2
 8008d8a:	fb06 e303 	mla	r3, r6, r3, lr
 8008d8e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	ebaa 0303 	sub.w	r3, sl, r3
 8008d98:	f8dc a000 	ldr.w	sl, [ip]
 8008d9c:	0c12      	lsrs	r2, r2, #16
 8008d9e:	fa13 f38a 	uxtah	r3, r3, sl
 8008da2:	fb06 e202 	mla	r2, r6, r2, lr
 8008da6:	9300      	str	r3, [sp, #0]
 8008da8:	9b00      	ldr	r3, [sp, #0]
 8008daa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008dae:	b292      	uxth	r2, r2
 8008db0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008db4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008db8:	f8bd 3000 	ldrh.w	r3, [sp]
 8008dbc:	4581      	cmp	r9, r0
 8008dbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008dc2:	f84c 3b04 	str.w	r3, [ip], #4
 8008dc6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008dca:	d2db      	bcs.n	8008d84 <quorem+0x44>
 8008dcc:	f855 300b 	ldr.w	r3, [r5, fp]
 8008dd0:	b92b      	cbnz	r3, 8008dde <quorem+0x9e>
 8008dd2:	9b01      	ldr	r3, [sp, #4]
 8008dd4:	3b04      	subs	r3, #4
 8008dd6:	429d      	cmp	r5, r3
 8008dd8:	461a      	mov	r2, r3
 8008dda:	d32e      	bcc.n	8008e3a <quorem+0xfa>
 8008ddc:	613c      	str	r4, [r7, #16]
 8008dde:	4638      	mov	r0, r7
 8008de0:	f001 fad6 	bl	800a390 <__mcmp>
 8008de4:	2800      	cmp	r0, #0
 8008de6:	db24      	blt.n	8008e32 <quorem+0xf2>
 8008de8:	3601      	adds	r6, #1
 8008dea:	4628      	mov	r0, r5
 8008dec:	f04f 0c00 	mov.w	ip, #0
 8008df0:	f858 2b04 	ldr.w	r2, [r8], #4
 8008df4:	f8d0 e000 	ldr.w	lr, [r0]
 8008df8:	b293      	uxth	r3, r2
 8008dfa:	ebac 0303 	sub.w	r3, ip, r3
 8008dfe:	0c12      	lsrs	r2, r2, #16
 8008e00:	fa13 f38e 	uxtah	r3, r3, lr
 8008e04:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008e08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e12:	45c1      	cmp	r9, r8
 8008e14:	f840 3b04 	str.w	r3, [r0], #4
 8008e18:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008e1c:	d2e8      	bcs.n	8008df0 <quorem+0xb0>
 8008e1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e26:	b922      	cbnz	r2, 8008e32 <quorem+0xf2>
 8008e28:	3b04      	subs	r3, #4
 8008e2a:	429d      	cmp	r5, r3
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	d30a      	bcc.n	8008e46 <quorem+0x106>
 8008e30:	613c      	str	r4, [r7, #16]
 8008e32:	4630      	mov	r0, r6
 8008e34:	b003      	add	sp, #12
 8008e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e3a:	6812      	ldr	r2, [r2, #0]
 8008e3c:	3b04      	subs	r3, #4
 8008e3e:	2a00      	cmp	r2, #0
 8008e40:	d1cc      	bne.n	8008ddc <quorem+0x9c>
 8008e42:	3c01      	subs	r4, #1
 8008e44:	e7c7      	b.n	8008dd6 <quorem+0x96>
 8008e46:	6812      	ldr	r2, [r2, #0]
 8008e48:	3b04      	subs	r3, #4
 8008e4a:	2a00      	cmp	r2, #0
 8008e4c:	d1f0      	bne.n	8008e30 <quorem+0xf0>
 8008e4e:	3c01      	subs	r4, #1
 8008e50:	e7eb      	b.n	8008e2a <quorem+0xea>
 8008e52:	2000      	movs	r0, #0
 8008e54:	e7ee      	b.n	8008e34 <quorem+0xf4>
	...

08008e58 <_dtoa_r>:
 8008e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e5c:	ed2d 8b04 	vpush	{d8-d9}
 8008e60:	ec57 6b10 	vmov	r6, r7, d0
 8008e64:	b093      	sub	sp, #76	; 0x4c
 8008e66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008e68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008e6c:	9106      	str	r1, [sp, #24]
 8008e6e:	ee10 aa10 	vmov	sl, s0
 8008e72:	4604      	mov	r4, r0
 8008e74:	9209      	str	r2, [sp, #36]	; 0x24
 8008e76:	930c      	str	r3, [sp, #48]	; 0x30
 8008e78:	46bb      	mov	fp, r7
 8008e7a:	b975      	cbnz	r5, 8008e9a <_dtoa_r+0x42>
 8008e7c:	2010      	movs	r0, #16
 8008e7e:	f000 fffd 	bl	8009e7c <malloc>
 8008e82:	4602      	mov	r2, r0
 8008e84:	6260      	str	r0, [r4, #36]	; 0x24
 8008e86:	b920      	cbnz	r0, 8008e92 <_dtoa_r+0x3a>
 8008e88:	4ba7      	ldr	r3, [pc, #668]	; (8009128 <_dtoa_r+0x2d0>)
 8008e8a:	21ea      	movs	r1, #234	; 0xea
 8008e8c:	48a7      	ldr	r0, [pc, #668]	; (800912c <_dtoa_r+0x2d4>)
 8008e8e:	f001 fe37 	bl	800ab00 <__assert_func>
 8008e92:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008e96:	6005      	str	r5, [r0, #0]
 8008e98:	60c5      	str	r5, [r0, #12]
 8008e9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e9c:	6819      	ldr	r1, [r3, #0]
 8008e9e:	b151      	cbz	r1, 8008eb6 <_dtoa_r+0x5e>
 8008ea0:	685a      	ldr	r2, [r3, #4]
 8008ea2:	604a      	str	r2, [r1, #4]
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	4093      	lsls	r3, r2
 8008ea8:	608b      	str	r3, [r1, #8]
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f001 f82e 	bl	8009f0c <_Bfree>
 8008eb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	601a      	str	r2, [r3, #0]
 8008eb6:	1e3b      	subs	r3, r7, #0
 8008eb8:	bfaa      	itet	ge
 8008eba:	2300      	movge	r3, #0
 8008ebc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008ec0:	f8c8 3000 	strge.w	r3, [r8]
 8008ec4:	4b9a      	ldr	r3, [pc, #616]	; (8009130 <_dtoa_r+0x2d8>)
 8008ec6:	bfbc      	itt	lt
 8008ec8:	2201      	movlt	r2, #1
 8008eca:	f8c8 2000 	strlt.w	r2, [r8]
 8008ece:	ea33 030b 	bics.w	r3, r3, fp
 8008ed2:	d11b      	bne.n	8008f0c <_dtoa_r+0xb4>
 8008ed4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ed6:	f242 730f 	movw	r3, #9999	; 0x270f
 8008eda:	6013      	str	r3, [r2, #0]
 8008edc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ee0:	4333      	orrs	r3, r6
 8008ee2:	f000 8592 	beq.w	8009a0a <_dtoa_r+0xbb2>
 8008ee6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ee8:	b963      	cbnz	r3, 8008f04 <_dtoa_r+0xac>
 8008eea:	4b92      	ldr	r3, [pc, #584]	; (8009134 <_dtoa_r+0x2dc>)
 8008eec:	e022      	b.n	8008f34 <_dtoa_r+0xdc>
 8008eee:	4b92      	ldr	r3, [pc, #584]	; (8009138 <_dtoa_r+0x2e0>)
 8008ef0:	9301      	str	r3, [sp, #4]
 8008ef2:	3308      	adds	r3, #8
 8008ef4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ef6:	6013      	str	r3, [r2, #0]
 8008ef8:	9801      	ldr	r0, [sp, #4]
 8008efa:	b013      	add	sp, #76	; 0x4c
 8008efc:	ecbd 8b04 	vpop	{d8-d9}
 8008f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f04:	4b8b      	ldr	r3, [pc, #556]	; (8009134 <_dtoa_r+0x2dc>)
 8008f06:	9301      	str	r3, [sp, #4]
 8008f08:	3303      	adds	r3, #3
 8008f0a:	e7f3      	b.n	8008ef4 <_dtoa_r+0x9c>
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	2300      	movs	r3, #0
 8008f10:	4650      	mov	r0, sl
 8008f12:	4659      	mov	r1, fp
 8008f14:	f7f7 fdd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f18:	ec4b ab19 	vmov	d9, sl, fp
 8008f1c:	4680      	mov	r8, r0
 8008f1e:	b158      	cbz	r0, 8008f38 <_dtoa_r+0xe0>
 8008f20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f22:	2301      	movs	r3, #1
 8008f24:	6013      	str	r3, [r2, #0]
 8008f26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	f000 856b 	beq.w	8009a04 <_dtoa_r+0xbac>
 8008f2e:	4883      	ldr	r0, [pc, #524]	; (800913c <_dtoa_r+0x2e4>)
 8008f30:	6018      	str	r0, [r3, #0]
 8008f32:	1e43      	subs	r3, r0, #1
 8008f34:	9301      	str	r3, [sp, #4]
 8008f36:	e7df      	b.n	8008ef8 <_dtoa_r+0xa0>
 8008f38:	ec4b ab10 	vmov	d0, sl, fp
 8008f3c:	aa10      	add	r2, sp, #64	; 0x40
 8008f3e:	a911      	add	r1, sp, #68	; 0x44
 8008f40:	4620      	mov	r0, r4
 8008f42:	f001 facb 	bl	800a4dc <__d2b>
 8008f46:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008f4a:	ee08 0a10 	vmov	s16, r0
 8008f4e:	2d00      	cmp	r5, #0
 8008f50:	f000 8084 	beq.w	800905c <_dtoa_r+0x204>
 8008f54:	ee19 3a90 	vmov	r3, s19
 8008f58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f5c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008f60:	4656      	mov	r6, sl
 8008f62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008f66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008f6a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008f6e:	4b74      	ldr	r3, [pc, #464]	; (8009140 <_dtoa_r+0x2e8>)
 8008f70:	2200      	movs	r2, #0
 8008f72:	4630      	mov	r0, r6
 8008f74:	4639      	mov	r1, r7
 8008f76:	f7f7 f987 	bl	8000288 <__aeabi_dsub>
 8008f7a:	a365      	add	r3, pc, #404	; (adr r3, 8009110 <_dtoa_r+0x2b8>)
 8008f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f80:	f7f7 fb3a 	bl	80005f8 <__aeabi_dmul>
 8008f84:	a364      	add	r3, pc, #400	; (adr r3, 8009118 <_dtoa_r+0x2c0>)
 8008f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8a:	f7f7 f97f 	bl	800028c <__adddf3>
 8008f8e:	4606      	mov	r6, r0
 8008f90:	4628      	mov	r0, r5
 8008f92:	460f      	mov	r7, r1
 8008f94:	f7f7 fac6 	bl	8000524 <__aeabi_i2d>
 8008f98:	a361      	add	r3, pc, #388	; (adr r3, 8009120 <_dtoa_r+0x2c8>)
 8008f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9e:	f7f7 fb2b 	bl	80005f8 <__aeabi_dmul>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	4630      	mov	r0, r6
 8008fa8:	4639      	mov	r1, r7
 8008faa:	f7f7 f96f 	bl	800028c <__adddf3>
 8008fae:	4606      	mov	r6, r0
 8008fb0:	460f      	mov	r7, r1
 8008fb2:	f7f7 fdd1 	bl	8000b58 <__aeabi_d2iz>
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	9000      	str	r0, [sp, #0]
 8008fba:	2300      	movs	r3, #0
 8008fbc:	4630      	mov	r0, r6
 8008fbe:	4639      	mov	r1, r7
 8008fc0:	f7f7 fd8c 	bl	8000adc <__aeabi_dcmplt>
 8008fc4:	b150      	cbz	r0, 8008fdc <_dtoa_r+0x184>
 8008fc6:	9800      	ldr	r0, [sp, #0]
 8008fc8:	f7f7 faac 	bl	8000524 <__aeabi_i2d>
 8008fcc:	4632      	mov	r2, r6
 8008fce:	463b      	mov	r3, r7
 8008fd0:	f7f7 fd7a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fd4:	b910      	cbnz	r0, 8008fdc <_dtoa_r+0x184>
 8008fd6:	9b00      	ldr	r3, [sp, #0]
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	9300      	str	r3, [sp, #0]
 8008fdc:	9b00      	ldr	r3, [sp, #0]
 8008fde:	2b16      	cmp	r3, #22
 8008fe0:	d85a      	bhi.n	8009098 <_dtoa_r+0x240>
 8008fe2:	9a00      	ldr	r2, [sp, #0]
 8008fe4:	4b57      	ldr	r3, [pc, #348]	; (8009144 <_dtoa_r+0x2ec>)
 8008fe6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fee:	ec51 0b19 	vmov	r0, r1, d9
 8008ff2:	f7f7 fd73 	bl	8000adc <__aeabi_dcmplt>
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	d050      	beq.n	800909c <_dtoa_r+0x244>
 8008ffa:	9b00      	ldr	r3, [sp, #0]
 8008ffc:	3b01      	subs	r3, #1
 8008ffe:	9300      	str	r3, [sp, #0]
 8009000:	2300      	movs	r3, #0
 8009002:	930b      	str	r3, [sp, #44]	; 0x2c
 8009004:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009006:	1b5d      	subs	r5, r3, r5
 8009008:	1e6b      	subs	r3, r5, #1
 800900a:	9305      	str	r3, [sp, #20]
 800900c:	bf45      	ittet	mi
 800900e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009012:	9304      	strmi	r3, [sp, #16]
 8009014:	2300      	movpl	r3, #0
 8009016:	2300      	movmi	r3, #0
 8009018:	bf4c      	ite	mi
 800901a:	9305      	strmi	r3, [sp, #20]
 800901c:	9304      	strpl	r3, [sp, #16]
 800901e:	9b00      	ldr	r3, [sp, #0]
 8009020:	2b00      	cmp	r3, #0
 8009022:	db3d      	blt.n	80090a0 <_dtoa_r+0x248>
 8009024:	9b05      	ldr	r3, [sp, #20]
 8009026:	9a00      	ldr	r2, [sp, #0]
 8009028:	920a      	str	r2, [sp, #40]	; 0x28
 800902a:	4413      	add	r3, r2
 800902c:	9305      	str	r3, [sp, #20]
 800902e:	2300      	movs	r3, #0
 8009030:	9307      	str	r3, [sp, #28]
 8009032:	9b06      	ldr	r3, [sp, #24]
 8009034:	2b09      	cmp	r3, #9
 8009036:	f200 8089 	bhi.w	800914c <_dtoa_r+0x2f4>
 800903a:	2b05      	cmp	r3, #5
 800903c:	bfc4      	itt	gt
 800903e:	3b04      	subgt	r3, #4
 8009040:	9306      	strgt	r3, [sp, #24]
 8009042:	9b06      	ldr	r3, [sp, #24]
 8009044:	f1a3 0302 	sub.w	r3, r3, #2
 8009048:	bfcc      	ite	gt
 800904a:	2500      	movgt	r5, #0
 800904c:	2501      	movle	r5, #1
 800904e:	2b03      	cmp	r3, #3
 8009050:	f200 8087 	bhi.w	8009162 <_dtoa_r+0x30a>
 8009054:	e8df f003 	tbb	[pc, r3]
 8009058:	59383a2d 	.word	0x59383a2d
 800905c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009060:	441d      	add	r5, r3
 8009062:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009066:	2b20      	cmp	r3, #32
 8009068:	bfc1      	itttt	gt
 800906a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800906e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009072:	fa0b f303 	lslgt.w	r3, fp, r3
 8009076:	fa26 f000 	lsrgt.w	r0, r6, r0
 800907a:	bfda      	itte	le
 800907c:	f1c3 0320 	rsble	r3, r3, #32
 8009080:	fa06 f003 	lslle.w	r0, r6, r3
 8009084:	4318      	orrgt	r0, r3
 8009086:	f7f7 fa3d 	bl	8000504 <__aeabi_ui2d>
 800908a:	2301      	movs	r3, #1
 800908c:	4606      	mov	r6, r0
 800908e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009092:	3d01      	subs	r5, #1
 8009094:	930e      	str	r3, [sp, #56]	; 0x38
 8009096:	e76a      	b.n	8008f6e <_dtoa_r+0x116>
 8009098:	2301      	movs	r3, #1
 800909a:	e7b2      	b.n	8009002 <_dtoa_r+0x1aa>
 800909c:	900b      	str	r0, [sp, #44]	; 0x2c
 800909e:	e7b1      	b.n	8009004 <_dtoa_r+0x1ac>
 80090a0:	9b04      	ldr	r3, [sp, #16]
 80090a2:	9a00      	ldr	r2, [sp, #0]
 80090a4:	1a9b      	subs	r3, r3, r2
 80090a6:	9304      	str	r3, [sp, #16]
 80090a8:	4253      	negs	r3, r2
 80090aa:	9307      	str	r3, [sp, #28]
 80090ac:	2300      	movs	r3, #0
 80090ae:	930a      	str	r3, [sp, #40]	; 0x28
 80090b0:	e7bf      	b.n	8009032 <_dtoa_r+0x1da>
 80090b2:	2300      	movs	r3, #0
 80090b4:	9308      	str	r3, [sp, #32]
 80090b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	dc55      	bgt.n	8009168 <_dtoa_r+0x310>
 80090bc:	2301      	movs	r3, #1
 80090be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80090c2:	461a      	mov	r2, r3
 80090c4:	9209      	str	r2, [sp, #36]	; 0x24
 80090c6:	e00c      	b.n	80090e2 <_dtoa_r+0x28a>
 80090c8:	2301      	movs	r3, #1
 80090ca:	e7f3      	b.n	80090b4 <_dtoa_r+0x25c>
 80090cc:	2300      	movs	r3, #0
 80090ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090d0:	9308      	str	r3, [sp, #32]
 80090d2:	9b00      	ldr	r3, [sp, #0]
 80090d4:	4413      	add	r3, r2
 80090d6:	9302      	str	r3, [sp, #8]
 80090d8:	3301      	adds	r3, #1
 80090da:	2b01      	cmp	r3, #1
 80090dc:	9303      	str	r3, [sp, #12]
 80090de:	bfb8      	it	lt
 80090e0:	2301      	movlt	r3, #1
 80090e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80090e4:	2200      	movs	r2, #0
 80090e6:	6042      	str	r2, [r0, #4]
 80090e8:	2204      	movs	r2, #4
 80090ea:	f102 0614 	add.w	r6, r2, #20
 80090ee:	429e      	cmp	r6, r3
 80090f0:	6841      	ldr	r1, [r0, #4]
 80090f2:	d93d      	bls.n	8009170 <_dtoa_r+0x318>
 80090f4:	4620      	mov	r0, r4
 80090f6:	f000 fec9 	bl	8009e8c <_Balloc>
 80090fa:	9001      	str	r0, [sp, #4]
 80090fc:	2800      	cmp	r0, #0
 80090fe:	d13b      	bne.n	8009178 <_dtoa_r+0x320>
 8009100:	4b11      	ldr	r3, [pc, #68]	; (8009148 <_dtoa_r+0x2f0>)
 8009102:	4602      	mov	r2, r0
 8009104:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009108:	e6c0      	b.n	8008e8c <_dtoa_r+0x34>
 800910a:	2301      	movs	r3, #1
 800910c:	e7df      	b.n	80090ce <_dtoa_r+0x276>
 800910e:	bf00      	nop
 8009110:	636f4361 	.word	0x636f4361
 8009114:	3fd287a7 	.word	0x3fd287a7
 8009118:	8b60c8b3 	.word	0x8b60c8b3
 800911c:	3fc68a28 	.word	0x3fc68a28
 8009120:	509f79fb 	.word	0x509f79fb
 8009124:	3fd34413 	.word	0x3fd34413
 8009128:	0800da55 	.word	0x0800da55
 800912c:	0800da6c 	.word	0x0800da6c
 8009130:	7ff00000 	.word	0x7ff00000
 8009134:	0800da51 	.word	0x0800da51
 8009138:	0800da48 	.word	0x0800da48
 800913c:	0800da25 	.word	0x0800da25
 8009140:	3ff80000 	.word	0x3ff80000
 8009144:	0800dbc0 	.word	0x0800dbc0
 8009148:	0800dac7 	.word	0x0800dac7
 800914c:	2501      	movs	r5, #1
 800914e:	2300      	movs	r3, #0
 8009150:	9306      	str	r3, [sp, #24]
 8009152:	9508      	str	r5, [sp, #32]
 8009154:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009158:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800915c:	2200      	movs	r2, #0
 800915e:	2312      	movs	r3, #18
 8009160:	e7b0      	b.n	80090c4 <_dtoa_r+0x26c>
 8009162:	2301      	movs	r3, #1
 8009164:	9308      	str	r3, [sp, #32]
 8009166:	e7f5      	b.n	8009154 <_dtoa_r+0x2fc>
 8009168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800916a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800916e:	e7b8      	b.n	80090e2 <_dtoa_r+0x28a>
 8009170:	3101      	adds	r1, #1
 8009172:	6041      	str	r1, [r0, #4]
 8009174:	0052      	lsls	r2, r2, #1
 8009176:	e7b8      	b.n	80090ea <_dtoa_r+0x292>
 8009178:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800917a:	9a01      	ldr	r2, [sp, #4]
 800917c:	601a      	str	r2, [r3, #0]
 800917e:	9b03      	ldr	r3, [sp, #12]
 8009180:	2b0e      	cmp	r3, #14
 8009182:	f200 809d 	bhi.w	80092c0 <_dtoa_r+0x468>
 8009186:	2d00      	cmp	r5, #0
 8009188:	f000 809a 	beq.w	80092c0 <_dtoa_r+0x468>
 800918c:	9b00      	ldr	r3, [sp, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	dd32      	ble.n	80091f8 <_dtoa_r+0x3a0>
 8009192:	4ab7      	ldr	r2, [pc, #732]	; (8009470 <_dtoa_r+0x618>)
 8009194:	f003 030f 	and.w	r3, r3, #15
 8009198:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800919c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80091a0:	9b00      	ldr	r3, [sp, #0]
 80091a2:	05d8      	lsls	r0, r3, #23
 80091a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80091a8:	d516      	bpl.n	80091d8 <_dtoa_r+0x380>
 80091aa:	4bb2      	ldr	r3, [pc, #712]	; (8009474 <_dtoa_r+0x61c>)
 80091ac:	ec51 0b19 	vmov	r0, r1, d9
 80091b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80091b4:	f7f7 fb4a 	bl	800084c <__aeabi_ddiv>
 80091b8:	f007 070f 	and.w	r7, r7, #15
 80091bc:	4682      	mov	sl, r0
 80091be:	468b      	mov	fp, r1
 80091c0:	2503      	movs	r5, #3
 80091c2:	4eac      	ldr	r6, [pc, #688]	; (8009474 <_dtoa_r+0x61c>)
 80091c4:	b957      	cbnz	r7, 80091dc <_dtoa_r+0x384>
 80091c6:	4642      	mov	r2, r8
 80091c8:	464b      	mov	r3, r9
 80091ca:	4650      	mov	r0, sl
 80091cc:	4659      	mov	r1, fp
 80091ce:	f7f7 fb3d 	bl	800084c <__aeabi_ddiv>
 80091d2:	4682      	mov	sl, r0
 80091d4:	468b      	mov	fp, r1
 80091d6:	e028      	b.n	800922a <_dtoa_r+0x3d2>
 80091d8:	2502      	movs	r5, #2
 80091da:	e7f2      	b.n	80091c2 <_dtoa_r+0x36a>
 80091dc:	07f9      	lsls	r1, r7, #31
 80091de:	d508      	bpl.n	80091f2 <_dtoa_r+0x39a>
 80091e0:	4640      	mov	r0, r8
 80091e2:	4649      	mov	r1, r9
 80091e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80091e8:	f7f7 fa06 	bl	80005f8 <__aeabi_dmul>
 80091ec:	3501      	adds	r5, #1
 80091ee:	4680      	mov	r8, r0
 80091f0:	4689      	mov	r9, r1
 80091f2:	107f      	asrs	r7, r7, #1
 80091f4:	3608      	adds	r6, #8
 80091f6:	e7e5      	b.n	80091c4 <_dtoa_r+0x36c>
 80091f8:	f000 809b 	beq.w	8009332 <_dtoa_r+0x4da>
 80091fc:	9b00      	ldr	r3, [sp, #0]
 80091fe:	4f9d      	ldr	r7, [pc, #628]	; (8009474 <_dtoa_r+0x61c>)
 8009200:	425e      	negs	r6, r3
 8009202:	4b9b      	ldr	r3, [pc, #620]	; (8009470 <_dtoa_r+0x618>)
 8009204:	f006 020f 	and.w	r2, r6, #15
 8009208:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800920c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009210:	ec51 0b19 	vmov	r0, r1, d9
 8009214:	f7f7 f9f0 	bl	80005f8 <__aeabi_dmul>
 8009218:	1136      	asrs	r6, r6, #4
 800921a:	4682      	mov	sl, r0
 800921c:	468b      	mov	fp, r1
 800921e:	2300      	movs	r3, #0
 8009220:	2502      	movs	r5, #2
 8009222:	2e00      	cmp	r6, #0
 8009224:	d17a      	bne.n	800931c <_dtoa_r+0x4c4>
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1d3      	bne.n	80091d2 <_dtoa_r+0x37a>
 800922a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800922c:	2b00      	cmp	r3, #0
 800922e:	f000 8082 	beq.w	8009336 <_dtoa_r+0x4de>
 8009232:	4b91      	ldr	r3, [pc, #580]	; (8009478 <_dtoa_r+0x620>)
 8009234:	2200      	movs	r2, #0
 8009236:	4650      	mov	r0, sl
 8009238:	4659      	mov	r1, fp
 800923a:	f7f7 fc4f 	bl	8000adc <__aeabi_dcmplt>
 800923e:	2800      	cmp	r0, #0
 8009240:	d079      	beq.n	8009336 <_dtoa_r+0x4de>
 8009242:	9b03      	ldr	r3, [sp, #12]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d076      	beq.n	8009336 <_dtoa_r+0x4de>
 8009248:	9b02      	ldr	r3, [sp, #8]
 800924a:	2b00      	cmp	r3, #0
 800924c:	dd36      	ble.n	80092bc <_dtoa_r+0x464>
 800924e:	9b00      	ldr	r3, [sp, #0]
 8009250:	4650      	mov	r0, sl
 8009252:	4659      	mov	r1, fp
 8009254:	1e5f      	subs	r7, r3, #1
 8009256:	2200      	movs	r2, #0
 8009258:	4b88      	ldr	r3, [pc, #544]	; (800947c <_dtoa_r+0x624>)
 800925a:	f7f7 f9cd 	bl	80005f8 <__aeabi_dmul>
 800925e:	9e02      	ldr	r6, [sp, #8]
 8009260:	4682      	mov	sl, r0
 8009262:	468b      	mov	fp, r1
 8009264:	3501      	adds	r5, #1
 8009266:	4628      	mov	r0, r5
 8009268:	f7f7 f95c 	bl	8000524 <__aeabi_i2d>
 800926c:	4652      	mov	r2, sl
 800926e:	465b      	mov	r3, fp
 8009270:	f7f7 f9c2 	bl	80005f8 <__aeabi_dmul>
 8009274:	4b82      	ldr	r3, [pc, #520]	; (8009480 <_dtoa_r+0x628>)
 8009276:	2200      	movs	r2, #0
 8009278:	f7f7 f808 	bl	800028c <__adddf3>
 800927c:	46d0      	mov	r8, sl
 800927e:	46d9      	mov	r9, fp
 8009280:	4682      	mov	sl, r0
 8009282:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009286:	2e00      	cmp	r6, #0
 8009288:	d158      	bne.n	800933c <_dtoa_r+0x4e4>
 800928a:	4b7e      	ldr	r3, [pc, #504]	; (8009484 <_dtoa_r+0x62c>)
 800928c:	2200      	movs	r2, #0
 800928e:	4640      	mov	r0, r8
 8009290:	4649      	mov	r1, r9
 8009292:	f7f6 fff9 	bl	8000288 <__aeabi_dsub>
 8009296:	4652      	mov	r2, sl
 8009298:	465b      	mov	r3, fp
 800929a:	4680      	mov	r8, r0
 800929c:	4689      	mov	r9, r1
 800929e:	f7f7 fc3b 	bl	8000b18 <__aeabi_dcmpgt>
 80092a2:	2800      	cmp	r0, #0
 80092a4:	f040 8295 	bne.w	80097d2 <_dtoa_r+0x97a>
 80092a8:	4652      	mov	r2, sl
 80092aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80092ae:	4640      	mov	r0, r8
 80092b0:	4649      	mov	r1, r9
 80092b2:	f7f7 fc13 	bl	8000adc <__aeabi_dcmplt>
 80092b6:	2800      	cmp	r0, #0
 80092b8:	f040 8289 	bne.w	80097ce <_dtoa_r+0x976>
 80092bc:	ec5b ab19 	vmov	sl, fp, d9
 80092c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	f2c0 8148 	blt.w	8009558 <_dtoa_r+0x700>
 80092c8:	9a00      	ldr	r2, [sp, #0]
 80092ca:	2a0e      	cmp	r2, #14
 80092cc:	f300 8144 	bgt.w	8009558 <_dtoa_r+0x700>
 80092d0:	4b67      	ldr	r3, [pc, #412]	; (8009470 <_dtoa_r+0x618>)
 80092d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80092da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092dc:	2b00      	cmp	r3, #0
 80092de:	f280 80d5 	bge.w	800948c <_dtoa_r+0x634>
 80092e2:	9b03      	ldr	r3, [sp, #12]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	f300 80d1 	bgt.w	800948c <_dtoa_r+0x634>
 80092ea:	f040 826f 	bne.w	80097cc <_dtoa_r+0x974>
 80092ee:	4b65      	ldr	r3, [pc, #404]	; (8009484 <_dtoa_r+0x62c>)
 80092f0:	2200      	movs	r2, #0
 80092f2:	4640      	mov	r0, r8
 80092f4:	4649      	mov	r1, r9
 80092f6:	f7f7 f97f 	bl	80005f8 <__aeabi_dmul>
 80092fa:	4652      	mov	r2, sl
 80092fc:	465b      	mov	r3, fp
 80092fe:	f7f7 fc01 	bl	8000b04 <__aeabi_dcmpge>
 8009302:	9e03      	ldr	r6, [sp, #12]
 8009304:	4637      	mov	r7, r6
 8009306:	2800      	cmp	r0, #0
 8009308:	f040 8245 	bne.w	8009796 <_dtoa_r+0x93e>
 800930c:	9d01      	ldr	r5, [sp, #4]
 800930e:	2331      	movs	r3, #49	; 0x31
 8009310:	f805 3b01 	strb.w	r3, [r5], #1
 8009314:	9b00      	ldr	r3, [sp, #0]
 8009316:	3301      	adds	r3, #1
 8009318:	9300      	str	r3, [sp, #0]
 800931a:	e240      	b.n	800979e <_dtoa_r+0x946>
 800931c:	07f2      	lsls	r2, r6, #31
 800931e:	d505      	bpl.n	800932c <_dtoa_r+0x4d4>
 8009320:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009324:	f7f7 f968 	bl	80005f8 <__aeabi_dmul>
 8009328:	3501      	adds	r5, #1
 800932a:	2301      	movs	r3, #1
 800932c:	1076      	asrs	r6, r6, #1
 800932e:	3708      	adds	r7, #8
 8009330:	e777      	b.n	8009222 <_dtoa_r+0x3ca>
 8009332:	2502      	movs	r5, #2
 8009334:	e779      	b.n	800922a <_dtoa_r+0x3d2>
 8009336:	9f00      	ldr	r7, [sp, #0]
 8009338:	9e03      	ldr	r6, [sp, #12]
 800933a:	e794      	b.n	8009266 <_dtoa_r+0x40e>
 800933c:	9901      	ldr	r1, [sp, #4]
 800933e:	4b4c      	ldr	r3, [pc, #304]	; (8009470 <_dtoa_r+0x618>)
 8009340:	4431      	add	r1, r6
 8009342:	910d      	str	r1, [sp, #52]	; 0x34
 8009344:	9908      	ldr	r1, [sp, #32]
 8009346:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800934a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800934e:	2900      	cmp	r1, #0
 8009350:	d043      	beq.n	80093da <_dtoa_r+0x582>
 8009352:	494d      	ldr	r1, [pc, #308]	; (8009488 <_dtoa_r+0x630>)
 8009354:	2000      	movs	r0, #0
 8009356:	f7f7 fa79 	bl	800084c <__aeabi_ddiv>
 800935a:	4652      	mov	r2, sl
 800935c:	465b      	mov	r3, fp
 800935e:	f7f6 ff93 	bl	8000288 <__aeabi_dsub>
 8009362:	9d01      	ldr	r5, [sp, #4]
 8009364:	4682      	mov	sl, r0
 8009366:	468b      	mov	fp, r1
 8009368:	4649      	mov	r1, r9
 800936a:	4640      	mov	r0, r8
 800936c:	f7f7 fbf4 	bl	8000b58 <__aeabi_d2iz>
 8009370:	4606      	mov	r6, r0
 8009372:	f7f7 f8d7 	bl	8000524 <__aeabi_i2d>
 8009376:	4602      	mov	r2, r0
 8009378:	460b      	mov	r3, r1
 800937a:	4640      	mov	r0, r8
 800937c:	4649      	mov	r1, r9
 800937e:	f7f6 ff83 	bl	8000288 <__aeabi_dsub>
 8009382:	3630      	adds	r6, #48	; 0x30
 8009384:	f805 6b01 	strb.w	r6, [r5], #1
 8009388:	4652      	mov	r2, sl
 800938a:	465b      	mov	r3, fp
 800938c:	4680      	mov	r8, r0
 800938e:	4689      	mov	r9, r1
 8009390:	f7f7 fba4 	bl	8000adc <__aeabi_dcmplt>
 8009394:	2800      	cmp	r0, #0
 8009396:	d163      	bne.n	8009460 <_dtoa_r+0x608>
 8009398:	4642      	mov	r2, r8
 800939a:	464b      	mov	r3, r9
 800939c:	4936      	ldr	r1, [pc, #216]	; (8009478 <_dtoa_r+0x620>)
 800939e:	2000      	movs	r0, #0
 80093a0:	f7f6 ff72 	bl	8000288 <__aeabi_dsub>
 80093a4:	4652      	mov	r2, sl
 80093a6:	465b      	mov	r3, fp
 80093a8:	f7f7 fb98 	bl	8000adc <__aeabi_dcmplt>
 80093ac:	2800      	cmp	r0, #0
 80093ae:	f040 80b5 	bne.w	800951c <_dtoa_r+0x6c4>
 80093b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093b4:	429d      	cmp	r5, r3
 80093b6:	d081      	beq.n	80092bc <_dtoa_r+0x464>
 80093b8:	4b30      	ldr	r3, [pc, #192]	; (800947c <_dtoa_r+0x624>)
 80093ba:	2200      	movs	r2, #0
 80093bc:	4650      	mov	r0, sl
 80093be:	4659      	mov	r1, fp
 80093c0:	f7f7 f91a 	bl	80005f8 <__aeabi_dmul>
 80093c4:	4b2d      	ldr	r3, [pc, #180]	; (800947c <_dtoa_r+0x624>)
 80093c6:	4682      	mov	sl, r0
 80093c8:	468b      	mov	fp, r1
 80093ca:	4640      	mov	r0, r8
 80093cc:	4649      	mov	r1, r9
 80093ce:	2200      	movs	r2, #0
 80093d0:	f7f7 f912 	bl	80005f8 <__aeabi_dmul>
 80093d4:	4680      	mov	r8, r0
 80093d6:	4689      	mov	r9, r1
 80093d8:	e7c6      	b.n	8009368 <_dtoa_r+0x510>
 80093da:	4650      	mov	r0, sl
 80093dc:	4659      	mov	r1, fp
 80093de:	f7f7 f90b 	bl	80005f8 <__aeabi_dmul>
 80093e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093e4:	9d01      	ldr	r5, [sp, #4]
 80093e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80093e8:	4682      	mov	sl, r0
 80093ea:	468b      	mov	fp, r1
 80093ec:	4649      	mov	r1, r9
 80093ee:	4640      	mov	r0, r8
 80093f0:	f7f7 fbb2 	bl	8000b58 <__aeabi_d2iz>
 80093f4:	4606      	mov	r6, r0
 80093f6:	f7f7 f895 	bl	8000524 <__aeabi_i2d>
 80093fa:	3630      	adds	r6, #48	; 0x30
 80093fc:	4602      	mov	r2, r0
 80093fe:	460b      	mov	r3, r1
 8009400:	4640      	mov	r0, r8
 8009402:	4649      	mov	r1, r9
 8009404:	f7f6 ff40 	bl	8000288 <__aeabi_dsub>
 8009408:	f805 6b01 	strb.w	r6, [r5], #1
 800940c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800940e:	429d      	cmp	r5, r3
 8009410:	4680      	mov	r8, r0
 8009412:	4689      	mov	r9, r1
 8009414:	f04f 0200 	mov.w	r2, #0
 8009418:	d124      	bne.n	8009464 <_dtoa_r+0x60c>
 800941a:	4b1b      	ldr	r3, [pc, #108]	; (8009488 <_dtoa_r+0x630>)
 800941c:	4650      	mov	r0, sl
 800941e:	4659      	mov	r1, fp
 8009420:	f7f6 ff34 	bl	800028c <__adddf3>
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	4640      	mov	r0, r8
 800942a:	4649      	mov	r1, r9
 800942c:	f7f7 fb74 	bl	8000b18 <__aeabi_dcmpgt>
 8009430:	2800      	cmp	r0, #0
 8009432:	d173      	bne.n	800951c <_dtoa_r+0x6c4>
 8009434:	4652      	mov	r2, sl
 8009436:	465b      	mov	r3, fp
 8009438:	4913      	ldr	r1, [pc, #76]	; (8009488 <_dtoa_r+0x630>)
 800943a:	2000      	movs	r0, #0
 800943c:	f7f6 ff24 	bl	8000288 <__aeabi_dsub>
 8009440:	4602      	mov	r2, r0
 8009442:	460b      	mov	r3, r1
 8009444:	4640      	mov	r0, r8
 8009446:	4649      	mov	r1, r9
 8009448:	f7f7 fb48 	bl	8000adc <__aeabi_dcmplt>
 800944c:	2800      	cmp	r0, #0
 800944e:	f43f af35 	beq.w	80092bc <_dtoa_r+0x464>
 8009452:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009454:	1e6b      	subs	r3, r5, #1
 8009456:	930f      	str	r3, [sp, #60]	; 0x3c
 8009458:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800945c:	2b30      	cmp	r3, #48	; 0x30
 800945e:	d0f8      	beq.n	8009452 <_dtoa_r+0x5fa>
 8009460:	9700      	str	r7, [sp, #0]
 8009462:	e049      	b.n	80094f8 <_dtoa_r+0x6a0>
 8009464:	4b05      	ldr	r3, [pc, #20]	; (800947c <_dtoa_r+0x624>)
 8009466:	f7f7 f8c7 	bl	80005f8 <__aeabi_dmul>
 800946a:	4680      	mov	r8, r0
 800946c:	4689      	mov	r9, r1
 800946e:	e7bd      	b.n	80093ec <_dtoa_r+0x594>
 8009470:	0800dbc0 	.word	0x0800dbc0
 8009474:	0800db98 	.word	0x0800db98
 8009478:	3ff00000 	.word	0x3ff00000
 800947c:	40240000 	.word	0x40240000
 8009480:	401c0000 	.word	0x401c0000
 8009484:	40140000 	.word	0x40140000
 8009488:	3fe00000 	.word	0x3fe00000
 800948c:	9d01      	ldr	r5, [sp, #4]
 800948e:	4656      	mov	r6, sl
 8009490:	465f      	mov	r7, fp
 8009492:	4642      	mov	r2, r8
 8009494:	464b      	mov	r3, r9
 8009496:	4630      	mov	r0, r6
 8009498:	4639      	mov	r1, r7
 800949a:	f7f7 f9d7 	bl	800084c <__aeabi_ddiv>
 800949e:	f7f7 fb5b 	bl	8000b58 <__aeabi_d2iz>
 80094a2:	4682      	mov	sl, r0
 80094a4:	f7f7 f83e 	bl	8000524 <__aeabi_i2d>
 80094a8:	4642      	mov	r2, r8
 80094aa:	464b      	mov	r3, r9
 80094ac:	f7f7 f8a4 	bl	80005f8 <__aeabi_dmul>
 80094b0:	4602      	mov	r2, r0
 80094b2:	460b      	mov	r3, r1
 80094b4:	4630      	mov	r0, r6
 80094b6:	4639      	mov	r1, r7
 80094b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80094bc:	f7f6 fee4 	bl	8000288 <__aeabi_dsub>
 80094c0:	f805 6b01 	strb.w	r6, [r5], #1
 80094c4:	9e01      	ldr	r6, [sp, #4]
 80094c6:	9f03      	ldr	r7, [sp, #12]
 80094c8:	1bae      	subs	r6, r5, r6
 80094ca:	42b7      	cmp	r7, r6
 80094cc:	4602      	mov	r2, r0
 80094ce:	460b      	mov	r3, r1
 80094d0:	d135      	bne.n	800953e <_dtoa_r+0x6e6>
 80094d2:	f7f6 fedb 	bl	800028c <__adddf3>
 80094d6:	4642      	mov	r2, r8
 80094d8:	464b      	mov	r3, r9
 80094da:	4606      	mov	r6, r0
 80094dc:	460f      	mov	r7, r1
 80094de:	f7f7 fb1b 	bl	8000b18 <__aeabi_dcmpgt>
 80094e2:	b9d0      	cbnz	r0, 800951a <_dtoa_r+0x6c2>
 80094e4:	4642      	mov	r2, r8
 80094e6:	464b      	mov	r3, r9
 80094e8:	4630      	mov	r0, r6
 80094ea:	4639      	mov	r1, r7
 80094ec:	f7f7 faec 	bl	8000ac8 <__aeabi_dcmpeq>
 80094f0:	b110      	cbz	r0, 80094f8 <_dtoa_r+0x6a0>
 80094f2:	f01a 0f01 	tst.w	sl, #1
 80094f6:	d110      	bne.n	800951a <_dtoa_r+0x6c2>
 80094f8:	4620      	mov	r0, r4
 80094fa:	ee18 1a10 	vmov	r1, s16
 80094fe:	f000 fd05 	bl	8009f0c <_Bfree>
 8009502:	2300      	movs	r3, #0
 8009504:	9800      	ldr	r0, [sp, #0]
 8009506:	702b      	strb	r3, [r5, #0]
 8009508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800950a:	3001      	adds	r0, #1
 800950c:	6018      	str	r0, [r3, #0]
 800950e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009510:	2b00      	cmp	r3, #0
 8009512:	f43f acf1 	beq.w	8008ef8 <_dtoa_r+0xa0>
 8009516:	601d      	str	r5, [r3, #0]
 8009518:	e4ee      	b.n	8008ef8 <_dtoa_r+0xa0>
 800951a:	9f00      	ldr	r7, [sp, #0]
 800951c:	462b      	mov	r3, r5
 800951e:	461d      	mov	r5, r3
 8009520:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009524:	2a39      	cmp	r2, #57	; 0x39
 8009526:	d106      	bne.n	8009536 <_dtoa_r+0x6de>
 8009528:	9a01      	ldr	r2, [sp, #4]
 800952a:	429a      	cmp	r2, r3
 800952c:	d1f7      	bne.n	800951e <_dtoa_r+0x6c6>
 800952e:	9901      	ldr	r1, [sp, #4]
 8009530:	2230      	movs	r2, #48	; 0x30
 8009532:	3701      	adds	r7, #1
 8009534:	700a      	strb	r2, [r1, #0]
 8009536:	781a      	ldrb	r2, [r3, #0]
 8009538:	3201      	adds	r2, #1
 800953a:	701a      	strb	r2, [r3, #0]
 800953c:	e790      	b.n	8009460 <_dtoa_r+0x608>
 800953e:	4ba6      	ldr	r3, [pc, #664]	; (80097d8 <_dtoa_r+0x980>)
 8009540:	2200      	movs	r2, #0
 8009542:	f7f7 f859 	bl	80005f8 <__aeabi_dmul>
 8009546:	2200      	movs	r2, #0
 8009548:	2300      	movs	r3, #0
 800954a:	4606      	mov	r6, r0
 800954c:	460f      	mov	r7, r1
 800954e:	f7f7 fabb 	bl	8000ac8 <__aeabi_dcmpeq>
 8009552:	2800      	cmp	r0, #0
 8009554:	d09d      	beq.n	8009492 <_dtoa_r+0x63a>
 8009556:	e7cf      	b.n	80094f8 <_dtoa_r+0x6a0>
 8009558:	9a08      	ldr	r2, [sp, #32]
 800955a:	2a00      	cmp	r2, #0
 800955c:	f000 80d7 	beq.w	800970e <_dtoa_r+0x8b6>
 8009560:	9a06      	ldr	r2, [sp, #24]
 8009562:	2a01      	cmp	r2, #1
 8009564:	f300 80ba 	bgt.w	80096dc <_dtoa_r+0x884>
 8009568:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800956a:	2a00      	cmp	r2, #0
 800956c:	f000 80b2 	beq.w	80096d4 <_dtoa_r+0x87c>
 8009570:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009574:	9e07      	ldr	r6, [sp, #28]
 8009576:	9d04      	ldr	r5, [sp, #16]
 8009578:	9a04      	ldr	r2, [sp, #16]
 800957a:	441a      	add	r2, r3
 800957c:	9204      	str	r2, [sp, #16]
 800957e:	9a05      	ldr	r2, [sp, #20]
 8009580:	2101      	movs	r1, #1
 8009582:	441a      	add	r2, r3
 8009584:	4620      	mov	r0, r4
 8009586:	9205      	str	r2, [sp, #20]
 8009588:	f000 fd78 	bl	800a07c <__i2b>
 800958c:	4607      	mov	r7, r0
 800958e:	2d00      	cmp	r5, #0
 8009590:	dd0c      	ble.n	80095ac <_dtoa_r+0x754>
 8009592:	9b05      	ldr	r3, [sp, #20]
 8009594:	2b00      	cmp	r3, #0
 8009596:	dd09      	ble.n	80095ac <_dtoa_r+0x754>
 8009598:	42ab      	cmp	r3, r5
 800959a:	9a04      	ldr	r2, [sp, #16]
 800959c:	bfa8      	it	ge
 800959e:	462b      	movge	r3, r5
 80095a0:	1ad2      	subs	r2, r2, r3
 80095a2:	9204      	str	r2, [sp, #16]
 80095a4:	9a05      	ldr	r2, [sp, #20]
 80095a6:	1aed      	subs	r5, r5, r3
 80095a8:	1ad3      	subs	r3, r2, r3
 80095aa:	9305      	str	r3, [sp, #20]
 80095ac:	9b07      	ldr	r3, [sp, #28]
 80095ae:	b31b      	cbz	r3, 80095f8 <_dtoa_r+0x7a0>
 80095b0:	9b08      	ldr	r3, [sp, #32]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f000 80af 	beq.w	8009716 <_dtoa_r+0x8be>
 80095b8:	2e00      	cmp	r6, #0
 80095ba:	dd13      	ble.n	80095e4 <_dtoa_r+0x78c>
 80095bc:	4639      	mov	r1, r7
 80095be:	4632      	mov	r2, r6
 80095c0:	4620      	mov	r0, r4
 80095c2:	f000 fe1b 	bl	800a1fc <__pow5mult>
 80095c6:	ee18 2a10 	vmov	r2, s16
 80095ca:	4601      	mov	r1, r0
 80095cc:	4607      	mov	r7, r0
 80095ce:	4620      	mov	r0, r4
 80095d0:	f000 fd6a 	bl	800a0a8 <__multiply>
 80095d4:	ee18 1a10 	vmov	r1, s16
 80095d8:	4680      	mov	r8, r0
 80095da:	4620      	mov	r0, r4
 80095dc:	f000 fc96 	bl	8009f0c <_Bfree>
 80095e0:	ee08 8a10 	vmov	s16, r8
 80095e4:	9b07      	ldr	r3, [sp, #28]
 80095e6:	1b9a      	subs	r2, r3, r6
 80095e8:	d006      	beq.n	80095f8 <_dtoa_r+0x7a0>
 80095ea:	ee18 1a10 	vmov	r1, s16
 80095ee:	4620      	mov	r0, r4
 80095f0:	f000 fe04 	bl	800a1fc <__pow5mult>
 80095f4:	ee08 0a10 	vmov	s16, r0
 80095f8:	2101      	movs	r1, #1
 80095fa:	4620      	mov	r0, r4
 80095fc:	f000 fd3e 	bl	800a07c <__i2b>
 8009600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009602:	2b00      	cmp	r3, #0
 8009604:	4606      	mov	r6, r0
 8009606:	f340 8088 	ble.w	800971a <_dtoa_r+0x8c2>
 800960a:	461a      	mov	r2, r3
 800960c:	4601      	mov	r1, r0
 800960e:	4620      	mov	r0, r4
 8009610:	f000 fdf4 	bl	800a1fc <__pow5mult>
 8009614:	9b06      	ldr	r3, [sp, #24]
 8009616:	2b01      	cmp	r3, #1
 8009618:	4606      	mov	r6, r0
 800961a:	f340 8081 	ble.w	8009720 <_dtoa_r+0x8c8>
 800961e:	f04f 0800 	mov.w	r8, #0
 8009622:	6933      	ldr	r3, [r6, #16]
 8009624:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009628:	6918      	ldr	r0, [r3, #16]
 800962a:	f000 fcd7 	bl	8009fdc <__hi0bits>
 800962e:	f1c0 0020 	rsb	r0, r0, #32
 8009632:	9b05      	ldr	r3, [sp, #20]
 8009634:	4418      	add	r0, r3
 8009636:	f010 001f 	ands.w	r0, r0, #31
 800963a:	f000 8092 	beq.w	8009762 <_dtoa_r+0x90a>
 800963e:	f1c0 0320 	rsb	r3, r0, #32
 8009642:	2b04      	cmp	r3, #4
 8009644:	f340 808a 	ble.w	800975c <_dtoa_r+0x904>
 8009648:	f1c0 001c 	rsb	r0, r0, #28
 800964c:	9b04      	ldr	r3, [sp, #16]
 800964e:	4403      	add	r3, r0
 8009650:	9304      	str	r3, [sp, #16]
 8009652:	9b05      	ldr	r3, [sp, #20]
 8009654:	4403      	add	r3, r0
 8009656:	4405      	add	r5, r0
 8009658:	9305      	str	r3, [sp, #20]
 800965a:	9b04      	ldr	r3, [sp, #16]
 800965c:	2b00      	cmp	r3, #0
 800965e:	dd07      	ble.n	8009670 <_dtoa_r+0x818>
 8009660:	ee18 1a10 	vmov	r1, s16
 8009664:	461a      	mov	r2, r3
 8009666:	4620      	mov	r0, r4
 8009668:	f000 fe22 	bl	800a2b0 <__lshift>
 800966c:	ee08 0a10 	vmov	s16, r0
 8009670:	9b05      	ldr	r3, [sp, #20]
 8009672:	2b00      	cmp	r3, #0
 8009674:	dd05      	ble.n	8009682 <_dtoa_r+0x82a>
 8009676:	4631      	mov	r1, r6
 8009678:	461a      	mov	r2, r3
 800967a:	4620      	mov	r0, r4
 800967c:	f000 fe18 	bl	800a2b0 <__lshift>
 8009680:	4606      	mov	r6, r0
 8009682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009684:	2b00      	cmp	r3, #0
 8009686:	d06e      	beq.n	8009766 <_dtoa_r+0x90e>
 8009688:	ee18 0a10 	vmov	r0, s16
 800968c:	4631      	mov	r1, r6
 800968e:	f000 fe7f 	bl	800a390 <__mcmp>
 8009692:	2800      	cmp	r0, #0
 8009694:	da67      	bge.n	8009766 <_dtoa_r+0x90e>
 8009696:	9b00      	ldr	r3, [sp, #0]
 8009698:	3b01      	subs	r3, #1
 800969a:	ee18 1a10 	vmov	r1, s16
 800969e:	9300      	str	r3, [sp, #0]
 80096a0:	220a      	movs	r2, #10
 80096a2:	2300      	movs	r3, #0
 80096a4:	4620      	mov	r0, r4
 80096a6:	f000 fc53 	bl	8009f50 <__multadd>
 80096aa:	9b08      	ldr	r3, [sp, #32]
 80096ac:	ee08 0a10 	vmov	s16, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	f000 81b1 	beq.w	8009a18 <_dtoa_r+0xbc0>
 80096b6:	2300      	movs	r3, #0
 80096b8:	4639      	mov	r1, r7
 80096ba:	220a      	movs	r2, #10
 80096bc:	4620      	mov	r0, r4
 80096be:	f000 fc47 	bl	8009f50 <__multadd>
 80096c2:	9b02      	ldr	r3, [sp, #8]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	4607      	mov	r7, r0
 80096c8:	f300 808e 	bgt.w	80097e8 <_dtoa_r+0x990>
 80096cc:	9b06      	ldr	r3, [sp, #24]
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	dc51      	bgt.n	8009776 <_dtoa_r+0x91e>
 80096d2:	e089      	b.n	80097e8 <_dtoa_r+0x990>
 80096d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80096d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80096da:	e74b      	b.n	8009574 <_dtoa_r+0x71c>
 80096dc:	9b03      	ldr	r3, [sp, #12]
 80096de:	1e5e      	subs	r6, r3, #1
 80096e0:	9b07      	ldr	r3, [sp, #28]
 80096e2:	42b3      	cmp	r3, r6
 80096e4:	bfbf      	itttt	lt
 80096e6:	9b07      	ldrlt	r3, [sp, #28]
 80096e8:	9607      	strlt	r6, [sp, #28]
 80096ea:	1af2      	sublt	r2, r6, r3
 80096ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80096ee:	bfb6      	itet	lt
 80096f0:	189b      	addlt	r3, r3, r2
 80096f2:	1b9e      	subge	r6, r3, r6
 80096f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80096f6:	9b03      	ldr	r3, [sp, #12]
 80096f8:	bfb8      	it	lt
 80096fa:	2600      	movlt	r6, #0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	bfb7      	itett	lt
 8009700:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009704:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009708:	1a9d      	sublt	r5, r3, r2
 800970a:	2300      	movlt	r3, #0
 800970c:	e734      	b.n	8009578 <_dtoa_r+0x720>
 800970e:	9e07      	ldr	r6, [sp, #28]
 8009710:	9d04      	ldr	r5, [sp, #16]
 8009712:	9f08      	ldr	r7, [sp, #32]
 8009714:	e73b      	b.n	800958e <_dtoa_r+0x736>
 8009716:	9a07      	ldr	r2, [sp, #28]
 8009718:	e767      	b.n	80095ea <_dtoa_r+0x792>
 800971a:	9b06      	ldr	r3, [sp, #24]
 800971c:	2b01      	cmp	r3, #1
 800971e:	dc18      	bgt.n	8009752 <_dtoa_r+0x8fa>
 8009720:	f1ba 0f00 	cmp.w	sl, #0
 8009724:	d115      	bne.n	8009752 <_dtoa_r+0x8fa>
 8009726:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800972a:	b993      	cbnz	r3, 8009752 <_dtoa_r+0x8fa>
 800972c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009730:	0d1b      	lsrs	r3, r3, #20
 8009732:	051b      	lsls	r3, r3, #20
 8009734:	b183      	cbz	r3, 8009758 <_dtoa_r+0x900>
 8009736:	9b04      	ldr	r3, [sp, #16]
 8009738:	3301      	adds	r3, #1
 800973a:	9304      	str	r3, [sp, #16]
 800973c:	9b05      	ldr	r3, [sp, #20]
 800973e:	3301      	adds	r3, #1
 8009740:	9305      	str	r3, [sp, #20]
 8009742:	f04f 0801 	mov.w	r8, #1
 8009746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009748:	2b00      	cmp	r3, #0
 800974a:	f47f af6a 	bne.w	8009622 <_dtoa_r+0x7ca>
 800974e:	2001      	movs	r0, #1
 8009750:	e76f      	b.n	8009632 <_dtoa_r+0x7da>
 8009752:	f04f 0800 	mov.w	r8, #0
 8009756:	e7f6      	b.n	8009746 <_dtoa_r+0x8ee>
 8009758:	4698      	mov	r8, r3
 800975a:	e7f4      	b.n	8009746 <_dtoa_r+0x8ee>
 800975c:	f43f af7d 	beq.w	800965a <_dtoa_r+0x802>
 8009760:	4618      	mov	r0, r3
 8009762:	301c      	adds	r0, #28
 8009764:	e772      	b.n	800964c <_dtoa_r+0x7f4>
 8009766:	9b03      	ldr	r3, [sp, #12]
 8009768:	2b00      	cmp	r3, #0
 800976a:	dc37      	bgt.n	80097dc <_dtoa_r+0x984>
 800976c:	9b06      	ldr	r3, [sp, #24]
 800976e:	2b02      	cmp	r3, #2
 8009770:	dd34      	ble.n	80097dc <_dtoa_r+0x984>
 8009772:	9b03      	ldr	r3, [sp, #12]
 8009774:	9302      	str	r3, [sp, #8]
 8009776:	9b02      	ldr	r3, [sp, #8]
 8009778:	b96b      	cbnz	r3, 8009796 <_dtoa_r+0x93e>
 800977a:	4631      	mov	r1, r6
 800977c:	2205      	movs	r2, #5
 800977e:	4620      	mov	r0, r4
 8009780:	f000 fbe6 	bl	8009f50 <__multadd>
 8009784:	4601      	mov	r1, r0
 8009786:	4606      	mov	r6, r0
 8009788:	ee18 0a10 	vmov	r0, s16
 800978c:	f000 fe00 	bl	800a390 <__mcmp>
 8009790:	2800      	cmp	r0, #0
 8009792:	f73f adbb 	bgt.w	800930c <_dtoa_r+0x4b4>
 8009796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009798:	9d01      	ldr	r5, [sp, #4]
 800979a:	43db      	mvns	r3, r3
 800979c:	9300      	str	r3, [sp, #0]
 800979e:	f04f 0800 	mov.w	r8, #0
 80097a2:	4631      	mov	r1, r6
 80097a4:	4620      	mov	r0, r4
 80097a6:	f000 fbb1 	bl	8009f0c <_Bfree>
 80097aa:	2f00      	cmp	r7, #0
 80097ac:	f43f aea4 	beq.w	80094f8 <_dtoa_r+0x6a0>
 80097b0:	f1b8 0f00 	cmp.w	r8, #0
 80097b4:	d005      	beq.n	80097c2 <_dtoa_r+0x96a>
 80097b6:	45b8      	cmp	r8, r7
 80097b8:	d003      	beq.n	80097c2 <_dtoa_r+0x96a>
 80097ba:	4641      	mov	r1, r8
 80097bc:	4620      	mov	r0, r4
 80097be:	f000 fba5 	bl	8009f0c <_Bfree>
 80097c2:	4639      	mov	r1, r7
 80097c4:	4620      	mov	r0, r4
 80097c6:	f000 fba1 	bl	8009f0c <_Bfree>
 80097ca:	e695      	b.n	80094f8 <_dtoa_r+0x6a0>
 80097cc:	2600      	movs	r6, #0
 80097ce:	4637      	mov	r7, r6
 80097d0:	e7e1      	b.n	8009796 <_dtoa_r+0x93e>
 80097d2:	9700      	str	r7, [sp, #0]
 80097d4:	4637      	mov	r7, r6
 80097d6:	e599      	b.n	800930c <_dtoa_r+0x4b4>
 80097d8:	40240000 	.word	0x40240000
 80097dc:	9b08      	ldr	r3, [sp, #32]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	f000 80ca 	beq.w	8009978 <_dtoa_r+0xb20>
 80097e4:	9b03      	ldr	r3, [sp, #12]
 80097e6:	9302      	str	r3, [sp, #8]
 80097e8:	2d00      	cmp	r5, #0
 80097ea:	dd05      	ble.n	80097f8 <_dtoa_r+0x9a0>
 80097ec:	4639      	mov	r1, r7
 80097ee:	462a      	mov	r2, r5
 80097f0:	4620      	mov	r0, r4
 80097f2:	f000 fd5d 	bl	800a2b0 <__lshift>
 80097f6:	4607      	mov	r7, r0
 80097f8:	f1b8 0f00 	cmp.w	r8, #0
 80097fc:	d05b      	beq.n	80098b6 <_dtoa_r+0xa5e>
 80097fe:	6879      	ldr	r1, [r7, #4]
 8009800:	4620      	mov	r0, r4
 8009802:	f000 fb43 	bl	8009e8c <_Balloc>
 8009806:	4605      	mov	r5, r0
 8009808:	b928      	cbnz	r0, 8009816 <_dtoa_r+0x9be>
 800980a:	4b87      	ldr	r3, [pc, #540]	; (8009a28 <_dtoa_r+0xbd0>)
 800980c:	4602      	mov	r2, r0
 800980e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009812:	f7ff bb3b 	b.w	8008e8c <_dtoa_r+0x34>
 8009816:	693a      	ldr	r2, [r7, #16]
 8009818:	3202      	adds	r2, #2
 800981a:	0092      	lsls	r2, r2, #2
 800981c:	f107 010c 	add.w	r1, r7, #12
 8009820:	300c      	adds	r0, #12
 8009822:	f7fe fcbf 	bl	80081a4 <memcpy>
 8009826:	2201      	movs	r2, #1
 8009828:	4629      	mov	r1, r5
 800982a:	4620      	mov	r0, r4
 800982c:	f000 fd40 	bl	800a2b0 <__lshift>
 8009830:	9b01      	ldr	r3, [sp, #4]
 8009832:	f103 0901 	add.w	r9, r3, #1
 8009836:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800983a:	4413      	add	r3, r2
 800983c:	9305      	str	r3, [sp, #20]
 800983e:	f00a 0301 	and.w	r3, sl, #1
 8009842:	46b8      	mov	r8, r7
 8009844:	9304      	str	r3, [sp, #16]
 8009846:	4607      	mov	r7, r0
 8009848:	4631      	mov	r1, r6
 800984a:	ee18 0a10 	vmov	r0, s16
 800984e:	f7ff fa77 	bl	8008d40 <quorem>
 8009852:	4641      	mov	r1, r8
 8009854:	9002      	str	r0, [sp, #8]
 8009856:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800985a:	ee18 0a10 	vmov	r0, s16
 800985e:	f000 fd97 	bl	800a390 <__mcmp>
 8009862:	463a      	mov	r2, r7
 8009864:	9003      	str	r0, [sp, #12]
 8009866:	4631      	mov	r1, r6
 8009868:	4620      	mov	r0, r4
 800986a:	f000 fdad 	bl	800a3c8 <__mdiff>
 800986e:	68c2      	ldr	r2, [r0, #12]
 8009870:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8009874:	4605      	mov	r5, r0
 8009876:	bb02      	cbnz	r2, 80098ba <_dtoa_r+0xa62>
 8009878:	4601      	mov	r1, r0
 800987a:	ee18 0a10 	vmov	r0, s16
 800987e:	f000 fd87 	bl	800a390 <__mcmp>
 8009882:	4602      	mov	r2, r0
 8009884:	4629      	mov	r1, r5
 8009886:	4620      	mov	r0, r4
 8009888:	9207      	str	r2, [sp, #28]
 800988a:	f000 fb3f 	bl	8009f0c <_Bfree>
 800988e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009892:	ea43 0102 	orr.w	r1, r3, r2
 8009896:	9b04      	ldr	r3, [sp, #16]
 8009898:	430b      	orrs	r3, r1
 800989a:	464d      	mov	r5, r9
 800989c:	d10f      	bne.n	80098be <_dtoa_r+0xa66>
 800989e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80098a2:	d02a      	beq.n	80098fa <_dtoa_r+0xaa2>
 80098a4:	9b03      	ldr	r3, [sp, #12]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	dd02      	ble.n	80098b0 <_dtoa_r+0xa58>
 80098aa:	9b02      	ldr	r3, [sp, #8]
 80098ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80098b0:	f88b a000 	strb.w	sl, [fp]
 80098b4:	e775      	b.n	80097a2 <_dtoa_r+0x94a>
 80098b6:	4638      	mov	r0, r7
 80098b8:	e7ba      	b.n	8009830 <_dtoa_r+0x9d8>
 80098ba:	2201      	movs	r2, #1
 80098bc:	e7e2      	b.n	8009884 <_dtoa_r+0xa2c>
 80098be:	9b03      	ldr	r3, [sp, #12]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	db04      	blt.n	80098ce <_dtoa_r+0xa76>
 80098c4:	9906      	ldr	r1, [sp, #24]
 80098c6:	430b      	orrs	r3, r1
 80098c8:	9904      	ldr	r1, [sp, #16]
 80098ca:	430b      	orrs	r3, r1
 80098cc:	d122      	bne.n	8009914 <_dtoa_r+0xabc>
 80098ce:	2a00      	cmp	r2, #0
 80098d0:	ddee      	ble.n	80098b0 <_dtoa_r+0xa58>
 80098d2:	ee18 1a10 	vmov	r1, s16
 80098d6:	2201      	movs	r2, #1
 80098d8:	4620      	mov	r0, r4
 80098da:	f000 fce9 	bl	800a2b0 <__lshift>
 80098de:	4631      	mov	r1, r6
 80098e0:	ee08 0a10 	vmov	s16, r0
 80098e4:	f000 fd54 	bl	800a390 <__mcmp>
 80098e8:	2800      	cmp	r0, #0
 80098ea:	dc03      	bgt.n	80098f4 <_dtoa_r+0xa9c>
 80098ec:	d1e0      	bne.n	80098b0 <_dtoa_r+0xa58>
 80098ee:	f01a 0f01 	tst.w	sl, #1
 80098f2:	d0dd      	beq.n	80098b0 <_dtoa_r+0xa58>
 80098f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80098f8:	d1d7      	bne.n	80098aa <_dtoa_r+0xa52>
 80098fa:	2339      	movs	r3, #57	; 0x39
 80098fc:	f88b 3000 	strb.w	r3, [fp]
 8009900:	462b      	mov	r3, r5
 8009902:	461d      	mov	r5, r3
 8009904:	3b01      	subs	r3, #1
 8009906:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800990a:	2a39      	cmp	r2, #57	; 0x39
 800990c:	d071      	beq.n	80099f2 <_dtoa_r+0xb9a>
 800990e:	3201      	adds	r2, #1
 8009910:	701a      	strb	r2, [r3, #0]
 8009912:	e746      	b.n	80097a2 <_dtoa_r+0x94a>
 8009914:	2a00      	cmp	r2, #0
 8009916:	dd07      	ble.n	8009928 <_dtoa_r+0xad0>
 8009918:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800991c:	d0ed      	beq.n	80098fa <_dtoa_r+0xaa2>
 800991e:	f10a 0301 	add.w	r3, sl, #1
 8009922:	f88b 3000 	strb.w	r3, [fp]
 8009926:	e73c      	b.n	80097a2 <_dtoa_r+0x94a>
 8009928:	9b05      	ldr	r3, [sp, #20]
 800992a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800992e:	4599      	cmp	r9, r3
 8009930:	d047      	beq.n	80099c2 <_dtoa_r+0xb6a>
 8009932:	ee18 1a10 	vmov	r1, s16
 8009936:	2300      	movs	r3, #0
 8009938:	220a      	movs	r2, #10
 800993a:	4620      	mov	r0, r4
 800993c:	f000 fb08 	bl	8009f50 <__multadd>
 8009940:	45b8      	cmp	r8, r7
 8009942:	ee08 0a10 	vmov	s16, r0
 8009946:	f04f 0300 	mov.w	r3, #0
 800994a:	f04f 020a 	mov.w	r2, #10
 800994e:	4641      	mov	r1, r8
 8009950:	4620      	mov	r0, r4
 8009952:	d106      	bne.n	8009962 <_dtoa_r+0xb0a>
 8009954:	f000 fafc 	bl	8009f50 <__multadd>
 8009958:	4680      	mov	r8, r0
 800995a:	4607      	mov	r7, r0
 800995c:	f109 0901 	add.w	r9, r9, #1
 8009960:	e772      	b.n	8009848 <_dtoa_r+0x9f0>
 8009962:	f000 faf5 	bl	8009f50 <__multadd>
 8009966:	4639      	mov	r1, r7
 8009968:	4680      	mov	r8, r0
 800996a:	2300      	movs	r3, #0
 800996c:	220a      	movs	r2, #10
 800996e:	4620      	mov	r0, r4
 8009970:	f000 faee 	bl	8009f50 <__multadd>
 8009974:	4607      	mov	r7, r0
 8009976:	e7f1      	b.n	800995c <_dtoa_r+0xb04>
 8009978:	9b03      	ldr	r3, [sp, #12]
 800997a:	9302      	str	r3, [sp, #8]
 800997c:	9d01      	ldr	r5, [sp, #4]
 800997e:	ee18 0a10 	vmov	r0, s16
 8009982:	4631      	mov	r1, r6
 8009984:	f7ff f9dc 	bl	8008d40 <quorem>
 8009988:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800998c:	9b01      	ldr	r3, [sp, #4]
 800998e:	f805 ab01 	strb.w	sl, [r5], #1
 8009992:	1aea      	subs	r2, r5, r3
 8009994:	9b02      	ldr	r3, [sp, #8]
 8009996:	4293      	cmp	r3, r2
 8009998:	dd09      	ble.n	80099ae <_dtoa_r+0xb56>
 800999a:	ee18 1a10 	vmov	r1, s16
 800999e:	2300      	movs	r3, #0
 80099a0:	220a      	movs	r2, #10
 80099a2:	4620      	mov	r0, r4
 80099a4:	f000 fad4 	bl	8009f50 <__multadd>
 80099a8:	ee08 0a10 	vmov	s16, r0
 80099ac:	e7e7      	b.n	800997e <_dtoa_r+0xb26>
 80099ae:	9b02      	ldr	r3, [sp, #8]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	bfc8      	it	gt
 80099b4:	461d      	movgt	r5, r3
 80099b6:	9b01      	ldr	r3, [sp, #4]
 80099b8:	bfd8      	it	le
 80099ba:	2501      	movle	r5, #1
 80099bc:	441d      	add	r5, r3
 80099be:	f04f 0800 	mov.w	r8, #0
 80099c2:	ee18 1a10 	vmov	r1, s16
 80099c6:	2201      	movs	r2, #1
 80099c8:	4620      	mov	r0, r4
 80099ca:	f000 fc71 	bl	800a2b0 <__lshift>
 80099ce:	4631      	mov	r1, r6
 80099d0:	ee08 0a10 	vmov	s16, r0
 80099d4:	f000 fcdc 	bl	800a390 <__mcmp>
 80099d8:	2800      	cmp	r0, #0
 80099da:	dc91      	bgt.n	8009900 <_dtoa_r+0xaa8>
 80099dc:	d102      	bne.n	80099e4 <_dtoa_r+0xb8c>
 80099de:	f01a 0f01 	tst.w	sl, #1
 80099e2:	d18d      	bne.n	8009900 <_dtoa_r+0xaa8>
 80099e4:	462b      	mov	r3, r5
 80099e6:	461d      	mov	r5, r3
 80099e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099ec:	2a30      	cmp	r2, #48	; 0x30
 80099ee:	d0fa      	beq.n	80099e6 <_dtoa_r+0xb8e>
 80099f0:	e6d7      	b.n	80097a2 <_dtoa_r+0x94a>
 80099f2:	9a01      	ldr	r2, [sp, #4]
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d184      	bne.n	8009902 <_dtoa_r+0xaaa>
 80099f8:	9b00      	ldr	r3, [sp, #0]
 80099fa:	3301      	adds	r3, #1
 80099fc:	9300      	str	r3, [sp, #0]
 80099fe:	2331      	movs	r3, #49	; 0x31
 8009a00:	7013      	strb	r3, [r2, #0]
 8009a02:	e6ce      	b.n	80097a2 <_dtoa_r+0x94a>
 8009a04:	4b09      	ldr	r3, [pc, #36]	; (8009a2c <_dtoa_r+0xbd4>)
 8009a06:	f7ff ba95 	b.w	8008f34 <_dtoa_r+0xdc>
 8009a0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f47f aa6e 	bne.w	8008eee <_dtoa_r+0x96>
 8009a12:	4b07      	ldr	r3, [pc, #28]	; (8009a30 <_dtoa_r+0xbd8>)
 8009a14:	f7ff ba8e 	b.w	8008f34 <_dtoa_r+0xdc>
 8009a18:	9b02      	ldr	r3, [sp, #8]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	dcae      	bgt.n	800997c <_dtoa_r+0xb24>
 8009a1e:	9b06      	ldr	r3, [sp, #24]
 8009a20:	2b02      	cmp	r3, #2
 8009a22:	f73f aea8 	bgt.w	8009776 <_dtoa_r+0x91e>
 8009a26:	e7a9      	b.n	800997c <_dtoa_r+0xb24>
 8009a28:	0800dac7 	.word	0x0800dac7
 8009a2c:	0800da24 	.word	0x0800da24
 8009a30:	0800da48 	.word	0x0800da48

08009a34 <__sflush_r>:
 8009a34:	898a      	ldrh	r2, [r1, #12]
 8009a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a3a:	4605      	mov	r5, r0
 8009a3c:	0710      	lsls	r0, r2, #28
 8009a3e:	460c      	mov	r4, r1
 8009a40:	d458      	bmi.n	8009af4 <__sflush_r+0xc0>
 8009a42:	684b      	ldr	r3, [r1, #4]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	dc05      	bgt.n	8009a54 <__sflush_r+0x20>
 8009a48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	dc02      	bgt.n	8009a54 <__sflush_r+0x20>
 8009a4e:	2000      	movs	r0, #0
 8009a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a56:	2e00      	cmp	r6, #0
 8009a58:	d0f9      	beq.n	8009a4e <__sflush_r+0x1a>
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a60:	682f      	ldr	r7, [r5, #0]
 8009a62:	602b      	str	r3, [r5, #0]
 8009a64:	d032      	beq.n	8009acc <__sflush_r+0x98>
 8009a66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a68:	89a3      	ldrh	r3, [r4, #12]
 8009a6a:	075a      	lsls	r2, r3, #29
 8009a6c:	d505      	bpl.n	8009a7a <__sflush_r+0x46>
 8009a6e:	6863      	ldr	r3, [r4, #4]
 8009a70:	1ac0      	subs	r0, r0, r3
 8009a72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a74:	b10b      	cbz	r3, 8009a7a <__sflush_r+0x46>
 8009a76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a78:	1ac0      	subs	r0, r0, r3
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a80:	6a21      	ldr	r1, [r4, #32]
 8009a82:	4628      	mov	r0, r5
 8009a84:	47b0      	blx	r6
 8009a86:	1c43      	adds	r3, r0, #1
 8009a88:	89a3      	ldrh	r3, [r4, #12]
 8009a8a:	d106      	bne.n	8009a9a <__sflush_r+0x66>
 8009a8c:	6829      	ldr	r1, [r5, #0]
 8009a8e:	291d      	cmp	r1, #29
 8009a90:	d82c      	bhi.n	8009aec <__sflush_r+0xb8>
 8009a92:	4a2a      	ldr	r2, [pc, #168]	; (8009b3c <__sflush_r+0x108>)
 8009a94:	40ca      	lsrs	r2, r1
 8009a96:	07d6      	lsls	r6, r2, #31
 8009a98:	d528      	bpl.n	8009aec <__sflush_r+0xb8>
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	6062      	str	r2, [r4, #4]
 8009a9e:	04d9      	lsls	r1, r3, #19
 8009aa0:	6922      	ldr	r2, [r4, #16]
 8009aa2:	6022      	str	r2, [r4, #0]
 8009aa4:	d504      	bpl.n	8009ab0 <__sflush_r+0x7c>
 8009aa6:	1c42      	adds	r2, r0, #1
 8009aa8:	d101      	bne.n	8009aae <__sflush_r+0x7a>
 8009aaa:	682b      	ldr	r3, [r5, #0]
 8009aac:	b903      	cbnz	r3, 8009ab0 <__sflush_r+0x7c>
 8009aae:	6560      	str	r0, [r4, #84]	; 0x54
 8009ab0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ab2:	602f      	str	r7, [r5, #0]
 8009ab4:	2900      	cmp	r1, #0
 8009ab6:	d0ca      	beq.n	8009a4e <__sflush_r+0x1a>
 8009ab8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009abc:	4299      	cmp	r1, r3
 8009abe:	d002      	beq.n	8009ac6 <__sflush_r+0x92>
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	f000 fd7d 	bl	800a5c0 <_free_r>
 8009ac6:	2000      	movs	r0, #0
 8009ac8:	6360      	str	r0, [r4, #52]	; 0x34
 8009aca:	e7c1      	b.n	8009a50 <__sflush_r+0x1c>
 8009acc:	6a21      	ldr	r1, [r4, #32]
 8009ace:	2301      	movs	r3, #1
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	47b0      	blx	r6
 8009ad4:	1c41      	adds	r1, r0, #1
 8009ad6:	d1c7      	bne.n	8009a68 <__sflush_r+0x34>
 8009ad8:	682b      	ldr	r3, [r5, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d0c4      	beq.n	8009a68 <__sflush_r+0x34>
 8009ade:	2b1d      	cmp	r3, #29
 8009ae0:	d001      	beq.n	8009ae6 <__sflush_r+0xb2>
 8009ae2:	2b16      	cmp	r3, #22
 8009ae4:	d101      	bne.n	8009aea <__sflush_r+0xb6>
 8009ae6:	602f      	str	r7, [r5, #0]
 8009ae8:	e7b1      	b.n	8009a4e <__sflush_r+0x1a>
 8009aea:	89a3      	ldrh	r3, [r4, #12]
 8009aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009af0:	81a3      	strh	r3, [r4, #12]
 8009af2:	e7ad      	b.n	8009a50 <__sflush_r+0x1c>
 8009af4:	690f      	ldr	r7, [r1, #16]
 8009af6:	2f00      	cmp	r7, #0
 8009af8:	d0a9      	beq.n	8009a4e <__sflush_r+0x1a>
 8009afa:	0793      	lsls	r3, r2, #30
 8009afc:	680e      	ldr	r6, [r1, #0]
 8009afe:	bf08      	it	eq
 8009b00:	694b      	ldreq	r3, [r1, #20]
 8009b02:	600f      	str	r7, [r1, #0]
 8009b04:	bf18      	it	ne
 8009b06:	2300      	movne	r3, #0
 8009b08:	eba6 0807 	sub.w	r8, r6, r7
 8009b0c:	608b      	str	r3, [r1, #8]
 8009b0e:	f1b8 0f00 	cmp.w	r8, #0
 8009b12:	dd9c      	ble.n	8009a4e <__sflush_r+0x1a>
 8009b14:	6a21      	ldr	r1, [r4, #32]
 8009b16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b18:	4643      	mov	r3, r8
 8009b1a:	463a      	mov	r2, r7
 8009b1c:	4628      	mov	r0, r5
 8009b1e:	47b0      	blx	r6
 8009b20:	2800      	cmp	r0, #0
 8009b22:	dc06      	bgt.n	8009b32 <__sflush_r+0xfe>
 8009b24:	89a3      	ldrh	r3, [r4, #12]
 8009b26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b2a:	81a3      	strh	r3, [r4, #12]
 8009b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b30:	e78e      	b.n	8009a50 <__sflush_r+0x1c>
 8009b32:	4407      	add	r7, r0
 8009b34:	eba8 0800 	sub.w	r8, r8, r0
 8009b38:	e7e9      	b.n	8009b0e <__sflush_r+0xda>
 8009b3a:	bf00      	nop
 8009b3c:	20400001 	.word	0x20400001

08009b40 <_fflush_r>:
 8009b40:	b538      	push	{r3, r4, r5, lr}
 8009b42:	690b      	ldr	r3, [r1, #16]
 8009b44:	4605      	mov	r5, r0
 8009b46:	460c      	mov	r4, r1
 8009b48:	b913      	cbnz	r3, 8009b50 <_fflush_r+0x10>
 8009b4a:	2500      	movs	r5, #0
 8009b4c:	4628      	mov	r0, r5
 8009b4e:	bd38      	pop	{r3, r4, r5, pc}
 8009b50:	b118      	cbz	r0, 8009b5a <_fflush_r+0x1a>
 8009b52:	6983      	ldr	r3, [r0, #24]
 8009b54:	b90b      	cbnz	r3, 8009b5a <_fflush_r+0x1a>
 8009b56:	f000 f887 	bl	8009c68 <__sinit>
 8009b5a:	4b14      	ldr	r3, [pc, #80]	; (8009bac <_fflush_r+0x6c>)
 8009b5c:	429c      	cmp	r4, r3
 8009b5e:	d11b      	bne.n	8009b98 <_fflush_r+0x58>
 8009b60:	686c      	ldr	r4, [r5, #4]
 8009b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d0ef      	beq.n	8009b4a <_fflush_r+0xa>
 8009b6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b6c:	07d0      	lsls	r0, r2, #31
 8009b6e:	d404      	bmi.n	8009b7a <_fflush_r+0x3a>
 8009b70:	0599      	lsls	r1, r3, #22
 8009b72:	d402      	bmi.n	8009b7a <_fflush_r+0x3a>
 8009b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b76:	f000 f91a 	bl	8009dae <__retarget_lock_acquire_recursive>
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	4621      	mov	r1, r4
 8009b7e:	f7ff ff59 	bl	8009a34 <__sflush_r>
 8009b82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b84:	07da      	lsls	r2, r3, #31
 8009b86:	4605      	mov	r5, r0
 8009b88:	d4e0      	bmi.n	8009b4c <_fflush_r+0xc>
 8009b8a:	89a3      	ldrh	r3, [r4, #12]
 8009b8c:	059b      	lsls	r3, r3, #22
 8009b8e:	d4dd      	bmi.n	8009b4c <_fflush_r+0xc>
 8009b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b92:	f000 f90d 	bl	8009db0 <__retarget_lock_release_recursive>
 8009b96:	e7d9      	b.n	8009b4c <_fflush_r+0xc>
 8009b98:	4b05      	ldr	r3, [pc, #20]	; (8009bb0 <_fflush_r+0x70>)
 8009b9a:	429c      	cmp	r4, r3
 8009b9c:	d101      	bne.n	8009ba2 <_fflush_r+0x62>
 8009b9e:	68ac      	ldr	r4, [r5, #8]
 8009ba0:	e7df      	b.n	8009b62 <_fflush_r+0x22>
 8009ba2:	4b04      	ldr	r3, [pc, #16]	; (8009bb4 <_fflush_r+0x74>)
 8009ba4:	429c      	cmp	r4, r3
 8009ba6:	bf08      	it	eq
 8009ba8:	68ec      	ldreq	r4, [r5, #12]
 8009baa:	e7da      	b.n	8009b62 <_fflush_r+0x22>
 8009bac:	0800daf8 	.word	0x0800daf8
 8009bb0:	0800db18 	.word	0x0800db18
 8009bb4:	0800dad8 	.word	0x0800dad8

08009bb8 <std>:
 8009bb8:	2300      	movs	r3, #0
 8009bba:	b510      	push	{r4, lr}
 8009bbc:	4604      	mov	r4, r0
 8009bbe:	e9c0 3300 	strd	r3, r3, [r0]
 8009bc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009bc6:	6083      	str	r3, [r0, #8]
 8009bc8:	8181      	strh	r1, [r0, #12]
 8009bca:	6643      	str	r3, [r0, #100]	; 0x64
 8009bcc:	81c2      	strh	r2, [r0, #14]
 8009bce:	6183      	str	r3, [r0, #24]
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	2208      	movs	r2, #8
 8009bd4:	305c      	adds	r0, #92	; 0x5c
 8009bd6:	f7fe faf3 	bl	80081c0 <memset>
 8009bda:	4b05      	ldr	r3, [pc, #20]	; (8009bf0 <std+0x38>)
 8009bdc:	6263      	str	r3, [r4, #36]	; 0x24
 8009bde:	4b05      	ldr	r3, [pc, #20]	; (8009bf4 <std+0x3c>)
 8009be0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009be2:	4b05      	ldr	r3, [pc, #20]	; (8009bf8 <std+0x40>)
 8009be4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009be6:	4b05      	ldr	r3, [pc, #20]	; (8009bfc <std+0x44>)
 8009be8:	6224      	str	r4, [r4, #32]
 8009bea:	6323      	str	r3, [r4, #48]	; 0x30
 8009bec:	bd10      	pop	{r4, pc}
 8009bee:	bf00      	nop
 8009bf0:	0800aa55 	.word	0x0800aa55
 8009bf4:	0800aa77 	.word	0x0800aa77
 8009bf8:	0800aaaf 	.word	0x0800aaaf
 8009bfc:	0800aad3 	.word	0x0800aad3

08009c00 <_cleanup_r>:
 8009c00:	4901      	ldr	r1, [pc, #4]	; (8009c08 <_cleanup_r+0x8>)
 8009c02:	f000 b8af 	b.w	8009d64 <_fwalk_reent>
 8009c06:	bf00      	nop
 8009c08:	08009b41 	.word	0x08009b41

08009c0c <__sfmoreglue>:
 8009c0c:	b570      	push	{r4, r5, r6, lr}
 8009c0e:	2268      	movs	r2, #104	; 0x68
 8009c10:	1e4d      	subs	r5, r1, #1
 8009c12:	4355      	muls	r5, r2
 8009c14:	460e      	mov	r6, r1
 8009c16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009c1a:	f000 fd3d 	bl	800a698 <_malloc_r>
 8009c1e:	4604      	mov	r4, r0
 8009c20:	b140      	cbz	r0, 8009c34 <__sfmoreglue+0x28>
 8009c22:	2100      	movs	r1, #0
 8009c24:	e9c0 1600 	strd	r1, r6, [r0]
 8009c28:	300c      	adds	r0, #12
 8009c2a:	60a0      	str	r0, [r4, #8]
 8009c2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009c30:	f7fe fac6 	bl	80081c0 <memset>
 8009c34:	4620      	mov	r0, r4
 8009c36:	bd70      	pop	{r4, r5, r6, pc}

08009c38 <__sfp_lock_acquire>:
 8009c38:	4801      	ldr	r0, [pc, #4]	; (8009c40 <__sfp_lock_acquire+0x8>)
 8009c3a:	f000 b8b8 	b.w	8009dae <__retarget_lock_acquire_recursive>
 8009c3e:	bf00      	nop
 8009c40:	200004d9 	.word	0x200004d9

08009c44 <__sfp_lock_release>:
 8009c44:	4801      	ldr	r0, [pc, #4]	; (8009c4c <__sfp_lock_release+0x8>)
 8009c46:	f000 b8b3 	b.w	8009db0 <__retarget_lock_release_recursive>
 8009c4a:	bf00      	nop
 8009c4c:	200004d9 	.word	0x200004d9

08009c50 <__sinit_lock_acquire>:
 8009c50:	4801      	ldr	r0, [pc, #4]	; (8009c58 <__sinit_lock_acquire+0x8>)
 8009c52:	f000 b8ac 	b.w	8009dae <__retarget_lock_acquire_recursive>
 8009c56:	bf00      	nop
 8009c58:	200004da 	.word	0x200004da

08009c5c <__sinit_lock_release>:
 8009c5c:	4801      	ldr	r0, [pc, #4]	; (8009c64 <__sinit_lock_release+0x8>)
 8009c5e:	f000 b8a7 	b.w	8009db0 <__retarget_lock_release_recursive>
 8009c62:	bf00      	nop
 8009c64:	200004da 	.word	0x200004da

08009c68 <__sinit>:
 8009c68:	b510      	push	{r4, lr}
 8009c6a:	4604      	mov	r4, r0
 8009c6c:	f7ff fff0 	bl	8009c50 <__sinit_lock_acquire>
 8009c70:	69a3      	ldr	r3, [r4, #24]
 8009c72:	b11b      	cbz	r3, 8009c7c <__sinit+0x14>
 8009c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c78:	f7ff bff0 	b.w	8009c5c <__sinit_lock_release>
 8009c7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c80:	6523      	str	r3, [r4, #80]	; 0x50
 8009c82:	4b13      	ldr	r3, [pc, #76]	; (8009cd0 <__sinit+0x68>)
 8009c84:	4a13      	ldr	r2, [pc, #76]	; (8009cd4 <__sinit+0x6c>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c8a:	42a3      	cmp	r3, r4
 8009c8c:	bf04      	itt	eq
 8009c8e:	2301      	moveq	r3, #1
 8009c90:	61a3      	streq	r3, [r4, #24]
 8009c92:	4620      	mov	r0, r4
 8009c94:	f000 f820 	bl	8009cd8 <__sfp>
 8009c98:	6060      	str	r0, [r4, #4]
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	f000 f81c 	bl	8009cd8 <__sfp>
 8009ca0:	60a0      	str	r0, [r4, #8]
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	f000 f818 	bl	8009cd8 <__sfp>
 8009ca8:	2200      	movs	r2, #0
 8009caa:	60e0      	str	r0, [r4, #12]
 8009cac:	2104      	movs	r1, #4
 8009cae:	6860      	ldr	r0, [r4, #4]
 8009cb0:	f7ff ff82 	bl	8009bb8 <std>
 8009cb4:	68a0      	ldr	r0, [r4, #8]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	2109      	movs	r1, #9
 8009cba:	f7ff ff7d 	bl	8009bb8 <std>
 8009cbe:	68e0      	ldr	r0, [r4, #12]
 8009cc0:	2202      	movs	r2, #2
 8009cc2:	2112      	movs	r1, #18
 8009cc4:	f7ff ff78 	bl	8009bb8 <std>
 8009cc8:	2301      	movs	r3, #1
 8009cca:	61a3      	str	r3, [r4, #24]
 8009ccc:	e7d2      	b.n	8009c74 <__sinit+0xc>
 8009cce:	bf00      	nop
 8009cd0:	0800da10 	.word	0x0800da10
 8009cd4:	08009c01 	.word	0x08009c01

08009cd8 <__sfp>:
 8009cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cda:	4607      	mov	r7, r0
 8009cdc:	f7ff ffac 	bl	8009c38 <__sfp_lock_acquire>
 8009ce0:	4b1e      	ldr	r3, [pc, #120]	; (8009d5c <__sfp+0x84>)
 8009ce2:	681e      	ldr	r6, [r3, #0]
 8009ce4:	69b3      	ldr	r3, [r6, #24]
 8009ce6:	b913      	cbnz	r3, 8009cee <__sfp+0x16>
 8009ce8:	4630      	mov	r0, r6
 8009cea:	f7ff ffbd 	bl	8009c68 <__sinit>
 8009cee:	3648      	adds	r6, #72	; 0x48
 8009cf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009cf4:	3b01      	subs	r3, #1
 8009cf6:	d503      	bpl.n	8009d00 <__sfp+0x28>
 8009cf8:	6833      	ldr	r3, [r6, #0]
 8009cfa:	b30b      	cbz	r3, 8009d40 <__sfp+0x68>
 8009cfc:	6836      	ldr	r6, [r6, #0]
 8009cfe:	e7f7      	b.n	8009cf0 <__sfp+0x18>
 8009d00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009d04:	b9d5      	cbnz	r5, 8009d3c <__sfp+0x64>
 8009d06:	4b16      	ldr	r3, [pc, #88]	; (8009d60 <__sfp+0x88>)
 8009d08:	60e3      	str	r3, [r4, #12]
 8009d0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009d0e:	6665      	str	r5, [r4, #100]	; 0x64
 8009d10:	f000 f84c 	bl	8009dac <__retarget_lock_init_recursive>
 8009d14:	f7ff ff96 	bl	8009c44 <__sfp_lock_release>
 8009d18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009d1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009d20:	6025      	str	r5, [r4, #0]
 8009d22:	61a5      	str	r5, [r4, #24]
 8009d24:	2208      	movs	r2, #8
 8009d26:	4629      	mov	r1, r5
 8009d28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009d2c:	f7fe fa48 	bl	80081c0 <memset>
 8009d30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009d34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009d38:	4620      	mov	r0, r4
 8009d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d3c:	3468      	adds	r4, #104	; 0x68
 8009d3e:	e7d9      	b.n	8009cf4 <__sfp+0x1c>
 8009d40:	2104      	movs	r1, #4
 8009d42:	4638      	mov	r0, r7
 8009d44:	f7ff ff62 	bl	8009c0c <__sfmoreglue>
 8009d48:	4604      	mov	r4, r0
 8009d4a:	6030      	str	r0, [r6, #0]
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	d1d5      	bne.n	8009cfc <__sfp+0x24>
 8009d50:	f7ff ff78 	bl	8009c44 <__sfp_lock_release>
 8009d54:	230c      	movs	r3, #12
 8009d56:	603b      	str	r3, [r7, #0]
 8009d58:	e7ee      	b.n	8009d38 <__sfp+0x60>
 8009d5a:	bf00      	nop
 8009d5c:	0800da10 	.word	0x0800da10
 8009d60:	ffff0001 	.word	0xffff0001

08009d64 <_fwalk_reent>:
 8009d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d68:	4606      	mov	r6, r0
 8009d6a:	4688      	mov	r8, r1
 8009d6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d70:	2700      	movs	r7, #0
 8009d72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d76:	f1b9 0901 	subs.w	r9, r9, #1
 8009d7a:	d505      	bpl.n	8009d88 <_fwalk_reent+0x24>
 8009d7c:	6824      	ldr	r4, [r4, #0]
 8009d7e:	2c00      	cmp	r4, #0
 8009d80:	d1f7      	bne.n	8009d72 <_fwalk_reent+0xe>
 8009d82:	4638      	mov	r0, r7
 8009d84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d88:	89ab      	ldrh	r3, [r5, #12]
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d907      	bls.n	8009d9e <_fwalk_reent+0x3a>
 8009d8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d92:	3301      	adds	r3, #1
 8009d94:	d003      	beq.n	8009d9e <_fwalk_reent+0x3a>
 8009d96:	4629      	mov	r1, r5
 8009d98:	4630      	mov	r0, r6
 8009d9a:	47c0      	blx	r8
 8009d9c:	4307      	orrs	r7, r0
 8009d9e:	3568      	adds	r5, #104	; 0x68
 8009da0:	e7e9      	b.n	8009d76 <_fwalk_reent+0x12>
	...

08009da4 <_localeconv_r>:
 8009da4:	4800      	ldr	r0, [pc, #0]	; (8009da8 <_localeconv_r+0x4>)
 8009da6:	4770      	bx	lr
 8009da8:	20000160 	.word	0x20000160

08009dac <__retarget_lock_init_recursive>:
 8009dac:	4770      	bx	lr

08009dae <__retarget_lock_acquire_recursive>:
 8009dae:	4770      	bx	lr

08009db0 <__retarget_lock_release_recursive>:
 8009db0:	4770      	bx	lr

08009db2 <__swhatbuf_r>:
 8009db2:	b570      	push	{r4, r5, r6, lr}
 8009db4:	460e      	mov	r6, r1
 8009db6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dba:	2900      	cmp	r1, #0
 8009dbc:	b096      	sub	sp, #88	; 0x58
 8009dbe:	4614      	mov	r4, r2
 8009dc0:	461d      	mov	r5, r3
 8009dc2:	da08      	bge.n	8009dd6 <__swhatbuf_r+0x24>
 8009dc4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	602a      	str	r2, [r5, #0]
 8009dcc:	061a      	lsls	r2, r3, #24
 8009dce:	d410      	bmi.n	8009df2 <__swhatbuf_r+0x40>
 8009dd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dd4:	e00e      	b.n	8009df4 <__swhatbuf_r+0x42>
 8009dd6:	466a      	mov	r2, sp
 8009dd8:	f000 fed2 	bl	800ab80 <_fstat_r>
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	dbf1      	blt.n	8009dc4 <__swhatbuf_r+0x12>
 8009de0:	9a01      	ldr	r2, [sp, #4]
 8009de2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009de6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009dea:	425a      	negs	r2, r3
 8009dec:	415a      	adcs	r2, r3
 8009dee:	602a      	str	r2, [r5, #0]
 8009df0:	e7ee      	b.n	8009dd0 <__swhatbuf_r+0x1e>
 8009df2:	2340      	movs	r3, #64	; 0x40
 8009df4:	2000      	movs	r0, #0
 8009df6:	6023      	str	r3, [r4, #0]
 8009df8:	b016      	add	sp, #88	; 0x58
 8009dfa:	bd70      	pop	{r4, r5, r6, pc}

08009dfc <__smakebuf_r>:
 8009dfc:	898b      	ldrh	r3, [r1, #12]
 8009dfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e00:	079d      	lsls	r5, r3, #30
 8009e02:	4606      	mov	r6, r0
 8009e04:	460c      	mov	r4, r1
 8009e06:	d507      	bpl.n	8009e18 <__smakebuf_r+0x1c>
 8009e08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e0c:	6023      	str	r3, [r4, #0]
 8009e0e:	6123      	str	r3, [r4, #16]
 8009e10:	2301      	movs	r3, #1
 8009e12:	6163      	str	r3, [r4, #20]
 8009e14:	b002      	add	sp, #8
 8009e16:	bd70      	pop	{r4, r5, r6, pc}
 8009e18:	ab01      	add	r3, sp, #4
 8009e1a:	466a      	mov	r2, sp
 8009e1c:	f7ff ffc9 	bl	8009db2 <__swhatbuf_r>
 8009e20:	9900      	ldr	r1, [sp, #0]
 8009e22:	4605      	mov	r5, r0
 8009e24:	4630      	mov	r0, r6
 8009e26:	f000 fc37 	bl	800a698 <_malloc_r>
 8009e2a:	b948      	cbnz	r0, 8009e40 <__smakebuf_r+0x44>
 8009e2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e30:	059a      	lsls	r2, r3, #22
 8009e32:	d4ef      	bmi.n	8009e14 <__smakebuf_r+0x18>
 8009e34:	f023 0303 	bic.w	r3, r3, #3
 8009e38:	f043 0302 	orr.w	r3, r3, #2
 8009e3c:	81a3      	strh	r3, [r4, #12]
 8009e3e:	e7e3      	b.n	8009e08 <__smakebuf_r+0xc>
 8009e40:	4b0d      	ldr	r3, [pc, #52]	; (8009e78 <__smakebuf_r+0x7c>)
 8009e42:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e44:	89a3      	ldrh	r3, [r4, #12]
 8009e46:	6020      	str	r0, [r4, #0]
 8009e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e4c:	81a3      	strh	r3, [r4, #12]
 8009e4e:	9b00      	ldr	r3, [sp, #0]
 8009e50:	6163      	str	r3, [r4, #20]
 8009e52:	9b01      	ldr	r3, [sp, #4]
 8009e54:	6120      	str	r0, [r4, #16]
 8009e56:	b15b      	cbz	r3, 8009e70 <__smakebuf_r+0x74>
 8009e58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e5c:	4630      	mov	r0, r6
 8009e5e:	f000 fea1 	bl	800aba4 <_isatty_r>
 8009e62:	b128      	cbz	r0, 8009e70 <__smakebuf_r+0x74>
 8009e64:	89a3      	ldrh	r3, [r4, #12]
 8009e66:	f023 0303 	bic.w	r3, r3, #3
 8009e6a:	f043 0301 	orr.w	r3, r3, #1
 8009e6e:	81a3      	strh	r3, [r4, #12]
 8009e70:	89a0      	ldrh	r0, [r4, #12]
 8009e72:	4305      	orrs	r5, r0
 8009e74:	81a5      	strh	r5, [r4, #12]
 8009e76:	e7cd      	b.n	8009e14 <__smakebuf_r+0x18>
 8009e78:	08009c01 	.word	0x08009c01

08009e7c <malloc>:
 8009e7c:	4b02      	ldr	r3, [pc, #8]	; (8009e88 <malloc+0xc>)
 8009e7e:	4601      	mov	r1, r0
 8009e80:	6818      	ldr	r0, [r3, #0]
 8009e82:	f000 bc09 	b.w	800a698 <_malloc_r>
 8009e86:	bf00      	nop
 8009e88:	2000000c 	.word	0x2000000c

08009e8c <_Balloc>:
 8009e8c:	b570      	push	{r4, r5, r6, lr}
 8009e8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009e90:	4604      	mov	r4, r0
 8009e92:	460d      	mov	r5, r1
 8009e94:	b976      	cbnz	r6, 8009eb4 <_Balloc+0x28>
 8009e96:	2010      	movs	r0, #16
 8009e98:	f7ff fff0 	bl	8009e7c <malloc>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	6260      	str	r0, [r4, #36]	; 0x24
 8009ea0:	b920      	cbnz	r0, 8009eac <_Balloc+0x20>
 8009ea2:	4b18      	ldr	r3, [pc, #96]	; (8009f04 <_Balloc+0x78>)
 8009ea4:	4818      	ldr	r0, [pc, #96]	; (8009f08 <_Balloc+0x7c>)
 8009ea6:	2166      	movs	r1, #102	; 0x66
 8009ea8:	f000 fe2a 	bl	800ab00 <__assert_func>
 8009eac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009eb0:	6006      	str	r6, [r0, #0]
 8009eb2:	60c6      	str	r6, [r0, #12]
 8009eb4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009eb6:	68f3      	ldr	r3, [r6, #12]
 8009eb8:	b183      	cbz	r3, 8009edc <_Balloc+0x50>
 8009eba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ebc:	68db      	ldr	r3, [r3, #12]
 8009ebe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ec2:	b9b8      	cbnz	r0, 8009ef4 <_Balloc+0x68>
 8009ec4:	2101      	movs	r1, #1
 8009ec6:	fa01 f605 	lsl.w	r6, r1, r5
 8009eca:	1d72      	adds	r2, r6, #5
 8009ecc:	0092      	lsls	r2, r2, #2
 8009ece:	4620      	mov	r0, r4
 8009ed0:	f000 fb60 	bl	800a594 <_calloc_r>
 8009ed4:	b160      	cbz	r0, 8009ef0 <_Balloc+0x64>
 8009ed6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009eda:	e00e      	b.n	8009efa <_Balloc+0x6e>
 8009edc:	2221      	movs	r2, #33	; 0x21
 8009ede:	2104      	movs	r1, #4
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	f000 fb57 	bl	800a594 <_calloc_r>
 8009ee6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ee8:	60f0      	str	r0, [r6, #12]
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d1e4      	bne.n	8009eba <_Balloc+0x2e>
 8009ef0:	2000      	movs	r0, #0
 8009ef2:	bd70      	pop	{r4, r5, r6, pc}
 8009ef4:	6802      	ldr	r2, [r0, #0]
 8009ef6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009efa:	2300      	movs	r3, #0
 8009efc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f00:	e7f7      	b.n	8009ef2 <_Balloc+0x66>
 8009f02:	bf00      	nop
 8009f04:	0800da55 	.word	0x0800da55
 8009f08:	0800db38 	.word	0x0800db38

08009f0c <_Bfree>:
 8009f0c:	b570      	push	{r4, r5, r6, lr}
 8009f0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009f10:	4605      	mov	r5, r0
 8009f12:	460c      	mov	r4, r1
 8009f14:	b976      	cbnz	r6, 8009f34 <_Bfree+0x28>
 8009f16:	2010      	movs	r0, #16
 8009f18:	f7ff ffb0 	bl	8009e7c <malloc>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	6268      	str	r0, [r5, #36]	; 0x24
 8009f20:	b920      	cbnz	r0, 8009f2c <_Bfree+0x20>
 8009f22:	4b09      	ldr	r3, [pc, #36]	; (8009f48 <_Bfree+0x3c>)
 8009f24:	4809      	ldr	r0, [pc, #36]	; (8009f4c <_Bfree+0x40>)
 8009f26:	218a      	movs	r1, #138	; 0x8a
 8009f28:	f000 fdea 	bl	800ab00 <__assert_func>
 8009f2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f30:	6006      	str	r6, [r0, #0]
 8009f32:	60c6      	str	r6, [r0, #12]
 8009f34:	b13c      	cbz	r4, 8009f46 <_Bfree+0x3a>
 8009f36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009f38:	6862      	ldr	r2, [r4, #4]
 8009f3a:	68db      	ldr	r3, [r3, #12]
 8009f3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f40:	6021      	str	r1, [r4, #0]
 8009f42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f46:	bd70      	pop	{r4, r5, r6, pc}
 8009f48:	0800da55 	.word	0x0800da55
 8009f4c:	0800db38 	.word	0x0800db38

08009f50 <__multadd>:
 8009f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f54:	690d      	ldr	r5, [r1, #16]
 8009f56:	4607      	mov	r7, r0
 8009f58:	460c      	mov	r4, r1
 8009f5a:	461e      	mov	r6, r3
 8009f5c:	f101 0c14 	add.w	ip, r1, #20
 8009f60:	2000      	movs	r0, #0
 8009f62:	f8dc 3000 	ldr.w	r3, [ip]
 8009f66:	b299      	uxth	r1, r3
 8009f68:	fb02 6101 	mla	r1, r2, r1, r6
 8009f6c:	0c1e      	lsrs	r6, r3, #16
 8009f6e:	0c0b      	lsrs	r3, r1, #16
 8009f70:	fb02 3306 	mla	r3, r2, r6, r3
 8009f74:	b289      	uxth	r1, r1
 8009f76:	3001      	adds	r0, #1
 8009f78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f7c:	4285      	cmp	r5, r0
 8009f7e:	f84c 1b04 	str.w	r1, [ip], #4
 8009f82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f86:	dcec      	bgt.n	8009f62 <__multadd+0x12>
 8009f88:	b30e      	cbz	r6, 8009fce <__multadd+0x7e>
 8009f8a:	68a3      	ldr	r3, [r4, #8]
 8009f8c:	42ab      	cmp	r3, r5
 8009f8e:	dc19      	bgt.n	8009fc4 <__multadd+0x74>
 8009f90:	6861      	ldr	r1, [r4, #4]
 8009f92:	4638      	mov	r0, r7
 8009f94:	3101      	adds	r1, #1
 8009f96:	f7ff ff79 	bl	8009e8c <_Balloc>
 8009f9a:	4680      	mov	r8, r0
 8009f9c:	b928      	cbnz	r0, 8009faa <__multadd+0x5a>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	4b0c      	ldr	r3, [pc, #48]	; (8009fd4 <__multadd+0x84>)
 8009fa2:	480d      	ldr	r0, [pc, #52]	; (8009fd8 <__multadd+0x88>)
 8009fa4:	21b5      	movs	r1, #181	; 0xb5
 8009fa6:	f000 fdab 	bl	800ab00 <__assert_func>
 8009faa:	6922      	ldr	r2, [r4, #16]
 8009fac:	3202      	adds	r2, #2
 8009fae:	f104 010c 	add.w	r1, r4, #12
 8009fb2:	0092      	lsls	r2, r2, #2
 8009fb4:	300c      	adds	r0, #12
 8009fb6:	f7fe f8f5 	bl	80081a4 <memcpy>
 8009fba:	4621      	mov	r1, r4
 8009fbc:	4638      	mov	r0, r7
 8009fbe:	f7ff ffa5 	bl	8009f0c <_Bfree>
 8009fc2:	4644      	mov	r4, r8
 8009fc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009fc8:	3501      	adds	r5, #1
 8009fca:	615e      	str	r6, [r3, #20]
 8009fcc:	6125      	str	r5, [r4, #16]
 8009fce:	4620      	mov	r0, r4
 8009fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fd4:	0800dac7 	.word	0x0800dac7
 8009fd8:	0800db38 	.word	0x0800db38

08009fdc <__hi0bits>:
 8009fdc:	0c03      	lsrs	r3, r0, #16
 8009fde:	041b      	lsls	r3, r3, #16
 8009fe0:	b9d3      	cbnz	r3, 800a018 <__hi0bits+0x3c>
 8009fe2:	0400      	lsls	r0, r0, #16
 8009fe4:	2310      	movs	r3, #16
 8009fe6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009fea:	bf04      	itt	eq
 8009fec:	0200      	lsleq	r0, r0, #8
 8009fee:	3308      	addeq	r3, #8
 8009ff0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009ff4:	bf04      	itt	eq
 8009ff6:	0100      	lsleq	r0, r0, #4
 8009ff8:	3304      	addeq	r3, #4
 8009ffa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009ffe:	bf04      	itt	eq
 800a000:	0080      	lsleq	r0, r0, #2
 800a002:	3302      	addeq	r3, #2
 800a004:	2800      	cmp	r0, #0
 800a006:	db05      	blt.n	800a014 <__hi0bits+0x38>
 800a008:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a00c:	f103 0301 	add.w	r3, r3, #1
 800a010:	bf08      	it	eq
 800a012:	2320      	moveq	r3, #32
 800a014:	4618      	mov	r0, r3
 800a016:	4770      	bx	lr
 800a018:	2300      	movs	r3, #0
 800a01a:	e7e4      	b.n	8009fe6 <__hi0bits+0xa>

0800a01c <__lo0bits>:
 800a01c:	6803      	ldr	r3, [r0, #0]
 800a01e:	f013 0207 	ands.w	r2, r3, #7
 800a022:	4601      	mov	r1, r0
 800a024:	d00b      	beq.n	800a03e <__lo0bits+0x22>
 800a026:	07da      	lsls	r2, r3, #31
 800a028:	d423      	bmi.n	800a072 <__lo0bits+0x56>
 800a02a:	0798      	lsls	r0, r3, #30
 800a02c:	bf49      	itett	mi
 800a02e:	085b      	lsrmi	r3, r3, #1
 800a030:	089b      	lsrpl	r3, r3, #2
 800a032:	2001      	movmi	r0, #1
 800a034:	600b      	strmi	r3, [r1, #0]
 800a036:	bf5c      	itt	pl
 800a038:	600b      	strpl	r3, [r1, #0]
 800a03a:	2002      	movpl	r0, #2
 800a03c:	4770      	bx	lr
 800a03e:	b298      	uxth	r0, r3
 800a040:	b9a8      	cbnz	r0, 800a06e <__lo0bits+0x52>
 800a042:	0c1b      	lsrs	r3, r3, #16
 800a044:	2010      	movs	r0, #16
 800a046:	b2da      	uxtb	r2, r3
 800a048:	b90a      	cbnz	r2, 800a04e <__lo0bits+0x32>
 800a04a:	3008      	adds	r0, #8
 800a04c:	0a1b      	lsrs	r3, r3, #8
 800a04e:	071a      	lsls	r2, r3, #28
 800a050:	bf04      	itt	eq
 800a052:	091b      	lsreq	r3, r3, #4
 800a054:	3004      	addeq	r0, #4
 800a056:	079a      	lsls	r2, r3, #30
 800a058:	bf04      	itt	eq
 800a05a:	089b      	lsreq	r3, r3, #2
 800a05c:	3002      	addeq	r0, #2
 800a05e:	07da      	lsls	r2, r3, #31
 800a060:	d403      	bmi.n	800a06a <__lo0bits+0x4e>
 800a062:	085b      	lsrs	r3, r3, #1
 800a064:	f100 0001 	add.w	r0, r0, #1
 800a068:	d005      	beq.n	800a076 <__lo0bits+0x5a>
 800a06a:	600b      	str	r3, [r1, #0]
 800a06c:	4770      	bx	lr
 800a06e:	4610      	mov	r0, r2
 800a070:	e7e9      	b.n	800a046 <__lo0bits+0x2a>
 800a072:	2000      	movs	r0, #0
 800a074:	4770      	bx	lr
 800a076:	2020      	movs	r0, #32
 800a078:	4770      	bx	lr
	...

0800a07c <__i2b>:
 800a07c:	b510      	push	{r4, lr}
 800a07e:	460c      	mov	r4, r1
 800a080:	2101      	movs	r1, #1
 800a082:	f7ff ff03 	bl	8009e8c <_Balloc>
 800a086:	4602      	mov	r2, r0
 800a088:	b928      	cbnz	r0, 800a096 <__i2b+0x1a>
 800a08a:	4b05      	ldr	r3, [pc, #20]	; (800a0a0 <__i2b+0x24>)
 800a08c:	4805      	ldr	r0, [pc, #20]	; (800a0a4 <__i2b+0x28>)
 800a08e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a092:	f000 fd35 	bl	800ab00 <__assert_func>
 800a096:	2301      	movs	r3, #1
 800a098:	6144      	str	r4, [r0, #20]
 800a09a:	6103      	str	r3, [r0, #16]
 800a09c:	bd10      	pop	{r4, pc}
 800a09e:	bf00      	nop
 800a0a0:	0800dac7 	.word	0x0800dac7
 800a0a4:	0800db38 	.word	0x0800db38

0800a0a8 <__multiply>:
 800a0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ac:	4691      	mov	r9, r2
 800a0ae:	690a      	ldr	r2, [r1, #16]
 800a0b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	bfb8      	it	lt
 800a0b8:	460b      	movlt	r3, r1
 800a0ba:	460c      	mov	r4, r1
 800a0bc:	bfbc      	itt	lt
 800a0be:	464c      	movlt	r4, r9
 800a0c0:	4699      	movlt	r9, r3
 800a0c2:	6927      	ldr	r7, [r4, #16]
 800a0c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a0c8:	68a3      	ldr	r3, [r4, #8]
 800a0ca:	6861      	ldr	r1, [r4, #4]
 800a0cc:	eb07 060a 	add.w	r6, r7, sl
 800a0d0:	42b3      	cmp	r3, r6
 800a0d2:	b085      	sub	sp, #20
 800a0d4:	bfb8      	it	lt
 800a0d6:	3101      	addlt	r1, #1
 800a0d8:	f7ff fed8 	bl	8009e8c <_Balloc>
 800a0dc:	b930      	cbnz	r0, 800a0ec <__multiply+0x44>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	4b44      	ldr	r3, [pc, #272]	; (800a1f4 <__multiply+0x14c>)
 800a0e2:	4845      	ldr	r0, [pc, #276]	; (800a1f8 <__multiply+0x150>)
 800a0e4:	f240 115d 	movw	r1, #349	; 0x15d
 800a0e8:	f000 fd0a 	bl	800ab00 <__assert_func>
 800a0ec:	f100 0514 	add.w	r5, r0, #20
 800a0f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a0f4:	462b      	mov	r3, r5
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	4543      	cmp	r3, r8
 800a0fa:	d321      	bcc.n	800a140 <__multiply+0x98>
 800a0fc:	f104 0314 	add.w	r3, r4, #20
 800a100:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a104:	f109 0314 	add.w	r3, r9, #20
 800a108:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a10c:	9202      	str	r2, [sp, #8]
 800a10e:	1b3a      	subs	r2, r7, r4
 800a110:	3a15      	subs	r2, #21
 800a112:	f022 0203 	bic.w	r2, r2, #3
 800a116:	3204      	adds	r2, #4
 800a118:	f104 0115 	add.w	r1, r4, #21
 800a11c:	428f      	cmp	r7, r1
 800a11e:	bf38      	it	cc
 800a120:	2204      	movcc	r2, #4
 800a122:	9201      	str	r2, [sp, #4]
 800a124:	9a02      	ldr	r2, [sp, #8]
 800a126:	9303      	str	r3, [sp, #12]
 800a128:	429a      	cmp	r2, r3
 800a12a:	d80c      	bhi.n	800a146 <__multiply+0x9e>
 800a12c:	2e00      	cmp	r6, #0
 800a12e:	dd03      	ble.n	800a138 <__multiply+0x90>
 800a130:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a134:	2b00      	cmp	r3, #0
 800a136:	d05a      	beq.n	800a1ee <__multiply+0x146>
 800a138:	6106      	str	r6, [r0, #16]
 800a13a:	b005      	add	sp, #20
 800a13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a140:	f843 2b04 	str.w	r2, [r3], #4
 800a144:	e7d8      	b.n	800a0f8 <__multiply+0x50>
 800a146:	f8b3 a000 	ldrh.w	sl, [r3]
 800a14a:	f1ba 0f00 	cmp.w	sl, #0
 800a14e:	d024      	beq.n	800a19a <__multiply+0xf2>
 800a150:	f104 0e14 	add.w	lr, r4, #20
 800a154:	46a9      	mov	r9, r5
 800a156:	f04f 0c00 	mov.w	ip, #0
 800a15a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a15e:	f8d9 1000 	ldr.w	r1, [r9]
 800a162:	fa1f fb82 	uxth.w	fp, r2
 800a166:	b289      	uxth	r1, r1
 800a168:	fb0a 110b 	mla	r1, sl, fp, r1
 800a16c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a170:	f8d9 2000 	ldr.w	r2, [r9]
 800a174:	4461      	add	r1, ip
 800a176:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a17a:	fb0a c20b 	mla	r2, sl, fp, ip
 800a17e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a182:	b289      	uxth	r1, r1
 800a184:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a188:	4577      	cmp	r7, lr
 800a18a:	f849 1b04 	str.w	r1, [r9], #4
 800a18e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a192:	d8e2      	bhi.n	800a15a <__multiply+0xb2>
 800a194:	9a01      	ldr	r2, [sp, #4]
 800a196:	f845 c002 	str.w	ip, [r5, r2]
 800a19a:	9a03      	ldr	r2, [sp, #12]
 800a19c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a1a0:	3304      	adds	r3, #4
 800a1a2:	f1b9 0f00 	cmp.w	r9, #0
 800a1a6:	d020      	beq.n	800a1ea <__multiply+0x142>
 800a1a8:	6829      	ldr	r1, [r5, #0]
 800a1aa:	f104 0c14 	add.w	ip, r4, #20
 800a1ae:	46ae      	mov	lr, r5
 800a1b0:	f04f 0a00 	mov.w	sl, #0
 800a1b4:	f8bc b000 	ldrh.w	fp, [ip]
 800a1b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a1bc:	fb09 220b 	mla	r2, r9, fp, r2
 800a1c0:	4492      	add	sl, r2
 800a1c2:	b289      	uxth	r1, r1
 800a1c4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a1c8:	f84e 1b04 	str.w	r1, [lr], #4
 800a1cc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a1d0:	f8be 1000 	ldrh.w	r1, [lr]
 800a1d4:	0c12      	lsrs	r2, r2, #16
 800a1d6:	fb09 1102 	mla	r1, r9, r2, r1
 800a1da:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a1de:	4567      	cmp	r7, ip
 800a1e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a1e4:	d8e6      	bhi.n	800a1b4 <__multiply+0x10c>
 800a1e6:	9a01      	ldr	r2, [sp, #4]
 800a1e8:	50a9      	str	r1, [r5, r2]
 800a1ea:	3504      	adds	r5, #4
 800a1ec:	e79a      	b.n	800a124 <__multiply+0x7c>
 800a1ee:	3e01      	subs	r6, #1
 800a1f0:	e79c      	b.n	800a12c <__multiply+0x84>
 800a1f2:	bf00      	nop
 800a1f4:	0800dac7 	.word	0x0800dac7
 800a1f8:	0800db38 	.word	0x0800db38

0800a1fc <__pow5mult>:
 800a1fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a200:	4615      	mov	r5, r2
 800a202:	f012 0203 	ands.w	r2, r2, #3
 800a206:	4606      	mov	r6, r0
 800a208:	460f      	mov	r7, r1
 800a20a:	d007      	beq.n	800a21c <__pow5mult+0x20>
 800a20c:	4c25      	ldr	r4, [pc, #148]	; (800a2a4 <__pow5mult+0xa8>)
 800a20e:	3a01      	subs	r2, #1
 800a210:	2300      	movs	r3, #0
 800a212:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a216:	f7ff fe9b 	bl	8009f50 <__multadd>
 800a21a:	4607      	mov	r7, r0
 800a21c:	10ad      	asrs	r5, r5, #2
 800a21e:	d03d      	beq.n	800a29c <__pow5mult+0xa0>
 800a220:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a222:	b97c      	cbnz	r4, 800a244 <__pow5mult+0x48>
 800a224:	2010      	movs	r0, #16
 800a226:	f7ff fe29 	bl	8009e7c <malloc>
 800a22a:	4602      	mov	r2, r0
 800a22c:	6270      	str	r0, [r6, #36]	; 0x24
 800a22e:	b928      	cbnz	r0, 800a23c <__pow5mult+0x40>
 800a230:	4b1d      	ldr	r3, [pc, #116]	; (800a2a8 <__pow5mult+0xac>)
 800a232:	481e      	ldr	r0, [pc, #120]	; (800a2ac <__pow5mult+0xb0>)
 800a234:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a238:	f000 fc62 	bl	800ab00 <__assert_func>
 800a23c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a240:	6004      	str	r4, [r0, #0]
 800a242:	60c4      	str	r4, [r0, #12]
 800a244:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a248:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a24c:	b94c      	cbnz	r4, 800a262 <__pow5mult+0x66>
 800a24e:	f240 2171 	movw	r1, #625	; 0x271
 800a252:	4630      	mov	r0, r6
 800a254:	f7ff ff12 	bl	800a07c <__i2b>
 800a258:	2300      	movs	r3, #0
 800a25a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a25e:	4604      	mov	r4, r0
 800a260:	6003      	str	r3, [r0, #0]
 800a262:	f04f 0900 	mov.w	r9, #0
 800a266:	07eb      	lsls	r3, r5, #31
 800a268:	d50a      	bpl.n	800a280 <__pow5mult+0x84>
 800a26a:	4639      	mov	r1, r7
 800a26c:	4622      	mov	r2, r4
 800a26e:	4630      	mov	r0, r6
 800a270:	f7ff ff1a 	bl	800a0a8 <__multiply>
 800a274:	4639      	mov	r1, r7
 800a276:	4680      	mov	r8, r0
 800a278:	4630      	mov	r0, r6
 800a27a:	f7ff fe47 	bl	8009f0c <_Bfree>
 800a27e:	4647      	mov	r7, r8
 800a280:	106d      	asrs	r5, r5, #1
 800a282:	d00b      	beq.n	800a29c <__pow5mult+0xa0>
 800a284:	6820      	ldr	r0, [r4, #0]
 800a286:	b938      	cbnz	r0, 800a298 <__pow5mult+0x9c>
 800a288:	4622      	mov	r2, r4
 800a28a:	4621      	mov	r1, r4
 800a28c:	4630      	mov	r0, r6
 800a28e:	f7ff ff0b 	bl	800a0a8 <__multiply>
 800a292:	6020      	str	r0, [r4, #0]
 800a294:	f8c0 9000 	str.w	r9, [r0]
 800a298:	4604      	mov	r4, r0
 800a29a:	e7e4      	b.n	800a266 <__pow5mult+0x6a>
 800a29c:	4638      	mov	r0, r7
 800a29e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2a2:	bf00      	nop
 800a2a4:	0800dc88 	.word	0x0800dc88
 800a2a8:	0800da55 	.word	0x0800da55
 800a2ac:	0800db38 	.word	0x0800db38

0800a2b0 <__lshift>:
 800a2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2b4:	460c      	mov	r4, r1
 800a2b6:	6849      	ldr	r1, [r1, #4]
 800a2b8:	6923      	ldr	r3, [r4, #16]
 800a2ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a2be:	68a3      	ldr	r3, [r4, #8]
 800a2c0:	4607      	mov	r7, r0
 800a2c2:	4691      	mov	r9, r2
 800a2c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a2c8:	f108 0601 	add.w	r6, r8, #1
 800a2cc:	42b3      	cmp	r3, r6
 800a2ce:	db0b      	blt.n	800a2e8 <__lshift+0x38>
 800a2d0:	4638      	mov	r0, r7
 800a2d2:	f7ff fddb 	bl	8009e8c <_Balloc>
 800a2d6:	4605      	mov	r5, r0
 800a2d8:	b948      	cbnz	r0, 800a2ee <__lshift+0x3e>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	4b2a      	ldr	r3, [pc, #168]	; (800a388 <__lshift+0xd8>)
 800a2de:	482b      	ldr	r0, [pc, #172]	; (800a38c <__lshift+0xdc>)
 800a2e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a2e4:	f000 fc0c 	bl	800ab00 <__assert_func>
 800a2e8:	3101      	adds	r1, #1
 800a2ea:	005b      	lsls	r3, r3, #1
 800a2ec:	e7ee      	b.n	800a2cc <__lshift+0x1c>
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	f100 0114 	add.w	r1, r0, #20
 800a2f4:	f100 0210 	add.w	r2, r0, #16
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	4553      	cmp	r3, sl
 800a2fc:	db37      	blt.n	800a36e <__lshift+0xbe>
 800a2fe:	6920      	ldr	r0, [r4, #16]
 800a300:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a304:	f104 0314 	add.w	r3, r4, #20
 800a308:	f019 091f 	ands.w	r9, r9, #31
 800a30c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a310:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a314:	d02f      	beq.n	800a376 <__lshift+0xc6>
 800a316:	f1c9 0e20 	rsb	lr, r9, #32
 800a31a:	468a      	mov	sl, r1
 800a31c:	f04f 0c00 	mov.w	ip, #0
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	fa02 f209 	lsl.w	r2, r2, r9
 800a326:	ea42 020c 	orr.w	r2, r2, ip
 800a32a:	f84a 2b04 	str.w	r2, [sl], #4
 800a32e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a332:	4298      	cmp	r0, r3
 800a334:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a338:	d8f2      	bhi.n	800a320 <__lshift+0x70>
 800a33a:	1b03      	subs	r3, r0, r4
 800a33c:	3b15      	subs	r3, #21
 800a33e:	f023 0303 	bic.w	r3, r3, #3
 800a342:	3304      	adds	r3, #4
 800a344:	f104 0215 	add.w	r2, r4, #21
 800a348:	4290      	cmp	r0, r2
 800a34a:	bf38      	it	cc
 800a34c:	2304      	movcc	r3, #4
 800a34e:	f841 c003 	str.w	ip, [r1, r3]
 800a352:	f1bc 0f00 	cmp.w	ip, #0
 800a356:	d001      	beq.n	800a35c <__lshift+0xac>
 800a358:	f108 0602 	add.w	r6, r8, #2
 800a35c:	3e01      	subs	r6, #1
 800a35e:	4638      	mov	r0, r7
 800a360:	612e      	str	r6, [r5, #16]
 800a362:	4621      	mov	r1, r4
 800a364:	f7ff fdd2 	bl	8009f0c <_Bfree>
 800a368:	4628      	mov	r0, r5
 800a36a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a36e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a372:	3301      	adds	r3, #1
 800a374:	e7c1      	b.n	800a2fa <__lshift+0x4a>
 800a376:	3904      	subs	r1, #4
 800a378:	f853 2b04 	ldr.w	r2, [r3], #4
 800a37c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a380:	4298      	cmp	r0, r3
 800a382:	d8f9      	bhi.n	800a378 <__lshift+0xc8>
 800a384:	e7ea      	b.n	800a35c <__lshift+0xac>
 800a386:	bf00      	nop
 800a388:	0800dac7 	.word	0x0800dac7
 800a38c:	0800db38 	.word	0x0800db38

0800a390 <__mcmp>:
 800a390:	b530      	push	{r4, r5, lr}
 800a392:	6902      	ldr	r2, [r0, #16]
 800a394:	690c      	ldr	r4, [r1, #16]
 800a396:	1b12      	subs	r2, r2, r4
 800a398:	d10e      	bne.n	800a3b8 <__mcmp+0x28>
 800a39a:	f100 0314 	add.w	r3, r0, #20
 800a39e:	3114      	adds	r1, #20
 800a3a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a3a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a3a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a3ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a3b0:	42a5      	cmp	r5, r4
 800a3b2:	d003      	beq.n	800a3bc <__mcmp+0x2c>
 800a3b4:	d305      	bcc.n	800a3c2 <__mcmp+0x32>
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	4610      	mov	r0, r2
 800a3ba:	bd30      	pop	{r4, r5, pc}
 800a3bc:	4283      	cmp	r3, r0
 800a3be:	d3f3      	bcc.n	800a3a8 <__mcmp+0x18>
 800a3c0:	e7fa      	b.n	800a3b8 <__mcmp+0x28>
 800a3c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3c6:	e7f7      	b.n	800a3b8 <__mcmp+0x28>

0800a3c8 <__mdiff>:
 800a3c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3cc:	460c      	mov	r4, r1
 800a3ce:	4606      	mov	r6, r0
 800a3d0:	4611      	mov	r1, r2
 800a3d2:	4620      	mov	r0, r4
 800a3d4:	4690      	mov	r8, r2
 800a3d6:	f7ff ffdb 	bl	800a390 <__mcmp>
 800a3da:	1e05      	subs	r5, r0, #0
 800a3dc:	d110      	bne.n	800a400 <__mdiff+0x38>
 800a3de:	4629      	mov	r1, r5
 800a3e0:	4630      	mov	r0, r6
 800a3e2:	f7ff fd53 	bl	8009e8c <_Balloc>
 800a3e6:	b930      	cbnz	r0, 800a3f6 <__mdiff+0x2e>
 800a3e8:	4b3a      	ldr	r3, [pc, #232]	; (800a4d4 <__mdiff+0x10c>)
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	f240 2132 	movw	r1, #562	; 0x232
 800a3f0:	4839      	ldr	r0, [pc, #228]	; (800a4d8 <__mdiff+0x110>)
 800a3f2:	f000 fb85 	bl	800ab00 <__assert_func>
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a3fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a400:	bfa4      	itt	ge
 800a402:	4643      	movge	r3, r8
 800a404:	46a0      	movge	r8, r4
 800a406:	4630      	mov	r0, r6
 800a408:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a40c:	bfa6      	itte	ge
 800a40e:	461c      	movge	r4, r3
 800a410:	2500      	movge	r5, #0
 800a412:	2501      	movlt	r5, #1
 800a414:	f7ff fd3a 	bl	8009e8c <_Balloc>
 800a418:	b920      	cbnz	r0, 800a424 <__mdiff+0x5c>
 800a41a:	4b2e      	ldr	r3, [pc, #184]	; (800a4d4 <__mdiff+0x10c>)
 800a41c:	4602      	mov	r2, r0
 800a41e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a422:	e7e5      	b.n	800a3f0 <__mdiff+0x28>
 800a424:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a428:	6926      	ldr	r6, [r4, #16]
 800a42a:	60c5      	str	r5, [r0, #12]
 800a42c:	f104 0914 	add.w	r9, r4, #20
 800a430:	f108 0514 	add.w	r5, r8, #20
 800a434:	f100 0e14 	add.w	lr, r0, #20
 800a438:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a43c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a440:	f108 0210 	add.w	r2, r8, #16
 800a444:	46f2      	mov	sl, lr
 800a446:	2100      	movs	r1, #0
 800a448:	f859 3b04 	ldr.w	r3, [r9], #4
 800a44c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a450:	fa1f f883 	uxth.w	r8, r3
 800a454:	fa11 f18b 	uxtah	r1, r1, fp
 800a458:	0c1b      	lsrs	r3, r3, #16
 800a45a:	eba1 0808 	sub.w	r8, r1, r8
 800a45e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a462:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a466:	fa1f f888 	uxth.w	r8, r8
 800a46a:	1419      	asrs	r1, r3, #16
 800a46c:	454e      	cmp	r6, r9
 800a46e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a472:	f84a 3b04 	str.w	r3, [sl], #4
 800a476:	d8e7      	bhi.n	800a448 <__mdiff+0x80>
 800a478:	1b33      	subs	r3, r6, r4
 800a47a:	3b15      	subs	r3, #21
 800a47c:	f023 0303 	bic.w	r3, r3, #3
 800a480:	3304      	adds	r3, #4
 800a482:	3415      	adds	r4, #21
 800a484:	42a6      	cmp	r6, r4
 800a486:	bf38      	it	cc
 800a488:	2304      	movcc	r3, #4
 800a48a:	441d      	add	r5, r3
 800a48c:	4473      	add	r3, lr
 800a48e:	469e      	mov	lr, r3
 800a490:	462e      	mov	r6, r5
 800a492:	4566      	cmp	r6, ip
 800a494:	d30e      	bcc.n	800a4b4 <__mdiff+0xec>
 800a496:	f10c 0203 	add.w	r2, ip, #3
 800a49a:	1b52      	subs	r2, r2, r5
 800a49c:	f022 0203 	bic.w	r2, r2, #3
 800a4a0:	3d03      	subs	r5, #3
 800a4a2:	45ac      	cmp	ip, r5
 800a4a4:	bf38      	it	cc
 800a4a6:	2200      	movcc	r2, #0
 800a4a8:	441a      	add	r2, r3
 800a4aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a4ae:	b17b      	cbz	r3, 800a4d0 <__mdiff+0x108>
 800a4b0:	6107      	str	r7, [r0, #16]
 800a4b2:	e7a3      	b.n	800a3fc <__mdiff+0x34>
 800a4b4:	f856 8b04 	ldr.w	r8, [r6], #4
 800a4b8:	fa11 f288 	uxtah	r2, r1, r8
 800a4bc:	1414      	asrs	r4, r2, #16
 800a4be:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a4c2:	b292      	uxth	r2, r2
 800a4c4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a4c8:	f84e 2b04 	str.w	r2, [lr], #4
 800a4cc:	1421      	asrs	r1, r4, #16
 800a4ce:	e7e0      	b.n	800a492 <__mdiff+0xca>
 800a4d0:	3f01      	subs	r7, #1
 800a4d2:	e7ea      	b.n	800a4aa <__mdiff+0xe2>
 800a4d4:	0800dac7 	.word	0x0800dac7
 800a4d8:	0800db38 	.word	0x0800db38

0800a4dc <__d2b>:
 800a4dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a4e0:	4689      	mov	r9, r1
 800a4e2:	2101      	movs	r1, #1
 800a4e4:	ec57 6b10 	vmov	r6, r7, d0
 800a4e8:	4690      	mov	r8, r2
 800a4ea:	f7ff fccf 	bl	8009e8c <_Balloc>
 800a4ee:	4604      	mov	r4, r0
 800a4f0:	b930      	cbnz	r0, 800a500 <__d2b+0x24>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	4b25      	ldr	r3, [pc, #148]	; (800a58c <__d2b+0xb0>)
 800a4f6:	4826      	ldr	r0, [pc, #152]	; (800a590 <__d2b+0xb4>)
 800a4f8:	f240 310a 	movw	r1, #778	; 0x30a
 800a4fc:	f000 fb00 	bl	800ab00 <__assert_func>
 800a500:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a504:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a508:	bb35      	cbnz	r5, 800a558 <__d2b+0x7c>
 800a50a:	2e00      	cmp	r6, #0
 800a50c:	9301      	str	r3, [sp, #4]
 800a50e:	d028      	beq.n	800a562 <__d2b+0x86>
 800a510:	4668      	mov	r0, sp
 800a512:	9600      	str	r6, [sp, #0]
 800a514:	f7ff fd82 	bl	800a01c <__lo0bits>
 800a518:	9900      	ldr	r1, [sp, #0]
 800a51a:	b300      	cbz	r0, 800a55e <__d2b+0x82>
 800a51c:	9a01      	ldr	r2, [sp, #4]
 800a51e:	f1c0 0320 	rsb	r3, r0, #32
 800a522:	fa02 f303 	lsl.w	r3, r2, r3
 800a526:	430b      	orrs	r3, r1
 800a528:	40c2      	lsrs	r2, r0
 800a52a:	6163      	str	r3, [r4, #20]
 800a52c:	9201      	str	r2, [sp, #4]
 800a52e:	9b01      	ldr	r3, [sp, #4]
 800a530:	61a3      	str	r3, [r4, #24]
 800a532:	2b00      	cmp	r3, #0
 800a534:	bf14      	ite	ne
 800a536:	2202      	movne	r2, #2
 800a538:	2201      	moveq	r2, #1
 800a53a:	6122      	str	r2, [r4, #16]
 800a53c:	b1d5      	cbz	r5, 800a574 <__d2b+0x98>
 800a53e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a542:	4405      	add	r5, r0
 800a544:	f8c9 5000 	str.w	r5, [r9]
 800a548:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a54c:	f8c8 0000 	str.w	r0, [r8]
 800a550:	4620      	mov	r0, r4
 800a552:	b003      	add	sp, #12
 800a554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a55c:	e7d5      	b.n	800a50a <__d2b+0x2e>
 800a55e:	6161      	str	r1, [r4, #20]
 800a560:	e7e5      	b.n	800a52e <__d2b+0x52>
 800a562:	a801      	add	r0, sp, #4
 800a564:	f7ff fd5a 	bl	800a01c <__lo0bits>
 800a568:	9b01      	ldr	r3, [sp, #4]
 800a56a:	6163      	str	r3, [r4, #20]
 800a56c:	2201      	movs	r2, #1
 800a56e:	6122      	str	r2, [r4, #16]
 800a570:	3020      	adds	r0, #32
 800a572:	e7e3      	b.n	800a53c <__d2b+0x60>
 800a574:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a578:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a57c:	f8c9 0000 	str.w	r0, [r9]
 800a580:	6918      	ldr	r0, [r3, #16]
 800a582:	f7ff fd2b 	bl	8009fdc <__hi0bits>
 800a586:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a58a:	e7df      	b.n	800a54c <__d2b+0x70>
 800a58c:	0800dac7 	.word	0x0800dac7
 800a590:	0800db38 	.word	0x0800db38

0800a594 <_calloc_r>:
 800a594:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a596:	fba1 2402 	umull	r2, r4, r1, r2
 800a59a:	b94c      	cbnz	r4, 800a5b0 <_calloc_r+0x1c>
 800a59c:	4611      	mov	r1, r2
 800a59e:	9201      	str	r2, [sp, #4]
 800a5a0:	f000 f87a 	bl	800a698 <_malloc_r>
 800a5a4:	9a01      	ldr	r2, [sp, #4]
 800a5a6:	4605      	mov	r5, r0
 800a5a8:	b930      	cbnz	r0, 800a5b8 <_calloc_r+0x24>
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	b003      	add	sp, #12
 800a5ae:	bd30      	pop	{r4, r5, pc}
 800a5b0:	220c      	movs	r2, #12
 800a5b2:	6002      	str	r2, [r0, #0]
 800a5b4:	2500      	movs	r5, #0
 800a5b6:	e7f8      	b.n	800a5aa <_calloc_r+0x16>
 800a5b8:	4621      	mov	r1, r4
 800a5ba:	f7fd fe01 	bl	80081c0 <memset>
 800a5be:	e7f4      	b.n	800a5aa <_calloc_r+0x16>

0800a5c0 <_free_r>:
 800a5c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5c2:	2900      	cmp	r1, #0
 800a5c4:	d044      	beq.n	800a650 <_free_r+0x90>
 800a5c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5ca:	9001      	str	r0, [sp, #4]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f1a1 0404 	sub.w	r4, r1, #4
 800a5d2:	bfb8      	it	lt
 800a5d4:	18e4      	addlt	r4, r4, r3
 800a5d6:	f000 fb19 	bl	800ac0c <__malloc_lock>
 800a5da:	4a1e      	ldr	r2, [pc, #120]	; (800a654 <_free_r+0x94>)
 800a5dc:	9801      	ldr	r0, [sp, #4]
 800a5de:	6813      	ldr	r3, [r2, #0]
 800a5e0:	b933      	cbnz	r3, 800a5f0 <_free_r+0x30>
 800a5e2:	6063      	str	r3, [r4, #4]
 800a5e4:	6014      	str	r4, [r2, #0]
 800a5e6:	b003      	add	sp, #12
 800a5e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5ec:	f000 bb14 	b.w	800ac18 <__malloc_unlock>
 800a5f0:	42a3      	cmp	r3, r4
 800a5f2:	d908      	bls.n	800a606 <_free_r+0x46>
 800a5f4:	6825      	ldr	r5, [r4, #0]
 800a5f6:	1961      	adds	r1, r4, r5
 800a5f8:	428b      	cmp	r3, r1
 800a5fa:	bf01      	itttt	eq
 800a5fc:	6819      	ldreq	r1, [r3, #0]
 800a5fe:	685b      	ldreq	r3, [r3, #4]
 800a600:	1949      	addeq	r1, r1, r5
 800a602:	6021      	streq	r1, [r4, #0]
 800a604:	e7ed      	b.n	800a5e2 <_free_r+0x22>
 800a606:	461a      	mov	r2, r3
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	b10b      	cbz	r3, 800a610 <_free_r+0x50>
 800a60c:	42a3      	cmp	r3, r4
 800a60e:	d9fa      	bls.n	800a606 <_free_r+0x46>
 800a610:	6811      	ldr	r1, [r2, #0]
 800a612:	1855      	adds	r5, r2, r1
 800a614:	42a5      	cmp	r5, r4
 800a616:	d10b      	bne.n	800a630 <_free_r+0x70>
 800a618:	6824      	ldr	r4, [r4, #0]
 800a61a:	4421      	add	r1, r4
 800a61c:	1854      	adds	r4, r2, r1
 800a61e:	42a3      	cmp	r3, r4
 800a620:	6011      	str	r1, [r2, #0]
 800a622:	d1e0      	bne.n	800a5e6 <_free_r+0x26>
 800a624:	681c      	ldr	r4, [r3, #0]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	6053      	str	r3, [r2, #4]
 800a62a:	4421      	add	r1, r4
 800a62c:	6011      	str	r1, [r2, #0]
 800a62e:	e7da      	b.n	800a5e6 <_free_r+0x26>
 800a630:	d902      	bls.n	800a638 <_free_r+0x78>
 800a632:	230c      	movs	r3, #12
 800a634:	6003      	str	r3, [r0, #0]
 800a636:	e7d6      	b.n	800a5e6 <_free_r+0x26>
 800a638:	6825      	ldr	r5, [r4, #0]
 800a63a:	1961      	adds	r1, r4, r5
 800a63c:	428b      	cmp	r3, r1
 800a63e:	bf04      	itt	eq
 800a640:	6819      	ldreq	r1, [r3, #0]
 800a642:	685b      	ldreq	r3, [r3, #4]
 800a644:	6063      	str	r3, [r4, #4]
 800a646:	bf04      	itt	eq
 800a648:	1949      	addeq	r1, r1, r5
 800a64a:	6021      	streq	r1, [r4, #0]
 800a64c:	6054      	str	r4, [r2, #4]
 800a64e:	e7ca      	b.n	800a5e6 <_free_r+0x26>
 800a650:	b003      	add	sp, #12
 800a652:	bd30      	pop	{r4, r5, pc}
 800a654:	200004dc 	.word	0x200004dc

0800a658 <sbrk_aligned>:
 800a658:	b570      	push	{r4, r5, r6, lr}
 800a65a:	4e0e      	ldr	r6, [pc, #56]	; (800a694 <sbrk_aligned+0x3c>)
 800a65c:	460c      	mov	r4, r1
 800a65e:	6831      	ldr	r1, [r6, #0]
 800a660:	4605      	mov	r5, r0
 800a662:	b911      	cbnz	r1, 800a66a <sbrk_aligned+0x12>
 800a664:	f000 f9e6 	bl	800aa34 <_sbrk_r>
 800a668:	6030      	str	r0, [r6, #0]
 800a66a:	4621      	mov	r1, r4
 800a66c:	4628      	mov	r0, r5
 800a66e:	f000 f9e1 	bl	800aa34 <_sbrk_r>
 800a672:	1c43      	adds	r3, r0, #1
 800a674:	d00a      	beq.n	800a68c <sbrk_aligned+0x34>
 800a676:	1cc4      	adds	r4, r0, #3
 800a678:	f024 0403 	bic.w	r4, r4, #3
 800a67c:	42a0      	cmp	r0, r4
 800a67e:	d007      	beq.n	800a690 <sbrk_aligned+0x38>
 800a680:	1a21      	subs	r1, r4, r0
 800a682:	4628      	mov	r0, r5
 800a684:	f000 f9d6 	bl	800aa34 <_sbrk_r>
 800a688:	3001      	adds	r0, #1
 800a68a:	d101      	bne.n	800a690 <sbrk_aligned+0x38>
 800a68c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a690:	4620      	mov	r0, r4
 800a692:	bd70      	pop	{r4, r5, r6, pc}
 800a694:	200004e0 	.word	0x200004e0

0800a698 <_malloc_r>:
 800a698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a69c:	1ccd      	adds	r5, r1, #3
 800a69e:	f025 0503 	bic.w	r5, r5, #3
 800a6a2:	3508      	adds	r5, #8
 800a6a4:	2d0c      	cmp	r5, #12
 800a6a6:	bf38      	it	cc
 800a6a8:	250c      	movcc	r5, #12
 800a6aa:	2d00      	cmp	r5, #0
 800a6ac:	4607      	mov	r7, r0
 800a6ae:	db01      	blt.n	800a6b4 <_malloc_r+0x1c>
 800a6b0:	42a9      	cmp	r1, r5
 800a6b2:	d905      	bls.n	800a6c0 <_malloc_r+0x28>
 800a6b4:	230c      	movs	r3, #12
 800a6b6:	603b      	str	r3, [r7, #0]
 800a6b8:	2600      	movs	r6, #0
 800a6ba:	4630      	mov	r0, r6
 800a6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6c0:	4e2e      	ldr	r6, [pc, #184]	; (800a77c <_malloc_r+0xe4>)
 800a6c2:	f000 faa3 	bl	800ac0c <__malloc_lock>
 800a6c6:	6833      	ldr	r3, [r6, #0]
 800a6c8:	461c      	mov	r4, r3
 800a6ca:	bb34      	cbnz	r4, 800a71a <_malloc_r+0x82>
 800a6cc:	4629      	mov	r1, r5
 800a6ce:	4638      	mov	r0, r7
 800a6d0:	f7ff ffc2 	bl	800a658 <sbrk_aligned>
 800a6d4:	1c43      	adds	r3, r0, #1
 800a6d6:	4604      	mov	r4, r0
 800a6d8:	d14d      	bne.n	800a776 <_malloc_r+0xde>
 800a6da:	6834      	ldr	r4, [r6, #0]
 800a6dc:	4626      	mov	r6, r4
 800a6de:	2e00      	cmp	r6, #0
 800a6e0:	d140      	bne.n	800a764 <_malloc_r+0xcc>
 800a6e2:	6823      	ldr	r3, [r4, #0]
 800a6e4:	4631      	mov	r1, r6
 800a6e6:	4638      	mov	r0, r7
 800a6e8:	eb04 0803 	add.w	r8, r4, r3
 800a6ec:	f000 f9a2 	bl	800aa34 <_sbrk_r>
 800a6f0:	4580      	cmp	r8, r0
 800a6f2:	d13a      	bne.n	800a76a <_malloc_r+0xd2>
 800a6f4:	6821      	ldr	r1, [r4, #0]
 800a6f6:	3503      	adds	r5, #3
 800a6f8:	1a6d      	subs	r5, r5, r1
 800a6fa:	f025 0503 	bic.w	r5, r5, #3
 800a6fe:	3508      	adds	r5, #8
 800a700:	2d0c      	cmp	r5, #12
 800a702:	bf38      	it	cc
 800a704:	250c      	movcc	r5, #12
 800a706:	4629      	mov	r1, r5
 800a708:	4638      	mov	r0, r7
 800a70a:	f7ff ffa5 	bl	800a658 <sbrk_aligned>
 800a70e:	3001      	adds	r0, #1
 800a710:	d02b      	beq.n	800a76a <_malloc_r+0xd2>
 800a712:	6823      	ldr	r3, [r4, #0]
 800a714:	442b      	add	r3, r5
 800a716:	6023      	str	r3, [r4, #0]
 800a718:	e00e      	b.n	800a738 <_malloc_r+0xa0>
 800a71a:	6822      	ldr	r2, [r4, #0]
 800a71c:	1b52      	subs	r2, r2, r5
 800a71e:	d41e      	bmi.n	800a75e <_malloc_r+0xc6>
 800a720:	2a0b      	cmp	r2, #11
 800a722:	d916      	bls.n	800a752 <_malloc_r+0xba>
 800a724:	1961      	adds	r1, r4, r5
 800a726:	42a3      	cmp	r3, r4
 800a728:	6025      	str	r5, [r4, #0]
 800a72a:	bf18      	it	ne
 800a72c:	6059      	strne	r1, [r3, #4]
 800a72e:	6863      	ldr	r3, [r4, #4]
 800a730:	bf08      	it	eq
 800a732:	6031      	streq	r1, [r6, #0]
 800a734:	5162      	str	r2, [r4, r5]
 800a736:	604b      	str	r3, [r1, #4]
 800a738:	4638      	mov	r0, r7
 800a73a:	f104 060b 	add.w	r6, r4, #11
 800a73e:	f000 fa6b 	bl	800ac18 <__malloc_unlock>
 800a742:	f026 0607 	bic.w	r6, r6, #7
 800a746:	1d23      	adds	r3, r4, #4
 800a748:	1af2      	subs	r2, r6, r3
 800a74a:	d0b6      	beq.n	800a6ba <_malloc_r+0x22>
 800a74c:	1b9b      	subs	r3, r3, r6
 800a74e:	50a3      	str	r3, [r4, r2]
 800a750:	e7b3      	b.n	800a6ba <_malloc_r+0x22>
 800a752:	6862      	ldr	r2, [r4, #4]
 800a754:	42a3      	cmp	r3, r4
 800a756:	bf0c      	ite	eq
 800a758:	6032      	streq	r2, [r6, #0]
 800a75a:	605a      	strne	r2, [r3, #4]
 800a75c:	e7ec      	b.n	800a738 <_malloc_r+0xa0>
 800a75e:	4623      	mov	r3, r4
 800a760:	6864      	ldr	r4, [r4, #4]
 800a762:	e7b2      	b.n	800a6ca <_malloc_r+0x32>
 800a764:	4634      	mov	r4, r6
 800a766:	6876      	ldr	r6, [r6, #4]
 800a768:	e7b9      	b.n	800a6de <_malloc_r+0x46>
 800a76a:	230c      	movs	r3, #12
 800a76c:	603b      	str	r3, [r7, #0]
 800a76e:	4638      	mov	r0, r7
 800a770:	f000 fa52 	bl	800ac18 <__malloc_unlock>
 800a774:	e7a1      	b.n	800a6ba <_malloc_r+0x22>
 800a776:	6025      	str	r5, [r4, #0]
 800a778:	e7de      	b.n	800a738 <_malloc_r+0xa0>
 800a77a:	bf00      	nop
 800a77c:	200004dc 	.word	0x200004dc

0800a780 <__sfputc_r>:
 800a780:	6893      	ldr	r3, [r2, #8]
 800a782:	3b01      	subs	r3, #1
 800a784:	2b00      	cmp	r3, #0
 800a786:	b410      	push	{r4}
 800a788:	6093      	str	r3, [r2, #8]
 800a78a:	da08      	bge.n	800a79e <__sfputc_r+0x1e>
 800a78c:	6994      	ldr	r4, [r2, #24]
 800a78e:	42a3      	cmp	r3, r4
 800a790:	db01      	blt.n	800a796 <__sfputc_r+0x16>
 800a792:	290a      	cmp	r1, #10
 800a794:	d103      	bne.n	800a79e <__sfputc_r+0x1e>
 800a796:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a79a:	f7fe ba11 	b.w	8008bc0 <__swbuf_r>
 800a79e:	6813      	ldr	r3, [r2, #0]
 800a7a0:	1c58      	adds	r0, r3, #1
 800a7a2:	6010      	str	r0, [r2, #0]
 800a7a4:	7019      	strb	r1, [r3, #0]
 800a7a6:	4608      	mov	r0, r1
 800a7a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7ac:	4770      	bx	lr

0800a7ae <__sfputs_r>:
 800a7ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7b0:	4606      	mov	r6, r0
 800a7b2:	460f      	mov	r7, r1
 800a7b4:	4614      	mov	r4, r2
 800a7b6:	18d5      	adds	r5, r2, r3
 800a7b8:	42ac      	cmp	r4, r5
 800a7ba:	d101      	bne.n	800a7c0 <__sfputs_r+0x12>
 800a7bc:	2000      	movs	r0, #0
 800a7be:	e007      	b.n	800a7d0 <__sfputs_r+0x22>
 800a7c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7c4:	463a      	mov	r2, r7
 800a7c6:	4630      	mov	r0, r6
 800a7c8:	f7ff ffda 	bl	800a780 <__sfputc_r>
 800a7cc:	1c43      	adds	r3, r0, #1
 800a7ce:	d1f3      	bne.n	800a7b8 <__sfputs_r+0xa>
 800a7d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a7d4 <_vfiprintf_r>:
 800a7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d8:	460d      	mov	r5, r1
 800a7da:	b09d      	sub	sp, #116	; 0x74
 800a7dc:	4614      	mov	r4, r2
 800a7de:	4698      	mov	r8, r3
 800a7e0:	4606      	mov	r6, r0
 800a7e2:	b118      	cbz	r0, 800a7ec <_vfiprintf_r+0x18>
 800a7e4:	6983      	ldr	r3, [r0, #24]
 800a7e6:	b90b      	cbnz	r3, 800a7ec <_vfiprintf_r+0x18>
 800a7e8:	f7ff fa3e 	bl	8009c68 <__sinit>
 800a7ec:	4b89      	ldr	r3, [pc, #548]	; (800aa14 <_vfiprintf_r+0x240>)
 800a7ee:	429d      	cmp	r5, r3
 800a7f0:	d11b      	bne.n	800a82a <_vfiprintf_r+0x56>
 800a7f2:	6875      	ldr	r5, [r6, #4]
 800a7f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7f6:	07d9      	lsls	r1, r3, #31
 800a7f8:	d405      	bmi.n	800a806 <_vfiprintf_r+0x32>
 800a7fa:	89ab      	ldrh	r3, [r5, #12]
 800a7fc:	059a      	lsls	r2, r3, #22
 800a7fe:	d402      	bmi.n	800a806 <_vfiprintf_r+0x32>
 800a800:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a802:	f7ff fad4 	bl	8009dae <__retarget_lock_acquire_recursive>
 800a806:	89ab      	ldrh	r3, [r5, #12]
 800a808:	071b      	lsls	r3, r3, #28
 800a80a:	d501      	bpl.n	800a810 <_vfiprintf_r+0x3c>
 800a80c:	692b      	ldr	r3, [r5, #16]
 800a80e:	b9eb      	cbnz	r3, 800a84c <_vfiprintf_r+0x78>
 800a810:	4629      	mov	r1, r5
 800a812:	4630      	mov	r0, r6
 800a814:	f7fe fa26 	bl	8008c64 <__swsetup_r>
 800a818:	b1c0      	cbz	r0, 800a84c <_vfiprintf_r+0x78>
 800a81a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a81c:	07dc      	lsls	r4, r3, #31
 800a81e:	d50e      	bpl.n	800a83e <_vfiprintf_r+0x6a>
 800a820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a824:	b01d      	add	sp, #116	; 0x74
 800a826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a82a:	4b7b      	ldr	r3, [pc, #492]	; (800aa18 <_vfiprintf_r+0x244>)
 800a82c:	429d      	cmp	r5, r3
 800a82e:	d101      	bne.n	800a834 <_vfiprintf_r+0x60>
 800a830:	68b5      	ldr	r5, [r6, #8]
 800a832:	e7df      	b.n	800a7f4 <_vfiprintf_r+0x20>
 800a834:	4b79      	ldr	r3, [pc, #484]	; (800aa1c <_vfiprintf_r+0x248>)
 800a836:	429d      	cmp	r5, r3
 800a838:	bf08      	it	eq
 800a83a:	68f5      	ldreq	r5, [r6, #12]
 800a83c:	e7da      	b.n	800a7f4 <_vfiprintf_r+0x20>
 800a83e:	89ab      	ldrh	r3, [r5, #12]
 800a840:	0598      	lsls	r0, r3, #22
 800a842:	d4ed      	bmi.n	800a820 <_vfiprintf_r+0x4c>
 800a844:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a846:	f7ff fab3 	bl	8009db0 <__retarget_lock_release_recursive>
 800a84a:	e7e9      	b.n	800a820 <_vfiprintf_r+0x4c>
 800a84c:	2300      	movs	r3, #0
 800a84e:	9309      	str	r3, [sp, #36]	; 0x24
 800a850:	2320      	movs	r3, #32
 800a852:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a856:	f8cd 800c 	str.w	r8, [sp, #12]
 800a85a:	2330      	movs	r3, #48	; 0x30
 800a85c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aa20 <_vfiprintf_r+0x24c>
 800a860:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a864:	f04f 0901 	mov.w	r9, #1
 800a868:	4623      	mov	r3, r4
 800a86a:	469a      	mov	sl, r3
 800a86c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a870:	b10a      	cbz	r2, 800a876 <_vfiprintf_r+0xa2>
 800a872:	2a25      	cmp	r2, #37	; 0x25
 800a874:	d1f9      	bne.n	800a86a <_vfiprintf_r+0x96>
 800a876:	ebba 0b04 	subs.w	fp, sl, r4
 800a87a:	d00b      	beq.n	800a894 <_vfiprintf_r+0xc0>
 800a87c:	465b      	mov	r3, fp
 800a87e:	4622      	mov	r2, r4
 800a880:	4629      	mov	r1, r5
 800a882:	4630      	mov	r0, r6
 800a884:	f7ff ff93 	bl	800a7ae <__sfputs_r>
 800a888:	3001      	adds	r0, #1
 800a88a:	f000 80aa 	beq.w	800a9e2 <_vfiprintf_r+0x20e>
 800a88e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a890:	445a      	add	r2, fp
 800a892:	9209      	str	r2, [sp, #36]	; 0x24
 800a894:	f89a 3000 	ldrb.w	r3, [sl]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	f000 80a2 	beq.w	800a9e2 <_vfiprintf_r+0x20e>
 800a89e:	2300      	movs	r3, #0
 800a8a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8a8:	f10a 0a01 	add.w	sl, sl, #1
 800a8ac:	9304      	str	r3, [sp, #16]
 800a8ae:	9307      	str	r3, [sp, #28]
 800a8b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8b4:	931a      	str	r3, [sp, #104]	; 0x68
 800a8b6:	4654      	mov	r4, sl
 800a8b8:	2205      	movs	r2, #5
 800a8ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8be:	4858      	ldr	r0, [pc, #352]	; (800aa20 <_vfiprintf_r+0x24c>)
 800a8c0:	f7f5 fc8e 	bl	80001e0 <memchr>
 800a8c4:	9a04      	ldr	r2, [sp, #16]
 800a8c6:	b9d8      	cbnz	r0, 800a900 <_vfiprintf_r+0x12c>
 800a8c8:	06d1      	lsls	r1, r2, #27
 800a8ca:	bf44      	itt	mi
 800a8cc:	2320      	movmi	r3, #32
 800a8ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8d2:	0713      	lsls	r3, r2, #28
 800a8d4:	bf44      	itt	mi
 800a8d6:	232b      	movmi	r3, #43	; 0x2b
 800a8d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8dc:	f89a 3000 	ldrb.w	r3, [sl]
 800a8e0:	2b2a      	cmp	r3, #42	; 0x2a
 800a8e2:	d015      	beq.n	800a910 <_vfiprintf_r+0x13c>
 800a8e4:	9a07      	ldr	r2, [sp, #28]
 800a8e6:	4654      	mov	r4, sl
 800a8e8:	2000      	movs	r0, #0
 800a8ea:	f04f 0c0a 	mov.w	ip, #10
 800a8ee:	4621      	mov	r1, r4
 800a8f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8f4:	3b30      	subs	r3, #48	; 0x30
 800a8f6:	2b09      	cmp	r3, #9
 800a8f8:	d94e      	bls.n	800a998 <_vfiprintf_r+0x1c4>
 800a8fa:	b1b0      	cbz	r0, 800a92a <_vfiprintf_r+0x156>
 800a8fc:	9207      	str	r2, [sp, #28]
 800a8fe:	e014      	b.n	800a92a <_vfiprintf_r+0x156>
 800a900:	eba0 0308 	sub.w	r3, r0, r8
 800a904:	fa09 f303 	lsl.w	r3, r9, r3
 800a908:	4313      	orrs	r3, r2
 800a90a:	9304      	str	r3, [sp, #16]
 800a90c:	46a2      	mov	sl, r4
 800a90e:	e7d2      	b.n	800a8b6 <_vfiprintf_r+0xe2>
 800a910:	9b03      	ldr	r3, [sp, #12]
 800a912:	1d19      	adds	r1, r3, #4
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	9103      	str	r1, [sp, #12]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	bfbb      	ittet	lt
 800a91c:	425b      	neglt	r3, r3
 800a91e:	f042 0202 	orrlt.w	r2, r2, #2
 800a922:	9307      	strge	r3, [sp, #28]
 800a924:	9307      	strlt	r3, [sp, #28]
 800a926:	bfb8      	it	lt
 800a928:	9204      	strlt	r2, [sp, #16]
 800a92a:	7823      	ldrb	r3, [r4, #0]
 800a92c:	2b2e      	cmp	r3, #46	; 0x2e
 800a92e:	d10c      	bne.n	800a94a <_vfiprintf_r+0x176>
 800a930:	7863      	ldrb	r3, [r4, #1]
 800a932:	2b2a      	cmp	r3, #42	; 0x2a
 800a934:	d135      	bne.n	800a9a2 <_vfiprintf_r+0x1ce>
 800a936:	9b03      	ldr	r3, [sp, #12]
 800a938:	1d1a      	adds	r2, r3, #4
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	9203      	str	r2, [sp, #12]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	bfb8      	it	lt
 800a942:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a946:	3402      	adds	r4, #2
 800a948:	9305      	str	r3, [sp, #20]
 800a94a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aa30 <_vfiprintf_r+0x25c>
 800a94e:	7821      	ldrb	r1, [r4, #0]
 800a950:	2203      	movs	r2, #3
 800a952:	4650      	mov	r0, sl
 800a954:	f7f5 fc44 	bl	80001e0 <memchr>
 800a958:	b140      	cbz	r0, 800a96c <_vfiprintf_r+0x198>
 800a95a:	2340      	movs	r3, #64	; 0x40
 800a95c:	eba0 000a 	sub.w	r0, r0, sl
 800a960:	fa03 f000 	lsl.w	r0, r3, r0
 800a964:	9b04      	ldr	r3, [sp, #16]
 800a966:	4303      	orrs	r3, r0
 800a968:	3401      	adds	r4, #1
 800a96a:	9304      	str	r3, [sp, #16]
 800a96c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a970:	482c      	ldr	r0, [pc, #176]	; (800aa24 <_vfiprintf_r+0x250>)
 800a972:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a976:	2206      	movs	r2, #6
 800a978:	f7f5 fc32 	bl	80001e0 <memchr>
 800a97c:	2800      	cmp	r0, #0
 800a97e:	d03f      	beq.n	800aa00 <_vfiprintf_r+0x22c>
 800a980:	4b29      	ldr	r3, [pc, #164]	; (800aa28 <_vfiprintf_r+0x254>)
 800a982:	bb1b      	cbnz	r3, 800a9cc <_vfiprintf_r+0x1f8>
 800a984:	9b03      	ldr	r3, [sp, #12]
 800a986:	3307      	adds	r3, #7
 800a988:	f023 0307 	bic.w	r3, r3, #7
 800a98c:	3308      	adds	r3, #8
 800a98e:	9303      	str	r3, [sp, #12]
 800a990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a992:	443b      	add	r3, r7
 800a994:	9309      	str	r3, [sp, #36]	; 0x24
 800a996:	e767      	b.n	800a868 <_vfiprintf_r+0x94>
 800a998:	fb0c 3202 	mla	r2, ip, r2, r3
 800a99c:	460c      	mov	r4, r1
 800a99e:	2001      	movs	r0, #1
 800a9a0:	e7a5      	b.n	800a8ee <_vfiprintf_r+0x11a>
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	3401      	adds	r4, #1
 800a9a6:	9305      	str	r3, [sp, #20]
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	f04f 0c0a 	mov.w	ip, #10
 800a9ae:	4620      	mov	r0, r4
 800a9b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9b4:	3a30      	subs	r2, #48	; 0x30
 800a9b6:	2a09      	cmp	r2, #9
 800a9b8:	d903      	bls.n	800a9c2 <_vfiprintf_r+0x1ee>
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d0c5      	beq.n	800a94a <_vfiprintf_r+0x176>
 800a9be:	9105      	str	r1, [sp, #20]
 800a9c0:	e7c3      	b.n	800a94a <_vfiprintf_r+0x176>
 800a9c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9c6:	4604      	mov	r4, r0
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	e7f0      	b.n	800a9ae <_vfiprintf_r+0x1da>
 800a9cc:	ab03      	add	r3, sp, #12
 800a9ce:	9300      	str	r3, [sp, #0]
 800a9d0:	462a      	mov	r2, r5
 800a9d2:	4b16      	ldr	r3, [pc, #88]	; (800aa2c <_vfiprintf_r+0x258>)
 800a9d4:	a904      	add	r1, sp, #16
 800a9d6:	4630      	mov	r0, r6
 800a9d8:	f7fd fc9a 	bl	8008310 <_printf_float>
 800a9dc:	4607      	mov	r7, r0
 800a9de:	1c78      	adds	r0, r7, #1
 800a9e0:	d1d6      	bne.n	800a990 <_vfiprintf_r+0x1bc>
 800a9e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9e4:	07d9      	lsls	r1, r3, #31
 800a9e6:	d405      	bmi.n	800a9f4 <_vfiprintf_r+0x220>
 800a9e8:	89ab      	ldrh	r3, [r5, #12]
 800a9ea:	059a      	lsls	r2, r3, #22
 800a9ec:	d402      	bmi.n	800a9f4 <_vfiprintf_r+0x220>
 800a9ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9f0:	f7ff f9de 	bl	8009db0 <__retarget_lock_release_recursive>
 800a9f4:	89ab      	ldrh	r3, [r5, #12]
 800a9f6:	065b      	lsls	r3, r3, #25
 800a9f8:	f53f af12 	bmi.w	800a820 <_vfiprintf_r+0x4c>
 800a9fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9fe:	e711      	b.n	800a824 <_vfiprintf_r+0x50>
 800aa00:	ab03      	add	r3, sp, #12
 800aa02:	9300      	str	r3, [sp, #0]
 800aa04:	462a      	mov	r2, r5
 800aa06:	4b09      	ldr	r3, [pc, #36]	; (800aa2c <_vfiprintf_r+0x258>)
 800aa08:	a904      	add	r1, sp, #16
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	f7fd ff24 	bl	8008858 <_printf_i>
 800aa10:	e7e4      	b.n	800a9dc <_vfiprintf_r+0x208>
 800aa12:	bf00      	nop
 800aa14:	0800daf8 	.word	0x0800daf8
 800aa18:	0800db18 	.word	0x0800db18
 800aa1c:	0800dad8 	.word	0x0800dad8
 800aa20:	0800dc94 	.word	0x0800dc94
 800aa24:	0800dc9e 	.word	0x0800dc9e
 800aa28:	08008311 	.word	0x08008311
 800aa2c:	0800a7af 	.word	0x0800a7af
 800aa30:	0800dc9a 	.word	0x0800dc9a

0800aa34 <_sbrk_r>:
 800aa34:	b538      	push	{r3, r4, r5, lr}
 800aa36:	4d06      	ldr	r5, [pc, #24]	; (800aa50 <_sbrk_r+0x1c>)
 800aa38:	2300      	movs	r3, #0
 800aa3a:	4604      	mov	r4, r0
 800aa3c:	4608      	mov	r0, r1
 800aa3e:	602b      	str	r3, [r5, #0]
 800aa40:	f7f8 fa86 	bl	8002f50 <_sbrk>
 800aa44:	1c43      	adds	r3, r0, #1
 800aa46:	d102      	bne.n	800aa4e <_sbrk_r+0x1a>
 800aa48:	682b      	ldr	r3, [r5, #0]
 800aa4a:	b103      	cbz	r3, 800aa4e <_sbrk_r+0x1a>
 800aa4c:	6023      	str	r3, [r4, #0]
 800aa4e:	bd38      	pop	{r3, r4, r5, pc}
 800aa50:	200004e4 	.word	0x200004e4

0800aa54 <__sread>:
 800aa54:	b510      	push	{r4, lr}
 800aa56:	460c      	mov	r4, r1
 800aa58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa5c:	f000 f8e2 	bl	800ac24 <_read_r>
 800aa60:	2800      	cmp	r0, #0
 800aa62:	bfab      	itete	ge
 800aa64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aa66:	89a3      	ldrhlt	r3, [r4, #12]
 800aa68:	181b      	addge	r3, r3, r0
 800aa6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aa6e:	bfac      	ite	ge
 800aa70:	6563      	strge	r3, [r4, #84]	; 0x54
 800aa72:	81a3      	strhlt	r3, [r4, #12]
 800aa74:	bd10      	pop	{r4, pc}

0800aa76 <__swrite>:
 800aa76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa7a:	461f      	mov	r7, r3
 800aa7c:	898b      	ldrh	r3, [r1, #12]
 800aa7e:	05db      	lsls	r3, r3, #23
 800aa80:	4605      	mov	r5, r0
 800aa82:	460c      	mov	r4, r1
 800aa84:	4616      	mov	r6, r2
 800aa86:	d505      	bpl.n	800aa94 <__swrite+0x1e>
 800aa88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa8c:	2302      	movs	r3, #2
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f000 f898 	bl	800abc4 <_lseek_r>
 800aa94:	89a3      	ldrh	r3, [r4, #12]
 800aa96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa9e:	81a3      	strh	r3, [r4, #12]
 800aaa0:	4632      	mov	r2, r6
 800aaa2:	463b      	mov	r3, r7
 800aaa4:	4628      	mov	r0, r5
 800aaa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aaaa:	f000 b817 	b.w	800aadc <_write_r>

0800aaae <__sseek>:
 800aaae:	b510      	push	{r4, lr}
 800aab0:	460c      	mov	r4, r1
 800aab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aab6:	f000 f885 	bl	800abc4 <_lseek_r>
 800aaba:	1c43      	adds	r3, r0, #1
 800aabc:	89a3      	ldrh	r3, [r4, #12]
 800aabe:	bf15      	itete	ne
 800aac0:	6560      	strne	r0, [r4, #84]	; 0x54
 800aac2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aac6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aaca:	81a3      	strheq	r3, [r4, #12]
 800aacc:	bf18      	it	ne
 800aace:	81a3      	strhne	r3, [r4, #12]
 800aad0:	bd10      	pop	{r4, pc}

0800aad2 <__sclose>:
 800aad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aad6:	f000 b831 	b.w	800ab3c <_close_r>
	...

0800aadc <_write_r>:
 800aadc:	b538      	push	{r3, r4, r5, lr}
 800aade:	4d07      	ldr	r5, [pc, #28]	; (800aafc <_write_r+0x20>)
 800aae0:	4604      	mov	r4, r0
 800aae2:	4608      	mov	r0, r1
 800aae4:	4611      	mov	r1, r2
 800aae6:	2200      	movs	r2, #0
 800aae8:	602a      	str	r2, [r5, #0]
 800aaea:	461a      	mov	r2, r3
 800aaec:	f7f7 f8fe 	bl	8001cec <_write>
 800aaf0:	1c43      	adds	r3, r0, #1
 800aaf2:	d102      	bne.n	800aafa <_write_r+0x1e>
 800aaf4:	682b      	ldr	r3, [r5, #0]
 800aaf6:	b103      	cbz	r3, 800aafa <_write_r+0x1e>
 800aaf8:	6023      	str	r3, [r4, #0]
 800aafa:	bd38      	pop	{r3, r4, r5, pc}
 800aafc:	200004e4 	.word	0x200004e4

0800ab00 <__assert_func>:
 800ab00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab02:	4614      	mov	r4, r2
 800ab04:	461a      	mov	r2, r3
 800ab06:	4b09      	ldr	r3, [pc, #36]	; (800ab2c <__assert_func+0x2c>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4605      	mov	r5, r0
 800ab0c:	68d8      	ldr	r0, [r3, #12]
 800ab0e:	b14c      	cbz	r4, 800ab24 <__assert_func+0x24>
 800ab10:	4b07      	ldr	r3, [pc, #28]	; (800ab30 <__assert_func+0x30>)
 800ab12:	9100      	str	r1, [sp, #0]
 800ab14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab18:	4906      	ldr	r1, [pc, #24]	; (800ab34 <__assert_func+0x34>)
 800ab1a:	462b      	mov	r3, r5
 800ab1c:	f000 f81e 	bl	800ab5c <fiprintf>
 800ab20:	f000 f89f 	bl	800ac62 <abort>
 800ab24:	4b04      	ldr	r3, [pc, #16]	; (800ab38 <__assert_func+0x38>)
 800ab26:	461c      	mov	r4, r3
 800ab28:	e7f3      	b.n	800ab12 <__assert_func+0x12>
 800ab2a:	bf00      	nop
 800ab2c:	2000000c 	.word	0x2000000c
 800ab30:	0800dca5 	.word	0x0800dca5
 800ab34:	0800dcb2 	.word	0x0800dcb2
 800ab38:	0800dce0 	.word	0x0800dce0

0800ab3c <_close_r>:
 800ab3c:	b538      	push	{r3, r4, r5, lr}
 800ab3e:	4d06      	ldr	r5, [pc, #24]	; (800ab58 <_close_r+0x1c>)
 800ab40:	2300      	movs	r3, #0
 800ab42:	4604      	mov	r4, r0
 800ab44:	4608      	mov	r0, r1
 800ab46:	602b      	str	r3, [r5, #0]
 800ab48:	f7f8 f9cd 	bl	8002ee6 <_close>
 800ab4c:	1c43      	adds	r3, r0, #1
 800ab4e:	d102      	bne.n	800ab56 <_close_r+0x1a>
 800ab50:	682b      	ldr	r3, [r5, #0]
 800ab52:	b103      	cbz	r3, 800ab56 <_close_r+0x1a>
 800ab54:	6023      	str	r3, [r4, #0]
 800ab56:	bd38      	pop	{r3, r4, r5, pc}
 800ab58:	200004e4 	.word	0x200004e4

0800ab5c <fiprintf>:
 800ab5c:	b40e      	push	{r1, r2, r3}
 800ab5e:	b503      	push	{r0, r1, lr}
 800ab60:	4601      	mov	r1, r0
 800ab62:	ab03      	add	r3, sp, #12
 800ab64:	4805      	ldr	r0, [pc, #20]	; (800ab7c <fiprintf+0x20>)
 800ab66:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab6a:	6800      	ldr	r0, [r0, #0]
 800ab6c:	9301      	str	r3, [sp, #4]
 800ab6e:	f7ff fe31 	bl	800a7d4 <_vfiprintf_r>
 800ab72:	b002      	add	sp, #8
 800ab74:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab78:	b003      	add	sp, #12
 800ab7a:	4770      	bx	lr
 800ab7c:	2000000c 	.word	0x2000000c

0800ab80 <_fstat_r>:
 800ab80:	b538      	push	{r3, r4, r5, lr}
 800ab82:	4d07      	ldr	r5, [pc, #28]	; (800aba0 <_fstat_r+0x20>)
 800ab84:	2300      	movs	r3, #0
 800ab86:	4604      	mov	r4, r0
 800ab88:	4608      	mov	r0, r1
 800ab8a:	4611      	mov	r1, r2
 800ab8c:	602b      	str	r3, [r5, #0]
 800ab8e:	f7f8 f9b6 	bl	8002efe <_fstat>
 800ab92:	1c43      	adds	r3, r0, #1
 800ab94:	d102      	bne.n	800ab9c <_fstat_r+0x1c>
 800ab96:	682b      	ldr	r3, [r5, #0]
 800ab98:	b103      	cbz	r3, 800ab9c <_fstat_r+0x1c>
 800ab9a:	6023      	str	r3, [r4, #0]
 800ab9c:	bd38      	pop	{r3, r4, r5, pc}
 800ab9e:	bf00      	nop
 800aba0:	200004e4 	.word	0x200004e4

0800aba4 <_isatty_r>:
 800aba4:	b538      	push	{r3, r4, r5, lr}
 800aba6:	4d06      	ldr	r5, [pc, #24]	; (800abc0 <_isatty_r+0x1c>)
 800aba8:	2300      	movs	r3, #0
 800abaa:	4604      	mov	r4, r0
 800abac:	4608      	mov	r0, r1
 800abae:	602b      	str	r3, [r5, #0]
 800abb0:	f7f8 f9b5 	bl	8002f1e <_isatty>
 800abb4:	1c43      	adds	r3, r0, #1
 800abb6:	d102      	bne.n	800abbe <_isatty_r+0x1a>
 800abb8:	682b      	ldr	r3, [r5, #0]
 800abba:	b103      	cbz	r3, 800abbe <_isatty_r+0x1a>
 800abbc:	6023      	str	r3, [r4, #0]
 800abbe:	bd38      	pop	{r3, r4, r5, pc}
 800abc0:	200004e4 	.word	0x200004e4

0800abc4 <_lseek_r>:
 800abc4:	b538      	push	{r3, r4, r5, lr}
 800abc6:	4d07      	ldr	r5, [pc, #28]	; (800abe4 <_lseek_r+0x20>)
 800abc8:	4604      	mov	r4, r0
 800abca:	4608      	mov	r0, r1
 800abcc:	4611      	mov	r1, r2
 800abce:	2200      	movs	r2, #0
 800abd0:	602a      	str	r2, [r5, #0]
 800abd2:	461a      	mov	r2, r3
 800abd4:	f7f8 f9ae 	bl	8002f34 <_lseek>
 800abd8:	1c43      	adds	r3, r0, #1
 800abda:	d102      	bne.n	800abe2 <_lseek_r+0x1e>
 800abdc:	682b      	ldr	r3, [r5, #0]
 800abde:	b103      	cbz	r3, 800abe2 <_lseek_r+0x1e>
 800abe0:	6023      	str	r3, [r4, #0]
 800abe2:	bd38      	pop	{r3, r4, r5, pc}
 800abe4:	200004e4 	.word	0x200004e4

0800abe8 <__ascii_mbtowc>:
 800abe8:	b082      	sub	sp, #8
 800abea:	b901      	cbnz	r1, 800abee <__ascii_mbtowc+0x6>
 800abec:	a901      	add	r1, sp, #4
 800abee:	b142      	cbz	r2, 800ac02 <__ascii_mbtowc+0x1a>
 800abf0:	b14b      	cbz	r3, 800ac06 <__ascii_mbtowc+0x1e>
 800abf2:	7813      	ldrb	r3, [r2, #0]
 800abf4:	600b      	str	r3, [r1, #0]
 800abf6:	7812      	ldrb	r2, [r2, #0]
 800abf8:	1e10      	subs	r0, r2, #0
 800abfa:	bf18      	it	ne
 800abfc:	2001      	movne	r0, #1
 800abfe:	b002      	add	sp, #8
 800ac00:	4770      	bx	lr
 800ac02:	4610      	mov	r0, r2
 800ac04:	e7fb      	b.n	800abfe <__ascii_mbtowc+0x16>
 800ac06:	f06f 0001 	mvn.w	r0, #1
 800ac0a:	e7f8      	b.n	800abfe <__ascii_mbtowc+0x16>

0800ac0c <__malloc_lock>:
 800ac0c:	4801      	ldr	r0, [pc, #4]	; (800ac14 <__malloc_lock+0x8>)
 800ac0e:	f7ff b8ce 	b.w	8009dae <__retarget_lock_acquire_recursive>
 800ac12:	bf00      	nop
 800ac14:	200004d8 	.word	0x200004d8

0800ac18 <__malloc_unlock>:
 800ac18:	4801      	ldr	r0, [pc, #4]	; (800ac20 <__malloc_unlock+0x8>)
 800ac1a:	f7ff b8c9 	b.w	8009db0 <__retarget_lock_release_recursive>
 800ac1e:	bf00      	nop
 800ac20:	200004d8 	.word	0x200004d8

0800ac24 <_read_r>:
 800ac24:	b538      	push	{r3, r4, r5, lr}
 800ac26:	4d07      	ldr	r5, [pc, #28]	; (800ac44 <_read_r+0x20>)
 800ac28:	4604      	mov	r4, r0
 800ac2a:	4608      	mov	r0, r1
 800ac2c:	4611      	mov	r1, r2
 800ac2e:	2200      	movs	r2, #0
 800ac30:	602a      	str	r2, [r5, #0]
 800ac32:	461a      	mov	r2, r3
 800ac34:	f7f8 f93a 	bl	8002eac <_read>
 800ac38:	1c43      	adds	r3, r0, #1
 800ac3a:	d102      	bne.n	800ac42 <_read_r+0x1e>
 800ac3c:	682b      	ldr	r3, [r5, #0]
 800ac3e:	b103      	cbz	r3, 800ac42 <_read_r+0x1e>
 800ac40:	6023      	str	r3, [r4, #0]
 800ac42:	bd38      	pop	{r3, r4, r5, pc}
 800ac44:	200004e4 	.word	0x200004e4

0800ac48 <__ascii_wctomb>:
 800ac48:	b149      	cbz	r1, 800ac5e <__ascii_wctomb+0x16>
 800ac4a:	2aff      	cmp	r2, #255	; 0xff
 800ac4c:	bf85      	ittet	hi
 800ac4e:	238a      	movhi	r3, #138	; 0x8a
 800ac50:	6003      	strhi	r3, [r0, #0]
 800ac52:	700a      	strbls	r2, [r1, #0]
 800ac54:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ac58:	bf98      	it	ls
 800ac5a:	2001      	movls	r0, #1
 800ac5c:	4770      	bx	lr
 800ac5e:	4608      	mov	r0, r1
 800ac60:	4770      	bx	lr

0800ac62 <abort>:
 800ac62:	b508      	push	{r3, lr}
 800ac64:	2006      	movs	r0, #6
 800ac66:	f000 f82b 	bl	800acc0 <raise>
 800ac6a:	2001      	movs	r0, #1
 800ac6c:	f7f8 f914 	bl	8002e98 <_exit>

0800ac70 <_raise_r>:
 800ac70:	291f      	cmp	r1, #31
 800ac72:	b538      	push	{r3, r4, r5, lr}
 800ac74:	4604      	mov	r4, r0
 800ac76:	460d      	mov	r5, r1
 800ac78:	d904      	bls.n	800ac84 <_raise_r+0x14>
 800ac7a:	2316      	movs	r3, #22
 800ac7c:	6003      	str	r3, [r0, #0]
 800ac7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac82:	bd38      	pop	{r3, r4, r5, pc}
 800ac84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ac86:	b112      	cbz	r2, 800ac8e <_raise_r+0x1e>
 800ac88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac8c:	b94b      	cbnz	r3, 800aca2 <_raise_r+0x32>
 800ac8e:	4620      	mov	r0, r4
 800ac90:	f000 f830 	bl	800acf4 <_getpid_r>
 800ac94:	462a      	mov	r2, r5
 800ac96:	4601      	mov	r1, r0
 800ac98:	4620      	mov	r0, r4
 800ac9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac9e:	f000 b817 	b.w	800acd0 <_kill_r>
 800aca2:	2b01      	cmp	r3, #1
 800aca4:	d00a      	beq.n	800acbc <_raise_r+0x4c>
 800aca6:	1c59      	adds	r1, r3, #1
 800aca8:	d103      	bne.n	800acb2 <_raise_r+0x42>
 800acaa:	2316      	movs	r3, #22
 800acac:	6003      	str	r3, [r0, #0]
 800acae:	2001      	movs	r0, #1
 800acb0:	e7e7      	b.n	800ac82 <_raise_r+0x12>
 800acb2:	2400      	movs	r4, #0
 800acb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800acb8:	4628      	mov	r0, r5
 800acba:	4798      	blx	r3
 800acbc:	2000      	movs	r0, #0
 800acbe:	e7e0      	b.n	800ac82 <_raise_r+0x12>

0800acc0 <raise>:
 800acc0:	4b02      	ldr	r3, [pc, #8]	; (800accc <raise+0xc>)
 800acc2:	4601      	mov	r1, r0
 800acc4:	6818      	ldr	r0, [r3, #0]
 800acc6:	f7ff bfd3 	b.w	800ac70 <_raise_r>
 800acca:	bf00      	nop
 800accc:	2000000c 	.word	0x2000000c

0800acd0 <_kill_r>:
 800acd0:	b538      	push	{r3, r4, r5, lr}
 800acd2:	4d07      	ldr	r5, [pc, #28]	; (800acf0 <_kill_r+0x20>)
 800acd4:	2300      	movs	r3, #0
 800acd6:	4604      	mov	r4, r0
 800acd8:	4608      	mov	r0, r1
 800acda:	4611      	mov	r1, r2
 800acdc:	602b      	str	r3, [r5, #0]
 800acde:	f7f8 f8cb 	bl	8002e78 <_kill>
 800ace2:	1c43      	adds	r3, r0, #1
 800ace4:	d102      	bne.n	800acec <_kill_r+0x1c>
 800ace6:	682b      	ldr	r3, [r5, #0]
 800ace8:	b103      	cbz	r3, 800acec <_kill_r+0x1c>
 800acea:	6023      	str	r3, [r4, #0]
 800acec:	bd38      	pop	{r3, r4, r5, pc}
 800acee:	bf00      	nop
 800acf0:	200004e4 	.word	0x200004e4

0800acf4 <_getpid_r>:
 800acf4:	f7f8 b8b8 	b.w	8002e68 <_getpid>

0800acf8 <atan>:
 800acf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acfc:	ec55 4b10 	vmov	r4, r5, d0
 800ad00:	4bc3      	ldr	r3, [pc, #780]	; (800b010 <atan+0x318>)
 800ad02:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ad06:	429e      	cmp	r6, r3
 800ad08:	46ab      	mov	fp, r5
 800ad0a:	dd18      	ble.n	800ad3e <atan+0x46>
 800ad0c:	4bc1      	ldr	r3, [pc, #772]	; (800b014 <atan+0x31c>)
 800ad0e:	429e      	cmp	r6, r3
 800ad10:	dc01      	bgt.n	800ad16 <atan+0x1e>
 800ad12:	d109      	bne.n	800ad28 <atan+0x30>
 800ad14:	b144      	cbz	r4, 800ad28 <atan+0x30>
 800ad16:	4622      	mov	r2, r4
 800ad18:	462b      	mov	r3, r5
 800ad1a:	4620      	mov	r0, r4
 800ad1c:	4629      	mov	r1, r5
 800ad1e:	f7f5 fab5 	bl	800028c <__adddf3>
 800ad22:	4604      	mov	r4, r0
 800ad24:	460d      	mov	r5, r1
 800ad26:	e006      	b.n	800ad36 <atan+0x3e>
 800ad28:	f1bb 0f00 	cmp.w	fp, #0
 800ad2c:	f300 8131 	bgt.w	800af92 <atan+0x29a>
 800ad30:	a59b      	add	r5, pc, #620	; (adr r5, 800afa0 <atan+0x2a8>)
 800ad32:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ad36:	ec45 4b10 	vmov	d0, r4, r5
 800ad3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad3e:	4bb6      	ldr	r3, [pc, #728]	; (800b018 <atan+0x320>)
 800ad40:	429e      	cmp	r6, r3
 800ad42:	dc14      	bgt.n	800ad6e <atan+0x76>
 800ad44:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ad48:	429e      	cmp	r6, r3
 800ad4a:	dc0d      	bgt.n	800ad68 <atan+0x70>
 800ad4c:	a396      	add	r3, pc, #600	; (adr r3, 800afa8 <atan+0x2b0>)
 800ad4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad52:	ee10 0a10 	vmov	r0, s0
 800ad56:	4629      	mov	r1, r5
 800ad58:	f7f5 fa98 	bl	800028c <__adddf3>
 800ad5c:	4baf      	ldr	r3, [pc, #700]	; (800b01c <atan+0x324>)
 800ad5e:	2200      	movs	r2, #0
 800ad60:	f7f5 feda 	bl	8000b18 <__aeabi_dcmpgt>
 800ad64:	2800      	cmp	r0, #0
 800ad66:	d1e6      	bne.n	800ad36 <atan+0x3e>
 800ad68:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ad6c:	e02b      	b.n	800adc6 <atan+0xce>
 800ad6e:	f000 f9b7 	bl	800b0e0 <fabs>
 800ad72:	4bab      	ldr	r3, [pc, #684]	; (800b020 <atan+0x328>)
 800ad74:	429e      	cmp	r6, r3
 800ad76:	ec55 4b10 	vmov	r4, r5, d0
 800ad7a:	f300 80bf 	bgt.w	800aefc <atan+0x204>
 800ad7e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ad82:	429e      	cmp	r6, r3
 800ad84:	f300 80a0 	bgt.w	800aec8 <atan+0x1d0>
 800ad88:	ee10 2a10 	vmov	r2, s0
 800ad8c:	ee10 0a10 	vmov	r0, s0
 800ad90:	462b      	mov	r3, r5
 800ad92:	4629      	mov	r1, r5
 800ad94:	f7f5 fa7a 	bl	800028c <__adddf3>
 800ad98:	4ba0      	ldr	r3, [pc, #640]	; (800b01c <atan+0x324>)
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f7f5 fa74 	bl	8000288 <__aeabi_dsub>
 800ada0:	2200      	movs	r2, #0
 800ada2:	4606      	mov	r6, r0
 800ada4:	460f      	mov	r7, r1
 800ada6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800adaa:	4620      	mov	r0, r4
 800adac:	4629      	mov	r1, r5
 800adae:	f7f5 fa6d 	bl	800028c <__adddf3>
 800adb2:	4602      	mov	r2, r0
 800adb4:	460b      	mov	r3, r1
 800adb6:	4630      	mov	r0, r6
 800adb8:	4639      	mov	r1, r7
 800adba:	f7f5 fd47 	bl	800084c <__aeabi_ddiv>
 800adbe:	f04f 0a00 	mov.w	sl, #0
 800adc2:	4604      	mov	r4, r0
 800adc4:	460d      	mov	r5, r1
 800adc6:	4622      	mov	r2, r4
 800adc8:	462b      	mov	r3, r5
 800adca:	4620      	mov	r0, r4
 800adcc:	4629      	mov	r1, r5
 800adce:	f7f5 fc13 	bl	80005f8 <__aeabi_dmul>
 800add2:	4602      	mov	r2, r0
 800add4:	460b      	mov	r3, r1
 800add6:	4680      	mov	r8, r0
 800add8:	4689      	mov	r9, r1
 800adda:	f7f5 fc0d 	bl	80005f8 <__aeabi_dmul>
 800adde:	a374      	add	r3, pc, #464	; (adr r3, 800afb0 <atan+0x2b8>)
 800ade0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade4:	4606      	mov	r6, r0
 800ade6:	460f      	mov	r7, r1
 800ade8:	f7f5 fc06 	bl	80005f8 <__aeabi_dmul>
 800adec:	a372      	add	r3, pc, #456	; (adr r3, 800afb8 <atan+0x2c0>)
 800adee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf2:	f7f5 fa4b 	bl	800028c <__adddf3>
 800adf6:	4632      	mov	r2, r6
 800adf8:	463b      	mov	r3, r7
 800adfa:	f7f5 fbfd 	bl	80005f8 <__aeabi_dmul>
 800adfe:	a370      	add	r3, pc, #448	; (adr r3, 800afc0 <atan+0x2c8>)
 800ae00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae04:	f7f5 fa42 	bl	800028c <__adddf3>
 800ae08:	4632      	mov	r2, r6
 800ae0a:	463b      	mov	r3, r7
 800ae0c:	f7f5 fbf4 	bl	80005f8 <__aeabi_dmul>
 800ae10:	a36d      	add	r3, pc, #436	; (adr r3, 800afc8 <atan+0x2d0>)
 800ae12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae16:	f7f5 fa39 	bl	800028c <__adddf3>
 800ae1a:	4632      	mov	r2, r6
 800ae1c:	463b      	mov	r3, r7
 800ae1e:	f7f5 fbeb 	bl	80005f8 <__aeabi_dmul>
 800ae22:	a36b      	add	r3, pc, #428	; (adr r3, 800afd0 <atan+0x2d8>)
 800ae24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae28:	f7f5 fa30 	bl	800028c <__adddf3>
 800ae2c:	4632      	mov	r2, r6
 800ae2e:	463b      	mov	r3, r7
 800ae30:	f7f5 fbe2 	bl	80005f8 <__aeabi_dmul>
 800ae34:	a368      	add	r3, pc, #416	; (adr r3, 800afd8 <atan+0x2e0>)
 800ae36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3a:	f7f5 fa27 	bl	800028c <__adddf3>
 800ae3e:	4642      	mov	r2, r8
 800ae40:	464b      	mov	r3, r9
 800ae42:	f7f5 fbd9 	bl	80005f8 <__aeabi_dmul>
 800ae46:	a366      	add	r3, pc, #408	; (adr r3, 800afe0 <atan+0x2e8>)
 800ae48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4c:	4680      	mov	r8, r0
 800ae4e:	4689      	mov	r9, r1
 800ae50:	4630      	mov	r0, r6
 800ae52:	4639      	mov	r1, r7
 800ae54:	f7f5 fbd0 	bl	80005f8 <__aeabi_dmul>
 800ae58:	a363      	add	r3, pc, #396	; (adr r3, 800afe8 <atan+0x2f0>)
 800ae5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5e:	f7f5 fa13 	bl	8000288 <__aeabi_dsub>
 800ae62:	4632      	mov	r2, r6
 800ae64:	463b      	mov	r3, r7
 800ae66:	f7f5 fbc7 	bl	80005f8 <__aeabi_dmul>
 800ae6a:	a361      	add	r3, pc, #388	; (adr r3, 800aff0 <atan+0x2f8>)
 800ae6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae70:	f7f5 fa0a 	bl	8000288 <__aeabi_dsub>
 800ae74:	4632      	mov	r2, r6
 800ae76:	463b      	mov	r3, r7
 800ae78:	f7f5 fbbe 	bl	80005f8 <__aeabi_dmul>
 800ae7c:	a35e      	add	r3, pc, #376	; (adr r3, 800aff8 <atan+0x300>)
 800ae7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae82:	f7f5 fa01 	bl	8000288 <__aeabi_dsub>
 800ae86:	4632      	mov	r2, r6
 800ae88:	463b      	mov	r3, r7
 800ae8a:	f7f5 fbb5 	bl	80005f8 <__aeabi_dmul>
 800ae8e:	a35c      	add	r3, pc, #368	; (adr r3, 800b000 <atan+0x308>)
 800ae90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae94:	f7f5 f9f8 	bl	8000288 <__aeabi_dsub>
 800ae98:	4632      	mov	r2, r6
 800ae9a:	463b      	mov	r3, r7
 800ae9c:	f7f5 fbac 	bl	80005f8 <__aeabi_dmul>
 800aea0:	4602      	mov	r2, r0
 800aea2:	460b      	mov	r3, r1
 800aea4:	4640      	mov	r0, r8
 800aea6:	4649      	mov	r1, r9
 800aea8:	f7f5 f9f0 	bl	800028c <__adddf3>
 800aeac:	4622      	mov	r2, r4
 800aeae:	462b      	mov	r3, r5
 800aeb0:	f7f5 fba2 	bl	80005f8 <__aeabi_dmul>
 800aeb4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800aeb8:	4602      	mov	r2, r0
 800aeba:	460b      	mov	r3, r1
 800aebc:	d14b      	bne.n	800af56 <atan+0x25e>
 800aebe:	4620      	mov	r0, r4
 800aec0:	4629      	mov	r1, r5
 800aec2:	f7f5 f9e1 	bl	8000288 <__aeabi_dsub>
 800aec6:	e72c      	b.n	800ad22 <atan+0x2a>
 800aec8:	ee10 0a10 	vmov	r0, s0
 800aecc:	4b53      	ldr	r3, [pc, #332]	; (800b01c <atan+0x324>)
 800aece:	2200      	movs	r2, #0
 800aed0:	4629      	mov	r1, r5
 800aed2:	f7f5 f9d9 	bl	8000288 <__aeabi_dsub>
 800aed6:	4b51      	ldr	r3, [pc, #324]	; (800b01c <atan+0x324>)
 800aed8:	4606      	mov	r6, r0
 800aeda:	460f      	mov	r7, r1
 800aedc:	2200      	movs	r2, #0
 800aede:	4620      	mov	r0, r4
 800aee0:	4629      	mov	r1, r5
 800aee2:	f7f5 f9d3 	bl	800028c <__adddf3>
 800aee6:	4602      	mov	r2, r0
 800aee8:	460b      	mov	r3, r1
 800aeea:	4630      	mov	r0, r6
 800aeec:	4639      	mov	r1, r7
 800aeee:	f7f5 fcad 	bl	800084c <__aeabi_ddiv>
 800aef2:	f04f 0a01 	mov.w	sl, #1
 800aef6:	4604      	mov	r4, r0
 800aef8:	460d      	mov	r5, r1
 800aefa:	e764      	b.n	800adc6 <atan+0xce>
 800aefc:	4b49      	ldr	r3, [pc, #292]	; (800b024 <atan+0x32c>)
 800aefe:	429e      	cmp	r6, r3
 800af00:	da1d      	bge.n	800af3e <atan+0x246>
 800af02:	ee10 0a10 	vmov	r0, s0
 800af06:	4b48      	ldr	r3, [pc, #288]	; (800b028 <atan+0x330>)
 800af08:	2200      	movs	r2, #0
 800af0a:	4629      	mov	r1, r5
 800af0c:	f7f5 f9bc 	bl	8000288 <__aeabi_dsub>
 800af10:	4b45      	ldr	r3, [pc, #276]	; (800b028 <atan+0x330>)
 800af12:	4606      	mov	r6, r0
 800af14:	460f      	mov	r7, r1
 800af16:	2200      	movs	r2, #0
 800af18:	4620      	mov	r0, r4
 800af1a:	4629      	mov	r1, r5
 800af1c:	f7f5 fb6c 	bl	80005f8 <__aeabi_dmul>
 800af20:	4b3e      	ldr	r3, [pc, #248]	; (800b01c <atan+0x324>)
 800af22:	2200      	movs	r2, #0
 800af24:	f7f5 f9b2 	bl	800028c <__adddf3>
 800af28:	4602      	mov	r2, r0
 800af2a:	460b      	mov	r3, r1
 800af2c:	4630      	mov	r0, r6
 800af2e:	4639      	mov	r1, r7
 800af30:	f7f5 fc8c 	bl	800084c <__aeabi_ddiv>
 800af34:	f04f 0a02 	mov.w	sl, #2
 800af38:	4604      	mov	r4, r0
 800af3a:	460d      	mov	r5, r1
 800af3c:	e743      	b.n	800adc6 <atan+0xce>
 800af3e:	462b      	mov	r3, r5
 800af40:	ee10 2a10 	vmov	r2, s0
 800af44:	4939      	ldr	r1, [pc, #228]	; (800b02c <atan+0x334>)
 800af46:	2000      	movs	r0, #0
 800af48:	f7f5 fc80 	bl	800084c <__aeabi_ddiv>
 800af4c:	f04f 0a03 	mov.w	sl, #3
 800af50:	4604      	mov	r4, r0
 800af52:	460d      	mov	r5, r1
 800af54:	e737      	b.n	800adc6 <atan+0xce>
 800af56:	4b36      	ldr	r3, [pc, #216]	; (800b030 <atan+0x338>)
 800af58:	4e36      	ldr	r6, [pc, #216]	; (800b034 <atan+0x33c>)
 800af5a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800af5e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800af62:	e9da 2300 	ldrd	r2, r3, [sl]
 800af66:	f7f5 f98f 	bl	8000288 <__aeabi_dsub>
 800af6a:	4622      	mov	r2, r4
 800af6c:	462b      	mov	r3, r5
 800af6e:	f7f5 f98b 	bl	8000288 <__aeabi_dsub>
 800af72:	4602      	mov	r2, r0
 800af74:	460b      	mov	r3, r1
 800af76:	e9d6 0100 	ldrd	r0, r1, [r6]
 800af7a:	f7f5 f985 	bl	8000288 <__aeabi_dsub>
 800af7e:	f1bb 0f00 	cmp.w	fp, #0
 800af82:	4604      	mov	r4, r0
 800af84:	460d      	mov	r5, r1
 800af86:	f6bf aed6 	bge.w	800ad36 <atan+0x3e>
 800af8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af8e:	461d      	mov	r5, r3
 800af90:	e6d1      	b.n	800ad36 <atan+0x3e>
 800af92:	a51d      	add	r5, pc, #116	; (adr r5, 800b008 <atan+0x310>)
 800af94:	e9d5 4500 	ldrd	r4, r5, [r5]
 800af98:	e6cd      	b.n	800ad36 <atan+0x3e>
 800af9a:	bf00      	nop
 800af9c:	f3af 8000 	nop.w
 800afa0:	54442d18 	.word	0x54442d18
 800afa4:	bff921fb 	.word	0xbff921fb
 800afa8:	8800759c 	.word	0x8800759c
 800afac:	7e37e43c 	.word	0x7e37e43c
 800afb0:	e322da11 	.word	0xe322da11
 800afb4:	3f90ad3a 	.word	0x3f90ad3a
 800afb8:	24760deb 	.word	0x24760deb
 800afbc:	3fa97b4b 	.word	0x3fa97b4b
 800afc0:	a0d03d51 	.word	0xa0d03d51
 800afc4:	3fb10d66 	.word	0x3fb10d66
 800afc8:	c54c206e 	.word	0xc54c206e
 800afcc:	3fb745cd 	.word	0x3fb745cd
 800afd0:	920083ff 	.word	0x920083ff
 800afd4:	3fc24924 	.word	0x3fc24924
 800afd8:	5555550d 	.word	0x5555550d
 800afdc:	3fd55555 	.word	0x3fd55555
 800afe0:	2c6a6c2f 	.word	0x2c6a6c2f
 800afe4:	bfa2b444 	.word	0xbfa2b444
 800afe8:	52defd9a 	.word	0x52defd9a
 800afec:	3fadde2d 	.word	0x3fadde2d
 800aff0:	af749a6d 	.word	0xaf749a6d
 800aff4:	3fb3b0f2 	.word	0x3fb3b0f2
 800aff8:	fe231671 	.word	0xfe231671
 800affc:	3fbc71c6 	.word	0x3fbc71c6
 800b000:	9998ebc4 	.word	0x9998ebc4
 800b004:	3fc99999 	.word	0x3fc99999
 800b008:	54442d18 	.word	0x54442d18
 800b00c:	3ff921fb 	.word	0x3ff921fb
 800b010:	440fffff 	.word	0x440fffff
 800b014:	7ff00000 	.word	0x7ff00000
 800b018:	3fdbffff 	.word	0x3fdbffff
 800b01c:	3ff00000 	.word	0x3ff00000
 800b020:	3ff2ffff 	.word	0x3ff2ffff
 800b024:	40038000 	.word	0x40038000
 800b028:	3ff80000 	.word	0x3ff80000
 800b02c:	bff00000 	.word	0xbff00000
 800b030:	0800de10 	.word	0x0800de10
 800b034:	0800ddf0 	.word	0x0800ddf0

0800b038 <cos>:
 800b038:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b03a:	ec53 2b10 	vmov	r2, r3, d0
 800b03e:	4826      	ldr	r0, [pc, #152]	; (800b0d8 <cos+0xa0>)
 800b040:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b044:	4281      	cmp	r1, r0
 800b046:	dc06      	bgt.n	800b056 <cos+0x1e>
 800b048:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b0d0 <cos+0x98>
 800b04c:	b005      	add	sp, #20
 800b04e:	f85d eb04 	ldr.w	lr, [sp], #4
 800b052:	f001 bbfd 	b.w	800c850 <__kernel_cos>
 800b056:	4821      	ldr	r0, [pc, #132]	; (800b0dc <cos+0xa4>)
 800b058:	4281      	cmp	r1, r0
 800b05a:	dd09      	ble.n	800b070 <cos+0x38>
 800b05c:	ee10 0a10 	vmov	r0, s0
 800b060:	4619      	mov	r1, r3
 800b062:	f7f5 f911 	bl	8000288 <__aeabi_dsub>
 800b066:	ec41 0b10 	vmov	d0, r0, r1
 800b06a:	b005      	add	sp, #20
 800b06c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b070:	4668      	mov	r0, sp
 800b072:	f001 f92d 	bl	800c2d0 <__ieee754_rem_pio2>
 800b076:	f000 0003 	and.w	r0, r0, #3
 800b07a:	2801      	cmp	r0, #1
 800b07c:	d00b      	beq.n	800b096 <cos+0x5e>
 800b07e:	2802      	cmp	r0, #2
 800b080:	d016      	beq.n	800b0b0 <cos+0x78>
 800b082:	b9e0      	cbnz	r0, 800b0be <cos+0x86>
 800b084:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b088:	ed9d 0b00 	vldr	d0, [sp]
 800b08c:	f001 fbe0 	bl	800c850 <__kernel_cos>
 800b090:	ec51 0b10 	vmov	r0, r1, d0
 800b094:	e7e7      	b.n	800b066 <cos+0x2e>
 800b096:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b09a:	ed9d 0b00 	vldr	d0, [sp]
 800b09e:	f001 ffef 	bl	800d080 <__kernel_sin>
 800b0a2:	ec53 2b10 	vmov	r2, r3, d0
 800b0a6:	ee10 0a10 	vmov	r0, s0
 800b0aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b0ae:	e7da      	b.n	800b066 <cos+0x2e>
 800b0b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b0b4:	ed9d 0b00 	vldr	d0, [sp]
 800b0b8:	f001 fbca 	bl	800c850 <__kernel_cos>
 800b0bc:	e7f1      	b.n	800b0a2 <cos+0x6a>
 800b0be:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b0c2:	ed9d 0b00 	vldr	d0, [sp]
 800b0c6:	2001      	movs	r0, #1
 800b0c8:	f001 ffda 	bl	800d080 <__kernel_sin>
 800b0cc:	e7e0      	b.n	800b090 <cos+0x58>
 800b0ce:	bf00      	nop
	...
 800b0d8:	3fe921fb 	.word	0x3fe921fb
 800b0dc:	7fefffff 	.word	0x7fefffff

0800b0e0 <fabs>:
 800b0e0:	ec51 0b10 	vmov	r0, r1, d0
 800b0e4:	ee10 2a10 	vmov	r2, s0
 800b0e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b0ec:	ec43 2b10 	vmov	d0, r2, r3
 800b0f0:	4770      	bx	lr
 800b0f2:	0000      	movs	r0, r0
 800b0f4:	0000      	movs	r0, r0
	...

0800b0f8 <sin>:
 800b0f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b0fa:	ec53 2b10 	vmov	r2, r3, d0
 800b0fe:	4828      	ldr	r0, [pc, #160]	; (800b1a0 <sin+0xa8>)
 800b100:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b104:	4281      	cmp	r1, r0
 800b106:	dc07      	bgt.n	800b118 <sin+0x20>
 800b108:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800b198 <sin+0xa0>
 800b10c:	2000      	movs	r0, #0
 800b10e:	b005      	add	sp, #20
 800b110:	f85d eb04 	ldr.w	lr, [sp], #4
 800b114:	f001 bfb4 	b.w	800d080 <__kernel_sin>
 800b118:	4822      	ldr	r0, [pc, #136]	; (800b1a4 <sin+0xac>)
 800b11a:	4281      	cmp	r1, r0
 800b11c:	dd09      	ble.n	800b132 <sin+0x3a>
 800b11e:	ee10 0a10 	vmov	r0, s0
 800b122:	4619      	mov	r1, r3
 800b124:	f7f5 f8b0 	bl	8000288 <__aeabi_dsub>
 800b128:	ec41 0b10 	vmov	d0, r0, r1
 800b12c:	b005      	add	sp, #20
 800b12e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b132:	4668      	mov	r0, sp
 800b134:	f001 f8cc 	bl	800c2d0 <__ieee754_rem_pio2>
 800b138:	f000 0003 	and.w	r0, r0, #3
 800b13c:	2801      	cmp	r0, #1
 800b13e:	d00c      	beq.n	800b15a <sin+0x62>
 800b140:	2802      	cmp	r0, #2
 800b142:	d011      	beq.n	800b168 <sin+0x70>
 800b144:	b9f0      	cbnz	r0, 800b184 <sin+0x8c>
 800b146:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b14a:	ed9d 0b00 	vldr	d0, [sp]
 800b14e:	2001      	movs	r0, #1
 800b150:	f001 ff96 	bl	800d080 <__kernel_sin>
 800b154:	ec51 0b10 	vmov	r0, r1, d0
 800b158:	e7e6      	b.n	800b128 <sin+0x30>
 800b15a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b15e:	ed9d 0b00 	vldr	d0, [sp]
 800b162:	f001 fb75 	bl	800c850 <__kernel_cos>
 800b166:	e7f5      	b.n	800b154 <sin+0x5c>
 800b168:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b16c:	ed9d 0b00 	vldr	d0, [sp]
 800b170:	2001      	movs	r0, #1
 800b172:	f001 ff85 	bl	800d080 <__kernel_sin>
 800b176:	ec53 2b10 	vmov	r2, r3, d0
 800b17a:	ee10 0a10 	vmov	r0, s0
 800b17e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b182:	e7d1      	b.n	800b128 <sin+0x30>
 800b184:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b188:	ed9d 0b00 	vldr	d0, [sp]
 800b18c:	f001 fb60 	bl	800c850 <__kernel_cos>
 800b190:	e7f1      	b.n	800b176 <sin+0x7e>
 800b192:	bf00      	nop
 800b194:	f3af 8000 	nop.w
	...
 800b1a0:	3fe921fb 	.word	0x3fe921fb
 800b1a4:	7fefffff 	.word	0x7fefffff

0800b1a8 <tan>:
 800b1a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b1aa:	ec53 2b10 	vmov	r2, r3, d0
 800b1ae:	4816      	ldr	r0, [pc, #88]	; (800b208 <tan+0x60>)
 800b1b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b1b4:	4281      	cmp	r1, r0
 800b1b6:	dc07      	bgt.n	800b1c8 <tan+0x20>
 800b1b8:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800b200 <tan+0x58>
 800b1bc:	2001      	movs	r0, #1
 800b1be:	b005      	add	sp, #20
 800b1c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1c4:	f002 b81c 	b.w	800d200 <__kernel_tan>
 800b1c8:	4810      	ldr	r0, [pc, #64]	; (800b20c <tan+0x64>)
 800b1ca:	4281      	cmp	r1, r0
 800b1cc:	dd09      	ble.n	800b1e2 <tan+0x3a>
 800b1ce:	ee10 0a10 	vmov	r0, s0
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	f7f5 f858 	bl	8000288 <__aeabi_dsub>
 800b1d8:	ec41 0b10 	vmov	d0, r0, r1
 800b1dc:	b005      	add	sp, #20
 800b1de:	f85d fb04 	ldr.w	pc, [sp], #4
 800b1e2:	4668      	mov	r0, sp
 800b1e4:	f001 f874 	bl	800c2d0 <__ieee754_rem_pio2>
 800b1e8:	0040      	lsls	r0, r0, #1
 800b1ea:	f000 0002 	and.w	r0, r0, #2
 800b1ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b1f2:	ed9d 0b00 	vldr	d0, [sp]
 800b1f6:	f1c0 0001 	rsb	r0, r0, #1
 800b1fa:	f002 f801 	bl	800d200 <__kernel_tan>
 800b1fe:	e7ed      	b.n	800b1dc <tan+0x34>
	...
 800b208:	3fe921fb 	.word	0x3fe921fb
 800b20c:	7fefffff 	.word	0x7fefffff

0800b210 <acos>:
 800b210:	b538      	push	{r3, r4, r5, lr}
 800b212:	ed2d 8b02 	vpush	{d8}
 800b216:	ec55 4b10 	vmov	r4, r5, d0
 800b21a:	f000 f8c9 	bl	800b3b0 <__ieee754_acos>
 800b21e:	4622      	mov	r2, r4
 800b220:	462b      	mov	r3, r5
 800b222:	4620      	mov	r0, r4
 800b224:	4629      	mov	r1, r5
 800b226:	eeb0 8a40 	vmov.f32	s16, s0
 800b22a:	eef0 8a60 	vmov.f32	s17, s1
 800b22e:	f7f5 fc7d 	bl	8000b2c <__aeabi_dcmpun>
 800b232:	b9a8      	cbnz	r0, 800b260 <acos+0x50>
 800b234:	ec45 4b10 	vmov	d0, r4, r5
 800b238:	f7ff ff52 	bl	800b0e0 <fabs>
 800b23c:	4b0c      	ldr	r3, [pc, #48]	; (800b270 <acos+0x60>)
 800b23e:	ec51 0b10 	vmov	r0, r1, d0
 800b242:	2200      	movs	r2, #0
 800b244:	f7f5 fc68 	bl	8000b18 <__aeabi_dcmpgt>
 800b248:	b150      	cbz	r0, 800b260 <acos+0x50>
 800b24a:	f7fc ff81 	bl	8008150 <__errno>
 800b24e:	ecbd 8b02 	vpop	{d8}
 800b252:	2321      	movs	r3, #33	; 0x21
 800b254:	6003      	str	r3, [r0, #0]
 800b256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b25a:	4806      	ldr	r0, [pc, #24]	; (800b274 <acos+0x64>)
 800b25c:	f002 ba98 	b.w	800d790 <nan>
 800b260:	eeb0 0a48 	vmov.f32	s0, s16
 800b264:	eef0 0a68 	vmov.f32	s1, s17
 800b268:	ecbd 8b02 	vpop	{d8}
 800b26c:	bd38      	pop	{r3, r4, r5, pc}
 800b26e:	bf00      	nop
 800b270:	3ff00000 	.word	0x3ff00000
 800b274:	0800dce0 	.word	0x0800dce0

0800b278 <pow>:
 800b278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b27a:	ed2d 8b02 	vpush	{d8}
 800b27e:	eeb0 8a40 	vmov.f32	s16, s0
 800b282:	eef0 8a60 	vmov.f32	s17, s1
 800b286:	ec55 4b11 	vmov	r4, r5, d1
 800b28a:	f000 faf1 	bl	800b870 <__ieee754_pow>
 800b28e:	4622      	mov	r2, r4
 800b290:	462b      	mov	r3, r5
 800b292:	4620      	mov	r0, r4
 800b294:	4629      	mov	r1, r5
 800b296:	ec57 6b10 	vmov	r6, r7, d0
 800b29a:	f7f5 fc47 	bl	8000b2c <__aeabi_dcmpun>
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	d13b      	bne.n	800b31a <pow+0xa2>
 800b2a2:	ec51 0b18 	vmov	r0, r1, d8
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	f7f5 fc0d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2ae:	b1b8      	cbz	r0, 800b2e0 <pow+0x68>
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	4629      	mov	r1, r5
 800b2b8:	f7f5 fc06 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	d146      	bne.n	800b34e <pow+0xd6>
 800b2c0:	ec45 4b10 	vmov	d0, r4, r5
 800b2c4:	f002 f9d6 	bl	800d674 <finite>
 800b2c8:	b338      	cbz	r0, 800b31a <pow+0xa2>
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	4629      	mov	r1, r5
 800b2d2:	f7f5 fc03 	bl	8000adc <__aeabi_dcmplt>
 800b2d6:	b300      	cbz	r0, 800b31a <pow+0xa2>
 800b2d8:	f7fc ff3a 	bl	8008150 <__errno>
 800b2dc:	2322      	movs	r3, #34	; 0x22
 800b2de:	e01b      	b.n	800b318 <pow+0xa0>
 800b2e0:	ec47 6b10 	vmov	d0, r6, r7
 800b2e4:	f002 f9c6 	bl	800d674 <finite>
 800b2e8:	b9e0      	cbnz	r0, 800b324 <pow+0xac>
 800b2ea:	eeb0 0a48 	vmov.f32	s0, s16
 800b2ee:	eef0 0a68 	vmov.f32	s1, s17
 800b2f2:	f002 f9bf 	bl	800d674 <finite>
 800b2f6:	b1a8      	cbz	r0, 800b324 <pow+0xac>
 800b2f8:	ec45 4b10 	vmov	d0, r4, r5
 800b2fc:	f002 f9ba 	bl	800d674 <finite>
 800b300:	b180      	cbz	r0, 800b324 <pow+0xac>
 800b302:	4632      	mov	r2, r6
 800b304:	463b      	mov	r3, r7
 800b306:	4630      	mov	r0, r6
 800b308:	4639      	mov	r1, r7
 800b30a:	f7f5 fc0f 	bl	8000b2c <__aeabi_dcmpun>
 800b30e:	2800      	cmp	r0, #0
 800b310:	d0e2      	beq.n	800b2d8 <pow+0x60>
 800b312:	f7fc ff1d 	bl	8008150 <__errno>
 800b316:	2321      	movs	r3, #33	; 0x21
 800b318:	6003      	str	r3, [r0, #0]
 800b31a:	ecbd 8b02 	vpop	{d8}
 800b31e:	ec47 6b10 	vmov	d0, r6, r7
 800b322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b324:	2200      	movs	r2, #0
 800b326:	2300      	movs	r3, #0
 800b328:	4630      	mov	r0, r6
 800b32a:	4639      	mov	r1, r7
 800b32c:	f7f5 fbcc 	bl	8000ac8 <__aeabi_dcmpeq>
 800b330:	2800      	cmp	r0, #0
 800b332:	d0f2      	beq.n	800b31a <pow+0xa2>
 800b334:	eeb0 0a48 	vmov.f32	s0, s16
 800b338:	eef0 0a68 	vmov.f32	s1, s17
 800b33c:	f002 f99a 	bl	800d674 <finite>
 800b340:	2800      	cmp	r0, #0
 800b342:	d0ea      	beq.n	800b31a <pow+0xa2>
 800b344:	ec45 4b10 	vmov	d0, r4, r5
 800b348:	f002 f994 	bl	800d674 <finite>
 800b34c:	e7c3      	b.n	800b2d6 <pow+0x5e>
 800b34e:	4f01      	ldr	r7, [pc, #4]	; (800b354 <pow+0xdc>)
 800b350:	2600      	movs	r6, #0
 800b352:	e7e2      	b.n	800b31a <pow+0xa2>
 800b354:	3ff00000 	.word	0x3ff00000

0800b358 <sqrt>:
 800b358:	b538      	push	{r3, r4, r5, lr}
 800b35a:	ed2d 8b02 	vpush	{d8}
 800b35e:	ec55 4b10 	vmov	r4, r5, d0
 800b362:	f001 f9c1 	bl	800c6e8 <__ieee754_sqrt>
 800b366:	4622      	mov	r2, r4
 800b368:	462b      	mov	r3, r5
 800b36a:	4620      	mov	r0, r4
 800b36c:	4629      	mov	r1, r5
 800b36e:	eeb0 8a40 	vmov.f32	s16, s0
 800b372:	eef0 8a60 	vmov.f32	s17, s1
 800b376:	f7f5 fbd9 	bl	8000b2c <__aeabi_dcmpun>
 800b37a:	b990      	cbnz	r0, 800b3a2 <sqrt+0x4a>
 800b37c:	2200      	movs	r2, #0
 800b37e:	2300      	movs	r3, #0
 800b380:	4620      	mov	r0, r4
 800b382:	4629      	mov	r1, r5
 800b384:	f7f5 fbaa 	bl	8000adc <__aeabi_dcmplt>
 800b388:	b158      	cbz	r0, 800b3a2 <sqrt+0x4a>
 800b38a:	f7fc fee1 	bl	8008150 <__errno>
 800b38e:	2321      	movs	r3, #33	; 0x21
 800b390:	6003      	str	r3, [r0, #0]
 800b392:	2200      	movs	r2, #0
 800b394:	2300      	movs	r3, #0
 800b396:	4610      	mov	r0, r2
 800b398:	4619      	mov	r1, r3
 800b39a:	f7f5 fa57 	bl	800084c <__aeabi_ddiv>
 800b39e:	ec41 0b18 	vmov	d8, r0, r1
 800b3a2:	eeb0 0a48 	vmov.f32	s0, s16
 800b3a6:	eef0 0a68 	vmov.f32	s1, s17
 800b3aa:	ecbd 8b02 	vpop	{d8}
 800b3ae:	bd38      	pop	{r3, r4, r5, pc}

0800b3b0 <__ieee754_acos>:
 800b3b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b4:	ec55 4b10 	vmov	r4, r5, d0
 800b3b8:	49b7      	ldr	r1, [pc, #732]	; (800b698 <__ieee754_acos+0x2e8>)
 800b3ba:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b3be:	428b      	cmp	r3, r1
 800b3c0:	dd1b      	ble.n	800b3fa <__ieee754_acos+0x4a>
 800b3c2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800b3c6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b3ca:	4323      	orrs	r3, r4
 800b3cc:	d106      	bne.n	800b3dc <__ieee754_acos+0x2c>
 800b3ce:	2d00      	cmp	r5, #0
 800b3d0:	f300 8211 	bgt.w	800b7f6 <__ieee754_acos+0x446>
 800b3d4:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800b630 <__ieee754_acos+0x280>
 800b3d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3dc:	ee10 2a10 	vmov	r2, s0
 800b3e0:	462b      	mov	r3, r5
 800b3e2:	ee10 0a10 	vmov	r0, s0
 800b3e6:	4629      	mov	r1, r5
 800b3e8:	f7f4 ff4e 	bl	8000288 <__aeabi_dsub>
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	460b      	mov	r3, r1
 800b3f0:	f7f5 fa2c 	bl	800084c <__aeabi_ddiv>
 800b3f4:	ec41 0b10 	vmov	d0, r0, r1
 800b3f8:	e7ee      	b.n	800b3d8 <__ieee754_acos+0x28>
 800b3fa:	49a8      	ldr	r1, [pc, #672]	; (800b69c <__ieee754_acos+0x2ec>)
 800b3fc:	428b      	cmp	r3, r1
 800b3fe:	f300 8087 	bgt.w	800b510 <__ieee754_acos+0x160>
 800b402:	4aa7      	ldr	r2, [pc, #668]	; (800b6a0 <__ieee754_acos+0x2f0>)
 800b404:	4293      	cmp	r3, r2
 800b406:	f340 81f9 	ble.w	800b7fc <__ieee754_acos+0x44c>
 800b40a:	ee10 2a10 	vmov	r2, s0
 800b40e:	ee10 0a10 	vmov	r0, s0
 800b412:	462b      	mov	r3, r5
 800b414:	4629      	mov	r1, r5
 800b416:	f7f5 f8ef 	bl	80005f8 <__aeabi_dmul>
 800b41a:	a387      	add	r3, pc, #540	; (adr r3, 800b638 <__ieee754_acos+0x288>)
 800b41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b420:	4606      	mov	r6, r0
 800b422:	460f      	mov	r7, r1
 800b424:	f7f5 f8e8 	bl	80005f8 <__aeabi_dmul>
 800b428:	a385      	add	r3, pc, #532	; (adr r3, 800b640 <__ieee754_acos+0x290>)
 800b42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42e:	f7f4 ff2d 	bl	800028c <__adddf3>
 800b432:	4632      	mov	r2, r6
 800b434:	463b      	mov	r3, r7
 800b436:	f7f5 f8df 	bl	80005f8 <__aeabi_dmul>
 800b43a:	a383      	add	r3, pc, #524	; (adr r3, 800b648 <__ieee754_acos+0x298>)
 800b43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b440:	f7f4 ff22 	bl	8000288 <__aeabi_dsub>
 800b444:	4632      	mov	r2, r6
 800b446:	463b      	mov	r3, r7
 800b448:	f7f5 f8d6 	bl	80005f8 <__aeabi_dmul>
 800b44c:	a380      	add	r3, pc, #512	; (adr r3, 800b650 <__ieee754_acos+0x2a0>)
 800b44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b452:	f7f4 ff1b 	bl	800028c <__adddf3>
 800b456:	4632      	mov	r2, r6
 800b458:	463b      	mov	r3, r7
 800b45a:	f7f5 f8cd 	bl	80005f8 <__aeabi_dmul>
 800b45e:	a37e      	add	r3, pc, #504	; (adr r3, 800b658 <__ieee754_acos+0x2a8>)
 800b460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b464:	f7f4 ff10 	bl	8000288 <__aeabi_dsub>
 800b468:	4632      	mov	r2, r6
 800b46a:	463b      	mov	r3, r7
 800b46c:	f7f5 f8c4 	bl	80005f8 <__aeabi_dmul>
 800b470:	a37b      	add	r3, pc, #492	; (adr r3, 800b660 <__ieee754_acos+0x2b0>)
 800b472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b476:	f7f4 ff09 	bl	800028c <__adddf3>
 800b47a:	4632      	mov	r2, r6
 800b47c:	463b      	mov	r3, r7
 800b47e:	f7f5 f8bb 	bl	80005f8 <__aeabi_dmul>
 800b482:	a379      	add	r3, pc, #484	; (adr r3, 800b668 <__ieee754_acos+0x2b8>)
 800b484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b488:	4680      	mov	r8, r0
 800b48a:	4689      	mov	r9, r1
 800b48c:	4630      	mov	r0, r6
 800b48e:	4639      	mov	r1, r7
 800b490:	f7f5 f8b2 	bl	80005f8 <__aeabi_dmul>
 800b494:	a376      	add	r3, pc, #472	; (adr r3, 800b670 <__ieee754_acos+0x2c0>)
 800b496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49a:	f7f4 fef5 	bl	8000288 <__aeabi_dsub>
 800b49e:	4632      	mov	r2, r6
 800b4a0:	463b      	mov	r3, r7
 800b4a2:	f7f5 f8a9 	bl	80005f8 <__aeabi_dmul>
 800b4a6:	a374      	add	r3, pc, #464	; (adr r3, 800b678 <__ieee754_acos+0x2c8>)
 800b4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ac:	f7f4 feee 	bl	800028c <__adddf3>
 800b4b0:	4632      	mov	r2, r6
 800b4b2:	463b      	mov	r3, r7
 800b4b4:	f7f5 f8a0 	bl	80005f8 <__aeabi_dmul>
 800b4b8:	a371      	add	r3, pc, #452	; (adr r3, 800b680 <__ieee754_acos+0x2d0>)
 800b4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4be:	f7f4 fee3 	bl	8000288 <__aeabi_dsub>
 800b4c2:	4632      	mov	r2, r6
 800b4c4:	463b      	mov	r3, r7
 800b4c6:	f7f5 f897 	bl	80005f8 <__aeabi_dmul>
 800b4ca:	4b76      	ldr	r3, [pc, #472]	; (800b6a4 <__ieee754_acos+0x2f4>)
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	f7f4 fedd 	bl	800028c <__adddf3>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	460b      	mov	r3, r1
 800b4d6:	4640      	mov	r0, r8
 800b4d8:	4649      	mov	r1, r9
 800b4da:	f7f5 f9b7 	bl	800084c <__aeabi_ddiv>
 800b4de:	4622      	mov	r2, r4
 800b4e0:	462b      	mov	r3, r5
 800b4e2:	f7f5 f889 	bl	80005f8 <__aeabi_dmul>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	a167      	add	r1, pc, #412	; (adr r1, 800b688 <__ieee754_acos+0x2d8>)
 800b4ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4f0:	f7f4 feca 	bl	8000288 <__aeabi_dsub>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	4629      	mov	r1, r5
 800b4fc:	f7f4 fec4 	bl	8000288 <__aeabi_dsub>
 800b500:	4602      	mov	r2, r0
 800b502:	460b      	mov	r3, r1
 800b504:	a162      	add	r1, pc, #392	; (adr r1, 800b690 <__ieee754_acos+0x2e0>)
 800b506:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b50a:	f7f4 febd 	bl	8000288 <__aeabi_dsub>
 800b50e:	e771      	b.n	800b3f4 <__ieee754_acos+0x44>
 800b510:	2d00      	cmp	r5, #0
 800b512:	f280 80cb 	bge.w	800b6ac <__ieee754_acos+0x2fc>
 800b516:	ee10 0a10 	vmov	r0, s0
 800b51a:	4b62      	ldr	r3, [pc, #392]	; (800b6a4 <__ieee754_acos+0x2f4>)
 800b51c:	2200      	movs	r2, #0
 800b51e:	4629      	mov	r1, r5
 800b520:	f7f4 feb4 	bl	800028c <__adddf3>
 800b524:	4b60      	ldr	r3, [pc, #384]	; (800b6a8 <__ieee754_acos+0x2f8>)
 800b526:	2200      	movs	r2, #0
 800b528:	f7f5 f866 	bl	80005f8 <__aeabi_dmul>
 800b52c:	a342      	add	r3, pc, #264	; (adr r3, 800b638 <__ieee754_acos+0x288>)
 800b52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b532:	4604      	mov	r4, r0
 800b534:	460d      	mov	r5, r1
 800b536:	f7f5 f85f 	bl	80005f8 <__aeabi_dmul>
 800b53a:	a341      	add	r3, pc, #260	; (adr r3, 800b640 <__ieee754_acos+0x290>)
 800b53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b540:	f7f4 fea4 	bl	800028c <__adddf3>
 800b544:	4622      	mov	r2, r4
 800b546:	462b      	mov	r3, r5
 800b548:	f7f5 f856 	bl	80005f8 <__aeabi_dmul>
 800b54c:	a33e      	add	r3, pc, #248	; (adr r3, 800b648 <__ieee754_acos+0x298>)
 800b54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b552:	f7f4 fe99 	bl	8000288 <__aeabi_dsub>
 800b556:	4622      	mov	r2, r4
 800b558:	462b      	mov	r3, r5
 800b55a:	f7f5 f84d 	bl	80005f8 <__aeabi_dmul>
 800b55e:	a33c      	add	r3, pc, #240	; (adr r3, 800b650 <__ieee754_acos+0x2a0>)
 800b560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b564:	f7f4 fe92 	bl	800028c <__adddf3>
 800b568:	4622      	mov	r2, r4
 800b56a:	462b      	mov	r3, r5
 800b56c:	f7f5 f844 	bl	80005f8 <__aeabi_dmul>
 800b570:	a339      	add	r3, pc, #228	; (adr r3, 800b658 <__ieee754_acos+0x2a8>)
 800b572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b576:	f7f4 fe87 	bl	8000288 <__aeabi_dsub>
 800b57a:	4622      	mov	r2, r4
 800b57c:	462b      	mov	r3, r5
 800b57e:	f7f5 f83b 	bl	80005f8 <__aeabi_dmul>
 800b582:	a337      	add	r3, pc, #220	; (adr r3, 800b660 <__ieee754_acos+0x2b0>)
 800b584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b588:	f7f4 fe80 	bl	800028c <__adddf3>
 800b58c:	4622      	mov	r2, r4
 800b58e:	462b      	mov	r3, r5
 800b590:	f7f5 f832 	bl	80005f8 <__aeabi_dmul>
 800b594:	ec45 4b10 	vmov	d0, r4, r5
 800b598:	4680      	mov	r8, r0
 800b59a:	4689      	mov	r9, r1
 800b59c:	f001 f8a4 	bl	800c6e8 <__ieee754_sqrt>
 800b5a0:	a331      	add	r3, pc, #196	; (adr r3, 800b668 <__ieee754_acos+0x2b8>)
 800b5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	4629      	mov	r1, r5
 800b5aa:	ec57 6b10 	vmov	r6, r7, d0
 800b5ae:	f7f5 f823 	bl	80005f8 <__aeabi_dmul>
 800b5b2:	a32f      	add	r3, pc, #188	; (adr r3, 800b670 <__ieee754_acos+0x2c0>)
 800b5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b8:	f7f4 fe66 	bl	8000288 <__aeabi_dsub>
 800b5bc:	4622      	mov	r2, r4
 800b5be:	462b      	mov	r3, r5
 800b5c0:	f7f5 f81a 	bl	80005f8 <__aeabi_dmul>
 800b5c4:	a32c      	add	r3, pc, #176	; (adr r3, 800b678 <__ieee754_acos+0x2c8>)
 800b5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ca:	f7f4 fe5f 	bl	800028c <__adddf3>
 800b5ce:	4622      	mov	r2, r4
 800b5d0:	462b      	mov	r3, r5
 800b5d2:	f7f5 f811 	bl	80005f8 <__aeabi_dmul>
 800b5d6:	a32a      	add	r3, pc, #168	; (adr r3, 800b680 <__ieee754_acos+0x2d0>)
 800b5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5dc:	f7f4 fe54 	bl	8000288 <__aeabi_dsub>
 800b5e0:	4622      	mov	r2, r4
 800b5e2:	462b      	mov	r3, r5
 800b5e4:	f7f5 f808 	bl	80005f8 <__aeabi_dmul>
 800b5e8:	4b2e      	ldr	r3, [pc, #184]	; (800b6a4 <__ieee754_acos+0x2f4>)
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	f7f4 fe4e 	bl	800028c <__adddf3>
 800b5f0:	4602      	mov	r2, r0
 800b5f2:	460b      	mov	r3, r1
 800b5f4:	4640      	mov	r0, r8
 800b5f6:	4649      	mov	r1, r9
 800b5f8:	f7f5 f928 	bl	800084c <__aeabi_ddiv>
 800b5fc:	4632      	mov	r2, r6
 800b5fe:	463b      	mov	r3, r7
 800b600:	f7f4 fffa 	bl	80005f8 <__aeabi_dmul>
 800b604:	a320      	add	r3, pc, #128	; (adr r3, 800b688 <__ieee754_acos+0x2d8>)
 800b606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60a:	f7f4 fe3d 	bl	8000288 <__aeabi_dsub>
 800b60e:	4632      	mov	r2, r6
 800b610:	463b      	mov	r3, r7
 800b612:	f7f4 fe3b 	bl	800028c <__adddf3>
 800b616:	4602      	mov	r2, r0
 800b618:	460b      	mov	r3, r1
 800b61a:	f7f4 fe37 	bl	800028c <__adddf3>
 800b61e:	4602      	mov	r2, r0
 800b620:	460b      	mov	r3, r1
 800b622:	a103      	add	r1, pc, #12	; (adr r1, 800b630 <__ieee754_acos+0x280>)
 800b624:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b628:	e76f      	b.n	800b50a <__ieee754_acos+0x15a>
 800b62a:	bf00      	nop
 800b62c:	f3af 8000 	nop.w
 800b630:	54442d18 	.word	0x54442d18
 800b634:	400921fb 	.word	0x400921fb
 800b638:	0dfdf709 	.word	0x0dfdf709
 800b63c:	3f023de1 	.word	0x3f023de1
 800b640:	7501b288 	.word	0x7501b288
 800b644:	3f49efe0 	.word	0x3f49efe0
 800b648:	b5688f3b 	.word	0xb5688f3b
 800b64c:	3fa48228 	.word	0x3fa48228
 800b650:	0e884455 	.word	0x0e884455
 800b654:	3fc9c155 	.word	0x3fc9c155
 800b658:	03eb6f7d 	.word	0x03eb6f7d
 800b65c:	3fd4d612 	.word	0x3fd4d612
 800b660:	55555555 	.word	0x55555555
 800b664:	3fc55555 	.word	0x3fc55555
 800b668:	b12e9282 	.word	0xb12e9282
 800b66c:	3fb3b8c5 	.word	0x3fb3b8c5
 800b670:	1b8d0159 	.word	0x1b8d0159
 800b674:	3fe6066c 	.word	0x3fe6066c
 800b678:	9c598ac8 	.word	0x9c598ac8
 800b67c:	40002ae5 	.word	0x40002ae5
 800b680:	1c8a2d4b 	.word	0x1c8a2d4b
 800b684:	40033a27 	.word	0x40033a27
 800b688:	33145c07 	.word	0x33145c07
 800b68c:	3c91a626 	.word	0x3c91a626
 800b690:	54442d18 	.word	0x54442d18
 800b694:	3ff921fb 	.word	0x3ff921fb
 800b698:	3fefffff 	.word	0x3fefffff
 800b69c:	3fdfffff 	.word	0x3fdfffff
 800b6a0:	3c600000 	.word	0x3c600000
 800b6a4:	3ff00000 	.word	0x3ff00000
 800b6a8:	3fe00000 	.word	0x3fe00000
 800b6ac:	ee10 2a10 	vmov	r2, s0
 800b6b0:	462b      	mov	r3, r5
 800b6b2:	496d      	ldr	r1, [pc, #436]	; (800b868 <__ieee754_acos+0x4b8>)
 800b6b4:	2000      	movs	r0, #0
 800b6b6:	f7f4 fde7 	bl	8000288 <__aeabi_dsub>
 800b6ba:	4b6c      	ldr	r3, [pc, #432]	; (800b86c <__ieee754_acos+0x4bc>)
 800b6bc:	2200      	movs	r2, #0
 800b6be:	f7f4 ff9b 	bl	80005f8 <__aeabi_dmul>
 800b6c2:	4604      	mov	r4, r0
 800b6c4:	460d      	mov	r5, r1
 800b6c6:	ec45 4b10 	vmov	d0, r4, r5
 800b6ca:	f001 f80d 	bl	800c6e8 <__ieee754_sqrt>
 800b6ce:	a34e      	add	r3, pc, #312	; (adr r3, 800b808 <__ieee754_acos+0x458>)
 800b6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d4:	4620      	mov	r0, r4
 800b6d6:	4629      	mov	r1, r5
 800b6d8:	ec59 8b10 	vmov	r8, r9, d0
 800b6dc:	f7f4 ff8c 	bl	80005f8 <__aeabi_dmul>
 800b6e0:	a34b      	add	r3, pc, #300	; (adr r3, 800b810 <__ieee754_acos+0x460>)
 800b6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e6:	f7f4 fdd1 	bl	800028c <__adddf3>
 800b6ea:	4622      	mov	r2, r4
 800b6ec:	462b      	mov	r3, r5
 800b6ee:	f7f4 ff83 	bl	80005f8 <__aeabi_dmul>
 800b6f2:	a349      	add	r3, pc, #292	; (adr r3, 800b818 <__ieee754_acos+0x468>)
 800b6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f8:	f7f4 fdc6 	bl	8000288 <__aeabi_dsub>
 800b6fc:	4622      	mov	r2, r4
 800b6fe:	462b      	mov	r3, r5
 800b700:	f7f4 ff7a 	bl	80005f8 <__aeabi_dmul>
 800b704:	a346      	add	r3, pc, #280	; (adr r3, 800b820 <__ieee754_acos+0x470>)
 800b706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70a:	f7f4 fdbf 	bl	800028c <__adddf3>
 800b70e:	4622      	mov	r2, r4
 800b710:	462b      	mov	r3, r5
 800b712:	f7f4 ff71 	bl	80005f8 <__aeabi_dmul>
 800b716:	a344      	add	r3, pc, #272	; (adr r3, 800b828 <__ieee754_acos+0x478>)
 800b718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71c:	f7f4 fdb4 	bl	8000288 <__aeabi_dsub>
 800b720:	4622      	mov	r2, r4
 800b722:	462b      	mov	r3, r5
 800b724:	f7f4 ff68 	bl	80005f8 <__aeabi_dmul>
 800b728:	a341      	add	r3, pc, #260	; (adr r3, 800b830 <__ieee754_acos+0x480>)
 800b72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72e:	f7f4 fdad 	bl	800028c <__adddf3>
 800b732:	4622      	mov	r2, r4
 800b734:	462b      	mov	r3, r5
 800b736:	f7f4 ff5f 	bl	80005f8 <__aeabi_dmul>
 800b73a:	a33f      	add	r3, pc, #252	; (adr r3, 800b838 <__ieee754_acos+0x488>)
 800b73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b740:	4682      	mov	sl, r0
 800b742:	468b      	mov	fp, r1
 800b744:	4620      	mov	r0, r4
 800b746:	4629      	mov	r1, r5
 800b748:	f7f4 ff56 	bl	80005f8 <__aeabi_dmul>
 800b74c:	a33c      	add	r3, pc, #240	; (adr r3, 800b840 <__ieee754_acos+0x490>)
 800b74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b752:	f7f4 fd99 	bl	8000288 <__aeabi_dsub>
 800b756:	4622      	mov	r2, r4
 800b758:	462b      	mov	r3, r5
 800b75a:	f7f4 ff4d 	bl	80005f8 <__aeabi_dmul>
 800b75e:	a33a      	add	r3, pc, #232	; (adr r3, 800b848 <__ieee754_acos+0x498>)
 800b760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b764:	f7f4 fd92 	bl	800028c <__adddf3>
 800b768:	4622      	mov	r2, r4
 800b76a:	462b      	mov	r3, r5
 800b76c:	f7f4 ff44 	bl	80005f8 <__aeabi_dmul>
 800b770:	a337      	add	r3, pc, #220	; (adr r3, 800b850 <__ieee754_acos+0x4a0>)
 800b772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b776:	f7f4 fd87 	bl	8000288 <__aeabi_dsub>
 800b77a:	4622      	mov	r2, r4
 800b77c:	462b      	mov	r3, r5
 800b77e:	f7f4 ff3b 	bl	80005f8 <__aeabi_dmul>
 800b782:	4b39      	ldr	r3, [pc, #228]	; (800b868 <__ieee754_acos+0x4b8>)
 800b784:	2200      	movs	r2, #0
 800b786:	f7f4 fd81 	bl	800028c <__adddf3>
 800b78a:	4602      	mov	r2, r0
 800b78c:	460b      	mov	r3, r1
 800b78e:	4650      	mov	r0, sl
 800b790:	4659      	mov	r1, fp
 800b792:	f7f5 f85b 	bl	800084c <__aeabi_ddiv>
 800b796:	4642      	mov	r2, r8
 800b798:	464b      	mov	r3, r9
 800b79a:	f7f4 ff2d 	bl	80005f8 <__aeabi_dmul>
 800b79e:	2600      	movs	r6, #0
 800b7a0:	4682      	mov	sl, r0
 800b7a2:	468b      	mov	fp, r1
 800b7a4:	4632      	mov	r2, r6
 800b7a6:	464b      	mov	r3, r9
 800b7a8:	4630      	mov	r0, r6
 800b7aa:	4649      	mov	r1, r9
 800b7ac:	f7f4 ff24 	bl	80005f8 <__aeabi_dmul>
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	460b      	mov	r3, r1
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	4629      	mov	r1, r5
 800b7b8:	f7f4 fd66 	bl	8000288 <__aeabi_dsub>
 800b7bc:	4632      	mov	r2, r6
 800b7be:	4604      	mov	r4, r0
 800b7c0:	460d      	mov	r5, r1
 800b7c2:	464b      	mov	r3, r9
 800b7c4:	4640      	mov	r0, r8
 800b7c6:	4649      	mov	r1, r9
 800b7c8:	f7f4 fd60 	bl	800028c <__adddf3>
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	460b      	mov	r3, r1
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	4629      	mov	r1, r5
 800b7d4:	f7f5 f83a 	bl	800084c <__aeabi_ddiv>
 800b7d8:	4602      	mov	r2, r0
 800b7da:	460b      	mov	r3, r1
 800b7dc:	4650      	mov	r0, sl
 800b7de:	4659      	mov	r1, fp
 800b7e0:	f7f4 fd54 	bl	800028c <__adddf3>
 800b7e4:	4632      	mov	r2, r6
 800b7e6:	464b      	mov	r3, r9
 800b7e8:	f7f4 fd50 	bl	800028c <__adddf3>
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	460b      	mov	r3, r1
 800b7f0:	f7f4 fd4c 	bl	800028c <__adddf3>
 800b7f4:	e5fe      	b.n	800b3f4 <__ieee754_acos+0x44>
 800b7f6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800b858 <__ieee754_acos+0x4a8>
 800b7fa:	e5ed      	b.n	800b3d8 <__ieee754_acos+0x28>
 800b7fc:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800b860 <__ieee754_acos+0x4b0>
 800b800:	e5ea      	b.n	800b3d8 <__ieee754_acos+0x28>
 800b802:	bf00      	nop
 800b804:	f3af 8000 	nop.w
 800b808:	0dfdf709 	.word	0x0dfdf709
 800b80c:	3f023de1 	.word	0x3f023de1
 800b810:	7501b288 	.word	0x7501b288
 800b814:	3f49efe0 	.word	0x3f49efe0
 800b818:	b5688f3b 	.word	0xb5688f3b
 800b81c:	3fa48228 	.word	0x3fa48228
 800b820:	0e884455 	.word	0x0e884455
 800b824:	3fc9c155 	.word	0x3fc9c155
 800b828:	03eb6f7d 	.word	0x03eb6f7d
 800b82c:	3fd4d612 	.word	0x3fd4d612
 800b830:	55555555 	.word	0x55555555
 800b834:	3fc55555 	.word	0x3fc55555
 800b838:	b12e9282 	.word	0xb12e9282
 800b83c:	3fb3b8c5 	.word	0x3fb3b8c5
 800b840:	1b8d0159 	.word	0x1b8d0159
 800b844:	3fe6066c 	.word	0x3fe6066c
 800b848:	9c598ac8 	.word	0x9c598ac8
 800b84c:	40002ae5 	.word	0x40002ae5
 800b850:	1c8a2d4b 	.word	0x1c8a2d4b
 800b854:	40033a27 	.word	0x40033a27
	...
 800b860:	54442d18 	.word	0x54442d18
 800b864:	3ff921fb 	.word	0x3ff921fb
 800b868:	3ff00000 	.word	0x3ff00000
 800b86c:	3fe00000 	.word	0x3fe00000

0800b870 <__ieee754_pow>:
 800b870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b874:	ed2d 8b06 	vpush	{d8-d10}
 800b878:	b089      	sub	sp, #36	; 0x24
 800b87a:	ed8d 1b00 	vstr	d1, [sp]
 800b87e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b882:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b886:	ea58 0102 	orrs.w	r1, r8, r2
 800b88a:	ec57 6b10 	vmov	r6, r7, d0
 800b88e:	d115      	bne.n	800b8bc <__ieee754_pow+0x4c>
 800b890:	19b3      	adds	r3, r6, r6
 800b892:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b896:	4152      	adcs	r2, r2
 800b898:	4299      	cmp	r1, r3
 800b89a:	4b89      	ldr	r3, [pc, #548]	; (800bac0 <__ieee754_pow+0x250>)
 800b89c:	4193      	sbcs	r3, r2
 800b89e:	f080 84d2 	bcs.w	800c246 <__ieee754_pow+0x9d6>
 800b8a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8a6:	4630      	mov	r0, r6
 800b8a8:	4639      	mov	r1, r7
 800b8aa:	f7f4 fcef 	bl	800028c <__adddf3>
 800b8ae:	ec41 0b10 	vmov	d0, r0, r1
 800b8b2:	b009      	add	sp, #36	; 0x24
 800b8b4:	ecbd 8b06 	vpop	{d8-d10}
 800b8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8bc:	4b81      	ldr	r3, [pc, #516]	; (800bac4 <__ieee754_pow+0x254>)
 800b8be:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b8c2:	429c      	cmp	r4, r3
 800b8c4:	ee10 aa10 	vmov	sl, s0
 800b8c8:	463d      	mov	r5, r7
 800b8ca:	dc06      	bgt.n	800b8da <__ieee754_pow+0x6a>
 800b8cc:	d101      	bne.n	800b8d2 <__ieee754_pow+0x62>
 800b8ce:	2e00      	cmp	r6, #0
 800b8d0:	d1e7      	bne.n	800b8a2 <__ieee754_pow+0x32>
 800b8d2:	4598      	cmp	r8, r3
 800b8d4:	dc01      	bgt.n	800b8da <__ieee754_pow+0x6a>
 800b8d6:	d10f      	bne.n	800b8f8 <__ieee754_pow+0x88>
 800b8d8:	b172      	cbz	r2, 800b8f8 <__ieee754_pow+0x88>
 800b8da:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b8de:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b8e2:	ea55 050a 	orrs.w	r5, r5, sl
 800b8e6:	d1dc      	bne.n	800b8a2 <__ieee754_pow+0x32>
 800b8e8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b8ec:	18db      	adds	r3, r3, r3
 800b8ee:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b8f2:	4152      	adcs	r2, r2
 800b8f4:	429d      	cmp	r5, r3
 800b8f6:	e7d0      	b.n	800b89a <__ieee754_pow+0x2a>
 800b8f8:	2d00      	cmp	r5, #0
 800b8fa:	da3b      	bge.n	800b974 <__ieee754_pow+0x104>
 800b8fc:	4b72      	ldr	r3, [pc, #456]	; (800bac8 <__ieee754_pow+0x258>)
 800b8fe:	4598      	cmp	r8, r3
 800b900:	dc51      	bgt.n	800b9a6 <__ieee754_pow+0x136>
 800b902:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b906:	4598      	cmp	r8, r3
 800b908:	f340 84ac 	ble.w	800c264 <__ieee754_pow+0x9f4>
 800b90c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b910:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b914:	2b14      	cmp	r3, #20
 800b916:	dd0f      	ble.n	800b938 <__ieee754_pow+0xc8>
 800b918:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b91c:	fa22 f103 	lsr.w	r1, r2, r3
 800b920:	fa01 f303 	lsl.w	r3, r1, r3
 800b924:	4293      	cmp	r3, r2
 800b926:	f040 849d 	bne.w	800c264 <__ieee754_pow+0x9f4>
 800b92a:	f001 0101 	and.w	r1, r1, #1
 800b92e:	f1c1 0302 	rsb	r3, r1, #2
 800b932:	9304      	str	r3, [sp, #16]
 800b934:	b182      	cbz	r2, 800b958 <__ieee754_pow+0xe8>
 800b936:	e05f      	b.n	800b9f8 <__ieee754_pow+0x188>
 800b938:	2a00      	cmp	r2, #0
 800b93a:	d15b      	bne.n	800b9f4 <__ieee754_pow+0x184>
 800b93c:	f1c3 0314 	rsb	r3, r3, #20
 800b940:	fa48 f103 	asr.w	r1, r8, r3
 800b944:	fa01 f303 	lsl.w	r3, r1, r3
 800b948:	4543      	cmp	r3, r8
 800b94a:	f040 8488 	bne.w	800c25e <__ieee754_pow+0x9ee>
 800b94e:	f001 0101 	and.w	r1, r1, #1
 800b952:	f1c1 0302 	rsb	r3, r1, #2
 800b956:	9304      	str	r3, [sp, #16]
 800b958:	4b5c      	ldr	r3, [pc, #368]	; (800bacc <__ieee754_pow+0x25c>)
 800b95a:	4598      	cmp	r8, r3
 800b95c:	d132      	bne.n	800b9c4 <__ieee754_pow+0x154>
 800b95e:	f1b9 0f00 	cmp.w	r9, #0
 800b962:	f280 8478 	bge.w	800c256 <__ieee754_pow+0x9e6>
 800b966:	4959      	ldr	r1, [pc, #356]	; (800bacc <__ieee754_pow+0x25c>)
 800b968:	4632      	mov	r2, r6
 800b96a:	463b      	mov	r3, r7
 800b96c:	2000      	movs	r0, #0
 800b96e:	f7f4 ff6d 	bl	800084c <__aeabi_ddiv>
 800b972:	e79c      	b.n	800b8ae <__ieee754_pow+0x3e>
 800b974:	2300      	movs	r3, #0
 800b976:	9304      	str	r3, [sp, #16]
 800b978:	2a00      	cmp	r2, #0
 800b97a:	d13d      	bne.n	800b9f8 <__ieee754_pow+0x188>
 800b97c:	4b51      	ldr	r3, [pc, #324]	; (800bac4 <__ieee754_pow+0x254>)
 800b97e:	4598      	cmp	r8, r3
 800b980:	d1ea      	bne.n	800b958 <__ieee754_pow+0xe8>
 800b982:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b986:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b98a:	ea53 030a 	orrs.w	r3, r3, sl
 800b98e:	f000 845a 	beq.w	800c246 <__ieee754_pow+0x9d6>
 800b992:	4b4f      	ldr	r3, [pc, #316]	; (800bad0 <__ieee754_pow+0x260>)
 800b994:	429c      	cmp	r4, r3
 800b996:	dd08      	ble.n	800b9aa <__ieee754_pow+0x13a>
 800b998:	f1b9 0f00 	cmp.w	r9, #0
 800b99c:	f2c0 8457 	blt.w	800c24e <__ieee754_pow+0x9de>
 800b9a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9a4:	e783      	b.n	800b8ae <__ieee754_pow+0x3e>
 800b9a6:	2302      	movs	r3, #2
 800b9a8:	e7e5      	b.n	800b976 <__ieee754_pow+0x106>
 800b9aa:	f1b9 0f00 	cmp.w	r9, #0
 800b9ae:	f04f 0000 	mov.w	r0, #0
 800b9b2:	f04f 0100 	mov.w	r1, #0
 800b9b6:	f6bf af7a 	bge.w	800b8ae <__ieee754_pow+0x3e>
 800b9ba:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b9be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b9c2:	e774      	b.n	800b8ae <__ieee754_pow+0x3e>
 800b9c4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b9c8:	d106      	bne.n	800b9d8 <__ieee754_pow+0x168>
 800b9ca:	4632      	mov	r2, r6
 800b9cc:	463b      	mov	r3, r7
 800b9ce:	4630      	mov	r0, r6
 800b9d0:	4639      	mov	r1, r7
 800b9d2:	f7f4 fe11 	bl	80005f8 <__aeabi_dmul>
 800b9d6:	e76a      	b.n	800b8ae <__ieee754_pow+0x3e>
 800b9d8:	4b3e      	ldr	r3, [pc, #248]	; (800bad4 <__ieee754_pow+0x264>)
 800b9da:	4599      	cmp	r9, r3
 800b9dc:	d10c      	bne.n	800b9f8 <__ieee754_pow+0x188>
 800b9de:	2d00      	cmp	r5, #0
 800b9e0:	db0a      	blt.n	800b9f8 <__ieee754_pow+0x188>
 800b9e2:	ec47 6b10 	vmov	d0, r6, r7
 800b9e6:	b009      	add	sp, #36	; 0x24
 800b9e8:	ecbd 8b06 	vpop	{d8-d10}
 800b9ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f0:	f000 be7a 	b.w	800c6e8 <__ieee754_sqrt>
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	9304      	str	r3, [sp, #16]
 800b9f8:	ec47 6b10 	vmov	d0, r6, r7
 800b9fc:	f7ff fb70 	bl	800b0e0 <fabs>
 800ba00:	ec51 0b10 	vmov	r0, r1, d0
 800ba04:	f1ba 0f00 	cmp.w	sl, #0
 800ba08:	d129      	bne.n	800ba5e <__ieee754_pow+0x1ee>
 800ba0a:	b124      	cbz	r4, 800ba16 <__ieee754_pow+0x1a6>
 800ba0c:	4b2f      	ldr	r3, [pc, #188]	; (800bacc <__ieee754_pow+0x25c>)
 800ba0e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d123      	bne.n	800ba5e <__ieee754_pow+0x1ee>
 800ba16:	f1b9 0f00 	cmp.w	r9, #0
 800ba1a:	da05      	bge.n	800ba28 <__ieee754_pow+0x1b8>
 800ba1c:	4602      	mov	r2, r0
 800ba1e:	460b      	mov	r3, r1
 800ba20:	2000      	movs	r0, #0
 800ba22:	492a      	ldr	r1, [pc, #168]	; (800bacc <__ieee754_pow+0x25c>)
 800ba24:	f7f4 ff12 	bl	800084c <__aeabi_ddiv>
 800ba28:	2d00      	cmp	r5, #0
 800ba2a:	f6bf af40 	bge.w	800b8ae <__ieee754_pow+0x3e>
 800ba2e:	9b04      	ldr	r3, [sp, #16]
 800ba30:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ba34:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ba38:	4323      	orrs	r3, r4
 800ba3a:	d108      	bne.n	800ba4e <__ieee754_pow+0x1de>
 800ba3c:	4602      	mov	r2, r0
 800ba3e:	460b      	mov	r3, r1
 800ba40:	4610      	mov	r0, r2
 800ba42:	4619      	mov	r1, r3
 800ba44:	f7f4 fc20 	bl	8000288 <__aeabi_dsub>
 800ba48:	4602      	mov	r2, r0
 800ba4a:	460b      	mov	r3, r1
 800ba4c:	e78f      	b.n	800b96e <__ieee754_pow+0xfe>
 800ba4e:	9b04      	ldr	r3, [sp, #16]
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	f47f af2c 	bne.w	800b8ae <__ieee754_pow+0x3e>
 800ba56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	e727      	b.n	800b8ae <__ieee754_pow+0x3e>
 800ba5e:	0feb      	lsrs	r3, r5, #31
 800ba60:	3b01      	subs	r3, #1
 800ba62:	9306      	str	r3, [sp, #24]
 800ba64:	9a06      	ldr	r2, [sp, #24]
 800ba66:	9b04      	ldr	r3, [sp, #16]
 800ba68:	4313      	orrs	r3, r2
 800ba6a:	d102      	bne.n	800ba72 <__ieee754_pow+0x202>
 800ba6c:	4632      	mov	r2, r6
 800ba6e:	463b      	mov	r3, r7
 800ba70:	e7e6      	b.n	800ba40 <__ieee754_pow+0x1d0>
 800ba72:	4b19      	ldr	r3, [pc, #100]	; (800bad8 <__ieee754_pow+0x268>)
 800ba74:	4598      	cmp	r8, r3
 800ba76:	f340 80fb 	ble.w	800bc70 <__ieee754_pow+0x400>
 800ba7a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ba7e:	4598      	cmp	r8, r3
 800ba80:	4b13      	ldr	r3, [pc, #76]	; (800bad0 <__ieee754_pow+0x260>)
 800ba82:	dd0c      	ble.n	800ba9e <__ieee754_pow+0x22e>
 800ba84:	429c      	cmp	r4, r3
 800ba86:	dc0f      	bgt.n	800baa8 <__ieee754_pow+0x238>
 800ba88:	f1b9 0f00 	cmp.w	r9, #0
 800ba8c:	da0f      	bge.n	800baae <__ieee754_pow+0x23e>
 800ba8e:	2000      	movs	r0, #0
 800ba90:	b009      	add	sp, #36	; 0x24
 800ba92:	ecbd 8b06 	vpop	{d8-d10}
 800ba96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba9a:	f001 bde2 	b.w	800d662 <__math_oflow>
 800ba9e:	429c      	cmp	r4, r3
 800baa0:	dbf2      	blt.n	800ba88 <__ieee754_pow+0x218>
 800baa2:	4b0a      	ldr	r3, [pc, #40]	; (800bacc <__ieee754_pow+0x25c>)
 800baa4:	429c      	cmp	r4, r3
 800baa6:	dd19      	ble.n	800badc <__ieee754_pow+0x26c>
 800baa8:	f1b9 0f00 	cmp.w	r9, #0
 800baac:	dcef      	bgt.n	800ba8e <__ieee754_pow+0x21e>
 800baae:	2000      	movs	r0, #0
 800bab0:	b009      	add	sp, #36	; 0x24
 800bab2:	ecbd 8b06 	vpop	{d8-d10}
 800bab6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baba:	f001 bdc9 	b.w	800d650 <__math_uflow>
 800babe:	bf00      	nop
 800bac0:	fff00000 	.word	0xfff00000
 800bac4:	7ff00000 	.word	0x7ff00000
 800bac8:	433fffff 	.word	0x433fffff
 800bacc:	3ff00000 	.word	0x3ff00000
 800bad0:	3fefffff 	.word	0x3fefffff
 800bad4:	3fe00000 	.word	0x3fe00000
 800bad8:	41e00000 	.word	0x41e00000
 800badc:	4b60      	ldr	r3, [pc, #384]	; (800bc60 <__ieee754_pow+0x3f0>)
 800bade:	2200      	movs	r2, #0
 800bae0:	f7f4 fbd2 	bl	8000288 <__aeabi_dsub>
 800bae4:	a354      	add	r3, pc, #336	; (adr r3, 800bc38 <__ieee754_pow+0x3c8>)
 800bae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baea:	4604      	mov	r4, r0
 800baec:	460d      	mov	r5, r1
 800baee:	f7f4 fd83 	bl	80005f8 <__aeabi_dmul>
 800baf2:	a353      	add	r3, pc, #332	; (adr r3, 800bc40 <__ieee754_pow+0x3d0>)
 800baf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf8:	4606      	mov	r6, r0
 800bafa:	460f      	mov	r7, r1
 800bafc:	4620      	mov	r0, r4
 800bafe:	4629      	mov	r1, r5
 800bb00:	f7f4 fd7a 	bl	80005f8 <__aeabi_dmul>
 800bb04:	4b57      	ldr	r3, [pc, #348]	; (800bc64 <__ieee754_pow+0x3f4>)
 800bb06:	4682      	mov	sl, r0
 800bb08:	468b      	mov	fp, r1
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	4620      	mov	r0, r4
 800bb0e:	4629      	mov	r1, r5
 800bb10:	f7f4 fd72 	bl	80005f8 <__aeabi_dmul>
 800bb14:	4602      	mov	r2, r0
 800bb16:	460b      	mov	r3, r1
 800bb18:	a14b      	add	r1, pc, #300	; (adr r1, 800bc48 <__ieee754_pow+0x3d8>)
 800bb1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb1e:	f7f4 fbb3 	bl	8000288 <__aeabi_dsub>
 800bb22:	4622      	mov	r2, r4
 800bb24:	462b      	mov	r3, r5
 800bb26:	f7f4 fd67 	bl	80005f8 <__aeabi_dmul>
 800bb2a:	4602      	mov	r2, r0
 800bb2c:	460b      	mov	r3, r1
 800bb2e:	2000      	movs	r0, #0
 800bb30:	494d      	ldr	r1, [pc, #308]	; (800bc68 <__ieee754_pow+0x3f8>)
 800bb32:	f7f4 fba9 	bl	8000288 <__aeabi_dsub>
 800bb36:	4622      	mov	r2, r4
 800bb38:	4680      	mov	r8, r0
 800bb3a:	4689      	mov	r9, r1
 800bb3c:	462b      	mov	r3, r5
 800bb3e:	4620      	mov	r0, r4
 800bb40:	4629      	mov	r1, r5
 800bb42:	f7f4 fd59 	bl	80005f8 <__aeabi_dmul>
 800bb46:	4602      	mov	r2, r0
 800bb48:	460b      	mov	r3, r1
 800bb4a:	4640      	mov	r0, r8
 800bb4c:	4649      	mov	r1, r9
 800bb4e:	f7f4 fd53 	bl	80005f8 <__aeabi_dmul>
 800bb52:	a33f      	add	r3, pc, #252	; (adr r3, 800bc50 <__ieee754_pow+0x3e0>)
 800bb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb58:	f7f4 fd4e 	bl	80005f8 <__aeabi_dmul>
 800bb5c:	4602      	mov	r2, r0
 800bb5e:	460b      	mov	r3, r1
 800bb60:	4650      	mov	r0, sl
 800bb62:	4659      	mov	r1, fp
 800bb64:	f7f4 fb90 	bl	8000288 <__aeabi_dsub>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	460b      	mov	r3, r1
 800bb6c:	4680      	mov	r8, r0
 800bb6e:	4689      	mov	r9, r1
 800bb70:	4630      	mov	r0, r6
 800bb72:	4639      	mov	r1, r7
 800bb74:	f7f4 fb8a 	bl	800028c <__adddf3>
 800bb78:	2000      	movs	r0, #0
 800bb7a:	4632      	mov	r2, r6
 800bb7c:	463b      	mov	r3, r7
 800bb7e:	4604      	mov	r4, r0
 800bb80:	460d      	mov	r5, r1
 800bb82:	f7f4 fb81 	bl	8000288 <__aeabi_dsub>
 800bb86:	4602      	mov	r2, r0
 800bb88:	460b      	mov	r3, r1
 800bb8a:	4640      	mov	r0, r8
 800bb8c:	4649      	mov	r1, r9
 800bb8e:	f7f4 fb7b 	bl	8000288 <__aeabi_dsub>
 800bb92:	9b04      	ldr	r3, [sp, #16]
 800bb94:	9a06      	ldr	r2, [sp, #24]
 800bb96:	3b01      	subs	r3, #1
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	4682      	mov	sl, r0
 800bb9c:	468b      	mov	fp, r1
 800bb9e:	f040 81e7 	bne.w	800bf70 <__ieee754_pow+0x700>
 800bba2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800bc58 <__ieee754_pow+0x3e8>
 800bba6:	eeb0 8a47 	vmov.f32	s16, s14
 800bbaa:	eef0 8a67 	vmov.f32	s17, s15
 800bbae:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bbb2:	2600      	movs	r6, #0
 800bbb4:	4632      	mov	r2, r6
 800bbb6:	463b      	mov	r3, r7
 800bbb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bbbc:	f7f4 fb64 	bl	8000288 <__aeabi_dsub>
 800bbc0:	4622      	mov	r2, r4
 800bbc2:	462b      	mov	r3, r5
 800bbc4:	f7f4 fd18 	bl	80005f8 <__aeabi_dmul>
 800bbc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbcc:	4680      	mov	r8, r0
 800bbce:	4689      	mov	r9, r1
 800bbd0:	4650      	mov	r0, sl
 800bbd2:	4659      	mov	r1, fp
 800bbd4:	f7f4 fd10 	bl	80005f8 <__aeabi_dmul>
 800bbd8:	4602      	mov	r2, r0
 800bbda:	460b      	mov	r3, r1
 800bbdc:	4640      	mov	r0, r8
 800bbde:	4649      	mov	r1, r9
 800bbe0:	f7f4 fb54 	bl	800028c <__adddf3>
 800bbe4:	4632      	mov	r2, r6
 800bbe6:	463b      	mov	r3, r7
 800bbe8:	4680      	mov	r8, r0
 800bbea:	4689      	mov	r9, r1
 800bbec:	4620      	mov	r0, r4
 800bbee:	4629      	mov	r1, r5
 800bbf0:	f7f4 fd02 	bl	80005f8 <__aeabi_dmul>
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	4604      	mov	r4, r0
 800bbf8:	460d      	mov	r5, r1
 800bbfa:	4602      	mov	r2, r0
 800bbfc:	4649      	mov	r1, r9
 800bbfe:	4640      	mov	r0, r8
 800bc00:	f7f4 fb44 	bl	800028c <__adddf3>
 800bc04:	4b19      	ldr	r3, [pc, #100]	; (800bc6c <__ieee754_pow+0x3fc>)
 800bc06:	4299      	cmp	r1, r3
 800bc08:	ec45 4b19 	vmov	d9, r4, r5
 800bc0c:	4606      	mov	r6, r0
 800bc0e:	460f      	mov	r7, r1
 800bc10:	468b      	mov	fp, r1
 800bc12:	f340 82f1 	ble.w	800c1f8 <__ieee754_pow+0x988>
 800bc16:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bc1a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bc1e:	4303      	orrs	r3, r0
 800bc20:	f000 81e4 	beq.w	800bfec <__ieee754_pow+0x77c>
 800bc24:	ec51 0b18 	vmov	r0, r1, d8
 800bc28:	2200      	movs	r2, #0
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	f7f4 ff56 	bl	8000adc <__aeabi_dcmplt>
 800bc30:	3800      	subs	r0, #0
 800bc32:	bf18      	it	ne
 800bc34:	2001      	movne	r0, #1
 800bc36:	e72b      	b.n	800ba90 <__ieee754_pow+0x220>
 800bc38:	60000000 	.word	0x60000000
 800bc3c:	3ff71547 	.word	0x3ff71547
 800bc40:	f85ddf44 	.word	0xf85ddf44
 800bc44:	3e54ae0b 	.word	0x3e54ae0b
 800bc48:	55555555 	.word	0x55555555
 800bc4c:	3fd55555 	.word	0x3fd55555
 800bc50:	652b82fe 	.word	0x652b82fe
 800bc54:	3ff71547 	.word	0x3ff71547
 800bc58:	00000000 	.word	0x00000000
 800bc5c:	bff00000 	.word	0xbff00000
 800bc60:	3ff00000 	.word	0x3ff00000
 800bc64:	3fd00000 	.word	0x3fd00000
 800bc68:	3fe00000 	.word	0x3fe00000
 800bc6c:	408fffff 	.word	0x408fffff
 800bc70:	4bd5      	ldr	r3, [pc, #852]	; (800bfc8 <__ieee754_pow+0x758>)
 800bc72:	402b      	ands	r3, r5
 800bc74:	2200      	movs	r2, #0
 800bc76:	b92b      	cbnz	r3, 800bc84 <__ieee754_pow+0x414>
 800bc78:	4bd4      	ldr	r3, [pc, #848]	; (800bfcc <__ieee754_pow+0x75c>)
 800bc7a:	f7f4 fcbd 	bl	80005f8 <__aeabi_dmul>
 800bc7e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bc82:	460c      	mov	r4, r1
 800bc84:	1523      	asrs	r3, r4, #20
 800bc86:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bc8a:	4413      	add	r3, r2
 800bc8c:	9305      	str	r3, [sp, #20]
 800bc8e:	4bd0      	ldr	r3, [pc, #832]	; (800bfd0 <__ieee754_pow+0x760>)
 800bc90:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bc94:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bc98:	429c      	cmp	r4, r3
 800bc9a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bc9e:	dd08      	ble.n	800bcb2 <__ieee754_pow+0x442>
 800bca0:	4bcc      	ldr	r3, [pc, #816]	; (800bfd4 <__ieee754_pow+0x764>)
 800bca2:	429c      	cmp	r4, r3
 800bca4:	f340 8162 	ble.w	800bf6c <__ieee754_pow+0x6fc>
 800bca8:	9b05      	ldr	r3, [sp, #20]
 800bcaa:	3301      	adds	r3, #1
 800bcac:	9305      	str	r3, [sp, #20]
 800bcae:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bcb2:	2400      	movs	r4, #0
 800bcb4:	00e3      	lsls	r3, r4, #3
 800bcb6:	9307      	str	r3, [sp, #28]
 800bcb8:	4bc7      	ldr	r3, [pc, #796]	; (800bfd8 <__ieee754_pow+0x768>)
 800bcba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bcbe:	ed93 7b00 	vldr	d7, [r3]
 800bcc2:	4629      	mov	r1, r5
 800bcc4:	ec53 2b17 	vmov	r2, r3, d7
 800bcc8:	eeb0 9a47 	vmov.f32	s18, s14
 800bccc:	eef0 9a67 	vmov.f32	s19, s15
 800bcd0:	4682      	mov	sl, r0
 800bcd2:	f7f4 fad9 	bl	8000288 <__aeabi_dsub>
 800bcd6:	4652      	mov	r2, sl
 800bcd8:	4606      	mov	r6, r0
 800bcda:	460f      	mov	r7, r1
 800bcdc:	462b      	mov	r3, r5
 800bcde:	ec51 0b19 	vmov	r0, r1, d9
 800bce2:	f7f4 fad3 	bl	800028c <__adddf3>
 800bce6:	4602      	mov	r2, r0
 800bce8:	460b      	mov	r3, r1
 800bcea:	2000      	movs	r0, #0
 800bcec:	49bb      	ldr	r1, [pc, #748]	; (800bfdc <__ieee754_pow+0x76c>)
 800bcee:	f7f4 fdad 	bl	800084c <__aeabi_ddiv>
 800bcf2:	ec41 0b1a 	vmov	d10, r0, r1
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	460b      	mov	r3, r1
 800bcfa:	4630      	mov	r0, r6
 800bcfc:	4639      	mov	r1, r7
 800bcfe:	f7f4 fc7b 	bl	80005f8 <__aeabi_dmul>
 800bd02:	2300      	movs	r3, #0
 800bd04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd08:	9302      	str	r3, [sp, #8]
 800bd0a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bd0e:	46ab      	mov	fp, r5
 800bd10:	106d      	asrs	r5, r5, #1
 800bd12:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bd16:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bd1a:	ec41 0b18 	vmov	d8, r0, r1
 800bd1e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800bd22:	2200      	movs	r2, #0
 800bd24:	4640      	mov	r0, r8
 800bd26:	4649      	mov	r1, r9
 800bd28:	4614      	mov	r4, r2
 800bd2a:	461d      	mov	r5, r3
 800bd2c:	f7f4 fc64 	bl	80005f8 <__aeabi_dmul>
 800bd30:	4602      	mov	r2, r0
 800bd32:	460b      	mov	r3, r1
 800bd34:	4630      	mov	r0, r6
 800bd36:	4639      	mov	r1, r7
 800bd38:	f7f4 faa6 	bl	8000288 <__aeabi_dsub>
 800bd3c:	ec53 2b19 	vmov	r2, r3, d9
 800bd40:	4606      	mov	r6, r0
 800bd42:	460f      	mov	r7, r1
 800bd44:	4620      	mov	r0, r4
 800bd46:	4629      	mov	r1, r5
 800bd48:	f7f4 fa9e 	bl	8000288 <__aeabi_dsub>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	460b      	mov	r3, r1
 800bd50:	4650      	mov	r0, sl
 800bd52:	4659      	mov	r1, fp
 800bd54:	f7f4 fa98 	bl	8000288 <__aeabi_dsub>
 800bd58:	4642      	mov	r2, r8
 800bd5a:	464b      	mov	r3, r9
 800bd5c:	f7f4 fc4c 	bl	80005f8 <__aeabi_dmul>
 800bd60:	4602      	mov	r2, r0
 800bd62:	460b      	mov	r3, r1
 800bd64:	4630      	mov	r0, r6
 800bd66:	4639      	mov	r1, r7
 800bd68:	f7f4 fa8e 	bl	8000288 <__aeabi_dsub>
 800bd6c:	ec53 2b1a 	vmov	r2, r3, d10
 800bd70:	f7f4 fc42 	bl	80005f8 <__aeabi_dmul>
 800bd74:	ec53 2b18 	vmov	r2, r3, d8
 800bd78:	ec41 0b19 	vmov	d9, r0, r1
 800bd7c:	ec51 0b18 	vmov	r0, r1, d8
 800bd80:	f7f4 fc3a 	bl	80005f8 <__aeabi_dmul>
 800bd84:	a37c      	add	r3, pc, #496	; (adr r3, 800bf78 <__ieee754_pow+0x708>)
 800bd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8a:	4604      	mov	r4, r0
 800bd8c:	460d      	mov	r5, r1
 800bd8e:	f7f4 fc33 	bl	80005f8 <__aeabi_dmul>
 800bd92:	a37b      	add	r3, pc, #492	; (adr r3, 800bf80 <__ieee754_pow+0x710>)
 800bd94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd98:	f7f4 fa78 	bl	800028c <__adddf3>
 800bd9c:	4622      	mov	r2, r4
 800bd9e:	462b      	mov	r3, r5
 800bda0:	f7f4 fc2a 	bl	80005f8 <__aeabi_dmul>
 800bda4:	a378      	add	r3, pc, #480	; (adr r3, 800bf88 <__ieee754_pow+0x718>)
 800bda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdaa:	f7f4 fa6f 	bl	800028c <__adddf3>
 800bdae:	4622      	mov	r2, r4
 800bdb0:	462b      	mov	r3, r5
 800bdb2:	f7f4 fc21 	bl	80005f8 <__aeabi_dmul>
 800bdb6:	a376      	add	r3, pc, #472	; (adr r3, 800bf90 <__ieee754_pow+0x720>)
 800bdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdbc:	f7f4 fa66 	bl	800028c <__adddf3>
 800bdc0:	4622      	mov	r2, r4
 800bdc2:	462b      	mov	r3, r5
 800bdc4:	f7f4 fc18 	bl	80005f8 <__aeabi_dmul>
 800bdc8:	a373      	add	r3, pc, #460	; (adr r3, 800bf98 <__ieee754_pow+0x728>)
 800bdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdce:	f7f4 fa5d 	bl	800028c <__adddf3>
 800bdd2:	4622      	mov	r2, r4
 800bdd4:	462b      	mov	r3, r5
 800bdd6:	f7f4 fc0f 	bl	80005f8 <__aeabi_dmul>
 800bdda:	a371      	add	r3, pc, #452	; (adr r3, 800bfa0 <__ieee754_pow+0x730>)
 800bddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde0:	f7f4 fa54 	bl	800028c <__adddf3>
 800bde4:	4622      	mov	r2, r4
 800bde6:	4606      	mov	r6, r0
 800bde8:	460f      	mov	r7, r1
 800bdea:	462b      	mov	r3, r5
 800bdec:	4620      	mov	r0, r4
 800bdee:	4629      	mov	r1, r5
 800bdf0:	f7f4 fc02 	bl	80005f8 <__aeabi_dmul>
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	460b      	mov	r3, r1
 800bdf8:	4630      	mov	r0, r6
 800bdfa:	4639      	mov	r1, r7
 800bdfc:	f7f4 fbfc 	bl	80005f8 <__aeabi_dmul>
 800be00:	4642      	mov	r2, r8
 800be02:	4604      	mov	r4, r0
 800be04:	460d      	mov	r5, r1
 800be06:	464b      	mov	r3, r9
 800be08:	ec51 0b18 	vmov	r0, r1, d8
 800be0c:	f7f4 fa3e 	bl	800028c <__adddf3>
 800be10:	ec53 2b19 	vmov	r2, r3, d9
 800be14:	f7f4 fbf0 	bl	80005f8 <__aeabi_dmul>
 800be18:	4622      	mov	r2, r4
 800be1a:	462b      	mov	r3, r5
 800be1c:	f7f4 fa36 	bl	800028c <__adddf3>
 800be20:	4642      	mov	r2, r8
 800be22:	4682      	mov	sl, r0
 800be24:	468b      	mov	fp, r1
 800be26:	464b      	mov	r3, r9
 800be28:	4640      	mov	r0, r8
 800be2a:	4649      	mov	r1, r9
 800be2c:	f7f4 fbe4 	bl	80005f8 <__aeabi_dmul>
 800be30:	4b6b      	ldr	r3, [pc, #428]	; (800bfe0 <__ieee754_pow+0x770>)
 800be32:	2200      	movs	r2, #0
 800be34:	4606      	mov	r6, r0
 800be36:	460f      	mov	r7, r1
 800be38:	f7f4 fa28 	bl	800028c <__adddf3>
 800be3c:	4652      	mov	r2, sl
 800be3e:	465b      	mov	r3, fp
 800be40:	f7f4 fa24 	bl	800028c <__adddf3>
 800be44:	2000      	movs	r0, #0
 800be46:	4604      	mov	r4, r0
 800be48:	460d      	mov	r5, r1
 800be4a:	4602      	mov	r2, r0
 800be4c:	460b      	mov	r3, r1
 800be4e:	4640      	mov	r0, r8
 800be50:	4649      	mov	r1, r9
 800be52:	f7f4 fbd1 	bl	80005f8 <__aeabi_dmul>
 800be56:	4b62      	ldr	r3, [pc, #392]	; (800bfe0 <__ieee754_pow+0x770>)
 800be58:	4680      	mov	r8, r0
 800be5a:	4689      	mov	r9, r1
 800be5c:	2200      	movs	r2, #0
 800be5e:	4620      	mov	r0, r4
 800be60:	4629      	mov	r1, r5
 800be62:	f7f4 fa11 	bl	8000288 <__aeabi_dsub>
 800be66:	4632      	mov	r2, r6
 800be68:	463b      	mov	r3, r7
 800be6a:	f7f4 fa0d 	bl	8000288 <__aeabi_dsub>
 800be6e:	4602      	mov	r2, r0
 800be70:	460b      	mov	r3, r1
 800be72:	4650      	mov	r0, sl
 800be74:	4659      	mov	r1, fp
 800be76:	f7f4 fa07 	bl	8000288 <__aeabi_dsub>
 800be7a:	ec53 2b18 	vmov	r2, r3, d8
 800be7e:	f7f4 fbbb 	bl	80005f8 <__aeabi_dmul>
 800be82:	4622      	mov	r2, r4
 800be84:	4606      	mov	r6, r0
 800be86:	460f      	mov	r7, r1
 800be88:	462b      	mov	r3, r5
 800be8a:	ec51 0b19 	vmov	r0, r1, d9
 800be8e:	f7f4 fbb3 	bl	80005f8 <__aeabi_dmul>
 800be92:	4602      	mov	r2, r0
 800be94:	460b      	mov	r3, r1
 800be96:	4630      	mov	r0, r6
 800be98:	4639      	mov	r1, r7
 800be9a:	f7f4 f9f7 	bl	800028c <__adddf3>
 800be9e:	4606      	mov	r6, r0
 800bea0:	460f      	mov	r7, r1
 800bea2:	4602      	mov	r2, r0
 800bea4:	460b      	mov	r3, r1
 800bea6:	4640      	mov	r0, r8
 800bea8:	4649      	mov	r1, r9
 800beaa:	f7f4 f9ef 	bl	800028c <__adddf3>
 800beae:	a33e      	add	r3, pc, #248	; (adr r3, 800bfa8 <__ieee754_pow+0x738>)
 800beb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb4:	2000      	movs	r0, #0
 800beb6:	4604      	mov	r4, r0
 800beb8:	460d      	mov	r5, r1
 800beba:	f7f4 fb9d 	bl	80005f8 <__aeabi_dmul>
 800bebe:	4642      	mov	r2, r8
 800bec0:	ec41 0b18 	vmov	d8, r0, r1
 800bec4:	464b      	mov	r3, r9
 800bec6:	4620      	mov	r0, r4
 800bec8:	4629      	mov	r1, r5
 800beca:	f7f4 f9dd 	bl	8000288 <__aeabi_dsub>
 800bece:	4602      	mov	r2, r0
 800bed0:	460b      	mov	r3, r1
 800bed2:	4630      	mov	r0, r6
 800bed4:	4639      	mov	r1, r7
 800bed6:	f7f4 f9d7 	bl	8000288 <__aeabi_dsub>
 800beda:	a335      	add	r3, pc, #212	; (adr r3, 800bfb0 <__ieee754_pow+0x740>)
 800bedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee0:	f7f4 fb8a 	bl	80005f8 <__aeabi_dmul>
 800bee4:	a334      	add	r3, pc, #208	; (adr r3, 800bfb8 <__ieee754_pow+0x748>)
 800bee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beea:	4606      	mov	r6, r0
 800beec:	460f      	mov	r7, r1
 800beee:	4620      	mov	r0, r4
 800bef0:	4629      	mov	r1, r5
 800bef2:	f7f4 fb81 	bl	80005f8 <__aeabi_dmul>
 800bef6:	4602      	mov	r2, r0
 800bef8:	460b      	mov	r3, r1
 800befa:	4630      	mov	r0, r6
 800befc:	4639      	mov	r1, r7
 800befe:	f7f4 f9c5 	bl	800028c <__adddf3>
 800bf02:	9a07      	ldr	r2, [sp, #28]
 800bf04:	4b37      	ldr	r3, [pc, #220]	; (800bfe4 <__ieee754_pow+0x774>)
 800bf06:	4413      	add	r3, r2
 800bf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0c:	f7f4 f9be 	bl	800028c <__adddf3>
 800bf10:	4682      	mov	sl, r0
 800bf12:	9805      	ldr	r0, [sp, #20]
 800bf14:	468b      	mov	fp, r1
 800bf16:	f7f4 fb05 	bl	8000524 <__aeabi_i2d>
 800bf1a:	9a07      	ldr	r2, [sp, #28]
 800bf1c:	4b32      	ldr	r3, [pc, #200]	; (800bfe8 <__ieee754_pow+0x778>)
 800bf1e:	4413      	add	r3, r2
 800bf20:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bf24:	4606      	mov	r6, r0
 800bf26:	460f      	mov	r7, r1
 800bf28:	4652      	mov	r2, sl
 800bf2a:	465b      	mov	r3, fp
 800bf2c:	ec51 0b18 	vmov	r0, r1, d8
 800bf30:	f7f4 f9ac 	bl	800028c <__adddf3>
 800bf34:	4642      	mov	r2, r8
 800bf36:	464b      	mov	r3, r9
 800bf38:	f7f4 f9a8 	bl	800028c <__adddf3>
 800bf3c:	4632      	mov	r2, r6
 800bf3e:	463b      	mov	r3, r7
 800bf40:	f7f4 f9a4 	bl	800028c <__adddf3>
 800bf44:	2000      	movs	r0, #0
 800bf46:	4632      	mov	r2, r6
 800bf48:	463b      	mov	r3, r7
 800bf4a:	4604      	mov	r4, r0
 800bf4c:	460d      	mov	r5, r1
 800bf4e:	f7f4 f99b 	bl	8000288 <__aeabi_dsub>
 800bf52:	4642      	mov	r2, r8
 800bf54:	464b      	mov	r3, r9
 800bf56:	f7f4 f997 	bl	8000288 <__aeabi_dsub>
 800bf5a:	ec53 2b18 	vmov	r2, r3, d8
 800bf5e:	f7f4 f993 	bl	8000288 <__aeabi_dsub>
 800bf62:	4602      	mov	r2, r0
 800bf64:	460b      	mov	r3, r1
 800bf66:	4650      	mov	r0, sl
 800bf68:	4659      	mov	r1, fp
 800bf6a:	e610      	b.n	800bb8e <__ieee754_pow+0x31e>
 800bf6c:	2401      	movs	r4, #1
 800bf6e:	e6a1      	b.n	800bcb4 <__ieee754_pow+0x444>
 800bf70:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800bfc0 <__ieee754_pow+0x750>
 800bf74:	e617      	b.n	800bba6 <__ieee754_pow+0x336>
 800bf76:	bf00      	nop
 800bf78:	4a454eef 	.word	0x4a454eef
 800bf7c:	3fca7e28 	.word	0x3fca7e28
 800bf80:	93c9db65 	.word	0x93c9db65
 800bf84:	3fcd864a 	.word	0x3fcd864a
 800bf88:	a91d4101 	.word	0xa91d4101
 800bf8c:	3fd17460 	.word	0x3fd17460
 800bf90:	518f264d 	.word	0x518f264d
 800bf94:	3fd55555 	.word	0x3fd55555
 800bf98:	db6fabff 	.word	0xdb6fabff
 800bf9c:	3fdb6db6 	.word	0x3fdb6db6
 800bfa0:	33333303 	.word	0x33333303
 800bfa4:	3fe33333 	.word	0x3fe33333
 800bfa8:	e0000000 	.word	0xe0000000
 800bfac:	3feec709 	.word	0x3feec709
 800bfb0:	dc3a03fd 	.word	0xdc3a03fd
 800bfb4:	3feec709 	.word	0x3feec709
 800bfb8:	145b01f5 	.word	0x145b01f5
 800bfbc:	be3e2fe0 	.word	0xbe3e2fe0
 800bfc0:	00000000 	.word	0x00000000
 800bfc4:	3ff00000 	.word	0x3ff00000
 800bfc8:	7ff00000 	.word	0x7ff00000
 800bfcc:	43400000 	.word	0x43400000
 800bfd0:	0003988e 	.word	0x0003988e
 800bfd4:	000bb679 	.word	0x000bb679
 800bfd8:	0800de30 	.word	0x0800de30
 800bfdc:	3ff00000 	.word	0x3ff00000
 800bfe0:	40080000 	.word	0x40080000
 800bfe4:	0800de50 	.word	0x0800de50
 800bfe8:	0800de40 	.word	0x0800de40
 800bfec:	a3b5      	add	r3, pc, #724	; (adr r3, 800c2c4 <__ieee754_pow+0xa54>)
 800bfee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff2:	4640      	mov	r0, r8
 800bff4:	4649      	mov	r1, r9
 800bff6:	f7f4 f949 	bl	800028c <__adddf3>
 800bffa:	4622      	mov	r2, r4
 800bffc:	ec41 0b1a 	vmov	d10, r0, r1
 800c000:	462b      	mov	r3, r5
 800c002:	4630      	mov	r0, r6
 800c004:	4639      	mov	r1, r7
 800c006:	f7f4 f93f 	bl	8000288 <__aeabi_dsub>
 800c00a:	4602      	mov	r2, r0
 800c00c:	460b      	mov	r3, r1
 800c00e:	ec51 0b1a 	vmov	r0, r1, d10
 800c012:	f7f4 fd81 	bl	8000b18 <__aeabi_dcmpgt>
 800c016:	2800      	cmp	r0, #0
 800c018:	f47f ae04 	bne.w	800bc24 <__ieee754_pow+0x3b4>
 800c01c:	4aa4      	ldr	r2, [pc, #656]	; (800c2b0 <__ieee754_pow+0xa40>)
 800c01e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c022:	4293      	cmp	r3, r2
 800c024:	f340 8108 	ble.w	800c238 <__ieee754_pow+0x9c8>
 800c028:	151b      	asrs	r3, r3, #20
 800c02a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c02e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c032:	fa4a f303 	asr.w	r3, sl, r3
 800c036:	445b      	add	r3, fp
 800c038:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c03c:	4e9d      	ldr	r6, [pc, #628]	; (800c2b4 <__ieee754_pow+0xa44>)
 800c03e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c042:	4116      	asrs	r6, r2
 800c044:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c048:	2000      	movs	r0, #0
 800c04a:	ea23 0106 	bic.w	r1, r3, r6
 800c04e:	f1c2 0214 	rsb	r2, r2, #20
 800c052:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c056:	fa4a fa02 	asr.w	sl, sl, r2
 800c05a:	f1bb 0f00 	cmp.w	fp, #0
 800c05e:	4602      	mov	r2, r0
 800c060:	460b      	mov	r3, r1
 800c062:	4620      	mov	r0, r4
 800c064:	4629      	mov	r1, r5
 800c066:	bfb8      	it	lt
 800c068:	f1ca 0a00 	rsblt	sl, sl, #0
 800c06c:	f7f4 f90c 	bl	8000288 <__aeabi_dsub>
 800c070:	ec41 0b19 	vmov	d9, r0, r1
 800c074:	4642      	mov	r2, r8
 800c076:	464b      	mov	r3, r9
 800c078:	ec51 0b19 	vmov	r0, r1, d9
 800c07c:	f7f4 f906 	bl	800028c <__adddf3>
 800c080:	a37b      	add	r3, pc, #492	; (adr r3, 800c270 <__ieee754_pow+0xa00>)
 800c082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c086:	2000      	movs	r0, #0
 800c088:	4604      	mov	r4, r0
 800c08a:	460d      	mov	r5, r1
 800c08c:	f7f4 fab4 	bl	80005f8 <__aeabi_dmul>
 800c090:	ec53 2b19 	vmov	r2, r3, d9
 800c094:	4606      	mov	r6, r0
 800c096:	460f      	mov	r7, r1
 800c098:	4620      	mov	r0, r4
 800c09a:	4629      	mov	r1, r5
 800c09c:	f7f4 f8f4 	bl	8000288 <__aeabi_dsub>
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	460b      	mov	r3, r1
 800c0a4:	4640      	mov	r0, r8
 800c0a6:	4649      	mov	r1, r9
 800c0a8:	f7f4 f8ee 	bl	8000288 <__aeabi_dsub>
 800c0ac:	a372      	add	r3, pc, #456	; (adr r3, 800c278 <__ieee754_pow+0xa08>)
 800c0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b2:	f7f4 faa1 	bl	80005f8 <__aeabi_dmul>
 800c0b6:	a372      	add	r3, pc, #456	; (adr r3, 800c280 <__ieee754_pow+0xa10>)
 800c0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0bc:	4680      	mov	r8, r0
 800c0be:	4689      	mov	r9, r1
 800c0c0:	4620      	mov	r0, r4
 800c0c2:	4629      	mov	r1, r5
 800c0c4:	f7f4 fa98 	bl	80005f8 <__aeabi_dmul>
 800c0c8:	4602      	mov	r2, r0
 800c0ca:	460b      	mov	r3, r1
 800c0cc:	4640      	mov	r0, r8
 800c0ce:	4649      	mov	r1, r9
 800c0d0:	f7f4 f8dc 	bl	800028c <__adddf3>
 800c0d4:	4604      	mov	r4, r0
 800c0d6:	460d      	mov	r5, r1
 800c0d8:	4602      	mov	r2, r0
 800c0da:	460b      	mov	r3, r1
 800c0dc:	4630      	mov	r0, r6
 800c0de:	4639      	mov	r1, r7
 800c0e0:	f7f4 f8d4 	bl	800028c <__adddf3>
 800c0e4:	4632      	mov	r2, r6
 800c0e6:	463b      	mov	r3, r7
 800c0e8:	4680      	mov	r8, r0
 800c0ea:	4689      	mov	r9, r1
 800c0ec:	f7f4 f8cc 	bl	8000288 <__aeabi_dsub>
 800c0f0:	4602      	mov	r2, r0
 800c0f2:	460b      	mov	r3, r1
 800c0f4:	4620      	mov	r0, r4
 800c0f6:	4629      	mov	r1, r5
 800c0f8:	f7f4 f8c6 	bl	8000288 <__aeabi_dsub>
 800c0fc:	4642      	mov	r2, r8
 800c0fe:	4606      	mov	r6, r0
 800c100:	460f      	mov	r7, r1
 800c102:	464b      	mov	r3, r9
 800c104:	4640      	mov	r0, r8
 800c106:	4649      	mov	r1, r9
 800c108:	f7f4 fa76 	bl	80005f8 <__aeabi_dmul>
 800c10c:	a35e      	add	r3, pc, #376	; (adr r3, 800c288 <__ieee754_pow+0xa18>)
 800c10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c112:	4604      	mov	r4, r0
 800c114:	460d      	mov	r5, r1
 800c116:	f7f4 fa6f 	bl	80005f8 <__aeabi_dmul>
 800c11a:	a35d      	add	r3, pc, #372	; (adr r3, 800c290 <__ieee754_pow+0xa20>)
 800c11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c120:	f7f4 f8b2 	bl	8000288 <__aeabi_dsub>
 800c124:	4622      	mov	r2, r4
 800c126:	462b      	mov	r3, r5
 800c128:	f7f4 fa66 	bl	80005f8 <__aeabi_dmul>
 800c12c:	a35a      	add	r3, pc, #360	; (adr r3, 800c298 <__ieee754_pow+0xa28>)
 800c12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c132:	f7f4 f8ab 	bl	800028c <__adddf3>
 800c136:	4622      	mov	r2, r4
 800c138:	462b      	mov	r3, r5
 800c13a:	f7f4 fa5d 	bl	80005f8 <__aeabi_dmul>
 800c13e:	a358      	add	r3, pc, #352	; (adr r3, 800c2a0 <__ieee754_pow+0xa30>)
 800c140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c144:	f7f4 f8a0 	bl	8000288 <__aeabi_dsub>
 800c148:	4622      	mov	r2, r4
 800c14a:	462b      	mov	r3, r5
 800c14c:	f7f4 fa54 	bl	80005f8 <__aeabi_dmul>
 800c150:	a355      	add	r3, pc, #340	; (adr r3, 800c2a8 <__ieee754_pow+0xa38>)
 800c152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c156:	f7f4 f899 	bl	800028c <__adddf3>
 800c15a:	4622      	mov	r2, r4
 800c15c:	462b      	mov	r3, r5
 800c15e:	f7f4 fa4b 	bl	80005f8 <__aeabi_dmul>
 800c162:	4602      	mov	r2, r0
 800c164:	460b      	mov	r3, r1
 800c166:	4640      	mov	r0, r8
 800c168:	4649      	mov	r1, r9
 800c16a:	f7f4 f88d 	bl	8000288 <__aeabi_dsub>
 800c16e:	4604      	mov	r4, r0
 800c170:	460d      	mov	r5, r1
 800c172:	4602      	mov	r2, r0
 800c174:	460b      	mov	r3, r1
 800c176:	4640      	mov	r0, r8
 800c178:	4649      	mov	r1, r9
 800c17a:	f7f4 fa3d 	bl	80005f8 <__aeabi_dmul>
 800c17e:	2200      	movs	r2, #0
 800c180:	ec41 0b19 	vmov	d9, r0, r1
 800c184:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c188:	4620      	mov	r0, r4
 800c18a:	4629      	mov	r1, r5
 800c18c:	f7f4 f87c 	bl	8000288 <__aeabi_dsub>
 800c190:	4602      	mov	r2, r0
 800c192:	460b      	mov	r3, r1
 800c194:	ec51 0b19 	vmov	r0, r1, d9
 800c198:	f7f4 fb58 	bl	800084c <__aeabi_ddiv>
 800c19c:	4632      	mov	r2, r6
 800c19e:	4604      	mov	r4, r0
 800c1a0:	460d      	mov	r5, r1
 800c1a2:	463b      	mov	r3, r7
 800c1a4:	4640      	mov	r0, r8
 800c1a6:	4649      	mov	r1, r9
 800c1a8:	f7f4 fa26 	bl	80005f8 <__aeabi_dmul>
 800c1ac:	4632      	mov	r2, r6
 800c1ae:	463b      	mov	r3, r7
 800c1b0:	f7f4 f86c 	bl	800028c <__adddf3>
 800c1b4:	4602      	mov	r2, r0
 800c1b6:	460b      	mov	r3, r1
 800c1b8:	4620      	mov	r0, r4
 800c1ba:	4629      	mov	r1, r5
 800c1bc:	f7f4 f864 	bl	8000288 <__aeabi_dsub>
 800c1c0:	4642      	mov	r2, r8
 800c1c2:	464b      	mov	r3, r9
 800c1c4:	f7f4 f860 	bl	8000288 <__aeabi_dsub>
 800c1c8:	460b      	mov	r3, r1
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	493a      	ldr	r1, [pc, #232]	; (800c2b8 <__ieee754_pow+0xa48>)
 800c1ce:	2000      	movs	r0, #0
 800c1d0:	f7f4 f85a 	bl	8000288 <__aeabi_dsub>
 800c1d4:	ec41 0b10 	vmov	d0, r0, r1
 800c1d8:	ee10 3a90 	vmov	r3, s1
 800c1dc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c1e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1e4:	da2b      	bge.n	800c23e <__ieee754_pow+0x9ce>
 800c1e6:	4650      	mov	r0, sl
 800c1e8:	f001 fada 	bl	800d7a0 <scalbn>
 800c1ec:	ec51 0b10 	vmov	r0, r1, d0
 800c1f0:	ec53 2b18 	vmov	r2, r3, d8
 800c1f4:	f7ff bbed 	b.w	800b9d2 <__ieee754_pow+0x162>
 800c1f8:	4b30      	ldr	r3, [pc, #192]	; (800c2bc <__ieee754_pow+0xa4c>)
 800c1fa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c1fe:	429e      	cmp	r6, r3
 800c200:	f77f af0c 	ble.w	800c01c <__ieee754_pow+0x7ac>
 800c204:	4b2e      	ldr	r3, [pc, #184]	; (800c2c0 <__ieee754_pow+0xa50>)
 800c206:	440b      	add	r3, r1
 800c208:	4303      	orrs	r3, r0
 800c20a:	d009      	beq.n	800c220 <__ieee754_pow+0x9b0>
 800c20c:	ec51 0b18 	vmov	r0, r1, d8
 800c210:	2200      	movs	r2, #0
 800c212:	2300      	movs	r3, #0
 800c214:	f7f4 fc62 	bl	8000adc <__aeabi_dcmplt>
 800c218:	3800      	subs	r0, #0
 800c21a:	bf18      	it	ne
 800c21c:	2001      	movne	r0, #1
 800c21e:	e447      	b.n	800bab0 <__ieee754_pow+0x240>
 800c220:	4622      	mov	r2, r4
 800c222:	462b      	mov	r3, r5
 800c224:	f7f4 f830 	bl	8000288 <__aeabi_dsub>
 800c228:	4642      	mov	r2, r8
 800c22a:	464b      	mov	r3, r9
 800c22c:	f7f4 fc6a 	bl	8000b04 <__aeabi_dcmpge>
 800c230:	2800      	cmp	r0, #0
 800c232:	f43f aef3 	beq.w	800c01c <__ieee754_pow+0x7ac>
 800c236:	e7e9      	b.n	800c20c <__ieee754_pow+0x99c>
 800c238:	f04f 0a00 	mov.w	sl, #0
 800c23c:	e71a      	b.n	800c074 <__ieee754_pow+0x804>
 800c23e:	ec51 0b10 	vmov	r0, r1, d0
 800c242:	4619      	mov	r1, r3
 800c244:	e7d4      	b.n	800c1f0 <__ieee754_pow+0x980>
 800c246:	491c      	ldr	r1, [pc, #112]	; (800c2b8 <__ieee754_pow+0xa48>)
 800c248:	2000      	movs	r0, #0
 800c24a:	f7ff bb30 	b.w	800b8ae <__ieee754_pow+0x3e>
 800c24e:	2000      	movs	r0, #0
 800c250:	2100      	movs	r1, #0
 800c252:	f7ff bb2c 	b.w	800b8ae <__ieee754_pow+0x3e>
 800c256:	4630      	mov	r0, r6
 800c258:	4639      	mov	r1, r7
 800c25a:	f7ff bb28 	b.w	800b8ae <__ieee754_pow+0x3e>
 800c25e:	9204      	str	r2, [sp, #16]
 800c260:	f7ff bb7a 	b.w	800b958 <__ieee754_pow+0xe8>
 800c264:	2300      	movs	r3, #0
 800c266:	f7ff bb64 	b.w	800b932 <__ieee754_pow+0xc2>
 800c26a:	bf00      	nop
 800c26c:	f3af 8000 	nop.w
 800c270:	00000000 	.word	0x00000000
 800c274:	3fe62e43 	.word	0x3fe62e43
 800c278:	fefa39ef 	.word	0xfefa39ef
 800c27c:	3fe62e42 	.word	0x3fe62e42
 800c280:	0ca86c39 	.word	0x0ca86c39
 800c284:	be205c61 	.word	0xbe205c61
 800c288:	72bea4d0 	.word	0x72bea4d0
 800c28c:	3e663769 	.word	0x3e663769
 800c290:	c5d26bf1 	.word	0xc5d26bf1
 800c294:	3ebbbd41 	.word	0x3ebbbd41
 800c298:	af25de2c 	.word	0xaf25de2c
 800c29c:	3f11566a 	.word	0x3f11566a
 800c2a0:	16bebd93 	.word	0x16bebd93
 800c2a4:	3f66c16c 	.word	0x3f66c16c
 800c2a8:	5555553e 	.word	0x5555553e
 800c2ac:	3fc55555 	.word	0x3fc55555
 800c2b0:	3fe00000 	.word	0x3fe00000
 800c2b4:	000fffff 	.word	0x000fffff
 800c2b8:	3ff00000 	.word	0x3ff00000
 800c2bc:	4090cbff 	.word	0x4090cbff
 800c2c0:	3f6f3400 	.word	0x3f6f3400
 800c2c4:	652b82fe 	.word	0x652b82fe
 800c2c8:	3c971547 	.word	0x3c971547
 800c2cc:	00000000 	.word	0x00000000

0800c2d0 <__ieee754_rem_pio2>:
 800c2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2d4:	ed2d 8b02 	vpush	{d8}
 800c2d8:	ec55 4b10 	vmov	r4, r5, d0
 800c2dc:	4bca      	ldr	r3, [pc, #808]	; (800c608 <__ieee754_rem_pio2+0x338>)
 800c2de:	b08b      	sub	sp, #44	; 0x2c
 800c2e0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800c2e4:	4598      	cmp	r8, r3
 800c2e6:	4682      	mov	sl, r0
 800c2e8:	9502      	str	r5, [sp, #8]
 800c2ea:	dc08      	bgt.n	800c2fe <__ieee754_rem_pio2+0x2e>
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	ed80 0b00 	vstr	d0, [r0]
 800c2f4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c2f8:	f04f 0b00 	mov.w	fp, #0
 800c2fc:	e028      	b.n	800c350 <__ieee754_rem_pio2+0x80>
 800c2fe:	4bc3      	ldr	r3, [pc, #780]	; (800c60c <__ieee754_rem_pio2+0x33c>)
 800c300:	4598      	cmp	r8, r3
 800c302:	dc78      	bgt.n	800c3f6 <__ieee754_rem_pio2+0x126>
 800c304:	9b02      	ldr	r3, [sp, #8]
 800c306:	4ec2      	ldr	r6, [pc, #776]	; (800c610 <__ieee754_rem_pio2+0x340>)
 800c308:	2b00      	cmp	r3, #0
 800c30a:	ee10 0a10 	vmov	r0, s0
 800c30e:	a3b0      	add	r3, pc, #704	; (adr r3, 800c5d0 <__ieee754_rem_pio2+0x300>)
 800c310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c314:	4629      	mov	r1, r5
 800c316:	dd39      	ble.n	800c38c <__ieee754_rem_pio2+0xbc>
 800c318:	f7f3 ffb6 	bl	8000288 <__aeabi_dsub>
 800c31c:	45b0      	cmp	r8, r6
 800c31e:	4604      	mov	r4, r0
 800c320:	460d      	mov	r5, r1
 800c322:	d01b      	beq.n	800c35c <__ieee754_rem_pio2+0x8c>
 800c324:	a3ac      	add	r3, pc, #688	; (adr r3, 800c5d8 <__ieee754_rem_pio2+0x308>)
 800c326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32a:	f7f3 ffad 	bl	8000288 <__aeabi_dsub>
 800c32e:	4602      	mov	r2, r0
 800c330:	460b      	mov	r3, r1
 800c332:	e9ca 2300 	strd	r2, r3, [sl]
 800c336:	4620      	mov	r0, r4
 800c338:	4629      	mov	r1, r5
 800c33a:	f7f3 ffa5 	bl	8000288 <__aeabi_dsub>
 800c33e:	a3a6      	add	r3, pc, #664	; (adr r3, 800c5d8 <__ieee754_rem_pio2+0x308>)
 800c340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c344:	f7f3 ffa0 	bl	8000288 <__aeabi_dsub>
 800c348:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c34c:	f04f 0b01 	mov.w	fp, #1
 800c350:	4658      	mov	r0, fp
 800c352:	b00b      	add	sp, #44	; 0x2c
 800c354:	ecbd 8b02 	vpop	{d8}
 800c358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c35c:	a3a0      	add	r3, pc, #640	; (adr r3, 800c5e0 <__ieee754_rem_pio2+0x310>)
 800c35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c362:	f7f3 ff91 	bl	8000288 <__aeabi_dsub>
 800c366:	a3a0      	add	r3, pc, #640	; (adr r3, 800c5e8 <__ieee754_rem_pio2+0x318>)
 800c368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36c:	4604      	mov	r4, r0
 800c36e:	460d      	mov	r5, r1
 800c370:	f7f3 ff8a 	bl	8000288 <__aeabi_dsub>
 800c374:	4602      	mov	r2, r0
 800c376:	460b      	mov	r3, r1
 800c378:	e9ca 2300 	strd	r2, r3, [sl]
 800c37c:	4620      	mov	r0, r4
 800c37e:	4629      	mov	r1, r5
 800c380:	f7f3 ff82 	bl	8000288 <__aeabi_dsub>
 800c384:	a398      	add	r3, pc, #608	; (adr r3, 800c5e8 <__ieee754_rem_pio2+0x318>)
 800c386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c38a:	e7db      	b.n	800c344 <__ieee754_rem_pio2+0x74>
 800c38c:	f7f3 ff7e 	bl	800028c <__adddf3>
 800c390:	45b0      	cmp	r8, r6
 800c392:	4604      	mov	r4, r0
 800c394:	460d      	mov	r5, r1
 800c396:	d016      	beq.n	800c3c6 <__ieee754_rem_pio2+0xf6>
 800c398:	a38f      	add	r3, pc, #572	; (adr r3, 800c5d8 <__ieee754_rem_pio2+0x308>)
 800c39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39e:	f7f3 ff75 	bl	800028c <__adddf3>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	e9ca 2300 	strd	r2, r3, [sl]
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	4629      	mov	r1, r5
 800c3ae:	f7f3 ff6b 	bl	8000288 <__aeabi_dsub>
 800c3b2:	a389      	add	r3, pc, #548	; (adr r3, 800c5d8 <__ieee754_rem_pio2+0x308>)
 800c3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b8:	f7f3 ff68 	bl	800028c <__adddf3>
 800c3bc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800c3c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c3c4:	e7c4      	b.n	800c350 <__ieee754_rem_pio2+0x80>
 800c3c6:	a386      	add	r3, pc, #536	; (adr r3, 800c5e0 <__ieee754_rem_pio2+0x310>)
 800c3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3cc:	f7f3 ff5e 	bl	800028c <__adddf3>
 800c3d0:	a385      	add	r3, pc, #532	; (adr r3, 800c5e8 <__ieee754_rem_pio2+0x318>)
 800c3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d6:	4604      	mov	r4, r0
 800c3d8:	460d      	mov	r5, r1
 800c3da:	f7f3 ff57 	bl	800028c <__adddf3>
 800c3de:	4602      	mov	r2, r0
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	e9ca 2300 	strd	r2, r3, [sl]
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	4629      	mov	r1, r5
 800c3ea:	f7f3 ff4d 	bl	8000288 <__aeabi_dsub>
 800c3ee:	a37e      	add	r3, pc, #504	; (adr r3, 800c5e8 <__ieee754_rem_pio2+0x318>)
 800c3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f4:	e7e0      	b.n	800c3b8 <__ieee754_rem_pio2+0xe8>
 800c3f6:	4b87      	ldr	r3, [pc, #540]	; (800c614 <__ieee754_rem_pio2+0x344>)
 800c3f8:	4598      	cmp	r8, r3
 800c3fa:	f300 80d9 	bgt.w	800c5b0 <__ieee754_rem_pio2+0x2e0>
 800c3fe:	f7fe fe6f 	bl	800b0e0 <fabs>
 800c402:	ec55 4b10 	vmov	r4, r5, d0
 800c406:	ee10 0a10 	vmov	r0, s0
 800c40a:	a379      	add	r3, pc, #484	; (adr r3, 800c5f0 <__ieee754_rem_pio2+0x320>)
 800c40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c410:	4629      	mov	r1, r5
 800c412:	f7f4 f8f1 	bl	80005f8 <__aeabi_dmul>
 800c416:	4b80      	ldr	r3, [pc, #512]	; (800c618 <__ieee754_rem_pio2+0x348>)
 800c418:	2200      	movs	r2, #0
 800c41a:	f7f3 ff37 	bl	800028c <__adddf3>
 800c41e:	f7f4 fb9b 	bl	8000b58 <__aeabi_d2iz>
 800c422:	4683      	mov	fp, r0
 800c424:	f7f4 f87e 	bl	8000524 <__aeabi_i2d>
 800c428:	4602      	mov	r2, r0
 800c42a:	460b      	mov	r3, r1
 800c42c:	ec43 2b18 	vmov	d8, r2, r3
 800c430:	a367      	add	r3, pc, #412	; (adr r3, 800c5d0 <__ieee754_rem_pio2+0x300>)
 800c432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c436:	f7f4 f8df 	bl	80005f8 <__aeabi_dmul>
 800c43a:	4602      	mov	r2, r0
 800c43c:	460b      	mov	r3, r1
 800c43e:	4620      	mov	r0, r4
 800c440:	4629      	mov	r1, r5
 800c442:	f7f3 ff21 	bl	8000288 <__aeabi_dsub>
 800c446:	a364      	add	r3, pc, #400	; (adr r3, 800c5d8 <__ieee754_rem_pio2+0x308>)
 800c448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44c:	4606      	mov	r6, r0
 800c44e:	460f      	mov	r7, r1
 800c450:	ec51 0b18 	vmov	r0, r1, d8
 800c454:	f7f4 f8d0 	bl	80005f8 <__aeabi_dmul>
 800c458:	f1bb 0f1f 	cmp.w	fp, #31
 800c45c:	4604      	mov	r4, r0
 800c45e:	460d      	mov	r5, r1
 800c460:	dc0d      	bgt.n	800c47e <__ieee754_rem_pio2+0x1ae>
 800c462:	4b6e      	ldr	r3, [pc, #440]	; (800c61c <__ieee754_rem_pio2+0x34c>)
 800c464:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800c468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c46c:	4543      	cmp	r3, r8
 800c46e:	d006      	beq.n	800c47e <__ieee754_rem_pio2+0x1ae>
 800c470:	4622      	mov	r2, r4
 800c472:	462b      	mov	r3, r5
 800c474:	4630      	mov	r0, r6
 800c476:	4639      	mov	r1, r7
 800c478:	f7f3 ff06 	bl	8000288 <__aeabi_dsub>
 800c47c:	e00f      	b.n	800c49e <__ieee754_rem_pio2+0x1ce>
 800c47e:	462b      	mov	r3, r5
 800c480:	4622      	mov	r2, r4
 800c482:	4630      	mov	r0, r6
 800c484:	4639      	mov	r1, r7
 800c486:	f7f3 feff 	bl	8000288 <__aeabi_dsub>
 800c48a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c48e:	9303      	str	r3, [sp, #12]
 800c490:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c494:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800c498:	f1b8 0f10 	cmp.w	r8, #16
 800c49c:	dc02      	bgt.n	800c4a4 <__ieee754_rem_pio2+0x1d4>
 800c49e:	e9ca 0100 	strd	r0, r1, [sl]
 800c4a2:	e039      	b.n	800c518 <__ieee754_rem_pio2+0x248>
 800c4a4:	a34e      	add	r3, pc, #312	; (adr r3, 800c5e0 <__ieee754_rem_pio2+0x310>)
 800c4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4aa:	ec51 0b18 	vmov	r0, r1, d8
 800c4ae:	f7f4 f8a3 	bl	80005f8 <__aeabi_dmul>
 800c4b2:	4604      	mov	r4, r0
 800c4b4:	460d      	mov	r5, r1
 800c4b6:	4602      	mov	r2, r0
 800c4b8:	460b      	mov	r3, r1
 800c4ba:	4630      	mov	r0, r6
 800c4bc:	4639      	mov	r1, r7
 800c4be:	f7f3 fee3 	bl	8000288 <__aeabi_dsub>
 800c4c2:	4602      	mov	r2, r0
 800c4c4:	460b      	mov	r3, r1
 800c4c6:	4680      	mov	r8, r0
 800c4c8:	4689      	mov	r9, r1
 800c4ca:	4630      	mov	r0, r6
 800c4cc:	4639      	mov	r1, r7
 800c4ce:	f7f3 fedb 	bl	8000288 <__aeabi_dsub>
 800c4d2:	4622      	mov	r2, r4
 800c4d4:	462b      	mov	r3, r5
 800c4d6:	f7f3 fed7 	bl	8000288 <__aeabi_dsub>
 800c4da:	a343      	add	r3, pc, #268	; (adr r3, 800c5e8 <__ieee754_rem_pio2+0x318>)
 800c4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e0:	4604      	mov	r4, r0
 800c4e2:	460d      	mov	r5, r1
 800c4e4:	ec51 0b18 	vmov	r0, r1, d8
 800c4e8:	f7f4 f886 	bl	80005f8 <__aeabi_dmul>
 800c4ec:	4622      	mov	r2, r4
 800c4ee:	462b      	mov	r3, r5
 800c4f0:	f7f3 feca 	bl	8000288 <__aeabi_dsub>
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	460b      	mov	r3, r1
 800c4f8:	4604      	mov	r4, r0
 800c4fa:	460d      	mov	r5, r1
 800c4fc:	4640      	mov	r0, r8
 800c4fe:	4649      	mov	r1, r9
 800c500:	f7f3 fec2 	bl	8000288 <__aeabi_dsub>
 800c504:	9a03      	ldr	r2, [sp, #12]
 800c506:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c50a:	1ad3      	subs	r3, r2, r3
 800c50c:	2b31      	cmp	r3, #49	; 0x31
 800c50e:	dc24      	bgt.n	800c55a <__ieee754_rem_pio2+0x28a>
 800c510:	e9ca 0100 	strd	r0, r1, [sl]
 800c514:	4646      	mov	r6, r8
 800c516:	464f      	mov	r7, r9
 800c518:	e9da 8900 	ldrd	r8, r9, [sl]
 800c51c:	4630      	mov	r0, r6
 800c51e:	4642      	mov	r2, r8
 800c520:	464b      	mov	r3, r9
 800c522:	4639      	mov	r1, r7
 800c524:	f7f3 feb0 	bl	8000288 <__aeabi_dsub>
 800c528:	462b      	mov	r3, r5
 800c52a:	4622      	mov	r2, r4
 800c52c:	f7f3 feac 	bl	8000288 <__aeabi_dsub>
 800c530:	9b02      	ldr	r3, [sp, #8]
 800c532:	2b00      	cmp	r3, #0
 800c534:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c538:	f6bf af0a 	bge.w	800c350 <__ieee754_rem_pio2+0x80>
 800c53c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c540:	f8ca 3004 	str.w	r3, [sl, #4]
 800c544:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c548:	f8ca 8000 	str.w	r8, [sl]
 800c54c:	f8ca 0008 	str.w	r0, [sl, #8]
 800c550:	f8ca 300c 	str.w	r3, [sl, #12]
 800c554:	f1cb 0b00 	rsb	fp, fp, #0
 800c558:	e6fa      	b.n	800c350 <__ieee754_rem_pio2+0x80>
 800c55a:	a327      	add	r3, pc, #156	; (adr r3, 800c5f8 <__ieee754_rem_pio2+0x328>)
 800c55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c560:	ec51 0b18 	vmov	r0, r1, d8
 800c564:	f7f4 f848 	bl	80005f8 <__aeabi_dmul>
 800c568:	4604      	mov	r4, r0
 800c56a:	460d      	mov	r5, r1
 800c56c:	4602      	mov	r2, r0
 800c56e:	460b      	mov	r3, r1
 800c570:	4640      	mov	r0, r8
 800c572:	4649      	mov	r1, r9
 800c574:	f7f3 fe88 	bl	8000288 <__aeabi_dsub>
 800c578:	4602      	mov	r2, r0
 800c57a:	460b      	mov	r3, r1
 800c57c:	4606      	mov	r6, r0
 800c57e:	460f      	mov	r7, r1
 800c580:	4640      	mov	r0, r8
 800c582:	4649      	mov	r1, r9
 800c584:	f7f3 fe80 	bl	8000288 <__aeabi_dsub>
 800c588:	4622      	mov	r2, r4
 800c58a:	462b      	mov	r3, r5
 800c58c:	f7f3 fe7c 	bl	8000288 <__aeabi_dsub>
 800c590:	a31b      	add	r3, pc, #108	; (adr r3, 800c600 <__ieee754_rem_pio2+0x330>)
 800c592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c596:	4604      	mov	r4, r0
 800c598:	460d      	mov	r5, r1
 800c59a:	ec51 0b18 	vmov	r0, r1, d8
 800c59e:	f7f4 f82b 	bl	80005f8 <__aeabi_dmul>
 800c5a2:	4622      	mov	r2, r4
 800c5a4:	462b      	mov	r3, r5
 800c5a6:	f7f3 fe6f 	bl	8000288 <__aeabi_dsub>
 800c5aa:	4604      	mov	r4, r0
 800c5ac:	460d      	mov	r5, r1
 800c5ae:	e75f      	b.n	800c470 <__ieee754_rem_pio2+0x1a0>
 800c5b0:	4b1b      	ldr	r3, [pc, #108]	; (800c620 <__ieee754_rem_pio2+0x350>)
 800c5b2:	4598      	cmp	r8, r3
 800c5b4:	dd36      	ble.n	800c624 <__ieee754_rem_pio2+0x354>
 800c5b6:	ee10 2a10 	vmov	r2, s0
 800c5ba:	462b      	mov	r3, r5
 800c5bc:	4620      	mov	r0, r4
 800c5be:	4629      	mov	r1, r5
 800c5c0:	f7f3 fe62 	bl	8000288 <__aeabi_dsub>
 800c5c4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c5c8:	e9ca 0100 	strd	r0, r1, [sl]
 800c5cc:	e694      	b.n	800c2f8 <__ieee754_rem_pio2+0x28>
 800c5ce:	bf00      	nop
 800c5d0:	54400000 	.word	0x54400000
 800c5d4:	3ff921fb 	.word	0x3ff921fb
 800c5d8:	1a626331 	.word	0x1a626331
 800c5dc:	3dd0b461 	.word	0x3dd0b461
 800c5e0:	1a600000 	.word	0x1a600000
 800c5e4:	3dd0b461 	.word	0x3dd0b461
 800c5e8:	2e037073 	.word	0x2e037073
 800c5ec:	3ba3198a 	.word	0x3ba3198a
 800c5f0:	6dc9c883 	.word	0x6dc9c883
 800c5f4:	3fe45f30 	.word	0x3fe45f30
 800c5f8:	2e000000 	.word	0x2e000000
 800c5fc:	3ba3198a 	.word	0x3ba3198a
 800c600:	252049c1 	.word	0x252049c1
 800c604:	397b839a 	.word	0x397b839a
 800c608:	3fe921fb 	.word	0x3fe921fb
 800c60c:	4002d97b 	.word	0x4002d97b
 800c610:	3ff921fb 	.word	0x3ff921fb
 800c614:	413921fb 	.word	0x413921fb
 800c618:	3fe00000 	.word	0x3fe00000
 800c61c:	0800de60 	.word	0x0800de60
 800c620:	7fefffff 	.word	0x7fefffff
 800c624:	ea4f 5428 	mov.w	r4, r8, asr #20
 800c628:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800c62c:	ee10 0a10 	vmov	r0, s0
 800c630:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800c634:	ee10 6a10 	vmov	r6, s0
 800c638:	460f      	mov	r7, r1
 800c63a:	f7f4 fa8d 	bl	8000b58 <__aeabi_d2iz>
 800c63e:	f7f3 ff71 	bl	8000524 <__aeabi_i2d>
 800c642:	4602      	mov	r2, r0
 800c644:	460b      	mov	r3, r1
 800c646:	4630      	mov	r0, r6
 800c648:	4639      	mov	r1, r7
 800c64a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c64e:	f7f3 fe1b 	bl	8000288 <__aeabi_dsub>
 800c652:	4b23      	ldr	r3, [pc, #140]	; (800c6e0 <__ieee754_rem_pio2+0x410>)
 800c654:	2200      	movs	r2, #0
 800c656:	f7f3 ffcf 	bl	80005f8 <__aeabi_dmul>
 800c65a:	460f      	mov	r7, r1
 800c65c:	4606      	mov	r6, r0
 800c65e:	f7f4 fa7b 	bl	8000b58 <__aeabi_d2iz>
 800c662:	f7f3 ff5f 	bl	8000524 <__aeabi_i2d>
 800c666:	4602      	mov	r2, r0
 800c668:	460b      	mov	r3, r1
 800c66a:	4630      	mov	r0, r6
 800c66c:	4639      	mov	r1, r7
 800c66e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c672:	f7f3 fe09 	bl	8000288 <__aeabi_dsub>
 800c676:	4b1a      	ldr	r3, [pc, #104]	; (800c6e0 <__ieee754_rem_pio2+0x410>)
 800c678:	2200      	movs	r2, #0
 800c67a:	f7f3 ffbd 	bl	80005f8 <__aeabi_dmul>
 800c67e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c682:	ad04      	add	r5, sp, #16
 800c684:	f04f 0803 	mov.w	r8, #3
 800c688:	46a9      	mov	r9, r5
 800c68a:	2600      	movs	r6, #0
 800c68c:	2700      	movs	r7, #0
 800c68e:	4632      	mov	r2, r6
 800c690:	463b      	mov	r3, r7
 800c692:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800c696:	46c3      	mov	fp, r8
 800c698:	3d08      	subs	r5, #8
 800c69a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c69e:	f7f4 fa13 	bl	8000ac8 <__aeabi_dcmpeq>
 800c6a2:	2800      	cmp	r0, #0
 800c6a4:	d1f3      	bne.n	800c68e <__ieee754_rem_pio2+0x3be>
 800c6a6:	4b0f      	ldr	r3, [pc, #60]	; (800c6e4 <__ieee754_rem_pio2+0x414>)
 800c6a8:	9301      	str	r3, [sp, #4]
 800c6aa:	2302      	movs	r3, #2
 800c6ac:	9300      	str	r3, [sp, #0]
 800c6ae:	4622      	mov	r2, r4
 800c6b0:	465b      	mov	r3, fp
 800c6b2:	4651      	mov	r1, sl
 800c6b4:	4648      	mov	r0, r9
 800c6b6:	f000 f993 	bl	800c9e0 <__kernel_rem_pio2>
 800c6ba:	9b02      	ldr	r3, [sp, #8]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	4683      	mov	fp, r0
 800c6c0:	f6bf ae46 	bge.w	800c350 <__ieee754_rem_pio2+0x80>
 800c6c4:	e9da 2100 	ldrd	r2, r1, [sl]
 800c6c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c6cc:	e9ca 2300 	strd	r2, r3, [sl]
 800c6d0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800c6d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c6d8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800c6dc:	e73a      	b.n	800c554 <__ieee754_rem_pio2+0x284>
 800c6de:	bf00      	nop
 800c6e0:	41700000 	.word	0x41700000
 800c6e4:	0800dee0 	.word	0x0800dee0

0800c6e8 <__ieee754_sqrt>:
 800c6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ec:	ec55 4b10 	vmov	r4, r5, d0
 800c6f0:	4e55      	ldr	r6, [pc, #340]	; (800c848 <__ieee754_sqrt+0x160>)
 800c6f2:	43ae      	bics	r6, r5
 800c6f4:	ee10 0a10 	vmov	r0, s0
 800c6f8:	ee10 3a10 	vmov	r3, s0
 800c6fc:	462a      	mov	r2, r5
 800c6fe:	4629      	mov	r1, r5
 800c700:	d110      	bne.n	800c724 <__ieee754_sqrt+0x3c>
 800c702:	ee10 2a10 	vmov	r2, s0
 800c706:	462b      	mov	r3, r5
 800c708:	f7f3 ff76 	bl	80005f8 <__aeabi_dmul>
 800c70c:	4602      	mov	r2, r0
 800c70e:	460b      	mov	r3, r1
 800c710:	4620      	mov	r0, r4
 800c712:	4629      	mov	r1, r5
 800c714:	f7f3 fdba 	bl	800028c <__adddf3>
 800c718:	4604      	mov	r4, r0
 800c71a:	460d      	mov	r5, r1
 800c71c:	ec45 4b10 	vmov	d0, r4, r5
 800c720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c724:	2d00      	cmp	r5, #0
 800c726:	dc10      	bgt.n	800c74a <__ieee754_sqrt+0x62>
 800c728:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c72c:	4330      	orrs	r0, r6
 800c72e:	d0f5      	beq.n	800c71c <__ieee754_sqrt+0x34>
 800c730:	b15d      	cbz	r5, 800c74a <__ieee754_sqrt+0x62>
 800c732:	ee10 2a10 	vmov	r2, s0
 800c736:	462b      	mov	r3, r5
 800c738:	ee10 0a10 	vmov	r0, s0
 800c73c:	f7f3 fda4 	bl	8000288 <__aeabi_dsub>
 800c740:	4602      	mov	r2, r0
 800c742:	460b      	mov	r3, r1
 800c744:	f7f4 f882 	bl	800084c <__aeabi_ddiv>
 800c748:	e7e6      	b.n	800c718 <__ieee754_sqrt+0x30>
 800c74a:	1512      	asrs	r2, r2, #20
 800c74c:	d074      	beq.n	800c838 <__ieee754_sqrt+0x150>
 800c74e:	07d4      	lsls	r4, r2, #31
 800c750:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c754:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c758:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c75c:	bf5e      	ittt	pl
 800c75e:	0fda      	lsrpl	r2, r3, #31
 800c760:	005b      	lslpl	r3, r3, #1
 800c762:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c766:	2400      	movs	r4, #0
 800c768:	0fda      	lsrs	r2, r3, #31
 800c76a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c76e:	107f      	asrs	r7, r7, #1
 800c770:	005b      	lsls	r3, r3, #1
 800c772:	2516      	movs	r5, #22
 800c774:	4620      	mov	r0, r4
 800c776:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c77a:	1886      	adds	r6, r0, r2
 800c77c:	428e      	cmp	r6, r1
 800c77e:	bfde      	ittt	le
 800c780:	1b89      	suble	r1, r1, r6
 800c782:	18b0      	addle	r0, r6, r2
 800c784:	18a4      	addle	r4, r4, r2
 800c786:	0049      	lsls	r1, r1, #1
 800c788:	3d01      	subs	r5, #1
 800c78a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c78e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c792:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c796:	d1f0      	bne.n	800c77a <__ieee754_sqrt+0x92>
 800c798:	462a      	mov	r2, r5
 800c79a:	f04f 0e20 	mov.w	lr, #32
 800c79e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c7a2:	4281      	cmp	r1, r0
 800c7a4:	eb06 0c05 	add.w	ip, r6, r5
 800c7a8:	dc02      	bgt.n	800c7b0 <__ieee754_sqrt+0xc8>
 800c7aa:	d113      	bne.n	800c7d4 <__ieee754_sqrt+0xec>
 800c7ac:	459c      	cmp	ip, r3
 800c7ae:	d811      	bhi.n	800c7d4 <__ieee754_sqrt+0xec>
 800c7b0:	f1bc 0f00 	cmp.w	ip, #0
 800c7b4:	eb0c 0506 	add.w	r5, ip, r6
 800c7b8:	da43      	bge.n	800c842 <__ieee754_sqrt+0x15a>
 800c7ba:	2d00      	cmp	r5, #0
 800c7bc:	db41      	blt.n	800c842 <__ieee754_sqrt+0x15a>
 800c7be:	f100 0801 	add.w	r8, r0, #1
 800c7c2:	1a09      	subs	r1, r1, r0
 800c7c4:	459c      	cmp	ip, r3
 800c7c6:	bf88      	it	hi
 800c7c8:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800c7cc:	eba3 030c 	sub.w	r3, r3, ip
 800c7d0:	4432      	add	r2, r6
 800c7d2:	4640      	mov	r0, r8
 800c7d4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c7d8:	f1be 0e01 	subs.w	lr, lr, #1
 800c7dc:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c7e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c7e4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c7e8:	d1db      	bne.n	800c7a2 <__ieee754_sqrt+0xba>
 800c7ea:	430b      	orrs	r3, r1
 800c7ec:	d006      	beq.n	800c7fc <__ieee754_sqrt+0x114>
 800c7ee:	1c50      	adds	r0, r2, #1
 800c7f0:	bf13      	iteet	ne
 800c7f2:	3201      	addne	r2, #1
 800c7f4:	3401      	addeq	r4, #1
 800c7f6:	4672      	moveq	r2, lr
 800c7f8:	f022 0201 	bicne.w	r2, r2, #1
 800c7fc:	1063      	asrs	r3, r4, #1
 800c7fe:	0852      	lsrs	r2, r2, #1
 800c800:	07e1      	lsls	r1, r4, #31
 800c802:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c806:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c80a:	bf48      	it	mi
 800c80c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c810:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c814:	4614      	mov	r4, r2
 800c816:	e781      	b.n	800c71c <__ieee754_sqrt+0x34>
 800c818:	0ad9      	lsrs	r1, r3, #11
 800c81a:	3815      	subs	r0, #21
 800c81c:	055b      	lsls	r3, r3, #21
 800c81e:	2900      	cmp	r1, #0
 800c820:	d0fa      	beq.n	800c818 <__ieee754_sqrt+0x130>
 800c822:	02cd      	lsls	r5, r1, #11
 800c824:	d50a      	bpl.n	800c83c <__ieee754_sqrt+0x154>
 800c826:	f1c2 0420 	rsb	r4, r2, #32
 800c82a:	fa23 f404 	lsr.w	r4, r3, r4
 800c82e:	1e55      	subs	r5, r2, #1
 800c830:	4093      	lsls	r3, r2
 800c832:	4321      	orrs	r1, r4
 800c834:	1b42      	subs	r2, r0, r5
 800c836:	e78a      	b.n	800c74e <__ieee754_sqrt+0x66>
 800c838:	4610      	mov	r0, r2
 800c83a:	e7f0      	b.n	800c81e <__ieee754_sqrt+0x136>
 800c83c:	0049      	lsls	r1, r1, #1
 800c83e:	3201      	adds	r2, #1
 800c840:	e7ef      	b.n	800c822 <__ieee754_sqrt+0x13a>
 800c842:	4680      	mov	r8, r0
 800c844:	e7bd      	b.n	800c7c2 <__ieee754_sqrt+0xda>
 800c846:	bf00      	nop
 800c848:	7ff00000 	.word	0x7ff00000
 800c84c:	00000000 	.word	0x00000000

0800c850 <__kernel_cos>:
 800c850:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c854:	ec57 6b10 	vmov	r6, r7, d0
 800c858:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c85c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800c860:	ed8d 1b00 	vstr	d1, [sp]
 800c864:	da07      	bge.n	800c876 <__kernel_cos+0x26>
 800c866:	ee10 0a10 	vmov	r0, s0
 800c86a:	4639      	mov	r1, r7
 800c86c:	f7f4 f974 	bl	8000b58 <__aeabi_d2iz>
 800c870:	2800      	cmp	r0, #0
 800c872:	f000 8088 	beq.w	800c986 <__kernel_cos+0x136>
 800c876:	4632      	mov	r2, r6
 800c878:	463b      	mov	r3, r7
 800c87a:	4630      	mov	r0, r6
 800c87c:	4639      	mov	r1, r7
 800c87e:	f7f3 febb 	bl	80005f8 <__aeabi_dmul>
 800c882:	4b51      	ldr	r3, [pc, #324]	; (800c9c8 <__kernel_cos+0x178>)
 800c884:	2200      	movs	r2, #0
 800c886:	4604      	mov	r4, r0
 800c888:	460d      	mov	r5, r1
 800c88a:	f7f3 feb5 	bl	80005f8 <__aeabi_dmul>
 800c88e:	a340      	add	r3, pc, #256	; (adr r3, 800c990 <__kernel_cos+0x140>)
 800c890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c894:	4682      	mov	sl, r0
 800c896:	468b      	mov	fp, r1
 800c898:	4620      	mov	r0, r4
 800c89a:	4629      	mov	r1, r5
 800c89c:	f7f3 feac 	bl	80005f8 <__aeabi_dmul>
 800c8a0:	a33d      	add	r3, pc, #244	; (adr r3, 800c998 <__kernel_cos+0x148>)
 800c8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a6:	f7f3 fcf1 	bl	800028c <__adddf3>
 800c8aa:	4622      	mov	r2, r4
 800c8ac:	462b      	mov	r3, r5
 800c8ae:	f7f3 fea3 	bl	80005f8 <__aeabi_dmul>
 800c8b2:	a33b      	add	r3, pc, #236	; (adr r3, 800c9a0 <__kernel_cos+0x150>)
 800c8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b8:	f7f3 fce6 	bl	8000288 <__aeabi_dsub>
 800c8bc:	4622      	mov	r2, r4
 800c8be:	462b      	mov	r3, r5
 800c8c0:	f7f3 fe9a 	bl	80005f8 <__aeabi_dmul>
 800c8c4:	a338      	add	r3, pc, #224	; (adr r3, 800c9a8 <__kernel_cos+0x158>)
 800c8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ca:	f7f3 fcdf 	bl	800028c <__adddf3>
 800c8ce:	4622      	mov	r2, r4
 800c8d0:	462b      	mov	r3, r5
 800c8d2:	f7f3 fe91 	bl	80005f8 <__aeabi_dmul>
 800c8d6:	a336      	add	r3, pc, #216	; (adr r3, 800c9b0 <__kernel_cos+0x160>)
 800c8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8dc:	f7f3 fcd4 	bl	8000288 <__aeabi_dsub>
 800c8e0:	4622      	mov	r2, r4
 800c8e2:	462b      	mov	r3, r5
 800c8e4:	f7f3 fe88 	bl	80005f8 <__aeabi_dmul>
 800c8e8:	a333      	add	r3, pc, #204	; (adr r3, 800c9b8 <__kernel_cos+0x168>)
 800c8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ee:	f7f3 fccd 	bl	800028c <__adddf3>
 800c8f2:	4622      	mov	r2, r4
 800c8f4:	462b      	mov	r3, r5
 800c8f6:	f7f3 fe7f 	bl	80005f8 <__aeabi_dmul>
 800c8fa:	4622      	mov	r2, r4
 800c8fc:	462b      	mov	r3, r5
 800c8fe:	f7f3 fe7b 	bl	80005f8 <__aeabi_dmul>
 800c902:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c906:	4604      	mov	r4, r0
 800c908:	460d      	mov	r5, r1
 800c90a:	4630      	mov	r0, r6
 800c90c:	4639      	mov	r1, r7
 800c90e:	f7f3 fe73 	bl	80005f8 <__aeabi_dmul>
 800c912:	460b      	mov	r3, r1
 800c914:	4602      	mov	r2, r0
 800c916:	4629      	mov	r1, r5
 800c918:	4620      	mov	r0, r4
 800c91a:	f7f3 fcb5 	bl	8000288 <__aeabi_dsub>
 800c91e:	4b2b      	ldr	r3, [pc, #172]	; (800c9cc <__kernel_cos+0x17c>)
 800c920:	4598      	cmp	r8, r3
 800c922:	4606      	mov	r6, r0
 800c924:	460f      	mov	r7, r1
 800c926:	dc10      	bgt.n	800c94a <__kernel_cos+0xfa>
 800c928:	4602      	mov	r2, r0
 800c92a:	460b      	mov	r3, r1
 800c92c:	4650      	mov	r0, sl
 800c92e:	4659      	mov	r1, fp
 800c930:	f7f3 fcaa 	bl	8000288 <__aeabi_dsub>
 800c934:	460b      	mov	r3, r1
 800c936:	4926      	ldr	r1, [pc, #152]	; (800c9d0 <__kernel_cos+0x180>)
 800c938:	4602      	mov	r2, r0
 800c93a:	2000      	movs	r0, #0
 800c93c:	f7f3 fca4 	bl	8000288 <__aeabi_dsub>
 800c940:	ec41 0b10 	vmov	d0, r0, r1
 800c944:	b003      	add	sp, #12
 800c946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c94a:	4b22      	ldr	r3, [pc, #136]	; (800c9d4 <__kernel_cos+0x184>)
 800c94c:	4920      	ldr	r1, [pc, #128]	; (800c9d0 <__kernel_cos+0x180>)
 800c94e:	4598      	cmp	r8, r3
 800c950:	bfcc      	ite	gt
 800c952:	4d21      	ldrgt	r5, [pc, #132]	; (800c9d8 <__kernel_cos+0x188>)
 800c954:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800c958:	2400      	movs	r4, #0
 800c95a:	4622      	mov	r2, r4
 800c95c:	462b      	mov	r3, r5
 800c95e:	2000      	movs	r0, #0
 800c960:	f7f3 fc92 	bl	8000288 <__aeabi_dsub>
 800c964:	4622      	mov	r2, r4
 800c966:	4680      	mov	r8, r0
 800c968:	4689      	mov	r9, r1
 800c96a:	462b      	mov	r3, r5
 800c96c:	4650      	mov	r0, sl
 800c96e:	4659      	mov	r1, fp
 800c970:	f7f3 fc8a 	bl	8000288 <__aeabi_dsub>
 800c974:	4632      	mov	r2, r6
 800c976:	463b      	mov	r3, r7
 800c978:	f7f3 fc86 	bl	8000288 <__aeabi_dsub>
 800c97c:	4602      	mov	r2, r0
 800c97e:	460b      	mov	r3, r1
 800c980:	4640      	mov	r0, r8
 800c982:	4649      	mov	r1, r9
 800c984:	e7da      	b.n	800c93c <__kernel_cos+0xec>
 800c986:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800c9c0 <__kernel_cos+0x170>
 800c98a:	e7db      	b.n	800c944 <__kernel_cos+0xf4>
 800c98c:	f3af 8000 	nop.w
 800c990:	be8838d4 	.word	0xbe8838d4
 800c994:	bda8fae9 	.word	0xbda8fae9
 800c998:	bdb4b1c4 	.word	0xbdb4b1c4
 800c99c:	3e21ee9e 	.word	0x3e21ee9e
 800c9a0:	809c52ad 	.word	0x809c52ad
 800c9a4:	3e927e4f 	.word	0x3e927e4f
 800c9a8:	19cb1590 	.word	0x19cb1590
 800c9ac:	3efa01a0 	.word	0x3efa01a0
 800c9b0:	16c15177 	.word	0x16c15177
 800c9b4:	3f56c16c 	.word	0x3f56c16c
 800c9b8:	5555554c 	.word	0x5555554c
 800c9bc:	3fa55555 	.word	0x3fa55555
 800c9c0:	00000000 	.word	0x00000000
 800c9c4:	3ff00000 	.word	0x3ff00000
 800c9c8:	3fe00000 	.word	0x3fe00000
 800c9cc:	3fd33332 	.word	0x3fd33332
 800c9d0:	3ff00000 	.word	0x3ff00000
 800c9d4:	3fe90000 	.word	0x3fe90000
 800c9d8:	3fd20000 	.word	0x3fd20000
 800c9dc:	00000000 	.word	0x00000000

0800c9e0 <__kernel_rem_pio2>:
 800c9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9e4:	ed2d 8b02 	vpush	{d8}
 800c9e8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800c9ec:	f112 0f14 	cmn.w	r2, #20
 800c9f0:	9308      	str	r3, [sp, #32]
 800c9f2:	9101      	str	r1, [sp, #4]
 800c9f4:	4bc4      	ldr	r3, [pc, #784]	; (800cd08 <__kernel_rem_pio2+0x328>)
 800c9f6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800c9f8:	900b      	str	r0, [sp, #44]	; 0x2c
 800c9fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c9fe:	9302      	str	r3, [sp, #8]
 800ca00:	9b08      	ldr	r3, [sp, #32]
 800ca02:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ca06:	bfa8      	it	ge
 800ca08:	1ed4      	subge	r4, r2, #3
 800ca0a:	9306      	str	r3, [sp, #24]
 800ca0c:	bfb2      	itee	lt
 800ca0e:	2400      	movlt	r4, #0
 800ca10:	2318      	movge	r3, #24
 800ca12:	fb94 f4f3 	sdivge	r4, r4, r3
 800ca16:	f06f 0317 	mvn.w	r3, #23
 800ca1a:	fb04 3303 	mla	r3, r4, r3, r3
 800ca1e:	eb03 0a02 	add.w	sl, r3, r2
 800ca22:	9b02      	ldr	r3, [sp, #8]
 800ca24:	9a06      	ldr	r2, [sp, #24]
 800ca26:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800ccf8 <__kernel_rem_pio2+0x318>
 800ca2a:	eb03 0802 	add.w	r8, r3, r2
 800ca2e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ca30:	1aa7      	subs	r7, r4, r2
 800ca32:	ae22      	add	r6, sp, #136	; 0x88
 800ca34:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ca38:	2500      	movs	r5, #0
 800ca3a:	4545      	cmp	r5, r8
 800ca3c:	dd13      	ble.n	800ca66 <__kernel_rem_pio2+0x86>
 800ca3e:	9b08      	ldr	r3, [sp, #32]
 800ca40:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800ccf8 <__kernel_rem_pio2+0x318>
 800ca44:	aa22      	add	r2, sp, #136	; 0x88
 800ca46:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ca4a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800ca4e:	f04f 0800 	mov.w	r8, #0
 800ca52:	9b02      	ldr	r3, [sp, #8]
 800ca54:	4598      	cmp	r8, r3
 800ca56:	dc2f      	bgt.n	800cab8 <__kernel_rem_pio2+0xd8>
 800ca58:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ca5c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800ca60:	462f      	mov	r7, r5
 800ca62:	2600      	movs	r6, #0
 800ca64:	e01b      	b.n	800ca9e <__kernel_rem_pio2+0xbe>
 800ca66:	42ef      	cmn	r7, r5
 800ca68:	d407      	bmi.n	800ca7a <__kernel_rem_pio2+0x9a>
 800ca6a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ca6e:	f7f3 fd59 	bl	8000524 <__aeabi_i2d>
 800ca72:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ca76:	3501      	adds	r5, #1
 800ca78:	e7df      	b.n	800ca3a <__kernel_rem_pio2+0x5a>
 800ca7a:	ec51 0b18 	vmov	r0, r1, d8
 800ca7e:	e7f8      	b.n	800ca72 <__kernel_rem_pio2+0x92>
 800ca80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca84:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ca88:	f7f3 fdb6 	bl	80005f8 <__aeabi_dmul>
 800ca8c:	4602      	mov	r2, r0
 800ca8e:	460b      	mov	r3, r1
 800ca90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca94:	f7f3 fbfa 	bl	800028c <__adddf3>
 800ca98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca9c:	3601      	adds	r6, #1
 800ca9e:	9b06      	ldr	r3, [sp, #24]
 800caa0:	429e      	cmp	r6, r3
 800caa2:	f1a7 0708 	sub.w	r7, r7, #8
 800caa6:	ddeb      	ble.n	800ca80 <__kernel_rem_pio2+0xa0>
 800caa8:	ed9d 7b04 	vldr	d7, [sp, #16]
 800caac:	f108 0801 	add.w	r8, r8, #1
 800cab0:	ecab 7b02 	vstmia	fp!, {d7}
 800cab4:	3508      	adds	r5, #8
 800cab6:	e7cc      	b.n	800ca52 <__kernel_rem_pio2+0x72>
 800cab8:	9b02      	ldr	r3, [sp, #8]
 800caba:	aa0e      	add	r2, sp, #56	; 0x38
 800cabc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cac0:	930d      	str	r3, [sp, #52]	; 0x34
 800cac2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800cac4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cac8:	9c02      	ldr	r4, [sp, #8]
 800caca:	930c      	str	r3, [sp, #48]	; 0x30
 800cacc:	00e3      	lsls	r3, r4, #3
 800cace:	930a      	str	r3, [sp, #40]	; 0x28
 800cad0:	ab9a      	add	r3, sp, #616	; 0x268
 800cad2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cad6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800cada:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800cade:	ab72      	add	r3, sp, #456	; 0x1c8
 800cae0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800cae4:	46c3      	mov	fp, r8
 800cae6:	46a1      	mov	r9, r4
 800cae8:	f1b9 0f00 	cmp.w	r9, #0
 800caec:	f1a5 0508 	sub.w	r5, r5, #8
 800caf0:	dc77      	bgt.n	800cbe2 <__kernel_rem_pio2+0x202>
 800caf2:	ec47 6b10 	vmov	d0, r6, r7
 800caf6:	4650      	mov	r0, sl
 800caf8:	f000 fe52 	bl	800d7a0 <scalbn>
 800cafc:	ec57 6b10 	vmov	r6, r7, d0
 800cb00:	2200      	movs	r2, #0
 800cb02:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800cb06:	ee10 0a10 	vmov	r0, s0
 800cb0a:	4639      	mov	r1, r7
 800cb0c:	f7f3 fd74 	bl	80005f8 <__aeabi_dmul>
 800cb10:	ec41 0b10 	vmov	d0, r0, r1
 800cb14:	f000 fdbc 	bl	800d690 <floor>
 800cb18:	4b7c      	ldr	r3, [pc, #496]	; (800cd0c <__kernel_rem_pio2+0x32c>)
 800cb1a:	ec51 0b10 	vmov	r0, r1, d0
 800cb1e:	2200      	movs	r2, #0
 800cb20:	f7f3 fd6a 	bl	80005f8 <__aeabi_dmul>
 800cb24:	4602      	mov	r2, r0
 800cb26:	460b      	mov	r3, r1
 800cb28:	4630      	mov	r0, r6
 800cb2a:	4639      	mov	r1, r7
 800cb2c:	f7f3 fbac 	bl	8000288 <__aeabi_dsub>
 800cb30:	460f      	mov	r7, r1
 800cb32:	4606      	mov	r6, r0
 800cb34:	f7f4 f810 	bl	8000b58 <__aeabi_d2iz>
 800cb38:	9004      	str	r0, [sp, #16]
 800cb3a:	f7f3 fcf3 	bl	8000524 <__aeabi_i2d>
 800cb3e:	4602      	mov	r2, r0
 800cb40:	460b      	mov	r3, r1
 800cb42:	4630      	mov	r0, r6
 800cb44:	4639      	mov	r1, r7
 800cb46:	f7f3 fb9f 	bl	8000288 <__aeabi_dsub>
 800cb4a:	f1ba 0f00 	cmp.w	sl, #0
 800cb4e:	4606      	mov	r6, r0
 800cb50:	460f      	mov	r7, r1
 800cb52:	dd6d      	ble.n	800cc30 <__kernel_rem_pio2+0x250>
 800cb54:	1e62      	subs	r2, r4, #1
 800cb56:	ab0e      	add	r3, sp, #56	; 0x38
 800cb58:	9d04      	ldr	r5, [sp, #16]
 800cb5a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800cb5e:	f1ca 0118 	rsb	r1, sl, #24
 800cb62:	fa40 f301 	asr.w	r3, r0, r1
 800cb66:	441d      	add	r5, r3
 800cb68:	408b      	lsls	r3, r1
 800cb6a:	1ac0      	subs	r0, r0, r3
 800cb6c:	ab0e      	add	r3, sp, #56	; 0x38
 800cb6e:	9504      	str	r5, [sp, #16]
 800cb70:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800cb74:	f1ca 0317 	rsb	r3, sl, #23
 800cb78:	fa40 fb03 	asr.w	fp, r0, r3
 800cb7c:	f1bb 0f00 	cmp.w	fp, #0
 800cb80:	dd65      	ble.n	800cc4e <__kernel_rem_pio2+0x26e>
 800cb82:	9b04      	ldr	r3, [sp, #16]
 800cb84:	2200      	movs	r2, #0
 800cb86:	3301      	adds	r3, #1
 800cb88:	9304      	str	r3, [sp, #16]
 800cb8a:	4615      	mov	r5, r2
 800cb8c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800cb90:	4294      	cmp	r4, r2
 800cb92:	f300 809c 	bgt.w	800ccce <__kernel_rem_pio2+0x2ee>
 800cb96:	f1ba 0f00 	cmp.w	sl, #0
 800cb9a:	dd07      	ble.n	800cbac <__kernel_rem_pio2+0x1cc>
 800cb9c:	f1ba 0f01 	cmp.w	sl, #1
 800cba0:	f000 80c0 	beq.w	800cd24 <__kernel_rem_pio2+0x344>
 800cba4:	f1ba 0f02 	cmp.w	sl, #2
 800cba8:	f000 80c6 	beq.w	800cd38 <__kernel_rem_pio2+0x358>
 800cbac:	f1bb 0f02 	cmp.w	fp, #2
 800cbb0:	d14d      	bne.n	800cc4e <__kernel_rem_pio2+0x26e>
 800cbb2:	4632      	mov	r2, r6
 800cbb4:	463b      	mov	r3, r7
 800cbb6:	4956      	ldr	r1, [pc, #344]	; (800cd10 <__kernel_rem_pio2+0x330>)
 800cbb8:	2000      	movs	r0, #0
 800cbba:	f7f3 fb65 	bl	8000288 <__aeabi_dsub>
 800cbbe:	4606      	mov	r6, r0
 800cbc0:	460f      	mov	r7, r1
 800cbc2:	2d00      	cmp	r5, #0
 800cbc4:	d043      	beq.n	800cc4e <__kernel_rem_pio2+0x26e>
 800cbc6:	4650      	mov	r0, sl
 800cbc8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800cd00 <__kernel_rem_pio2+0x320>
 800cbcc:	f000 fde8 	bl	800d7a0 <scalbn>
 800cbd0:	4630      	mov	r0, r6
 800cbd2:	4639      	mov	r1, r7
 800cbd4:	ec53 2b10 	vmov	r2, r3, d0
 800cbd8:	f7f3 fb56 	bl	8000288 <__aeabi_dsub>
 800cbdc:	4606      	mov	r6, r0
 800cbde:	460f      	mov	r7, r1
 800cbe0:	e035      	b.n	800cc4e <__kernel_rem_pio2+0x26e>
 800cbe2:	4b4c      	ldr	r3, [pc, #304]	; (800cd14 <__kernel_rem_pio2+0x334>)
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	4630      	mov	r0, r6
 800cbe8:	4639      	mov	r1, r7
 800cbea:	f7f3 fd05 	bl	80005f8 <__aeabi_dmul>
 800cbee:	f7f3 ffb3 	bl	8000b58 <__aeabi_d2iz>
 800cbf2:	f7f3 fc97 	bl	8000524 <__aeabi_i2d>
 800cbf6:	4602      	mov	r2, r0
 800cbf8:	460b      	mov	r3, r1
 800cbfa:	ec43 2b18 	vmov	d8, r2, r3
 800cbfe:	4b46      	ldr	r3, [pc, #280]	; (800cd18 <__kernel_rem_pio2+0x338>)
 800cc00:	2200      	movs	r2, #0
 800cc02:	f7f3 fcf9 	bl	80005f8 <__aeabi_dmul>
 800cc06:	4602      	mov	r2, r0
 800cc08:	460b      	mov	r3, r1
 800cc0a:	4630      	mov	r0, r6
 800cc0c:	4639      	mov	r1, r7
 800cc0e:	f7f3 fb3b 	bl	8000288 <__aeabi_dsub>
 800cc12:	f7f3 ffa1 	bl	8000b58 <__aeabi_d2iz>
 800cc16:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cc1a:	f84b 0b04 	str.w	r0, [fp], #4
 800cc1e:	ec51 0b18 	vmov	r0, r1, d8
 800cc22:	f7f3 fb33 	bl	800028c <__adddf3>
 800cc26:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800cc2a:	4606      	mov	r6, r0
 800cc2c:	460f      	mov	r7, r1
 800cc2e:	e75b      	b.n	800cae8 <__kernel_rem_pio2+0x108>
 800cc30:	d106      	bne.n	800cc40 <__kernel_rem_pio2+0x260>
 800cc32:	1e63      	subs	r3, r4, #1
 800cc34:	aa0e      	add	r2, sp, #56	; 0x38
 800cc36:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cc3a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800cc3e:	e79d      	b.n	800cb7c <__kernel_rem_pio2+0x19c>
 800cc40:	4b36      	ldr	r3, [pc, #216]	; (800cd1c <__kernel_rem_pio2+0x33c>)
 800cc42:	2200      	movs	r2, #0
 800cc44:	f7f3 ff5e 	bl	8000b04 <__aeabi_dcmpge>
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	d13d      	bne.n	800ccc8 <__kernel_rem_pio2+0x2e8>
 800cc4c:	4683      	mov	fp, r0
 800cc4e:	2200      	movs	r2, #0
 800cc50:	2300      	movs	r3, #0
 800cc52:	4630      	mov	r0, r6
 800cc54:	4639      	mov	r1, r7
 800cc56:	f7f3 ff37 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc5a:	2800      	cmp	r0, #0
 800cc5c:	f000 80c0 	beq.w	800cde0 <__kernel_rem_pio2+0x400>
 800cc60:	1e65      	subs	r5, r4, #1
 800cc62:	462b      	mov	r3, r5
 800cc64:	2200      	movs	r2, #0
 800cc66:	9902      	ldr	r1, [sp, #8]
 800cc68:	428b      	cmp	r3, r1
 800cc6a:	da6c      	bge.n	800cd46 <__kernel_rem_pio2+0x366>
 800cc6c:	2a00      	cmp	r2, #0
 800cc6e:	f000 8089 	beq.w	800cd84 <__kernel_rem_pio2+0x3a4>
 800cc72:	ab0e      	add	r3, sp, #56	; 0x38
 800cc74:	f1aa 0a18 	sub.w	sl, sl, #24
 800cc78:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	f000 80ad 	beq.w	800cddc <__kernel_rem_pio2+0x3fc>
 800cc82:	4650      	mov	r0, sl
 800cc84:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800cd00 <__kernel_rem_pio2+0x320>
 800cc88:	f000 fd8a 	bl	800d7a0 <scalbn>
 800cc8c:	ab9a      	add	r3, sp, #616	; 0x268
 800cc8e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cc92:	ec57 6b10 	vmov	r6, r7, d0
 800cc96:	00ec      	lsls	r4, r5, #3
 800cc98:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800cc9c:	46aa      	mov	sl, r5
 800cc9e:	f1ba 0f00 	cmp.w	sl, #0
 800cca2:	f280 80d6 	bge.w	800ce52 <__kernel_rem_pio2+0x472>
 800cca6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800ccf8 <__kernel_rem_pio2+0x318>
 800ccaa:	462e      	mov	r6, r5
 800ccac:	2e00      	cmp	r6, #0
 800ccae:	f2c0 8104 	blt.w	800ceba <__kernel_rem_pio2+0x4da>
 800ccb2:	ab72      	add	r3, sp, #456	; 0x1c8
 800ccb4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ccb8:	f8df a064 	ldr.w	sl, [pc, #100]	; 800cd20 <__kernel_rem_pio2+0x340>
 800ccbc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800ccc0:	f04f 0800 	mov.w	r8, #0
 800ccc4:	1baf      	subs	r7, r5, r6
 800ccc6:	e0ea      	b.n	800ce9e <__kernel_rem_pio2+0x4be>
 800ccc8:	f04f 0b02 	mov.w	fp, #2
 800cccc:	e759      	b.n	800cb82 <__kernel_rem_pio2+0x1a2>
 800ccce:	f8d8 3000 	ldr.w	r3, [r8]
 800ccd2:	b955      	cbnz	r5, 800ccea <__kernel_rem_pio2+0x30a>
 800ccd4:	b123      	cbz	r3, 800cce0 <__kernel_rem_pio2+0x300>
 800ccd6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ccda:	f8c8 3000 	str.w	r3, [r8]
 800ccde:	2301      	movs	r3, #1
 800cce0:	3201      	adds	r2, #1
 800cce2:	f108 0804 	add.w	r8, r8, #4
 800cce6:	461d      	mov	r5, r3
 800cce8:	e752      	b.n	800cb90 <__kernel_rem_pio2+0x1b0>
 800ccea:	1acb      	subs	r3, r1, r3
 800ccec:	f8c8 3000 	str.w	r3, [r8]
 800ccf0:	462b      	mov	r3, r5
 800ccf2:	e7f5      	b.n	800cce0 <__kernel_rem_pio2+0x300>
 800ccf4:	f3af 8000 	nop.w
	...
 800cd04:	3ff00000 	.word	0x3ff00000
 800cd08:	0800e028 	.word	0x0800e028
 800cd0c:	40200000 	.word	0x40200000
 800cd10:	3ff00000 	.word	0x3ff00000
 800cd14:	3e700000 	.word	0x3e700000
 800cd18:	41700000 	.word	0x41700000
 800cd1c:	3fe00000 	.word	0x3fe00000
 800cd20:	0800dfe8 	.word	0x0800dfe8
 800cd24:	1e62      	subs	r2, r4, #1
 800cd26:	ab0e      	add	r3, sp, #56	; 0x38
 800cd28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd2c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cd30:	a90e      	add	r1, sp, #56	; 0x38
 800cd32:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cd36:	e739      	b.n	800cbac <__kernel_rem_pio2+0x1cc>
 800cd38:	1e62      	subs	r2, r4, #1
 800cd3a:	ab0e      	add	r3, sp, #56	; 0x38
 800cd3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd40:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cd44:	e7f4      	b.n	800cd30 <__kernel_rem_pio2+0x350>
 800cd46:	a90e      	add	r1, sp, #56	; 0x38
 800cd48:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cd4c:	3b01      	subs	r3, #1
 800cd4e:	430a      	orrs	r2, r1
 800cd50:	e789      	b.n	800cc66 <__kernel_rem_pio2+0x286>
 800cd52:	3301      	adds	r3, #1
 800cd54:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800cd58:	2900      	cmp	r1, #0
 800cd5a:	d0fa      	beq.n	800cd52 <__kernel_rem_pio2+0x372>
 800cd5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd5e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800cd62:	446a      	add	r2, sp
 800cd64:	3a98      	subs	r2, #152	; 0x98
 800cd66:	920a      	str	r2, [sp, #40]	; 0x28
 800cd68:	9a08      	ldr	r2, [sp, #32]
 800cd6a:	18e3      	adds	r3, r4, r3
 800cd6c:	18a5      	adds	r5, r4, r2
 800cd6e:	aa22      	add	r2, sp, #136	; 0x88
 800cd70:	f104 0801 	add.w	r8, r4, #1
 800cd74:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800cd78:	9304      	str	r3, [sp, #16]
 800cd7a:	9b04      	ldr	r3, [sp, #16]
 800cd7c:	4543      	cmp	r3, r8
 800cd7e:	da04      	bge.n	800cd8a <__kernel_rem_pio2+0x3aa>
 800cd80:	461c      	mov	r4, r3
 800cd82:	e6a3      	b.n	800cacc <__kernel_rem_pio2+0xec>
 800cd84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cd86:	2301      	movs	r3, #1
 800cd88:	e7e4      	b.n	800cd54 <__kernel_rem_pio2+0x374>
 800cd8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd8c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800cd90:	f7f3 fbc8 	bl	8000524 <__aeabi_i2d>
 800cd94:	e8e5 0102 	strd	r0, r1, [r5], #8
 800cd98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd9a:	46ab      	mov	fp, r5
 800cd9c:	461c      	mov	r4, r3
 800cd9e:	f04f 0900 	mov.w	r9, #0
 800cda2:	2600      	movs	r6, #0
 800cda4:	2700      	movs	r7, #0
 800cda6:	9b06      	ldr	r3, [sp, #24]
 800cda8:	4599      	cmp	r9, r3
 800cdaa:	dd06      	ble.n	800cdba <__kernel_rem_pio2+0x3da>
 800cdac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdae:	e8e3 6702 	strd	r6, r7, [r3], #8
 800cdb2:	f108 0801 	add.w	r8, r8, #1
 800cdb6:	930a      	str	r3, [sp, #40]	; 0x28
 800cdb8:	e7df      	b.n	800cd7a <__kernel_rem_pio2+0x39a>
 800cdba:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800cdbe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800cdc2:	f7f3 fc19 	bl	80005f8 <__aeabi_dmul>
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	460b      	mov	r3, r1
 800cdca:	4630      	mov	r0, r6
 800cdcc:	4639      	mov	r1, r7
 800cdce:	f7f3 fa5d 	bl	800028c <__adddf3>
 800cdd2:	f109 0901 	add.w	r9, r9, #1
 800cdd6:	4606      	mov	r6, r0
 800cdd8:	460f      	mov	r7, r1
 800cdda:	e7e4      	b.n	800cda6 <__kernel_rem_pio2+0x3c6>
 800cddc:	3d01      	subs	r5, #1
 800cdde:	e748      	b.n	800cc72 <__kernel_rem_pio2+0x292>
 800cde0:	ec47 6b10 	vmov	d0, r6, r7
 800cde4:	f1ca 0000 	rsb	r0, sl, #0
 800cde8:	f000 fcda 	bl	800d7a0 <scalbn>
 800cdec:	ec57 6b10 	vmov	r6, r7, d0
 800cdf0:	4ba0      	ldr	r3, [pc, #640]	; (800d074 <__kernel_rem_pio2+0x694>)
 800cdf2:	ee10 0a10 	vmov	r0, s0
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	4639      	mov	r1, r7
 800cdfa:	f7f3 fe83 	bl	8000b04 <__aeabi_dcmpge>
 800cdfe:	b1f8      	cbz	r0, 800ce40 <__kernel_rem_pio2+0x460>
 800ce00:	4b9d      	ldr	r3, [pc, #628]	; (800d078 <__kernel_rem_pio2+0x698>)
 800ce02:	2200      	movs	r2, #0
 800ce04:	4630      	mov	r0, r6
 800ce06:	4639      	mov	r1, r7
 800ce08:	f7f3 fbf6 	bl	80005f8 <__aeabi_dmul>
 800ce0c:	f7f3 fea4 	bl	8000b58 <__aeabi_d2iz>
 800ce10:	4680      	mov	r8, r0
 800ce12:	f7f3 fb87 	bl	8000524 <__aeabi_i2d>
 800ce16:	4b97      	ldr	r3, [pc, #604]	; (800d074 <__kernel_rem_pio2+0x694>)
 800ce18:	2200      	movs	r2, #0
 800ce1a:	f7f3 fbed 	bl	80005f8 <__aeabi_dmul>
 800ce1e:	460b      	mov	r3, r1
 800ce20:	4602      	mov	r2, r0
 800ce22:	4639      	mov	r1, r7
 800ce24:	4630      	mov	r0, r6
 800ce26:	f7f3 fa2f 	bl	8000288 <__aeabi_dsub>
 800ce2a:	f7f3 fe95 	bl	8000b58 <__aeabi_d2iz>
 800ce2e:	1c65      	adds	r5, r4, #1
 800ce30:	ab0e      	add	r3, sp, #56	; 0x38
 800ce32:	f10a 0a18 	add.w	sl, sl, #24
 800ce36:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ce3a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ce3e:	e720      	b.n	800cc82 <__kernel_rem_pio2+0x2a2>
 800ce40:	4630      	mov	r0, r6
 800ce42:	4639      	mov	r1, r7
 800ce44:	f7f3 fe88 	bl	8000b58 <__aeabi_d2iz>
 800ce48:	ab0e      	add	r3, sp, #56	; 0x38
 800ce4a:	4625      	mov	r5, r4
 800ce4c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ce50:	e717      	b.n	800cc82 <__kernel_rem_pio2+0x2a2>
 800ce52:	ab0e      	add	r3, sp, #56	; 0x38
 800ce54:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800ce58:	f7f3 fb64 	bl	8000524 <__aeabi_i2d>
 800ce5c:	4632      	mov	r2, r6
 800ce5e:	463b      	mov	r3, r7
 800ce60:	f7f3 fbca 	bl	80005f8 <__aeabi_dmul>
 800ce64:	4b84      	ldr	r3, [pc, #528]	; (800d078 <__kernel_rem_pio2+0x698>)
 800ce66:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	4630      	mov	r0, r6
 800ce6e:	4639      	mov	r1, r7
 800ce70:	f7f3 fbc2 	bl	80005f8 <__aeabi_dmul>
 800ce74:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ce78:	4606      	mov	r6, r0
 800ce7a:	460f      	mov	r7, r1
 800ce7c:	e70f      	b.n	800cc9e <__kernel_rem_pio2+0x2be>
 800ce7e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ce82:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800ce86:	f7f3 fbb7 	bl	80005f8 <__aeabi_dmul>
 800ce8a:	4602      	mov	r2, r0
 800ce8c:	460b      	mov	r3, r1
 800ce8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce92:	f7f3 f9fb 	bl	800028c <__adddf3>
 800ce96:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ce9a:	f108 0801 	add.w	r8, r8, #1
 800ce9e:	9b02      	ldr	r3, [sp, #8]
 800cea0:	4598      	cmp	r8, r3
 800cea2:	dc01      	bgt.n	800cea8 <__kernel_rem_pio2+0x4c8>
 800cea4:	45b8      	cmp	r8, r7
 800cea6:	ddea      	ble.n	800ce7e <__kernel_rem_pio2+0x49e>
 800cea8:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ceac:	ab4a      	add	r3, sp, #296	; 0x128
 800ceae:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ceb2:	ed87 7b00 	vstr	d7, [r7]
 800ceb6:	3e01      	subs	r6, #1
 800ceb8:	e6f8      	b.n	800ccac <__kernel_rem_pio2+0x2cc>
 800ceba:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800cebc:	2b02      	cmp	r3, #2
 800cebe:	dc0b      	bgt.n	800ced8 <__kernel_rem_pio2+0x4f8>
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	dc35      	bgt.n	800cf30 <__kernel_rem_pio2+0x550>
 800cec4:	d059      	beq.n	800cf7a <__kernel_rem_pio2+0x59a>
 800cec6:	9b04      	ldr	r3, [sp, #16]
 800cec8:	f003 0007 	and.w	r0, r3, #7
 800cecc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800ced0:	ecbd 8b02 	vpop	{d8}
 800ced4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ced8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ceda:	2b03      	cmp	r3, #3
 800cedc:	d1f3      	bne.n	800cec6 <__kernel_rem_pio2+0x4e6>
 800cede:	ab4a      	add	r3, sp, #296	; 0x128
 800cee0:	4423      	add	r3, r4
 800cee2:	9306      	str	r3, [sp, #24]
 800cee4:	461c      	mov	r4, r3
 800cee6:	469a      	mov	sl, r3
 800cee8:	9502      	str	r5, [sp, #8]
 800ceea:	9b02      	ldr	r3, [sp, #8]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	f1aa 0a08 	sub.w	sl, sl, #8
 800cef2:	dc6b      	bgt.n	800cfcc <__kernel_rem_pio2+0x5ec>
 800cef4:	46aa      	mov	sl, r5
 800cef6:	f1ba 0f01 	cmp.w	sl, #1
 800cefa:	f1a4 0408 	sub.w	r4, r4, #8
 800cefe:	f300 8085 	bgt.w	800d00c <__kernel_rem_pio2+0x62c>
 800cf02:	9c06      	ldr	r4, [sp, #24]
 800cf04:	2000      	movs	r0, #0
 800cf06:	3408      	adds	r4, #8
 800cf08:	2100      	movs	r1, #0
 800cf0a:	2d01      	cmp	r5, #1
 800cf0c:	f300 809d 	bgt.w	800d04a <__kernel_rem_pio2+0x66a>
 800cf10:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800cf14:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800cf18:	f1bb 0f00 	cmp.w	fp, #0
 800cf1c:	f040 809b 	bne.w	800d056 <__kernel_rem_pio2+0x676>
 800cf20:	9b01      	ldr	r3, [sp, #4]
 800cf22:	e9c3 5600 	strd	r5, r6, [r3]
 800cf26:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800cf2a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800cf2e:	e7ca      	b.n	800cec6 <__kernel_rem_pio2+0x4e6>
 800cf30:	3408      	adds	r4, #8
 800cf32:	ab4a      	add	r3, sp, #296	; 0x128
 800cf34:	441c      	add	r4, r3
 800cf36:	462e      	mov	r6, r5
 800cf38:	2000      	movs	r0, #0
 800cf3a:	2100      	movs	r1, #0
 800cf3c:	2e00      	cmp	r6, #0
 800cf3e:	da36      	bge.n	800cfae <__kernel_rem_pio2+0x5ce>
 800cf40:	f1bb 0f00 	cmp.w	fp, #0
 800cf44:	d039      	beq.n	800cfba <__kernel_rem_pio2+0x5da>
 800cf46:	4602      	mov	r2, r0
 800cf48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf4c:	9c01      	ldr	r4, [sp, #4]
 800cf4e:	e9c4 2300 	strd	r2, r3, [r4]
 800cf52:	4602      	mov	r2, r0
 800cf54:	460b      	mov	r3, r1
 800cf56:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800cf5a:	f7f3 f995 	bl	8000288 <__aeabi_dsub>
 800cf5e:	ae4c      	add	r6, sp, #304	; 0x130
 800cf60:	2401      	movs	r4, #1
 800cf62:	42a5      	cmp	r5, r4
 800cf64:	da2c      	bge.n	800cfc0 <__kernel_rem_pio2+0x5e0>
 800cf66:	f1bb 0f00 	cmp.w	fp, #0
 800cf6a:	d002      	beq.n	800cf72 <__kernel_rem_pio2+0x592>
 800cf6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf70:	4619      	mov	r1, r3
 800cf72:	9b01      	ldr	r3, [sp, #4]
 800cf74:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800cf78:	e7a5      	b.n	800cec6 <__kernel_rem_pio2+0x4e6>
 800cf7a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800cf7e:	eb0d 0403 	add.w	r4, sp, r3
 800cf82:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800cf86:	2000      	movs	r0, #0
 800cf88:	2100      	movs	r1, #0
 800cf8a:	2d00      	cmp	r5, #0
 800cf8c:	da09      	bge.n	800cfa2 <__kernel_rem_pio2+0x5c2>
 800cf8e:	f1bb 0f00 	cmp.w	fp, #0
 800cf92:	d002      	beq.n	800cf9a <__kernel_rem_pio2+0x5ba>
 800cf94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf98:	4619      	mov	r1, r3
 800cf9a:	9b01      	ldr	r3, [sp, #4]
 800cf9c:	e9c3 0100 	strd	r0, r1, [r3]
 800cfa0:	e791      	b.n	800cec6 <__kernel_rem_pio2+0x4e6>
 800cfa2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cfa6:	f7f3 f971 	bl	800028c <__adddf3>
 800cfaa:	3d01      	subs	r5, #1
 800cfac:	e7ed      	b.n	800cf8a <__kernel_rem_pio2+0x5aa>
 800cfae:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cfb2:	f7f3 f96b 	bl	800028c <__adddf3>
 800cfb6:	3e01      	subs	r6, #1
 800cfb8:	e7c0      	b.n	800cf3c <__kernel_rem_pio2+0x55c>
 800cfba:	4602      	mov	r2, r0
 800cfbc:	460b      	mov	r3, r1
 800cfbe:	e7c5      	b.n	800cf4c <__kernel_rem_pio2+0x56c>
 800cfc0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800cfc4:	f7f3 f962 	bl	800028c <__adddf3>
 800cfc8:	3401      	adds	r4, #1
 800cfca:	e7ca      	b.n	800cf62 <__kernel_rem_pio2+0x582>
 800cfcc:	e9da 8900 	ldrd	r8, r9, [sl]
 800cfd0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800cfd4:	9b02      	ldr	r3, [sp, #8]
 800cfd6:	3b01      	subs	r3, #1
 800cfd8:	9302      	str	r3, [sp, #8]
 800cfda:	4632      	mov	r2, r6
 800cfdc:	463b      	mov	r3, r7
 800cfde:	4640      	mov	r0, r8
 800cfe0:	4649      	mov	r1, r9
 800cfe2:	f7f3 f953 	bl	800028c <__adddf3>
 800cfe6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cfea:	4602      	mov	r2, r0
 800cfec:	460b      	mov	r3, r1
 800cfee:	4640      	mov	r0, r8
 800cff0:	4649      	mov	r1, r9
 800cff2:	f7f3 f949 	bl	8000288 <__aeabi_dsub>
 800cff6:	4632      	mov	r2, r6
 800cff8:	463b      	mov	r3, r7
 800cffa:	f7f3 f947 	bl	800028c <__adddf3>
 800cffe:	ed9d 7b08 	vldr	d7, [sp, #32]
 800d002:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d006:	ed8a 7b00 	vstr	d7, [sl]
 800d00a:	e76e      	b.n	800ceea <__kernel_rem_pio2+0x50a>
 800d00c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d010:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800d014:	4640      	mov	r0, r8
 800d016:	4632      	mov	r2, r6
 800d018:	463b      	mov	r3, r7
 800d01a:	4649      	mov	r1, r9
 800d01c:	f7f3 f936 	bl	800028c <__adddf3>
 800d020:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d024:	4602      	mov	r2, r0
 800d026:	460b      	mov	r3, r1
 800d028:	4640      	mov	r0, r8
 800d02a:	4649      	mov	r1, r9
 800d02c:	f7f3 f92c 	bl	8000288 <__aeabi_dsub>
 800d030:	4632      	mov	r2, r6
 800d032:	463b      	mov	r3, r7
 800d034:	f7f3 f92a 	bl	800028c <__adddf3>
 800d038:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d03c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d040:	ed84 7b00 	vstr	d7, [r4]
 800d044:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d048:	e755      	b.n	800cef6 <__kernel_rem_pio2+0x516>
 800d04a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d04e:	f7f3 f91d 	bl	800028c <__adddf3>
 800d052:	3d01      	subs	r5, #1
 800d054:	e759      	b.n	800cf0a <__kernel_rem_pio2+0x52a>
 800d056:	9b01      	ldr	r3, [sp, #4]
 800d058:	9a01      	ldr	r2, [sp, #4]
 800d05a:	601d      	str	r5, [r3, #0]
 800d05c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800d060:	605c      	str	r4, [r3, #4]
 800d062:	609f      	str	r7, [r3, #8]
 800d064:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800d068:	60d3      	str	r3, [r2, #12]
 800d06a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d06e:	6110      	str	r0, [r2, #16]
 800d070:	6153      	str	r3, [r2, #20]
 800d072:	e728      	b.n	800cec6 <__kernel_rem_pio2+0x4e6>
 800d074:	41700000 	.word	0x41700000
 800d078:	3e700000 	.word	0x3e700000
 800d07c:	00000000 	.word	0x00000000

0800d080 <__kernel_sin>:
 800d080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d084:	ed2d 8b04 	vpush	{d8-d9}
 800d088:	eeb0 8a41 	vmov.f32	s16, s2
 800d08c:	eef0 8a61 	vmov.f32	s17, s3
 800d090:	ec55 4b10 	vmov	r4, r5, d0
 800d094:	b083      	sub	sp, #12
 800d096:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d09a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d09e:	9001      	str	r0, [sp, #4]
 800d0a0:	da06      	bge.n	800d0b0 <__kernel_sin+0x30>
 800d0a2:	ee10 0a10 	vmov	r0, s0
 800d0a6:	4629      	mov	r1, r5
 800d0a8:	f7f3 fd56 	bl	8000b58 <__aeabi_d2iz>
 800d0ac:	2800      	cmp	r0, #0
 800d0ae:	d051      	beq.n	800d154 <__kernel_sin+0xd4>
 800d0b0:	4622      	mov	r2, r4
 800d0b2:	462b      	mov	r3, r5
 800d0b4:	4620      	mov	r0, r4
 800d0b6:	4629      	mov	r1, r5
 800d0b8:	f7f3 fa9e 	bl	80005f8 <__aeabi_dmul>
 800d0bc:	4682      	mov	sl, r0
 800d0be:	468b      	mov	fp, r1
 800d0c0:	4602      	mov	r2, r0
 800d0c2:	460b      	mov	r3, r1
 800d0c4:	4620      	mov	r0, r4
 800d0c6:	4629      	mov	r1, r5
 800d0c8:	f7f3 fa96 	bl	80005f8 <__aeabi_dmul>
 800d0cc:	a341      	add	r3, pc, #260	; (adr r3, 800d1d4 <__kernel_sin+0x154>)
 800d0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d2:	4680      	mov	r8, r0
 800d0d4:	4689      	mov	r9, r1
 800d0d6:	4650      	mov	r0, sl
 800d0d8:	4659      	mov	r1, fp
 800d0da:	f7f3 fa8d 	bl	80005f8 <__aeabi_dmul>
 800d0de:	a33f      	add	r3, pc, #252	; (adr r3, 800d1dc <__kernel_sin+0x15c>)
 800d0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e4:	f7f3 f8d0 	bl	8000288 <__aeabi_dsub>
 800d0e8:	4652      	mov	r2, sl
 800d0ea:	465b      	mov	r3, fp
 800d0ec:	f7f3 fa84 	bl	80005f8 <__aeabi_dmul>
 800d0f0:	a33c      	add	r3, pc, #240	; (adr r3, 800d1e4 <__kernel_sin+0x164>)
 800d0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f6:	f7f3 f8c9 	bl	800028c <__adddf3>
 800d0fa:	4652      	mov	r2, sl
 800d0fc:	465b      	mov	r3, fp
 800d0fe:	f7f3 fa7b 	bl	80005f8 <__aeabi_dmul>
 800d102:	a33a      	add	r3, pc, #232	; (adr r3, 800d1ec <__kernel_sin+0x16c>)
 800d104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d108:	f7f3 f8be 	bl	8000288 <__aeabi_dsub>
 800d10c:	4652      	mov	r2, sl
 800d10e:	465b      	mov	r3, fp
 800d110:	f7f3 fa72 	bl	80005f8 <__aeabi_dmul>
 800d114:	a337      	add	r3, pc, #220	; (adr r3, 800d1f4 <__kernel_sin+0x174>)
 800d116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d11a:	f7f3 f8b7 	bl	800028c <__adddf3>
 800d11e:	9b01      	ldr	r3, [sp, #4]
 800d120:	4606      	mov	r6, r0
 800d122:	460f      	mov	r7, r1
 800d124:	b9eb      	cbnz	r3, 800d162 <__kernel_sin+0xe2>
 800d126:	4602      	mov	r2, r0
 800d128:	460b      	mov	r3, r1
 800d12a:	4650      	mov	r0, sl
 800d12c:	4659      	mov	r1, fp
 800d12e:	f7f3 fa63 	bl	80005f8 <__aeabi_dmul>
 800d132:	a325      	add	r3, pc, #148	; (adr r3, 800d1c8 <__kernel_sin+0x148>)
 800d134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d138:	f7f3 f8a6 	bl	8000288 <__aeabi_dsub>
 800d13c:	4642      	mov	r2, r8
 800d13e:	464b      	mov	r3, r9
 800d140:	f7f3 fa5a 	bl	80005f8 <__aeabi_dmul>
 800d144:	4602      	mov	r2, r0
 800d146:	460b      	mov	r3, r1
 800d148:	4620      	mov	r0, r4
 800d14a:	4629      	mov	r1, r5
 800d14c:	f7f3 f89e 	bl	800028c <__adddf3>
 800d150:	4604      	mov	r4, r0
 800d152:	460d      	mov	r5, r1
 800d154:	ec45 4b10 	vmov	d0, r4, r5
 800d158:	b003      	add	sp, #12
 800d15a:	ecbd 8b04 	vpop	{d8-d9}
 800d15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d162:	4b1b      	ldr	r3, [pc, #108]	; (800d1d0 <__kernel_sin+0x150>)
 800d164:	ec51 0b18 	vmov	r0, r1, d8
 800d168:	2200      	movs	r2, #0
 800d16a:	f7f3 fa45 	bl	80005f8 <__aeabi_dmul>
 800d16e:	4632      	mov	r2, r6
 800d170:	ec41 0b19 	vmov	d9, r0, r1
 800d174:	463b      	mov	r3, r7
 800d176:	4640      	mov	r0, r8
 800d178:	4649      	mov	r1, r9
 800d17a:	f7f3 fa3d 	bl	80005f8 <__aeabi_dmul>
 800d17e:	4602      	mov	r2, r0
 800d180:	460b      	mov	r3, r1
 800d182:	ec51 0b19 	vmov	r0, r1, d9
 800d186:	f7f3 f87f 	bl	8000288 <__aeabi_dsub>
 800d18a:	4652      	mov	r2, sl
 800d18c:	465b      	mov	r3, fp
 800d18e:	f7f3 fa33 	bl	80005f8 <__aeabi_dmul>
 800d192:	ec53 2b18 	vmov	r2, r3, d8
 800d196:	f7f3 f877 	bl	8000288 <__aeabi_dsub>
 800d19a:	a30b      	add	r3, pc, #44	; (adr r3, 800d1c8 <__kernel_sin+0x148>)
 800d19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a0:	4606      	mov	r6, r0
 800d1a2:	460f      	mov	r7, r1
 800d1a4:	4640      	mov	r0, r8
 800d1a6:	4649      	mov	r1, r9
 800d1a8:	f7f3 fa26 	bl	80005f8 <__aeabi_dmul>
 800d1ac:	4602      	mov	r2, r0
 800d1ae:	460b      	mov	r3, r1
 800d1b0:	4630      	mov	r0, r6
 800d1b2:	4639      	mov	r1, r7
 800d1b4:	f7f3 f86a 	bl	800028c <__adddf3>
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	460b      	mov	r3, r1
 800d1bc:	4620      	mov	r0, r4
 800d1be:	4629      	mov	r1, r5
 800d1c0:	f7f3 f862 	bl	8000288 <__aeabi_dsub>
 800d1c4:	e7c4      	b.n	800d150 <__kernel_sin+0xd0>
 800d1c6:	bf00      	nop
 800d1c8:	55555549 	.word	0x55555549
 800d1cc:	3fc55555 	.word	0x3fc55555
 800d1d0:	3fe00000 	.word	0x3fe00000
 800d1d4:	5acfd57c 	.word	0x5acfd57c
 800d1d8:	3de5d93a 	.word	0x3de5d93a
 800d1dc:	8a2b9ceb 	.word	0x8a2b9ceb
 800d1e0:	3e5ae5e6 	.word	0x3e5ae5e6
 800d1e4:	57b1fe7d 	.word	0x57b1fe7d
 800d1e8:	3ec71de3 	.word	0x3ec71de3
 800d1ec:	19c161d5 	.word	0x19c161d5
 800d1f0:	3f2a01a0 	.word	0x3f2a01a0
 800d1f4:	1110f8a6 	.word	0x1110f8a6
 800d1f8:	3f811111 	.word	0x3f811111
 800d1fc:	00000000 	.word	0x00000000

0800d200 <__kernel_tan>:
 800d200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d204:	ed2d 8b06 	vpush	{d8-d10}
 800d208:	ec5b ab10 	vmov	sl, fp, d0
 800d20c:	4be0      	ldr	r3, [pc, #896]	; (800d590 <__kernel_tan+0x390>)
 800d20e:	b083      	sub	sp, #12
 800d210:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800d214:	429f      	cmp	r7, r3
 800d216:	ec59 8b11 	vmov	r8, r9, d1
 800d21a:	4606      	mov	r6, r0
 800d21c:	f8cd b000 	str.w	fp, [sp]
 800d220:	dc61      	bgt.n	800d2e6 <__kernel_tan+0xe6>
 800d222:	ee10 0a10 	vmov	r0, s0
 800d226:	4659      	mov	r1, fp
 800d228:	f7f3 fc96 	bl	8000b58 <__aeabi_d2iz>
 800d22c:	4605      	mov	r5, r0
 800d22e:	2800      	cmp	r0, #0
 800d230:	f040 8083 	bne.w	800d33a <__kernel_tan+0x13a>
 800d234:	1c73      	adds	r3, r6, #1
 800d236:	4652      	mov	r2, sl
 800d238:	4313      	orrs	r3, r2
 800d23a:	433b      	orrs	r3, r7
 800d23c:	d112      	bne.n	800d264 <__kernel_tan+0x64>
 800d23e:	ec4b ab10 	vmov	d0, sl, fp
 800d242:	f7fd ff4d 	bl	800b0e0 <fabs>
 800d246:	49d3      	ldr	r1, [pc, #844]	; (800d594 <__kernel_tan+0x394>)
 800d248:	ec53 2b10 	vmov	r2, r3, d0
 800d24c:	2000      	movs	r0, #0
 800d24e:	f7f3 fafd 	bl	800084c <__aeabi_ddiv>
 800d252:	4682      	mov	sl, r0
 800d254:	468b      	mov	fp, r1
 800d256:	ec4b ab10 	vmov	d0, sl, fp
 800d25a:	b003      	add	sp, #12
 800d25c:	ecbd 8b06 	vpop	{d8-d10}
 800d260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d264:	2e01      	cmp	r6, #1
 800d266:	d0f6      	beq.n	800d256 <__kernel_tan+0x56>
 800d268:	4642      	mov	r2, r8
 800d26a:	464b      	mov	r3, r9
 800d26c:	4650      	mov	r0, sl
 800d26e:	4659      	mov	r1, fp
 800d270:	f7f3 f80c 	bl	800028c <__adddf3>
 800d274:	4602      	mov	r2, r0
 800d276:	460b      	mov	r3, r1
 800d278:	460f      	mov	r7, r1
 800d27a:	2000      	movs	r0, #0
 800d27c:	49c6      	ldr	r1, [pc, #792]	; (800d598 <__kernel_tan+0x398>)
 800d27e:	f7f3 fae5 	bl	800084c <__aeabi_ddiv>
 800d282:	e9cd 0100 	strd	r0, r1, [sp]
 800d286:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d28a:	462e      	mov	r6, r5
 800d28c:	4652      	mov	r2, sl
 800d28e:	462c      	mov	r4, r5
 800d290:	4630      	mov	r0, r6
 800d292:	461d      	mov	r5, r3
 800d294:	4639      	mov	r1, r7
 800d296:	465b      	mov	r3, fp
 800d298:	f7f2 fff6 	bl	8000288 <__aeabi_dsub>
 800d29c:	4602      	mov	r2, r0
 800d29e:	460b      	mov	r3, r1
 800d2a0:	4640      	mov	r0, r8
 800d2a2:	4649      	mov	r1, r9
 800d2a4:	f7f2 fff0 	bl	8000288 <__aeabi_dsub>
 800d2a8:	4632      	mov	r2, r6
 800d2aa:	462b      	mov	r3, r5
 800d2ac:	f7f3 f9a4 	bl	80005f8 <__aeabi_dmul>
 800d2b0:	4632      	mov	r2, r6
 800d2b2:	4680      	mov	r8, r0
 800d2b4:	4689      	mov	r9, r1
 800d2b6:	462b      	mov	r3, r5
 800d2b8:	4630      	mov	r0, r6
 800d2ba:	4639      	mov	r1, r7
 800d2bc:	f7f3 f99c 	bl	80005f8 <__aeabi_dmul>
 800d2c0:	4bb4      	ldr	r3, [pc, #720]	; (800d594 <__kernel_tan+0x394>)
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	f7f2 ffe2 	bl	800028c <__adddf3>
 800d2c8:	4602      	mov	r2, r0
 800d2ca:	460b      	mov	r3, r1
 800d2cc:	4640      	mov	r0, r8
 800d2ce:	4649      	mov	r1, r9
 800d2d0:	f7f2 ffdc 	bl	800028c <__adddf3>
 800d2d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d2d8:	f7f3 f98e 	bl	80005f8 <__aeabi_dmul>
 800d2dc:	4622      	mov	r2, r4
 800d2de:	462b      	mov	r3, r5
 800d2e0:	f7f2 ffd4 	bl	800028c <__adddf3>
 800d2e4:	e7b5      	b.n	800d252 <__kernel_tan+0x52>
 800d2e6:	4bad      	ldr	r3, [pc, #692]	; (800d59c <__kernel_tan+0x39c>)
 800d2e8:	429f      	cmp	r7, r3
 800d2ea:	dd26      	ble.n	800d33a <__kernel_tan+0x13a>
 800d2ec:	9b00      	ldr	r3, [sp, #0]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	da09      	bge.n	800d306 <__kernel_tan+0x106>
 800d2f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d2f6:	469b      	mov	fp, r3
 800d2f8:	ee10 aa10 	vmov	sl, s0
 800d2fc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d300:	ee11 8a10 	vmov	r8, s2
 800d304:	4699      	mov	r9, r3
 800d306:	4652      	mov	r2, sl
 800d308:	465b      	mov	r3, fp
 800d30a:	a183      	add	r1, pc, #524	; (adr r1, 800d518 <__kernel_tan+0x318>)
 800d30c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d310:	f7f2 ffba 	bl	8000288 <__aeabi_dsub>
 800d314:	4642      	mov	r2, r8
 800d316:	464b      	mov	r3, r9
 800d318:	4604      	mov	r4, r0
 800d31a:	460d      	mov	r5, r1
 800d31c:	a180      	add	r1, pc, #512	; (adr r1, 800d520 <__kernel_tan+0x320>)
 800d31e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d322:	f7f2 ffb1 	bl	8000288 <__aeabi_dsub>
 800d326:	4622      	mov	r2, r4
 800d328:	462b      	mov	r3, r5
 800d32a:	f7f2 ffaf 	bl	800028c <__adddf3>
 800d32e:	f04f 0800 	mov.w	r8, #0
 800d332:	4682      	mov	sl, r0
 800d334:	468b      	mov	fp, r1
 800d336:	f04f 0900 	mov.w	r9, #0
 800d33a:	4652      	mov	r2, sl
 800d33c:	465b      	mov	r3, fp
 800d33e:	4650      	mov	r0, sl
 800d340:	4659      	mov	r1, fp
 800d342:	f7f3 f959 	bl	80005f8 <__aeabi_dmul>
 800d346:	4602      	mov	r2, r0
 800d348:	460b      	mov	r3, r1
 800d34a:	ec43 2b18 	vmov	d8, r2, r3
 800d34e:	f7f3 f953 	bl	80005f8 <__aeabi_dmul>
 800d352:	ec53 2b18 	vmov	r2, r3, d8
 800d356:	4604      	mov	r4, r0
 800d358:	460d      	mov	r5, r1
 800d35a:	4650      	mov	r0, sl
 800d35c:	4659      	mov	r1, fp
 800d35e:	f7f3 f94b 	bl	80005f8 <__aeabi_dmul>
 800d362:	a371      	add	r3, pc, #452	; (adr r3, 800d528 <__kernel_tan+0x328>)
 800d364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d368:	ec41 0b19 	vmov	d9, r0, r1
 800d36c:	4620      	mov	r0, r4
 800d36e:	4629      	mov	r1, r5
 800d370:	f7f3 f942 	bl	80005f8 <__aeabi_dmul>
 800d374:	a36e      	add	r3, pc, #440	; (adr r3, 800d530 <__kernel_tan+0x330>)
 800d376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d37a:	f7f2 ff87 	bl	800028c <__adddf3>
 800d37e:	4622      	mov	r2, r4
 800d380:	462b      	mov	r3, r5
 800d382:	f7f3 f939 	bl	80005f8 <__aeabi_dmul>
 800d386:	a36c      	add	r3, pc, #432	; (adr r3, 800d538 <__kernel_tan+0x338>)
 800d388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d38c:	f7f2 ff7e 	bl	800028c <__adddf3>
 800d390:	4622      	mov	r2, r4
 800d392:	462b      	mov	r3, r5
 800d394:	f7f3 f930 	bl	80005f8 <__aeabi_dmul>
 800d398:	a369      	add	r3, pc, #420	; (adr r3, 800d540 <__kernel_tan+0x340>)
 800d39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d39e:	f7f2 ff75 	bl	800028c <__adddf3>
 800d3a2:	4622      	mov	r2, r4
 800d3a4:	462b      	mov	r3, r5
 800d3a6:	f7f3 f927 	bl	80005f8 <__aeabi_dmul>
 800d3aa:	a367      	add	r3, pc, #412	; (adr r3, 800d548 <__kernel_tan+0x348>)
 800d3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b0:	f7f2 ff6c 	bl	800028c <__adddf3>
 800d3b4:	4622      	mov	r2, r4
 800d3b6:	462b      	mov	r3, r5
 800d3b8:	f7f3 f91e 	bl	80005f8 <__aeabi_dmul>
 800d3bc:	a364      	add	r3, pc, #400	; (adr r3, 800d550 <__kernel_tan+0x350>)
 800d3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c2:	f7f2 ff63 	bl	800028c <__adddf3>
 800d3c6:	ec53 2b18 	vmov	r2, r3, d8
 800d3ca:	f7f3 f915 	bl	80005f8 <__aeabi_dmul>
 800d3ce:	a362      	add	r3, pc, #392	; (adr r3, 800d558 <__kernel_tan+0x358>)
 800d3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d4:	ec41 0b1a 	vmov	d10, r0, r1
 800d3d8:	4620      	mov	r0, r4
 800d3da:	4629      	mov	r1, r5
 800d3dc:	f7f3 f90c 	bl	80005f8 <__aeabi_dmul>
 800d3e0:	a35f      	add	r3, pc, #380	; (adr r3, 800d560 <__kernel_tan+0x360>)
 800d3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e6:	f7f2 ff51 	bl	800028c <__adddf3>
 800d3ea:	4622      	mov	r2, r4
 800d3ec:	462b      	mov	r3, r5
 800d3ee:	f7f3 f903 	bl	80005f8 <__aeabi_dmul>
 800d3f2:	a35d      	add	r3, pc, #372	; (adr r3, 800d568 <__kernel_tan+0x368>)
 800d3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f8:	f7f2 ff48 	bl	800028c <__adddf3>
 800d3fc:	4622      	mov	r2, r4
 800d3fe:	462b      	mov	r3, r5
 800d400:	f7f3 f8fa 	bl	80005f8 <__aeabi_dmul>
 800d404:	a35a      	add	r3, pc, #360	; (adr r3, 800d570 <__kernel_tan+0x370>)
 800d406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d40a:	f7f2 ff3f 	bl	800028c <__adddf3>
 800d40e:	4622      	mov	r2, r4
 800d410:	462b      	mov	r3, r5
 800d412:	f7f3 f8f1 	bl	80005f8 <__aeabi_dmul>
 800d416:	a358      	add	r3, pc, #352	; (adr r3, 800d578 <__kernel_tan+0x378>)
 800d418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d41c:	f7f2 ff36 	bl	800028c <__adddf3>
 800d420:	4622      	mov	r2, r4
 800d422:	462b      	mov	r3, r5
 800d424:	f7f3 f8e8 	bl	80005f8 <__aeabi_dmul>
 800d428:	a355      	add	r3, pc, #340	; (adr r3, 800d580 <__kernel_tan+0x380>)
 800d42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d42e:	f7f2 ff2d 	bl	800028c <__adddf3>
 800d432:	4602      	mov	r2, r0
 800d434:	460b      	mov	r3, r1
 800d436:	ec51 0b1a 	vmov	r0, r1, d10
 800d43a:	f7f2 ff27 	bl	800028c <__adddf3>
 800d43e:	ec53 2b19 	vmov	r2, r3, d9
 800d442:	f7f3 f8d9 	bl	80005f8 <__aeabi_dmul>
 800d446:	4642      	mov	r2, r8
 800d448:	464b      	mov	r3, r9
 800d44a:	f7f2 ff1f 	bl	800028c <__adddf3>
 800d44e:	ec53 2b18 	vmov	r2, r3, d8
 800d452:	f7f3 f8d1 	bl	80005f8 <__aeabi_dmul>
 800d456:	4642      	mov	r2, r8
 800d458:	464b      	mov	r3, r9
 800d45a:	f7f2 ff17 	bl	800028c <__adddf3>
 800d45e:	a34a      	add	r3, pc, #296	; (adr r3, 800d588 <__kernel_tan+0x388>)
 800d460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d464:	4604      	mov	r4, r0
 800d466:	460d      	mov	r5, r1
 800d468:	ec51 0b19 	vmov	r0, r1, d9
 800d46c:	f7f3 f8c4 	bl	80005f8 <__aeabi_dmul>
 800d470:	4622      	mov	r2, r4
 800d472:	462b      	mov	r3, r5
 800d474:	f7f2 ff0a 	bl	800028c <__adddf3>
 800d478:	460b      	mov	r3, r1
 800d47a:	ec41 0b18 	vmov	d8, r0, r1
 800d47e:	4602      	mov	r2, r0
 800d480:	4659      	mov	r1, fp
 800d482:	4650      	mov	r0, sl
 800d484:	f7f2 ff02 	bl	800028c <__adddf3>
 800d488:	4b44      	ldr	r3, [pc, #272]	; (800d59c <__kernel_tan+0x39c>)
 800d48a:	429f      	cmp	r7, r3
 800d48c:	4604      	mov	r4, r0
 800d48e:	460d      	mov	r5, r1
 800d490:	f340 8086 	ble.w	800d5a0 <__kernel_tan+0x3a0>
 800d494:	4630      	mov	r0, r6
 800d496:	f7f3 f845 	bl	8000524 <__aeabi_i2d>
 800d49a:	4622      	mov	r2, r4
 800d49c:	4680      	mov	r8, r0
 800d49e:	4689      	mov	r9, r1
 800d4a0:	462b      	mov	r3, r5
 800d4a2:	4620      	mov	r0, r4
 800d4a4:	4629      	mov	r1, r5
 800d4a6:	f7f3 f8a7 	bl	80005f8 <__aeabi_dmul>
 800d4aa:	4642      	mov	r2, r8
 800d4ac:	4606      	mov	r6, r0
 800d4ae:	460f      	mov	r7, r1
 800d4b0:	464b      	mov	r3, r9
 800d4b2:	4620      	mov	r0, r4
 800d4b4:	4629      	mov	r1, r5
 800d4b6:	f7f2 fee9 	bl	800028c <__adddf3>
 800d4ba:	4602      	mov	r2, r0
 800d4bc:	460b      	mov	r3, r1
 800d4be:	4630      	mov	r0, r6
 800d4c0:	4639      	mov	r1, r7
 800d4c2:	f7f3 f9c3 	bl	800084c <__aeabi_ddiv>
 800d4c6:	ec53 2b18 	vmov	r2, r3, d8
 800d4ca:	f7f2 fedd 	bl	8000288 <__aeabi_dsub>
 800d4ce:	4602      	mov	r2, r0
 800d4d0:	460b      	mov	r3, r1
 800d4d2:	4650      	mov	r0, sl
 800d4d4:	4659      	mov	r1, fp
 800d4d6:	f7f2 fed7 	bl	8000288 <__aeabi_dsub>
 800d4da:	4602      	mov	r2, r0
 800d4dc:	460b      	mov	r3, r1
 800d4de:	f7f2 fed5 	bl	800028c <__adddf3>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	460b      	mov	r3, r1
 800d4e6:	4640      	mov	r0, r8
 800d4e8:	4649      	mov	r1, r9
 800d4ea:	f7f2 fecd 	bl	8000288 <__aeabi_dsub>
 800d4ee:	9b00      	ldr	r3, [sp, #0]
 800d4f0:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800d4f4:	f00a 0a02 	and.w	sl, sl, #2
 800d4f8:	4604      	mov	r4, r0
 800d4fa:	f1ca 0001 	rsb	r0, sl, #1
 800d4fe:	460d      	mov	r5, r1
 800d500:	f7f3 f810 	bl	8000524 <__aeabi_i2d>
 800d504:	4602      	mov	r2, r0
 800d506:	460b      	mov	r3, r1
 800d508:	4620      	mov	r0, r4
 800d50a:	4629      	mov	r1, r5
 800d50c:	f7f3 f874 	bl	80005f8 <__aeabi_dmul>
 800d510:	e69f      	b.n	800d252 <__kernel_tan+0x52>
 800d512:	bf00      	nop
 800d514:	f3af 8000 	nop.w
 800d518:	54442d18 	.word	0x54442d18
 800d51c:	3fe921fb 	.word	0x3fe921fb
 800d520:	33145c07 	.word	0x33145c07
 800d524:	3c81a626 	.word	0x3c81a626
 800d528:	74bf7ad4 	.word	0x74bf7ad4
 800d52c:	3efb2a70 	.word	0x3efb2a70
 800d530:	32f0a7e9 	.word	0x32f0a7e9
 800d534:	3f12b80f 	.word	0x3f12b80f
 800d538:	1a8d1068 	.word	0x1a8d1068
 800d53c:	3f3026f7 	.word	0x3f3026f7
 800d540:	fee08315 	.word	0xfee08315
 800d544:	3f57dbc8 	.word	0x3f57dbc8
 800d548:	e96e8493 	.word	0xe96e8493
 800d54c:	3f8226e3 	.word	0x3f8226e3
 800d550:	1bb341fe 	.word	0x1bb341fe
 800d554:	3faba1ba 	.word	0x3faba1ba
 800d558:	db605373 	.word	0xdb605373
 800d55c:	bef375cb 	.word	0xbef375cb
 800d560:	a03792a6 	.word	0xa03792a6
 800d564:	3f147e88 	.word	0x3f147e88
 800d568:	f2f26501 	.word	0xf2f26501
 800d56c:	3f4344d8 	.word	0x3f4344d8
 800d570:	c9560328 	.word	0xc9560328
 800d574:	3f6d6d22 	.word	0x3f6d6d22
 800d578:	8406d637 	.word	0x8406d637
 800d57c:	3f9664f4 	.word	0x3f9664f4
 800d580:	1110fe7a 	.word	0x1110fe7a
 800d584:	3fc11111 	.word	0x3fc11111
 800d588:	55555563 	.word	0x55555563
 800d58c:	3fd55555 	.word	0x3fd55555
 800d590:	3e2fffff 	.word	0x3e2fffff
 800d594:	3ff00000 	.word	0x3ff00000
 800d598:	bff00000 	.word	0xbff00000
 800d59c:	3fe59427 	.word	0x3fe59427
 800d5a0:	2e01      	cmp	r6, #1
 800d5a2:	d02f      	beq.n	800d604 <__kernel_tan+0x404>
 800d5a4:	460f      	mov	r7, r1
 800d5a6:	4602      	mov	r2, r0
 800d5a8:	460b      	mov	r3, r1
 800d5aa:	4689      	mov	r9, r1
 800d5ac:	2000      	movs	r0, #0
 800d5ae:	4917      	ldr	r1, [pc, #92]	; (800d60c <__kernel_tan+0x40c>)
 800d5b0:	f7f3 f94c 	bl	800084c <__aeabi_ddiv>
 800d5b4:	2600      	movs	r6, #0
 800d5b6:	e9cd 0100 	strd	r0, r1, [sp]
 800d5ba:	4652      	mov	r2, sl
 800d5bc:	465b      	mov	r3, fp
 800d5be:	4630      	mov	r0, r6
 800d5c0:	4639      	mov	r1, r7
 800d5c2:	f7f2 fe61 	bl	8000288 <__aeabi_dsub>
 800d5c6:	e9dd 4500 	ldrd	r4, r5, [sp]
 800d5ca:	4602      	mov	r2, r0
 800d5cc:	460b      	mov	r3, r1
 800d5ce:	ec51 0b18 	vmov	r0, r1, d8
 800d5d2:	f7f2 fe59 	bl	8000288 <__aeabi_dsub>
 800d5d6:	4632      	mov	r2, r6
 800d5d8:	462b      	mov	r3, r5
 800d5da:	f7f3 f80d 	bl	80005f8 <__aeabi_dmul>
 800d5de:	46b0      	mov	r8, r6
 800d5e0:	460f      	mov	r7, r1
 800d5e2:	4642      	mov	r2, r8
 800d5e4:	462b      	mov	r3, r5
 800d5e6:	4634      	mov	r4, r6
 800d5e8:	4649      	mov	r1, r9
 800d5ea:	4606      	mov	r6, r0
 800d5ec:	4640      	mov	r0, r8
 800d5ee:	f7f3 f803 	bl	80005f8 <__aeabi_dmul>
 800d5f2:	4b07      	ldr	r3, [pc, #28]	; (800d610 <__kernel_tan+0x410>)
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	f7f2 fe49 	bl	800028c <__adddf3>
 800d5fa:	4602      	mov	r2, r0
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	4630      	mov	r0, r6
 800d600:	4639      	mov	r1, r7
 800d602:	e665      	b.n	800d2d0 <__kernel_tan+0xd0>
 800d604:	4682      	mov	sl, r0
 800d606:	468b      	mov	fp, r1
 800d608:	e625      	b.n	800d256 <__kernel_tan+0x56>
 800d60a:	bf00      	nop
 800d60c:	bff00000 	.word	0xbff00000
 800d610:	3ff00000 	.word	0x3ff00000

0800d614 <with_errno>:
 800d614:	b570      	push	{r4, r5, r6, lr}
 800d616:	4604      	mov	r4, r0
 800d618:	460d      	mov	r5, r1
 800d61a:	4616      	mov	r6, r2
 800d61c:	f7fa fd98 	bl	8008150 <__errno>
 800d620:	4629      	mov	r1, r5
 800d622:	6006      	str	r6, [r0, #0]
 800d624:	4620      	mov	r0, r4
 800d626:	bd70      	pop	{r4, r5, r6, pc}

0800d628 <xflow>:
 800d628:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d62a:	4614      	mov	r4, r2
 800d62c:	461d      	mov	r5, r3
 800d62e:	b108      	cbz	r0, 800d634 <xflow+0xc>
 800d630:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d634:	e9cd 2300 	strd	r2, r3, [sp]
 800d638:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d63c:	4620      	mov	r0, r4
 800d63e:	4629      	mov	r1, r5
 800d640:	f7f2 ffda 	bl	80005f8 <__aeabi_dmul>
 800d644:	2222      	movs	r2, #34	; 0x22
 800d646:	b003      	add	sp, #12
 800d648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d64c:	f7ff bfe2 	b.w	800d614 <with_errno>

0800d650 <__math_uflow>:
 800d650:	b508      	push	{r3, lr}
 800d652:	2200      	movs	r2, #0
 800d654:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d658:	f7ff ffe6 	bl	800d628 <xflow>
 800d65c:	ec41 0b10 	vmov	d0, r0, r1
 800d660:	bd08      	pop	{r3, pc}

0800d662 <__math_oflow>:
 800d662:	b508      	push	{r3, lr}
 800d664:	2200      	movs	r2, #0
 800d666:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d66a:	f7ff ffdd 	bl	800d628 <xflow>
 800d66e:	ec41 0b10 	vmov	d0, r0, r1
 800d672:	bd08      	pop	{r3, pc}

0800d674 <finite>:
 800d674:	b082      	sub	sp, #8
 800d676:	ed8d 0b00 	vstr	d0, [sp]
 800d67a:	9801      	ldr	r0, [sp, #4]
 800d67c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d680:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d684:	0fc0      	lsrs	r0, r0, #31
 800d686:	b002      	add	sp, #8
 800d688:	4770      	bx	lr
 800d68a:	0000      	movs	r0, r0
 800d68c:	0000      	movs	r0, r0
	...

0800d690 <floor>:
 800d690:	ec51 0b10 	vmov	r0, r1, d0
 800d694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d698:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d69c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d6a0:	2e13      	cmp	r6, #19
 800d6a2:	ee10 5a10 	vmov	r5, s0
 800d6a6:	ee10 8a10 	vmov	r8, s0
 800d6aa:	460c      	mov	r4, r1
 800d6ac:	dc32      	bgt.n	800d714 <floor+0x84>
 800d6ae:	2e00      	cmp	r6, #0
 800d6b0:	da14      	bge.n	800d6dc <floor+0x4c>
 800d6b2:	a333      	add	r3, pc, #204	; (adr r3, 800d780 <floor+0xf0>)
 800d6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b8:	f7f2 fde8 	bl	800028c <__adddf3>
 800d6bc:	2200      	movs	r2, #0
 800d6be:	2300      	movs	r3, #0
 800d6c0:	f7f3 fa2a 	bl	8000b18 <__aeabi_dcmpgt>
 800d6c4:	b138      	cbz	r0, 800d6d6 <floor+0x46>
 800d6c6:	2c00      	cmp	r4, #0
 800d6c8:	da57      	bge.n	800d77a <floor+0xea>
 800d6ca:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d6ce:	431d      	orrs	r5, r3
 800d6d0:	d001      	beq.n	800d6d6 <floor+0x46>
 800d6d2:	4c2d      	ldr	r4, [pc, #180]	; (800d788 <floor+0xf8>)
 800d6d4:	2500      	movs	r5, #0
 800d6d6:	4621      	mov	r1, r4
 800d6d8:	4628      	mov	r0, r5
 800d6da:	e025      	b.n	800d728 <floor+0x98>
 800d6dc:	4f2b      	ldr	r7, [pc, #172]	; (800d78c <floor+0xfc>)
 800d6de:	4137      	asrs	r7, r6
 800d6e0:	ea01 0307 	and.w	r3, r1, r7
 800d6e4:	4303      	orrs	r3, r0
 800d6e6:	d01f      	beq.n	800d728 <floor+0x98>
 800d6e8:	a325      	add	r3, pc, #148	; (adr r3, 800d780 <floor+0xf0>)
 800d6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ee:	f7f2 fdcd 	bl	800028c <__adddf3>
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	f7f3 fa0f 	bl	8000b18 <__aeabi_dcmpgt>
 800d6fa:	2800      	cmp	r0, #0
 800d6fc:	d0eb      	beq.n	800d6d6 <floor+0x46>
 800d6fe:	2c00      	cmp	r4, #0
 800d700:	bfbe      	ittt	lt
 800d702:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d706:	fa43 f606 	asrlt.w	r6, r3, r6
 800d70a:	19a4      	addlt	r4, r4, r6
 800d70c:	ea24 0407 	bic.w	r4, r4, r7
 800d710:	2500      	movs	r5, #0
 800d712:	e7e0      	b.n	800d6d6 <floor+0x46>
 800d714:	2e33      	cmp	r6, #51	; 0x33
 800d716:	dd0b      	ble.n	800d730 <floor+0xa0>
 800d718:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d71c:	d104      	bne.n	800d728 <floor+0x98>
 800d71e:	ee10 2a10 	vmov	r2, s0
 800d722:	460b      	mov	r3, r1
 800d724:	f7f2 fdb2 	bl	800028c <__adddf3>
 800d728:	ec41 0b10 	vmov	d0, r0, r1
 800d72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d730:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d734:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d738:	fa23 f707 	lsr.w	r7, r3, r7
 800d73c:	4207      	tst	r7, r0
 800d73e:	d0f3      	beq.n	800d728 <floor+0x98>
 800d740:	a30f      	add	r3, pc, #60	; (adr r3, 800d780 <floor+0xf0>)
 800d742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d746:	f7f2 fda1 	bl	800028c <__adddf3>
 800d74a:	2200      	movs	r2, #0
 800d74c:	2300      	movs	r3, #0
 800d74e:	f7f3 f9e3 	bl	8000b18 <__aeabi_dcmpgt>
 800d752:	2800      	cmp	r0, #0
 800d754:	d0bf      	beq.n	800d6d6 <floor+0x46>
 800d756:	2c00      	cmp	r4, #0
 800d758:	da02      	bge.n	800d760 <floor+0xd0>
 800d75a:	2e14      	cmp	r6, #20
 800d75c:	d103      	bne.n	800d766 <floor+0xd6>
 800d75e:	3401      	adds	r4, #1
 800d760:	ea25 0507 	bic.w	r5, r5, r7
 800d764:	e7b7      	b.n	800d6d6 <floor+0x46>
 800d766:	2301      	movs	r3, #1
 800d768:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d76c:	fa03 f606 	lsl.w	r6, r3, r6
 800d770:	4435      	add	r5, r6
 800d772:	4545      	cmp	r5, r8
 800d774:	bf38      	it	cc
 800d776:	18e4      	addcc	r4, r4, r3
 800d778:	e7f2      	b.n	800d760 <floor+0xd0>
 800d77a:	2500      	movs	r5, #0
 800d77c:	462c      	mov	r4, r5
 800d77e:	e7aa      	b.n	800d6d6 <floor+0x46>
 800d780:	8800759c 	.word	0x8800759c
 800d784:	7e37e43c 	.word	0x7e37e43c
 800d788:	bff00000 	.word	0xbff00000
 800d78c:	000fffff 	.word	0x000fffff

0800d790 <nan>:
 800d790:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d798 <nan+0x8>
 800d794:	4770      	bx	lr
 800d796:	bf00      	nop
 800d798:	00000000 	.word	0x00000000
 800d79c:	7ff80000 	.word	0x7ff80000

0800d7a0 <scalbn>:
 800d7a0:	b570      	push	{r4, r5, r6, lr}
 800d7a2:	ec55 4b10 	vmov	r4, r5, d0
 800d7a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d7aa:	4606      	mov	r6, r0
 800d7ac:	462b      	mov	r3, r5
 800d7ae:	b99a      	cbnz	r2, 800d7d8 <scalbn+0x38>
 800d7b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d7b4:	4323      	orrs	r3, r4
 800d7b6:	d036      	beq.n	800d826 <scalbn+0x86>
 800d7b8:	4b39      	ldr	r3, [pc, #228]	; (800d8a0 <scalbn+0x100>)
 800d7ba:	4629      	mov	r1, r5
 800d7bc:	ee10 0a10 	vmov	r0, s0
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	f7f2 ff19 	bl	80005f8 <__aeabi_dmul>
 800d7c6:	4b37      	ldr	r3, [pc, #220]	; (800d8a4 <scalbn+0x104>)
 800d7c8:	429e      	cmp	r6, r3
 800d7ca:	4604      	mov	r4, r0
 800d7cc:	460d      	mov	r5, r1
 800d7ce:	da10      	bge.n	800d7f2 <scalbn+0x52>
 800d7d0:	a32b      	add	r3, pc, #172	; (adr r3, 800d880 <scalbn+0xe0>)
 800d7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d6:	e03a      	b.n	800d84e <scalbn+0xae>
 800d7d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d7dc:	428a      	cmp	r2, r1
 800d7de:	d10c      	bne.n	800d7fa <scalbn+0x5a>
 800d7e0:	ee10 2a10 	vmov	r2, s0
 800d7e4:	4620      	mov	r0, r4
 800d7e6:	4629      	mov	r1, r5
 800d7e8:	f7f2 fd50 	bl	800028c <__adddf3>
 800d7ec:	4604      	mov	r4, r0
 800d7ee:	460d      	mov	r5, r1
 800d7f0:	e019      	b.n	800d826 <scalbn+0x86>
 800d7f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d7f6:	460b      	mov	r3, r1
 800d7f8:	3a36      	subs	r2, #54	; 0x36
 800d7fa:	4432      	add	r2, r6
 800d7fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d800:	428a      	cmp	r2, r1
 800d802:	dd08      	ble.n	800d816 <scalbn+0x76>
 800d804:	2d00      	cmp	r5, #0
 800d806:	a120      	add	r1, pc, #128	; (adr r1, 800d888 <scalbn+0xe8>)
 800d808:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d80c:	da1c      	bge.n	800d848 <scalbn+0xa8>
 800d80e:	a120      	add	r1, pc, #128	; (adr r1, 800d890 <scalbn+0xf0>)
 800d810:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d814:	e018      	b.n	800d848 <scalbn+0xa8>
 800d816:	2a00      	cmp	r2, #0
 800d818:	dd08      	ble.n	800d82c <scalbn+0x8c>
 800d81a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d81e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d822:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d826:	ec45 4b10 	vmov	d0, r4, r5
 800d82a:	bd70      	pop	{r4, r5, r6, pc}
 800d82c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d830:	da19      	bge.n	800d866 <scalbn+0xc6>
 800d832:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d836:	429e      	cmp	r6, r3
 800d838:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800d83c:	dd0a      	ble.n	800d854 <scalbn+0xb4>
 800d83e:	a112      	add	r1, pc, #72	; (adr r1, 800d888 <scalbn+0xe8>)
 800d840:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d1e2      	bne.n	800d80e <scalbn+0x6e>
 800d848:	a30f      	add	r3, pc, #60	; (adr r3, 800d888 <scalbn+0xe8>)
 800d84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d84e:	f7f2 fed3 	bl	80005f8 <__aeabi_dmul>
 800d852:	e7cb      	b.n	800d7ec <scalbn+0x4c>
 800d854:	a10a      	add	r1, pc, #40	; (adr r1, 800d880 <scalbn+0xe0>)
 800d856:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d0b8      	beq.n	800d7d0 <scalbn+0x30>
 800d85e:	a10e      	add	r1, pc, #56	; (adr r1, 800d898 <scalbn+0xf8>)
 800d860:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d864:	e7b4      	b.n	800d7d0 <scalbn+0x30>
 800d866:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d86a:	3236      	adds	r2, #54	; 0x36
 800d86c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d870:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d874:	4620      	mov	r0, r4
 800d876:	4b0c      	ldr	r3, [pc, #48]	; (800d8a8 <scalbn+0x108>)
 800d878:	2200      	movs	r2, #0
 800d87a:	e7e8      	b.n	800d84e <scalbn+0xae>
 800d87c:	f3af 8000 	nop.w
 800d880:	c2f8f359 	.word	0xc2f8f359
 800d884:	01a56e1f 	.word	0x01a56e1f
 800d888:	8800759c 	.word	0x8800759c
 800d88c:	7e37e43c 	.word	0x7e37e43c
 800d890:	8800759c 	.word	0x8800759c
 800d894:	fe37e43c 	.word	0xfe37e43c
 800d898:	c2f8f359 	.word	0xc2f8f359
 800d89c:	81a56e1f 	.word	0x81a56e1f
 800d8a0:	43500000 	.word	0x43500000
 800d8a4:	ffff3cb0 	.word	0xffff3cb0
 800d8a8:	3c900000 	.word	0x3c900000

0800d8ac <_init>:
 800d8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ae:	bf00      	nop
 800d8b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8b2:	bc08      	pop	{r3}
 800d8b4:	469e      	mov	lr, r3
 800d8b6:	4770      	bx	lr

0800d8b8 <_fini>:
 800d8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ba:	bf00      	nop
 800d8bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8be:	bc08      	pop	{r3}
 800d8c0:	469e      	mov	lr, r3
 800d8c2:	4770      	bx	lr
