
M4N3D_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c8  0800e738  0800e738  0001e738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee00  0800ee00  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee00  0800ee00  0001ee00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee08  0800ee08  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee08  0800ee08  0001ee08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee0c  0800ee0c  0001ee0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800ee10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d0  200001e8  0800eff4  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006b8  0800eff4  000206b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014acd  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000307b  00000000  00000000  00034ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  00037d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  00038df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a6ff  00000000  00000000  00039d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f57  00000000  00000000  00064457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010010a  00000000  00000000  000783ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001784b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c90  00000000  00000000  00178508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e71c 	.word	0x0800e71c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800e71c 	.word	0x0800e71c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <COM_clearBuff>:

void COM_parsePacket();
void COM_sendACK();

void COM_clearBuff()
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	COM_state = COM_IDLE;
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <COM_clearBuff+0x2c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
	COM_rx_head = COM_RxBuff;
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <COM_clearBuff+0x30>)
 8000f98:	4a09      	ldr	r2, [pc, #36]	; (8000fc0 <COM_clearBuff+0x34>)
 8000f9a:	601a      	str	r2, [r3, #0]
	COM_data_len = 0;
 8000f9c:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <COM_clearBuff+0x38>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(huart_com, (uint8_t*)COM_rx_head, 1);
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <COM_clearBuff+0x3c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <COM_clearBuff+0x30>)
 8000fa8:	6811      	ldr	r1, [r2, #0]
 8000faa:	2201      	movs	r2, #1
 8000fac:	4618      	mov	r0, r3
 8000fae:	f006 fb89 	bl	80076c4 <HAL_UART_Receive_IT>
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000204 	.word	0x20000204
 8000fbc:	20000328 	.word	0x20000328
 8000fc0:	20000228 	.word	0x20000228
 8000fc4:	20000224 	.word	0x20000224
 8000fc8:	20000220 	.word	0x20000220

08000fcc <COM_Init>:

void COM_Init(UART_HandleTypeDef* huart)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	COM_data.available = 0;
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <COM_Init+0x20>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
	huart_com = huart;
 8000fda:	4a05      	ldr	r2, [pc, #20]	; (8000ff0 <COM_Init+0x24>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6013      	str	r3, [r2, #0]
	COM_clearBuff();
 8000fe0:	f7ff ffd4 	bl	8000f8c <COM_clearBuff>
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000208 	.word	0x20000208
 8000ff0:	20000220 	.word	0x20000220

08000ff4 <COM_uartIRQ>:

void COM_uartIRQ(UART_HandleTypeDef* huart)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	if(huart == huart_com)
 8000ffc:	4b4e      	ldr	r3, [pc, #312]	; (8001138 <COM_uartIRQ+0x144>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	429a      	cmp	r2, r3
 8001004:	f040 8090 	bne.w	8001128 <COM_uartIRQ+0x134>
	{
		switch(COM_state)
 8001008:	4b4c      	ldr	r3, [pc, #304]	; (800113c <COM_uartIRQ+0x148>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b06      	cmp	r3, #6
 8001010:	f200 808d 	bhi.w	800112e <COM_uartIRQ+0x13a>
 8001014:	a201      	add	r2, pc, #4	; (adr r2, 800101c <COM_uartIRQ+0x28>)
 8001016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101a:	bf00      	nop
 800101c:	08001039 	.word	0x08001039
 8001020:	0800106d 	.word	0x0800106d
 8001024:	0800109f 	.word	0x0800109f
 8001028:	080010f9 	.word	0x080010f9
 800102c:	080010d1 	.word	0x080010d1
 8001030:	08001121 	.word	0x08001121
 8001034:	0800112d 	.word	0x0800112d
		{
		case COM_IDLE: //received 1st START
			if(COM_rx_head[0] == 0xFF)
 8001038:	4b41      	ldr	r3, [pc, #260]	; (8001140 <COM_uartIRQ+0x14c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2bff      	cmp	r3, #255	; 0xff
 8001042:	d110      	bne.n	8001066 <COM_uartIRQ+0x72>
			{
				COM_state = COM_START_CHECK;
 8001044:	4b3d      	ldr	r3, [pc, #244]	; (800113c <COM_uartIRQ+0x148>)
 8001046:	2201      	movs	r2, #1
 8001048:	701a      	strb	r2, [r3, #0]
				COM_rx_head++;
 800104a:	4b3d      	ldr	r3, [pc, #244]	; (8001140 <COM_uartIRQ+0x14c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	3301      	adds	r3, #1
 8001050:	4a3b      	ldr	r2, [pc, #236]	; (8001140 <COM_uartIRQ+0x14c>)
 8001052:	6013      	str	r3, [r2, #0]
				HAL_UART_Receive_IT(huart_com, (uint8_t*)COM_rx_head, 1);
 8001054:	4b38      	ldr	r3, [pc, #224]	; (8001138 <COM_uartIRQ+0x144>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a39      	ldr	r2, [pc, #228]	; (8001140 <COM_uartIRQ+0x14c>)
 800105a:	6811      	ldr	r1, [r2, #0]
 800105c:	2201      	movs	r2, #1
 800105e:	4618      	mov	r0, r3
 8001060:	f006 fb30 	bl	80076c4 <HAL_UART_Receive_IT>
			}
			else
				COM_clearBuff();
			break;
 8001064:	e063      	b.n	800112e <COM_uartIRQ+0x13a>
				COM_clearBuff();
 8001066:	f7ff ff91 	bl	8000f8c <COM_clearBuff>
			break;
 800106a:	e060      	b.n	800112e <COM_uartIRQ+0x13a>

		case COM_START_CHECK: //received 2nd START
			if(COM_RxBuff[1] == 0xFF)
 800106c:	4b35      	ldr	r3, [pc, #212]	; (8001144 <COM_uartIRQ+0x150>)
 800106e:	785b      	ldrb	r3, [r3, #1]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2bff      	cmp	r3, #255	; 0xff
 8001074:	d110      	bne.n	8001098 <COM_uartIRQ+0xa4>
			{
				COM_state = COM_LEN;
 8001076:	4b31      	ldr	r3, [pc, #196]	; (800113c <COM_uartIRQ+0x148>)
 8001078:	2202      	movs	r2, #2
 800107a:	701a      	strb	r2, [r3, #0]
				COM_rx_head++;
 800107c:	4b30      	ldr	r3, [pc, #192]	; (8001140 <COM_uartIRQ+0x14c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	3301      	adds	r3, #1
 8001082:	4a2f      	ldr	r2, [pc, #188]	; (8001140 <COM_uartIRQ+0x14c>)
 8001084:	6013      	str	r3, [r2, #0]
				HAL_UART_Receive_IT(huart_com, (uint8_t*)COM_rx_head, 1);
 8001086:	4b2c      	ldr	r3, [pc, #176]	; (8001138 <COM_uartIRQ+0x144>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a2d      	ldr	r2, [pc, #180]	; (8001140 <COM_uartIRQ+0x14c>)
 800108c:	6811      	ldr	r1, [r2, #0]
 800108e:	2201      	movs	r2, #1
 8001090:	4618      	mov	r0, r3
 8001092:	f006 fb17 	bl	80076c4 <HAL_UART_Receive_IT>
			}
			else
				COM_clearBuff();

			break;
 8001096:	e04a      	b.n	800112e <COM_uartIRQ+0x13a>
				COM_clearBuff();
 8001098:	f7ff ff78 	bl	8000f8c <COM_clearBuff>
			break;
 800109c:	e047      	b.n	800112e <COM_uartIRQ+0x13a>

		case COM_LEN: //received LEN
			COM_state = COM_DATA;
 800109e:	4b27      	ldr	r3, [pc, #156]	; (800113c <COM_uartIRQ+0x148>)
 80010a0:	2204      	movs	r2, #4
 80010a2:	701a      	strb	r2, [r3, #0]
			COM_data_len = COM_RxBuff[2];
 80010a4:	4b27      	ldr	r3, [pc, #156]	; (8001144 <COM_uartIRQ+0x150>)
 80010a6:	789b      	ldrb	r3, [r3, #2]
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4b27      	ldr	r3, [pc, #156]	; (8001148 <COM_uartIRQ+0x154>)
 80010ac:	701a      	strb	r2, [r3, #0]
			COM_rx_head++;
 80010ae:	4b24      	ldr	r3, [pc, #144]	; (8001140 <COM_uartIRQ+0x14c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	3301      	adds	r3, #1
 80010b4:	4a22      	ldr	r2, [pc, #136]	; (8001140 <COM_uartIRQ+0x14c>)
 80010b6:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(huart_com, (uint8_t*)COM_rx_head, COM_data_len);
 80010b8:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <COM_uartIRQ+0x144>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a20      	ldr	r2, [pc, #128]	; (8001140 <COM_uartIRQ+0x14c>)
 80010be:	6811      	ldr	r1, [r2, #0]
 80010c0:	4a21      	ldr	r2, [pc, #132]	; (8001148 <COM_uartIRQ+0x154>)
 80010c2:	7812      	ldrb	r2, [r2, #0]
 80010c4:	b2d2      	uxtb	r2, r2
 80010c6:	b292      	uxth	r2, r2
 80010c8:	4618      	mov	r0, r3
 80010ca:	f006 fafb 	bl	80076c4 <HAL_UART_Receive_IT>
			break;
 80010ce:	e02e      	b.n	800112e <COM_uartIRQ+0x13a>

		case COM_DATA: //received DATA
			COM_state = COM_CHECKSUM;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	; (800113c <COM_uartIRQ+0x148>)
 80010d2:	2203      	movs	r2, #3
 80010d4:	701a      	strb	r2, [r3, #0]
			COM_rx_head += COM_data_len;
 80010d6:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <COM_uartIRQ+0x154>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <COM_uartIRQ+0x14c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4413      	add	r3, r2
 80010e2:	4a17      	ldr	r2, [pc, #92]	; (8001140 <COM_uartIRQ+0x14c>)
 80010e4:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(huart_com, (uint8_t*)COM_rx_head, 1);
 80010e6:	4b14      	ldr	r3, [pc, #80]	; (8001138 <COM_uartIRQ+0x144>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a15      	ldr	r2, [pc, #84]	; (8001140 <COM_uartIRQ+0x14c>)
 80010ec:	6811      	ldr	r1, [r2, #0]
 80010ee:	2201      	movs	r2, #1
 80010f0:	4618      	mov	r0, r3
 80010f2:	f006 fae7 	bl	80076c4 <HAL_UART_Receive_IT>
			break;
 80010f6:	e01a      	b.n	800112e <COM_uartIRQ+0x13a>

		case COM_CHECKSUM: //received CHECKSUM
			COM_state = COM_ENDL;
 80010f8:	4b10      	ldr	r3, [pc, #64]	; (800113c <COM_uartIRQ+0x148>)
 80010fa:	2205      	movs	r2, #5
 80010fc:	701a      	strb	r2, [r3, #0]
			COM_rx_head += COM_data_len;
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <COM_uartIRQ+0x154>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <COM_uartIRQ+0x14c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4413      	add	r3, r2
 800110a:	4a0d      	ldr	r2, [pc, #52]	; (8001140 <COM_uartIRQ+0x14c>)
 800110c:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(huart_com, (uint8_t*)COM_rx_head, 1);
 800110e:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <COM_uartIRQ+0x144>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a0b      	ldr	r2, [pc, #44]	; (8001140 <COM_uartIRQ+0x14c>)
 8001114:	6811      	ldr	r1, [r2, #0]
 8001116:	2201      	movs	r2, #1
 8001118:	4618      	mov	r0, r3
 800111a:	f006 fad3 	bl	80076c4 <HAL_UART_Receive_IT>
			break;
 800111e:	e006      	b.n	800112e <COM_uartIRQ+0x13a>

		case COM_ENDL: //received \n
			COM_state = COM_CPLT;
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <COM_uartIRQ+0x148>)
 8001122:	2206      	movs	r2, #6
 8001124:	701a      	strb	r2, [r3, #0]
			break;
 8001126:	e002      	b.n	800112e <COM_uartIRQ+0x13a>

		case COM_CPLT: //complete
			break;
		}
	}
 8001128:	bf00      	nop
 800112a:	e000      	b.n	800112e <COM_uartIRQ+0x13a>
			break;
 800112c:	bf00      	nop
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000220 	.word	0x20000220
 800113c:	20000204 	.word	0x20000204
 8001140:	20000328 	.word	0x20000328
 8001144:	20000228 	.word	0x20000228
 8001148:	20000224 	.word	0x20000224

0800114c <COM_rxLoop>:

void COM_rxLoop()
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
	if( COM_state == COM_CPLT)
 8001152:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <COM_rxLoop+0x74>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	b2db      	uxtb	r3, r3
 8001158:	2b06      	cmp	r3, #6
 800115a:	d12d      	bne.n	80011b8 <COM_rxLoop+0x6c>
	{
		uint8_t len = COM_RxBuff[2];
 800115c:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <COM_rxLoop+0x78>)
 800115e:	789b      	ldrb	r3, [r3, #2]
 8001160:	717b      	strb	r3, [r7, #5]
		uint8_t checksum = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	71fb      	strb	r3, [r7, #7]
		for( uint8_t i = 2; i < len+3; i++)
 8001166:	2302      	movs	r3, #2
 8001168:	71bb      	strb	r3, [r7, #6]
 800116a:	e009      	b.n	8001180 <COM_rxLoop+0x34>
			checksum += COM_RxBuff[i];
 800116c:	79bb      	ldrb	r3, [r7, #6]
 800116e:	4a15      	ldr	r2, [pc, #84]	; (80011c4 <COM_rxLoop+0x78>)
 8001170:	5cd3      	ldrb	r3, [r2, r3]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	4413      	add	r3, r2
 8001178:	71fb      	strb	r3, [r7, #7]
		for( uint8_t i = 2; i < len+3; i++)
 800117a:	79bb      	ldrb	r3, [r7, #6]
 800117c:	3301      	adds	r3, #1
 800117e:	71bb      	strb	r3, [r7, #6]
 8001180:	797b      	ldrb	r3, [r7, #5]
 8001182:	1c9a      	adds	r2, r3, #2
 8001184:	79bb      	ldrb	r3, [r7, #6]
 8001186:	429a      	cmp	r2, r3
 8001188:	daf0      	bge.n	800116c <COM_rxLoop+0x20>
		checksum = ( ~checksum ) & 0xFF;
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	43db      	mvns	r3, r3
 800118e:	71fb      	strb	r3, [r7, #7]

		if( checksum == COM_RxBuff[len+3] )
 8001190:	797b      	ldrb	r3, [r7, #5]
 8001192:	3303      	adds	r3, #3
 8001194:	4a0b      	ldr	r2, [pc, #44]	; (80011c4 <COM_rxLoop+0x78>)
 8001196:	5cd3      	ldrb	r3, [r2, r3]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	79fa      	ldrb	r2, [r7, #7]
 800119c:	429a      	cmp	r2, r3
 800119e:	d109      	bne.n	80011b4 <COM_rxLoop+0x68>
		{
			COM_parsePacket();
 80011a0:	f000 f814 	bl	80011cc <COM_parsePacket>
			COM_data.available = 1;
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <COM_rxLoop+0x7c>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1);
 80011aa:	2001      	movs	r0, #1
 80011ac:	f002 fd9a 	bl	8003ce4 <HAL_Delay>
			COM_sendACK();
 80011b0:	f000 f8d6 	bl	8001360 <COM_sendACK>
		}
		COM_clearBuff();
 80011b4:	f7ff feea 	bl	8000f8c <COM_clearBuff>
	}
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000204 	.word	0x20000204
 80011c4:	20000228 	.word	0x20000228
 80011c8:	20000208 	.word	0x20000208

080011cc <COM_parsePacket>:

void COM_parsePacket()
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
	floatArray f_pool;
	u32Array i_pool;

	COM_data.cmd = COM_RxBuff[3];
 80011d2:	4b21      	ldr	r3, [pc, #132]	; (8001258 <COM_parsePacket+0x8c>)
 80011d4:	78db      	ldrb	r3, [r3, #3]
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	4b20      	ldr	r3, [pc, #128]	; (800125c <COM_parsePacket+0x90>)
 80011da:	705a      	strb	r2, [r3, #1]
	switch(COM_data.cmd)
 80011dc:	4b1f      	ldr	r3, [pc, #124]	; (800125c <COM_parsePacket+0x90>)
 80011de:	785b      	ldrb	r3, [r3, #1]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	3b01      	subs	r3, #1
 80011e4:	2b05      	cmp	r3, #5
 80011e6:	d830      	bhi.n	800124a <COM_parsePacket+0x7e>
 80011e8:	a201      	add	r2, pc, #4	; (adr r2, 80011f0 <COM_parsePacket+0x24>)
 80011ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ee:	bf00      	nop
 80011f0:	08001249 	.word	0x08001249
 80011f4:	08001249 	.word	0x08001249
 80011f8:	08001209 	.word	0x08001209
 80011fc:	08001209 	.word	0x08001209
 8001200:	0800122f 	.word	0x0800122f
 8001204:	0800123d 	.word	0x0800123d
	case CMD_STOP:
		break;

	case CMD_MOVE_L:
	case CMD_MOVE_J:
		memcpy( f_pool.bytes, (uint8_t*)COM_RxBuff+4, 4);
 8001208:	4b15      	ldr	r3, [pc, #84]	; (8001260 <COM_parsePacket+0x94>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	607b      	str	r3, [r7, #4]
		COM_data.f_param1 = f_pool.var;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a12      	ldr	r2, [pc, #72]	; (800125c <COM_parsePacket+0x90>)
 8001212:	6053      	str	r3, [r2, #4]
		memcpy( f_pool.bytes, (uint8_t*)COM_RxBuff+8, 4);
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <COM_parsePacket+0x98>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	607b      	str	r3, [r7, #4]
		COM_data.f_param2 = f_pool.var;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a0f      	ldr	r2, [pc, #60]	; (800125c <COM_parsePacket+0x90>)
 800121e:	6093      	str	r3, [r2, #8]
		memcpy( f_pool.bytes, (uint8_t*)COM_RxBuff+12, 4);
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <COM_parsePacket+0x9c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	607b      	str	r3, [r7, #4]
		COM_data.f_param3 = f_pool.var;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a0c      	ldr	r2, [pc, #48]	; (800125c <COM_parsePacket+0x90>)
 800122a:	60d3      	str	r3, [r2, #12]
		break;
 800122c:	e00d      	b.n	800124a <COM_parsePacket+0x7e>

	case CMD_WAIT:
		memcpy( i_pool.bytes, (uint8_t*)COM_RxBuff+4, 4);
 800122e:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <COM_parsePacket+0x94>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	603b      	str	r3, [r7, #0]
		COM_data.u32_param = i_pool.var;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	4a09      	ldr	r2, [pc, #36]	; (800125c <COM_parsePacket+0x90>)
 8001238:	6113      	str	r3, [r2, #16]
		break;
 800123a:	e006      	b.n	800124a <COM_parsePacket+0x7e>

	case CMD_MAGNET:
		COM_data.u8_param = COM_RxBuff[4];
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <COM_parsePacket+0x8c>)
 800123e:	791b      	ldrb	r3, [r3, #4]
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <COM_parsePacket+0x90>)
 8001244:	751a      	strb	r2, [r3, #20]
		break;
 8001246:	e000      	b.n	800124a <COM_parsePacket+0x7e>
		break;
 8001248:	bf00      	nop
	}
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	20000228 	.word	0x20000228
 800125c:	20000208 	.word	0x20000208
 8001260:	2000022c 	.word	0x2000022c
 8001264:	20000230 	.word	0x20000230
 8001268:	20000234 	.word	0x20000234

0800126c <COM_sendPacket>:

void COM_sendPacket(uint8_t* data, uint8_t d_len)
{
 800126c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001270:	b087      	sub	sp, #28
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	460b      	mov	r3, r1
 8001278:	70fb      	strb	r3, [r7, #3]
 800127a:	466b      	mov	r3, sp
 800127c:	461e      	mov	r6, r3
	uint8_t base_len = 5;
 800127e:	2305      	movs	r3, #5
 8001280:	757b      	strb	r3, [r7, #21]
	uint8_t len = base_len + d_len;
 8001282:	7d7a      	ldrb	r2, [r7, #21]
 8001284:	78fb      	ldrb	r3, [r7, #3]
 8001286:	4413      	add	r3, r2
 8001288:	753b      	strb	r3, [r7, #20]

	uint8_t packet[len];
 800128a:	7d39      	ldrb	r1, [r7, #20]
 800128c:	460b      	mov	r3, r1
 800128e:	3b01      	subs	r3, #1
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	b2cb      	uxtb	r3, r1
 8001294:	2200      	movs	r2, #0
 8001296:	4698      	mov	r8, r3
 8001298:	4691      	mov	r9, r2
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	f04f 0300 	mov.w	r3, #0
 80012a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012ae:	b2cb      	uxtb	r3, r1
 80012b0:	2200      	movs	r2, #0
 80012b2:	461c      	mov	r4, r3
 80012b4:	4615      	mov	r5, r2
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	f04f 0300 	mov.w	r3, #0
 80012be:	00eb      	lsls	r3, r5, #3
 80012c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012c4:	00e2      	lsls	r2, r4, #3
 80012c6:	460b      	mov	r3, r1
 80012c8:	3307      	adds	r3, #7
 80012ca:	08db      	lsrs	r3, r3, #3
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	ebad 0d03 	sub.w	sp, sp, r3
 80012d2:	466b      	mov	r3, sp
 80012d4:	3300      	adds	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
	packet[0] = 0xFF;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	22ff      	movs	r2, #255	; 0xff
 80012dc:	701a      	strb	r2, [r3, #0]
	packet[1] = 0xFF;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	22ff      	movs	r2, #255	; 0xff
 80012e2:	705a      	strb	r2, [r3, #1]
	packet[2] = d_len;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	78fa      	ldrb	r2, [r7, #3]
 80012e8:	709a      	strb	r2, [r3, #2]
	memcpy(packet+3, data, d_len);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	3303      	adds	r3, #3
 80012ee:	78fa      	ldrb	r2, [r7, #3]
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f007 fd4c 	bl	8008d90 <memcpy>

	//calculate checksum
	uint8_t checksum = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	75bb      	strb	r3, [r7, #22]
	for( uint8_t i = 2; i < len-2; i++)
 80012fc:	2302      	movs	r3, #2
 80012fe:	75fb      	strb	r3, [r7, #23]
 8001300:	e008      	b.n	8001314 <COM_sendPacket+0xa8>
		checksum += packet[i];
 8001302:	7dfb      	ldrb	r3, [r7, #23]
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	5cd2      	ldrb	r2, [r2, r3]
 8001308:	7dbb      	ldrb	r3, [r7, #22]
 800130a:	4413      	add	r3, r2
 800130c:	75bb      	strb	r3, [r7, #22]
	for( uint8_t i = 2; i < len-2; i++)
 800130e:	7dfb      	ldrb	r3, [r7, #23]
 8001310:	3301      	adds	r3, #1
 8001312:	75fb      	strb	r3, [r7, #23]
 8001314:	7dfa      	ldrb	r2, [r7, #23]
 8001316:	7d3b      	ldrb	r3, [r7, #20]
 8001318:	3b02      	subs	r3, #2
 800131a:	429a      	cmp	r2, r3
 800131c:	dbf1      	blt.n	8001302 <COM_sendPacket+0x96>
	checksum = ( ~checksum ) & 0xFF;
 800131e:	7dbb      	ldrb	r3, [r7, #22]
 8001320:	43db      	mvns	r3, r3
 8001322:	75bb      	strb	r3, [r7, #22]
	packet[len-2] = checksum;
 8001324:	7d3b      	ldrb	r3, [r7, #20]
 8001326:	3b02      	subs	r3, #2
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	7db9      	ldrb	r1, [r7, #22]
 800132c:	54d1      	strb	r1, [r2, r3]
	packet[len-1] = '\n';
 800132e:	7d3b      	ldrb	r3, [r7, #20]
 8001330:	3b01      	subs	r3, #1
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	210a      	movs	r1, #10
 8001336:	54d1      	strb	r1, [r2, r3]

	//send via uart
	HAL_UART_Transmit(huart_com, packet, len, 100);
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <COM_sendPacket+0xf0>)
 800133a:	6818      	ldr	r0, [r3, #0]
 800133c:	7d3b      	ldrb	r3, [r7, #20]
 800133e:	b29a      	uxth	r2, r3
 8001340:	2364      	movs	r3, #100	; 0x64
 8001342:	68f9      	ldr	r1, [r7, #12]
 8001344:	f006 f92a 	bl	800759c <HAL_UART_Transmit>
	HAL_Delay(1);
 8001348:	2001      	movs	r0, #1
 800134a:	f002 fccb 	bl	8003ce4 <HAL_Delay>
 800134e:	46b5      	mov	sp, r6
}
 8001350:	bf00      	nop
 8001352:	371c      	adds	r7, #28
 8001354:	46bd      	mov	sp, r7
 8001356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800135a:	bf00      	nop
 800135c:	20000220 	.word	0x20000220

08001360 <COM_sendACK>:

void COM_sendACK()
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
	uint8_t packet[] = { COM_ACK };
 8001366:	230b      	movs	r3, #11
 8001368:	713b      	strb	r3, [r7, #4]
	COM_sendPacket(packet, 1);
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	2101      	movs	r1, #1
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ff7c 	bl	800126c <COM_sendPacket>
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <COM_sendDone>:

void COM_sendDone()
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
	uint8_t packet[] = { COM_DONE };
 8001382:	230c      	movs	r3, #12
 8001384:	713b      	strb	r3, [r7, #4]
	COM_sendPacket(packet, 1);
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	2101      	movs	r1, #1
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff ff6e 	bl	800126c <COM_sendPacket>
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <COM_sendInfo>:

void COM_sendInfo(float x, float y, float z, float q1, float q2, float q3, uint8_t magnet)
{
 8001398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800139c:	b093      	sub	sp, #76	; 0x4c
 800139e:	af00      	add	r7, sp, #0
 80013a0:	ed87 0a07 	vstr	s0, [r7, #28]
 80013a4:	edc7 0a06 	vstr	s1, [r7, #24]
 80013a8:	ed87 1a05 	vstr	s2, [r7, #20]
 80013ac:	edc7 1a04 	vstr	s3, [r7, #16]
 80013b0:	ed87 2a03 	vstr	s4, [r7, #12]
 80013b4:	edc7 2a02 	vstr	s5, [r7, #8]
 80013b8:	4603      	mov	r3, r0
 80013ba:	71fb      	strb	r3, [r7, #7]
 80013bc:	466b      	mov	r3, sp
 80013be:	461e      	mov	r6, r3
	const uint8_t len = 1+4*6+1;
 80013c0:	231a      	movs	r3, #26
 80013c2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	float input_arr[6] = { x, y, z, q1, q2, q3};
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	633b      	str	r3, [r7, #48]	; 0x30
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	637b      	str	r3, [r7, #52]	; 0x34
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	63bb      	str	r3, [r7, #56]	; 0x38
	floatArray pool;

	uint8_t packet[len];
 80013de:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80013e2:	3b01      	subs	r3, #1
 80013e4:	643b      	str	r3, [r7, #64]	; 0x40
 80013e6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80013ea:	2200      	movs	r2, #0
 80013ec:	4698      	mov	r8, r3
 80013ee:	4691      	mov	r9, r2
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	f04f 0300 	mov.w	r3, #0
 80013f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001400:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001404:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001408:	2200      	movs	r2, #0
 800140a:	461c      	mov	r4, r3
 800140c:	4615      	mov	r5, r2
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	f04f 0300 	mov.w	r3, #0
 8001416:	00eb      	lsls	r3, r5, #3
 8001418:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800141c:	00e2      	lsls	r2, r4, #3
 800141e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001422:	3307      	adds	r3, #7
 8001424:	08db      	lsrs	r3, r3, #3
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	ebad 0d03 	sub.w	sp, sp, r3
 800142c:	466b      	mov	r3, sp
 800142e:	3300      	adds	r3, #0
 8001430:	63fb      	str	r3, [r7, #60]	; 0x3c

	packet[0] = COM_INFO;
 8001432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001434:	220d      	movs	r2, #13
 8001436:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < 6; i++)
 8001438:	2300      	movs	r3, #0
 800143a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800143e:	e014      	b.n	800146a <COM_sendInfo+0xd2>
	{
		pool.var = input_arr[i];
 8001440:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	3348      	adds	r3, #72	; 0x48
 8001448:	443b      	add	r3, r7
 800144a:	3b24      	subs	r3, #36	; 0x24
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	623b      	str	r3, [r7, #32]
		memcpy(packet+1 + i*4, pool.bytes, 4);
 8001450:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	3301      	adds	r3, #1
 8001458:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800145a:	4413      	add	r3, r2
 800145c:	6a3a      	ldr	r2, [r7, #32]
 800145e:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 6; i++)
 8001460:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001464:	3301      	adds	r3, #1
 8001466:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800146a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800146e:	2b05      	cmp	r3, #5
 8001470:	d9e6      	bls.n	8001440 <COM_sendInfo+0xa8>
	}
	packet[len-1] = magnet;
 8001472:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001476:	3b01      	subs	r3, #1
 8001478:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800147a:	79f9      	ldrb	r1, [r7, #7]
 800147c:	54d1      	strb	r1, [r2, r3]
	COM_sendPacket(packet, len);
 800147e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001482:	4619      	mov	r1, r3
 8001484:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001486:	f7ff fef1 	bl	800126c <COM_sendPacket>
 800148a:	46b5      	mov	sp, r6
}
 800148c:	bf00      	nop
 800148e:	374c      	adds	r7, #76	; 0x4c
 8001490:	46bd      	mov	sp, r7
 8001492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08001498 <COM_sendMsg>:

void COM_sendMsg(const char* msg)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	static uint8_t msg_buff[201];
	msg_buff[0] = COM_MSG;
 80014a0:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <COM_sendMsg+0x4c>)
 80014a2:	220e      	movs	r2, #14
 80014a4:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	73fb      	strb	r3, [r7, #15]
	while( msg[i] != '\0' )
 80014aa:	e00a      	b.n	80014c2 <COM_sendMsg+0x2a>
	{
		msg_buff[i+1] = msg[i];
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	441a      	add	r2, r3
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	3301      	adds	r3, #1
 80014b6:	7811      	ldrb	r1, [r2, #0]
 80014b8:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <COM_sendMsg+0x4c>)
 80014ba:	54d1      	strb	r1, [r2, r3]
		i++;
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	3301      	adds	r3, #1
 80014c0:	73fb      	strb	r3, [r7, #15]
	while( msg[i] != '\0' )
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	4413      	add	r3, r2
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1ee      	bne.n	80014ac <COM_sendMsg+0x14>
	}
	COM_sendPacket(msg_buff, i+1);
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	3301      	adds	r3, #1
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	4619      	mov	r1, r3
 80014d6:	4803      	ldr	r0, [pc, #12]	; (80014e4 <COM_sendMsg+0x4c>)
 80014d8:	f7ff fec8 	bl	800126c <COM_sendPacket>
}
 80014dc:	bf00      	nop
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	2000032c 	.word	0x2000032c

080014e8 <print>:


void print(const char *fmt, ...)
{
 80014e8:	b40f      	push	{r0, r1, r2, r3}
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b0b4      	sub	sp, #208	; 0xd0
 80014ee:	af00      	add	r7, sp, #0
	char string[200];
	va_list argp;
	va_start(argp, fmt);
 80014f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014f4:	607b      	str	r3, [r7, #4]
    if(0 < vsprintf(string,fmt,argp))
 80014f6:	f107 0308 	add.w	r3, r7, #8
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8001500:	4618      	mov	r0, r3
 8001502:	f008 f8db 	bl	80096bc <vsiprintf>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	dd04      	ble.n	8001516 <print+0x2e>
        COM_sendMsg((const char*)string);
 800150c:	f107 0308 	add.w	r3, r7, #8
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ffc1 	bl	8001498 <COM_sendMsg>
	va_end(argp);
}
 8001516:	bf00      	nop
 8001518:	37d0      	adds	r7, #208	; 0xd0
 800151a:	46bd      	mov	sp, r7
 800151c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001520:	b004      	add	sp, #16
 8001522:	4770      	bx	lr

08001524 <CTRL_startup>:
/* ###############################
 *         STARTUP
 * ###############################
 */
void CTRL_startup()
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
	stateMachine.stateChanged = false;
 800152a:	4b12      	ldr	r3, [pc, #72]	; (8001574 <CTRL_startup+0x50>)
 800152c:	2200      	movs	r2, #0
 800152e:	709a      	strb	r2, [r3, #2]
	stateMachine.state = MANUAL;
 8001530:	4b10      	ldr	r3, [pc, #64]	; (8001574 <CTRL_startup+0x50>)
 8001532:	2201      	movs	r2, #1
 8001534:	701a      	strb	r2, [r3, #0]

	PAD_setLedManual(LED_ON);
 8001536:	2001      	movs	r0, #1
 8001538:	f001 fe78 	bl	800322c <PAD_setLedManual>
	for(uint8_t i = 1; i <=3; i++)
 800153c:	2301      	movs	r3, #1
 800153e:	71fb      	strb	r3, [r7, #7]
 8001540:	e00c      	b.n	800155c <CTRL_startup+0x38>
	{
		SRV_setLED(i, 1);
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	2101      	movs	r1, #1
 8001546:	4618      	mov	r0, r3
 8001548:	f002 f809 	bl	800355e <SRV_setLED>
		SRV_enableTorque(i, 1);
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	2101      	movs	r1, #1
 8001550:	4618      	mov	r0, r3
 8001552:	f002 f853 	bl	80035fc <SRV_enableTorque>
	for(uint8_t i = 1; i <=3; i++)
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	3301      	adds	r3, #1
 800155a:	71fb      	strb	r3, [r7, #7]
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	2b03      	cmp	r3, #3
 8001560:	d9ef      	bls.n	8001542 <CTRL_startup+0x1e>
	}
	KS_goHome();
 8001562:	f001 f97d 	bl	8002860 <KS_goHome>
	print("System started");
 8001566:	4804      	ldr	r0, [pc, #16]	; (8001578 <CTRL_startup+0x54>)
 8001568:	f7ff ffbe 	bl	80014e8 <print>
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	200003f8 	.word	0x200003f8
 8001578:	0800e738 	.word	0x0800e738

0800157c <CTRL_printInfo>:
/* ###############################
 *         COMMUNICATION
 * ###############################
 */
void CTRL_printInfo()
{
 800157c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
	static uint32_t last_print = 0;
	uint32_t now = HAL_GetTick();
 8001584:	f002 fba2 	bl	8003ccc <HAL_GetTick>
 8001588:	6078      	str	r0, [r7, #4]

	if( now-last_print > INFO_INTERVAL )
 800158a:	4b34      	ldr	r3, [pc, #208]	; (800165c <CTRL_printInfo+0xe0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	; 0x64
 8001594:	d95c      	bls.n	8001650 <CTRL_printInfo+0xd4>
	{
		COM_sendInfo(KS_Params.a_x, KS_Params.a_y, KS_Params.a_z, rad2deg(KS_Params.a_q1), rad2deg(KS_Params.a_q2), rad2deg(KS_Params.a_q3), KS_Params.fxState);
 8001596:	4b32      	ldr	r3, [pc, #200]	; (8001660 <CTRL_printInfo+0xe4>)
 8001598:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800159c:	4610      	mov	r0, r2
 800159e:	4619      	mov	r1, r3
 80015a0:	f7ff fb22 	bl	8000be8 <__aeabi_d2f>
 80015a4:	4604      	mov	r4, r0
 80015a6:	4b2e      	ldr	r3, [pc, #184]	; (8001660 <CTRL_printInfo+0xe4>)
 80015a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	f7ff fb1a 	bl	8000be8 <__aeabi_d2f>
 80015b4:	4605      	mov	r5, r0
 80015b6:	4b2a      	ldr	r3, [pc, #168]	; (8001660 <CTRL_printInfo+0xe4>)
 80015b8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	f7ff fb12 	bl	8000be8 <__aeabi_d2f>
 80015c4:	4606      	mov	r6, r0
 80015c6:	4b26      	ldr	r3, [pc, #152]	; (8001660 <CTRL_printInfo+0xe4>)
 80015c8:	ed93 7b00 	vldr	d7, [r3]
 80015cc:	eeb0 0a47 	vmov.f32	s0, s14
 80015d0:	eef0 0a67 	vmov.f32	s1, s15
 80015d4:	f000 f9f8 	bl	80019c8 <rad2deg>
 80015d8:	ec53 2b10 	vmov	r2, r3, d0
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff fb02 	bl	8000be8 <__aeabi_d2f>
 80015e4:	4680      	mov	r8, r0
 80015e6:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <CTRL_printInfo+0xe4>)
 80015e8:	ed93 7b02 	vldr	d7, [r3, #8]
 80015ec:	eeb0 0a47 	vmov.f32	s0, s14
 80015f0:	eef0 0a67 	vmov.f32	s1, s15
 80015f4:	f000 f9e8 	bl	80019c8 <rad2deg>
 80015f8:	ec53 2b10 	vmov	r2, r3, d0
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff faf2 	bl	8000be8 <__aeabi_d2f>
 8001604:	4681      	mov	r9, r0
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <CTRL_printInfo+0xe4>)
 8001608:	ed93 7b04 	vldr	d7, [r3, #16]
 800160c:	eeb0 0a47 	vmov.f32	s0, s14
 8001610:	eef0 0a67 	vmov.f32	s1, s15
 8001614:	f000 f9d8 	bl	80019c8 <rad2deg>
 8001618:	ec53 2b10 	vmov	r2, r3, d0
 800161c:	4610      	mov	r0, r2
 800161e:	4619      	mov	r1, r3
 8001620:	f7ff fae2 	bl	8000be8 <__aeabi_d2f>
 8001624:	4602      	mov	r2, r0
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <CTRL_printInfo+0xe4>)
 8001628:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800162c:	4618      	mov	r0, r3
 800162e:	ee02 2a90 	vmov	s5, r2
 8001632:	ee02 9a10 	vmov	s4, r9
 8001636:	ee01 8a90 	vmov	s3, r8
 800163a:	ee01 6a10 	vmov	s2, r6
 800163e:	ee00 5a90 	vmov	s1, r5
 8001642:	ee00 4a10 	vmov	s0, r4
 8001646:	f7ff fea7 	bl	8001398 <COM_sendInfo>
		last_print = now;
 800164a:	4a04      	ldr	r2, [pc, #16]	; (800165c <CTRL_printInfo+0xe0>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6013      	str	r3, [r2, #0]
	}
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800165a:	bf00      	nop
 800165c:	2000040c 	.word	0x2000040c
 8001660:	20000410 	.word	0x20000410

08001664 <CTRL_changeState>:
/* ###############################
 *         STATE MANAGMENT
 * ###############################
 */
void CTRL_changeState(CTRL_State_t state)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
	stateMachine.newState = state;
 800166e:	4a06      	ldr	r2, [pc, #24]	; (8001688 <CTRL_changeState+0x24>)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	7053      	strb	r3, [r2, #1]
	stateMachine.stateChanged = true;
 8001674:	4b04      	ldr	r3, [pc, #16]	; (8001688 <CTRL_changeState+0x24>)
 8001676:	2201      	movs	r2, #1
 8001678:	709a      	strb	r2, [r3, #2]
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	200003f8 	.word	0x200003f8

0800168c <CTRL_stateChangeHandler>:

void CTRL_stateChangeHandler()
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
	switch(stateMachine.newState)
 8001690:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <CTRL_stateChangeHandler+0x5c>)
 8001692:	785b      	ldrb	r3, [r3, #1]
 8001694:	2b02      	cmp	r3, #2
 8001696:	d014      	beq.n	80016c2 <CTRL_stateChangeHandler+0x36>
 8001698:	2b02      	cmp	r3, #2
 800169a:	dc1c      	bgt.n	80016d6 <CTRL_stateChangeHandler+0x4a>
 800169c:	2b00      	cmp	r3, #0
 800169e:	d002      	beq.n	80016a6 <CTRL_stateChangeHandler+0x1a>
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d007      	beq.n	80016b4 <CTRL_stateChangeHandler+0x28>
 80016a4:	e017      	b.n	80016d6 <CTRL_stateChangeHandler+0x4a>
	{
	case HALT:
		print("Failed to calculate inverse kinematics. HALT!");
 80016a6:	4811      	ldr	r0, [pc, #68]	; (80016ec <CTRL_stateChangeHandler+0x60>)
 80016a8:	f7ff ff1e 	bl	80014e8 <print>
		PAD_setLedManual(LED_BLINK);
 80016ac:	2002      	movs	r0, #2
 80016ae:	f001 fdbd 	bl	800322c <PAD_setLedManual>
		break;
 80016b2:	e010      	b.n	80016d6 <CTRL_stateChangeHandler+0x4a>

	case MANUAL:
		PAD_setLedManual(LED_ON);
 80016b4:	2001      	movs	r0, #1
 80016b6:	f001 fdb9 	bl	800322c <PAD_setLedManual>
		KS_setFx(0);
 80016ba:	2000      	movs	r0, #0
 80016bc:	f001 f8e4 	bl	8002888 <KS_setFx>
		break;
 80016c0:	e009      	b.n	80016d6 <CTRL_stateChangeHandler+0x4a>

	case PROGRAM:
		PAD_setLedManual(LED_OFF);
 80016c2:	2000      	movs	r0, #0
 80016c4:	f001 fdb2 	bl	800322c <PAD_setLedManual>
		CommandParams.type = IDLE;
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <CTRL_stateChangeHandler+0x64>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
		KS_setFx(0);
 80016ce:	2000      	movs	r0, #0
 80016d0:	f001 f8da 	bl	8002888 <KS_setFx>
		break;
 80016d4:	bf00      	nop
	}
	stateMachine.state = stateMachine.newState;
 80016d6:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <CTRL_stateChangeHandler+0x5c>)
 80016d8:	785a      	ldrb	r2, [r3, #1]
 80016da:	4b03      	ldr	r3, [pc, #12]	; (80016e8 <CTRL_stateChangeHandler+0x5c>)
 80016dc:	701a      	strb	r2, [r3, #0]
	stateMachine.stateChanged = false;
 80016de:	4b02      	ldr	r3, [pc, #8]	; (80016e8 <CTRL_stateChangeHandler+0x5c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	709a      	strb	r2, [r3, #2]
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	200003f8 	.word	0x200003f8
 80016ec:	0800e748 	.word	0x0800e748
 80016f0:	20000400 	.word	0x20000400

080016f4 <CTRL_parseCommand>:
/* ###############################
 *         COMMAND MANAGMENT
 * ###############################
 */
void CTRL_parseCommand()
{
 80016f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016f8:	af00      	add	r7, sp, #0
	switch(COM_data.cmd)
 80016fa:	4b44      	ldr	r3, [pc, #272]	; (800180c <CTRL_parseCommand+0x118>)
 80016fc:	785b      	ldrb	r3, [r3, #1]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	3b01      	subs	r3, #1
 8001702:	2b05      	cmp	r3, #5
 8001704:	d87c      	bhi.n	8001800 <CTRL_parseCommand+0x10c>
 8001706:	a201      	add	r2, pc, #4	; (adr r2, 800170c <CTRL_parseCommand+0x18>)
 8001708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800170c:	08001725 	.word	0x08001725
 8001710:	08001731 	.word	0x08001731
 8001714:	08001789 	.word	0x08001789
 8001718:	0800173d 	.word	0x0800173d
 800171c:	080017d5 	.word	0x080017d5
 8001720:	080017ef 	.word	0x080017ef
	{
	case CMD_START:
		CTRL_changeState(PROGRAM);
 8001724:	2002      	movs	r0, #2
 8001726:	f7ff ff9d 	bl	8001664 <CTRL_changeState>
		COM_sendDone();
 800172a:	f7ff fe27 	bl	800137c <COM_sendDone>
		break;
 800172e:	e067      	b.n	8001800 <CTRL_parseCommand+0x10c>

	case CMD_STOP:
		CTRL_changeState(MANUAL);
 8001730:	2001      	movs	r0, #1
 8001732:	f7ff ff97 	bl	8001664 <CTRL_changeState>
		COM_sendDone();
 8001736:	f7ff fe21 	bl	800137c <COM_sendDone>
		break;
 800173a:	e061      	b.n	8001800 <CTRL_parseCommand+0x10c>

	case CMD_MOVE_J:
		CommandParams.type = MOVING_J;
 800173c:	4b34      	ldr	r3, [pc, #208]	; (8001810 <CTRL_parseCommand+0x11c>)
 800173e:	2201      	movs	r2, #1
 8001740:	701a      	strb	r2, [r3, #0]
		CommandParams.start = HAL_GetTick();
 8001742:	f002 fac3 	bl	8003ccc <HAL_GetTick>
 8001746:	4603      	mov	r3, r0
 8001748:	4a31      	ldr	r2, [pc, #196]	; (8001810 <CTRL_parseCommand+0x11c>)
 800174a:	6053      	str	r3, [r2, #4]
		KS_moveJ(COM_data.f_param1, COM_data.f_param2, COM_data.f_param3);
 800174c:	4b2f      	ldr	r3, [pc, #188]	; (800180c <CTRL_parseCommand+0x118>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe fef9 	bl	8000548 <__aeabi_f2d>
 8001756:	4604      	mov	r4, r0
 8001758:	460d      	mov	r5, r1
 800175a:	4b2c      	ldr	r3, [pc, #176]	; (800180c <CTRL_parseCommand+0x118>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fef2 	bl	8000548 <__aeabi_f2d>
 8001764:	4680      	mov	r8, r0
 8001766:	4689      	mov	r9, r1
 8001768:	4b28      	ldr	r3, [pc, #160]	; (800180c <CTRL_parseCommand+0x118>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe feeb 	bl	8000548 <__aeabi_f2d>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	ec43 2b12 	vmov	d2, r2, r3
 800177a:	ec49 8b11 	vmov	d1, r8, r9
 800177e:	ec45 4b10 	vmov	d0, r4, r5
 8001782:	f000 ffbd 	bl	8002700 <KS_moveJ>
		break;
 8001786:	e03b      	b.n	8001800 <CTRL_parseCommand+0x10c>

	case CMD_MOVE_L:
		CommandParams.type = MOVING_L;
 8001788:	4b21      	ldr	r3, [pc, #132]	; (8001810 <CTRL_parseCommand+0x11c>)
 800178a:	2202      	movs	r2, #2
 800178c:	701a      	strb	r2, [r3, #0]
		CommandParams.start = HAL_GetTick();
 800178e:	f002 fa9d 	bl	8003ccc <HAL_GetTick>
 8001792:	4603      	mov	r3, r0
 8001794:	4a1e      	ldr	r2, [pc, #120]	; (8001810 <CTRL_parseCommand+0x11c>)
 8001796:	6053      	str	r3, [r2, #4]
		KS_moveL(COM_data.f_param1, COM_data.f_param2, COM_data.f_param3);
 8001798:	4b1c      	ldr	r3, [pc, #112]	; (800180c <CTRL_parseCommand+0x118>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fed3 	bl	8000548 <__aeabi_f2d>
 80017a2:	4604      	mov	r4, r0
 80017a4:	460d      	mov	r5, r1
 80017a6:	4b19      	ldr	r3, [pc, #100]	; (800180c <CTRL_parseCommand+0x118>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe fecc 	bl	8000548 <__aeabi_f2d>
 80017b0:	4680      	mov	r8, r0
 80017b2:	4689      	mov	r9, r1
 80017b4:	4b15      	ldr	r3, [pc, #84]	; (800180c <CTRL_parseCommand+0x118>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe fec5 	bl	8000548 <__aeabi_f2d>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	ec43 2b12 	vmov	d2, r2, r3
 80017c6:	ec49 8b11 	vmov	d1, r8, r9
 80017ca:	ec45 4b10 	vmov	d0, r4, r5
 80017ce:	f000 ffc1 	bl	8002754 <KS_moveL>
		break;
 80017d2:	e015      	b.n	8001800 <CTRL_parseCommand+0x10c>

	case CMD_WAIT:
		CommandParams.type = WAIT;
 80017d4:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <CTRL_parseCommand+0x11c>)
 80017d6:	2203      	movs	r2, #3
 80017d8:	701a      	strb	r2, [r3, #0]
		CommandParams.start = HAL_GetTick();
 80017da:	f002 fa77 	bl	8003ccc <HAL_GetTick>
 80017de:	4603      	mov	r3, r0
 80017e0:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <CTRL_parseCommand+0x11c>)
 80017e2:	6053      	str	r3, [r2, #4]
		CommandParams.timer = COM_data.u32_param;
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <CTRL_parseCommand+0x118>)
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	4a09      	ldr	r2, [pc, #36]	; (8001810 <CTRL_parseCommand+0x11c>)
 80017ea:	6093      	str	r3, [r2, #8]
		break;
 80017ec:	e008      	b.n	8001800 <CTRL_parseCommand+0x10c>

	case CMD_MAGNET:
		KS_setFx(COM_data.u8_param);
 80017ee:	4b07      	ldr	r3, [pc, #28]	; (800180c <CTRL_parseCommand+0x118>)
 80017f0:	7d1b      	ldrb	r3, [r3, #20]
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	4618      	mov	r0, r3
 80017f6:	f001 f847 	bl	8002888 <KS_setFx>
		COM_sendDone();
 80017fa:	f7ff fdbf 	bl	800137c <COM_sendDone>
		break;
 80017fe:	bf00      	nop
	}

	COM_data.available = 0;
 8001800:	4b02      	ldr	r3, [pc, #8]	; (800180c <CTRL_parseCommand+0x118>)
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
}
 8001806:	bf00      	nop
 8001808:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800180c:	20000208 	.word	0x20000208
 8001810:	20000400 	.word	0x20000400

08001814 <CTRL_Loop>:
/* ###############################
 *     MAIN MOVEMENT CONTROL
 * ###############################
 */
void CTRL_Loop()
{
 8001814:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
	uint32_t now = HAL_GetTick();
 800181c:	f002 fa56 	bl	8003ccc <HAL_GetTick>
 8001820:	6078      	str	r0, [r7, #4]

	if(stateMachine.stateChanged)
 8001822:	4b4e      	ldr	r3, [pc, #312]	; (800195c <CTRL_Loop+0x148>)
 8001824:	789b      	ldrb	r3, [r3, #2]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <CTRL_Loop+0x1a>
		CTRL_stateChangeHandler();
 800182a:	f7ff ff2f 	bl	800168c <CTRL_stateChangeHandler>

	if(COM_data.available)
 800182e:	4b4c      	ldr	r3, [pc, #304]	; (8001960 <CTRL_Loop+0x14c>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <CTRL_Loop+0x28>
		CTRL_parseCommand();
 8001838:	f7ff ff5c 	bl	80016f4 <CTRL_parseCommand>

	if(stateMachine.state == MANUAL)
 800183c:	4b47      	ldr	r3, [pc, #284]	; (800195c <CTRL_Loop+0x148>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d13c      	bne.n	80018be <CTRL_Loop+0xaa>
	{
		if( PAD.btn_combo_short )
 8001844:	4b47      	ldr	r3, [pc, #284]	; (8001964 <CTRL_Loop+0x150>)
 8001846:	7b1b      	ldrb	r3, [r3, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d00a      	beq.n	8001862 <CTRL_Loop+0x4e>
			KS_setFx(!KS_Params.fxState);
 800184c:	4b46      	ldr	r3, [pc, #280]	; (8001968 <CTRL_Loop+0x154>)
 800184e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001852:	2b00      	cmp	r3, #0
 8001854:	bf0c      	ite	eq
 8001856:	2301      	moveq	r3, #1
 8001858:	2300      	movne	r3, #0
 800185a:	b2db      	uxtb	r3, r3
 800185c:	4618      	mov	r0, r3
 800185e:	f001 f813 	bl	8002888 <KS_setFx>

		if( PAD.btn_combo_long )
 8001862:	4b40      	ldr	r3, [pc, #256]	; (8001964 <CTRL_Loop+0x150>)
 8001864:	7b5b      	ldrb	r3, [r3, #13]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <CTRL_Loop+0x5a>
			KS_goHome();
 800186a:	f000 fff9 	bl	8002860 <KS_goHome>

		if( KS_Params.target_reached )
 800186e:	4b3e      	ldr	r3, [pc, #248]	; (8001968 <CTRL_Loop+0x154>)
 8001870:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001874:	2b00      	cmp	r3, #0
 8001876:	d01f      	beq.n	80018b8 <CTRL_Loop+0xa4>
		{
			KS_moveByVector(PAD.axis_R_X, PAD.axis_R_Y, PAD.axis_L_Y);
 8001878:	4b3a      	ldr	r3, [pc, #232]	; (8001964 <CTRL_Loop+0x150>)
 800187a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fe50 	bl	8000524 <__aeabi_i2d>
 8001884:	4604      	mov	r4, r0
 8001886:	460d      	mov	r5, r1
 8001888:	4b36      	ldr	r3, [pc, #216]	; (8001964 <CTRL_Loop+0x150>)
 800188a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fe48 	bl	8000524 <__aeabi_i2d>
 8001894:	4680      	mov	r8, r0
 8001896:	4689      	mov	r9, r1
 8001898:	4b32      	ldr	r3, [pc, #200]	; (8001964 <CTRL_Loop+0x150>)
 800189a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe fe40 	bl	8000524 <__aeabi_i2d>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	ec43 2b12 	vmov	d2, r2, r3
 80018ac:	ec49 8b11 	vmov	d1, r8, r9
 80018b0:	ec45 4b10 	vmov	d0, r4, r5
 80018b4:	f000 ff70 	bl	8002798 <KS_moveByVector>
		}
		KS_movementLoop();
 80018b8:	f000 fe3a 	bl	8002530 <KS_movementLoop>
			KS_goHome();
			CTRL_changeState(MANUAL);
		}

	}
}
 80018bc:	e048      	b.n	8001950 <CTRL_Loop+0x13c>
	else if(stateMachine.state == PROGRAM)
 80018be:	4b27      	ldr	r3, [pc, #156]	; (800195c <CTRL_Loop+0x148>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d130      	bne.n	8001928 <CTRL_Loop+0x114>
		switch( CommandParams.type )
 80018c6:	4b29      	ldr	r3, [pc, #164]	; (800196c <CTRL_Loop+0x158>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	d009      	beq.n	80018e2 <CTRL_Loop+0xce>
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	dc3e      	bgt.n	8001950 <CTRL_Loop+0x13c>
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d039      	beq.n	800194a <CTRL_Loop+0x136>
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	db3a      	blt.n	8001950 <CTRL_Loop+0x13c>
 80018da:	3b01      	subs	r3, #1
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d837      	bhi.n	8001950 <CTRL_Loop+0x13c>
 80018e0:	e00d      	b.n	80018fe <CTRL_Loop+0xea>
			if( now-CommandParams.start > CommandParams.timer )
 80018e2:	4b22      	ldr	r3, [pc, #136]	; (800196c <CTRL_Loop+0x158>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	1ad2      	subs	r2, r2, r3
 80018ea:	4b20      	ldr	r3, [pc, #128]	; (800196c <CTRL_Loop+0x158>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d92d      	bls.n	800194e <CTRL_Loop+0x13a>
				CommandParams.type = IDLE;
 80018f2:	4b1e      	ldr	r3, [pc, #120]	; (800196c <CTRL_Loop+0x158>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
				COM_sendDone();
 80018f8:	f7ff fd40 	bl	800137c <COM_sendDone>
			break;
 80018fc:	e027      	b.n	800194e <CTRL_Loop+0x13a>
			if( KS_Params.target_reached || now-CommandParams.start > CMD_TIMEOUT )
 80018fe:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <CTRL_Loop+0x154>)
 8001900:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001904:	2b00      	cmp	r3, #0
 8001906:	d107      	bne.n	8001918 <CTRL_Loop+0x104>
 8001908:	4b18      	ldr	r3, [pc, #96]	; (800196c <CTRL_Loop+0x158>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	1ad2      	subs	r2, r2, r3
 8001910:	4b17      	ldr	r3, [pc, #92]	; (8001970 <CTRL_Loop+0x15c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d904      	bls.n	8001922 <CTRL_Loop+0x10e>
				CommandParams.type = IDLE;
 8001918:	4b14      	ldr	r3, [pc, #80]	; (800196c <CTRL_Loop+0x158>)
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
				COM_sendDone();
 800191e:	f7ff fd2d 	bl	800137c <COM_sendDone>
			KS_movementLoop();
 8001922:	f000 fe05 	bl	8002530 <KS_movementLoop>
			break;
 8001926:	e013      	b.n	8001950 <CTRL_Loop+0x13c>
	else if(stateMachine.state == HALT)
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <CTRL_Loop+0x148>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d10f      	bne.n	8001950 <CTRL_Loop+0x13c>
		if( PAD.btn_combo_long )
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <CTRL_Loop+0x150>)
 8001932:	7b5b      	ldrb	r3, [r3, #13]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00b      	beq.n	8001950 <CTRL_Loop+0x13c>
			print("Resetting position to home");
 8001938:	480e      	ldr	r0, [pc, #56]	; (8001974 <CTRL_Loop+0x160>)
 800193a:	f7ff fdd5 	bl	80014e8 <print>
			KS_goHome();
 800193e:	f000 ff8f 	bl	8002860 <KS_goHome>
			CTRL_changeState(MANUAL);
 8001942:	2001      	movs	r0, #1
 8001944:	f7ff fe8e 	bl	8001664 <CTRL_changeState>
}
 8001948:	e002      	b.n	8001950 <CTRL_Loop+0x13c>
			break;
 800194a:	bf00      	nop
 800194c:	e000      	b.n	8001950 <CTRL_Loop+0x13c>
			break;
 800194e:	bf00      	nop
}
 8001950:	bf00      	nop
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800195a:	bf00      	nop
 800195c:	200003f8 	.word	0x200003f8
 8001960:	20000208 	.word	0x20000208
 8001964:	20000650 	.word	0x20000650
 8001968:	20000410 	.word	0x20000410
 800196c:	20000400 	.word	0x20000400
 8001970:	20000000 	.word	0x20000000
 8001974:	0800e778 	.word	0x0800e778

08001978 <deg2rad>:
#include "kinematics.h"

KS_Params_t KS_Params;

// CONVERTERS
double deg2rad(double deg) { return (deg/180.0f) * M_PI; }
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	ed87 0b00 	vstr	d0, [r7]
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <deg2rad+0x48>)
 8001988:	e9d7 0100 	ldrd	r0, r1, [r7]
 800198c:	f7fe ff5e 	bl	800084c <__aeabi_ddiv>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	a307      	add	r3, pc, #28	; (adr r3, 80019b8 <deg2rad+0x40>)
 800199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199e:	f7fe fe2b 	bl	80005f8 <__aeabi_dmul>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	ec43 2b17 	vmov	d7, r2, r3
 80019aa:	eeb0 0a47 	vmov.f32	s0, s14
 80019ae:	eef0 0a67 	vmov.f32	s1, s15
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	54442d18 	.word	0x54442d18
 80019bc:	400921fb 	.word	0x400921fb
 80019c0:	40668000 	.word	0x40668000
 80019c4:	00000000 	.word	0x00000000

080019c8 <rad2deg>:
double rad2deg(double rad) { return rad * (180.0f / M_PI); }
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	ed87 0b00 	vstr	d0, [r7]
 80019d2:	a309      	add	r3, pc, #36	; (adr r3, 80019f8 <rad2deg+0x30>)
 80019d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019dc:	f7fe fe0c 	bl	80005f8 <__aeabi_dmul>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	ec43 2b17 	vmov	d7, r2, r3
 80019e8:	eeb0 0a47 	vmov.f32	s0, s14
 80019ec:	eef0 0a67 	vmov.f32	s1, s15
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	1a63c1f8 	.word	0x1a63c1f8
 80019fc:	404ca5dc 	.word	0x404ca5dc

08001a00 <rad2srv>:
uint16_t rad2srv(double rad) { return (rad/M_PI)*512 + 512; }
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	ed87 0b00 	vstr	d0, [r7]
 8001a0a:	a313      	add	r3, pc, #76	; (adr r3, 8001a58 <rad2srv+0x58>)
 8001a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a14:	f7fe ff1a 	bl	800084c <__aeabi_ddiv>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001a28:	f7fe fde6 	bl	80005f8 <__aeabi_dmul>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4610      	mov	r0, r2
 8001a32:	4619      	mov	r1, r3
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001a3c:	f7fe fc26 	bl	800028c <__adddf3>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4610      	mov	r0, r2
 8001a46:	4619      	mov	r1, r3
 8001a48:	f7ff f8ae 	bl	8000ba8 <__aeabi_d2uiz>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	54442d18 	.word	0x54442d18
 8001a5c:	400921fb 	.word	0x400921fb

08001a60 <srv2rad>:
uint16_t deg2srv(double deg) { return (deg/180.0f)*512 + 512; }
double srv2rad(uint16_t srv) { return (((double)srv-512.0f)/512.0f)*M_PI; }
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	80fb      	strh	r3, [r7, #6]
 8001a6a:	88fb      	ldrh	r3, [r7, #6]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fd49 	bl	8000504 <__aeabi_ui2d>
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001a7a:	f7fe fc05 	bl	8000288 <__aeabi_dsub>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4610      	mov	r0, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001a8e:	f7fe fedd 	bl	800084c <__aeabi_ddiv>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	a309      	add	r3, pc, #36	; (adr r3, 8001ac0 <srv2rad+0x60>)
 8001a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa0:	f7fe fdaa 	bl	80005f8 <__aeabi_dmul>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	ec43 2b17 	vmov	d7, r2, r3
 8001aac:	eeb0 0a47 	vmov.f32	s0, s14
 8001ab0:	eef0 0a67 	vmov.f32	s1, s15
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	f3af 8000 	nop.w
 8001ac0:	54442d18 	.word	0x54442d18
 8001ac4:	400921fb 	.word	0x400921fb

08001ac8 <KS_InitParams>:
double srv2deg(uint16_t srv) { return (((double)srv-512.0f)/512.0f)*180.0f; }

void KS_InitParams()
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
	KS_Params.set_reached = false;
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <KS_InitParams+0x28>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	KS_Params.target_reached = false;
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <KS_InitParams+0x28>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	KS_Params.fxState = 0;
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <KS_InitParams+0x28>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	20000410 	.word	0x20000410
 8001af4:	00000000 	.word	0x00000000

08001af8 <KS_calc_IK>:

// KINEMMATICS MATH
bool KS_calc_IK(double x, double y, double z)
{
 8001af8:	b5b0      	push	{r4, r5, r7, lr}
 8001afa:	b09c      	sub	sp, #112	; 0x70
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	ed87 0b04 	vstr	d0, [r7, #16]
 8001b02:	ed87 1b02 	vstr	d1, [r7, #8]
 8001b06:	ed87 2b00 	vstr	d2, [r7]
    double q1, q2, q3;
    double r1, r2, r3, phi1, phi2;
    double _x, _y, _z;
    _x = x;
 8001b0a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b0e:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
    _y = y;
 8001b12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b16:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
    _z = z;
 8001b1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b1e:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

    //from user frame
    x *= (-1);
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	6979      	ldr	r1, [r7, #20]
 8001b26:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 8001b2a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    x += FRAME_X;
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	4bd1      	ldr	r3, [pc, #836]	; (8001e78 <KS_calc_IK+0x380>)
 8001b34:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b38:	f7fe fba8 	bl	800028c <__adddf3>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    y *= (-1);
 8001b44:	68bc      	ldr	r4, [r7, #8]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b4c:	e9c7 4502 	strd	r4, r5, [r7, #8]
    y += FRAME_Y;
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	4bc9      	ldr	r3, [pc, #804]	; (8001e7c <KS_calc_IK+0x384>)
 8001b56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b5a:	f7fe fb97 	bl	800028c <__adddf3>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	e9c7 2302 	strd	r2, r3, [r7, #8]

    //inverse kinematics
    q1 = 2 * atan( (x - sqrt( x*x + y*y - L4*L4 )) / ( L4-y ) );
 8001b66:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b6e:	f7fe fd43 	bl	80005f8 <__aeabi_dmul>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4614      	mov	r4, r2
 8001b78:	461d      	mov	r5, r3
 8001b7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b82:	f7fe fd39 	bl	80005f8 <__aeabi_dmul>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	4629      	mov	r1, r5
 8001b8e:	f7fe fb7d 	bl	800028c <__adddf3>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4610      	mov	r0, r2
 8001b98:	4619      	mov	r1, r3
 8001b9a:	a3a5      	add	r3, pc, #660	; (adr r3, 8001e30 <KS_calc_IK+0x338>)
 8001b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba0:	f7fe fb72 	bl	8000288 <__aeabi_dsub>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	ec43 2b17 	vmov	d7, r2, r3
 8001bac:	eeb0 0a47 	vmov.f32	s0, s14
 8001bb0:	eef0 0a67 	vmov.f32	s1, s15
 8001bb4:	f00a fb08 	bl	800c1c8 <sqrt>
 8001bb8:	ec53 2b10 	vmov	r2, r3, d0
 8001bbc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bc0:	f7fe fb62 	bl	8000288 <__aeabi_dsub>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4614      	mov	r4, r2
 8001bca:	461d      	mov	r5, r3
 8001bcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bd0:	f04f 0000 	mov.w	r0, #0
 8001bd4:	49aa      	ldr	r1, [pc, #680]	; (8001e80 <KS_calc_IK+0x388>)
 8001bd6:	f7fe fb57 	bl	8000288 <__aeabi_dsub>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4620      	mov	r0, r4
 8001be0:	4629      	mov	r1, r5
 8001be2:	f7fe fe33 	bl	800084c <__aeabi_ddiv>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	ec43 2b17 	vmov	d7, r2, r3
 8001bee:	eeb0 0a47 	vmov.f32	s0, s14
 8001bf2:	eef0 0a67 	vmov.f32	s1, s15
 8001bf6:	f009 ffb7 	bl	800bb68 <atan>
 8001bfa:	ec51 0b10 	vmov	r0, r1, d0
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	f7fe fb43 	bl	800028c <__adddf3>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    r1 = sqrt( x*x + pow( y+L4/cos(q1), 2) ) - L4*tan(q1);
 8001c0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c16:	f7fe fcef 	bl	80005f8 <__aeabi_dmul>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4614      	mov	r4, r2
 8001c20:	461d      	mov	r5, r3
 8001c22:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8001c26:	f00a f93f 	bl	800bea8 <cos>
 8001c2a:	ec53 2b10 	vmov	r2, r3, d0
 8001c2e:	f04f 0000 	mov.w	r0, #0
 8001c32:	4993      	ldr	r1, [pc, #588]	; (8001e80 <KS_calc_IK+0x388>)
 8001c34:	f7fe fe0a 	bl	800084c <__aeabi_ddiv>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	4619      	mov	r1, r3
 8001c40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c44:	f7fe fb22 	bl	800028c <__adddf3>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	ec43 2b17 	vmov	d7, r2, r3
 8001c50:	ed9f 1b79 	vldr	d1, [pc, #484]	; 8001e38 <KS_calc_IK+0x340>
 8001c54:	eeb0 0a47 	vmov.f32	s0, s14
 8001c58:	eef0 0a67 	vmov.f32	s1, s15
 8001c5c:	f00a fa44 	bl	800c0e8 <pow>
 8001c60:	ec53 2b10 	vmov	r2, r3, d0
 8001c64:	4620      	mov	r0, r4
 8001c66:	4629      	mov	r1, r5
 8001c68:	f7fe fb10 	bl	800028c <__adddf3>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	ec43 2b17 	vmov	d7, r2, r3
 8001c74:	eeb0 0a47 	vmov.f32	s0, s14
 8001c78:	eef0 0a67 	vmov.f32	s1, s15
 8001c7c:	f00a faa4 	bl	800c1c8 <sqrt>
 8001c80:	ec55 4b10 	vmov	r4, r5, d0
 8001c84:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8001c88:	f00a f9c6 	bl	800c018 <tan>
 8001c8c:	ec51 0b10 	vmov	r0, r1, d0
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	4b7a      	ldr	r3, [pc, #488]	; (8001e80 <KS_calc_IK+0x388>)
 8001c96:	f7fe fcaf 	bl	80005f8 <__aeabi_dmul>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	4629      	mov	r1, r5
 8001ca2:	f7fe faf1 	bl	8000288 <__aeabi_dsub>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    r2 = z - L1 + L5;
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	4b74      	ldr	r3, [pc, #464]	; (8001e84 <KS_calc_IK+0x38c>)
 8001cb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cb8:	f7fe fae6 	bl	8000288 <__aeabi_dsub>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	a35e      	add	r3, pc, #376	; (adr r3, 8001e40 <KS_calc_IK+0x348>)
 8001cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cca:	f7fe fadf 	bl	800028c <__adddf3>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    r3 = sqrt( r1*r1 + r2*r2 );
 8001cd6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001cda:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001cde:	f7fe fc8b 	bl	80005f8 <__aeabi_dmul>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4614      	mov	r4, r2
 8001ce8:	461d      	mov	r5, r3
 8001cea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001cee:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001cf2:	f7fe fc81 	bl	80005f8 <__aeabi_dmul>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	4629      	mov	r1, r5
 8001cfe:	f7fe fac5 	bl	800028c <__adddf3>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	ec43 2b17 	vmov	d7, r2, r3
 8001d0a:	eeb0 0a47 	vmov.f32	s0, s14
 8001d0e:	eef0 0a67 	vmov.f32	s1, s15
 8001d12:	f00a fa59 	bl	800c1c8 <sqrt>
 8001d16:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
    phi1 = atan( r2 / r1 );
 8001d1a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001d1e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001d22:	f7fe fd93 	bl	800084c <__aeabi_ddiv>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	ec43 2b17 	vmov	d7, r2, r3
 8001d2e:	eeb0 0a47 	vmov.f32	s0, s14
 8001d32:	eef0 0a67 	vmov.f32	s1, s15
 8001d36:	f009 ff17 	bl	800bb68 <atan>
 8001d3a:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
    phi2 = M_PI/2 - phi1;
 8001d3e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001d42:	a141      	add	r1, pc, #260	; (adr r1, 8001e48 <KS_calc_IK+0x350>)
 8001d44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d48:	f7fe fa9e 	bl	8000288 <__aeabi_dsub>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    q2 = acos( ( L3*L3 - L2*L2 - r3*r3 ) / (-2*L2*r3) ) - phi2;
 8001d54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d58:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001d5c:	f7fe fc4c 	bl	80005f8 <__aeabi_dmul>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	a13a      	add	r1, pc, #232	; (adr r1, 8001e50 <KS_calc_IK+0x358>)
 8001d66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d6a:	f7fe fa8d 	bl	8000288 <__aeabi_dsub>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4614      	mov	r4, r2
 8001d74:	461d      	mov	r5, r3
 8001d76:	a338      	add	r3, pc, #224	; (adr r3, 8001e58 <KS_calc_IK+0x360>)
 8001d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001d80:	f7fe fc3a 	bl	80005f8 <__aeabi_dmul>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4620      	mov	r0, r4
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	f7fe fd5e 	bl	800084c <__aeabi_ddiv>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	ec43 2b17 	vmov	d7, r2, r3
 8001d98:	eeb0 0a47 	vmov.f32	s0, s14
 8001d9c:	eef0 0a67 	vmov.f32	s1, s15
 8001da0:	f00a f96e 	bl	800c080 <acos>
 8001da4:	ec51 0b10 	vmov	r0, r1, d0
 8001da8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001dac:	f7fe fa6c 	bl	8000288 <__aeabi_dsub>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    q3 = acos( ( r3*r3 - L2*L2 - L3*L3 ) / (-2*L2*L3) ) - M_PI/2;
 8001db8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001dbc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001dc0:	f7fe fc1a 	bl	80005f8 <__aeabi_dmul>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4610      	mov	r0, r2
 8001dca:	4619      	mov	r1, r3
 8001dcc:	a324      	add	r3, pc, #144	; (adr r3, 8001e60 <KS_calc_IK+0x368>)
 8001dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd2:	f7fe fa59 	bl	8000288 <__aeabi_dsub>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4610      	mov	r0, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	a322      	add	r3, pc, #136	; (adr r3, 8001e68 <KS_calc_IK+0x370>)
 8001de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de4:	f7fe fa50 	bl	8000288 <__aeabi_dsub>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4610      	mov	r0, r2
 8001dee:	4619      	mov	r1, r3
 8001df0:	a31f      	add	r3, pc, #124	; (adr r3, 8001e70 <KS_calc_IK+0x378>)
 8001df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df6:	f7fe fd29 	bl	800084c <__aeabi_ddiv>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	ec43 2b17 	vmov	d7, r2, r3
 8001e02:	eeb0 0a47 	vmov.f32	s0, s14
 8001e06:	eef0 0a67 	vmov.f32	s1, s15
 8001e0a:	f00a f939 	bl	800c080 <acos>
 8001e0e:	ec51 0b10 	vmov	r0, r1, d0
 8001e12:	a30d      	add	r3, pc, #52	; (adr r3, 8001e48 <KS_calc_IK+0x350>)
 8001e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e18:	f7fe fa36 	bl	8000288 <__aeabi_dsub>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	e9c7 2306 	strd	r2, r3, [r7, #24]

    //check for NaN
    if(q1 != q1 || q2 != q2 || q3 != q3)
 8001e24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001e28:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001e2c:	e02c      	b.n	8001e88 <KS_calc_IK+0x390>
 8001e2e:	bf00      	nop
 8001e30:	00000000 	.word	0x00000000
 8001e34:	408f8080 	.word	0x408f8080
 8001e38:	00000000 	.word	0x00000000
 8001e3c:	40000000 	.word	0x40000000
 8001e40:	cccccccd 	.word	0xcccccccd
 8001e44:	4042cccc 	.word	0x4042cccc
 8001e48:	54442d18 	.word	0x54442d18
 8001e4c:	3ff921fb 	.word	0x3ff921fb
 8001e50:	9999999a 	.word	0x9999999a
 8001e54:	40c6c3b9 	.word	0x40c6c3b9
 8001e58:	cccccccd 	.word	0xcccccccd
 8001e5c:	c064cccc 	.word	0xc064cccc
 8001e60:	70a3d70b 	.word	0x70a3d70b
 8001e64:	40bb0a3d 	.word	0x40bb0a3d
 8001e68:	28f5c290 	.word	0x28f5c290
 8001e6c:	40d2246c 	.word	0x40d2246c
 8001e70:	7ae147af 	.word	0x7ae147af
 8001e74:	c0d62614 	.word	0xc0d62614
 8001e78:	405a4000 	.word	0x405a4000
 8001e7c:	40140000 	.word	0x40140000
 8001e80:	403fc000 	.word	0x403fc000
 8001e84:	40464000 	.word	0x40464000
 8001e88:	f7fe fe1e 	bl	8000ac8 <__aeabi_dcmpeq>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d011      	beq.n	8001eb6 <KS_calc_IK+0x3be>
 8001e92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e96:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e9a:	f7fe fe15 	bl	8000ac8 <__aeabi_dcmpeq>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d008      	beq.n	8001eb6 <KS_calc_IK+0x3be>
 8001ea4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ea8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001eac:	f7fe fe0c 	bl	8000ac8 <__aeabi_dcmpeq>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <KS_calc_IK+0x3c2>
        return false;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e03c      	b.n	8001f34 <KS_calc_IK+0x43c>

    //offset
    KS_Params.s_q1 = deg2rad(Q1_OFF) + q1;
 8001eba:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8001f40 <KS_calc_IK+0x448>
 8001ebe:	f7ff fd5b 	bl	8001978 <deg2rad>
 8001ec2:	ec51 0b10 	vmov	r0, r1, d0
 8001ec6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001eca:	f7fe f9df 	bl	800028c <__adddf3>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4921      	ldr	r1, [pc, #132]	; (8001f58 <KS_calc_IK+0x460>)
 8001ed4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    KS_Params.s_q2 = deg2rad(Q2_OFF) + q2;
 8001ed8:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8001f48 <KS_calc_IK+0x450>
 8001edc:	f7ff fd4c 	bl	8001978 <deg2rad>
 8001ee0:	ec51 0b10 	vmov	r0, r1, d0
 8001ee4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ee8:	f7fe f9d0 	bl	800028c <__adddf3>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4919      	ldr	r1, [pc, #100]	; (8001f58 <KS_calc_IK+0x460>)
 8001ef2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    KS_Params.s_q3 = deg2rad(Q3_OFF) + q3;
 8001ef6:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8001f50 <KS_calc_IK+0x458>
 8001efa:	f7ff fd3d 	bl	8001978 <deg2rad>
 8001efe:	ec51 0b10 	vmov	r0, r1, d0
 8001f02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f06:	f7fe f9c1 	bl	800028c <__adddf3>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4912      	ldr	r1, [pc, #72]	; (8001f58 <KS_calc_IK+0x460>)
 8001f10:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    KS_Params.s_x = _x;
 8001f14:	4910      	ldr	r1, [pc, #64]	; (8001f58 <KS_calc_IK+0x460>)
 8001f16:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001f1a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    KS_Params.s_y = _y;
 8001f1e:	490e      	ldr	r1, [pc, #56]	; (8001f58 <KS_calc_IK+0x460>)
 8001f20:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001f24:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    KS_Params.s_z = _z;
 8001f28:	490b      	ldr	r1, [pc, #44]	; (8001f58 <KS_calc_IK+0x460>)
 8001f2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f2e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58


    return true;
 8001f32:	2301      	movs	r3, #1
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3770      	adds	r7, #112	; 0x70
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f3c:	f3af 8000 	nop.w
	...
 8001f4c:	40300000 	.word	0x40300000
 8001f50:	00000000 	.word	0x00000000
 8001f54:	c0140000 	.word	0xc0140000
 8001f58:	20000410 	.word	0x20000410
 8001f5c:	00000000 	.word	0x00000000

08001f60 <KS_calc_FK>:

void KS_calc_FK()
{
 8001f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f64:	b088      	sub	sp, #32
 8001f66:	af00      	add	r7, sp, #0
	//offset
    double q1 = KS_Params.a_q1 - deg2rad(Q1_OFF);
 8001f68:	4bc3      	ldr	r3, [pc, #780]	; (8002278 <KS_calc_FK+0x318>)
 8001f6a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001f6e:	ed9f 0bb4 	vldr	d0, [pc, #720]	; 8002240 <KS_calc_FK+0x2e0>
 8001f72:	f7ff fd01 	bl	8001978 <deg2rad>
 8001f76:	ec53 2b10 	vmov	r2, r3, d0
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	4629      	mov	r1, r5
 8001f7e:	f7fe f983 	bl	8000288 <__aeabi_dsub>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double q2 = KS_Params.a_q2 - deg2rad(Q2_OFF);
 8001f8a:	4bbb      	ldr	r3, [pc, #748]	; (8002278 <KS_calc_FK+0x318>)
 8001f8c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001f90:	ed9f 0bad 	vldr	d0, [pc, #692]	; 8002248 <KS_calc_FK+0x2e8>
 8001f94:	f7ff fcf0 	bl	8001978 <deg2rad>
 8001f98:	ec53 2b10 	vmov	r2, r3, d0
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	4629      	mov	r1, r5
 8001fa0:	f7fe f972 	bl	8000288 <__aeabi_dsub>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double q3 = KS_Params.a_q3 - deg2rad(Q3_OFF);
 8001fac:	4bb2      	ldr	r3, [pc, #712]	; (8002278 <KS_calc_FK+0x318>)
 8001fae:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001fb2:	ed9f 0ba7 	vldr	d0, [pc, #668]	; 8002250 <KS_calc_FK+0x2f0>
 8001fb6:	f7ff fcdf 	bl	8001978 <deg2rad>
 8001fba:	ec53 2b10 	vmov	r2, r3, d0
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	4629      	mov	r1, r5
 8001fc2:	f7fe f961 	bl	8000288 <__aeabi_dsub>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	e9c7 2302 	strd	r2, r3, [r7, #8]

    //forward kinematics
    KS_Params.a_x = -L2*sin(q2)*cos(q1) + L3*cos(q1)*cos(q2 + q3) + L4*sin(q1);
 8001fce:	ed97 0b04 	vldr	d0, [r7, #16]
 8001fd2:	f009 ffc9 	bl	800bf68 <sin>
 8001fd6:	ec51 0b10 	vmov	r0, r1, d0
 8001fda:	a39f      	add	r3, pc, #636	; (adr r3, 8002258 <KS_calc_FK+0x2f8>)
 8001fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe0:	f7fe fb0a 	bl	80005f8 <__aeabi_dmul>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4614      	mov	r4, r2
 8001fea:	461d      	mov	r5, r3
 8001fec:	ed97 0b06 	vldr	d0, [r7, #24]
 8001ff0:	f009 ff5a 	bl	800bea8 <cos>
 8001ff4:	ec53 2b10 	vmov	r2, r3, d0
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	4629      	mov	r1, r5
 8001ffc:	f7fe fafc 	bl	80005f8 <__aeabi_dmul>
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	4614      	mov	r4, r2
 8002006:	461d      	mov	r5, r3
 8002008:	ed97 0b06 	vldr	d0, [r7, #24]
 800200c:	f009 ff4c 	bl	800bea8 <cos>
 8002010:	ec51 0b10 	vmov	r0, r1, d0
 8002014:	a392      	add	r3, pc, #584	; (adr r3, 8002260 <KS_calc_FK+0x300>)
 8002016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201a:	f7fe faed 	bl	80005f8 <__aeabi_dmul>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	e9c7 2300 	strd	r2, r3, [r7]
 8002026:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800202a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800202e:	f7fe f92d 	bl	800028c <__adddf3>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	ec43 2b17 	vmov	d7, r2, r3
 800203a:	eeb0 0a47 	vmov.f32	s0, s14
 800203e:	eef0 0a67 	vmov.f32	s1, s15
 8002042:	f009 ff31 	bl	800bea8 <cos>
 8002046:	ec53 2b10 	vmov	r2, r3, d0
 800204a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800204e:	f7fe fad3 	bl	80005f8 <__aeabi_dmul>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	4620      	mov	r0, r4
 8002058:	4629      	mov	r1, r5
 800205a:	f7fe f917 	bl	800028c <__adddf3>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4614      	mov	r4, r2
 8002064:	461d      	mov	r5, r3
 8002066:	ed97 0b06 	vldr	d0, [r7, #24]
 800206a:	f009 ff7d 	bl	800bf68 <sin>
 800206e:	ec51 0b10 	vmov	r0, r1, d0
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	4b81      	ldr	r3, [pc, #516]	; (800227c <KS_calc_FK+0x31c>)
 8002078:	f7fe fabe 	bl	80005f8 <__aeabi_dmul>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4620      	mov	r0, r4
 8002082:	4629      	mov	r1, r5
 8002084:	f7fe f902 	bl	800028c <__adddf3>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	497a      	ldr	r1, [pc, #488]	; (8002278 <KS_calc_FK+0x318>)
 800208e:	e9c1 2306 	strd	r2, r3, [r1, #24]
    KS_Params.a_y = -L2*sin(q1)*sin(q2) + L3*sin(q1)*cos(q2 + q3) - L4*cos(q1);
 8002092:	ed97 0b06 	vldr	d0, [r7, #24]
 8002096:	f009 ff67 	bl	800bf68 <sin>
 800209a:	ec51 0b10 	vmov	r0, r1, d0
 800209e:	a36e      	add	r3, pc, #440	; (adr r3, 8002258 <KS_calc_FK+0x2f8>)
 80020a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a4:	f7fe faa8 	bl	80005f8 <__aeabi_dmul>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	4614      	mov	r4, r2
 80020ae:	461d      	mov	r5, r3
 80020b0:	ed97 0b04 	vldr	d0, [r7, #16]
 80020b4:	f009 ff58 	bl	800bf68 <sin>
 80020b8:	ec53 2b10 	vmov	r2, r3, d0
 80020bc:	4620      	mov	r0, r4
 80020be:	4629      	mov	r1, r5
 80020c0:	f7fe fa9a 	bl	80005f8 <__aeabi_dmul>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4614      	mov	r4, r2
 80020ca:	461d      	mov	r5, r3
 80020cc:	ed97 0b06 	vldr	d0, [r7, #24]
 80020d0:	f009 ff4a 	bl	800bf68 <sin>
 80020d4:	ec51 0b10 	vmov	r0, r1, d0
 80020d8:	a361      	add	r3, pc, #388	; (adr r3, 8002260 <KS_calc_FK+0x300>)
 80020da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020de:	f7fe fa8b 	bl	80005f8 <__aeabi_dmul>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	e9c7 2300 	strd	r2, r3, [r7]
 80020ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020f2:	f7fe f8cb 	bl	800028c <__adddf3>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	ec43 2b17 	vmov	d7, r2, r3
 80020fe:	eeb0 0a47 	vmov.f32	s0, s14
 8002102:	eef0 0a67 	vmov.f32	s1, s15
 8002106:	f009 fecf 	bl	800bea8 <cos>
 800210a:	ec53 2b10 	vmov	r2, r3, d0
 800210e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002112:	f7fe fa71 	bl	80005f8 <__aeabi_dmul>
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	4620      	mov	r0, r4
 800211c:	4629      	mov	r1, r5
 800211e:	f7fe f8b5 	bl	800028c <__adddf3>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4614      	mov	r4, r2
 8002128:	461d      	mov	r5, r3
 800212a:	ed97 0b06 	vldr	d0, [r7, #24]
 800212e:	f009 febb 	bl	800bea8 <cos>
 8002132:	ec51 0b10 	vmov	r0, r1, d0
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	4b50      	ldr	r3, [pc, #320]	; (800227c <KS_calc_FK+0x31c>)
 800213c:	f7fe fa5c 	bl	80005f8 <__aeabi_dmul>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4620      	mov	r0, r4
 8002146:	4629      	mov	r1, r5
 8002148:	f7fe f89e 	bl	8000288 <__aeabi_dsub>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	4949      	ldr	r1, [pc, #292]	; (8002278 <KS_calc_FK+0x318>)
 8002152:	e9c1 2308 	strd	r2, r3, [r1, #32]
    KS_Params.a_z = L1 + L2*cos(q2) + L3*sin(q2 + q3) - L5;
 8002156:	ed97 0b04 	vldr	d0, [r7, #16]
 800215a:	f009 fea5 	bl	800bea8 <cos>
 800215e:	ec51 0b10 	vmov	r0, r1, d0
 8002162:	a341      	add	r3, pc, #260	; (adr r3, 8002268 <KS_calc_FK+0x308>)
 8002164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002168:	f7fe fa46 	bl	80005f8 <__aeabi_dmul>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4610      	mov	r0, r2
 8002172:	4619      	mov	r1, r3
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	4b41      	ldr	r3, [pc, #260]	; (8002280 <KS_calc_FK+0x320>)
 800217a:	f7fe f887 	bl	800028c <__adddf3>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4614      	mov	r4, r2
 8002184:	461d      	mov	r5, r3
 8002186:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800218a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800218e:	f7fe f87d 	bl	800028c <__adddf3>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	ec43 2b17 	vmov	d7, r2, r3
 800219a:	eeb0 0a47 	vmov.f32	s0, s14
 800219e:	eef0 0a67 	vmov.f32	s1, s15
 80021a2:	f009 fee1 	bl	800bf68 <sin>
 80021a6:	ec51 0b10 	vmov	r0, r1, d0
 80021aa:	a32d      	add	r3, pc, #180	; (adr r3, 8002260 <KS_calc_FK+0x300>)
 80021ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b0:	f7fe fa22 	bl	80005f8 <__aeabi_dmul>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4620      	mov	r0, r4
 80021ba:	4629      	mov	r1, r5
 80021bc:	f7fe f866 	bl	800028c <__adddf3>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4610      	mov	r0, r2
 80021c6:	4619      	mov	r1, r3
 80021c8:	a329      	add	r3, pc, #164	; (adr r3, 8002270 <KS_calc_FK+0x310>)
 80021ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ce:	f7fe f85b 	bl	8000288 <__aeabi_dsub>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4928      	ldr	r1, [pc, #160]	; (8002278 <KS_calc_FK+0x318>)
 80021d8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

    //to user frame
    KS_Params.a_x -= FRAME_X;
 80021dc:	4b26      	ldr	r3, [pc, #152]	; (8002278 <KS_calc_FK+0x318>)
 80021de:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	4b27      	ldr	r3, [pc, #156]	; (8002284 <KS_calc_FK+0x324>)
 80021e8:	f7fe f84e 	bl	8000288 <__aeabi_dsub>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4921      	ldr	r1, [pc, #132]	; (8002278 <KS_calc_FK+0x318>)
 80021f2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    KS_Params.a_x *= (-1);
 80021f6:	4b20      	ldr	r3, [pc, #128]	; (8002278 <KS_calc_FK+0x318>)
 80021f8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80021fc:	4692      	mov	sl, r2
 80021fe:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8002202:	4b1d      	ldr	r3, [pc, #116]	; (8002278 <KS_calc_FK+0x318>)
 8002204:	e9c3 ab06 	strd	sl, fp, [r3, #24]
    KS_Params.a_y -= FRAME_Y;
 8002208:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <KS_calc_FK+0x318>)
 800220a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800220e:	f04f 0200 	mov.w	r2, #0
 8002212:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <KS_calc_FK+0x328>)
 8002214:	f7fe f838 	bl	8000288 <__aeabi_dsub>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4916      	ldr	r1, [pc, #88]	; (8002278 <KS_calc_FK+0x318>)
 800221e:	e9c1 2308 	strd	r2, r3, [r1, #32]
    KS_Params.a_y *= (-1);
 8002222:	4b15      	ldr	r3, [pc, #84]	; (8002278 <KS_calc_FK+0x318>)
 8002224:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002228:	4690      	mov	r8, r2
 800222a:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800222e:	4b12      	ldr	r3, [pc, #72]	; (8002278 <KS_calc_FK+0x318>)
 8002230:	e9c3 8908 	strd	r8, r9, [r3, #32]
}
 8002234:	bf00      	nop
 8002236:	3720      	adds	r7, #32
 8002238:	46bd      	mov	sp, r7
 800223a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800223e:	bf00      	nop
	...
 800224c:	40300000 	.word	0x40300000
 8002250:	00000000 	.word	0x00000000
 8002254:	c0140000 	.word	0xc0140000
 8002258:	cccccccd 	.word	0xcccccccd
 800225c:	c054cccc 	.word	0xc054cccc
 8002260:	9999999a 	.word	0x9999999a
 8002264:	40610999 	.word	0x40610999
 8002268:	cccccccd 	.word	0xcccccccd
 800226c:	4054cccc 	.word	0x4054cccc
 8002270:	cccccccd 	.word	0xcccccccd
 8002274:	4042cccc 	.word	0x4042cccc
 8002278:	20000410 	.word	0x20000410
 800227c:	403fc000 	.word	0x403fc000
 8002280:	40464000 	.word	0x40464000
 8002284:	405a4000 	.word	0x405a4000
 8002288:	40140000 	.word	0x40140000

0800228c <KS_setTarget>:

static inline void KS_setTarget(double x, double y, double z)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002296:	e9c7 2300 	strd	r2, r3, [r7]
	KS_Params.t_x = x;
 800229a:	490a      	ldr	r1, [pc, #40]	; (80022c4 <KS_setTarget+0x38>)
 800229c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022a0:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	KS_Params.t_y = y;
 80022a4:	4907      	ldr	r1, [pc, #28]	; (80022c4 <KS_setTarget+0x38>)
 80022a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022aa:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	KS_Params.t_z = z;
 80022ae:	4905      	ldr	r1, [pc, #20]	; (80022c4 <KS_setTarget+0x38>)
 80022b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022b4:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	20000410 	.word	0x20000410

080022c8 <KS_getActualPos>:

// MANAGERS
void KS_getActualPos()
{
 80022c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022cc:	b088      	sub	sp, #32
 80022ce:	af00      	add	r7, sp, #0
	static uint32_t last_get = 0;
	uint32_t now = HAL_GetTick();
 80022d0:	f001 fcfc 	bl	8003ccc <HAL_GetTick>
 80022d4:	61f8      	str	r0, [r7, #28]

	if(now-last_get > UPDATE_INTERVAL)
 80022d6:	4b6d      	ldr	r3, [pc, #436]	; (800248c <KS_getActualPos+0x1c4>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	69fa      	ldr	r2, [r7, #28]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b0a      	cmp	r3, #10
 80022e0:	f240 80ce 	bls.w	8002480 <KS_getActualPos+0x1b8>
	{
		KS_Params.a_q1 = srv2rad(SRV_readPosition(1));
 80022e4:	2001      	movs	r0, #1
 80022e6:	f001 f9a7 	bl	8003638 <SRV_readPosition>
 80022ea:	4603      	mov	r3, r0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fbb7 	bl	8001a60 <srv2rad>
 80022f2:	eeb0 7a40 	vmov.f32	s14, s0
 80022f6:	eef0 7a60 	vmov.f32	s15, s1
 80022fa:	4b65      	ldr	r3, [pc, #404]	; (8002490 <KS_getActualPos+0x1c8>)
 80022fc:	ed83 7b00 	vstr	d7, [r3]
		KS_Params.a_q2 = srv2rad(SRV_readPosition(2));
 8002300:	2002      	movs	r0, #2
 8002302:	f001 f999 	bl	8003638 <SRV_readPosition>
 8002306:	4603      	mov	r3, r0
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff fba9 	bl	8001a60 <srv2rad>
 800230e:	eeb0 7a40 	vmov.f32	s14, s0
 8002312:	eef0 7a60 	vmov.f32	s15, s1
 8002316:	4b5e      	ldr	r3, [pc, #376]	; (8002490 <KS_getActualPos+0x1c8>)
 8002318:	ed83 7b02 	vstr	d7, [r3, #8]
		KS_Params.a_q3 = srv2rad(SRV_readPosition(3));
 800231c:	2003      	movs	r0, #3
 800231e:	f001 f98b 	bl	8003638 <SRV_readPosition>
 8002322:	4603      	mov	r3, r0
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fb9b 	bl	8001a60 <srv2rad>
 800232a:	eeb0 7a40 	vmov.f32	s14, s0
 800232e:	eef0 7a60 	vmov.f32	s15, s1
 8002332:	4b57      	ldr	r3, [pc, #348]	; (8002490 <KS_getActualPos+0x1c8>)
 8002334:	ed83 7b04 	vstr	d7, [r3, #16]
		KS_calc_FK();
 8002338:	f7ff fe12 	bl	8001f60 <KS_calc_FK>
		KS_Params.set_reached = ( fabs(KS_Params.s_x - KS_Params.a_x) < THRESHOLD_L &&
 800233c:	4b54      	ldr	r3, [pc, #336]	; (8002490 <KS_getActualPos+0x1c8>)
 800233e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002342:	4b53      	ldr	r3, [pc, #332]	; (8002490 <KS_getActualPos+0x1c8>)
 8002344:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002348:	f7fd ff9e 	bl	8000288 <__aeabi_dsub>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4614      	mov	r4, r2
 8002352:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
				 	 	 	 	  fabs(KS_Params.s_y - KS_Params.a_y) < THRESHOLD_L &&
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	4b4e      	ldr	r3, [pc, #312]	; (8002494 <KS_getActualPos+0x1cc>)
 800235c:	4620      	mov	r0, r4
 800235e:	4629      	mov	r1, r5
 8002360:	f7fe fbbc 	bl	8000adc <__aeabi_dcmplt>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d030      	beq.n	80023cc <KS_getActualPos+0x104>
 800236a:	4b49      	ldr	r3, [pc, #292]	; (8002490 <KS_getActualPos+0x1c8>)
 800236c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002370:	4b47      	ldr	r3, [pc, #284]	; (8002490 <KS_getActualPos+0x1c8>)
 8002372:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002376:	f7fd ff87 	bl	8000288 <__aeabi_dsub>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	4690      	mov	r8, r2
 8002380:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
		KS_Params.set_reached = ( fabs(KS_Params.s_x - KS_Params.a_x) < THRESHOLD_L &&
 8002384:	f04f 0200 	mov.w	r2, #0
 8002388:	4b42      	ldr	r3, [pc, #264]	; (8002494 <KS_getActualPos+0x1cc>)
 800238a:	4640      	mov	r0, r8
 800238c:	4649      	mov	r1, r9
 800238e:	f7fe fba5 	bl	8000adc <__aeabi_dcmplt>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d019      	beq.n	80023cc <KS_getActualPos+0x104>
								  fabs(KS_Params.s_z - KS_Params.a_z) < THRESHOLD_L );
 8002398:	4b3d      	ldr	r3, [pc, #244]	; (8002490 <KS_getActualPos+0x1c8>)
 800239a:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800239e:	4b3c      	ldr	r3, [pc, #240]	; (8002490 <KS_getActualPos+0x1c8>)
 80023a0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80023a4:	f7fd ff70 	bl	8000288 <__aeabi_dsub>
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	613a      	str	r2, [r7, #16]
 80023ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023b2:	617b      	str	r3, [r7, #20]
				 	 	 	 	  fabs(KS_Params.s_y - KS_Params.a_y) < THRESHOLD_L &&
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	4b36      	ldr	r3, [pc, #216]	; (8002494 <KS_getActualPos+0x1cc>)
 80023ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023be:	f7fe fb8d 	bl	8000adc <__aeabi_dcmplt>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <KS_getActualPos+0x104>
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <KS_getActualPos+0x106>
 80023cc:	2300      	movs	r3, #0
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	b2da      	uxtb	r2, r3
		KS_Params.set_reached = ( fabs(KS_Params.s_x - KS_Params.a_x) < THRESHOLD_L &&
 80023d4:	4b2e      	ldr	r3, [pc, #184]	; (8002490 <KS_getActualPos+0x1c8>)
 80023d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
		KS_Params.target_reached = ( fabs(KS_Params.t_x - KS_Params.a_x) < THRESHOLD_L &&
 80023da:	4b2d      	ldr	r3, [pc, #180]	; (8002490 <KS_getActualPos+0x1c8>)
 80023dc:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80023e0:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <KS_getActualPos+0x1c8>)
 80023e2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80023e6:	f7fd ff4f 	bl	8000288 <__aeabi_dsub>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	60ba      	str	r2, [r7, #8]
 80023f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023f4:	60fb      	str	r3, [r7, #12]
				 	 	 	 	 	 fabs(KS_Params.t_y - KS_Params.a_y) < THRESHOLD_L &&
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	4b26      	ldr	r3, [pc, #152]	; (8002494 <KS_getActualPos+0x1cc>)
 80023fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002400:	f7fe fb6c 	bl	8000adc <__aeabi_dcmplt>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d030      	beq.n	800246c <KS_getActualPos+0x1a4>
 800240a:	4b21      	ldr	r3, [pc, #132]	; (8002490 <KS_getActualPos+0x1c8>)
 800240c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002410:	4b1f      	ldr	r3, [pc, #124]	; (8002490 <KS_getActualPos+0x1c8>)
 8002412:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002416:	f7fd ff37 	bl	8000288 <__aeabi_dsub>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	603a      	str	r2, [r7, #0]
 8002420:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002424:	607b      	str	r3, [r7, #4]
		KS_Params.target_reached = ( fabs(KS_Params.t_x - KS_Params.a_x) < THRESHOLD_L &&
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	4b1a      	ldr	r3, [pc, #104]	; (8002494 <KS_getActualPos+0x1cc>)
 800242c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002430:	f7fe fb54 	bl	8000adc <__aeabi_dcmplt>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d018      	beq.n	800246c <KS_getActualPos+0x1a4>
									 fabs(KS_Params.t_z - KS_Params.a_z) < THRESHOLD_L );
 800243a:	4b15      	ldr	r3, [pc, #84]	; (8002490 <KS_getActualPos+0x1c8>)
 800243c:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8002440:	4b13      	ldr	r3, [pc, #76]	; (8002490 <KS_getActualPos+0x1c8>)
 8002442:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002446:	f7fd ff1f 	bl	8000288 <__aeabi_dsub>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4692      	mov	sl, r2
 8002450:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
				 	 	 	 	 	 fabs(KS_Params.t_y - KS_Params.a_y) < THRESHOLD_L &&
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <KS_getActualPos+0x1cc>)
 800245a:	4650      	mov	r0, sl
 800245c:	4659      	mov	r1, fp
 800245e:	f7fe fb3d 	bl	8000adc <__aeabi_dcmplt>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <KS_getActualPos+0x1a4>
 8002468:	2301      	movs	r3, #1
 800246a:	e000      	b.n	800246e <KS_getActualPos+0x1a6>
 800246c:	2300      	movs	r3, #0
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	b2da      	uxtb	r2, r3
		KS_Params.target_reached = ( fabs(KS_Params.t_x - KS_Params.a_x) < THRESHOLD_L &&
 8002474:	4b06      	ldr	r3, [pc, #24]	; (8002490 <KS_getActualPos+0x1c8>)
 8002476:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
		last_get = now;
 800247a:	4a04      	ldr	r2, [pc, #16]	; (800248c <KS_getActualPos+0x1c4>)
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	6013      	str	r3, [r2, #0]
	}
}
 8002480:	bf00      	nop
 8002482:	3720      	adds	r7, #32
 8002484:	46bd      	mov	sp, r7
 8002486:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800248a:	bf00      	nop
 800248c:	20000490 	.word	0x20000490
 8002490:	20000410 	.word	0x20000410
 8002494:	40180000 	.word	0x40180000

08002498 <KS_setPos>:

void KS_setPos(double x, double y, double z)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	ed87 0b04 	vstr	d0, [r7, #16]
 80024a2:	ed87 1b02 	vstr	d1, [r7, #8]
 80024a6:	ed87 2b00 	vstr	d2, [r7]
	if( KS_calc_IK(x, y, z) )
 80024aa:	ed97 2b00 	vldr	d2, [r7]
 80024ae:	ed97 1b02 	vldr	d1, [r7, #8]
 80024b2:	ed97 0b04 	vldr	d0, [r7, #16]
 80024b6:	f7ff fb1f 	bl	8001af8 <KS_calc_IK>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d02d      	beq.n	800251c <KS_setPos+0x84>
	{
		SRV_move(1, rad2srv(KS_Params.s_q1), SPEED+20);
 80024c0:	4b1a      	ldr	r3, [pc, #104]	; (800252c <KS_setPos+0x94>)
 80024c2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80024c6:	eeb0 0a47 	vmov.f32	s0, s14
 80024ca:	eef0 0a67 	vmov.f32	s1, s15
 80024ce:	f7ff fa97 	bl	8001a00 <rad2srv>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2246      	movs	r2, #70	; 0x46
 80024d6:	4619      	mov	r1, r3
 80024d8:	2001      	movs	r0, #1
 80024da:	f001 f85e 	bl	800359a <SRV_move>
		SRV_move(2, rad2srv(KS_Params.s_q2), SPEED);
 80024de:	4b13      	ldr	r3, [pc, #76]	; (800252c <KS_setPos+0x94>)
 80024e0:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80024e4:	eeb0 0a47 	vmov.f32	s0, s14
 80024e8:	eef0 0a67 	vmov.f32	s1, s15
 80024ec:	f7ff fa88 	bl	8001a00 <rad2srv>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2232      	movs	r2, #50	; 0x32
 80024f4:	4619      	mov	r1, r3
 80024f6:	2002      	movs	r0, #2
 80024f8:	f001 f84f 	bl	800359a <SRV_move>
		SRV_move(3, rad2srv(KS_Params.s_q3), SPEED);
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <KS_setPos+0x94>)
 80024fe:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8002502:	eeb0 0a47 	vmov.f32	s0, s14
 8002506:	eef0 0a67 	vmov.f32	s1, s15
 800250a:	f7ff fa79 	bl	8001a00 <rad2srv>
 800250e:	4603      	mov	r3, r0
 8002510:	2232      	movs	r2, #50	; 0x32
 8002512:	4619      	mov	r1, r3
 8002514:	2003      	movs	r0, #3
 8002516:	f001 f840 	bl	800359a <SRV_move>
	}
	else
		CTRL_changeState(HALT);
}
 800251a:	e002      	b.n	8002522 <KS_setPos+0x8a>
		CTRL_changeState(HALT);
 800251c:	2000      	movs	r0, #0
 800251e:	f7ff f8a1 	bl	8001664 <CTRL_changeState>
}
 8002522:	bf00      	nop
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000410 	.word	0x20000410

08002530 <KS_movementLoop>:



void KS_movementLoop()
{
 8002530:	b5b0      	push	{r4, r5, r7, lr}
 8002532:	b088      	sub	sp, #32
 8002534:	af00      	add	r7, sp, #0
	double x, y, z, len;
	if( !KS_Params.target_reached )
 8002536:	4b6f      	ldr	r3, [pc, #444]	; (80026f4 <KS_movementLoop+0x1c4>)
 8002538:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800253c:	f083 0301 	eor.w	r3, r3, #1
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 80d2 	beq.w	80026ec <KS_movementLoop+0x1bc>
	{
		if( KS_Params.set_reached )
 8002548:	4b6a      	ldr	r3, [pc, #424]	; (80026f4 <KS_movementLoop+0x1c4>)
 800254a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 80cc 	beq.w	80026ec <KS_movementLoop+0x1bc>
		{
			x = KS_Params.t_x - KS_Params.s_x;
 8002554:	4b67      	ldr	r3, [pc, #412]	; (80026f4 <KS_movementLoop+0x1c4>)
 8002556:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800255a:	4b66      	ldr	r3, [pc, #408]	; (80026f4 <KS_movementLoop+0x1c4>)
 800255c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002560:	f7fd fe92 	bl	8000288 <__aeabi_dsub>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	e9c7 2306 	strd	r2, r3, [r7, #24]
			y = KS_Params.t_y - KS_Params.s_y;
 800256c:	4b61      	ldr	r3, [pc, #388]	; (80026f4 <KS_movementLoop+0x1c4>)
 800256e:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002572:	4b60      	ldr	r3, [pc, #384]	; (80026f4 <KS_movementLoop+0x1c4>)
 8002574:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002578:	f7fd fe86 	bl	8000288 <__aeabi_dsub>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	e9c7 2304 	strd	r2, r3, [r7, #16]
			z = KS_Params.t_z - KS_Params.s_z;
 8002584:	4b5b      	ldr	r3, [pc, #364]	; (80026f4 <KS_movementLoop+0x1c4>)
 8002586:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800258a:	4b5a      	ldr	r3, [pc, #360]	; (80026f4 <KS_movementLoop+0x1c4>)
 800258c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8002590:	f7fd fe7a 	bl	8000288 <__aeabi_dsub>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	e9c7 2302 	strd	r2, r3, [r7, #8]
			len = sqrt( x*x + y*y + z*z );
 800259c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025a4:	f7fe f828 	bl	80005f8 <__aeabi_dmul>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4614      	mov	r4, r2
 80025ae:	461d      	mov	r5, r3
 80025b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80025b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025b8:	f7fe f81e 	bl	80005f8 <__aeabi_dmul>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4620      	mov	r0, r4
 80025c2:	4629      	mov	r1, r5
 80025c4:	f7fd fe62 	bl	800028c <__adddf3>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4614      	mov	r4, r2
 80025ce:	461d      	mov	r5, r3
 80025d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80025d8:	f7fe f80e 	bl	80005f8 <__aeabi_dmul>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4620      	mov	r0, r4
 80025e2:	4629      	mov	r1, r5
 80025e4:	f7fd fe52 	bl	800028c <__adddf3>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	ec43 2b17 	vmov	d7, r2, r3
 80025f0:	eeb0 0a47 	vmov.f32	s0, s14
 80025f4:	eef0 0a67 	vmov.f32	s1, s15
 80025f8:	f009 fde6 	bl	800c1c8 <sqrt>
 80025fc:	ed87 0b00 	vstr	d0, [r7]
			if( len > 1 )
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	4b3c      	ldr	r3, [pc, #240]	; (80026f8 <KS_movementLoop+0x1c8>)
 8002606:	e9d7 0100 	ldrd	r0, r1, [r7]
 800260a:	f7fe fa85 	bl	8000b18 <__aeabi_dcmpgt>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d054      	beq.n	80026be <KS_movementLoop+0x18e>
			{
				x = KS_Params.s_x + (x/len)*STEP_L;
 8002614:	4b37      	ldr	r3, [pc, #220]	; (80026f4 <KS_movementLoop+0x1c4>)
 8002616:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 800261a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800261e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002622:	f7fe f913 	bl	800084c <__aeabi_ddiv>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4610      	mov	r0, r2
 800262c:	4619      	mov	r1, r3
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	4b32      	ldr	r3, [pc, #200]	; (80026fc <KS_movementLoop+0x1cc>)
 8002634:	f7fd ffe0 	bl	80005f8 <__aeabi_dmul>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4620      	mov	r0, r4
 800263e:	4629      	mov	r1, r5
 8002640:	f7fd fe24 	bl	800028c <__adddf3>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	e9c7 2306 	strd	r2, r3, [r7, #24]
				y = KS_Params.s_y + (y/len)*STEP_L;
 800264c:	4b29      	ldr	r3, [pc, #164]	; (80026f4 <KS_movementLoop+0x1c4>)
 800264e:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002652:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002656:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800265a:	f7fe f8f7 	bl	800084c <__aeabi_ddiv>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4610      	mov	r0, r2
 8002664:	4619      	mov	r1, r3
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	4b24      	ldr	r3, [pc, #144]	; (80026fc <KS_movementLoop+0x1cc>)
 800266c:	f7fd ffc4 	bl	80005f8 <__aeabi_dmul>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4620      	mov	r0, r4
 8002676:	4629      	mov	r1, r5
 8002678:	f7fd fe08 	bl	800028c <__adddf3>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	e9c7 2304 	strd	r2, r3, [r7, #16]
				z = KS_Params.s_z + (z/len)*STEP_L;
 8002684:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <KS_movementLoop+0x1c4>)
 8002686:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 800268a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800268e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002692:	f7fe f8db 	bl	800084c <__aeabi_ddiv>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	4610      	mov	r0, r2
 800269c:	4619      	mov	r1, r3
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	4b16      	ldr	r3, [pc, #88]	; (80026fc <KS_movementLoop+0x1cc>)
 80026a4:	f7fd ffa8 	bl	80005f8 <__aeabi_dmul>
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4620      	mov	r0, r4
 80026ae:	4629      	mov	r1, r5
 80026b0:	f7fd fdec 	bl	800028c <__adddf3>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80026bc:	e00e      	b.n	80026dc <KS_movementLoop+0x1ac>
			}
			else
			{
				x = KS_Params.t_x;
 80026be:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <KS_movementLoop+0x1c4>)
 80026c0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80026c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
				y = KS_Params.t_y;
 80026c8:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <KS_movementLoop+0x1c4>)
 80026ca:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80026ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
				z = KS_Params.t_z;
 80026d2:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <KS_movementLoop+0x1c4>)
 80026d4:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80026d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
			}
			KS_setPos(x, y, z);
 80026dc:	ed97 2b02 	vldr	d2, [r7, #8]
 80026e0:	ed97 1b04 	vldr	d1, [r7, #16]
 80026e4:	ed97 0b06 	vldr	d0, [r7, #24]
 80026e8:	f7ff fed6 	bl	8002498 <KS_setPos>
		}
	}
}
 80026ec:	bf00      	nop
 80026ee:	3720      	adds	r7, #32
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bdb0      	pop	{r4, r5, r7, pc}
 80026f4:	20000410 	.word	0x20000410
 80026f8:	3ff00000 	.word	0x3ff00000
 80026fc:	40080000 	.word	0x40080000

08002700 <KS_moveJ>:


void KS_moveJ(double x, double y, double z)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b088      	sub	sp, #32
 8002704:	af02      	add	r7, sp, #8
 8002706:	ed87 0b04 	vstr	d0, [r7, #16]
 800270a:	ed87 1b02 	vstr	d1, [r7, #8]
 800270e:	ed87 2b00 	vstr	d2, [r7]
	KS_Params.target_reached = false;
 8002712:	4b0f      	ldr	r3, [pc, #60]	; (8002750 <KS_moveJ+0x50>)
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	KS_Params.set_reached = false;
 800271a:	4b0d      	ldr	r3, [pc, #52]	; (8002750 <KS_moveJ+0x50>)
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	KS_setTarget(x, y, z);
 8002722:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002726:	e9cd 2300 	strd	r2, r3, [sp]
 800272a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800272e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002732:	f7ff fdab 	bl	800228c <KS_setTarget>
	KS_setPos(x, y, z);
 8002736:	ed97 2b00 	vldr	d2, [r7]
 800273a:	ed97 1b02 	vldr	d1, [r7, #8]
 800273e:	ed97 0b04 	vldr	d0, [r7, #16]
 8002742:	f7ff fea9 	bl	8002498 <KS_setPos>
}
 8002746:	bf00      	nop
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000410 	.word	0x20000410

08002754 <KS_moveL>:

void KS_moveL(double x, double y, double z)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af02      	add	r7, sp, #8
 800275a:	ed87 0b04 	vstr	d0, [r7, #16]
 800275e:	ed87 1b02 	vstr	d1, [r7, #8]
 8002762:	ed87 2b00 	vstr	d2, [r7]
	KS_Params.target_reached = false;
 8002766:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <KS_moveL+0x40>)
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	KS_Params.set_reached = false;
 800276e:	4b09      	ldr	r3, [pc, #36]	; (8002794 <KS_moveL+0x40>)
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	KS_setTarget(x, y, z);
 8002776:	e9d7 2300 	ldrd	r2, r3, [r7]
 800277a:	e9cd 2300 	strd	r2, r3, [sp]
 800277e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002782:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002786:	f7ff fd81 	bl	800228c <KS_setTarget>
}
 800278a:	bf00      	nop
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000410 	.word	0x20000410

08002798 <KS_moveByVector>:


void KS_moveByVector(double x, double y, double z)
{
 8002798:	b5b0      	push	{r4, r5, r7, lr}
 800279a:	ed2d 8b04 	vpush	{d8-d9}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	ed87 0b04 	vstr	d0, [r7, #16]
 80027a6:	ed87 1b02 	vstr	d1, [r7, #8]
 80027aa:	ed87 2b00 	vstr	d2, [r7]
	KS_moveL(KS_Params.t_x+x/2, KS_Params.t_y+y/2, KS_Params.t_z+z/3);
 80027ae:	4b29      	ldr	r3, [pc, #164]	; (8002854 <KS_moveByVector+0xbc>)
 80027b0:	e9d3 4518 	ldrd	r4, r5, [r3, #96]	; 0x60
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027c0:	f7fe f844 	bl	800084c <__aeabi_ddiv>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4620      	mov	r0, r4
 80027ca:	4629      	mov	r1, r5
 80027cc:	f7fd fd5e 	bl	800028c <__adddf3>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	ec43 2b18 	vmov	d8, r2, r3
 80027d8:	4b1e      	ldr	r3, [pc, #120]	; (8002854 <KS_moveByVector+0xbc>)
 80027da:	e9d3 451a 	ldrd	r4, r5, [r3, #104]	; 0x68
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027ea:	f7fe f82f 	bl	800084c <__aeabi_ddiv>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4620      	mov	r0, r4
 80027f4:	4629      	mov	r1, r5
 80027f6:	f7fd fd49 	bl	800028c <__adddf3>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	ec43 2b19 	vmov	d9, r2, r3
 8002802:	4b14      	ldr	r3, [pc, #80]	; (8002854 <KS_moveByVector+0xbc>)
 8002804:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	; 0x70
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	4b12      	ldr	r3, [pc, #72]	; (8002858 <KS_moveByVector+0xc0>)
 800280e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002812:	f7fe f81b 	bl	800084c <__aeabi_ddiv>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	4620      	mov	r0, r4
 800281c:	4629      	mov	r1, r5
 800281e:	f7fd fd35 	bl	800028c <__adddf3>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	ec43 2b17 	vmov	d7, r2, r3
 800282a:	eeb0 2a47 	vmov.f32	s4, s14
 800282e:	eef0 2a67 	vmov.f32	s5, s15
 8002832:	eeb0 1a49 	vmov.f32	s2, s18
 8002836:	eef0 1a69 	vmov.f32	s3, s19
 800283a:	eeb0 0a48 	vmov.f32	s0, s16
 800283e:	eef0 0a68 	vmov.f32	s1, s17
 8002842:	f7ff ff87 	bl	8002754 <KS_moveL>
}
 8002846:	bf00      	nop
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	ecbd 8b04 	vpop	{d8-d9}
 8002850:	bdb0      	pop	{r4, r5, r7, pc}
 8002852:	bf00      	nop
 8002854:	20000410 	.word	0x20000410
 8002858:	40080000 	.word	0x40080000
 800285c:	00000000 	.word	0x00000000

08002860 <KS_goHome>:

void KS_goHome()
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
	KS_moveJ(HOME_X, HOME_Y, HOME_Z);
 8002864:	ed9f 2b04 	vldr	d2, [pc, #16]	; 8002878 <KS_goHome+0x18>
 8002868:	ed9f 1b05 	vldr	d1, [pc, #20]	; 8002880 <KS_goHome+0x20>
 800286c:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8002880 <KS_goHome+0x20>
 8002870:	f7ff ff46 	bl	8002700 <KS_moveJ>
}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}
 8002878:	00000000 	.word	0x00000000
 800287c:	40590000 	.word	0x40590000
	...

08002888 <KS_setFx>:

void KS_setFx(uint8_t state)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	71fb      	strb	r3, [r7, #7]
	KS_Params.fxState = state;
 8002892:	4a0b      	ldr	r2, [pc, #44]	; (80028c0 <KS_setFx+0x38>)
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
	HAL_GPIO_WritePin(EFFECTOR_GPIO_Port, EFFECTOR_Pin, state);
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	461a      	mov	r2, r3
 800289e:	2110      	movs	r1, #16
 80028a0:	4808      	ldr	r0, [pc, #32]	; (80028c4 <KS_setFx+0x3c>)
 80028a2:	f003 fa85 	bl	8005db0 <HAL_GPIO_WritePin>
	PAD_setLedFx(state);
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	bf14      	ite	ne
 80028ac:	2301      	movne	r3, #1
 80028ae:	2300      	moveq	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 fcd4 	bl	8003260 <PAD_setLedFx>
}
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	20000410 	.word	0x20000410
 80028c4:	48000800 	.word	0x48000800

080028c8 <HAL_UART_RxCpltCallback>:
//	HAL_UART_Transmit(&huart2, ptr, len, 50);
//	return len;
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
	SRV_uartIRQ(huart);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 fd09 	bl	80032e8 <SRV_uartIRQ>
	COM_uartIRQ(huart);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7fe fb8c 	bl	8000ff4 <COM_uartIRQ>
}
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028e8:	f001 f980 	bl	8003bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028ec:	f000 f82e 	bl	800294c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 80028f0:	f000 f986 	bl	8002c00 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028f4:	f000 f9a2 	bl	8002c3c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80028f8:	f000 f952 	bl	8002ba0 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80028fc:	f000 f980 	bl	8002c00 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002900:	f000 f91e 	bl	8002b40 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8002904:	f000 f874 	bl	80029f0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  SRV_Init(&huart1);
 8002908:	480d      	ldr	r0, [pc, #52]	; (8002940 <main+0x5c>)
 800290a:	f000 fe0b 	bl	8003524 <SRV_Init>
  PAD_Init(&hadc1);
 800290e:	480d      	ldr	r0, [pc, #52]	; (8002944 <main+0x60>)
 8002910:	f000 fa20 	bl	8002d54 <PAD_Init>
  COM_Init(&huart2);
 8002914:	480c      	ldr	r0, [pc, #48]	; (8002948 <main+0x64>)
 8002916:	f7fe fb59 	bl	8000fcc <COM_Init>
  KS_InitParams();
 800291a:	f7ff f8d5 	bl	8001ac8 <KS_InitParams>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_Delay(1000);
 800291e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002922:	f001 f9df 	bl	8003ce4 <HAL_Delay>

  CTRL_startup();
 8002926:	f7fe fdfd 	bl	8001524 <CTRL_startup>

  while (1)
  {
	  //Get actual robot state
	  PAD_updateState();
 800292a:	f000 fa47 	bl	8002dbc <PAD_updateState>
	  KS_getActualPos();
 800292e:	f7ff fccb 	bl	80022c8 <KS_getActualPos>

	  //Receive command from app
	  COM_rxLoop();
 8002932:	f7fe fc0b 	bl	800114c <COM_rxLoop>

	  //Send stats to app
	  CTRL_printInfo();
 8002936:	f7fe fe21 	bl	800157c <CTRL_printInfo>

	  //Do movement
	  CTRL_Loop();
 800293a:	f7fe ff6b 	bl	8001814 <CTRL_Loop>
	  PAD_updateState();
 800293e:	e7f4      	b.n	800292a <main+0x46>
 8002940:	20000540 	.word	0x20000540
 8002944:	20000494 	.word	0x20000494
 8002948:	200005c4 	.word	0x200005c4

0800294c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b096      	sub	sp, #88	; 0x58
 8002950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002952:	f107 0314 	add.w	r3, r7, #20
 8002956:	2244      	movs	r2, #68	; 0x44
 8002958:	2100      	movs	r1, #0
 800295a:	4618      	mov	r0, r3
 800295c:	f006 fa26 	bl	8008dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002960:	463b      	mov	r3, r7
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	605a      	str	r2, [r3, #4]
 8002968:	609a      	str	r2, [r3, #8]
 800296a:	60da      	str	r2, [r3, #12]
 800296c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800296e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002972:	f003 fa5d 	bl	8005e30 <HAL_PWREx_ControlVoltageScaling>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800297c:	f000 f9e4 	bl	8002d48 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002980:	2302      	movs	r3, #2
 8002982:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002984:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002988:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800298a:	2310      	movs	r3, #16
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800298e:	2302      	movs	r3, #2
 8002990:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002992:	2302      	movs	r3, #2
 8002994:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002996:	2301      	movs	r3, #1
 8002998:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800299a:	230a      	movs	r3, #10
 800299c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800299e:	2307      	movs	r3, #7
 80029a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80029a2:	2302      	movs	r3, #2
 80029a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80029a6:	2302      	movs	r3, #2
 80029a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029aa:	f107 0314 	add.w	r3, r7, #20
 80029ae:	4618      	mov	r0, r3
 80029b0:	f003 fa94 	bl	8005edc <HAL_RCC_OscConfig>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <SystemClock_Config+0x72>
  {
    Error_Handler();
 80029ba:	f000 f9c5 	bl	8002d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029be:	230f      	movs	r3, #15
 80029c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029c2:	2303      	movs	r3, #3
 80029c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029c6:	2300      	movs	r3, #0
 80029c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029ce:	2300      	movs	r3, #0
 80029d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80029d2:	463b      	mov	r3, r7
 80029d4:	2104      	movs	r1, #4
 80029d6:	4618      	mov	r0, r3
 80029d8:	f003 fe5c 	bl	8006694 <HAL_RCC_ClockConfig>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80029e2:	f000 f9b1 	bl	8002d48 <Error_Handler>
  }
}
 80029e6:	bf00      	nop
 80029e8:	3758      	adds	r7, #88	; 0x58
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08a      	sub	sp, #40	; 0x28
 80029f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80029f6:	f107 031c 	add.w	r3, r7, #28
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	605a      	str	r2, [r3, #4]
 8002a00:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002a02:	1d3b      	adds	r3, r7, #4
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	609a      	str	r2, [r3, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
 8002a0e:	611a      	str	r2, [r3, #16]
 8002a10:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002a12:	4b45      	ldr	r3, [pc, #276]	; (8002b28 <MX_ADC1_Init+0x138>)
 8002a14:	4a45      	ldr	r2, [pc, #276]	; (8002b2c <MX_ADC1_Init+0x13c>)
 8002a16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002a18:	4b43      	ldr	r3, [pc, #268]	; (8002b28 <MX_ADC1_Init+0x138>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002a1e:	4b42      	ldr	r3, [pc, #264]	; (8002b28 <MX_ADC1_Init+0x138>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a24:	4b40      	ldr	r3, [pc, #256]	; (8002b28 <MX_ADC1_Init+0x138>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002a2a:	4b3f      	ldr	r3, [pc, #252]	; (8002b28 <MX_ADC1_Init+0x138>)
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a30:	4b3d      	ldr	r3, [pc, #244]	; (8002b28 <MX_ADC1_Init+0x138>)
 8002a32:	2204      	movs	r2, #4
 8002a34:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002a36:	4b3c      	ldr	r3, [pc, #240]	; (8002b28 <MX_ADC1_Init+0x138>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002a3c:	4b3a      	ldr	r3, [pc, #232]	; (8002b28 <MX_ADC1_Init+0x138>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8002a42:	4b39      	ldr	r3, [pc, #228]	; (8002b28 <MX_ADC1_Init+0x138>)
 8002a44:	2204      	movs	r2, #4
 8002a46:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a48:	4b37      	ldr	r3, [pc, #220]	; (8002b28 <MX_ADC1_Init+0x138>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a50:	4b35      	ldr	r3, [pc, #212]	; (8002b28 <MX_ADC1_Init+0x138>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a56:	4b34      	ldr	r3, [pc, #208]	; (8002b28 <MX_ADC1_Init+0x138>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002a5c:	4b32      	ldr	r3, [pc, #200]	; (8002b28 <MX_ADC1_Init+0x138>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002a64:	4b30      	ldr	r3, [pc, #192]	; (8002b28 <MX_ADC1_Init+0x138>)
 8002a66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a6a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002a6c:	4b2e      	ldr	r3, [pc, #184]	; (8002b28 <MX_ADC1_Init+0x138>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a74:	482c      	ldr	r0, [pc, #176]	; (8002b28 <MX_ADC1_Init+0x138>)
 8002a76:	f001 fb55 	bl	8004124 <HAL_ADC_Init>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002a80:	f000 f962 	bl	8002d48 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002a88:	f107 031c 	add.w	r3, r7, #28
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4826      	ldr	r0, [pc, #152]	; (8002b28 <MX_ADC1_Init+0x138>)
 8002a90:	f002 fb94 	bl	80051bc <HAL_ADCEx_MultiModeConfigChannel>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8002a9a:	f000 f955 	bl	8002d48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002a9e:	4b24      	ldr	r3, [pc, #144]	; (8002b30 <MX_ADC1_Init+0x140>)
 8002aa0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002aa2:	2306      	movs	r3, #6
 8002aa4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002aa6:	2307      	movs	r3, #7
 8002aa8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002aaa:	237f      	movs	r3, #127	; 0x7f
 8002aac:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002aae:	2304      	movs	r3, #4
 8002ab0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ab6:	1d3b      	adds	r3, r7, #4
 8002ab8:	4619      	mov	r1, r3
 8002aba:	481b      	ldr	r0, [pc, #108]	; (8002b28 <MX_ADC1_Init+0x138>)
 8002abc:	f001 fd62 	bl	8004584 <HAL_ADC_ConfigChannel>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8002ac6:	f000 f93f 	bl	8002d48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002aca:	4b1a      	ldr	r3, [pc, #104]	; (8002b34 <MX_ADC1_Init+0x144>)
 8002acc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002ace:	230c      	movs	r3, #12
 8002ad0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ad2:	1d3b      	adds	r3, r7, #4
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4814      	ldr	r0, [pc, #80]	; (8002b28 <MX_ADC1_Init+0x138>)
 8002ad8:	f001 fd54 	bl	8004584 <HAL_ADC_ConfigChannel>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8002ae2:	f000 f931 	bl	8002d48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002ae6:	4b14      	ldr	r3, [pc, #80]	; (8002b38 <MX_ADC1_Init+0x148>)
 8002ae8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002aea:	2312      	movs	r3, #18
 8002aec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002aee:	1d3b      	adds	r3, r7, #4
 8002af0:	4619      	mov	r1, r3
 8002af2:	480d      	ldr	r0, [pc, #52]	; (8002b28 <MX_ADC1_Init+0x138>)
 8002af4:	f001 fd46 	bl	8004584 <HAL_ADC_ConfigChannel>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8002afe:	f000 f923 	bl	8002d48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002b02:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <MX_ADC1_Init+0x14c>)
 8002b04:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002b06:	2318      	movs	r3, #24
 8002b08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b0a:	1d3b      	adds	r3, r7, #4
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4806      	ldr	r0, [pc, #24]	; (8002b28 <MX_ADC1_Init+0x138>)
 8002b10:	f001 fd38 	bl	8004584 <HAL_ADC_ConfigChannel>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <MX_ADC1_Init+0x12e>
  {
    Error_Handler();
 8002b1a:	f000 f915 	bl	8002d48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002b1e:	bf00      	nop
 8002b20:	3728      	adds	r7, #40	; 0x28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20000494 	.word	0x20000494
 8002b2c:	50040000 	.word	0x50040000
 8002b30:	04300002 	.word	0x04300002
 8002b34:	08600004 	.word	0x08600004
 8002b38:	0c900008 	.word	0x0c900008
 8002b3c:	10c00010 	.word	0x10c00010

08002b40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b44:	4b14      	ldr	r3, [pc, #80]	; (8002b98 <MX_USART1_UART_Init+0x58>)
 8002b46:	4a15      	ldr	r2, [pc, #84]	; (8002b9c <MX_USART1_UART_Init+0x5c>)
 8002b48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8002b4a:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <MX_USART1_UART_Init+0x58>)
 8002b4c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002b50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b52:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <MX_USART1_UART_Init+0x58>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b58:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <MX_USART1_UART_Init+0x58>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b5e:	4b0e      	ldr	r3, [pc, #56]	; (8002b98 <MX_USART1_UART_Init+0x58>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b64:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <MX_USART1_UART_Init+0x58>)
 8002b66:	220c      	movs	r2, #12
 8002b68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b6a:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <MX_USART1_UART_Init+0x58>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b70:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <MX_USART1_UART_Init+0x58>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b76:	4b08      	ldr	r3, [pc, #32]	; (8002b98 <MX_USART1_UART_Init+0x58>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b7c:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <MX_USART1_UART_Init+0x58>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8002b82:	4805      	ldr	r0, [pc, #20]	; (8002b98 <MX_USART1_UART_Init+0x58>)
 8002b84:	f004 fcb4 	bl	80074f0 <HAL_HalfDuplex_Init>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002b8e:	f000 f8db 	bl	8002d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000540 	.word	0x20000540
 8002b9c:	40013800 	.word	0x40013800

08002ba0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ba4:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <MX_USART2_UART_Init+0x58>)
 8002ba6:	4a15      	ldr	r2, [pc, #84]	; (8002bfc <MX_USART2_UART_Init+0x5c>)
 8002ba8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002baa:	4b13      	ldr	r3, [pc, #76]	; (8002bf8 <MX_USART2_UART_Init+0x58>)
 8002bac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bb2:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <MX_USART2_UART_Init+0x58>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002bb8:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <MX_USART2_UART_Init+0x58>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002bbe:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <MX_USART2_UART_Init+0x58>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <MX_USART2_UART_Init+0x58>)
 8002bc6:	220c      	movs	r2, #12
 8002bc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bca:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <MX_USART2_UART_Init+0x58>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bd0:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <MX_USART2_UART_Init+0x58>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bd6:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <MX_USART2_UART_Init+0x58>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bdc:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <MX_USART2_UART_Init+0x58>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002be2:	4805      	ldr	r0, [pc, #20]	; (8002bf8 <MX_USART2_UART_Init+0x58>)
 8002be4:	f004 fc36 	bl	8007454 <HAL_UART_Init>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002bee:	f000 f8ab 	bl	8002d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	200005c4 	.word	0x200005c4
 8002bfc:	40004400 	.word	0x40004400

08002c00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c06:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <MX_DMA_Init+0x38>)
 8002c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c0a:	4a0b      	ldr	r2, [pc, #44]	; (8002c38 <MX_DMA_Init+0x38>)
 8002c0c:	f043 0302 	orr.w	r3, r3, #2
 8002c10:	6493      	str	r3, [r2, #72]	; 0x48
 8002c12:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <MX_DMA_Init+0x38>)
 8002c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	607b      	str	r3, [r7, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2100      	movs	r1, #0
 8002c22:	203a      	movs	r0, #58	; 0x3a
 8002c24:	f002 fc55 	bl	80054d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8002c28:	203a      	movs	r0, #58	; 0x3a
 8002c2a:	f002 fc6e 	bl	800550a <HAL_NVIC_EnableIRQ>

}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40021000 	.word	0x40021000

08002c3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08a      	sub	sp, #40	; 0x28
 8002c40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c42:	f107 0314 	add.w	r3, r7, #20
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	605a      	str	r2, [r3, #4]
 8002c4c:	609a      	str	r2, [r3, #8]
 8002c4e:	60da      	str	r2, [r3, #12]
 8002c50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c52:	4b3b      	ldr	r3, [pc, #236]	; (8002d40 <MX_GPIO_Init+0x104>)
 8002c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c56:	4a3a      	ldr	r2, [pc, #232]	; (8002d40 <MX_GPIO_Init+0x104>)
 8002c58:	f043 0304 	orr.w	r3, r3, #4
 8002c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c5e:	4b38      	ldr	r3, [pc, #224]	; (8002d40 <MX_GPIO_Init+0x104>)
 8002c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	613b      	str	r3, [r7, #16]
 8002c68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c6a:	4b35      	ldr	r3, [pc, #212]	; (8002d40 <MX_GPIO_Init+0x104>)
 8002c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6e:	4a34      	ldr	r2, [pc, #208]	; (8002d40 <MX_GPIO_Init+0x104>)
 8002c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c76:	4b32      	ldr	r3, [pc, #200]	; (8002d40 <MX_GPIO_Init+0x104>)
 8002c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c82:	4b2f      	ldr	r3, [pc, #188]	; (8002d40 <MX_GPIO_Init+0x104>)
 8002c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c86:	4a2e      	ldr	r2, [pc, #184]	; (8002d40 <MX_GPIO_Init+0x104>)
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c8e:	4b2c      	ldr	r3, [pc, #176]	; (8002d40 <MX_GPIO_Init+0x104>)
 8002c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	60bb      	str	r3, [r7, #8]
 8002c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c9a:	4b29      	ldr	r3, [pc, #164]	; (8002d40 <MX_GPIO_Init+0x104>)
 8002c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9e:	4a28      	ldr	r2, [pc, #160]	; (8002d40 <MX_GPIO_Init+0x104>)
 8002ca0:	f043 0302 	orr.w	r3, r3, #2
 8002ca4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ca6:	4b26      	ldr	r3, [pc, #152]	; (8002d40 <MX_GPIO_Init+0x104>)
 8002ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	607b      	str	r3, [r7, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2120      	movs	r1, #32
 8002cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cba:	f003 f879 	bl	8005db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EFFECTOR_Pin|LED_MANUAL_Pin|LED_EFFECTOR_Pin, GPIO_PIN_RESET);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	21d0      	movs	r1, #208	; 0xd0
 8002cc2:	4820      	ldr	r0, [pc, #128]	; (8002d44 <MX_GPIO_Init+0x108>)
 8002cc4:	f003 f874 	bl	8005db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002cc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002cce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002cd8:	f107 0314 	add.w	r3, r7, #20
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4819      	ldr	r0, [pc, #100]	; (8002d44 <MX_GPIO_Init+0x108>)
 8002ce0:	f002 fea4 	bl	8005a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002ce4:	2320      	movs	r3, #32
 8002ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002cf4:	f107 0314 	add.w	r3, r7, #20
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cfe:	f002 fe95 	bl	8005a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : EFFECTOR_Pin LED_MANUAL_Pin LED_EFFECTOR_Pin */
  GPIO_InitStruct.Pin = EFFECTOR_Pin|LED_MANUAL_Pin|LED_EFFECTOR_Pin;
 8002d02:	23d0      	movs	r3, #208	; 0xd0
 8002d04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d06:	2301      	movs	r3, #1
 8002d08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d12:	f107 0314 	add.w	r3, r7, #20
 8002d16:	4619      	mov	r1, r3
 8002d18:	480a      	ldr	r0, [pc, #40]	; (8002d44 <MX_GPIO_Init+0x108>)
 8002d1a:	f002 fe87 	bl	8005a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAD_R_SW_Pin PAD_L_SW_Pin */
  GPIO_InitStruct.Pin = PAD_R_SW_Pin|PAD_L_SW_Pin;
 8002d1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d24:	2300      	movs	r3, #0
 8002d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d2c:	f107 0314 	add.w	r3, r7, #20
 8002d30:	4619      	mov	r1, r3
 8002d32:	4804      	ldr	r0, [pc, #16]	; (8002d44 <MX_GPIO_Init+0x108>)
 8002d34:	f002 fe7a 	bl	8005a2c <HAL_GPIO_Init>

}
 8002d38:	bf00      	nop
 8002d3a:	3728      	adds	r7, #40	; 0x28
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40021000 	.word	0x40021000
 8002d44:	48000800 	.word	0x48000800

08002d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d4c:	b672      	cpsid	i
}
 8002d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d50:	e7fe      	b.n	8002d50 <Error_Handler+0x8>
	...

08002d54 <PAD_Init>:

volatile uint16_t adc_data[4];
PadState_t PAD;

void PAD_Init(ADC_HandleTypeDef* hadc)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
	HAL_ADCEx_Calibration_Start(hadc, ADC_SINGLE_ENDED);
 8002d5c:	217f      	movs	r1, #127	; 0x7f
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f002 f9cc 	bl	80050fc <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(hadc, (uint32_t*)adc_data, 4);
 8002d64:	2204      	movs	r2, #4
 8002d66:	4913      	ldr	r1, [pc, #76]	; (8002db4 <PAD_Init+0x60>)
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f001 fb31 	bl	80043d0 <HAL_ADC_Start_DMA>
	PAD.axis_L_X = 0;
 8002d6e:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <PAD_Init+0x64>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	801a      	strh	r2, [r3, #0]
	PAD.axis_L_Y = 0;
 8002d74:	4b10      	ldr	r3, [pc, #64]	; (8002db8 <PAD_Init+0x64>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	805a      	strh	r2, [r3, #2]
	PAD.axis_R_X = 0;
 8002d7a:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <PAD_Init+0x64>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	809a      	strh	r2, [r3, #4]
	PAD.axis_R_Y = 0;
 8002d80:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <PAD_Init+0x64>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	80da      	strh	r2, [r3, #6]
	PAD.btn_L_short = false;
 8002d86:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <PAD_Init+0x64>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	721a      	strb	r2, [r3, #8]
	PAD.btn_L_long = false;
 8002d8c:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <PAD_Init+0x64>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	729a      	strb	r2, [r3, #10]
	PAD.btn_R_short = false;
 8002d92:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <PAD_Init+0x64>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	725a      	strb	r2, [r3, #9]
	PAD.btn_R_long = false;
 8002d98:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <PAD_Init+0x64>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	72da      	strb	r2, [r3, #11]
	PAD.btn_combo_short = false;
 8002d9e:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <PAD_Init+0x64>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	731a      	strb	r2, [r3, #12]
	PAD.btn_combo_long = false;
 8002da4:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <PAD_Init+0x64>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	735a      	strb	r2, [r3, #13]
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	20000648 	.word	0x20000648
 8002db8:	20000650 	.word	0x20000650

08002dbc <PAD_updateState>:

// SUPREME ULTIMATE MULTI BUTTON SHORT N LONG PRESS DEBOUNCING ALGORITHM
void PAD_updateState()
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
	// get actual time
	uint32_t now = HAL_GetTick();
 8002dc2:	f000 ff83 	bl	8003ccc <HAL_GetTick>
 8002dc6:	6078      	str	r0, [r7, #4]
	static uint32_t last_blink = 0;


	// ##### HANDLE ADC #####
	static uint32_t last_adc = 0;
	if( now-last_adc > ADC_INTERVAL )
 8002dc8:	4b90      	ldr	r3, [pc, #576]	; (800300c <PAD_updateState+0x250>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d05b      	beq.n	8002e8a <PAD_updateState+0xce>
	{
		if( hold_lb || hold_long_lb || hold_rb || hold_long_rb)
 8002dd2:	4b8f      	ldr	r3, [pc, #572]	; (8003010 <PAD_updateState+0x254>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10b      	bne.n	8002df2 <PAD_updateState+0x36>
 8002dda:	4b8e      	ldr	r3, [pc, #568]	; (8003014 <PAD_updateState+0x258>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d107      	bne.n	8002df2 <PAD_updateState+0x36>
 8002de2:	4b8d      	ldr	r3, [pc, #564]	; (8003018 <PAD_updateState+0x25c>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d103      	bne.n	8002df2 <PAD_updateState+0x36>
 8002dea:	4b8c      	ldr	r3, [pc, #560]	; (800301c <PAD_updateState+0x260>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00c      	beq.n	8002e0c <PAD_updateState+0x50>
		{
			PAD.axis_L_X = 0;
 8002df2:	4b8b      	ldr	r3, [pc, #556]	; (8003020 <PAD_updateState+0x264>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	801a      	strh	r2, [r3, #0]
			PAD.axis_L_Y = 0;
 8002df8:	4b89      	ldr	r3, [pc, #548]	; (8003020 <PAD_updateState+0x264>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	805a      	strh	r2, [r3, #2]
			PAD.axis_R_X = 0;
 8002dfe:	4b88      	ldr	r3, [pc, #544]	; (8003020 <PAD_updateState+0x264>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	809a      	strh	r2, [r3, #4]
			PAD.axis_R_Y = 0;
 8002e04:	4b86      	ldr	r3, [pc, #536]	; (8003020 <PAD_updateState+0x264>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	80da      	strh	r2, [r3, #6]
 8002e0a:	e03b      	b.n	8002e84 <PAD_updateState+0xc8>
		}
		else
		{
			PAD.axis_L_X = ((4095-adc_data[1])-2048)/200;
 8002e0c:	4b85      	ldr	r3, [pc, #532]	; (8003024 <PAD_updateState+0x268>)
 8002e0e:	885b      	ldrh	r3, [r3, #2]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 8002e16:	3307      	adds	r3, #7
 8002e18:	4a83      	ldr	r2, [pc, #524]	; (8003028 <PAD_updateState+0x26c>)
 8002e1a:	fb82 1203 	smull	r1, r2, r2, r3
 8002e1e:	1192      	asrs	r2, r2, #6
 8002e20:	17db      	asrs	r3, r3, #31
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	b21a      	sxth	r2, r3
 8002e26:	4b7e      	ldr	r3, [pc, #504]	; (8003020 <PAD_updateState+0x264>)
 8002e28:	801a      	strh	r2, [r3, #0]
			PAD.axis_L_Y = ((4095-adc_data[0])-2048)/200;
 8002e2a:	4b7e      	ldr	r3, [pc, #504]	; (8003024 <PAD_updateState+0x268>)
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 8002e34:	3307      	adds	r3, #7
 8002e36:	4a7c      	ldr	r2, [pc, #496]	; (8003028 <PAD_updateState+0x26c>)
 8002e38:	fb82 1203 	smull	r1, r2, r2, r3
 8002e3c:	1192      	asrs	r2, r2, #6
 8002e3e:	17db      	asrs	r3, r3, #31
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	b21a      	sxth	r2, r3
 8002e44:	4b76      	ldr	r3, [pc, #472]	; (8003020 <PAD_updateState+0x264>)
 8002e46:	805a      	strh	r2, [r3, #2]
			PAD.axis_R_X = ((4095-adc_data[3])-2048)/200;
 8002e48:	4b76      	ldr	r3, [pc, #472]	; (8003024 <PAD_updateState+0x268>)
 8002e4a:	88db      	ldrh	r3, [r3, #6]
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 8002e52:	3307      	adds	r3, #7
 8002e54:	4a74      	ldr	r2, [pc, #464]	; (8003028 <PAD_updateState+0x26c>)
 8002e56:	fb82 1203 	smull	r1, r2, r2, r3
 8002e5a:	1192      	asrs	r2, r2, #6
 8002e5c:	17db      	asrs	r3, r3, #31
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	b21a      	sxth	r2, r3
 8002e62:	4b6f      	ldr	r3, [pc, #444]	; (8003020 <PAD_updateState+0x264>)
 8002e64:	809a      	strh	r2, [r3, #4]
			PAD.axis_R_Y = ((4095-adc_data[2])-2048)/200;
 8002e66:	4b6f      	ldr	r3, [pc, #444]	; (8003024 <PAD_updateState+0x268>)
 8002e68:	889b      	ldrh	r3, [r3, #4]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 8002e70:	3307      	adds	r3, #7
 8002e72:	4a6d      	ldr	r2, [pc, #436]	; (8003028 <PAD_updateState+0x26c>)
 8002e74:	fb82 1203 	smull	r1, r2, r2, r3
 8002e78:	1192      	asrs	r2, r2, #6
 8002e7a:	17db      	asrs	r3, r3, #31
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	b21a      	sxth	r2, r3
 8002e80:	4b67      	ldr	r3, [pc, #412]	; (8003020 <PAD_updateState+0x264>)
 8002e82:	80da      	strh	r2, [r3, #6]
		}
		last_adc = now;
 8002e84:	4a61      	ldr	r2, [pc, #388]	; (800300c <PAD_updateState+0x250>)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6013      	str	r3, [r2, #0]
	}

	// #### TURN OFF FLAGS
	if(PAD.btn_L_short) PAD.btn_L_short = false;
 8002e8a:	4b65      	ldr	r3, [pc, #404]	; (8003020 <PAD_updateState+0x264>)
 8002e8c:	7a1b      	ldrb	r3, [r3, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <PAD_updateState+0xdc>
 8002e92:	4b63      	ldr	r3, [pc, #396]	; (8003020 <PAD_updateState+0x264>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	721a      	strb	r2, [r3, #8]
	if(PAD.btn_L_long) PAD.btn_L_long = false;
 8002e98:	4b61      	ldr	r3, [pc, #388]	; (8003020 <PAD_updateState+0x264>)
 8002e9a:	7a9b      	ldrb	r3, [r3, #10]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d002      	beq.n	8002ea6 <PAD_updateState+0xea>
 8002ea0:	4b5f      	ldr	r3, [pc, #380]	; (8003020 <PAD_updateState+0x264>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	729a      	strb	r2, [r3, #10]
	if(PAD.btn_R_short) PAD.btn_R_short = false;
 8002ea6:	4b5e      	ldr	r3, [pc, #376]	; (8003020 <PAD_updateState+0x264>)
 8002ea8:	7a5b      	ldrb	r3, [r3, #9]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <PAD_updateState+0xf8>
 8002eae:	4b5c      	ldr	r3, [pc, #368]	; (8003020 <PAD_updateState+0x264>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	725a      	strb	r2, [r3, #9]
	if(PAD.btn_R_long) PAD.btn_R_long = false;
 8002eb4:	4b5a      	ldr	r3, [pc, #360]	; (8003020 <PAD_updateState+0x264>)
 8002eb6:	7adb      	ldrb	r3, [r3, #11]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d002      	beq.n	8002ec2 <PAD_updateState+0x106>
 8002ebc:	4b58      	ldr	r3, [pc, #352]	; (8003020 <PAD_updateState+0x264>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	72da      	strb	r2, [r3, #11]
	if(PAD.btn_combo_short) PAD.btn_combo_short = false;
 8002ec2:	4b57      	ldr	r3, [pc, #348]	; (8003020 <PAD_updateState+0x264>)
 8002ec4:	7b1b      	ldrb	r3, [r3, #12]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d002      	beq.n	8002ed0 <PAD_updateState+0x114>
 8002eca:	4b55      	ldr	r3, [pc, #340]	; (8003020 <PAD_updateState+0x264>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	731a      	strb	r2, [r3, #12]
	if(PAD.btn_combo_long) PAD.btn_combo_long = false;
 8002ed0:	4b53      	ldr	r3, [pc, #332]	; (8003020 <PAD_updateState+0x264>)
 8002ed2:	7b5b      	ldrb	r3, [r3, #13]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <PAD_updateState+0x122>
 8002ed8:	4b51      	ldr	r3, [pc, #324]	; (8003020 <PAD_updateState+0x264>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	735a      	strb	r2, [r3, #13]


	// ##### HANDLE LEFT BUTTON #####
	raw_lb = !HAL_GPIO_ReadPin(PAD_L_SW_GPIO_Port, PAD_L_SW_Pin);
 8002ede:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ee2:	4852      	ldr	r0, [pc, #328]	; (800302c <PAD_updateState+0x270>)
 8002ee4:	f002 ff4c 	bl	8005d80 <HAL_GPIO_ReadPin>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	bf0c      	ite	eq
 8002eee:	2301      	moveq	r3, #1
 8002ef0:	2300      	movne	r3, #0
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	70fb      	strb	r3, [r7, #3]

	if( raw_lb && !hold_lb && now-last_end_lb > DEBOUNCE)
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d012      	beq.n	8002f22 <PAD_updateState+0x166>
 8002efc:	4b44      	ldr	r3, [pc, #272]	; (8003010 <PAD_updateState+0x254>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	f083 0301 	eor.w	r3, r3, #1
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00b      	beq.n	8002f22 <PAD_updateState+0x166>
 8002f0a:	4b49      	ldr	r3, [pc, #292]	; (8003030 <PAD_updateState+0x274>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b14      	cmp	r3, #20
 8002f14:	d905      	bls.n	8002f22 <PAD_updateState+0x166>
	{
		hold_lb = true;
 8002f16:	4b3e      	ldr	r3, [pc, #248]	; (8003010 <PAD_updateState+0x254>)
 8002f18:	2201      	movs	r2, #1
 8002f1a:	701a      	strb	r2, [r3, #0]
		last_lb = now;
 8002f1c:	4a45      	ldr	r2, [pc, #276]	; (8003034 <PAD_updateState+0x278>)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6013      	str	r3, [r2, #0]
	}

	if( hold_lb && now-last_lb > DEBOUNCE)
 8002f22:	4b3b      	ldr	r3, [pc, #236]	; (8003010 <PAD_updateState+0x254>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f000 809a 	beq.w	8003060 <PAD_updateState+0x2a4>
 8002f2c:	4b41      	ldr	r3, [pc, #260]	; (8003034 <PAD_updateState+0x278>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b14      	cmp	r3, #20
 8002f36:	f240 8093 	bls.w	8003060 <PAD_updateState+0x2a4>
	{
		if( now-last_lb > LONG_PRESS )
 8002f3a:	4b3e      	ldr	r3, [pc, #248]	; (8003034 <PAD_updateState+0x278>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d936      	bls.n	8002fb8 <PAD_updateState+0x1fc>
		{
			if( !hold_long_lb )
 8002f4a:	4b32      	ldr	r3, [pc, #200]	; (8003014 <PAD_updateState+0x258>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	f083 0301 	eor.w	r3, r3, #1
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d01f      	beq.n	8002f98 <PAD_updateState+0x1dc>
			{
				if(now-last_combo > DEAD_TIME)
 8002f58:	4b37      	ldr	r3, [pc, #220]	; (8003038 <PAD_updateState+0x27c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f64:	d914      	bls.n	8002f90 <PAD_updateState+0x1d4>
				{
					if( hold_long_rb )
 8002f66:	4b2d      	ldr	r3, [pc, #180]	; (800301c <PAD_updateState+0x260>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d006      	beq.n	8002f7c <PAD_updateState+0x1c0>
					{
						PAD.btn_combo_long = true;
 8002f6e:	4b2c      	ldr	r3, [pc, #176]	; (8003020 <PAD_updateState+0x264>)
 8002f70:	2201      	movs	r2, #1
 8002f72:	735a      	strb	r2, [r3, #13]
						last_combo = now;
 8002f74:	4a30      	ldr	r2, [pc, #192]	; (8003038 <PAD_updateState+0x27c>)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	e009      	b.n	8002f90 <PAD_updateState+0x1d4>
					}
					else if( !hold_rb )
 8002f7c:	4b26      	ldr	r3, [pc, #152]	; (8003018 <PAD_updateState+0x25c>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	f083 0301 	eor.w	r3, r3, #1
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <PAD_updateState+0x1d4>
						PAD.btn_L_long = true;
 8002f8a:	4b25      	ldr	r3, [pc, #148]	; (8003020 <PAD_updateState+0x264>)
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	729a      	strb	r2, [r3, #10]
				}
				hold_long_lb = true;
 8002f90:	4b20      	ldr	r3, [pc, #128]	; (8003014 <PAD_updateState+0x258>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	701a      	strb	r2, [r3, #0]
 8002f96:	e063      	b.n	8003060 <PAD_updateState+0x2a4>
			}
			else if( !raw_lb )
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d160      	bne.n	8003060 <PAD_updateState+0x2a4>
			{
				hold_lb = false;
 8002f9e:	4b1c      	ldr	r3, [pc, #112]	; (8003010 <PAD_updateState+0x254>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	701a      	strb	r2, [r3, #0]
				hold_long_lb = false;
 8002fa4:	4b1b      	ldr	r3, [pc, #108]	; (8003014 <PAD_updateState+0x258>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	701a      	strb	r2, [r3, #0]
				last_end_lb = now;
 8002faa:	4a21      	ldr	r2, [pc, #132]	; (8003030 <PAD_updateState+0x274>)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6013      	str	r3, [r2, #0]
				last_end_long_lb = true;
 8002fb0:	4b22      	ldr	r3, [pc, #136]	; (800303c <PAD_updateState+0x280>)
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	701a      	strb	r2, [r3, #0]
 8002fb6:	e053      	b.n	8003060 <PAD_updateState+0x2a4>
			}
		}
		else if( !raw_lb )
 8002fb8:	78fb      	ldrb	r3, [r7, #3]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d150      	bne.n	8003060 <PAD_updateState+0x2a4>
		{
			if(now-last_combo > DEAD_TIME)
 8002fbe:	4b1e      	ldr	r3, [pc, #120]	; (8003038 <PAD_updateState+0x27c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002fca:	d940      	bls.n	800304e <PAD_updateState+0x292>
			{
				if( (hold_rb && !hold_long_rb) || (!last_end_long_rb && now-last_end_rb < DEBOUNCE ))
 8002fcc:	4b12      	ldr	r3, [pc, #72]	; (8003018 <PAD_updateState+0x25c>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d006      	beq.n	8002fe2 <PAD_updateState+0x226>
 8002fd4:	4b11      	ldr	r3, [pc, #68]	; (800301c <PAD_updateState+0x260>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	f083 0301 	eor.w	r3, r3, #1
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10c      	bne.n	8002ffc <PAD_updateState+0x240>
 8002fe2:	4b17      	ldr	r3, [pc, #92]	; (8003040 <PAD_updateState+0x284>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	f083 0301 	eor.w	r3, r3, #1
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d02b      	beq.n	8003048 <PAD_updateState+0x28c>
 8002ff0:	4b14      	ldr	r3, [pc, #80]	; (8003044 <PAD_updateState+0x288>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b13      	cmp	r3, #19
 8002ffa:	d825      	bhi.n	8003048 <PAD_updateState+0x28c>
				{
					PAD.btn_combo_short = true;
 8002ffc:	4b08      	ldr	r3, [pc, #32]	; (8003020 <PAD_updateState+0x264>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	731a      	strb	r2, [r3, #12]
					last_combo = now;
 8003002:	4a0d      	ldr	r2, [pc, #52]	; (8003038 <PAD_updateState+0x27c>)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	e021      	b.n	800304e <PAD_updateState+0x292>
 800300a:	bf00      	nop
 800300c:	20000660 	.word	0x20000660
 8003010:	20000664 	.word	0x20000664
 8003014:	20000665 	.word	0x20000665
 8003018:	20000666 	.word	0x20000666
 800301c:	20000667 	.word	0x20000667
 8003020:	20000650 	.word	0x20000650
 8003024:	20000648 	.word	0x20000648
 8003028:	51eb851f 	.word	0x51eb851f
 800302c:	48000800 	.word	0x48000800
 8003030:	20000668 	.word	0x20000668
 8003034:	2000066c 	.word	0x2000066c
 8003038:	20000670 	.word	0x20000670
 800303c:	20000674 	.word	0x20000674
 8003040:	20000675 	.word	0x20000675
 8003044:	20000678 	.word	0x20000678
				}
				else
					PAD.btn_L_short = true;
 8003048:	4b6a      	ldr	r3, [pc, #424]	; (80031f4 <PAD_updateState+0x438>)
 800304a:	2201      	movs	r2, #1
 800304c:	721a      	strb	r2, [r3, #8]
			}
			hold_lb = false;
 800304e:	4b6a      	ldr	r3, [pc, #424]	; (80031f8 <PAD_updateState+0x43c>)
 8003050:	2200      	movs	r2, #0
 8003052:	701a      	strb	r2, [r3, #0]
            last_end_lb = now;
 8003054:	4a69      	ldr	r2, [pc, #420]	; (80031fc <PAD_updateState+0x440>)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6013      	str	r3, [r2, #0]
            last_end_long_lb = false;
 800305a:	4b69      	ldr	r3, [pc, #420]	; (8003200 <PAD_updateState+0x444>)
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]
		}
	}


	// ##### HANDLE RIGHT BUTTON #####
	raw_rb = !HAL_GPIO_ReadPin(PAD_R_SW_GPIO_Port, PAD_R_SW_Pin);
 8003060:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003064:	4867      	ldr	r0, [pc, #412]	; (8003204 <PAD_updateState+0x448>)
 8003066:	f002 fe8b 	bl	8005d80 <HAL_GPIO_ReadPin>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	bf0c      	ite	eq
 8003070:	2301      	moveq	r3, #1
 8003072:	2300      	movne	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	70bb      	strb	r3, [r7, #2]

	if( raw_rb && !hold_rb && now-last_end_rb > DEBOUNCE)
 8003078:	78bb      	ldrb	r3, [r7, #2]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d012      	beq.n	80030a4 <PAD_updateState+0x2e8>
 800307e:	4b62      	ldr	r3, [pc, #392]	; (8003208 <PAD_updateState+0x44c>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	f083 0301 	eor.w	r3, r3, #1
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00b      	beq.n	80030a4 <PAD_updateState+0x2e8>
 800308c:	4b5f      	ldr	r3, [pc, #380]	; (800320c <PAD_updateState+0x450>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b14      	cmp	r3, #20
 8003096:	d905      	bls.n	80030a4 <PAD_updateState+0x2e8>
	{
		hold_rb = true;
 8003098:	4b5b      	ldr	r3, [pc, #364]	; (8003208 <PAD_updateState+0x44c>)
 800309a:	2201      	movs	r2, #1
 800309c:	701a      	strb	r2, [r3, #0]
		last_rb = now;
 800309e:	4a5c      	ldr	r2, [pc, #368]	; (8003210 <PAD_updateState+0x454>)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6013      	str	r3, [r2, #0]
	}

	if( hold_rb && now-last_rb > DEBOUNCE)
 80030a4:	4b58      	ldr	r3, [pc, #352]	; (8003208 <PAD_updateState+0x44c>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d079      	beq.n	80031a0 <PAD_updateState+0x3e4>
 80030ac:	4b58      	ldr	r3, [pc, #352]	; (8003210 <PAD_updateState+0x454>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b14      	cmp	r3, #20
 80030b6:	d973      	bls.n	80031a0 <PAD_updateState+0x3e4>
	{
		if( now-last_rb > LONG_PRESS )
 80030b8:	4b55      	ldr	r3, [pc, #340]	; (8003210 <PAD_updateState+0x454>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d936      	bls.n	8003136 <PAD_updateState+0x37a>
		{
			if( !hold_long_rb )
 80030c8:	4b52      	ldr	r3, [pc, #328]	; (8003214 <PAD_updateState+0x458>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	f083 0301 	eor.w	r3, r3, #1
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d01f      	beq.n	8003116 <PAD_updateState+0x35a>
			{
				if(now-last_combo > DEAD_TIME)
 80030d6:	4b50      	ldr	r3, [pc, #320]	; (8003218 <PAD_updateState+0x45c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030e2:	d914      	bls.n	800310e <PAD_updateState+0x352>
				{
					if( hold_long_lb )
 80030e4:	4b4d      	ldr	r3, [pc, #308]	; (800321c <PAD_updateState+0x460>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d006      	beq.n	80030fa <PAD_updateState+0x33e>
					{
						PAD.btn_combo_long = true;
 80030ec:	4b41      	ldr	r3, [pc, #260]	; (80031f4 <PAD_updateState+0x438>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	735a      	strb	r2, [r3, #13]
						last_combo = now;
 80030f2:	4a49      	ldr	r2, [pc, #292]	; (8003218 <PAD_updateState+0x45c>)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6013      	str	r3, [r2, #0]
 80030f8:	e009      	b.n	800310e <PAD_updateState+0x352>
					}
					else if( !hold_lb )
 80030fa:	4b3f      	ldr	r3, [pc, #252]	; (80031f8 <PAD_updateState+0x43c>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	f083 0301 	eor.w	r3, r3, #1
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <PAD_updateState+0x352>
						PAD.btn_R_long = true;
 8003108:	4b3a      	ldr	r3, [pc, #232]	; (80031f4 <PAD_updateState+0x438>)
 800310a:	2201      	movs	r2, #1
 800310c:	72da      	strb	r2, [r3, #11]
				}
				hold_long_rb = true;
 800310e:	4b41      	ldr	r3, [pc, #260]	; (8003214 <PAD_updateState+0x458>)
 8003110:	2201      	movs	r2, #1
 8003112:	701a      	strb	r2, [r3, #0]
 8003114:	e044      	b.n	80031a0 <PAD_updateState+0x3e4>
			}
			else if( !raw_rb )
 8003116:	78bb      	ldrb	r3, [r7, #2]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d141      	bne.n	80031a0 <PAD_updateState+0x3e4>
			{
				hold_rb = false;
 800311c:	4b3a      	ldr	r3, [pc, #232]	; (8003208 <PAD_updateState+0x44c>)
 800311e:	2200      	movs	r2, #0
 8003120:	701a      	strb	r2, [r3, #0]
				hold_long_rb = false;
 8003122:	4b3c      	ldr	r3, [pc, #240]	; (8003214 <PAD_updateState+0x458>)
 8003124:	2200      	movs	r2, #0
 8003126:	701a      	strb	r2, [r3, #0]
				last_end_rb = now;
 8003128:	4a38      	ldr	r2, [pc, #224]	; (800320c <PAD_updateState+0x450>)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6013      	str	r3, [r2, #0]
				last_end_long_rb = true;
 800312e:	4b3c      	ldr	r3, [pc, #240]	; (8003220 <PAD_updateState+0x464>)
 8003130:	2201      	movs	r2, #1
 8003132:	701a      	strb	r2, [r3, #0]
 8003134:	e034      	b.n	80031a0 <PAD_updateState+0x3e4>
			}
		}
		else if( !raw_rb )
 8003136:	78bb      	ldrb	r3, [r7, #2]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d131      	bne.n	80031a0 <PAD_updateState+0x3e4>
		{
			if(now-last_combo > DEAD_TIME)
 800313c:	4b36      	ldr	r3, [pc, #216]	; (8003218 <PAD_updateState+0x45c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003148:	d921      	bls.n	800318e <PAD_updateState+0x3d2>
			{
				if( (hold_lb && !hold_long_lb) || (!last_end_long_lb && now-last_end_lb < DEBOUNCE ))
 800314a:	4b2b      	ldr	r3, [pc, #172]	; (80031f8 <PAD_updateState+0x43c>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d006      	beq.n	8003160 <PAD_updateState+0x3a4>
 8003152:	4b32      	ldr	r3, [pc, #200]	; (800321c <PAD_updateState+0x460>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	f083 0301 	eor.w	r3, r3, #1
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10c      	bne.n	800317a <PAD_updateState+0x3be>
 8003160:	4b27      	ldr	r3, [pc, #156]	; (8003200 <PAD_updateState+0x444>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	f083 0301 	eor.w	r3, r3, #1
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00c      	beq.n	8003188 <PAD_updateState+0x3cc>
 800316e:	4b23      	ldr	r3, [pc, #140]	; (80031fc <PAD_updateState+0x440>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b13      	cmp	r3, #19
 8003178:	d806      	bhi.n	8003188 <PAD_updateState+0x3cc>
				{
					PAD.btn_combo_short = true;
 800317a:	4b1e      	ldr	r3, [pc, #120]	; (80031f4 <PAD_updateState+0x438>)
 800317c:	2201      	movs	r2, #1
 800317e:	731a      	strb	r2, [r3, #12]
					last_combo = now;
 8003180:	4a25      	ldr	r2, [pc, #148]	; (8003218 <PAD_updateState+0x45c>)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	e002      	b.n	800318e <PAD_updateState+0x3d2>
				}
				else
					PAD.btn_R_short = true;
 8003188:	4b1a      	ldr	r3, [pc, #104]	; (80031f4 <PAD_updateState+0x438>)
 800318a:	2201      	movs	r2, #1
 800318c:	725a      	strb	r2, [r3, #9]
			}
            hold_rb = false;
 800318e:	4b1e      	ldr	r3, [pc, #120]	; (8003208 <PAD_updateState+0x44c>)
 8003190:	2200      	movs	r2, #0
 8003192:	701a      	strb	r2, [r3, #0]
            last_end_rb = now;
 8003194:	4a1d      	ldr	r2, [pc, #116]	; (800320c <PAD_updateState+0x450>)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6013      	str	r3, [r2, #0]
            last_end_long_rb = false;
 800319a:	4b21      	ldr	r3, [pc, #132]	; (8003220 <PAD_updateState+0x464>)
 800319c:	2200      	movs	r2, #0
 800319e:	701a      	strb	r2, [r3, #0]
		}
	}

	//#### COMBO MASKING SINGLE #####
	if( PAD.btn_combo_short || PAD.btn_combo_long )
 80031a0:	4b14      	ldr	r3, [pc, #80]	; (80031f4 <PAD_updateState+0x438>)
 80031a2:	7b1b      	ldrb	r3, [r3, #12]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d103      	bne.n	80031b0 <PAD_updateState+0x3f4>
 80031a8:	4b12      	ldr	r3, [pc, #72]	; (80031f4 <PAD_updateState+0x438>)
 80031aa:	7b5b      	ldrb	r3, [r3, #13]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00b      	beq.n	80031c8 <PAD_updateState+0x40c>
	{
		PAD.btn_L_short = false;
 80031b0:	4b10      	ldr	r3, [pc, #64]	; (80031f4 <PAD_updateState+0x438>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	721a      	strb	r2, [r3, #8]
		PAD.btn_L_long = false;
 80031b6:	4b0f      	ldr	r3, [pc, #60]	; (80031f4 <PAD_updateState+0x438>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	729a      	strb	r2, [r3, #10]
		PAD.btn_R_short = false;
 80031bc:	4b0d      	ldr	r3, [pc, #52]	; (80031f4 <PAD_updateState+0x438>)
 80031be:	2200      	movs	r2, #0
 80031c0:	725a      	strb	r2, [r3, #9]
		PAD.btn_R_long = false;
 80031c2:	4b0c      	ldr	r3, [pc, #48]	; (80031f4 <PAD_updateState+0x438>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	72da      	strb	r2, [r3, #11]
	}

	if( LED_state == LED_BLINK && now-last_blink > BLINK_TIME )
 80031c8:	4b16      	ldr	r3, [pc, #88]	; (8003224 <PAD_updateState+0x468>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d10c      	bne.n	80031ea <PAD_updateState+0x42e>
 80031d0:	4b15      	ldr	r3, [pc, #84]	; (8003228 <PAD_updateState+0x46c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2bc8      	cmp	r3, #200	; 0xc8
 80031da:	d906      	bls.n	80031ea <PAD_updateState+0x42e>
	{
		HAL_GPIO_TogglePin(LED_MANUAL_GPIO_Port, LED_MANUAL_Pin);
 80031dc:	2140      	movs	r1, #64	; 0x40
 80031de:	4809      	ldr	r0, [pc, #36]	; (8003204 <PAD_updateState+0x448>)
 80031e0:	f002 fdfe 	bl	8005de0 <HAL_GPIO_TogglePin>
		last_blink = now;
 80031e4:	4a10      	ldr	r2, [pc, #64]	; (8003228 <PAD_updateState+0x46c>)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6013      	str	r3, [r2, #0]
	}
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000650 	.word	0x20000650
 80031f8:	20000664 	.word	0x20000664
 80031fc:	20000668 	.word	0x20000668
 8003200:	20000674 	.word	0x20000674
 8003204:	48000800 	.word	0x48000800
 8003208:	20000666 	.word	0x20000666
 800320c:	20000678 	.word	0x20000678
 8003210:	2000067c 	.word	0x2000067c
 8003214:	20000667 	.word	0x20000667
 8003218:	20000670 	.word	0x20000670
 800321c:	20000665 	.word	0x20000665
 8003220:	20000675 	.word	0x20000675
 8003224:	20000004 	.word	0x20000004
 8003228:	20000680 	.word	0x20000680

0800322c <PAD_setLedManual>:

void PAD_setLedManual(LED_State_t state)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	71fb      	strb	r3, [r7, #7]
	LED_state = state;
 8003236:	4a08      	ldr	r2, [pc, #32]	; (8003258 <PAD_setLedManual+0x2c>)
 8003238:	79fb      	ldrb	r3, [r7, #7]
 800323a:	7013      	strb	r3, [r2, #0]
	if( state != LED_BLINK)
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d005      	beq.n	800324e <PAD_setLedManual+0x22>
		HAL_GPIO_WritePin(LED_MANUAL_GPIO_Port, LED_MANUAL_Pin, state);
 8003242:	79fb      	ldrb	r3, [r7, #7]
 8003244:	461a      	mov	r2, r3
 8003246:	2140      	movs	r1, #64	; 0x40
 8003248:	4804      	ldr	r0, [pc, #16]	; (800325c <PAD_setLedManual+0x30>)
 800324a:	f002 fdb1 	bl	8005db0 <HAL_GPIO_WritePin>
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20000004 	.word	0x20000004
 800325c:	48000800 	.word	0x48000800

08003260 <PAD_setLedFx>:

inline void PAD_setLedFx(bool state)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_EFFECTOR_GPIO_Port, LED_EFFECTOR_Pin, state);
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	461a      	mov	r2, r3
 800326e:	2180      	movs	r1, #128	; 0x80
 8003270:	4803      	ldr	r0, [pc, #12]	; (8003280 <PAD_setLedFx+0x20>)
 8003272:	f002 fd9d 	bl	8005db0 <HAL_GPIO_WritePin>
}
 8003276:	bf00      	nop
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	48000800 	.word	0x48000800

08003284 <SRV_uartClearBuff>:
volatile uint8_t* SRV_rx_head;
volatile uint8_t* SRV_rx_tail;


void SRV_uartClearBuff()
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
	SRV_rx_head = SRV_RxBuff;
 8003288:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <SRV_uartClearBuff+0x1c>)
 800328a:	4a06      	ldr	r2, [pc, #24]	; (80032a4 <SRV_uartClearBuff+0x20>)
 800328c:	601a      	str	r2, [r3, #0]
	SRV_rx_tail = SRV_RxBuff;
 800328e:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <SRV_uartClearBuff+0x24>)
 8003290:	4a04      	ldr	r2, [pc, #16]	; (80032a4 <SRV_uartClearBuff+0x20>)
 8003292:	601a      	str	r2, [r3, #0]
}
 8003294:	bf00      	nop
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	20000698 	.word	0x20000698
 80032a4:	20000688 	.word	0x20000688
 80032a8:	2000069c 	.word	0x2000069c

080032ac <SRV_uartStopRx>:

static inline void SRV_uartStopRx()
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
	huart_srv->RxState = HAL_UART_STATE_READY;
 80032b0:	4b04      	ldr	r3, [pc, #16]	; (80032c4 <SRV_uartStopRx+0x18>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2220      	movs	r2, #32
 80032b6:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80032b8:	bf00      	nop
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	20000684 	.word	0x20000684

080032c8 <SRV_uartStartRx>:

static inline void SRV_uartStartRx()
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(huart_srv, (uint8_t*)SRV_rx_head, 1);
 80032cc:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <SRV_uartStartRx+0x18>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a04      	ldr	r2, [pc, #16]	; (80032e4 <SRV_uartStartRx+0x1c>)
 80032d2:	6811      	ldr	r1, [r2, #0]
 80032d4:	2201      	movs	r2, #1
 80032d6:	4618      	mov	r0, r3
 80032d8:	f004 f9f4 	bl	80076c4 <HAL_UART_Receive_IT>
}
 80032dc:	bf00      	nop
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	20000684 	.word	0x20000684
 80032e4:	20000698 	.word	0x20000698

080032e8 <SRV_uartIRQ>:

void SRV_uartIRQ(UART_HandleTypeDef* huart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
	if(huart == huart_srv)
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <SRV_uartIRQ+0x38>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d10e      	bne.n	8003318 <SRV_uartIRQ+0x30>
	{
		SRV_rx_head++;
 80032fa:	4b0a      	ldr	r3, [pc, #40]	; (8003324 <SRV_uartIRQ+0x3c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	3301      	adds	r3, #1
 8003300:	4a08      	ldr	r2, [pc, #32]	; (8003324 <SRV_uartIRQ+0x3c>)
 8003302:	6013      	str	r3, [r2, #0]
		if( SRV_rx_head == SRV_RxBuff+SRV_RX_BUFF_SIZE)
 8003304:	4b07      	ldr	r3, [pc, #28]	; (8003324 <SRV_uartIRQ+0x3c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a07      	ldr	r2, [pc, #28]	; (8003328 <SRV_uartIRQ+0x40>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d102      	bne.n	8003314 <SRV_uartIRQ+0x2c>
			SRV_rx_head = SRV_RxBuff;
 800330e:	4b05      	ldr	r3, [pc, #20]	; (8003324 <SRV_uartIRQ+0x3c>)
 8003310:	4a06      	ldr	r2, [pc, #24]	; (800332c <SRV_uartIRQ+0x44>)
 8003312:	601a      	str	r2, [r3, #0]
		SRV_uartStartRx();
 8003314:	f7ff ffd8 	bl	80032c8 <SRV_uartStartRx>
	}
}
 8003318:	bf00      	nop
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	20000684 	.word	0x20000684
 8003324:	20000698 	.word	0x20000698
 8003328:	20000698 	.word	0x20000698
 800332c:	20000688 	.word	0x20000688

08003330 <SRV_uartDataAvailable>:

uint8_t SRV_uartDataAvailable()
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
	return SRV_rx_head-SRV_rx_tail;
 8003334:	4b05      	ldr	r3, [pc, #20]	; (800334c <SRV_uartDataAvailable+0x1c>)
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	4b05      	ldr	r3, [pc, #20]	; (8003350 <SRV_uartDataAvailable+0x20>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	b2db      	uxtb	r3, r3
}
 8003340:	4618      	mov	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	20000698 	.word	0x20000698
 8003350:	2000069c 	.word	0x2000069c

08003354 <SRV_uartReadByte>:

uint8_t SRV_uartReadByte()
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
	return *(SRV_rx_tail++);
 8003358:	4b05      	ldr	r3, [pc, #20]	; (8003370 <SRV_uartReadByte+0x1c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	4904      	ldr	r1, [pc, #16]	; (8003370 <SRV_uartReadByte+0x1c>)
 8003360:	600a      	str	r2, [r1, #0]
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	b2db      	uxtb	r3, r3
}
 8003366:	4618      	mov	r0, r3
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	2000069c 	.word	0x2000069c

08003374 <SRV_uartPeek>:

uint8_t SRV_uartPeek()
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
	return *(SRV_rx_tail);
 8003378:	4b04      	ldr	r3, [pc, #16]	; (800338c <SRV_uartPeek+0x18>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	b2db      	uxtb	r3, r3
}
 8003380:	4618      	mov	r0, r3
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	2000069c 	.word	0x2000069c

08003390 <SRV_uartSendPacket>:

void SRV_uartSendPacket(uint8_t* packet, uint8_t len)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	70fb      	strb	r3, [r7, #3]
	SRV_uartStopRx();
 800339c:	f7ff ff86 	bl	80032ac <SRV_uartStopRx>
	SRV_uartClearBuff();
 80033a0:	f7ff ff70 	bl	8003284 <SRV_uartClearBuff>
	HAL_HalfDuplex_EnableTransmitter(huart_srv);
 80033a4:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <SRV_uartSendPacket+0x44>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f004 fce3 	bl	8007d74 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(huart_srv, packet , len, UART_TIMEOUT);
 80033ae:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <SRV_uartSendPacket+0x44>)
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	78fb      	ldrb	r3, [r7, #3]
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	2332      	movs	r3, #50	; 0x32
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	f004 f8ef 	bl	800759c <HAL_UART_Transmit>
	HAL_HalfDuplex_EnableReceiver(huart_srv);
 80033be:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <SRV_uartSendPacket+0x44>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f004 fd28 	bl	8007e18 <HAL_HalfDuplex_EnableReceiver>
	SRV_uartStartRx();
 80033c8:	f7ff ff7e 	bl	80032c8 <SRV_uartStartRx>
}
 80033cc:	bf00      	nop
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	20000684 	.word	0x20000684

080033d8 <SRV_sendCommand>:
/* #############################
 *   SERVO COMMUNICATION LAYER
 * #############################
 */
void SRV_sendCommand(uint8_t id, uint8_t* params)
{
 80033d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033dc:	b087      	sub	sp, #28
 80033de:	af00      	add	r7, sp, #0
 80033e0:	4603      	mov	r3, r0
 80033e2:	6039      	str	r1, [r7, #0]
 80033e4:	71fb      	strb	r3, [r7, #7]
 80033e6:	466b      	mov	r3, sp
 80033e8:	461e      	mov	r6, r3
	uint8_t base_len = 4;
 80033ea:	2304      	movs	r3, #4
 80033ec:	757b      	strb	r3, [r7, #21]
	uint8_t params_len = params[0];
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	753b      	strb	r3, [r7, #20]
	uint8_t len = base_len + params_len;
 80033f4:	7d7a      	ldrb	r2, [r7, #21]
 80033f6:	7d3b      	ldrb	r3, [r7, #20]
 80033f8:	4413      	add	r3, r2
 80033fa:	74fb      	strb	r3, [r7, #19]
	//preapare packet
	uint8_t packet[len];
 80033fc:	7cf9      	ldrb	r1, [r7, #19]
 80033fe:	460b      	mov	r3, r1
 8003400:	3b01      	subs	r3, #1
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	b2cb      	uxtb	r3, r1
 8003406:	2200      	movs	r2, #0
 8003408:	4698      	mov	r8, r3
 800340a:	4691      	mov	r9, r2
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003418:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800341c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003420:	b2cb      	uxtb	r3, r1
 8003422:	2200      	movs	r2, #0
 8003424:	461c      	mov	r4, r3
 8003426:	4615      	mov	r5, r2
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	f04f 0300 	mov.w	r3, #0
 8003430:	00eb      	lsls	r3, r5, #3
 8003432:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003436:	00e2      	lsls	r2, r4, #3
 8003438:	460b      	mov	r3, r1
 800343a:	3307      	adds	r3, #7
 800343c:	08db      	lsrs	r3, r3, #3
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	ebad 0d03 	sub.w	sp, sp, r3
 8003444:	466b      	mov	r3, sp
 8003446:	3300      	adds	r3, #0
 8003448:	60bb      	str	r3, [r7, #8]
	packet[0] = AX_START;
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	22ff      	movs	r2, #255	; 0xff
 800344e:	701a      	strb	r2, [r3, #0]
	packet[1] = AX_START;
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	22ff      	movs	r2, #255	; 0xff
 8003454:	705a      	strb	r2, [r3, #1]
	packet[2] = id;
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	79fa      	ldrb	r2, [r7, #7]
 800345a:	709a      	strb	r2, [r3, #2]
	memcpy(packet+3, params, params_len);
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	3303      	adds	r3, #3
 8003460:	7d3a      	ldrb	r2, [r7, #20]
 8003462:	6839      	ldr	r1, [r7, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f005 fc93 	bl	8008d90 <memcpy>

	//calculate checksum
	uint8_t checksum = 0;
 800346a:	2300      	movs	r3, #0
 800346c:	75bb      	strb	r3, [r7, #22]
	for( uint8_t i = 2; i < len-1; i++)
 800346e:	2302      	movs	r3, #2
 8003470:	75fb      	strb	r3, [r7, #23]
 8003472:	e008      	b.n	8003486 <SRV_sendCommand+0xae>
		checksum += packet[i];
 8003474:	7dfb      	ldrb	r3, [r7, #23]
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	5cd2      	ldrb	r2, [r2, r3]
 800347a:	7dbb      	ldrb	r3, [r7, #22]
 800347c:	4413      	add	r3, r2
 800347e:	75bb      	strb	r3, [r7, #22]
	for( uint8_t i = 2; i < len-1; i++)
 8003480:	7dfb      	ldrb	r3, [r7, #23]
 8003482:	3301      	adds	r3, #1
 8003484:	75fb      	strb	r3, [r7, #23]
 8003486:	7dfa      	ldrb	r2, [r7, #23]
 8003488:	7cfb      	ldrb	r3, [r7, #19]
 800348a:	3b01      	subs	r3, #1
 800348c:	429a      	cmp	r2, r3
 800348e:	dbf1      	blt.n	8003474 <SRV_sendCommand+0x9c>
	checksum = ( ~checksum ) & 0xFF;
 8003490:	7dbb      	ldrb	r3, [r7, #22]
 8003492:	43db      	mvns	r3, r3
 8003494:	75bb      	strb	r3, [r7, #22]
	packet[len-1] = checksum;
 8003496:	7cfb      	ldrb	r3, [r7, #19]
 8003498:	3b01      	subs	r3, #1
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	7db9      	ldrb	r1, [r7, #22]
 800349e:	54d1      	strb	r1, [r2, r3]

	//send via uart
	SRV_uartSendPacket(packet, len);
 80034a0:	7cfb      	ldrb	r3, [r7, #19]
 80034a2:	4619      	mov	r1, r3
 80034a4:	68b8      	ldr	r0, [r7, #8]
 80034a6:	f7ff ff73 	bl	8003390 <SRV_uartSendPacket>
 80034aa:	46b5      	mov	sp, r6
}
 80034ac:	bf00      	nop
 80034ae:	371c      	adds	r7, #28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080034b6 <SRV_getResponse>:

uint8_t SRV_getResponse(uint8_t* response, uint8_t len)
{
 80034b6:	b590      	push	{r4, r7, lr}
 80034b8:	b085      	sub	sp, #20
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	460b      	mov	r3, r1
 80034c0:	70fb      	strb	r3, [r7, #3]
	uint32_t start = HAL_GetTick();
 80034c2:	f000 fc03 	bl	8003ccc <HAL_GetTick>
 80034c6:	60b8      	str	r0, [r7, #8]
	//wait for data to arrive
	while( SRV_uartDataAvailable() < len )
 80034c8:	e008      	b.n	80034dc <SRV_getResponse+0x26>
	{
		if(HAL_GetTick()-start > UART_TIMEOUT) //fail when timed out
 80034ca:	f000 fbff 	bl	8003ccc <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b32      	cmp	r3, #50	; 0x32
 80034d6:	d901      	bls.n	80034dc <SRV_getResponse+0x26>
			return 1;
 80034d8:	2301      	movs	r3, #1
 80034da:	e01f      	b.n	800351c <SRV_getResponse+0x66>
	while( SRV_uartDataAvailable() < len )
 80034dc:	f7ff ff28 	bl	8003330 <SRV_uartDataAvailable>
 80034e0:	4603      	mov	r3, r0
 80034e2:	461a      	mov	r2, r3
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d8ef      	bhi.n	80034ca <SRV_getResponse+0x14>
	}
	//check for start byte
	if( SRV_uartPeek() == AX_START )
 80034ea:	f7ff ff43 	bl	8003374 <SRV_uartPeek>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2bff      	cmp	r3, #255	; 0xff
 80034f2:	d112      	bne.n	800351a <SRV_getResponse+0x64>
	{
		//copy from rx buff
		for(uint8_t i = 0; i < len; i++)
 80034f4:	2300      	movs	r3, #0
 80034f6:	73fb      	strb	r3, [r7, #15]
 80034f8:	e009      	b.n	800350e <SRV_getResponse+0x58>
			response[i] = SRV_uartReadByte();
 80034fa:	7bfb      	ldrb	r3, [r7, #15]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	18d4      	adds	r4, r2, r3
 8003500:	f7ff ff28 	bl	8003354 <SRV_uartReadByte>
 8003504:	4603      	mov	r3, r0
 8003506:	7023      	strb	r3, [r4, #0]
		for(uint8_t i = 0; i < len; i++)
 8003508:	7bfb      	ldrb	r3, [r7, #15]
 800350a:	3301      	adds	r3, #1
 800350c:	73fb      	strb	r3, [r7, #15]
 800350e:	7bfa      	ldrb	r2, [r7, #15]
 8003510:	78fb      	ldrb	r3, [r7, #3]
 8003512:	429a      	cmp	r2, r3
 8003514:	d3f1      	bcc.n	80034fa <SRV_getResponse+0x44>
		return 0;
 8003516:	2300      	movs	r3, #0
 8003518:	e000      	b.n	800351c <SRV_getResponse+0x66>
	}
	else return 1;
 800351a:	2301      	movs	r3, #1
}
 800351c:	4618      	mov	r0, r3
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	bd90      	pop	{r4, r7, pc}

08003524 <SRV_Init>:
/* ###############################
 *   SERVO ABSTRACT COMMANDS
 * ###############################
 */
void SRV_Init(UART_HandleTypeDef* huart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
	huart_srv = huart;
 800352c:	4a04      	ldr	r2, [pc, #16]	; (8003540 <SRV_Init+0x1c>)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6013      	str	r3, [r2, #0]
	SRV_uartClearBuff();
 8003532:	f7ff fea7 	bl	8003284 <SRV_uartClearBuff>
}
 8003536:	bf00      	nop
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	20000684 	.word	0x20000684

08003544 <SRV_readError>:

uint8_t SRV_readError()
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
	uint8_t response[5];
	SRV_getResponse(response, 5);
 800354a:	463b      	mov	r3, r7
 800354c:	2105      	movs	r1, #5
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff ffb1 	bl	80034b6 <SRV_getResponse>
	return response[4];
 8003554:	793b      	ldrb	r3, [r7, #4]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <SRV_setLED>:

uint8_t SRV_setLED(uint8_t id, uint8_t state)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	4603      	mov	r3, r0
 8003566:	460a      	mov	r2, r1
 8003568:	71fb      	strb	r3, [r7, #7]
 800356a:	4613      	mov	r3, r2
 800356c:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[] = { AX_LED_LENGTH, AX_WRITE_DATA, AX_LED, state};
 800356e:	2304      	movs	r3, #4
 8003570:	733b      	strb	r3, [r7, #12]
 8003572:	2303      	movs	r3, #3
 8003574:	737b      	strb	r3, [r7, #13]
 8003576:	2319      	movs	r3, #25
 8003578:	73bb      	strb	r3, [r7, #14]
 800357a:	79bb      	ldrb	r3, [r7, #6]
 800357c:	73fb      	strb	r3, [r7, #15]
	SRV_sendCommand(id, cmd);
 800357e:	f107 020c 	add.w	r2, r7, #12
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	4611      	mov	r1, r2
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff ff26 	bl	80033d8 <SRV_sendCommand>
	return SRV_readError();
 800358c:	f7ff ffda 	bl	8003544 <SRV_readError>
 8003590:	4603      	mov	r3, r0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <SRV_move>:

uint8_t SRV_move(uint8_t id, uint16_t position, uint16_t speed)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b086      	sub	sp, #24
 800359e:	af00      	add	r7, sp, #0
 80035a0:	4603      	mov	r3, r0
 80035a2:	71fb      	strb	r3, [r7, #7]
 80035a4:	460b      	mov	r3, r1
 80035a6:	80bb      	strh	r3, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	807b      	strh	r3, [r7, #2]
    uint8_t Position_H = position >> 8;           // 16 bits - 2 x 8 bits variables
 80035ac:	88bb      	ldrh	r3, [r7, #4]
 80035ae:	0a1b      	lsrs	r3, r3, #8
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	75fb      	strb	r3, [r7, #23]
    uint8_t Position_L = position;
 80035b4:	88bb      	ldrh	r3, [r7, #4]
 80035b6:	75bb      	strb	r3, [r7, #22]
    uint8_t Speed_H = speed >> 8;
 80035b8:	887b      	ldrh	r3, [r7, #2]
 80035ba:	0a1b      	lsrs	r3, r3, #8
 80035bc:	b29b      	uxth	r3, r3
 80035be:	757b      	strb	r3, [r7, #21]
    uint8_t Speed_L = speed;                      // 16 bits - 2 x 8 bits variables
 80035c0:	887b      	ldrh	r3, [r7, #2]
 80035c2:	753b      	strb	r3, [r7, #20]

	uint8_t cmd[] = {AX_GOAL_SP_LENGTH, AX_WRITE_DATA, AX_GOAL_POSITION_L, Position_L, Position_H, Speed_L, Speed_H };
 80035c4:	2307      	movs	r3, #7
 80035c6:	733b      	strb	r3, [r7, #12]
 80035c8:	2303      	movs	r3, #3
 80035ca:	737b      	strb	r3, [r7, #13]
 80035cc:	231e      	movs	r3, #30
 80035ce:	73bb      	strb	r3, [r7, #14]
 80035d0:	7dbb      	ldrb	r3, [r7, #22]
 80035d2:	73fb      	strb	r3, [r7, #15]
 80035d4:	7dfb      	ldrb	r3, [r7, #23]
 80035d6:	743b      	strb	r3, [r7, #16]
 80035d8:	7d3b      	ldrb	r3, [r7, #20]
 80035da:	747b      	strb	r3, [r7, #17]
 80035dc:	7d7b      	ldrb	r3, [r7, #21]
 80035de:	74bb      	strb	r3, [r7, #18]
	SRV_sendCommand(id, cmd);
 80035e0:	f107 020c 	add.w	r2, r7, #12
 80035e4:	79fb      	ldrb	r3, [r7, #7]
 80035e6:	4611      	mov	r1, r2
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff fef5 	bl	80033d8 <SRV_sendCommand>
	return SRV_readError();
 80035ee:	f7ff ffa9 	bl	8003544 <SRV_readError>
 80035f2:	4603      	mov	r3, r0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <SRV_enableTorque>:

uint8_t SRV_enableTorque(uint8_t id, uint8_t state)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	460a      	mov	r2, r1
 8003606:	71fb      	strb	r3, [r7, #7]
 8003608:	4613      	mov	r3, r2
 800360a:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[] = { AX_TORQUE_LENGTH, AX_WRITE_DATA, AX_TORQUE_ENABLE, state };
 800360c:	2304      	movs	r3, #4
 800360e:	733b      	strb	r3, [r7, #12]
 8003610:	2303      	movs	r3, #3
 8003612:	737b      	strb	r3, [r7, #13]
 8003614:	2318      	movs	r3, #24
 8003616:	73bb      	strb	r3, [r7, #14]
 8003618:	79bb      	ldrb	r3, [r7, #6]
 800361a:	73fb      	strb	r3, [r7, #15]
	SRV_sendCommand(id, cmd);
 800361c:	f107 020c 	add.w	r2, r7, #12
 8003620:	79fb      	ldrb	r3, [r7, #7]
 8003622:	4611      	mov	r1, r2
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff fed7 	bl	80033d8 <SRV_sendCommand>
	return SRV_readError();
 800362a:	f7ff ff8b 	bl	8003544 <SRV_readError>
 800362e:	4603      	mov	r3, r0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <SRV_readPosition>:

uint16_t SRV_readPosition(uint8_t id)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[] = {AX_POS_LENGTH, AX_READ_DATA, AX_PRESENT_POSITION_L, AX_BYTE_READ_POS};
 8003642:	4b0d      	ldr	r3, [pc, #52]	; (8003678 <SRV_readPosition+0x40>)
 8003644:	617b      	str	r3, [r7, #20]
	SRV_sendCommand(id, cmd);
 8003646:	f107 0214 	add.w	r2, r7, #20
 800364a:	79fb      	ldrb	r3, [r7, #7]
 800364c:	4611      	mov	r1, r2
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff fec2 	bl	80033d8 <SRV_sendCommand>

	uint8_t response[8];
	SRV_getResponse(response,8);
 8003654:	f107 030c 	add.w	r3, r7, #12
 8003658:	2108      	movs	r1, #8
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff ff2b 	bl	80034b6 <SRV_getResponse>
	return (response[6]<<8) + response[5];
 8003660:	7cbb      	ldrb	r3, [r7, #18]
 8003662:	b29b      	uxth	r3, r3
 8003664:	021b      	lsls	r3, r3, #8
 8003666:	b29a      	uxth	r2, r3
 8003668:	7c7b      	ldrb	r3, [r7, #17]
 800366a:	b29b      	uxth	r3, r3
 800366c:	4413      	add	r3, r2
 800366e:	b29b      	uxth	r3, r3
}
 8003670:	4618      	mov	r0, r3
 8003672:	3718      	adds	r7, #24
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	02240204 	.word	0x02240204

0800367c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003682:	4b0f      	ldr	r3, [pc, #60]	; (80036c0 <HAL_MspInit+0x44>)
 8003684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003686:	4a0e      	ldr	r2, [pc, #56]	; (80036c0 <HAL_MspInit+0x44>)
 8003688:	f043 0301 	orr.w	r3, r3, #1
 800368c:	6613      	str	r3, [r2, #96]	; 0x60
 800368e:	4b0c      	ldr	r3, [pc, #48]	; (80036c0 <HAL_MspInit+0x44>)
 8003690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	607b      	str	r3, [r7, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800369a:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <HAL_MspInit+0x44>)
 800369c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369e:	4a08      	ldr	r2, [pc, #32]	; (80036c0 <HAL_MspInit+0x44>)
 80036a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a4:	6593      	str	r3, [r2, #88]	; 0x58
 80036a6:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <HAL_MspInit+0x44>)
 80036a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ae:	603b      	str	r3, [r7, #0]
 80036b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40021000 	.word	0x40021000

080036c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b0ac      	sub	sp, #176	; 0xb0
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	609a      	str	r2, [r3, #8]
 80036d8:	60da      	str	r2, [r3, #12]
 80036da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036dc:	f107 0314 	add.w	r3, r7, #20
 80036e0:	2288      	movs	r2, #136	; 0x88
 80036e2:	2100      	movs	r1, #0
 80036e4:	4618      	mov	r0, r3
 80036e6:	f005 fb61 	bl	8008dac <memset>
  if(hadc->Instance==ADC1)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a3c      	ldr	r2, [pc, #240]	; (80037e0 <HAL_ADC_MspInit+0x11c>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d171      	bne.n	80037d8 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80036f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80036f8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80036fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80036fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8003702:	2302      	movs	r3, #2
 8003704:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003706:	2301      	movs	r3, #1
 8003708:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800370a:	2308      	movs	r3, #8
 800370c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800370e:	2307      	movs	r3, #7
 8003710:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003712:	2302      	movs	r3, #2
 8003714:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003716:	2302      	movs	r3, #2
 8003718:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800371a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800371e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003720:	f107 0314 	add.w	r3, r7, #20
 8003724:	4618      	mov	r0, r3
 8003726:	f003 f9d9 	bl	8006adc <HAL_RCCEx_PeriphCLKConfig>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8003730:	f7ff fb0a 	bl	8002d48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003734:	4b2b      	ldr	r3, [pc, #172]	; (80037e4 <HAL_ADC_MspInit+0x120>)
 8003736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003738:	4a2a      	ldr	r2, [pc, #168]	; (80037e4 <HAL_ADC_MspInit+0x120>)
 800373a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800373e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003740:	4b28      	ldr	r3, [pc, #160]	; (80037e4 <HAL_ADC_MspInit+0x120>)
 8003742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003744:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800374c:	4b25      	ldr	r3, [pc, #148]	; (80037e4 <HAL_ADC_MspInit+0x120>)
 800374e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003750:	4a24      	ldr	r2, [pc, #144]	; (80037e4 <HAL_ADC_MspInit+0x120>)
 8003752:	f043 0304 	orr.w	r3, r3, #4
 8003756:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003758:	4b22      	ldr	r3, [pc, #136]	; (80037e4 <HAL_ADC_MspInit+0x120>)
 800375a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC11_L_X_Pin|ADC12_L_Y_Pin|ADC13_R_X_Pin|ADC14_R_Y_Pin;
 8003764:	230f      	movs	r3, #15
 8003766:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800376a:	230b      	movs	r3, #11
 800376c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003770:	2300      	movs	r3, #0
 8003772:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003776:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800377a:	4619      	mov	r1, r3
 800377c:	481a      	ldr	r0, [pc, #104]	; (80037e8 <HAL_ADC_MspInit+0x124>)
 800377e:	f002 f955 	bl	8005a2c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel3;
 8003782:	4b1a      	ldr	r3, [pc, #104]	; (80037ec <HAL_ADC_MspInit+0x128>)
 8003784:	4a1a      	ldr	r2, [pc, #104]	; (80037f0 <HAL_ADC_MspInit+0x12c>)
 8003786:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003788:	4b18      	ldr	r3, [pc, #96]	; (80037ec <HAL_ADC_MspInit+0x128>)
 800378a:	2200      	movs	r2, #0
 800378c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800378e:	4b17      	ldr	r3, [pc, #92]	; (80037ec <HAL_ADC_MspInit+0x128>)
 8003790:	2200      	movs	r2, #0
 8003792:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003794:	4b15      	ldr	r3, [pc, #84]	; (80037ec <HAL_ADC_MspInit+0x128>)
 8003796:	2200      	movs	r2, #0
 8003798:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800379a:	4b14      	ldr	r3, [pc, #80]	; (80037ec <HAL_ADC_MspInit+0x128>)
 800379c:	2280      	movs	r2, #128	; 0x80
 800379e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80037a0:	4b12      	ldr	r3, [pc, #72]	; (80037ec <HAL_ADC_MspInit+0x128>)
 80037a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037a6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80037a8:	4b10      	ldr	r3, [pc, #64]	; (80037ec <HAL_ADC_MspInit+0x128>)
 80037aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037ae:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80037b0:	4b0e      	ldr	r3, [pc, #56]	; (80037ec <HAL_ADC_MspInit+0x128>)
 80037b2:	2220      	movs	r2, #32
 80037b4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80037b6:	4b0d      	ldr	r3, [pc, #52]	; (80037ec <HAL_ADC_MspInit+0x128>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80037bc:	480b      	ldr	r0, [pc, #44]	; (80037ec <HAL_ADC_MspInit+0x128>)
 80037be:	f001 febf 	bl	8005540 <HAL_DMA_Init>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80037c8:	f7ff fabe 	bl	8002d48 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a07      	ldr	r2, [pc, #28]	; (80037ec <HAL_ADC_MspInit+0x128>)
 80037d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80037d2:	4a06      	ldr	r2, [pc, #24]	; (80037ec <HAL_ADC_MspInit+0x128>)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80037d8:	bf00      	nop
 80037da:	37b0      	adds	r7, #176	; 0xb0
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	50040000 	.word	0x50040000
 80037e4:	40021000 	.word	0x40021000
 80037e8:	48000800 	.word	0x48000800
 80037ec:	200004f8 	.word	0x200004f8
 80037f0:	40020430 	.word	0x40020430

080037f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b0ae      	sub	sp, #184	; 0xb8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	605a      	str	r2, [r3, #4]
 8003806:	609a      	str	r2, [r3, #8]
 8003808:	60da      	str	r2, [r3, #12]
 800380a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800380c:	f107 031c 	add.w	r3, r7, #28
 8003810:	2288      	movs	r2, #136	; 0x88
 8003812:	2100      	movs	r1, #0
 8003814:	4618      	mov	r0, r3
 8003816:	f005 fac9 	bl	8008dac <memset>
  if(huart->Instance==USART1)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a4b      	ldr	r2, [pc, #300]	; (800394c <HAL_UART_MspInit+0x158>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d145      	bne.n	80038b0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003824:	2301      	movs	r3, #1
 8003826:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003828:	2300      	movs	r3, #0
 800382a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800382c:	f107 031c 	add.w	r3, r7, #28
 8003830:	4618      	mov	r0, r3
 8003832:	f003 f953 	bl	8006adc <HAL_RCCEx_PeriphCLKConfig>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800383c:	f7ff fa84 	bl	8002d48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003840:	4b43      	ldr	r3, [pc, #268]	; (8003950 <HAL_UART_MspInit+0x15c>)
 8003842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003844:	4a42      	ldr	r2, [pc, #264]	; (8003950 <HAL_UART_MspInit+0x15c>)
 8003846:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800384a:	6613      	str	r3, [r2, #96]	; 0x60
 800384c:	4b40      	ldr	r3, [pc, #256]	; (8003950 <HAL_UART_MspInit+0x15c>)
 800384e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003854:	61bb      	str	r3, [r7, #24]
 8003856:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003858:	4b3d      	ldr	r3, [pc, #244]	; (8003950 <HAL_UART_MspInit+0x15c>)
 800385a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385c:	4a3c      	ldr	r2, [pc, #240]	; (8003950 <HAL_UART_MspInit+0x15c>)
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003864:	4b3a      	ldr	r3, [pc, #232]	; (8003950 <HAL_UART_MspInit+0x15c>)
 8003866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	617b      	str	r3, [r7, #20]
 800386e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = SRV_UART_RXTX_Pin;
 8003870:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003874:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003878:	2312      	movs	r3, #18
 800387a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800387e:	2301      	movs	r3, #1
 8003880:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003884:	2303      	movs	r3, #3
 8003886:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800388a:	2307      	movs	r3, #7
 800388c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(SRV_UART_RXTX_GPIO_Port, &GPIO_InitStruct);
 8003890:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003894:	4619      	mov	r1, r3
 8003896:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800389a:	f002 f8c7 	bl	8005a2c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800389e:	2200      	movs	r2, #0
 80038a0:	2100      	movs	r1, #0
 80038a2:	2025      	movs	r0, #37	; 0x25
 80038a4:	f001 fe15 	bl	80054d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80038a8:	2025      	movs	r0, #37	; 0x25
 80038aa:	f001 fe2e 	bl	800550a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80038ae:	e048      	b.n	8003942 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a27      	ldr	r2, [pc, #156]	; (8003954 <HAL_UART_MspInit+0x160>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d143      	bne.n	8003942 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80038ba:	2302      	movs	r3, #2
 80038bc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80038be:	2300      	movs	r3, #0
 80038c0:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038c2:	f107 031c 	add.w	r3, r7, #28
 80038c6:	4618      	mov	r0, r3
 80038c8:	f003 f908 	bl	8006adc <HAL_RCCEx_PeriphCLKConfig>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 80038d2:	f7ff fa39 	bl	8002d48 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80038d6:	4b1e      	ldr	r3, [pc, #120]	; (8003950 <HAL_UART_MspInit+0x15c>)
 80038d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038da:	4a1d      	ldr	r2, [pc, #116]	; (8003950 <HAL_UART_MspInit+0x15c>)
 80038dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038e0:	6593      	str	r3, [r2, #88]	; 0x58
 80038e2:	4b1b      	ldr	r3, [pc, #108]	; (8003950 <HAL_UART_MspInit+0x15c>)
 80038e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ea:	613b      	str	r3, [r7, #16]
 80038ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ee:	4b18      	ldr	r3, [pc, #96]	; (8003950 <HAL_UART_MspInit+0x15c>)
 80038f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f2:	4a17      	ldr	r2, [pc, #92]	; (8003950 <HAL_UART_MspInit+0x15c>)
 80038f4:	f043 0301 	orr.w	r3, r3, #1
 80038f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038fa:	4b15      	ldr	r3, [pc, #84]	; (8003950 <HAL_UART_MspInit+0x15c>)
 80038fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TTY_UART_TX_Pin|TTY_UART_RX_Pin;
 8003906:	230c      	movs	r3, #12
 8003908:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800390c:	2302      	movs	r3, #2
 800390e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003912:	2300      	movs	r3, #0
 8003914:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003918:	2303      	movs	r3, #3
 800391a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800391e:	2307      	movs	r3, #7
 8003920:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003924:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003928:	4619      	mov	r1, r3
 800392a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800392e:	f002 f87d 	bl	8005a2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003932:	2200      	movs	r2, #0
 8003934:	2100      	movs	r1, #0
 8003936:	2026      	movs	r0, #38	; 0x26
 8003938:	f001 fdcb 	bl	80054d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800393c:	2026      	movs	r0, #38	; 0x26
 800393e:	f001 fde4 	bl	800550a <HAL_NVIC_EnableIRQ>
}
 8003942:	bf00      	nop
 8003944:	37b8      	adds	r7, #184	; 0xb8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	40013800 	.word	0x40013800
 8003950:	40021000 	.word	0x40021000
 8003954:	40004400 	.word	0x40004400

08003958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800395c:	e7fe      	b.n	800395c <NMI_Handler+0x4>

0800395e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800395e:	b480      	push	{r7}
 8003960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003962:	e7fe      	b.n	8003962 <HardFault_Handler+0x4>

08003964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003968:	e7fe      	b.n	8003968 <MemManage_Handler+0x4>

0800396a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800396a:	b480      	push	{r7}
 800396c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800396e:	e7fe      	b.n	800396e <BusFault_Handler+0x4>

08003970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003974:	e7fe      	b.n	8003974 <UsageFault_Handler+0x4>

08003976 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003976:	b480      	push	{r7}
 8003978:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800397a:	bf00      	nop
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003988:	bf00      	nop
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003992:	b480      	push	{r7}
 8003994:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003996:	bf00      	nop
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039a4:	f000 f97e 	bl	8003ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039a8:	bf00      	nop
 80039aa:	bd80      	pop	{r7, pc}

080039ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80039b0:	4802      	ldr	r0, [pc, #8]	; (80039bc <USART1_IRQHandler+0x10>)
 80039b2:	f003 fedd 	bl	8007770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80039b6:	bf00      	nop
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	20000540 	.word	0x20000540

080039c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80039c4:	4802      	ldr	r0, [pc, #8]	; (80039d0 <USART2_IRQHandler+0x10>)
 80039c6:	f003 fed3 	bl	8007770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	200005c4 	.word	0x200005c4

080039d4 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80039d8:	4802      	ldr	r0, [pc, #8]	; (80039e4 <DMA2_Channel3_IRQHandler+0x10>)
 80039da:	f001 ff48 	bl	800586e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 80039de:	bf00      	nop
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	200004f8 	.word	0x200004f8

080039e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
	return 1;
 80039ec:	2301      	movs	r3, #1
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <_kill>:

int _kill(int pid, int sig)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003a02:	f005 f99b 	bl	8008d3c <__errno>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2216      	movs	r2, #22
 8003a0a:	601a      	str	r2, [r3, #0]
	return -1;
 8003a0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <_exit>:

void _exit (int status)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003a20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff ffe7 	bl	80039f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003a2a:	e7fe      	b.n	8003a2a <_exit+0x12>

08003a2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a38:	2300      	movs	r3, #0
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	e00a      	b.n	8003a54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a3e:	f3af 8000 	nop.w
 8003a42:	4601      	mov	r1, r0
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	60ba      	str	r2, [r7, #8]
 8003a4a:	b2ca      	uxtb	r2, r1
 8003a4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	3301      	adds	r3, #1
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	dbf0      	blt.n	8003a3e <_read+0x12>
	}

return len;
 8003a5c:	687b      	ldr	r3, [r7, #4]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b086      	sub	sp, #24
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	60f8      	str	r0, [r7, #12]
 8003a6e:	60b9      	str	r1, [r7, #8]
 8003a70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a72:	2300      	movs	r3, #0
 8003a74:	617b      	str	r3, [r7, #20]
 8003a76:	e009      	b.n	8003a8c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	60ba      	str	r2, [r7, #8]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	617b      	str	r3, [r7, #20]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	dbf1      	blt.n	8003a78 <_write+0x12>
	}
	return len;
 8003a94:	687b      	ldr	r3, [r7, #4]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3718      	adds	r7, #24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <_close>:

int _close(int file)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
	return -1;
 8003aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
 8003abe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ac6:	605a      	str	r2, [r3, #4]
	return 0;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <_isatty>:

int _isatty(int file)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
	return 1;
 8003ade:	2301      	movs	r3, #1
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
	return 0;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
	...

08003b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b10:	4a14      	ldr	r2, [pc, #80]	; (8003b64 <_sbrk+0x5c>)
 8003b12:	4b15      	ldr	r3, [pc, #84]	; (8003b68 <_sbrk+0x60>)
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b1c:	4b13      	ldr	r3, [pc, #76]	; (8003b6c <_sbrk+0x64>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d102      	bne.n	8003b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b24:	4b11      	ldr	r3, [pc, #68]	; (8003b6c <_sbrk+0x64>)
 8003b26:	4a12      	ldr	r2, [pc, #72]	; (8003b70 <_sbrk+0x68>)
 8003b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b2a:	4b10      	ldr	r3, [pc, #64]	; (8003b6c <_sbrk+0x64>)
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4413      	add	r3, r2
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d207      	bcs.n	8003b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b38:	f005 f900 	bl	8008d3c <__errno>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	220c      	movs	r2, #12
 8003b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b46:	e009      	b.n	8003b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b48:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <_sbrk+0x64>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b4e:	4b07      	ldr	r3, [pc, #28]	; (8003b6c <_sbrk+0x64>)
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4413      	add	r3, r2
 8003b56:	4a05      	ldr	r2, [pc, #20]	; (8003b6c <_sbrk+0x64>)
 8003b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	20018000 	.word	0x20018000
 8003b68:	00000400 	.word	0x00000400
 8003b6c:	200006a0 	.word	0x200006a0
 8003b70:	200006b8 	.word	0x200006b8

08003b74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003b78:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <SystemInit+0x20>)
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7e:	4a05      	ldr	r2, [pc, #20]	; (8003b94 <SystemInit+0x20>)
 8003b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003b88:	bf00      	nop
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	e000ed00 	.word	0xe000ed00

08003b98 <Reset_Handler>:
 8003b98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bd0 <LoopForever+0x2>
 8003b9c:	f7ff ffea 	bl	8003b74 <SystemInit>
 8003ba0:	480c      	ldr	r0, [pc, #48]	; (8003bd4 <LoopForever+0x6>)
 8003ba2:	490d      	ldr	r1, [pc, #52]	; (8003bd8 <LoopForever+0xa>)
 8003ba4:	4a0d      	ldr	r2, [pc, #52]	; (8003bdc <LoopForever+0xe>)
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	e002      	b.n	8003bb0 <LoopCopyDataInit>

08003baa <CopyDataInit>:
 8003baa:	58d4      	ldr	r4, [r2, r3]
 8003bac:	50c4      	str	r4, [r0, r3]
 8003bae:	3304      	adds	r3, #4

08003bb0 <LoopCopyDataInit>:
 8003bb0:	18c4      	adds	r4, r0, r3
 8003bb2:	428c      	cmp	r4, r1
 8003bb4:	d3f9      	bcc.n	8003baa <CopyDataInit>
 8003bb6:	4a0a      	ldr	r2, [pc, #40]	; (8003be0 <LoopForever+0x12>)
 8003bb8:	4c0a      	ldr	r4, [pc, #40]	; (8003be4 <LoopForever+0x16>)
 8003bba:	2300      	movs	r3, #0
 8003bbc:	e001      	b.n	8003bc2 <LoopFillZerobss>

08003bbe <FillZerobss>:
 8003bbe:	6013      	str	r3, [r2, #0]
 8003bc0:	3204      	adds	r2, #4

08003bc2 <LoopFillZerobss>:
 8003bc2:	42a2      	cmp	r2, r4
 8003bc4:	d3fb      	bcc.n	8003bbe <FillZerobss>
 8003bc6:	f005 f8bf 	bl	8008d48 <__libc_init_array>
 8003bca:	f7fe fe8b 	bl	80028e4 <main>

08003bce <LoopForever>:
 8003bce:	e7fe      	b.n	8003bce <LoopForever>
 8003bd0:	20018000 	.word	0x20018000
 8003bd4:	20000000 	.word	0x20000000
 8003bd8:	200001e4 	.word	0x200001e4
 8003bdc:	0800ee10 	.word	0x0800ee10
 8003be0:	200001e8 	.word	0x200001e8
 8003be4:	200006b8 	.word	0x200006b8

08003be8 <ADC1_2_IRQHandler>:
 8003be8:	e7fe      	b.n	8003be8 <ADC1_2_IRQHandler>
	...

08003bec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bf6:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <HAL_Init+0x3c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a0b      	ldr	r2, [pc, #44]	; (8003c28 <HAL_Init+0x3c>)
 8003bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c00:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c02:	2003      	movs	r0, #3
 8003c04:	f001 fc5a 	bl	80054bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c08:	2000      	movs	r0, #0
 8003c0a:	f000 f80f 	bl	8003c2c <HAL_InitTick>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	71fb      	strb	r3, [r7, #7]
 8003c18:	e001      	b.n	8003c1e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c1a:	f7ff fd2f 	bl	800367c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c1e:	79fb      	ldrb	r3, [r7, #7]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40022000 	.word	0x40022000

08003c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003c38:	4b17      	ldr	r3, [pc, #92]	; (8003c98 <HAL_InitTick+0x6c>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d023      	beq.n	8003c88 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003c40:	4b16      	ldr	r3, [pc, #88]	; (8003c9c <HAL_InitTick+0x70>)
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	4b14      	ldr	r3, [pc, #80]	; (8003c98 <HAL_InitTick+0x6c>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	4619      	mov	r1, r3
 8003c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c56:	4618      	mov	r0, r3
 8003c58:	f001 fc65 	bl	8005526 <HAL_SYSTICK_Config>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10f      	bne.n	8003c82 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b0f      	cmp	r3, #15
 8003c66:	d809      	bhi.n	8003c7c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c68:	2200      	movs	r2, #0
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c70:	f001 fc2f 	bl	80054d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c74:	4a0a      	ldr	r2, [pc, #40]	; (8003ca0 <HAL_InitTick+0x74>)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	e007      	b.n	8003c8c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	73fb      	strb	r3, [r7, #15]
 8003c80:	e004      	b.n	8003c8c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	73fb      	strb	r3, [r7, #15]
 8003c86:	e001      	b.n	8003c8c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20000010 	.word	0x20000010
 8003c9c:	20000008 	.word	0x20000008
 8003ca0:	2000000c 	.word	0x2000000c

08003ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ca8:	4b06      	ldr	r3, [pc, #24]	; (8003cc4 <HAL_IncTick+0x20>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	461a      	mov	r2, r3
 8003cae:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <HAL_IncTick+0x24>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	4a04      	ldr	r2, [pc, #16]	; (8003cc8 <HAL_IncTick+0x24>)
 8003cb6:	6013      	str	r3, [r2, #0]
}
 8003cb8:	bf00      	nop
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	20000010 	.word	0x20000010
 8003cc8:	200006a4 	.word	0x200006a4

08003ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  return uwTick;
 8003cd0:	4b03      	ldr	r3, [pc, #12]	; (8003ce0 <HAL_GetTick+0x14>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	200006a4 	.word	0x200006a4

08003ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cec:	f7ff ffee 	bl	8003ccc <HAL_GetTick>
 8003cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cfc:	d005      	beq.n	8003d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003cfe:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <HAL_Delay+0x44>)
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4413      	add	r3, r2
 8003d08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d0a:	bf00      	nop
 8003d0c:	f7ff ffde 	bl	8003ccc <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d8f7      	bhi.n	8003d0c <HAL_Delay+0x28>
  {
  }
}
 8003d1c:	bf00      	nop
 8003d1e:	bf00      	nop
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	20000010 	.word	0x20000010

08003d2c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	609a      	str	r2, [r3, #8]
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	609a      	str	r2, [r3, #8]
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
 8003da0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	3360      	adds	r3, #96	; 0x60
 8003da6:	461a      	mov	r2, r3
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	4b08      	ldr	r3, [pc, #32]	; (8003dd8 <LL_ADC_SetOffset+0x44>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003dcc:	bf00      	nop
 8003dce:	371c      	adds	r7, #28
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	03fff000 	.word	0x03fff000

08003ddc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	3360      	adds	r3, #96	; 0x60
 8003dea:	461a      	mov	r2, r3
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3360      	adds	r3, #96	; 0x60
 8003e18:	461a      	mov	r2, r3
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4413      	add	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003e32:	bf00      	nop
 8003e34:	371c      	adds	r7, #28
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003e52:	2301      	movs	r3, #1
 8003e54:	e000      	b.n	8003e58 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	3330      	adds	r3, #48	; 0x30
 8003e74:	461a      	mov	r2, r3
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	0a1b      	lsrs	r3, r3, #8
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	f003 030c 	and.w	r3, r3, #12
 8003e80:	4413      	add	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	f003 031f 	and.w	r3, r3, #31
 8003e8e:	211f      	movs	r1, #31
 8003e90:	fa01 f303 	lsl.w	r3, r1, r3
 8003e94:	43db      	mvns	r3, r3
 8003e96:	401a      	ands	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	0e9b      	lsrs	r3, r3, #26
 8003e9c:	f003 011f 	and.w	r1, r3, #31
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f003 031f 	and.w	r3, r3, #31
 8003ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003eb0:	bf00      	nop
 8003eb2:	371c      	adds	r7, #28
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b087      	sub	sp, #28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	3314      	adds	r3, #20
 8003ecc:	461a      	mov	r2, r3
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	0e5b      	lsrs	r3, r3, #25
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	4413      	add	r3, r2
 8003eda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	0d1b      	lsrs	r3, r3, #20
 8003ee4:	f003 031f 	and.w	r3, r3, #31
 8003ee8:	2107      	movs	r1, #7
 8003eea:	fa01 f303 	lsl.w	r3, r1, r3
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	401a      	ands	r2, r3
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	0d1b      	lsrs	r3, r3, #20
 8003ef6:	f003 031f 	and.w	r3, r3, #31
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	fa01 f303 	lsl.w	r3, r1, r3
 8003f00:	431a      	orrs	r2, r3
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003f06:	bf00      	nop
 8003f08:	371c      	adds	r7, #28
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
	...

08003f14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	401a      	ands	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f003 0318 	and.w	r3, r3, #24
 8003f36:	4908      	ldr	r1, [pc, #32]	; (8003f58 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003f38:	40d9      	lsrs	r1, r3
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	400b      	ands	r3, r1
 8003f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f42:	431a      	orrs	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003f4a:	bf00      	nop
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	0007ffff 	.word	0x0007ffff

08003f5c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 031f 	and.w	r3, r3, #31
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003f88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6093      	str	r3, [r2, #8]
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fb0:	d101      	bne.n	8003fb6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003fd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003fd8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ffc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004000:	d101      	bne.n	8004006 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004002:	2301      	movs	r3, #1
 8004004:	e000      	b.n	8004008 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004024:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004028:	f043 0201 	orr.w	r2, r3, #1
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800404c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004050:	f043 0202 	orr.w	r2, r3, #2
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b01      	cmp	r3, #1
 8004076:	d101      	bne.n	800407c <LL_ADC_IsEnabled+0x18>
 8004078:	2301      	movs	r3, #1
 800407a:	e000      	b.n	800407e <LL_ADC_IsEnabled+0x1a>
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b02      	cmp	r3, #2
 800409c:	d101      	bne.n	80040a2 <LL_ADC_IsDisableOngoing+0x18>
 800409e:	2301      	movs	r3, #1
 80040a0:	e000      	b.n	80040a4 <LL_ADC_IsDisableOngoing+0x1a>
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040c4:	f043 0204 	orr.w	r2, r3, #4
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d101      	bne.n	80040f0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80040ec:	2301      	movs	r3, #1
 80040ee:	e000      	b.n	80040f2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80040fe:	b480      	push	{r7}
 8004100:	b083      	sub	sp, #12
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b08      	cmp	r3, #8
 8004110:	d101      	bne.n	8004116 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004112:	2301      	movs	r3, #1
 8004114:	e000      	b.n	8004118 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004124:	b590      	push	{r4, r7, lr}
 8004126:	b089      	sub	sp, #36	; 0x24
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800412c:	2300      	movs	r3, #0
 800412e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004130:	2300      	movs	r3, #0
 8004132:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e136      	b.n	80043ac <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004148:	2b00      	cmp	r3, #0
 800414a:	d109      	bne.n	8004160 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7ff fab9 	bl	80036c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4618      	mov	r0, r3
 8004166:	f7ff ff19 	bl	8003f9c <LL_ADC_IsDeepPowerDownEnabled>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d004      	beq.n	800417a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff feff 	bl	8003f78 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff ff34 	bl	8003fec <LL_ADC_IsInternalRegulatorEnabled>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d115      	bne.n	80041b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f7ff ff18 	bl	8003fc4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004194:	4b87      	ldr	r3, [pc, #540]	; (80043b4 <HAL_ADC_Init+0x290>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	099b      	lsrs	r3, r3, #6
 800419a:	4a87      	ldr	r2, [pc, #540]	; (80043b8 <HAL_ADC_Init+0x294>)
 800419c:	fba2 2303 	umull	r2, r3, r2, r3
 80041a0:	099b      	lsrs	r3, r3, #6
 80041a2:	3301      	adds	r3, #1
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80041a8:	e002      	b.n	80041b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	3b01      	subs	r3, #1
 80041ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1f9      	bne.n	80041aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff ff16 	bl	8003fec <LL_ADC_IsInternalRegulatorEnabled>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10d      	bne.n	80041e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ca:	f043 0210 	orr.w	r2, r3, #16
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d6:	f043 0201 	orr.w	r2, r3, #1
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff ff76 	bl	80040d8 <LL_ADC_REG_IsConversionOngoing>
 80041ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f2:	f003 0310 	and.w	r3, r3, #16
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f040 80cf 	bne.w	800439a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f040 80cb 	bne.w	800439a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004208:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800420c:	f043 0202 	orr.w	r2, r3, #2
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff ff23 	bl	8004064 <LL_ADC_IsEnabled>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d115      	bne.n	8004250 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004224:	4865      	ldr	r0, [pc, #404]	; (80043bc <HAL_ADC_Init+0x298>)
 8004226:	f7ff ff1d 	bl	8004064 <LL_ADC_IsEnabled>
 800422a:	4604      	mov	r4, r0
 800422c:	4864      	ldr	r0, [pc, #400]	; (80043c0 <HAL_ADC_Init+0x29c>)
 800422e:	f7ff ff19 	bl	8004064 <LL_ADC_IsEnabled>
 8004232:	4603      	mov	r3, r0
 8004234:	431c      	orrs	r4, r3
 8004236:	4863      	ldr	r0, [pc, #396]	; (80043c4 <HAL_ADC_Init+0x2a0>)
 8004238:	f7ff ff14 	bl	8004064 <LL_ADC_IsEnabled>
 800423c:	4603      	mov	r3, r0
 800423e:	4323      	orrs	r3, r4
 8004240:	2b00      	cmp	r3, #0
 8004242:	d105      	bne.n	8004250 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	4619      	mov	r1, r3
 800424a:	485f      	ldr	r0, [pc, #380]	; (80043c8 <HAL_ADC_Init+0x2a4>)
 800424c:	f7ff fd6e 	bl	8003d2c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	7e5b      	ldrb	r3, [r3, #25]
 8004254:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800425a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004260:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004266:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800426e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004270:	4313      	orrs	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 3020 	ldrb.w	r3, [r3, #32]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d106      	bne.n	800428c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	3b01      	subs	r3, #1
 8004284:	045b      	lsls	r3, r3, #17
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	4313      	orrs	r3, r2
 800428a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004290:	2b00      	cmp	r3, #0
 8004292:	d009      	beq.n	80042a8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004298:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	4b47      	ldr	r3, [pc, #284]	; (80043cc <HAL_ADC_Init+0x2a8>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6812      	ldr	r2, [r2, #0]
 80042b6:	69b9      	ldr	r1, [r7, #24]
 80042b8:	430b      	orrs	r3, r1
 80042ba:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff ff09 	bl	80040d8 <LL_ADC_REG_IsConversionOngoing>
 80042c6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff ff16 	bl	80040fe <LL_ADC_INJ_IsConversionOngoing>
 80042d2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d13d      	bne.n	8004356 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d13a      	bne.n	8004356 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80042e4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042ec:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80042ee:	4313      	orrs	r3, r2
 80042f0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042fc:	f023 0302 	bic.w	r3, r3, #2
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	69b9      	ldr	r1, [r7, #24]
 8004306:	430b      	orrs	r3, r1
 8004308:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004310:	2b01      	cmp	r3, #1
 8004312:	d118      	bne.n	8004346 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800431e:	f023 0304 	bic.w	r3, r3, #4
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800432a:	4311      	orrs	r1, r2
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004330:	4311      	orrs	r1, r2
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004336:	430a      	orrs	r2, r1
 8004338:	431a      	orrs	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 0201 	orr.w	r2, r2, #1
 8004342:	611a      	str	r2, [r3, #16]
 8004344:	e007      	b.n	8004356 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	691a      	ldr	r2, [r3, #16]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0201 	bic.w	r2, r2, #1
 8004354:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d10c      	bne.n	8004378 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004364:	f023 010f 	bic.w	r1, r3, #15
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	1e5a      	subs	r2, r3, #1
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	631a      	str	r2, [r3, #48]	; 0x30
 8004376:	e007      	b.n	8004388 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 020f 	bic.w	r2, r2, #15
 8004386:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438c:	f023 0303 	bic.w	r3, r3, #3
 8004390:	f043 0201 	orr.w	r2, r3, #1
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	655a      	str	r2, [r3, #84]	; 0x54
 8004398:	e007      	b.n	80043aa <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439e:	f043 0210 	orr.w	r2, r3, #16
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80043aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3724      	adds	r7, #36	; 0x24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd90      	pop	{r4, r7, pc}
 80043b4:	20000008 	.word	0x20000008
 80043b8:	053e2d63 	.word	0x053e2d63
 80043bc:	50040000 	.word	0x50040000
 80043c0:	50040100 	.word	0x50040100
 80043c4:	50040200 	.word	0x50040200
 80043c8:	50040300 	.word	0x50040300
 80043cc:	fff0c007 	.word	0xfff0c007

080043d0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043dc:	4853      	ldr	r0, [pc, #332]	; (800452c <HAL_ADC_Start_DMA+0x15c>)
 80043de:	f7ff fdbd 	bl	8003f5c <LL_ADC_GetMultimode>
 80043e2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff fe75 	bl	80040d8 <LL_ADC_REG_IsConversionOngoing>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f040 8093 	bne.w	800451c <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d101      	bne.n	8004404 <HAL_ADC_Start_DMA+0x34>
 8004400:	2302      	movs	r3, #2
 8004402:	e08e      	b.n	8004522 <HAL_ADC_Start_DMA+0x152>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a47      	ldr	r2, [pc, #284]	; (8004530 <HAL_ADC_Start_DMA+0x160>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d008      	beq.n	8004428 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d005      	beq.n	8004428 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	2b05      	cmp	r3, #5
 8004420:	d002      	beq.n	8004428 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	2b09      	cmp	r3, #9
 8004426:	d172      	bne.n	800450e <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 fc9b 	bl	8004d64 <ADC_Enable>
 800442e:	4603      	mov	r3, r0
 8004430:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004432:	7dfb      	ldrb	r3, [r7, #23]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d165      	bne.n	8004504 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004440:	f023 0301 	bic.w	r3, r3, #1
 8004444:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a38      	ldr	r2, [pc, #224]	; (8004534 <HAL_ADC_Start_DMA+0x164>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d002      	beq.n	800445c <HAL_ADC_Start_DMA+0x8c>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	e000      	b.n	800445e <HAL_ADC_Start_DMA+0x8e>
 800445c:	4b36      	ldr	r3, [pc, #216]	; (8004538 <HAL_ADC_Start_DMA+0x168>)
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	6812      	ldr	r2, [r2, #0]
 8004462:	4293      	cmp	r3, r2
 8004464:	d002      	beq.n	800446c <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d105      	bne.n	8004478 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004470:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d006      	beq.n	8004492 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004488:	f023 0206 	bic.w	r2, r3, #6
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	659a      	str	r2, [r3, #88]	; 0x58
 8004490:	e002      	b.n	8004498 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800449c:	4a27      	ldr	r2, [pc, #156]	; (800453c <HAL_ADC_Start_DMA+0x16c>)
 800449e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a4:	4a26      	ldr	r2, [pc, #152]	; (8004540 <HAL_ADC_Start_DMA+0x170>)
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ac:	4a25      	ldr	r2, [pc, #148]	; (8004544 <HAL_ADC_Start_DMA+0x174>)
 80044ae:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	221c      	movs	r2, #28
 80044b6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0210 	orr.w	r2, r2, #16
 80044ce:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0201 	orr.w	r2, r2, #1
 80044de:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3340      	adds	r3, #64	; 0x40
 80044ea:	4619      	mov	r1, r3
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f001 f8de 	bl	80056b0 <HAL_DMA_Start_IT>
 80044f4:	4603      	mov	r3, r0
 80044f6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7ff fdd7 	bl	80040b0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004502:	e00d      	b.n	8004520 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800450c:	e008      	b.n	8004520 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800451a:	e001      	b.n	8004520 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800451c:	2302      	movs	r3, #2
 800451e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004520:	7dfb      	ldrb	r3, [r7, #23]
}
 8004522:	4618      	mov	r0, r3
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	50040300 	.word	0x50040300
 8004530:	50040200 	.word	0x50040200
 8004534:	50040100 	.word	0x50040100
 8004538:	50040000 	.word	0x50040000
 800453c:	08004f2f 	.word	0x08004f2f
 8004540:	08005007 	.word	0x08005007
 8004544:	08005023 	.word	0x08005023

08004548 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b0b6      	sub	sp, #216	; 0xd8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004594:	2300      	movs	r3, #0
 8004596:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d101      	bne.n	80045a6 <HAL_ADC_ConfigChannel+0x22>
 80045a2:	2302      	movs	r3, #2
 80045a4:	e3c7      	b.n	8004d36 <HAL_ADC_ConfigChannel+0x7b2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7ff fd90 	bl	80040d8 <LL_ADC_REG_IsConversionOngoing>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f040 83a8 	bne.w	8004d10 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2b05      	cmp	r3, #5
 80045c6:	d824      	bhi.n	8004612 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	3b02      	subs	r3, #2
 80045ce:	2b03      	cmp	r3, #3
 80045d0:	d81b      	bhi.n	800460a <HAL_ADC_ConfigChannel+0x86>
 80045d2:	a201      	add	r2, pc, #4	; (adr r2, 80045d8 <HAL_ADC_ConfigChannel+0x54>)
 80045d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d8:	080045e9 	.word	0x080045e9
 80045dc:	080045f1 	.word	0x080045f1
 80045e0:	080045f9 	.word	0x080045f9
 80045e4:	08004601 	.word	0x08004601
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	220c      	movs	r2, #12
 80045ec:	605a      	str	r2, [r3, #4]
          break;
 80045ee:	e011      	b.n	8004614 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	2212      	movs	r2, #18
 80045f4:	605a      	str	r2, [r3, #4]
          break;
 80045f6:	e00d      	b.n	8004614 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	2218      	movs	r2, #24
 80045fc:	605a      	str	r2, [r3, #4]
          break;
 80045fe:	e009      	b.n	8004614 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004606:	605a      	str	r2, [r3, #4]
          break;
 8004608:	e004      	b.n	8004614 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2206      	movs	r2, #6
 800460e:	605a      	str	r2, [r3, #4]
          break;
 8004610:	e000      	b.n	8004614 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004612:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6818      	ldr	r0, [r3, #0]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	6859      	ldr	r1, [r3, #4]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	461a      	mov	r2, r3
 8004622:	f7ff fc1f 	bl	8003e64 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4618      	mov	r0, r3
 800462c:	f7ff fd54 	bl	80040d8 <LL_ADC_REG_IsConversionOngoing>
 8004630:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4618      	mov	r0, r3
 800463a:	f7ff fd60 	bl	80040fe <LL_ADC_INJ_IsConversionOngoing>
 800463e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004642:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004646:	2b00      	cmp	r3, #0
 8004648:	f040 81a6 	bne.w	8004998 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800464c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004650:	2b00      	cmp	r3, #0
 8004652:	f040 81a1 	bne.w	8004998 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6818      	ldr	r0, [r3, #0]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	6819      	ldr	r1, [r3, #0]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	461a      	mov	r2, r3
 8004664:	f7ff fc2a 	bl	8003ebc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	695a      	ldr	r2, [r3, #20]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	08db      	lsrs	r3, r3, #3
 8004674:	f003 0303 	and.w	r3, r3, #3
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b04      	cmp	r3, #4
 8004688:	d00a      	beq.n	80046a0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6818      	ldr	r0, [r3, #0]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	6919      	ldr	r1, [r3, #16]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800469a:	f7ff fb7b 	bl	8003d94 <LL_ADC_SetOffset>
 800469e:	e17b      	b.n	8004998 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2100      	movs	r1, #0
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff fb98 	bl	8003ddc <LL_ADC_GetOffsetChannel>
 80046ac:	4603      	mov	r3, r0
 80046ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10a      	bne.n	80046cc <HAL_ADC_ConfigChannel+0x148>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2100      	movs	r1, #0
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff fb8d 	bl	8003ddc <LL_ADC_GetOffsetChannel>
 80046c2:	4603      	mov	r3, r0
 80046c4:	0e9b      	lsrs	r3, r3, #26
 80046c6:	f003 021f 	and.w	r2, r3, #31
 80046ca:	e01e      	b.n	800470a <HAL_ADC_ConfigChannel+0x186>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2100      	movs	r1, #0
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff fb82 	bl	8003ddc <LL_ADC_GetOffsetChannel>
 80046d8:	4603      	mov	r3, r0
 80046da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80046e2:	fa93 f3a3 	rbit	r3, r3
 80046e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80046ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80046f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80046fa:	2320      	movs	r3, #32
 80046fc:	e004      	b.n	8004708 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80046fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004702:	fab3 f383 	clz	r3, r3
 8004706:	b2db      	uxtb	r3, r3
 8004708:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004712:	2b00      	cmp	r3, #0
 8004714:	d105      	bne.n	8004722 <HAL_ADC_ConfigChannel+0x19e>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	0e9b      	lsrs	r3, r3, #26
 800471c:	f003 031f 	and.w	r3, r3, #31
 8004720:	e018      	b.n	8004754 <HAL_ADC_ConfigChannel+0x1d0>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800472e:	fa93 f3a3 	rbit	r3, r3
 8004732:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004736:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800473a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800473e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8004746:	2320      	movs	r3, #32
 8004748:	e004      	b.n	8004754 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800474a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800474e:	fab3 f383 	clz	r3, r3
 8004752:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004754:	429a      	cmp	r2, r3
 8004756:	d106      	bne.n	8004766 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2200      	movs	r2, #0
 800475e:	2100      	movs	r1, #0
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff fb51 	bl	8003e08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2101      	movs	r1, #1
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff fb35 	bl	8003ddc <LL_ADC_GetOffsetChannel>
 8004772:	4603      	mov	r3, r0
 8004774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10a      	bne.n	8004792 <HAL_ADC_ConfigChannel+0x20e>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2101      	movs	r1, #1
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff fb2a 	bl	8003ddc <LL_ADC_GetOffsetChannel>
 8004788:	4603      	mov	r3, r0
 800478a:	0e9b      	lsrs	r3, r3, #26
 800478c:	f003 021f 	and.w	r2, r3, #31
 8004790:	e01e      	b.n	80047d0 <HAL_ADC_ConfigChannel+0x24c>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2101      	movs	r1, #1
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff fb1f 	bl	8003ddc <LL_ADC_GetOffsetChannel>
 800479e:	4603      	mov	r3, r0
 80047a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80047a8:	fa93 f3a3 	rbit	r3, r3
 80047ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80047b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80047b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80047c0:	2320      	movs	r3, #32
 80047c2:	e004      	b.n	80047ce <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80047c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80047c8:	fab3 f383 	clz	r3, r3
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d105      	bne.n	80047e8 <HAL_ADC_ConfigChannel+0x264>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	0e9b      	lsrs	r3, r3, #26
 80047e2:	f003 031f 	and.w	r3, r3, #31
 80047e6:	e018      	b.n	800481a <HAL_ADC_ConfigChannel+0x296>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047f4:	fa93 f3a3 	rbit	r3, r3
 80047f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80047fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004800:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004804:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800480c:	2320      	movs	r3, #32
 800480e:	e004      	b.n	800481a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004810:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004814:	fab3 f383 	clz	r3, r3
 8004818:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800481a:	429a      	cmp	r2, r3
 800481c:	d106      	bne.n	800482c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2200      	movs	r2, #0
 8004824:	2101      	movs	r1, #1
 8004826:	4618      	mov	r0, r3
 8004828:	f7ff faee 	bl	8003e08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2102      	movs	r1, #2
 8004832:	4618      	mov	r0, r3
 8004834:	f7ff fad2 	bl	8003ddc <LL_ADC_GetOffsetChannel>
 8004838:	4603      	mov	r3, r0
 800483a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10a      	bne.n	8004858 <HAL_ADC_ConfigChannel+0x2d4>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2102      	movs	r1, #2
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff fac7 	bl	8003ddc <LL_ADC_GetOffsetChannel>
 800484e:	4603      	mov	r3, r0
 8004850:	0e9b      	lsrs	r3, r3, #26
 8004852:	f003 021f 	and.w	r2, r3, #31
 8004856:	e01e      	b.n	8004896 <HAL_ADC_ConfigChannel+0x312>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2102      	movs	r1, #2
 800485e:	4618      	mov	r0, r3
 8004860:	f7ff fabc 	bl	8003ddc <LL_ADC_GetOffsetChannel>
 8004864:	4603      	mov	r3, r0
 8004866:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800486a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800486e:	fa93 f3a3 	rbit	r3, r3
 8004872:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004876:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800487a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800487e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8004886:	2320      	movs	r3, #32
 8004888:	e004      	b.n	8004894 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800488a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800488e:	fab3 f383 	clz	r3, r3
 8004892:	b2db      	uxtb	r3, r3
 8004894:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d105      	bne.n	80048ae <HAL_ADC_ConfigChannel+0x32a>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	0e9b      	lsrs	r3, r3, #26
 80048a8:	f003 031f 	and.w	r3, r3, #31
 80048ac:	e016      	b.n	80048dc <HAL_ADC_ConfigChannel+0x358>
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048ba:	fa93 f3a3 	rbit	r3, r3
 80048be:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80048c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80048c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80048ce:	2320      	movs	r3, #32
 80048d0:	e004      	b.n	80048dc <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80048d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048d6:	fab3 f383 	clz	r3, r3
 80048da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80048dc:	429a      	cmp	r2, r3
 80048de:	d106      	bne.n	80048ee <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2200      	movs	r2, #0
 80048e6:	2102      	movs	r1, #2
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7ff fa8d 	bl	8003e08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2103      	movs	r1, #3
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff fa71 	bl	8003ddc <LL_ADC_GetOffsetChannel>
 80048fa:	4603      	mov	r3, r0
 80048fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10a      	bne.n	800491a <HAL_ADC_ConfigChannel+0x396>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2103      	movs	r1, #3
 800490a:	4618      	mov	r0, r3
 800490c:	f7ff fa66 	bl	8003ddc <LL_ADC_GetOffsetChannel>
 8004910:	4603      	mov	r3, r0
 8004912:	0e9b      	lsrs	r3, r3, #26
 8004914:	f003 021f 	and.w	r2, r3, #31
 8004918:	e017      	b.n	800494a <HAL_ADC_ConfigChannel+0x3c6>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2103      	movs	r1, #3
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff fa5b 	bl	8003ddc <LL_ADC_GetOffsetChannel>
 8004926:	4603      	mov	r3, r0
 8004928:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800492c:	fa93 f3a3 	rbit	r3, r3
 8004930:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004932:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004934:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004936:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800493c:	2320      	movs	r3, #32
 800493e:	e003      	b.n	8004948 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004940:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004942:	fab3 f383 	clz	r3, r3
 8004946:	b2db      	uxtb	r3, r3
 8004948:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004952:	2b00      	cmp	r3, #0
 8004954:	d105      	bne.n	8004962 <HAL_ADC_ConfigChannel+0x3de>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	0e9b      	lsrs	r3, r3, #26
 800495c:	f003 031f 	and.w	r3, r3, #31
 8004960:	e011      	b.n	8004986 <HAL_ADC_ConfigChannel+0x402>
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004968:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800496a:	fa93 f3a3 	rbit	r3, r3
 800496e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004972:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800497a:	2320      	movs	r3, #32
 800497c:	e003      	b.n	8004986 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800497e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004980:	fab3 f383 	clz	r3, r3
 8004984:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004986:	429a      	cmp	r2, r3
 8004988:	d106      	bne.n	8004998 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2200      	movs	r2, #0
 8004990:	2103      	movs	r1, #3
 8004992:	4618      	mov	r0, r3
 8004994:	f7ff fa38 	bl	8003e08 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4618      	mov	r0, r3
 800499e:	f7ff fb61 	bl	8004064 <LL_ADC_IsEnabled>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f040 813f 	bne.w	8004c28 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6818      	ldr	r0, [r3, #0]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	6819      	ldr	r1, [r3, #0]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	461a      	mov	r2, r3
 80049b8:	f7ff faac 	bl	8003f14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	4a8e      	ldr	r2, [pc, #568]	; (8004bfc <HAL_ADC_ConfigChannel+0x678>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	f040 8130 	bne.w	8004c28 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10b      	bne.n	80049f0 <HAL_ADC_ConfigChannel+0x46c>
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	0e9b      	lsrs	r3, r3, #26
 80049de:	3301      	adds	r3, #1
 80049e0:	f003 031f 	and.w	r3, r3, #31
 80049e4:	2b09      	cmp	r3, #9
 80049e6:	bf94      	ite	ls
 80049e8:	2301      	movls	r3, #1
 80049ea:	2300      	movhi	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	e019      	b.n	8004a24 <HAL_ADC_ConfigChannel+0x4a0>
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049f8:	fa93 f3a3 	rbit	r3, r3
 80049fc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80049fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a00:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004a02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d101      	bne.n	8004a0c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004a08:	2320      	movs	r3, #32
 8004a0a:	e003      	b.n	8004a14 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004a0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a0e:	fab3 f383 	clz	r3, r3
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	3301      	adds	r3, #1
 8004a16:	f003 031f 	and.w	r3, r3, #31
 8004a1a:	2b09      	cmp	r3, #9
 8004a1c:	bf94      	ite	ls
 8004a1e:	2301      	movls	r3, #1
 8004a20:	2300      	movhi	r3, #0
 8004a22:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d079      	beq.n	8004b1c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d107      	bne.n	8004a44 <HAL_ADC_ConfigChannel+0x4c0>
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	0e9b      	lsrs	r3, r3, #26
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	069b      	lsls	r3, r3, #26
 8004a3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a42:	e015      	b.n	8004a70 <HAL_ADC_ConfigChannel+0x4ec>
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a4c:	fa93 f3a3 	rbit	r3, r3
 8004a50:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a54:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004a5c:	2320      	movs	r3, #32
 8004a5e:	e003      	b.n	8004a68 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a62:	fab3 f383 	clz	r3, r3
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	3301      	adds	r3, #1
 8004a6a:	069b      	lsls	r3, r3, #26
 8004a6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d109      	bne.n	8004a90 <HAL_ADC_ConfigChannel+0x50c>
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	0e9b      	lsrs	r3, r3, #26
 8004a82:	3301      	adds	r3, #1
 8004a84:	f003 031f 	and.w	r3, r3, #31
 8004a88:	2101      	movs	r1, #1
 8004a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8e:	e017      	b.n	8004ac0 <HAL_ADC_ConfigChannel+0x53c>
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a98:	fa93 f3a3 	rbit	r3, r3
 8004a9c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aa0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004aa8:	2320      	movs	r3, #32
 8004aaa:	e003      	b.n	8004ab4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aae:	fab3 f383 	clz	r3, r3
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	f003 031f 	and.w	r3, r3, #31
 8004aba:	2101      	movs	r1, #1
 8004abc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac0:	ea42 0103 	orr.w	r1, r2, r3
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10a      	bne.n	8004ae6 <HAL_ADC_ConfigChannel+0x562>
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	0e9b      	lsrs	r3, r3, #26
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	f003 021f 	and.w	r2, r3, #31
 8004adc:	4613      	mov	r3, r2
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	4413      	add	r3, r2
 8004ae2:	051b      	lsls	r3, r3, #20
 8004ae4:	e018      	b.n	8004b18 <HAL_ADC_ConfigChannel+0x594>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aee:	fa93 f3a3 	rbit	r3, r3
 8004af2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004afe:	2320      	movs	r3, #32
 8004b00:	e003      	b.n	8004b0a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b04:	fab3 f383 	clz	r3, r3
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	f003 021f 	and.w	r2, r3, #31
 8004b10:	4613      	mov	r3, r2
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	4413      	add	r3, r2
 8004b16:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	e080      	b.n	8004c1e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d107      	bne.n	8004b38 <HAL_ADC_ConfigChannel+0x5b4>
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	0e9b      	lsrs	r3, r3, #26
 8004b2e:	3301      	adds	r3, #1
 8004b30:	069b      	lsls	r3, r3, #26
 8004b32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b36:	e015      	b.n	8004b64 <HAL_ADC_ConfigChannel+0x5e0>
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b40:	fa93 f3a3 	rbit	r3, r3
 8004b44:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b48:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004b50:	2320      	movs	r3, #32
 8004b52:	e003      	b.n	8004b5c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b56:	fab3 f383 	clz	r3, r3
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	069b      	lsls	r3, r3, #26
 8004b60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d109      	bne.n	8004b84 <HAL_ADC_ConfigChannel+0x600>
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	0e9b      	lsrs	r3, r3, #26
 8004b76:	3301      	adds	r3, #1
 8004b78:	f003 031f 	and.w	r3, r3, #31
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b82:	e017      	b.n	8004bb4 <HAL_ADC_ConfigChannel+0x630>
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
 8004b8c:	fa93 f3a3 	rbit	r3, r3
 8004b90:	61fb      	str	r3, [r7, #28]
  return result;
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d101      	bne.n	8004ba0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004b9c:	2320      	movs	r3, #32
 8004b9e:	e003      	b.n	8004ba8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	fab3 f383 	clz	r3, r3
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	3301      	adds	r3, #1
 8004baa:	f003 031f 	and.w	r3, r3, #31
 8004bae:	2101      	movs	r1, #1
 8004bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb4:	ea42 0103 	orr.w	r1, r2, r3
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10d      	bne.n	8004be0 <HAL_ADC_ConfigChannel+0x65c>
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	0e9b      	lsrs	r3, r3, #26
 8004bca:	3301      	adds	r3, #1
 8004bcc:	f003 021f 	and.w	r2, r3, #31
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	4413      	add	r3, r2
 8004bd6:	3b1e      	subs	r3, #30
 8004bd8:	051b      	lsls	r3, r3, #20
 8004bda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004bde:	e01d      	b.n	8004c1c <HAL_ADC_ConfigChannel+0x698>
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	fa93 f3a3 	rbit	r3, r3
 8004bec:	613b      	str	r3, [r7, #16]
  return result;
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d103      	bne.n	8004c00 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004bf8:	2320      	movs	r3, #32
 8004bfa:	e005      	b.n	8004c08 <HAL_ADC_ConfigChannel+0x684>
 8004bfc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	fab3 f383 	clz	r3, r3
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	3301      	adds	r3, #1
 8004c0a:	f003 021f 	and.w	r2, r3, #31
 8004c0e:	4613      	mov	r3, r2
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	4413      	add	r3, r2
 8004c14:	3b1e      	subs	r3, #30
 8004c16:	051b      	lsls	r3, r3, #20
 8004c18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c1c:	430b      	orrs	r3, r1
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	6892      	ldr	r2, [r2, #8]
 8004c22:	4619      	mov	r1, r3
 8004c24:	f7ff f94a 	bl	8003ebc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	4b44      	ldr	r3, [pc, #272]	; (8004d40 <HAL_ADC_ConfigChannel+0x7bc>)
 8004c2e:	4013      	ands	r3, r2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d07a      	beq.n	8004d2a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c34:	4843      	ldr	r0, [pc, #268]	; (8004d44 <HAL_ADC_ConfigChannel+0x7c0>)
 8004c36:	f7ff f89f 	bl	8003d78 <LL_ADC_GetCommonPathInternalCh>
 8004c3a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a41      	ldr	r2, [pc, #260]	; (8004d48 <HAL_ADC_ConfigChannel+0x7c4>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d12c      	bne.n	8004ca2 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004c48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d126      	bne.n	8004ca2 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a3c      	ldr	r2, [pc, #240]	; (8004d4c <HAL_ADC_ConfigChannel+0x7c8>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d004      	beq.n	8004c68 <HAL_ADC_ConfigChannel+0x6e4>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a3b      	ldr	r2, [pc, #236]	; (8004d50 <HAL_ADC_ConfigChannel+0x7cc>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d15d      	bne.n	8004d24 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c70:	4619      	mov	r1, r3
 8004c72:	4834      	ldr	r0, [pc, #208]	; (8004d44 <HAL_ADC_ConfigChannel+0x7c0>)
 8004c74:	f7ff f86d 	bl	8003d52 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c78:	4b36      	ldr	r3, [pc, #216]	; (8004d54 <HAL_ADC_ConfigChannel+0x7d0>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	099b      	lsrs	r3, r3, #6
 8004c7e:	4a36      	ldr	r2, [pc, #216]	; (8004d58 <HAL_ADC_ConfigChannel+0x7d4>)
 8004c80:	fba2 2303 	umull	r2, r3, r2, r3
 8004c84:	099b      	lsrs	r3, r3, #6
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	4613      	mov	r3, r2
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004c92:	e002      	b.n	8004c9a <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1f9      	bne.n	8004c94 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ca0:	e040      	b.n	8004d24 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a2d      	ldr	r2, [pc, #180]	; (8004d5c <HAL_ADC_ConfigChannel+0x7d8>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d118      	bne.n	8004cde <HAL_ADC_ConfigChannel+0x75a>
 8004cac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004cb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d112      	bne.n	8004cde <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a23      	ldr	r2, [pc, #140]	; (8004d4c <HAL_ADC_ConfigChannel+0x7c8>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d004      	beq.n	8004ccc <HAL_ADC_ConfigChannel+0x748>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a22      	ldr	r2, [pc, #136]	; (8004d50 <HAL_ADC_ConfigChannel+0x7cc>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d12d      	bne.n	8004d28 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ccc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004cd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	481b      	ldr	r0, [pc, #108]	; (8004d44 <HAL_ADC_ConfigChannel+0x7c0>)
 8004cd8:	f7ff f83b 	bl	8003d52 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004cdc:	e024      	b.n	8004d28 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a1f      	ldr	r2, [pc, #124]	; (8004d60 <HAL_ADC_ConfigChannel+0x7dc>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d120      	bne.n	8004d2a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ce8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004cec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d11a      	bne.n	8004d2a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a14      	ldr	r2, [pc, #80]	; (8004d4c <HAL_ADC_ConfigChannel+0x7c8>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d115      	bne.n	8004d2a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d06:	4619      	mov	r1, r3
 8004d08:	480e      	ldr	r0, [pc, #56]	; (8004d44 <HAL_ADC_ConfigChannel+0x7c0>)
 8004d0a:	f7ff f822 	bl	8003d52 <LL_ADC_SetCommonPathInternalCh>
 8004d0e:	e00c      	b.n	8004d2a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d14:	f043 0220 	orr.w	r2, r3, #32
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004d22:	e002      	b.n	8004d2a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d24:	bf00      	nop
 8004d26:	e000      	b.n	8004d2a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d28:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004d32:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	37d8      	adds	r7, #216	; 0xd8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	80080000 	.word	0x80080000
 8004d44:	50040300 	.word	0x50040300
 8004d48:	c7520000 	.word	0xc7520000
 8004d4c:	50040000 	.word	0x50040000
 8004d50:	50040200 	.word	0x50040200
 8004d54:	20000008 	.word	0x20000008
 8004d58:	053e2d63 	.word	0x053e2d63
 8004d5c:	cb840000 	.word	0xcb840000
 8004d60:	80000001 	.word	0x80000001

08004d64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7ff f975 	bl	8004064 <LL_ADC_IsEnabled>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d169      	bne.n	8004e54 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689a      	ldr	r2, [r3, #8]
 8004d86:	4b36      	ldr	r3, [pc, #216]	; (8004e60 <ADC_Enable+0xfc>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00d      	beq.n	8004daa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d92:	f043 0210 	orr.w	r2, r3, #16
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d9e:	f043 0201 	orr.w	r2, r3, #1
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e055      	b.n	8004e56 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff f930 	bl	8004014 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004db4:	482b      	ldr	r0, [pc, #172]	; (8004e64 <ADC_Enable+0x100>)
 8004db6:	f7fe ffdf 	bl	8003d78 <LL_ADC_GetCommonPathInternalCh>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d013      	beq.n	8004dec <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004dc4:	4b28      	ldr	r3, [pc, #160]	; (8004e68 <ADC_Enable+0x104>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	099b      	lsrs	r3, r3, #6
 8004dca:	4a28      	ldr	r2, [pc, #160]	; (8004e6c <ADC_Enable+0x108>)
 8004dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd0:	099b      	lsrs	r3, r3, #6
 8004dd2:	1c5a      	adds	r2, r3, #1
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	4413      	add	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004dde:	e002      	b.n	8004de6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1f9      	bne.n	8004de0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004dec:	f7fe ff6e 	bl	8003ccc <HAL_GetTick>
 8004df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004df2:	e028      	b.n	8004e46 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7ff f933 	bl	8004064 <LL_ADC_IsEnabled>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d104      	bne.n	8004e0e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7ff f903 	bl	8004014 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004e0e:	f7fe ff5d 	bl	8003ccc <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d914      	bls.n	8004e46 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d00d      	beq.n	8004e46 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2e:	f043 0210 	orr.w	r2, r3, #16
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e3a:	f043 0201 	orr.w	r2, r3, #1
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e007      	b.n	8004e56 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d1cf      	bne.n	8004df4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	8000003f 	.word	0x8000003f
 8004e64:	50040300 	.word	0x50040300
 8004e68:	20000008 	.word	0x20000008
 8004e6c:	053e2d63 	.word	0x053e2d63

08004e70 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7ff f904 	bl	800408a <LL_ADC_IsDisableOngoing>
 8004e82:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7ff f8eb 	bl	8004064 <LL_ADC_IsEnabled>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d047      	beq.n	8004f24 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d144      	bne.n	8004f24 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f003 030d 	and.w	r3, r3, #13
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d10c      	bne.n	8004ec2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7ff f8c5 	bl	800403c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2203      	movs	r2, #3
 8004eb8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004eba:	f7fe ff07 	bl	8003ccc <HAL_GetTick>
 8004ebe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ec0:	e029      	b.n	8004f16 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec6:	f043 0210 	orr.w	r2, r3, #16
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed2:	f043 0201 	orr.w	r2, r3, #1
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e023      	b.n	8004f26 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004ede:	f7fe fef5 	bl	8003ccc <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d914      	bls.n	8004f16 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00d      	beq.n	8004f16 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004efe:	f043 0210 	orr.w	r2, r3, #16
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0a:	f043 0201 	orr.w	r2, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e007      	b.n	8004f26 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1dc      	bne.n	8004ede <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b084      	sub	sp, #16
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d14b      	bne.n	8004fe0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d021      	beq.n	8004fa6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fe ff69 	bl	8003e3e <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d032      	beq.n	8004fd8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d12b      	bne.n	8004fd8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d11f      	bne.n	8004fd8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9c:	f043 0201 	orr.w	r2, r3, #1
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	655a      	str	r2, [r3, #84]	; 0x54
 8004fa4:	e018      	b.n	8004fd8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d111      	bne.n	8004fd8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d105      	bne.n	8004fd8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd0:	f043 0201 	orr.w	r2, r3, #1
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f7ff fab5 	bl	8004548 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004fde:	e00e      	b.n	8004ffe <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe4:	f003 0310 	and.w	r3, r3, #16
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d003      	beq.n	8004ff4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f7ff fabf 	bl	8004570 <HAL_ADC_ErrorCallback>
}
 8004ff2:	e004      	b.n	8004ffe <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	4798      	blx	r3
}
 8004ffe:	bf00      	nop
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005012:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f7ff faa1 	bl	800455c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800501a:	bf00      	nop
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b084      	sub	sp, #16
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005034:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005040:	f043 0204 	orr.w	r2, r3, #4
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f7ff fa91 	bl	8004570 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800504e:	bf00      	nop
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <LL_ADC_IsEnabled>:
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b01      	cmp	r3, #1
 8005068:	d101      	bne.n	800506e <LL_ADC_IsEnabled+0x18>
 800506a:	2301      	movs	r3, #1
 800506c:	e000      	b.n	8005070 <LL_ADC_IsEnabled+0x1a>
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <LL_ADC_StartCalibration>:
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800508e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005092:	683a      	ldr	r2, [r7, #0]
 8005094:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005098:	4313      	orrs	r3, r2
 800509a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	609a      	str	r2, [r3, #8]
}
 80050a2:	bf00      	nop
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <LL_ADC_IsCalibrationOnGoing>:
{
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050c2:	d101      	bne.n	80050c8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80050c4:	2301      	movs	r3, #1
 80050c6:	e000      	b.n	80050ca <LL_ADC_IsCalibrationOnGoing+0x1c>
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <LL_ADC_REG_IsConversionOngoing>:
{
 80050d6:	b480      	push	{r7}
 80050d8:	b083      	sub	sp, #12
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 0304 	and.w	r3, r3, #4
 80050e6:	2b04      	cmp	r3, #4
 80050e8:	d101      	bne.n	80050ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80050ea:	2301      	movs	r3, #1
 80050ec:	e000      	b.n	80050f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005106:	2300      	movs	r3, #0
 8005108:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005110:	2b01      	cmp	r3, #1
 8005112:	d101      	bne.n	8005118 <HAL_ADCEx_Calibration_Start+0x1c>
 8005114:	2302      	movs	r3, #2
 8005116:	e04d      	b.n	80051b4 <HAL_ADCEx_Calibration_Start+0xb8>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7ff fea5 	bl	8004e70 <ADC_Disable>
 8005126:	4603      	mov	r3, r0
 8005128:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800512a:	7bfb      	ldrb	r3, [r7, #15]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d136      	bne.n	800519e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005134:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005138:	f023 0302 	bic.w	r3, r3, #2
 800513c:	f043 0202 	orr.w	r2, r3, #2
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6839      	ldr	r1, [r7, #0]
 800514a:	4618      	mov	r0, r3
 800514c:	f7ff ff96 	bl	800507c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005150:	e014      	b.n	800517c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	3301      	adds	r3, #1
 8005156:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800515e:	d30d      	bcc.n	800517c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005164:	f023 0312 	bic.w	r3, r3, #18
 8005168:	f043 0210 	orr.w	r2, r3, #16
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e01b      	b.n	80051b4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4618      	mov	r0, r3
 8005182:	f7ff ff94 	bl	80050ae <LL_ADC_IsCalibrationOnGoing>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1e2      	bne.n	8005152 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005190:	f023 0303 	bic.w	r3, r3, #3
 8005194:	f043 0201 	orr.w	r2, r3, #1
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	655a      	str	r2, [r3, #84]	; 0x54
 800519c:	e005      	b.n	80051aa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a2:	f043 0210 	orr.w	r2, r3, #16
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80051b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80051bc:	b590      	push	{r4, r7, lr}
 80051be:	b09f      	sub	sp, #124	; 0x7c
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051c6:	2300      	movs	r3, #0
 80051c8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d101      	bne.n	80051da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80051d6:	2302      	movs	r3, #2
 80051d8:	e093      	b.n	8005302 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80051e2:	2300      	movs	r3, #0
 80051e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80051e6:	2300      	movs	r3, #0
 80051e8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a47      	ldr	r2, [pc, #284]	; (800530c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d102      	bne.n	80051fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80051f4:	4b46      	ldr	r3, [pc, #280]	; (8005310 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80051f6:	60bb      	str	r3, [r7, #8]
 80051f8:	e001      	b.n	80051fe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80051fa:	2300      	movs	r3, #0
 80051fc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10b      	bne.n	800521c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005208:	f043 0220 	orr.w	r2, r3, #32
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e072      	b.n	8005302 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	4618      	mov	r0, r3
 8005220:	f7ff ff59 	bl	80050d6 <LL_ADC_REG_IsConversionOngoing>
 8005224:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4618      	mov	r0, r3
 800522c:	f7ff ff53 	bl	80050d6 <LL_ADC_REG_IsConversionOngoing>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d154      	bne.n	80052e0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005236:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005238:	2b00      	cmp	r3, #0
 800523a:	d151      	bne.n	80052e0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800523c:	4b35      	ldr	r3, [pc, #212]	; (8005314 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800523e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d02c      	beq.n	80052a2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	6859      	ldr	r1, [r3, #4]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800525a:	035b      	lsls	r3, r3, #13
 800525c:	430b      	orrs	r3, r1
 800525e:	431a      	orrs	r2, r3
 8005260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005262:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005264:	4829      	ldr	r0, [pc, #164]	; (800530c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005266:	f7ff fef6 	bl	8005056 <LL_ADC_IsEnabled>
 800526a:	4604      	mov	r4, r0
 800526c:	4828      	ldr	r0, [pc, #160]	; (8005310 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800526e:	f7ff fef2 	bl	8005056 <LL_ADC_IsEnabled>
 8005272:	4603      	mov	r3, r0
 8005274:	431c      	orrs	r4, r3
 8005276:	4828      	ldr	r0, [pc, #160]	; (8005318 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005278:	f7ff feed 	bl	8005056 <LL_ADC_IsEnabled>
 800527c:	4603      	mov	r3, r0
 800527e:	4323      	orrs	r3, r4
 8005280:	2b00      	cmp	r3, #0
 8005282:	d137      	bne.n	80052f4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800528c:	f023 030f 	bic.w	r3, r3, #15
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	6811      	ldr	r1, [r2, #0]
 8005294:	683a      	ldr	r2, [r7, #0]
 8005296:	6892      	ldr	r2, [r2, #8]
 8005298:	430a      	orrs	r2, r1
 800529a:	431a      	orrs	r2, r3
 800529c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800529e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80052a0:	e028      	b.n	80052f4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80052a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ac:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80052ae:	4817      	ldr	r0, [pc, #92]	; (800530c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80052b0:	f7ff fed1 	bl	8005056 <LL_ADC_IsEnabled>
 80052b4:	4604      	mov	r4, r0
 80052b6:	4816      	ldr	r0, [pc, #88]	; (8005310 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80052b8:	f7ff fecd 	bl	8005056 <LL_ADC_IsEnabled>
 80052bc:	4603      	mov	r3, r0
 80052be:	431c      	orrs	r4, r3
 80052c0:	4815      	ldr	r0, [pc, #84]	; (8005318 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80052c2:	f7ff fec8 	bl	8005056 <LL_ADC_IsEnabled>
 80052c6:	4603      	mov	r3, r0
 80052c8:	4323      	orrs	r3, r4
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d112      	bne.n	80052f4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80052ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80052d6:	f023 030f 	bic.w	r3, r3, #15
 80052da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052dc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80052de:	e009      	b.n	80052f4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e4:	f043 0220 	orr.w	r2, r3, #32
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80052f2:	e000      	b.n	80052f6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80052f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80052fe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005302:	4618      	mov	r0, r3
 8005304:	377c      	adds	r7, #124	; 0x7c
 8005306:	46bd      	mov	sp, r7
 8005308:	bd90      	pop	{r4, r7, pc}
 800530a:	bf00      	nop
 800530c:	50040000 	.word	0x50040000
 8005310:	50040100 	.word	0x50040100
 8005314:	50040300 	.word	0x50040300
 8005318:	50040200 	.word	0x50040200

0800531c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800532c:	4b0c      	ldr	r3, [pc, #48]	; (8005360 <__NVIC_SetPriorityGrouping+0x44>)
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005338:	4013      	ands	r3, r2
 800533a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800534c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800534e:	4a04      	ldr	r2, [pc, #16]	; (8005360 <__NVIC_SetPriorityGrouping+0x44>)
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	60d3      	str	r3, [r2, #12]
}
 8005354:	bf00      	nop
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	e000ed00 	.word	0xe000ed00

08005364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005364:	b480      	push	{r7}
 8005366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005368:	4b04      	ldr	r3, [pc, #16]	; (800537c <__NVIC_GetPriorityGrouping+0x18>)
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	0a1b      	lsrs	r3, r3, #8
 800536e:	f003 0307 	and.w	r3, r3, #7
}
 8005372:	4618      	mov	r0, r3
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	e000ed00 	.word	0xe000ed00

08005380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	4603      	mov	r3, r0
 8005388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800538a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800538e:	2b00      	cmp	r3, #0
 8005390:	db0b      	blt.n	80053aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005392:	79fb      	ldrb	r3, [r7, #7]
 8005394:	f003 021f 	and.w	r2, r3, #31
 8005398:	4907      	ldr	r1, [pc, #28]	; (80053b8 <__NVIC_EnableIRQ+0x38>)
 800539a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800539e:	095b      	lsrs	r3, r3, #5
 80053a0:	2001      	movs	r0, #1
 80053a2:	fa00 f202 	lsl.w	r2, r0, r2
 80053a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	e000e100 	.word	0xe000e100

080053bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	4603      	mov	r3, r0
 80053c4:	6039      	str	r1, [r7, #0]
 80053c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	db0a      	blt.n	80053e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	490c      	ldr	r1, [pc, #48]	; (8005408 <__NVIC_SetPriority+0x4c>)
 80053d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053da:	0112      	lsls	r2, r2, #4
 80053dc:	b2d2      	uxtb	r2, r2
 80053de:	440b      	add	r3, r1
 80053e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053e4:	e00a      	b.n	80053fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	4908      	ldr	r1, [pc, #32]	; (800540c <__NVIC_SetPriority+0x50>)
 80053ec:	79fb      	ldrb	r3, [r7, #7]
 80053ee:	f003 030f 	and.w	r3, r3, #15
 80053f2:	3b04      	subs	r3, #4
 80053f4:	0112      	lsls	r2, r2, #4
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	440b      	add	r3, r1
 80053fa:	761a      	strb	r2, [r3, #24]
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	e000e100 	.word	0xe000e100
 800540c:	e000ed00 	.word	0xe000ed00

08005410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005410:	b480      	push	{r7}
 8005412:	b089      	sub	sp, #36	; 0x24
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f003 0307 	and.w	r3, r3, #7
 8005422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	f1c3 0307 	rsb	r3, r3, #7
 800542a:	2b04      	cmp	r3, #4
 800542c:	bf28      	it	cs
 800542e:	2304      	movcs	r3, #4
 8005430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	3304      	adds	r3, #4
 8005436:	2b06      	cmp	r3, #6
 8005438:	d902      	bls.n	8005440 <NVIC_EncodePriority+0x30>
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	3b03      	subs	r3, #3
 800543e:	e000      	b.n	8005442 <NVIC_EncodePriority+0x32>
 8005440:	2300      	movs	r3, #0
 8005442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005444:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	fa02 f303 	lsl.w	r3, r2, r3
 800544e:	43da      	mvns	r2, r3
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	401a      	ands	r2, r3
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005458:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	fa01 f303 	lsl.w	r3, r1, r3
 8005462:	43d9      	mvns	r1, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005468:	4313      	orrs	r3, r2
         );
}
 800546a:	4618      	mov	r0, r3
 800546c:	3724      	adds	r7, #36	; 0x24
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
	...

08005478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	3b01      	subs	r3, #1
 8005484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005488:	d301      	bcc.n	800548e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800548a:	2301      	movs	r3, #1
 800548c:	e00f      	b.n	80054ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800548e:	4a0a      	ldr	r2, [pc, #40]	; (80054b8 <SysTick_Config+0x40>)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	3b01      	subs	r3, #1
 8005494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005496:	210f      	movs	r1, #15
 8005498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800549c:	f7ff ff8e 	bl	80053bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054a0:	4b05      	ldr	r3, [pc, #20]	; (80054b8 <SysTick_Config+0x40>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054a6:	4b04      	ldr	r3, [pc, #16]	; (80054b8 <SysTick_Config+0x40>)
 80054a8:	2207      	movs	r2, #7
 80054aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	e000e010 	.word	0xe000e010

080054bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f7ff ff29 	bl	800531c <__NVIC_SetPriorityGrouping>
}
 80054ca:	bf00      	nop
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b086      	sub	sp, #24
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	4603      	mov	r3, r0
 80054da:	60b9      	str	r1, [r7, #8]
 80054dc:	607a      	str	r2, [r7, #4]
 80054de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80054e0:	2300      	movs	r3, #0
 80054e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80054e4:	f7ff ff3e 	bl	8005364 <__NVIC_GetPriorityGrouping>
 80054e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	68b9      	ldr	r1, [r7, #8]
 80054ee:	6978      	ldr	r0, [r7, #20]
 80054f0:	f7ff ff8e 	bl	8005410 <NVIC_EncodePriority>
 80054f4:	4602      	mov	r2, r0
 80054f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054fa:	4611      	mov	r1, r2
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7ff ff5d 	bl	80053bc <__NVIC_SetPriority>
}
 8005502:	bf00      	nop
 8005504:	3718      	adds	r7, #24
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b082      	sub	sp, #8
 800550e:	af00      	add	r7, sp, #0
 8005510:	4603      	mov	r3, r0
 8005512:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005518:	4618      	mov	r0, r3
 800551a:	f7ff ff31 	bl	8005380 <__NVIC_EnableIRQ>
}
 800551e:	bf00      	nop
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b082      	sub	sp, #8
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7ff ffa2 	bl	8005478 <SysTick_Config>
 8005534:	4603      	mov	r3, r0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
	...

08005540 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e098      	b.n	8005684 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	461a      	mov	r2, r3
 8005558:	4b4d      	ldr	r3, [pc, #308]	; (8005690 <HAL_DMA_Init+0x150>)
 800555a:	429a      	cmp	r2, r3
 800555c:	d80f      	bhi.n	800557e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	461a      	mov	r2, r3
 8005564:	4b4b      	ldr	r3, [pc, #300]	; (8005694 <HAL_DMA_Init+0x154>)
 8005566:	4413      	add	r3, r2
 8005568:	4a4b      	ldr	r2, [pc, #300]	; (8005698 <HAL_DMA_Init+0x158>)
 800556a:	fba2 2303 	umull	r2, r3, r2, r3
 800556e:	091b      	lsrs	r3, r3, #4
 8005570:	009a      	lsls	r2, r3, #2
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a48      	ldr	r2, [pc, #288]	; (800569c <HAL_DMA_Init+0x15c>)
 800557a:	641a      	str	r2, [r3, #64]	; 0x40
 800557c:	e00e      	b.n	800559c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	461a      	mov	r2, r3
 8005584:	4b46      	ldr	r3, [pc, #280]	; (80056a0 <HAL_DMA_Init+0x160>)
 8005586:	4413      	add	r3, r2
 8005588:	4a43      	ldr	r2, [pc, #268]	; (8005698 <HAL_DMA_Init+0x158>)
 800558a:	fba2 2303 	umull	r2, r3, r2, r3
 800558e:	091b      	lsrs	r3, r3, #4
 8005590:	009a      	lsls	r2, r3, #2
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a42      	ldr	r2, [pc, #264]	; (80056a4 <HAL_DMA_Init+0x164>)
 800559a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2202      	movs	r2, #2
 80055a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80055b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80055c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055f6:	d039      	beq.n	800566c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fc:	4a27      	ldr	r2, [pc, #156]	; (800569c <HAL_DMA_Init+0x15c>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d11a      	bne.n	8005638 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005602:	4b29      	ldr	r3, [pc, #164]	; (80056a8 <HAL_DMA_Init+0x168>)
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560a:	f003 031c 	and.w	r3, r3, #28
 800560e:	210f      	movs	r1, #15
 8005610:	fa01 f303 	lsl.w	r3, r1, r3
 8005614:	43db      	mvns	r3, r3
 8005616:	4924      	ldr	r1, [pc, #144]	; (80056a8 <HAL_DMA_Init+0x168>)
 8005618:	4013      	ands	r3, r2
 800561a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800561c:	4b22      	ldr	r3, [pc, #136]	; (80056a8 <HAL_DMA_Init+0x168>)
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6859      	ldr	r1, [r3, #4]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005628:	f003 031c 	and.w	r3, r3, #28
 800562c:	fa01 f303 	lsl.w	r3, r1, r3
 8005630:	491d      	ldr	r1, [pc, #116]	; (80056a8 <HAL_DMA_Init+0x168>)
 8005632:	4313      	orrs	r3, r2
 8005634:	600b      	str	r3, [r1, #0]
 8005636:	e019      	b.n	800566c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005638:	4b1c      	ldr	r3, [pc, #112]	; (80056ac <HAL_DMA_Init+0x16c>)
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005640:	f003 031c 	and.w	r3, r3, #28
 8005644:	210f      	movs	r1, #15
 8005646:	fa01 f303 	lsl.w	r3, r1, r3
 800564a:	43db      	mvns	r3, r3
 800564c:	4917      	ldr	r1, [pc, #92]	; (80056ac <HAL_DMA_Init+0x16c>)
 800564e:	4013      	ands	r3, r2
 8005650:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005652:	4b16      	ldr	r3, [pc, #88]	; (80056ac <HAL_DMA_Init+0x16c>)
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6859      	ldr	r1, [r3, #4]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800565e:	f003 031c 	and.w	r3, r3, #28
 8005662:	fa01 f303 	lsl.w	r3, r1, r3
 8005666:	4911      	ldr	r1, [pc, #68]	; (80056ac <HAL_DMA_Init+0x16c>)
 8005668:	4313      	orrs	r3, r2
 800566a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	40020407 	.word	0x40020407
 8005694:	bffdfff8 	.word	0xbffdfff8
 8005698:	cccccccd 	.word	0xcccccccd
 800569c:	40020000 	.word	0x40020000
 80056a0:	bffdfbf8 	.word	0xbffdfbf8
 80056a4:	40020400 	.word	0x40020400
 80056a8:	400200a8 	.word	0x400200a8
 80056ac:	400204a8 	.word	0x400204a8

080056b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
 80056bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d101      	bne.n	80056d0 <HAL_DMA_Start_IT+0x20>
 80056cc:	2302      	movs	r3, #2
 80056ce:	e04b      	b.n	8005768 <HAL_DMA_Start_IT+0xb8>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d13a      	bne.n	800575a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 0201 	bic.w	r2, r2, #1
 8005700:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	68b9      	ldr	r1, [r7, #8]
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f000 f95f 	bl	80059cc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005712:	2b00      	cmp	r3, #0
 8005714:	d008      	beq.n	8005728 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f042 020e 	orr.w	r2, r2, #14
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	e00f      	b.n	8005748 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0204 	bic.w	r2, r2, #4
 8005736:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f042 020a 	orr.w	r2, r2, #10
 8005746:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f042 0201 	orr.w	r2, r2, #1
 8005756:	601a      	str	r2, [r3, #0]
 8005758:	e005      	b.n	8005766 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005762:	2302      	movs	r3, #2
 8005764:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005766:	7dfb      	ldrb	r3, [r7, #23]
}
 8005768:	4618      	mov	r0, r3
 800576a:	3718      	adds	r7, #24
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005778:	2300      	movs	r3, #0
 800577a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d008      	beq.n	800579a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2204      	movs	r2, #4
 800578c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e022      	b.n	80057e0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 020e 	bic.w	r2, r2, #14
 80057a8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 0201 	bic.w	r2, r2, #1
 80057b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057be:	f003 021c 	and.w	r2, r3, #28
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	2101      	movs	r1, #1
 80057c8:	fa01 f202 	lsl.w	r2, r1, r2
 80057cc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80057de:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057f4:	2300      	movs	r3, #0
 80057f6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d005      	beq.n	8005810 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2204      	movs	r2, #4
 8005808:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	73fb      	strb	r3, [r7, #15]
 800580e:	e029      	b.n	8005864 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 020e 	bic.w	r2, r2, #14
 800581e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 0201 	bic.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005834:	f003 021c 	and.w	r2, r3, #28
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583c:	2101      	movs	r1, #1
 800583e:	fa01 f202 	lsl.w	r2, r1, r2
 8005842:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	4798      	blx	r3
    }
  }
  return status;
 8005864:	7bfb      	ldrb	r3, [r7, #15]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b084      	sub	sp, #16
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588a:	f003 031c 	and.w	r3, r3, #28
 800588e:	2204      	movs	r2, #4
 8005890:	409a      	lsls	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	4013      	ands	r3, r2
 8005896:	2b00      	cmp	r3, #0
 8005898:	d026      	beq.n	80058e8 <HAL_DMA_IRQHandler+0x7a>
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	f003 0304 	and.w	r3, r3, #4
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d021      	beq.n	80058e8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0320 	and.w	r3, r3, #32
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d107      	bne.n	80058c2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f022 0204 	bic.w	r2, r2, #4
 80058c0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c6:	f003 021c 	and.w	r2, r3, #28
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	2104      	movs	r1, #4
 80058d0:	fa01 f202 	lsl.w	r2, r1, r2
 80058d4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d071      	beq.n	80059c2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80058e6:	e06c      	b.n	80059c2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ec:	f003 031c 	and.w	r3, r3, #28
 80058f0:	2202      	movs	r2, #2
 80058f2:	409a      	lsls	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4013      	ands	r3, r2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d02e      	beq.n	800595a <HAL_DMA_IRQHandler+0xec>
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	2b00      	cmp	r3, #0
 8005904:	d029      	beq.n	800595a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0320 	and.w	r3, r3, #32
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10b      	bne.n	800592c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 020a 	bic.w	r2, r2, #10
 8005922:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005930:	f003 021c 	and.w	r2, r3, #28
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005938:	2102      	movs	r1, #2
 800593a:	fa01 f202 	lsl.w	r2, r1, r2
 800593e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594c:	2b00      	cmp	r3, #0
 800594e:	d038      	beq.n	80059c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005958:	e033      	b.n	80059c2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595e:	f003 031c 	and.w	r3, r3, #28
 8005962:	2208      	movs	r2, #8
 8005964:	409a      	lsls	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	4013      	ands	r3, r2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d02a      	beq.n	80059c4 <HAL_DMA_IRQHandler+0x156>
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	f003 0308 	and.w	r3, r3, #8
 8005974:	2b00      	cmp	r3, #0
 8005976:	d025      	beq.n	80059c4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 020e 	bic.w	r2, r2, #14
 8005986:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800598c:	f003 021c 	and.w	r2, r3, #28
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005994:	2101      	movs	r1, #1
 8005996:	fa01 f202 	lsl.w	r2, r1, r2
 800599a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d004      	beq.n	80059c4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80059c2:	bf00      	nop
 80059c4:	bf00      	nop
}
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
 80059d8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059de:	f003 021c 	and.w	r2, r3, #28
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e6:	2101      	movs	r1, #1
 80059e8:	fa01 f202 	lsl.w	r2, r1, r2
 80059ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	2b10      	cmp	r3, #16
 80059fc:	d108      	bne.n	8005a10 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005a0e:	e007      	b.n	8005a20 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	60da      	str	r2, [r3, #12]
}
 8005a20:	bf00      	nop
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005a36:	2300      	movs	r3, #0
 8005a38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a3a:	e17f      	b.n	8005d3c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	2101      	movs	r1, #1
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	fa01 f303 	lsl.w	r3, r1, r3
 8005a48:	4013      	ands	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f000 8171 	beq.w	8005d36 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f003 0303 	and.w	r3, r3, #3
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d005      	beq.n	8005a6c <HAL_GPIO_Init+0x40>
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f003 0303 	and.w	r3, r3, #3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d130      	bne.n	8005ace <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	005b      	lsls	r3, r3, #1
 8005a76:	2203      	movs	r2, #3
 8005a78:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7c:	43db      	mvns	r3, r3
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	4013      	ands	r3, r2
 8005a82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	68da      	ldr	r2, [r3, #12]
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	005b      	lsls	r3, r3, #1
 8005a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aaa:	43db      	mvns	r3, r3
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	4013      	ands	r3, r2
 8005ab0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	091b      	lsrs	r3, r3, #4
 8005ab8:	f003 0201 	and.w	r2, r3, #1
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f003 0303 	and.w	r3, r3, #3
 8005ad6:	2b03      	cmp	r3, #3
 8005ad8:	d118      	bne.n	8005b0c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ade:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae8:	43db      	mvns	r3, r3
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	4013      	ands	r3, r2
 8005aee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	08db      	lsrs	r3, r3, #3
 8005af6:	f003 0201 	and.w	r2, r3, #1
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	fa02 f303 	lsl.w	r3, r2, r3
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f003 0303 	and.w	r3, r3, #3
 8005b14:	2b03      	cmp	r3, #3
 8005b16:	d017      	beq.n	8005b48 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	005b      	lsls	r3, r3, #1
 8005b22:	2203      	movs	r2, #3
 8005b24:	fa02 f303 	lsl.w	r3, r2, r3
 8005b28:	43db      	mvns	r3, r3
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	005b      	lsls	r3, r3, #1
 8005b38:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f003 0303 	and.w	r3, r3, #3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d123      	bne.n	8005b9c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	08da      	lsrs	r2, r3, #3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	3208      	adds	r2, #8
 8005b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b60:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f003 0307 	and.w	r3, r3, #7
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	220f      	movs	r2, #15
 8005b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b70:	43db      	mvns	r3, r3
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	4013      	ands	r3, r2
 8005b76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	691a      	ldr	r2, [r3, #16]
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f003 0307 	and.w	r3, r3, #7
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	fa02 f303 	lsl.w	r3, r2, r3
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	08da      	lsrs	r2, r3, #3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	3208      	adds	r2, #8
 8005b96:	6939      	ldr	r1, [r7, #16]
 8005b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	005b      	lsls	r3, r3, #1
 8005ba6:	2203      	movs	r2, #3
 8005ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bac:	43db      	mvns	r3, r3
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f003 0203 	and.w	r2, r3, #3
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f000 80ac 	beq.w	8005d36 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bde:	4b5f      	ldr	r3, [pc, #380]	; (8005d5c <HAL_GPIO_Init+0x330>)
 8005be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005be2:	4a5e      	ldr	r2, [pc, #376]	; (8005d5c <HAL_GPIO_Init+0x330>)
 8005be4:	f043 0301 	orr.w	r3, r3, #1
 8005be8:	6613      	str	r3, [r2, #96]	; 0x60
 8005bea:	4b5c      	ldr	r3, [pc, #368]	; (8005d5c <HAL_GPIO_Init+0x330>)
 8005bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	60bb      	str	r3, [r7, #8]
 8005bf4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005bf6:	4a5a      	ldr	r2, [pc, #360]	; (8005d60 <HAL_GPIO_Init+0x334>)
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	089b      	lsrs	r3, r3, #2
 8005bfc:	3302      	adds	r3, #2
 8005bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c02:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	f003 0303 	and.w	r3, r3, #3
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	220f      	movs	r2, #15
 8005c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c12:	43db      	mvns	r3, r3
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	4013      	ands	r3, r2
 8005c18:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005c20:	d025      	beq.n	8005c6e <HAL_GPIO_Init+0x242>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a4f      	ldr	r2, [pc, #316]	; (8005d64 <HAL_GPIO_Init+0x338>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d01f      	beq.n	8005c6a <HAL_GPIO_Init+0x23e>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a4e      	ldr	r2, [pc, #312]	; (8005d68 <HAL_GPIO_Init+0x33c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d019      	beq.n	8005c66 <HAL_GPIO_Init+0x23a>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a4d      	ldr	r2, [pc, #308]	; (8005d6c <HAL_GPIO_Init+0x340>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d013      	beq.n	8005c62 <HAL_GPIO_Init+0x236>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a4c      	ldr	r2, [pc, #304]	; (8005d70 <HAL_GPIO_Init+0x344>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d00d      	beq.n	8005c5e <HAL_GPIO_Init+0x232>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a4b      	ldr	r2, [pc, #300]	; (8005d74 <HAL_GPIO_Init+0x348>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d007      	beq.n	8005c5a <HAL_GPIO_Init+0x22e>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a4a      	ldr	r2, [pc, #296]	; (8005d78 <HAL_GPIO_Init+0x34c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d101      	bne.n	8005c56 <HAL_GPIO_Init+0x22a>
 8005c52:	2306      	movs	r3, #6
 8005c54:	e00c      	b.n	8005c70 <HAL_GPIO_Init+0x244>
 8005c56:	2307      	movs	r3, #7
 8005c58:	e00a      	b.n	8005c70 <HAL_GPIO_Init+0x244>
 8005c5a:	2305      	movs	r3, #5
 8005c5c:	e008      	b.n	8005c70 <HAL_GPIO_Init+0x244>
 8005c5e:	2304      	movs	r3, #4
 8005c60:	e006      	b.n	8005c70 <HAL_GPIO_Init+0x244>
 8005c62:	2303      	movs	r3, #3
 8005c64:	e004      	b.n	8005c70 <HAL_GPIO_Init+0x244>
 8005c66:	2302      	movs	r3, #2
 8005c68:	e002      	b.n	8005c70 <HAL_GPIO_Init+0x244>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e000      	b.n	8005c70 <HAL_GPIO_Init+0x244>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	f002 0203 	and.w	r2, r2, #3
 8005c76:	0092      	lsls	r2, r2, #2
 8005c78:	4093      	lsls	r3, r2
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005c80:	4937      	ldr	r1, [pc, #220]	; (8005d60 <HAL_GPIO_Init+0x334>)
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	089b      	lsrs	r3, r3, #2
 8005c86:	3302      	adds	r3, #2
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c8e:	4b3b      	ldr	r3, [pc, #236]	; (8005d7c <HAL_GPIO_Init+0x350>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	43db      	mvns	r3, r3
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005cb2:	4a32      	ldr	r2, [pc, #200]	; (8005d7c <HAL_GPIO_Init+0x350>)
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005cb8:	4b30      	ldr	r3, [pc, #192]	; (8005d7c <HAL_GPIO_Init+0x350>)
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	43db      	mvns	r3, r3
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d003      	beq.n	8005cdc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005cdc:	4a27      	ldr	r2, [pc, #156]	; (8005d7c <HAL_GPIO_Init+0x350>)
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005ce2:	4b26      	ldr	r3, [pc, #152]	; (8005d7c <HAL_GPIO_Init+0x350>)
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	43db      	mvns	r3, r3
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	4013      	ands	r3, r2
 8005cf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005d06:	4a1d      	ldr	r2, [pc, #116]	; (8005d7c <HAL_GPIO_Init+0x350>)
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005d0c:	4b1b      	ldr	r3, [pc, #108]	; (8005d7c <HAL_GPIO_Init+0x350>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	43db      	mvns	r3, r3
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	4013      	ands	r3, r2
 8005d1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d003      	beq.n	8005d30 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005d30:	4a12      	ldr	r2, [pc, #72]	; (8005d7c <HAL_GPIO_Init+0x350>)
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	fa22 f303 	lsr.w	r3, r2, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f47f ae78 	bne.w	8005a3c <HAL_GPIO_Init+0x10>
  }
}
 8005d4c:	bf00      	nop
 8005d4e:	bf00      	nop
 8005d50:	371c      	adds	r7, #28
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	40021000 	.word	0x40021000
 8005d60:	40010000 	.word	0x40010000
 8005d64:	48000400 	.word	0x48000400
 8005d68:	48000800 	.word	0x48000800
 8005d6c:	48000c00 	.word	0x48000c00
 8005d70:	48001000 	.word	0x48001000
 8005d74:	48001400 	.word	0x48001400
 8005d78:	48001800 	.word	0x48001800
 8005d7c:	40010400 	.word	0x40010400

08005d80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	460b      	mov	r3, r1
 8005d8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	691a      	ldr	r2, [r3, #16]
 8005d90:	887b      	ldrh	r3, [r7, #2]
 8005d92:	4013      	ands	r3, r2
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	73fb      	strb	r3, [r7, #15]
 8005d9c:	e001      	b.n	8005da2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3714      	adds	r7, #20
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	460b      	mov	r3, r1
 8005dba:	807b      	strh	r3, [r7, #2]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005dc0:	787b      	ldrb	r3, [r7, #1]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005dc6:	887a      	ldrh	r2, [r7, #2]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005dcc:	e002      	b.n	8005dd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005dce:	887a      	ldrh	r2, [r7, #2]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	460b      	mov	r3, r1
 8005dea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005df2:	887a      	ldrh	r2, [r7, #2]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4013      	ands	r3, r2
 8005df8:	041a      	lsls	r2, r3, #16
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	43d9      	mvns	r1, r3
 8005dfe:	887b      	ldrh	r3, [r7, #2]
 8005e00:	400b      	ands	r3, r1
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	619a      	str	r2, [r3, #24]
}
 8005e08:	bf00      	nop
 8005e0a:	3714      	adds	r7, #20
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005e14:	b480      	push	{r7}
 8005e16:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005e18:	4b04      	ldr	r3, [pc, #16]	; (8005e2c <HAL_PWREx_GetVoltageRange+0x18>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	40007000 	.word	0x40007000

08005e30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e3e:	d130      	bne.n	8005ea2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e40:	4b23      	ldr	r3, [pc, #140]	; (8005ed0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e4c:	d038      	beq.n	8005ec0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e4e:	4b20      	ldr	r3, [pc, #128]	; (8005ed0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005e56:	4a1e      	ldr	r2, [pc, #120]	; (8005ed0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e5c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e5e:	4b1d      	ldr	r3, [pc, #116]	; (8005ed4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2232      	movs	r2, #50	; 0x32
 8005e64:	fb02 f303 	mul.w	r3, r2, r3
 8005e68:	4a1b      	ldr	r2, [pc, #108]	; (8005ed8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6e:	0c9b      	lsrs	r3, r3, #18
 8005e70:	3301      	adds	r3, #1
 8005e72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e74:	e002      	b.n	8005e7c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e7c:	4b14      	ldr	r3, [pc, #80]	; (8005ed0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e88:	d102      	bne.n	8005e90 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1f2      	bne.n	8005e76 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e90:	4b0f      	ldr	r3, [pc, #60]	; (8005ed0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e9c:	d110      	bne.n	8005ec0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e00f      	b.n	8005ec2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ea2:	4b0b      	ldr	r3, [pc, #44]	; (8005ed0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eae:	d007      	beq.n	8005ec0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005eb0:	4b07      	ldr	r3, [pc, #28]	; (8005ed0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005eb8:	4a05      	ldr	r2, [pc, #20]	; (8005ed0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005eba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ebe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	40007000 	.word	0x40007000
 8005ed4:	20000008 	.word	0x20000008
 8005ed8:	431bde83 	.word	0x431bde83

08005edc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e3ca      	b.n	8006684 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eee:	4b97      	ldr	r3, [pc, #604]	; (800614c <HAL_RCC_OscConfig+0x270>)
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f003 030c 	and.w	r3, r3, #12
 8005ef6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ef8:	4b94      	ldr	r3, [pc, #592]	; (800614c <HAL_RCC_OscConfig+0x270>)
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	f003 0303 	and.w	r3, r3, #3
 8005f00:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0310 	and.w	r3, r3, #16
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f000 80e4 	beq.w	80060d8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d007      	beq.n	8005f26 <HAL_RCC_OscConfig+0x4a>
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	2b0c      	cmp	r3, #12
 8005f1a:	f040 808b 	bne.w	8006034 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	f040 8087 	bne.w	8006034 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005f26:	4b89      	ldr	r3, [pc, #548]	; (800614c <HAL_RCC_OscConfig+0x270>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d005      	beq.n	8005f3e <HAL_RCC_OscConfig+0x62>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e3a2      	b.n	8006684 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a1a      	ldr	r2, [r3, #32]
 8005f42:	4b82      	ldr	r3, [pc, #520]	; (800614c <HAL_RCC_OscConfig+0x270>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0308 	and.w	r3, r3, #8
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d004      	beq.n	8005f58 <HAL_RCC_OscConfig+0x7c>
 8005f4e:	4b7f      	ldr	r3, [pc, #508]	; (800614c <HAL_RCC_OscConfig+0x270>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f56:	e005      	b.n	8005f64 <HAL_RCC_OscConfig+0x88>
 8005f58:	4b7c      	ldr	r3, [pc, #496]	; (800614c <HAL_RCC_OscConfig+0x270>)
 8005f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f5e:	091b      	lsrs	r3, r3, #4
 8005f60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d223      	bcs.n	8005fb0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f000 fd55 	bl	8006a1c <RCC_SetFlashLatencyFromMSIRange>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e383      	b.n	8006684 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f7c:	4b73      	ldr	r3, [pc, #460]	; (800614c <HAL_RCC_OscConfig+0x270>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a72      	ldr	r2, [pc, #456]	; (800614c <HAL_RCC_OscConfig+0x270>)
 8005f82:	f043 0308 	orr.w	r3, r3, #8
 8005f86:	6013      	str	r3, [r2, #0]
 8005f88:	4b70      	ldr	r3, [pc, #448]	; (800614c <HAL_RCC_OscConfig+0x270>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	496d      	ldr	r1, [pc, #436]	; (800614c <HAL_RCC_OscConfig+0x270>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f9a:	4b6c      	ldr	r3, [pc, #432]	; (800614c <HAL_RCC_OscConfig+0x270>)
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	69db      	ldr	r3, [r3, #28]
 8005fa6:	021b      	lsls	r3, r3, #8
 8005fa8:	4968      	ldr	r1, [pc, #416]	; (800614c <HAL_RCC_OscConfig+0x270>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	604b      	str	r3, [r1, #4]
 8005fae:	e025      	b.n	8005ffc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005fb0:	4b66      	ldr	r3, [pc, #408]	; (800614c <HAL_RCC_OscConfig+0x270>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a65      	ldr	r2, [pc, #404]	; (800614c <HAL_RCC_OscConfig+0x270>)
 8005fb6:	f043 0308 	orr.w	r3, r3, #8
 8005fba:	6013      	str	r3, [r2, #0]
 8005fbc:	4b63      	ldr	r3, [pc, #396]	; (800614c <HAL_RCC_OscConfig+0x270>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	4960      	ldr	r1, [pc, #384]	; (800614c <HAL_RCC_OscConfig+0x270>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005fce:	4b5f      	ldr	r3, [pc, #380]	; (800614c <HAL_RCC_OscConfig+0x270>)
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	021b      	lsls	r3, r3, #8
 8005fdc:	495b      	ldr	r1, [pc, #364]	; (800614c <HAL_RCC_OscConfig+0x270>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d109      	bne.n	8005ffc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	4618      	mov	r0, r3
 8005fee:	f000 fd15 	bl	8006a1c <RCC_SetFlashLatencyFromMSIRange>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d001      	beq.n	8005ffc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e343      	b.n	8006684 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ffc:	f000 fc4a 	bl	8006894 <HAL_RCC_GetSysClockFreq>
 8006000:	4602      	mov	r2, r0
 8006002:	4b52      	ldr	r3, [pc, #328]	; (800614c <HAL_RCC_OscConfig+0x270>)
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	091b      	lsrs	r3, r3, #4
 8006008:	f003 030f 	and.w	r3, r3, #15
 800600c:	4950      	ldr	r1, [pc, #320]	; (8006150 <HAL_RCC_OscConfig+0x274>)
 800600e:	5ccb      	ldrb	r3, [r1, r3]
 8006010:	f003 031f 	and.w	r3, r3, #31
 8006014:	fa22 f303 	lsr.w	r3, r2, r3
 8006018:	4a4e      	ldr	r2, [pc, #312]	; (8006154 <HAL_RCC_OscConfig+0x278>)
 800601a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800601c:	4b4e      	ldr	r3, [pc, #312]	; (8006158 <HAL_RCC_OscConfig+0x27c>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4618      	mov	r0, r3
 8006022:	f7fd fe03 	bl	8003c2c <HAL_InitTick>
 8006026:	4603      	mov	r3, r0
 8006028:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800602a:	7bfb      	ldrb	r3, [r7, #15]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d052      	beq.n	80060d6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006030:	7bfb      	ldrb	r3, [r7, #15]
 8006032:	e327      	b.n	8006684 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d032      	beq.n	80060a2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800603c:	4b43      	ldr	r3, [pc, #268]	; (800614c <HAL_RCC_OscConfig+0x270>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a42      	ldr	r2, [pc, #264]	; (800614c <HAL_RCC_OscConfig+0x270>)
 8006042:	f043 0301 	orr.w	r3, r3, #1
 8006046:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006048:	f7fd fe40 	bl	8003ccc <HAL_GetTick>
 800604c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800604e:	e008      	b.n	8006062 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006050:	f7fd fe3c 	bl	8003ccc <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b02      	cmp	r3, #2
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e310      	b.n	8006684 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006062:	4b3a      	ldr	r3, [pc, #232]	; (800614c <HAL_RCC_OscConfig+0x270>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0302 	and.w	r3, r3, #2
 800606a:	2b00      	cmp	r3, #0
 800606c:	d0f0      	beq.n	8006050 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800606e:	4b37      	ldr	r3, [pc, #220]	; (800614c <HAL_RCC_OscConfig+0x270>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a36      	ldr	r2, [pc, #216]	; (800614c <HAL_RCC_OscConfig+0x270>)
 8006074:	f043 0308 	orr.w	r3, r3, #8
 8006078:	6013      	str	r3, [r2, #0]
 800607a:	4b34      	ldr	r3, [pc, #208]	; (800614c <HAL_RCC_OscConfig+0x270>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	4931      	ldr	r1, [pc, #196]	; (800614c <HAL_RCC_OscConfig+0x270>)
 8006088:	4313      	orrs	r3, r2
 800608a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800608c:	4b2f      	ldr	r3, [pc, #188]	; (800614c <HAL_RCC_OscConfig+0x270>)
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	69db      	ldr	r3, [r3, #28]
 8006098:	021b      	lsls	r3, r3, #8
 800609a:	492c      	ldr	r1, [pc, #176]	; (800614c <HAL_RCC_OscConfig+0x270>)
 800609c:	4313      	orrs	r3, r2
 800609e:	604b      	str	r3, [r1, #4]
 80060a0:	e01a      	b.n	80060d8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80060a2:	4b2a      	ldr	r3, [pc, #168]	; (800614c <HAL_RCC_OscConfig+0x270>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a29      	ldr	r2, [pc, #164]	; (800614c <HAL_RCC_OscConfig+0x270>)
 80060a8:	f023 0301 	bic.w	r3, r3, #1
 80060ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80060ae:	f7fd fe0d 	bl	8003ccc <HAL_GetTick>
 80060b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80060b4:	e008      	b.n	80060c8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80060b6:	f7fd fe09 	bl	8003ccc <HAL_GetTick>
 80060ba:	4602      	mov	r2, r0
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d901      	bls.n	80060c8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e2dd      	b.n	8006684 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80060c8:	4b20      	ldr	r3, [pc, #128]	; (800614c <HAL_RCC_OscConfig+0x270>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0302 	and.w	r3, r3, #2
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1f0      	bne.n	80060b6 <HAL_RCC_OscConfig+0x1da>
 80060d4:	e000      	b.n	80060d8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80060d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d074      	beq.n	80061ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	2b08      	cmp	r3, #8
 80060e8:	d005      	beq.n	80060f6 <HAL_RCC_OscConfig+0x21a>
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	2b0c      	cmp	r3, #12
 80060ee:	d10e      	bne.n	800610e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	2b03      	cmp	r3, #3
 80060f4:	d10b      	bne.n	800610e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060f6:	4b15      	ldr	r3, [pc, #84]	; (800614c <HAL_RCC_OscConfig+0x270>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d064      	beq.n	80061cc <HAL_RCC_OscConfig+0x2f0>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d160      	bne.n	80061cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e2ba      	b.n	8006684 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006116:	d106      	bne.n	8006126 <HAL_RCC_OscConfig+0x24a>
 8006118:	4b0c      	ldr	r3, [pc, #48]	; (800614c <HAL_RCC_OscConfig+0x270>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a0b      	ldr	r2, [pc, #44]	; (800614c <HAL_RCC_OscConfig+0x270>)
 800611e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006122:	6013      	str	r3, [r2, #0]
 8006124:	e026      	b.n	8006174 <HAL_RCC_OscConfig+0x298>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800612e:	d115      	bne.n	800615c <HAL_RCC_OscConfig+0x280>
 8006130:	4b06      	ldr	r3, [pc, #24]	; (800614c <HAL_RCC_OscConfig+0x270>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a05      	ldr	r2, [pc, #20]	; (800614c <HAL_RCC_OscConfig+0x270>)
 8006136:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800613a:	6013      	str	r3, [r2, #0]
 800613c:	4b03      	ldr	r3, [pc, #12]	; (800614c <HAL_RCC_OscConfig+0x270>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a02      	ldr	r2, [pc, #8]	; (800614c <HAL_RCC_OscConfig+0x270>)
 8006142:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	e014      	b.n	8006174 <HAL_RCC_OscConfig+0x298>
 800614a:	bf00      	nop
 800614c:	40021000 	.word	0x40021000
 8006150:	0800e794 	.word	0x0800e794
 8006154:	20000008 	.word	0x20000008
 8006158:	2000000c 	.word	0x2000000c
 800615c:	4ba0      	ldr	r3, [pc, #640]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a9f      	ldr	r2, [pc, #636]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 8006162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006166:	6013      	str	r3, [r2, #0]
 8006168:	4b9d      	ldr	r3, [pc, #628]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a9c      	ldr	r2, [pc, #624]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 800616e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d013      	beq.n	80061a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800617c:	f7fd fda6 	bl	8003ccc <HAL_GetTick>
 8006180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006182:	e008      	b.n	8006196 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006184:	f7fd fda2 	bl	8003ccc <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	2b64      	cmp	r3, #100	; 0x64
 8006190:	d901      	bls.n	8006196 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e276      	b.n	8006684 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006196:	4b92      	ldr	r3, [pc, #584]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d0f0      	beq.n	8006184 <HAL_RCC_OscConfig+0x2a8>
 80061a2:	e014      	b.n	80061ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a4:	f7fd fd92 	bl	8003ccc <HAL_GetTick>
 80061a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061aa:	e008      	b.n	80061be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061ac:	f7fd fd8e 	bl	8003ccc <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b64      	cmp	r3, #100	; 0x64
 80061b8:	d901      	bls.n	80061be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e262      	b.n	8006684 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061be:	4b88      	ldr	r3, [pc, #544]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1f0      	bne.n	80061ac <HAL_RCC_OscConfig+0x2d0>
 80061ca:	e000      	b.n	80061ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d060      	beq.n	800629c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	2b04      	cmp	r3, #4
 80061de:	d005      	beq.n	80061ec <HAL_RCC_OscConfig+0x310>
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	2b0c      	cmp	r3, #12
 80061e4:	d119      	bne.n	800621a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d116      	bne.n	800621a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061ec:	4b7c      	ldr	r3, [pc, #496]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d005      	beq.n	8006204 <HAL_RCC_OscConfig+0x328>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d101      	bne.n	8006204 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e23f      	b.n	8006684 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006204:	4b76      	ldr	r3, [pc, #472]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	061b      	lsls	r3, r3, #24
 8006212:	4973      	ldr	r1, [pc, #460]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 8006214:	4313      	orrs	r3, r2
 8006216:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006218:	e040      	b.n	800629c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d023      	beq.n	800626a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006222:	4b6f      	ldr	r3, [pc, #444]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a6e      	ldr	r2, [pc, #440]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 8006228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800622c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800622e:	f7fd fd4d 	bl	8003ccc <HAL_GetTick>
 8006232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006234:	e008      	b.n	8006248 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006236:	f7fd fd49 	bl	8003ccc <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	2b02      	cmp	r3, #2
 8006242:	d901      	bls.n	8006248 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e21d      	b.n	8006684 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006248:	4b65      	ldr	r3, [pc, #404]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006250:	2b00      	cmp	r3, #0
 8006252:	d0f0      	beq.n	8006236 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006254:	4b62      	ldr	r3, [pc, #392]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	061b      	lsls	r3, r3, #24
 8006262:	495f      	ldr	r1, [pc, #380]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 8006264:	4313      	orrs	r3, r2
 8006266:	604b      	str	r3, [r1, #4]
 8006268:	e018      	b.n	800629c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800626a:	4b5d      	ldr	r3, [pc, #372]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a5c      	ldr	r2, [pc, #368]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 8006270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006276:	f7fd fd29 	bl	8003ccc <HAL_GetTick>
 800627a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800627c:	e008      	b.n	8006290 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800627e:	f7fd fd25 	bl	8003ccc <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	2b02      	cmp	r3, #2
 800628a:	d901      	bls.n	8006290 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e1f9      	b.n	8006684 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006290:	4b53      	ldr	r3, [pc, #332]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1f0      	bne.n	800627e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0308 	and.w	r3, r3, #8
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d03c      	beq.n	8006322 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d01c      	beq.n	80062ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062b0:	4b4b      	ldr	r3, [pc, #300]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 80062b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062b6:	4a4a      	ldr	r2, [pc, #296]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 80062b8:	f043 0301 	orr.w	r3, r3, #1
 80062bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062c0:	f7fd fd04 	bl	8003ccc <HAL_GetTick>
 80062c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062c6:	e008      	b.n	80062da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062c8:	f7fd fd00 	bl	8003ccc <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d901      	bls.n	80062da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e1d4      	b.n	8006684 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062da:	4b41      	ldr	r3, [pc, #260]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 80062dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062e0:	f003 0302 	and.w	r3, r3, #2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d0ef      	beq.n	80062c8 <HAL_RCC_OscConfig+0x3ec>
 80062e8:	e01b      	b.n	8006322 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062ea:	4b3d      	ldr	r3, [pc, #244]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 80062ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062f0:	4a3b      	ldr	r2, [pc, #236]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 80062f2:	f023 0301 	bic.w	r3, r3, #1
 80062f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062fa:	f7fd fce7 	bl	8003ccc <HAL_GetTick>
 80062fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006300:	e008      	b.n	8006314 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006302:	f7fd fce3 	bl	8003ccc <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	2b02      	cmp	r3, #2
 800630e:	d901      	bls.n	8006314 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e1b7      	b.n	8006684 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006314:	4b32      	ldr	r3, [pc, #200]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 8006316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1ef      	bne.n	8006302 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0304 	and.w	r3, r3, #4
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 80a6 	beq.w	800647c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006330:	2300      	movs	r3, #0
 8006332:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006334:	4b2a      	ldr	r3, [pc, #168]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 8006336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10d      	bne.n	800635c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006340:	4b27      	ldr	r3, [pc, #156]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 8006342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006344:	4a26      	ldr	r2, [pc, #152]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 8006346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800634a:	6593      	str	r3, [r2, #88]	; 0x58
 800634c:	4b24      	ldr	r3, [pc, #144]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 800634e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006354:	60bb      	str	r3, [r7, #8]
 8006356:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006358:	2301      	movs	r3, #1
 800635a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800635c:	4b21      	ldr	r3, [pc, #132]	; (80063e4 <HAL_RCC_OscConfig+0x508>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006364:	2b00      	cmp	r3, #0
 8006366:	d118      	bne.n	800639a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006368:	4b1e      	ldr	r3, [pc, #120]	; (80063e4 <HAL_RCC_OscConfig+0x508>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a1d      	ldr	r2, [pc, #116]	; (80063e4 <HAL_RCC_OscConfig+0x508>)
 800636e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006372:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006374:	f7fd fcaa 	bl	8003ccc <HAL_GetTick>
 8006378:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800637a:	e008      	b.n	800638e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800637c:	f7fd fca6 	bl	8003ccc <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	2b02      	cmp	r3, #2
 8006388:	d901      	bls.n	800638e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e17a      	b.n	8006684 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800638e:	4b15      	ldr	r3, [pc, #84]	; (80063e4 <HAL_RCC_OscConfig+0x508>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006396:	2b00      	cmp	r3, #0
 8006398:	d0f0      	beq.n	800637c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d108      	bne.n	80063b4 <HAL_RCC_OscConfig+0x4d8>
 80063a2:	4b0f      	ldr	r3, [pc, #60]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 80063a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a8:	4a0d      	ldr	r2, [pc, #52]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 80063aa:	f043 0301 	orr.w	r3, r3, #1
 80063ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80063b2:	e029      	b.n	8006408 <HAL_RCC_OscConfig+0x52c>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	2b05      	cmp	r3, #5
 80063ba:	d115      	bne.n	80063e8 <HAL_RCC_OscConfig+0x50c>
 80063bc:	4b08      	ldr	r3, [pc, #32]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 80063be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c2:	4a07      	ldr	r2, [pc, #28]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 80063c4:	f043 0304 	orr.w	r3, r3, #4
 80063c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80063cc:	4b04      	ldr	r3, [pc, #16]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 80063ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d2:	4a03      	ldr	r2, [pc, #12]	; (80063e0 <HAL_RCC_OscConfig+0x504>)
 80063d4:	f043 0301 	orr.w	r3, r3, #1
 80063d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80063dc:	e014      	b.n	8006408 <HAL_RCC_OscConfig+0x52c>
 80063de:	bf00      	nop
 80063e0:	40021000 	.word	0x40021000
 80063e4:	40007000 	.word	0x40007000
 80063e8:	4b9c      	ldr	r3, [pc, #624]	; (800665c <HAL_RCC_OscConfig+0x780>)
 80063ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ee:	4a9b      	ldr	r2, [pc, #620]	; (800665c <HAL_RCC_OscConfig+0x780>)
 80063f0:	f023 0301 	bic.w	r3, r3, #1
 80063f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80063f8:	4b98      	ldr	r3, [pc, #608]	; (800665c <HAL_RCC_OscConfig+0x780>)
 80063fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063fe:	4a97      	ldr	r2, [pc, #604]	; (800665c <HAL_RCC_OscConfig+0x780>)
 8006400:	f023 0304 	bic.w	r3, r3, #4
 8006404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d016      	beq.n	800643e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006410:	f7fd fc5c 	bl	8003ccc <HAL_GetTick>
 8006414:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006416:	e00a      	b.n	800642e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006418:	f7fd fc58 	bl	8003ccc <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	f241 3288 	movw	r2, #5000	; 0x1388
 8006426:	4293      	cmp	r3, r2
 8006428:	d901      	bls.n	800642e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e12a      	b.n	8006684 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800642e:	4b8b      	ldr	r3, [pc, #556]	; (800665c <HAL_RCC_OscConfig+0x780>)
 8006430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006434:	f003 0302 	and.w	r3, r3, #2
 8006438:	2b00      	cmp	r3, #0
 800643a:	d0ed      	beq.n	8006418 <HAL_RCC_OscConfig+0x53c>
 800643c:	e015      	b.n	800646a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800643e:	f7fd fc45 	bl	8003ccc <HAL_GetTick>
 8006442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006444:	e00a      	b.n	800645c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006446:	f7fd fc41 	bl	8003ccc <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	f241 3288 	movw	r2, #5000	; 0x1388
 8006454:	4293      	cmp	r3, r2
 8006456:	d901      	bls.n	800645c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e113      	b.n	8006684 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800645c:	4b7f      	ldr	r3, [pc, #508]	; (800665c <HAL_RCC_OscConfig+0x780>)
 800645e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1ed      	bne.n	8006446 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800646a:	7ffb      	ldrb	r3, [r7, #31]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d105      	bne.n	800647c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006470:	4b7a      	ldr	r3, [pc, #488]	; (800665c <HAL_RCC_OscConfig+0x780>)
 8006472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006474:	4a79      	ldr	r2, [pc, #484]	; (800665c <HAL_RCC_OscConfig+0x780>)
 8006476:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800647a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 80fe 	beq.w	8006682 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648a:	2b02      	cmp	r3, #2
 800648c:	f040 80d0 	bne.w	8006630 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006490:	4b72      	ldr	r3, [pc, #456]	; (800665c <HAL_RCC_OscConfig+0x780>)
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f003 0203 	and.w	r2, r3, #3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d130      	bne.n	8006506 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ae:	3b01      	subs	r3, #1
 80064b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d127      	bne.n	8006506 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d11f      	bne.n	8006506 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80064d0:	2a07      	cmp	r2, #7
 80064d2:	bf14      	ite	ne
 80064d4:	2201      	movne	r2, #1
 80064d6:	2200      	moveq	r2, #0
 80064d8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80064da:	4293      	cmp	r3, r2
 80064dc:	d113      	bne.n	8006506 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e8:	085b      	lsrs	r3, r3, #1
 80064ea:	3b01      	subs	r3, #1
 80064ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d109      	bne.n	8006506 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fc:	085b      	lsrs	r3, r3, #1
 80064fe:	3b01      	subs	r3, #1
 8006500:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006502:	429a      	cmp	r2, r3
 8006504:	d06e      	beq.n	80065e4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	2b0c      	cmp	r3, #12
 800650a:	d069      	beq.n	80065e0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800650c:	4b53      	ldr	r3, [pc, #332]	; (800665c <HAL_RCC_OscConfig+0x780>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d105      	bne.n	8006524 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006518:	4b50      	ldr	r3, [pc, #320]	; (800665c <HAL_RCC_OscConfig+0x780>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d001      	beq.n	8006528 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e0ad      	b.n	8006684 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006528:	4b4c      	ldr	r3, [pc, #304]	; (800665c <HAL_RCC_OscConfig+0x780>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a4b      	ldr	r2, [pc, #300]	; (800665c <HAL_RCC_OscConfig+0x780>)
 800652e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006532:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006534:	f7fd fbca 	bl	8003ccc <HAL_GetTick>
 8006538:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800653a:	e008      	b.n	800654e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800653c:	f7fd fbc6 	bl	8003ccc <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	2b02      	cmp	r3, #2
 8006548:	d901      	bls.n	800654e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e09a      	b.n	8006684 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800654e:	4b43      	ldr	r3, [pc, #268]	; (800665c <HAL_RCC_OscConfig+0x780>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1f0      	bne.n	800653c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800655a:	4b40      	ldr	r3, [pc, #256]	; (800665c <HAL_RCC_OscConfig+0x780>)
 800655c:	68da      	ldr	r2, [r3, #12]
 800655e:	4b40      	ldr	r3, [pc, #256]	; (8006660 <HAL_RCC_OscConfig+0x784>)
 8006560:	4013      	ands	r3, r2
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800656a:	3a01      	subs	r2, #1
 800656c:	0112      	lsls	r2, r2, #4
 800656e:	4311      	orrs	r1, r2
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006574:	0212      	lsls	r2, r2, #8
 8006576:	4311      	orrs	r1, r2
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800657c:	0852      	lsrs	r2, r2, #1
 800657e:	3a01      	subs	r2, #1
 8006580:	0552      	lsls	r2, r2, #21
 8006582:	4311      	orrs	r1, r2
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006588:	0852      	lsrs	r2, r2, #1
 800658a:	3a01      	subs	r2, #1
 800658c:	0652      	lsls	r2, r2, #25
 800658e:	4311      	orrs	r1, r2
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006594:	0912      	lsrs	r2, r2, #4
 8006596:	0452      	lsls	r2, r2, #17
 8006598:	430a      	orrs	r2, r1
 800659a:	4930      	ldr	r1, [pc, #192]	; (800665c <HAL_RCC_OscConfig+0x780>)
 800659c:	4313      	orrs	r3, r2
 800659e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80065a0:	4b2e      	ldr	r3, [pc, #184]	; (800665c <HAL_RCC_OscConfig+0x780>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a2d      	ldr	r2, [pc, #180]	; (800665c <HAL_RCC_OscConfig+0x780>)
 80065a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80065ac:	4b2b      	ldr	r3, [pc, #172]	; (800665c <HAL_RCC_OscConfig+0x780>)
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	4a2a      	ldr	r2, [pc, #168]	; (800665c <HAL_RCC_OscConfig+0x780>)
 80065b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80065b8:	f7fd fb88 	bl	8003ccc <HAL_GetTick>
 80065bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065be:	e008      	b.n	80065d2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065c0:	f7fd fb84 	bl	8003ccc <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e058      	b.n	8006684 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065d2:	4b22      	ldr	r3, [pc, #136]	; (800665c <HAL_RCC_OscConfig+0x780>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d0f0      	beq.n	80065c0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80065de:	e050      	b.n	8006682 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e04f      	b.n	8006684 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065e4:	4b1d      	ldr	r3, [pc, #116]	; (800665c <HAL_RCC_OscConfig+0x780>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d148      	bne.n	8006682 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80065f0:	4b1a      	ldr	r3, [pc, #104]	; (800665c <HAL_RCC_OscConfig+0x780>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a19      	ldr	r2, [pc, #100]	; (800665c <HAL_RCC_OscConfig+0x780>)
 80065f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80065fc:	4b17      	ldr	r3, [pc, #92]	; (800665c <HAL_RCC_OscConfig+0x780>)
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	4a16      	ldr	r2, [pc, #88]	; (800665c <HAL_RCC_OscConfig+0x780>)
 8006602:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006606:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006608:	f7fd fb60 	bl	8003ccc <HAL_GetTick>
 800660c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800660e:	e008      	b.n	8006622 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006610:	f7fd fb5c 	bl	8003ccc <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	2b02      	cmp	r3, #2
 800661c:	d901      	bls.n	8006622 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e030      	b.n	8006684 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006622:	4b0e      	ldr	r3, [pc, #56]	; (800665c <HAL_RCC_OscConfig+0x780>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d0f0      	beq.n	8006610 <HAL_RCC_OscConfig+0x734>
 800662e:	e028      	b.n	8006682 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	2b0c      	cmp	r3, #12
 8006634:	d023      	beq.n	800667e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006636:	4b09      	ldr	r3, [pc, #36]	; (800665c <HAL_RCC_OscConfig+0x780>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a08      	ldr	r2, [pc, #32]	; (800665c <HAL_RCC_OscConfig+0x780>)
 800663c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006642:	f7fd fb43 	bl	8003ccc <HAL_GetTick>
 8006646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006648:	e00c      	b.n	8006664 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800664a:	f7fd fb3f 	bl	8003ccc <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	2b02      	cmp	r3, #2
 8006656:	d905      	bls.n	8006664 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e013      	b.n	8006684 <HAL_RCC_OscConfig+0x7a8>
 800665c:	40021000 	.word	0x40021000
 8006660:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006664:	4b09      	ldr	r3, [pc, #36]	; (800668c <HAL_RCC_OscConfig+0x7b0>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1ec      	bne.n	800664a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006670:	4b06      	ldr	r3, [pc, #24]	; (800668c <HAL_RCC_OscConfig+0x7b0>)
 8006672:	68da      	ldr	r2, [r3, #12]
 8006674:	4905      	ldr	r1, [pc, #20]	; (800668c <HAL_RCC_OscConfig+0x7b0>)
 8006676:	4b06      	ldr	r3, [pc, #24]	; (8006690 <HAL_RCC_OscConfig+0x7b4>)
 8006678:	4013      	ands	r3, r2
 800667a:	60cb      	str	r3, [r1, #12]
 800667c:	e001      	b.n	8006682 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e000      	b.n	8006684 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3720      	adds	r7, #32
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	40021000 	.word	0x40021000
 8006690:	feeefffc 	.word	0xfeeefffc

08006694 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d101      	bne.n	80066a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e0e7      	b.n	8006878 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066a8:	4b75      	ldr	r3, [pc, #468]	; (8006880 <HAL_RCC_ClockConfig+0x1ec>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0307 	and.w	r3, r3, #7
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d910      	bls.n	80066d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066b6:	4b72      	ldr	r3, [pc, #456]	; (8006880 <HAL_RCC_ClockConfig+0x1ec>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f023 0207 	bic.w	r2, r3, #7
 80066be:	4970      	ldr	r1, [pc, #448]	; (8006880 <HAL_RCC_ClockConfig+0x1ec>)
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066c6:	4b6e      	ldr	r3, [pc, #440]	; (8006880 <HAL_RCC_ClockConfig+0x1ec>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0307 	and.w	r3, r3, #7
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d001      	beq.n	80066d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e0cf      	b.n	8006878 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0302 	and.w	r3, r3, #2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d010      	beq.n	8006706 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	4b66      	ldr	r3, [pc, #408]	; (8006884 <HAL_RCC_ClockConfig+0x1f0>)
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d908      	bls.n	8006706 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066f4:	4b63      	ldr	r3, [pc, #396]	; (8006884 <HAL_RCC_ClockConfig+0x1f0>)
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	4960      	ldr	r1, [pc, #384]	; (8006884 <HAL_RCC_ClockConfig+0x1f0>)
 8006702:	4313      	orrs	r3, r2
 8006704:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b00      	cmp	r3, #0
 8006710:	d04c      	beq.n	80067ac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	2b03      	cmp	r3, #3
 8006718:	d107      	bne.n	800672a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800671a:	4b5a      	ldr	r3, [pc, #360]	; (8006884 <HAL_RCC_ClockConfig+0x1f0>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d121      	bne.n	800676a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e0a6      	b.n	8006878 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	2b02      	cmp	r3, #2
 8006730:	d107      	bne.n	8006742 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006732:	4b54      	ldr	r3, [pc, #336]	; (8006884 <HAL_RCC_ClockConfig+0x1f0>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d115      	bne.n	800676a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e09a      	b.n	8006878 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d107      	bne.n	800675a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800674a:	4b4e      	ldr	r3, [pc, #312]	; (8006884 <HAL_RCC_ClockConfig+0x1f0>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0302 	and.w	r3, r3, #2
 8006752:	2b00      	cmp	r3, #0
 8006754:	d109      	bne.n	800676a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e08e      	b.n	8006878 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800675a:	4b4a      	ldr	r3, [pc, #296]	; (8006884 <HAL_RCC_ClockConfig+0x1f0>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e086      	b.n	8006878 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800676a:	4b46      	ldr	r3, [pc, #280]	; (8006884 <HAL_RCC_ClockConfig+0x1f0>)
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f023 0203 	bic.w	r2, r3, #3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	4943      	ldr	r1, [pc, #268]	; (8006884 <HAL_RCC_ClockConfig+0x1f0>)
 8006778:	4313      	orrs	r3, r2
 800677a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800677c:	f7fd faa6 	bl	8003ccc <HAL_GetTick>
 8006780:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006782:	e00a      	b.n	800679a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006784:	f7fd faa2 	bl	8003ccc <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006792:	4293      	cmp	r3, r2
 8006794:	d901      	bls.n	800679a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e06e      	b.n	8006878 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800679a:	4b3a      	ldr	r3, [pc, #232]	; (8006884 <HAL_RCC_ClockConfig+0x1f0>)
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f003 020c 	and.w	r2, r3, #12
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d1eb      	bne.n	8006784 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0302 	and.w	r3, r3, #2
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d010      	beq.n	80067da <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	689a      	ldr	r2, [r3, #8]
 80067bc:	4b31      	ldr	r3, [pc, #196]	; (8006884 <HAL_RCC_ClockConfig+0x1f0>)
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d208      	bcs.n	80067da <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067c8:	4b2e      	ldr	r3, [pc, #184]	; (8006884 <HAL_RCC_ClockConfig+0x1f0>)
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	492b      	ldr	r1, [pc, #172]	; (8006884 <HAL_RCC_ClockConfig+0x1f0>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067da:	4b29      	ldr	r3, [pc, #164]	; (8006880 <HAL_RCC_ClockConfig+0x1ec>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0307 	and.w	r3, r3, #7
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d210      	bcs.n	800680a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067e8:	4b25      	ldr	r3, [pc, #148]	; (8006880 <HAL_RCC_ClockConfig+0x1ec>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f023 0207 	bic.w	r2, r3, #7
 80067f0:	4923      	ldr	r1, [pc, #140]	; (8006880 <HAL_RCC_ClockConfig+0x1ec>)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067f8:	4b21      	ldr	r3, [pc, #132]	; (8006880 <HAL_RCC_ClockConfig+0x1ec>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0307 	and.w	r3, r3, #7
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	429a      	cmp	r2, r3
 8006804:	d001      	beq.n	800680a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e036      	b.n	8006878 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0304 	and.w	r3, r3, #4
 8006812:	2b00      	cmp	r3, #0
 8006814:	d008      	beq.n	8006828 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006816:	4b1b      	ldr	r3, [pc, #108]	; (8006884 <HAL_RCC_ClockConfig+0x1f0>)
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	4918      	ldr	r1, [pc, #96]	; (8006884 <HAL_RCC_ClockConfig+0x1f0>)
 8006824:	4313      	orrs	r3, r2
 8006826:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0308 	and.w	r3, r3, #8
 8006830:	2b00      	cmp	r3, #0
 8006832:	d009      	beq.n	8006848 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006834:	4b13      	ldr	r3, [pc, #76]	; (8006884 <HAL_RCC_ClockConfig+0x1f0>)
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	00db      	lsls	r3, r3, #3
 8006842:	4910      	ldr	r1, [pc, #64]	; (8006884 <HAL_RCC_ClockConfig+0x1f0>)
 8006844:	4313      	orrs	r3, r2
 8006846:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006848:	f000 f824 	bl	8006894 <HAL_RCC_GetSysClockFreq>
 800684c:	4602      	mov	r2, r0
 800684e:	4b0d      	ldr	r3, [pc, #52]	; (8006884 <HAL_RCC_ClockConfig+0x1f0>)
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	091b      	lsrs	r3, r3, #4
 8006854:	f003 030f 	and.w	r3, r3, #15
 8006858:	490b      	ldr	r1, [pc, #44]	; (8006888 <HAL_RCC_ClockConfig+0x1f4>)
 800685a:	5ccb      	ldrb	r3, [r1, r3]
 800685c:	f003 031f 	and.w	r3, r3, #31
 8006860:	fa22 f303 	lsr.w	r3, r2, r3
 8006864:	4a09      	ldr	r2, [pc, #36]	; (800688c <HAL_RCC_ClockConfig+0x1f8>)
 8006866:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006868:	4b09      	ldr	r3, [pc, #36]	; (8006890 <HAL_RCC_ClockConfig+0x1fc>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4618      	mov	r0, r3
 800686e:	f7fd f9dd 	bl	8003c2c <HAL_InitTick>
 8006872:	4603      	mov	r3, r0
 8006874:	72fb      	strb	r3, [r7, #11]

  return status;
 8006876:	7afb      	ldrb	r3, [r7, #11]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	40022000 	.word	0x40022000
 8006884:	40021000 	.word	0x40021000
 8006888:	0800e794 	.word	0x0800e794
 800688c:	20000008 	.word	0x20000008
 8006890:	2000000c 	.word	0x2000000c

08006894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006894:	b480      	push	{r7}
 8006896:	b089      	sub	sp, #36	; 0x24
 8006898:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800689a:	2300      	movs	r3, #0
 800689c:	61fb      	str	r3, [r7, #28]
 800689e:	2300      	movs	r3, #0
 80068a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068a2:	4b3e      	ldr	r3, [pc, #248]	; (800699c <HAL_RCC_GetSysClockFreq+0x108>)
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f003 030c 	and.w	r3, r3, #12
 80068aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068ac:	4b3b      	ldr	r3, [pc, #236]	; (800699c <HAL_RCC_GetSysClockFreq+0x108>)
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	f003 0303 	and.w	r3, r3, #3
 80068b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d005      	beq.n	80068c8 <HAL_RCC_GetSysClockFreq+0x34>
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	2b0c      	cmp	r3, #12
 80068c0:	d121      	bne.n	8006906 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d11e      	bne.n	8006906 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80068c8:	4b34      	ldr	r3, [pc, #208]	; (800699c <HAL_RCC_GetSysClockFreq+0x108>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0308 	and.w	r3, r3, #8
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d107      	bne.n	80068e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80068d4:	4b31      	ldr	r3, [pc, #196]	; (800699c <HAL_RCC_GetSysClockFreq+0x108>)
 80068d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068da:	0a1b      	lsrs	r3, r3, #8
 80068dc:	f003 030f 	and.w	r3, r3, #15
 80068e0:	61fb      	str	r3, [r7, #28]
 80068e2:	e005      	b.n	80068f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80068e4:	4b2d      	ldr	r3, [pc, #180]	; (800699c <HAL_RCC_GetSysClockFreq+0x108>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	091b      	lsrs	r3, r3, #4
 80068ea:	f003 030f 	and.w	r3, r3, #15
 80068ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80068f0:	4a2b      	ldr	r2, [pc, #172]	; (80069a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d10d      	bne.n	800691c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006904:	e00a      	b.n	800691c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	2b04      	cmp	r3, #4
 800690a:	d102      	bne.n	8006912 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800690c:	4b25      	ldr	r3, [pc, #148]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800690e:	61bb      	str	r3, [r7, #24]
 8006910:	e004      	b.n	800691c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	2b08      	cmp	r3, #8
 8006916:	d101      	bne.n	800691c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006918:	4b23      	ldr	r3, [pc, #140]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800691a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	2b0c      	cmp	r3, #12
 8006920:	d134      	bne.n	800698c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006922:	4b1e      	ldr	r3, [pc, #120]	; (800699c <HAL_RCC_GetSysClockFreq+0x108>)
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	f003 0303 	and.w	r3, r3, #3
 800692a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	2b02      	cmp	r3, #2
 8006930:	d003      	beq.n	800693a <HAL_RCC_GetSysClockFreq+0xa6>
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	2b03      	cmp	r3, #3
 8006936:	d003      	beq.n	8006940 <HAL_RCC_GetSysClockFreq+0xac>
 8006938:	e005      	b.n	8006946 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800693a:	4b1a      	ldr	r3, [pc, #104]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800693c:	617b      	str	r3, [r7, #20]
      break;
 800693e:	e005      	b.n	800694c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006940:	4b19      	ldr	r3, [pc, #100]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8006942:	617b      	str	r3, [r7, #20]
      break;
 8006944:	e002      	b.n	800694c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	617b      	str	r3, [r7, #20]
      break;
 800694a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800694c:	4b13      	ldr	r3, [pc, #76]	; (800699c <HAL_RCC_GetSysClockFreq+0x108>)
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	091b      	lsrs	r3, r3, #4
 8006952:	f003 0307 	and.w	r3, r3, #7
 8006956:	3301      	adds	r3, #1
 8006958:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800695a:	4b10      	ldr	r3, [pc, #64]	; (800699c <HAL_RCC_GetSysClockFreq+0x108>)
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	0a1b      	lsrs	r3, r3, #8
 8006960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	fb03 f202 	mul.w	r2, r3, r2
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006970:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006972:	4b0a      	ldr	r3, [pc, #40]	; (800699c <HAL_RCC_GetSysClockFreq+0x108>)
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	0e5b      	lsrs	r3, r3, #25
 8006978:	f003 0303 	and.w	r3, r3, #3
 800697c:	3301      	adds	r3, #1
 800697e:	005b      	lsls	r3, r3, #1
 8006980:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	fbb2 f3f3 	udiv	r3, r2, r3
 800698a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800698c:	69bb      	ldr	r3, [r7, #24]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3724      	adds	r7, #36	; 0x24
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	40021000 	.word	0x40021000
 80069a0:	0800e7ac 	.word	0x0800e7ac
 80069a4:	00f42400 	.word	0x00f42400
 80069a8:	007a1200 	.word	0x007a1200

080069ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069ac:	b480      	push	{r7}
 80069ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069b0:	4b03      	ldr	r3, [pc, #12]	; (80069c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80069b2:	681b      	ldr	r3, [r3, #0]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	20000008 	.word	0x20000008

080069c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80069c8:	f7ff fff0 	bl	80069ac <HAL_RCC_GetHCLKFreq>
 80069cc:	4602      	mov	r2, r0
 80069ce:	4b06      	ldr	r3, [pc, #24]	; (80069e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	0a1b      	lsrs	r3, r3, #8
 80069d4:	f003 0307 	and.w	r3, r3, #7
 80069d8:	4904      	ldr	r1, [pc, #16]	; (80069ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80069da:	5ccb      	ldrb	r3, [r1, r3]
 80069dc:	f003 031f 	and.w	r3, r3, #31
 80069e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	40021000 	.word	0x40021000
 80069ec:	0800e7a4 	.word	0x0800e7a4

080069f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80069f4:	f7ff ffda 	bl	80069ac <HAL_RCC_GetHCLKFreq>
 80069f8:	4602      	mov	r2, r0
 80069fa:	4b06      	ldr	r3, [pc, #24]	; (8006a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	0adb      	lsrs	r3, r3, #11
 8006a00:	f003 0307 	and.w	r3, r3, #7
 8006a04:	4904      	ldr	r1, [pc, #16]	; (8006a18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006a06:	5ccb      	ldrb	r3, [r1, r3]
 8006a08:	f003 031f 	and.w	r3, r3, #31
 8006a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	40021000 	.word	0x40021000
 8006a18:	0800e7a4 	.word	0x0800e7a4

08006a1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006a24:	2300      	movs	r3, #0
 8006a26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006a28:	4b2a      	ldr	r3, [pc, #168]	; (8006ad4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d003      	beq.n	8006a3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006a34:	f7ff f9ee 	bl	8005e14 <HAL_PWREx_GetVoltageRange>
 8006a38:	6178      	str	r0, [r7, #20]
 8006a3a:	e014      	b.n	8006a66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a3c:	4b25      	ldr	r3, [pc, #148]	; (8006ad4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a40:	4a24      	ldr	r2, [pc, #144]	; (8006ad4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a46:	6593      	str	r3, [r2, #88]	; 0x58
 8006a48:	4b22      	ldr	r3, [pc, #136]	; (8006ad4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a50:	60fb      	str	r3, [r7, #12]
 8006a52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006a54:	f7ff f9de 	bl	8005e14 <HAL_PWREx_GetVoltageRange>
 8006a58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006a5a:	4b1e      	ldr	r3, [pc, #120]	; (8006ad4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a5e:	4a1d      	ldr	r2, [pc, #116]	; (8006ad4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a64:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a6c:	d10b      	bne.n	8006a86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2b80      	cmp	r3, #128	; 0x80
 8006a72:	d919      	bls.n	8006aa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2ba0      	cmp	r3, #160	; 0xa0
 8006a78:	d902      	bls.n	8006a80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006a7a:	2302      	movs	r3, #2
 8006a7c:	613b      	str	r3, [r7, #16]
 8006a7e:	e013      	b.n	8006aa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006a80:	2301      	movs	r3, #1
 8006a82:	613b      	str	r3, [r7, #16]
 8006a84:	e010      	b.n	8006aa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2b80      	cmp	r3, #128	; 0x80
 8006a8a:	d902      	bls.n	8006a92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	613b      	str	r3, [r7, #16]
 8006a90:	e00a      	b.n	8006aa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2b80      	cmp	r3, #128	; 0x80
 8006a96:	d102      	bne.n	8006a9e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006a98:	2302      	movs	r3, #2
 8006a9a:	613b      	str	r3, [r7, #16]
 8006a9c:	e004      	b.n	8006aa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2b70      	cmp	r3, #112	; 0x70
 8006aa2:	d101      	bne.n	8006aa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006aa8:	4b0b      	ldr	r3, [pc, #44]	; (8006ad8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f023 0207 	bic.w	r2, r3, #7
 8006ab0:	4909      	ldr	r1, [pc, #36]	; (8006ad8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006ab8:	4b07      	ldr	r3, [pc, #28]	; (8006ad8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0307 	and.w	r3, r3, #7
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d001      	beq.n	8006aca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e000      	b.n	8006acc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3718      	adds	r7, #24
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	40021000 	.word	0x40021000
 8006ad8:	40022000 	.word	0x40022000

08006adc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ae8:	2300      	movs	r3, #0
 8006aea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d041      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006afc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006b00:	d02a      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006b02:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006b06:	d824      	bhi.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006b08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b0c:	d008      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006b0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b12:	d81e      	bhi.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00a      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006b18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b1c:	d010      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006b1e:	e018      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006b20:	4b86      	ldr	r3, [pc, #536]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	4a85      	ldr	r2, [pc, #532]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b2a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006b2c:	e015      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	3304      	adds	r3, #4
 8006b32:	2100      	movs	r1, #0
 8006b34:	4618      	mov	r0, r3
 8006b36:	f000 fabb 	bl	80070b0 <RCCEx_PLLSAI1_Config>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006b3e:	e00c      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	3320      	adds	r3, #32
 8006b44:	2100      	movs	r1, #0
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 fba6 	bl	8007298 <RCCEx_PLLSAI2_Config>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006b50:	e003      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	74fb      	strb	r3, [r7, #19]
      break;
 8006b56:	e000      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006b58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b5a:	7cfb      	ldrb	r3, [r7, #19]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10b      	bne.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b60:	4b76      	ldr	r3, [pc, #472]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b6e:	4973      	ldr	r1, [pc, #460]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b70:	4313      	orrs	r3, r2
 8006b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006b76:	e001      	b.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b78:	7cfb      	ldrb	r3, [r7, #19]
 8006b7a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d041      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b8c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006b90:	d02a      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006b92:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006b96:	d824      	bhi.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006b98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b9c:	d008      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006b9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ba2:	d81e      	bhi.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00a      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bac:	d010      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006bae:	e018      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006bb0:	4b62      	ldr	r3, [pc, #392]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	4a61      	ldr	r2, [pc, #388]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006bbc:	e015      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f000 fa73 	bl	80070b0 <RCCEx_PLLSAI1_Config>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006bce:	e00c      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	3320      	adds	r3, #32
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 fb5e 	bl	8007298 <RCCEx_PLLSAI2_Config>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006be0:	e003      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	74fb      	strb	r3, [r7, #19]
      break;
 8006be6:	e000      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006be8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bea:	7cfb      	ldrb	r3, [r7, #19]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10b      	bne.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006bf0:	4b52      	ldr	r3, [pc, #328]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bf6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bfe:	494f      	ldr	r1, [pc, #316]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006c06:	e001      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c08:	7cfb      	ldrb	r3, [r7, #19]
 8006c0a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 80a0 	beq.w	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006c1e:	4b47      	ldr	r3, [pc, #284]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d101      	bne.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e000      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006c2e:	2300      	movs	r3, #0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00d      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c34:	4b41      	ldr	r3, [pc, #260]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c38:	4a40      	ldr	r2, [pc, #256]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c3e:	6593      	str	r3, [r2, #88]	; 0x58
 8006c40:	4b3e      	ldr	r3, [pc, #248]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c48:	60bb      	str	r3, [r7, #8]
 8006c4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c50:	4b3b      	ldr	r3, [pc, #236]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a3a      	ldr	r2, [pc, #232]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c5c:	f7fd f836 	bl	8003ccc <HAL_GetTick>
 8006c60:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006c62:	e009      	b.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c64:	f7fd f832 	bl	8003ccc <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d902      	bls.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	74fb      	strb	r3, [r7, #19]
        break;
 8006c76:	e005      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006c78:	4b31      	ldr	r3, [pc, #196]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d0ef      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006c84:	7cfb      	ldrb	r3, [r7, #19]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d15c      	bne.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006c8a:	4b2c      	ldr	r3, [pc, #176]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c94:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d01f      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d019      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006ca8:	4b24      	ldr	r3, [pc, #144]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cb2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006cb4:	4b21      	ldr	r3, [pc, #132]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cba:	4a20      	ldr	r2, [pc, #128]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006cc4:	4b1d      	ldr	r3, [pc, #116]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cca:	4a1c      	ldr	r2, [pc, #112]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006cd4:	4a19      	ldr	r2, [pc, #100]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	f003 0301 	and.w	r3, r3, #1
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d016      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce6:	f7fc fff1 	bl	8003ccc <HAL_GetTick>
 8006cea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cec:	e00b      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cee:	f7fc ffed 	bl	8003ccc <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d902      	bls.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	74fb      	strb	r3, [r7, #19]
            break;
 8006d04:	e006      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d06:	4b0d      	ldr	r3, [pc, #52]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d0c:	f003 0302 	and.w	r3, r3, #2
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d0ec      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006d14:	7cfb      	ldrb	r3, [r7, #19]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10c      	bne.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d1a:	4b08      	ldr	r3, [pc, #32]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d2a:	4904      	ldr	r1, [pc, #16]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006d32:	e009      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d34:	7cfb      	ldrb	r3, [r7, #19]
 8006d36:	74bb      	strb	r3, [r7, #18]
 8006d38:	e006      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006d3a:	bf00      	nop
 8006d3c:	40021000 	.word	0x40021000
 8006d40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d44:	7cfb      	ldrb	r3, [r7, #19]
 8006d46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d48:	7c7b      	ldrb	r3, [r7, #17]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d105      	bne.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d4e:	4b9e      	ldr	r3, [pc, #632]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d52:	4a9d      	ldr	r2, [pc, #628]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d58:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00a      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d66:	4b98      	ldr	r3, [pc, #608]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d6c:	f023 0203 	bic.w	r2, r3, #3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d74:	4994      	ldr	r1, [pc, #592]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 0302 	and.w	r3, r3, #2
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00a      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d88:	4b8f      	ldr	r3, [pc, #572]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d8e:	f023 020c 	bic.w	r2, r3, #12
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d96:	498c      	ldr	r1, [pc, #560]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0304 	and.w	r3, r3, #4
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00a      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006daa:	4b87      	ldr	r3, [pc, #540]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db8:	4983      	ldr	r1, [pc, #524]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0308 	and.w	r3, r3, #8
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00a      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006dcc:	4b7e      	ldr	r3, [pc, #504]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dd2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dda:	497b      	ldr	r1, [pc, #492]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 0310 	and.w	r3, r3, #16
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00a      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006dee:	4b76      	ldr	r3, [pc, #472]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006df4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dfc:	4972      	ldr	r1, [pc, #456]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0320 	and.w	r3, r3, #32
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00a      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e10:	4b6d      	ldr	r3, [pc, #436]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e1e:	496a      	ldr	r1, [pc, #424]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00a      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e32:	4b65      	ldr	r3, [pc, #404]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e40:	4961      	ldr	r1, [pc, #388]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00a      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e54:	4b5c      	ldr	r3, [pc, #368]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e62:	4959      	ldr	r1, [pc, #356]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e64:	4313      	orrs	r3, r2
 8006e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00a      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e76:	4b54      	ldr	r3, [pc, #336]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e7c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e84:	4950      	ldr	r1, [pc, #320]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00a      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006e98:	4b4b      	ldr	r3, [pc, #300]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e9e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ea6:	4948      	ldr	r1, [pc, #288]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00a      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006eba:	4b43      	ldr	r3, [pc, #268]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ec0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec8:	493f      	ldr	r1, [pc, #252]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d028      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006edc:	4b3a      	ldr	r3, [pc, #232]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ee2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006eea:	4937      	ldr	r1, [pc, #220]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006eec:	4313      	orrs	r3, r2
 8006eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ef6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006efa:	d106      	bne.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006efc:	4b32      	ldr	r3, [pc, #200]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	4a31      	ldr	r2, [pc, #196]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f06:	60d3      	str	r3, [r2, #12]
 8006f08:	e011      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f12:	d10c      	bne.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	3304      	adds	r3, #4
 8006f18:	2101      	movs	r1, #1
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 f8c8 	bl	80070b0 <RCCEx_PLLSAI1_Config>
 8006f20:	4603      	mov	r3, r0
 8006f22:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006f24:	7cfb      	ldrb	r3, [r7, #19]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006f2a:	7cfb      	ldrb	r3, [r7, #19]
 8006f2c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d028      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006f3a:	4b23      	ldr	r3, [pc, #140]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f40:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f48:	491f      	ldr	r1, [pc, #124]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f58:	d106      	bne.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f5a:	4b1b      	ldr	r3, [pc, #108]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	4a1a      	ldr	r2, [pc, #104]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f64:	60d3      	str	r3, [r2, #12]
 8006f66:	e011      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f70:	d10c      	bne.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	3304      	adds	r3, #4
 8006f76:	2101      	movs	r1, #1
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f000 f899 	bl	80070b0 <RCCEx_PLLSAI1_Config>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006f82:	7cfb      	ldrb	r3, [r7, #19]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d001      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006f88:	7cfb      	ldrb	r3, [r7, #19]
 8006f8a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d02b      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f98:	4b0b      	ldr	r3, [pc, #44]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fa6:	4908      	ldr	r1, [pc, #32]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fb6:	d109      	bne.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fb8:	4b03      	ldr	r3, [pc, #12]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	4a02      	ldr	r2, [pc, #8]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fc2:	60d3      	str	r3, [r2, #12]
 8006fc4:	e014      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006fc6:	bf00      	nop
 8006fc8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fd4:	d10c      	bne.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	3304      	adds	r3, #4
 8006fda:	2101      	movs	r1, #1
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f000 f867 	bl	80070b0 <RCCEx_PLLSAI1_Config>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006fe6:	7cfb      	ldrb	r3, [r7, #19]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d001      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006fec:	7cfb      	ldrb	r3, [r7, #19]
 8006fee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d02f      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ffc:	4b2b      	ldr	r3, [pc, #172]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007002:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800700a:	4928      	ldr	r1, [pc, #160]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800700c:	4313      	orrs	r3, r2
 800700e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007016:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800701a:	d10d      	bne.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	3304      	adds	r3, #4
 8007020:	2102      	movs	r1, #2
 8007022:	4618      	mov	r0, r3
 8007024:	f000 f844 	bl	80070b0 <RCCEx_PLLSAI1_Config>
 8007028:	4603      	mov	r3, r0
 800702a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800702c:	7cfb      	ldrb	r3, [r7, #19]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d014      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007032:	7cfb      	ldrb	r3, [r7, #19]
 8007034:	74bb      	strb	r3, [r7, #18]
 8007036:	e011      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800703c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007040:	d10c      	bne.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	3320      	adds	r3, #32
 8007046:	2102      	movs	r1, #2
 8007048:	4618      	mov	r0, r3
 800704a:	f000 f925 	bl	8007298 <RCCEx_PLLSAI2_Config>
 800704e:	4603      	mov	r3, r0
 8007050:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007052:	7cfb      	ldrb	r3, [r7, #19]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d001      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007058:	7cfb      	ldrb	r3, [r7, #19]
 800705a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00a      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007068:	4b10      	ldr	r3, [pc, #64]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800706a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800706e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007076:	490d      	ldr	r1, [pc, #52]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007078:	4313      	orrs	r3, r2
 800707a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00b      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800708a:	4b08      	ldr	r3, [pc, #32]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800708c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007090:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800709a:	4904      	ldr	r1, [pc, #16]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800709c:	4313      	orrs	r3, r2
 800709e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80070a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3718      	adds	r7, #24
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	40021000 	.word	0x40021000

080070b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80070ba:	2300      	movs	r3, #0
 80070bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80070be:	4b75      	ldr	r3, [pc, #468]	; (8007294 <RCCEx_PLLSAI1_Config+0x1e4>)
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	f003 0303 	and.w	r3, r3, #3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d018      	beq.n	80070fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80070ca:	4b72      	ldr	r3, [pc, #456]	; (8007294 <RCCEx_PLLSAI1_Config+0x1e4>)
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	f003 0203 	and.w	r2, r3, #3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d10d      	bne.n	80070f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
       ||
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d009      	beq.n	80070f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80070e2:	4b6c      	ldr	r3, [pc, #432]	; (8007294 <RCCEx_PLLSAI1_Config+0x1e4>)
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	091b      	lsrs	r3, r3, #4
 80070e8:	f003 0307 	and.w	r3, r3, #7
 80070ec:	1c5a      	adds	r2, r3, #1
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
       ||
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d047      	beq.n	8007186 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	73fb      	strb	r3, [r7, #15]
 80070fa:	e044      	b.n	8007186 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2b03      	cmp	r3, #3
 8007102:	d018      	beq.n	8007136 <RCCEx_PLLSAI1_Config+0x86>
 8007104:	2b03      	cmp	r3, #3
 8007106:	d825      	bhi.n	8007154 <RCCEx_PLLSAI1_Config+0xa4>
 8007108:	2b01      	cmp	r3, #1
 800710a:	d002      	beq.n	8007112 <RCCEx_PLLSAI1_Config+0x62>
 800710c:	2b02      	cmp	r3, #2
 800710e:	d009      	beq.n	8007124 <RCCEx_PLLSAI1_Config+0x74>
 8007110:	e020      	b.n	8007154 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007112:	4b60      	ldr	r3, [pc, #384]	; (8007294 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0302 	and.w	r3, r3, #2
 800711a:	2b00      	cmp	r3, #0
 800711c:	d11d      	bne.n	800715a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007122:	e01a      	b.n	800715a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007124:	4b5b      	ldr	r3, [pc, #364]	; (8007294 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800712c:	2b00      	cmp	r3, #0
 800712e:	d116      	bne.n	800715e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007134:	e013      	b.n	800715e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007136:	4b57      	ldr	r3, [pc, #348]	; (8007294 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d10f      	bne.n	8007162 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007142:	4b54      	ldr	r3, [pc, #336]	; (8007294 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d109      	bne.n	8007162 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007152:	e006      	b.n	8007162 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	73fb      	strb	r3, [r7, #15]
      break;
 8007158:	e004      	b.n	8007164 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800715a:	bf00      	nop
 800715c:	e002      	b.n	8007164 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800715e:	bf00      	nop
 8007160:	e000      	b.n	8007164 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007162:	bf00      	nop
    }

    if(status == HAL_OK)
 8007164:	7bfb      	ldrb	r3, [r7, #15]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10d      	bne.n	8007186 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800716a:	4b4a      	ldr	r3, [pc, #296]	; (8007294 <RCCEx_PLLSAI1_Config+0x1e4>)
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6819      	ldr	r1, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	3b01      	subs	r3, #1
 800717c:	011b      	lsls	r3, r3, #4
 800717e:	430b      	orrs	r3, r1
 8007180:	4944      	ldr	r1, [pc, #272]	; (8007294 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007182:	4313      	orrs	r3, r2
 8007184:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007186:	7bfb      	ldrb	r3, [r7, #15]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d17d      	bne.n	8007288 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800718c:	4b41      	ldr	r3, [pc, #260]	; (8007294 <RCCEx_PLLSAI1_Config+0x1e4>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a40      	ldr	r2, [pc, #256]	; (8007294 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007192:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007196:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007198:	f7fc fd98 	bl	8003ccc <HAL_GetTick>
 800719c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800719e:	e009      	b.n	80071b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80071a0:	f7fc fd94 	bl	8003ccc <HAL_GetTick>
 80071a4:	4602      	mov	r2, r0
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d902      	bls.n	80071b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	73fb      	strb	r3, [r7, #15]
        break;
 80071b2:	e005      	b.n	80071c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80071b4:	4b37      	ldr	r3, [pc, #220]	; (8007294 <RCCEx_PLLSAI1_Config+0x1e4>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1ef      	bne.n	80071a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80071c0:	7bfb      	ldrb	r3, [r7, #15]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d160      	bne.n	8007288 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d111      	bne.n	80071f0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80071cc:	4b31      	ldr	r3, [pc, #196]	; (8007294 <RCCEx_PLLSAI1_Config+0x1e4>)
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80071d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	6892      	ldr	r2, [r2, #8]
 80071dc:	0211      	lsls	r1, r2, #8
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	68d2      	ldr	r2, [r2, #12]
 80071e2:	0912      	lsrs	r2, r2, #4
 80071e4:	0452      	lsls	r2, r2, #17
 80071e6:	430a      	orrs	r2, r1
 80071e8:	492a      	ldr	r1, [pc, #168]	; (8007294 <RCCEx_PLLSAI1_Config+0x1e4>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	610b      	str	r3, [r1, #16]
 80071ee:	e027      	b.n	8007240 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d112      	bne.n	800721c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80071f6:	4b27      	ldr	r3, [pc, #156]	; (8007294 <RCCEx_PLLSAI1_Config+0x1e4>)
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80071fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	6892      	ldr	r2, [r2, #8]
 8007206:	0211      	lsls	r1, r2, #8
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	6912      	ldr	r2, [r2, #16]
 800720c:	0852      	lsrs	r2, r2, #1
 800720e:	3a01      	subs	r2, #1
 8007210:	0552      	lsls	r2, r2, #21
 8007212:	430a      	orrs	r2, r1
 8007214:	491f      	ldr	r1, [pc, #124]	; (8007294 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007216:	4313      	orrs	r3, r2
 8007218:	610b      	str	r3, [r1, #16]
 800721a:	e011      	b.n	8007240 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800721c:	4b1d      	ldr	r3, [pc, #116]	; (8007294 <RCCEx_PLLSAI1_Config+0x1e4>)
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007224:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	6892      	ldr	r2, [r2, #8]
 800722c:	0211      	lsls	r1, r2, #8
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	6952      	ldr	r2, [r2, #20]
 8007232:	0852      	lsrs	r2, r2, #1
 8007234:	3a01      	subs	r2, #1
 8007236:	0652      	lsls	r2, r2, #25
 8007238:	430a      	orrs	r2, r1
 800723a:	4916      	ldr	r1, [pc, #88]	; (8007294 <RCCEx_PLLSAI1_Config+0x1e4>)
 800723c:	4313      	orrs	r3, r2
 800723e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007240:	4b14      	ldr	r3, [pc, #80]	; (8007294 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a13      	ldr	r2, [pc, #76]	; (8007294 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007246:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800724a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800724c:	f7fc fd3e 	bl	8003ccc <HAL_GetTick>
 8007250:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007252:	e009      	b.n	8007268 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007254:	f7fc fd3a 	bl	8003ccc <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	2b02      	cmp	r3, #2
 8007260:	d902      	bls.n	8007268 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	73fb      	strb	r3, [r7, #15]
          break;
 8007266:	e005      	b.n	8007274 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007268:	4b0a      	ldr	r3, [pc, #40]	; (8007294 <RCCEx_PLLSAI1_Config+0x1e4>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d0ef      	beq.n	8007254 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007274:	7bfb      	ldrb	r3, [r7, #15]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d106      	bne.n	8007288 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800727a:	4b06      	ldr	r3, [pc, #24]	; (8007294 <RCCEx_PLLSAI1_Config+0x1e4>)
 800727c:	691a      	ldr	r2, [r3, #16]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	4904      	ldr	r1, [pc, #16]	; (8007294 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007284:	4313      	orrs	r3, r2
 8007286:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007288:	7bfb      	ldrb	r3, [r7, #15]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	40021000 	.word	0x40021000

08007298 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072a2:	2300      	movs	r3, #0
 80072a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80072a6:	4b6a      	ldr	r3, [pc, #424]	; (8007450 <RCCEx_PLLSAI2_Config+0x1b8>)
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	f003 0303 	and.w	r3, r3, #3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d018      	beq.n	80072e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80072b2:	4b67      	ldr	r3, [pc, #412]	; (8007450 <RCCEx_PLLSAI2_Config+0x1b8>)
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	f003 0203 	and.w	r2, r3, #3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d10d      	bne.n	80072de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
       ||
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d009      	beq.n	80072de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80072ca:	4b61      	ldr	r3, [pc, #388]	; (8007450 <RCCEx_PLLSAI2_Config+0x1b8>)
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	091b      	lsrs	r3, r3, #4
 80072d0:	f003 0307 	and.w	r3, r3, #7
 80072d4:	1c5a      	adds	r2, r3, #1
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
       ||
 80072da:	429a      	cmp	r2, r3
 80072dc:	d047      	beq.n	800736e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	73fb      	strb	r3, [r7, #15]
 80072e2:	e044      	b.n	800736e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2b03      	cmp	r3, #3
 80072ea:	d018      	beq.n	800731e <RCCEx_PLLSAI2_Config+0x86>
 80072ec:	2b03      	cmp	r3, #3
 80072ee:	d825      	bhi.n	800733c <RCCEx_PLLSAI2_Config+0xa4>
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d002      	beq.n	80072fa <RCCEx_PLLSAI2_Config+0x62>
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d009      	beq.n	800730c <RCCEx_PLLSAI2_Config+0x74>
 80072f8:	e020      	b.n	800733c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80072fa:	4b55      	ldr	r3, [pc, #340]	; (8007450 <RCCEx_PLLSAI2_Config+0x1b8>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 0302 	and.w	r3, r3, #2
 8007302:	2b00      	cmp	r3, #0
 8007304:	d11d      	bne.n	8007342 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800730a:	e01a      	b.n	8007342 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800730c:	4b50      	ldr	r3, [pc, #320]	; (8007450 <RCCEx_PLLSAI2_Config+0x1b8>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007314:	2b00      	cmp	r3, #0
 8007316:	d116      	bne.n	8007346 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800731c:	e013      	b.n	8007346 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800731e:	4b4c      	ldr	r3, [pc, #304]	; (8007450 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10f      	bne.n	800734a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800732a:	4b49      	ldr	r3, [pc, #292]	; (8007450 <RCCEx_PLLSAI2_Config+0x1b8>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d109      	bne.n	800734a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800733a:	e006      	b.n	800734a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	73fb      	strb	r3, [r7, #15]
      break;
 8007340:	e004      	b.n	800734c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007342:	bf00      	nop
 8007344:	e002      	b.n	800734c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007346:	bf00      	nop
 8007348:	e000      	b.n	800734c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800734a:	bf00      	nop
    }

    if(status == HAL_OK)
 800734c:	7bfb      	ldrb	r3, [r7, #15]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d10d      	bne.n	800736e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007352:	4b3f      	ldr	r3, [pc, #252]	; (8007450 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6819      	ldr	r1, [r3, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	3b01      	subs	r3, #1
 8007364:	011b      	lsls	r3, r3, #4
 8007366:	430b      	orrs	r3, r1
 8007368:	4939      	ldr	r1, [pc, #228]	; (8007450 <RCCEx_PLLSAI2_Config+0x1b8>)
 800736a:	4313      	orrs	r3, r2
 800736c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800736e:	7bfb      	ldrb	r3, [r7, #15]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d167      	bne.n	8007444 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007374:	4b36      	ldr	r3, [pc, #216]	; (8007450 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a35      	ldr	r2, [pc, #212]	; (8007450 <RCCEx_PLLSAI2_Config+0x1b8>)
 800737a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800737e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007380:	f7fc fca4 	bl	8003ccc <HAL_GetTick>
 8007384:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007386:	e009      	b.n	800739c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007388:	f7fc fca0 	bl	8003ccc <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	2b02      	cmp	r3, #2
 8007394:	d902      	bls.n	800739c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	73fb      	strb	r3, [r7, #15]
        break;
 800739a:	e005      	b.n	80073a8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800739c:	4b2c      	ldr	r3, [pc, #176]	; (8007450 <RCCEx_PLLSAI2_Config+0x1b8>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1ef      	bne.n	8007388 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d14a      	bne.n	8007444 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d111      	bne.n	80073d8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80073b4:	4b26      	ldr	r3, [pc, #152]	; (8007450 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073b6:	695b      	ldr	r3, [r3, #20]
 80073b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80073bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	6892      	ldr	r2, [r2, #8]
 80073c4:	0211      	lsls	r1, r2, #8
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	68d2      	ldr	r2, [r2, #12]
 80073ca:	0912      	lsrs	r2, r2, #4
 80073cc:	0452      	lsls	r2, r2, #17
 80073ce:	430a      	orrs	r2, r1
 80073d0:	491f      	ldr	r1, [pc, #124]	; (8007450 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	614b      	str	r3, [r1, #20]
 80073d6:	e011      	b.n	80073fc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80073d8:	4b1d      	ldr	r3, [pc, #116]	; (8007450 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073da:	695b      	ldr	r3, [r3, #20]
 80073dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80073e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	6892      	ldr	r2, [r2, #8]
 80073e8:	0211      	lsls	r1, r2, #8
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	6912      	ldr	r2, [r2, #16]
 80073ee:	0852      	lsrs	r2, r2, #1
 80073f0:	3a01      	subs	r2, #1
 80073f2:	0652      	lsls	r2, r2, #25
 80073f4:	430a      	orrs	r2, r1
 80073f6:	4916      	ldr	r1, [pc, #88]	; (8007450 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073f8:	4313      	orrs	r3, r2
 80073fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80073fc:	4b14      	ldr	r3, [pc, #80]	; (8007450 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a13      	ldr	r2, [pc, #76]	; (8007450 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007406:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007408:	f7fc fc60 	bl	8003ccc <HAL_GetTick>
 800740c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800740e:	e009      	b.n	8007424 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007410:	f7fc fc5c 	bl	8003ccc <HAL_GetTick>
 8007414:	4602      	mov	r2, r0
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	2b02      	cmp	r3, #2
 800741c:	d902      	bls.n	8007424 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800741e:	2303      	movs	r3, #3
 8007420:	73fb      	strb	r3, [r7, #15]
          break;
 8007422:	e005      	b.n	8007430 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007424:	4b0a      	ldr	r3, [pc, #40]	; (8007450 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d0ef      	beq.n	8007410 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007430:	7bfb      	ldrb	r3, [r7, #15]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d106      	bne.n	8007444 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007436:	4b06      	ldr	r3, [pc, #24]	; (8007450 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007438:	695a      	ldr	r2, [r3, #20]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	4904      	ldr	r1, [pc, #16]	; (8007450 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007440:	4313      	orrs	r3, r2
 8007442:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007444:	7bfb      	ldrb	r3, [r7, #15]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	40021000 	.word	0x40021000

08007454 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d101      	bne.n	8007466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e040      	b.n	80074e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800746a:	2b00      	cmp	r3, #0
 800746c:	d106      	bne.n	800747c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f7fc f9bc 	bl	80037f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2224      	movs	r2, #36	; 0x24
 8007480:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f022 0201 	bic.w	r2, r2, #1
 8007490:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fd12 	bl	8007ebc <UART_SetConfig>
 8007498:	4603      	mov	r3, r0
 800749a:	2b01      	cmp	r3, #1
 800749c:	d101      	bne.n	80074a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e022      	b.n	80074e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d002      	beq.n	80074b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 ffbe 	bl	800842c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	689a      	ldr	r2, [r3, #8]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f042 0201 	orr.w	r2, r2, #1
 80074de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f001 f845 	bl	8008570 <UART_CheckIdleState>
 80074e6:	4603      	mov	r3, r0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3708      	adds	r7, #8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d101      	bne.n	8007502 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e048      	b.n	8007594 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007506:	2b00      	cmp	r3, #0
 8007508:	d106      	bne.n	8007518 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f7fc f96e 	bl	80037f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2224      	movs	r2, #36	; 0x24
 800751c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f022 0201 	bic.w	r2, r2, #1
 800752c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 fcc4 	bl	8007ebc <UART_SetConfig>
 8007534:	4603      	mov	r3, r0
 8007536:	2b01      	cmp	r3, #1
 8007538:	d101      	bne.n	800753e <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e02a      	b.n	8007594 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007542:	2b00      	cmp	r3, #0
 8007544:	d002      	beq.n	800754c <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 ff70 	bl	800842c <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	685a      	ldr	r2, [r3, #4]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800755a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	689a      	ldr	r2, [r3, #8]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800756a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689a      	ldr	r2, [r3, #8]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f042 0208 	orr.w	r2, r2, #8
 800757a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f042 0201 	orr.w	r2, r2, #1
 800758a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 ffef 	bl	8008570 <UART_CheckIdleState>
 8007592:	4603      	mov	r3, r0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b08a      	sub	sp, #40	; 0x28
 80075a0:	af02      	add	r7, sp, #8
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	603b      	str	r3, [r7, #0]
 80075a8:	4613      	mov	r3, r2
 80075aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075b0:	2b20      	cmp	r3, #32
 80075b2:	f040 8082 	bne.w	80076ba <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d002      	beq.n	80075c2 <HAL_UART_Transmit+0x26>
 80075bc:	88fb      	ldrh	r3, [r7, #6]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d101      	bne.n	80075c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	e07a      	b.n	80076bc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d101      	bne.n	80075d4 <HAL_UART_Transmit+0x38>
 80075d0:	2302      	movs	r3, #2
 80075d2:	e073      	b.n	80076bc <HAL_UART_Transmit+0x120>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2221      	movs	r2, #33	; 0x21
 80075e8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075ea:	f7fc fb6f 	bl	8003ccc <HAL_GetTick>
 80075ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	88fa      	ldrh	r2, [r7, #6]
 80075f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	88fa      	ldrh	r2, [r7, #6]
 80075fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007608:	d108      	bne.n	800761c <HAL_UART_Transmit+0x80>
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d104      	bne.n	800761c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007612:	2300      	movs	r3, #0
 8007614:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	61bb      	str	r3, [r7, #24]
 800761a:	e003      	b.n	8007624 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007620:	2300      	movs	r3, #0
 8007622:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800762c:	e02d      	b.n	800768a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	2200      	movs	r2, #0
 8007636:	2180      	movs	r1, #128	; 0x80
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f000 ffe2 	bl	8008602 <UART_WaitOnFlagUntilTimeout>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d001      	beq.n	8007648 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007644:	2303      	movs	r3, #3
 8007646:	e039      	b.n	80076bc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d10b      	bne.n	8007666 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	881a      	ldrh	r2, [r3, #0]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800765a:	b292      	uxth	r2, r2
 800765c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	3302      	adds	r3, #2
 8007662:	61bb      	str	r3, [r7, #24]
 8007664:	e008      	b.n	8007678 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	781a      	ldrb	r2, [r3, #0]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	b292      	uxth	r2, r2
 8007670:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	3301      	adds	r3, #1
 8007676:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800767e:	b29b      	uxth	r3, r3
 8007680:	3b01      	subs	r3, #1
 8007682:	b29a      	uxth	r2, r3
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007690:	b29b      	uxth	r3, r3
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1cb      	bne.n	800762e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	2200      	movs	r2, #0
 800769e:	2140      	movs	r1, #64	; 0x40
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f000 ffae 	bl	8008602 <UART_WaitOnFlagUntilTimeout>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d001      	beq.n	80076b0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80076ac:	2303      	movs	r3, #3
 80076ae:	e005      	b.n	80076bc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2220      	movs	r2, #32
 80076b4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	e000      	b.n	80076bc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80076ba:	2302      	movs	r3, #2
  }
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3720      	adds	r7, #32
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b08a      	sub	sp, #40	; 0x28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	4613      	mov	r3, r2
 80076d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076d6:	2b20      	cmp	r3, #32
 80076d8:	d142      	bne.n	8007760 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d002      	beq.n	80076e6 <HAL_UART_Receive_IT+0x22>
 80076e0:	88fb      	ldrh	r3, [r7, #6]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d101      	bne.n	80076ea <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e03b      	b.n	8007762 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d101      	bne.n	80076f8 <HAL_UART_Receive_IT+0x34>
 80076f4:	2302      	movs	r3, #2
 80076f6:	e034      	b.n	8007762 <HAL_UART_Receive_IT+0x9e>
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a18      	ldr	r2, [pc, #96]	; (800776c <HAL_UART_Receive_IT+0xa8>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d01f      	beq.n	8007750 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800771a:	2b00      	cmp	r3, #0
 800771c:	d018      	beq.n	8007750 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	e853 3f00 	ldrex	r3, [r3]
 800772a:	613b      	str	r3, [r7, #16]
   return(result);
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007732:	627b      	str	r3, [r7, #36]	; 0x24
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	461a      	mov	r2, r3
 800773a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773c:	623b      	str	r3, [r7, #32]
 800773e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007740:	69f9      	ldr	r1, [r7, #28]
 8007742:	6a3a      	ldr	r2, [r7, #32]
 8007744:	e841 2300 	strex	r3, r2, [r1]
 8007748:	61bb      	str	r3, [r7, #24]
   return(result);
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1e6      	bne.n	800771e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007750:	88fb      	ldrh	r3, [r7, #6]
 8007752:	461a      	mov	r2, r3
 8007754:	68b9      	ldr	r1, [r7, #8]
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	f001 f818 	bl	800878c <UART_Start_Receive_IT>
 800775c:	4603      	mov	r3, r0
 800775e:	e000      	b.n	8007762 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007760:	2302      	movs	r3, #2
  }
}
 8007762:	4618      	mov	r0, r3
 8007764:	3728      	adds	r7, #40	; 0x28
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	40008000 	.word	0x40008000

08007770 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b0ba      	sub	sp, #232	; 0xe8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	69db      	ldr	r3, [r3, #28]
 800777e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007796:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800779a:	f640 030f 	movw	r3, #2063	; 0x80f
 800779e:	4013      	ands	r3, r2
 80077a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80077a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d115      	bne.n	80077d8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80077ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077b0:	f003 0320 	and.w	r3, r3, #32
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00f      	beq.n	80077d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80077b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077bc:	f003 0320 	and.w	r3, r3, #32
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d009      	beq.n	80077d8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 82a6 	beq.w	8007d1a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	4798      	blx	r3
      }
      return;
 80077d6:	e2a0      	b.n	8007d1a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80077d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f000 8117 	beq.w	8007a10 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80077e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077e6:	f003 0301 	and.w	r3, r3, #1
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d106      	bne.n	80077fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80077ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80077f2:	4b85      	ldr	r3, [pc, #532]	; (8007a08 <HAL_UART_IRQHandler+0x298>)
 80077f4:	4013      	ands	r3, r2
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f000 810a 	beq.w	8007a10 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007800:	f003 0301 	and.w	r3, r3, #1
 8007804:	2b00      	cmp	r3, #0
 8007806:	d011      	beq.n	800782c <HAL_UART_IRQHandler+0xbc>
 8007808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800780c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00b      	beq.n	800782c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2201      	movs	r2, #1
 800781a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007822:	f043 0201 	orr.w	r2, r3, #1
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800782c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007830:	f003 0302 	and.w	r3, r3, #2
 8007834:	2b00      	cmp	r3, #0
 8007836:	d011      	beq.n	800785c <HAL_UART_IRQHandler+0xec>
 8007838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00b      	beq.n	800785c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2202      	movs	r2, #2
 800784a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007852:	f043 0204 	orr.w	r2, r3, #4
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800785c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007860:	f003 0304 	and.w	r3, r3, #4
 8007864:	2b00      	cmp	r3, #0
 8007866:	d011      	beq.n	800788c <HAL_UART_IRQHandler+0x11c>
 8007868:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800786c:	f003 0301 	and.w	r3, r3, #1
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00b      	beq.n	800788c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2204      	movs	r2, #4
 800787a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007882:	f043 0202 	orr.w	r2, r3, #2
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800788c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007890:	f003 0308 	and.w	r3, r3, #8
 8007894:	2b00      	cmp	r3, #0
 8007896:	d017      	beq.n	80078c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800789c:	f003 0320 	and.w	r3, r3, #32
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d105      	bne.n	80078b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80078a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00b      	beq.n	80078c8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2208      	movs	r2, #8
 80078b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078be:	f043 0208 	orr.w	r2, r3, #8
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80078c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d012      	beq.n	80078fa <HAL_UART_IRQHandler+0x18a>
 80078d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00c      	beq.n	80078fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078f0:	f043 0220 	orr.w	r2, r3, #32
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007900:	2b00      	cmp	r3, #0
 8007902:	f000 820c 	beq.w	8007d1e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800790a:	f003 0320 	and.w	r3, r3, #32
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00d      	beq.n	800792e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007916:	f003 0320 	and.w	r3, r3, #32
 800791a:	2b00      	cmp	r3, #0
 800791c:	d007      	beq.n	800792e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007922:	2b00      	cmp	r3, #0
 8007924:	d003      	beq.n	800792e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007934:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007942:	2b40      	cmp	r3, #64	; 0x40
 8007944:	d005      	beq.n	8007952 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007946:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800794a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800794e:	2b00      	cmp	r3, #0
 8007950:	d04f      	beq.n	80079f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 ffe4 	bl	8008920 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007962:	2b40      	cmp	r3, #64	; 0x40
 8007964:	d141      	bne.n	80079ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	3308      	adds	r3, #8
 800796c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007970:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007974:	e853 3f00 	ldrex	r3, [r3]
 8007978:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800797c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007984:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	3308      	adds	r3, #8
 800798e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007992:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007996:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800799e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80079a2:	e841 2300 	strex	r3, r2, [r1]
 80079a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80079aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1d9      	bne.n	8007966 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d013      	beq.n	80079e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079be:	4a13      	ldr	r2, [pc, #76]	; (8007a0c <HAL_UART_IRQHandler+0x29c>)
 80079c0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7fd ff10 	bl	80057ec <HAL_DMA_Abort_IT>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d017      	beq.n	8007a02 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80079dc:	4610      	mov	r0, r2
 80079de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079e0:	e00f      	b.n	8007a02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f9b0 	bl	8007d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079e8:	e00b      	b.n	8007a02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f9ac 	bl	8007d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079f0:	e007      	b.n	8007a02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f9a8 	bl	8007d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007a00:	e18d      	b.n	8007d1e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a02:	bf00      	nop
    return;
 8007a04:	e18b      	b.n	8007d1e <HAL_UART_IRQHandler+0x5ae>
 8007a06:	bf00      	nop
 8007a08:	04000120 	.word	0x04000120
 8007a0c:	080089e7 	.word	0x080089e7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	f040 8146 	bne.w	8007ca6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a1e:	f003 0310 	and.w	r3, r3, #16
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f000 813f 	beq.w	8007ca6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a2c:	f003 0310 	and.w	r3, r3, #16
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f000 8138 	beq.w	8007ca6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2210      	movs	r2, #16
 8007a3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a48:	2b40      	cmp	r3, #64	; 0x40
 8007a4a:	f040 80b4 	bne.w	8007bb6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a5a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	f000 815f 	beq.w	8007d22 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	f080 8157 	bcs.w	8007d22 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 0320 	and.w	r3, r3, #32
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f040 8085 	bne.w	8007b9a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a9c:	e853 3f00 	ldrex	r3, [r3]
 8007aa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007aa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007aa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007aac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007aba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007abe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007ac6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007aca:	e841 2300 	strex	r3, r2, [r1]
 8007ace:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1da      	bne.n	8007a90 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	3308      	adds	r3, #8
 8007ae0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ae4:	e853 3f00 	ldrex	r3, [r3]
 8007ae8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007aea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007aec:	f023 0301 	bic.w	r3, r3, #1
 8007af0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	3308      	adds	r3, #8
 8007afa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007afe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007b02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b0a:	e841 2300 	strex	r3, r2, [r1]
 8007b0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1e1      	bne.n	8007ada <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3308      	adds	r3, #8
 8007b1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b20:	e853 3f00 	ldrex	r3, [r3]
 8007b24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3308      	adds	r3, #8
 8007b36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b42:	e841 2300 	strex	r3, r2, [r1]
 8007b46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1e3      	bne.n	8007b16 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2220      	movs	r2, #32
 8007b52:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b62:	e853 3f00 	ldrex	r3, [r3]
 8007b66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b6a:	f023 0310 	bic.w	r3, r3, #16
 8007b6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	461a      	mov	r2, r3
 8007b78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b7e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b84:	e841 2300 	strex	r3, r2, [r1]
 8007b88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1e4      	bne.n	8007b5a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7fd fdeb 	bl	8005770 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	4619      	mov	r1, r3
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f8d4 	bl	8007d5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007bb4:	e0b5      	b.n	8007d22 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	1ad3      	subs	r3, r2, r3
 8007bc6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f000 80a7 	beq.w	8007d26 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8007bd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f000 80a2 	beq.w	8007d26 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bea:	e853 3f00 	ldrex	r3, [r3]
 8007bee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bf2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bf6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	461a      	mov	r2, r3
 8007c00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c04:	647b      	str	r3, [r7, #68]	; 0x44
 8007c06:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c0c:	e841 2300 	strex	r3, r2, [r1]
 8007c10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1e4      	bne.n	8007be2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	3308      	adds	r3, #8
 8007c1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c22:	e853 3f00 	ldrex	r3, [r3]
 8007c26:	623b      	str	r3, [r7, #32]
   return(result);
 8007c28:	6a3b      	ldr	r3, [r7, #32]
 8007c2a:	f023 0301 	bic.w	r3, r3, #1
 8007c2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	3308      	adds	r3, #8
 8007c38:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c3c:	633a      	str	r2, [r7, #48]	; 0x30
 8007c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c44:	e841 2300 	strex	r3, r2, [r1]
 8007c48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d1e3      	bne.n	8007c18 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2220      	movs	r2, #32
 8007c54:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	e853 3f00 	ldrex	r3, [r3]
 8007c6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f023 0310 	bic.w	r3, r3, #16
 8007c76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	461a      	mov	r2, r3
 8007c80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007c84:	61fb      	str	r3, [r7, #28]
 8007c86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c88:	69b9      	ldr	r1, [r7, #24]
 8007c8a:	69fa      	ldr	r2, [r7, #28]
 8007c8c:	e841 2300 	strex	r3, r2, [r1]
 8007c90:	617b      	str	r3, [r7, #20]
   return(result);
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1e4      	bne.n	8007c62 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f85c 	bl	8007d5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ca4:	e03f      	b.n	8007d26 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00e      	beq.n	8007cd0 <HAL_UART_IRQHandler+0x560>
 8007cb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d008      	beq.n	8007cd0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007cc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f001 f82c 	bl	8008d26 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007cce:	e02d      	b.n	8007d2c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00e      	beq.n	8007cfa <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d008      	beq.n	8007cfa <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d01c      	beq.n	8007d2a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	4798      	blx	r3
    }
    return;
 8007cf8:	e017      	b.n	8007d2a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d012      	beq.n	8007d2c <HAL_UART_IRQHandler+0x5bc>
 8007d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00c      	beq.n	8007d2c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fe7d 	bl	8008a12 <UART_EndTransmit_IT>
    return;
 8007d18:	e008      	b.n	8007d2c <HAL_UART_IRQHandler+0x5bc>
      return;
 8007d1a:	bf00      	nop
 8007d1c:	e006      	b.n	8007d2c <HAL_UART_IRQHandler+0x5bc>
    return;
 8007d1e:	bf00      	nop
 8007d20:	e004      	b.n	8007d2c <HAL_UART_IRQHandler+0x5bc>
      return;
 8007d22:	bf00      	nop
 8007d24:	e002      	b.n	8007d2c <HAL_UART_IRQHandler+0x5bc>
      return;
 8007d26:	bf00      	nop
 8007d28:	e000      	b.n	8007d2c <HAL_UART_IRQHandler+0x5bc>
    return;
 8007d2a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007d2c:	37e8      	adds	r7, #232	; 0xe8
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop

08007d34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	460b      	mov	r3, r1
 8007d66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d68:	bf00      	nop
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b08f      	sub	sp, #60	; 0x3c
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d101      	bne.n	8007d8a <HAL_HalfDuplex_EnableTransmitter+0x16>
 8007d86:	2302      	movs	r3, #2
 8007d88:	e040      	b.n	8007e0c <HAL_HalfDuplex_EnableTransmitter+0x98>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2224      	movs	r2, #36	; 0x24
 8007d96:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9e:	6a3b      	ldr	r3, [r7, #32]
 8007da0:	e853 3f00 	ldrex	r3, [r3]
 8007da4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	f023 030c 	bic.w	r3, r3, #12
 8007dac:	637b      	str	r3, [r7, #52]	; 0x34
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	461a      	mov	r2, r3
 8007db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007db8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dbe:	e841 2300 	strex	r3, r2, [r1]
 8007dc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1e6      	bne.n	8007d98 <HAL_HalfDuplex_EnableTransmitter+0x24>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	e853 3f00 	ldrex	r3, [r3]
 8007dd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	f043 0308 	orr.w	r3, r3, #8
 8007dde:	633b      	str	r3, [r7, #48]	; 0x30
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	461a      	mov	r2, r3
 8007de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de8:	61bb      	str	r3, [r7, #24]
 8007dea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dec:	6979      	ldr	r1, [r7, #20]
 8007dee:	69ba      	ldr	r2, [r7, #24]
 8007df0:	e841 2300 	strex	r3, r2, [r1]
 8007df4:	613b      	str	r3, [r7, #16]
   return(result);
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1e6      	bne.n	8007dca <HAL_HalfDuplex_EnableTransmitter+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2220      	movs	r2, #32
 8007e00:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	373c      	adds	r7, #60	; 0x3c
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b08f      	sub	sp, #60	; 0x3c
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d101      	bne.n	8007e2e <HAL_HalfDuplex_EnableReceiver+0x16>
 8007e2a:	2302      	movs	r3, #2
 8007e2c:	e040      	b.n	8007eb0 <HAL_HalfDuplex_EnableReceiver+0x98>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2201      	movs	r2, #1
 8007e32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2224      	movs	r2, #36	; 0x24
 8007e3a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e42:	6a3b      	ldr	r3, [r7, #32]
 8007e44:	e853 3f00 	ldrex	r3, [r3]
 8007e48:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	f023 030c 	bic.w	r3, r3, #12
 8007e50:	637b      	str	r3, [r7, #52]	; 0x34
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	461a      	mov	r2, r3
 8007e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e5c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e62:	e841 2300 	strex	r3, r2, [r1]
 8007e66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1e6      	bne.n	8007e3c <HAL_HalfDuplex_EnableReceiver+0x24>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	e853 3f00 	ldrex	r3, [r3]
 8007e7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	f043 0304 	orr.w	r3, r3, #4
 8007e82:	633b      	str	r3, [r7, #48]	; 0x30
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	461a      	mov	r2, r3
 8007e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8c:	61bb      	str	r3, [r7, #24]
 8007e8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e90:	6979      	ldr	r1, [r7, #20]
 8007e92:	69ba      	ldr	r2, [r7, #24]
 8007e94:	e841 2300 	strex	r3, r2, [r1]
 8007e98:	613b      	str	r3, [r7, #16]
   return(result);
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d1e6      	bne.n	8007e6e <HAL_HalfDuplex_EnableReceiver+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2220      	movs	r2, #32
 8007ea4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	373c      	adds	r7, #60	; 0x3c
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ec0:	b08a      	sub	sp, #40	; 0x28
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	689a      	ldr	r2, [r3, #8]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	431a      	orrs	r2, r3
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	431a      	orrs	r2, r3
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	69db      	ldr	r3, [r3, #28]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	4ba4      	ldr	r3, [pc, #656]	; (800817c <UART_SetConfig+0x2c0>)
 8007eec:	4013      	ands	r3, r2
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	6812      	ldr	r2, [r2, #0]
 8007ef2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ef4:	430b      	orrs	r3, r1
 8007ef6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	68da      	ldr	r2, [r3, #12]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	430a      	orrs	r2, r1
 8007f0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	699b      	ldr	r3, [r3, #24]
 8007f12:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a99      	ldr	r2, [pc, #612]	; (8008180 <UART_SetConfig+0x2c4>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d004      	beq.n	8007f28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6a1b      	ldr	r3, [r3, #32]
 8007f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f24:	4313      	orrs	r3, r2
 8007f26:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f38:	430a      	orrs	r2, r1
 8007f3a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a90      	ldr	r2, [pc, #576]	; (8008184 <UART_SetConfig+0x2c8>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d126      	bne.n	8007f94 <UART_SetConfig+0xd8>
 8007f46:	4b90      	ldr	r3, [pc, #576]	; (8008188 <UART_SetConfig+0x2cc>)
 8007f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f4c:	f003 0303 	and.w	r3, r3, #3
 8007f50:	2b03      	cmp	r3, #3
 8007f52:	d81b      	bhi.n	8007f8c <UART_SetConfig+0xd0>
 8007f54:	a201      	add	r2, pc, #4	; (adr r2, 8007f5c <UART_SetConfig+0xa0>)
 8007f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f5a:	bf00      	nop
 8007f5c:	08007f6d 	.word	0x08007f6d
 8007f60:	08007f7d 	.word	0x08007f7d
 8007f64:	08007f75 	.word	0x08007f75
 8007f68:	08007f85 	.word	0x08007f85
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f72:	e116      	b.n	80081a2 <UART_SetConfig+0x2e6>
 8007f74:	2302      	movs	r3, #2
 8007f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f7a:	e112      	b.n	80081a2 <UART_SetConfig+0x2e6>
 8007f7c:	2304      	movs	r3, #4
 8007f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f82:	e10e      	b.n	80081a2 <UART_SetConfig+0x2e6>
 8007f84:	2308      	movs	r3, #8
 8007f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f8a:	e10a      	b.n	80081a2 <UART_SetConfig+0x2e6>
 8007f8c:	2310      	movs	r3, #16
 8007f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f92:	e106      	b.n	80081a2 <UART_SetConfig+0x2e6>
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a7c      	ldr	r2, [pc, #496]	; (800818c <UART_SetConfig+0x2d0>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d138      	bne.n	8008010 <UART_SetConfig+0x154>
 8007f9e:	4b7a      	ldr	r3, [pc, #488]	; (8008188 <UART_SetConfig+0x2cc>)
 8007fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fa4:	f003 030c 	and.w	r3, r3, #12
 8007fa8:	2b0c      	cmp	r3, #12
 8007faa:	d82d      	bhi.n	8008008 <UART_SetConfig+0x14c>
 8007fac:	a201      	add	r2, pc, #4	; (adr r2, 8007fb4 <UART_SetConfig+0xf8>)
 8007fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb2:	bf00      	nop
 8007fb4:	08007fe9 	.word	0x08007fe9
 8007fb8:	08008009 	.word	0x08008009
 8007fbc:	08008009 	.word	0x08008009
 8007fc0:	08008009 	.word	0x08008009
 8007fc4:	08007ff9 	.word	0x08007ff9
 8007fc8:	08008009 	.word	0x08008009
 8007fcc:	08008009 	.word	0x08008009
 8007fd0:	08008009 	.word	0x08008009
 8007fd4:	08007ff1 	.word	0x08007ff1
 8007fd8:	08008009 	.word	0x08008009
 8007fdc:	08008009 	.word	0x08008009
 8007fe0:	08008009 	.word	0x08008009
 8007fe4:	08008001 	.word	0x08008001
 8007fe8:	2300      	movs	r3, #0
 8007fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fee:	e0d8      	b.n	80081a2 <UART_SetConfig+0x2e6>
 8007ff0:	2302      	movs	r3, #2
 8007ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ff6:	e0d4      	b.n	80081a2 <UART_SetConfig+0x2e6>
 8007ff8:	2304      	movs	r3, #4
 8007ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ffe:	e0d0      	b.n	80081a2 <UART_SetConfig+0x2e6>
 8008000:	2308      	movs	r3, #8
 8008002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008006:	e0cc      	b.n	80081a2 <UART_SetConfig+0x2e6>
 8008008:	2310      	movs	r3, #16
 800800a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800800e:	e0c8      	b.n	80081a2 <UART_SetConfig+0x2e6>
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a5e      	ldr	r2, [pc, #376]	; (8008190 <UART_SetConfig+0x2d4>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d125      	bne.n	8008066 <UART_SetConfig+0x1aa>
 800801a:	4b5b      	ldr	r3, [pc, #364]	; (8008188 <UART_SetConfig+0x2cc>)
 800801c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008020:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008024:	2b30      	cmp	r3, #48	; 0x30
 8008026:	d016      	beq.n	8008056 <UART_SetConfig+0x19a>
 8008028:	2b30      	cmp	r3, #48	; 0x30
 800802a:	d818      	bhi.n	800805e <UART_SetConfig+0x1a2>
 800802c:	2b20      	cmp	r3, #32
 800802e:	d00a      	beq.n	8008046 <UART_SetConfig+0x18a>
 8008030:	2b20      	cmp	r3, #32
 8008032:	d814      	bhi.n	800805e <UART_SetConfig+0x1a2>
 8008034:	2b00      	cmp	r3, #0
 8008036:	d002      	beq.n	800803e <UART_SetConfig+0x182>
 8008038:	2b10      	cmp	r3, #16
 800803a:	d008      	beq.n	800804e <UART_SetConfig+0x192>
 800803c:	e00f      	b.n	800805e <UART_SetConfig+0x1a2>
 800803e:	2300      	movs	r3, #0
 8008040:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008044:	e0ad      	b.n	80081a2 <UART_SetConfig+0x2e6>
 8008046:	2302      	movs	r3, #2
 8008048:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800804c:	e0a9      	b.n	80081a2 <UART_SetConfig+0x2e6>
 800804e:	2304      	movs	r3, #4
 8008050:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008054:	e0a5      	b.n	80081a2 <UART_SetConfig+0x2e6>
 8008056:	2308      	movs	r3, #8
 8008058:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800805c:	e0a1      	b.n	80081a2 <UART_SetConfig+0x2e6>
 800805e:	2310      	movs	r3, #16
 8008060:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008064:	e09d      	b.n	80081a2 <UART_SetConfig+0x2e6>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a4a      	ldr	r2, [pc, #296]	; (8008194 <UART_SetConfig+0x2d8>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d125      	bne.n	80080bc <UART_SetConfig+0x200>
 8008070:	4b45      	ldr	r3, [pc, #276]	; (8008188 <UART_SetConfig+0x2cc>)
 8008072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008076:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800807a:	2bc0      	cmp	r3, #192	; 0xc0
 800807c:	d016      	beq.n	80080ac <UART_SetConfig+0x1f0>
 800807e:	2bc0      	cmp	r3, #192	; 0xc0
 8008080:	d818      	bhi.n	80080b4 <UART_SetConfig+0x1f8>
 8008082:	2b80      	cmp	r3, #128	; 0x80
 8008084:	d00a      	beq.n	800809c <UART_SetConfig+0x1e0>
 8008086:	2b80      	cmp	r3, #128	; 0x80
 8008088:	d814      	bhi.n	80080b4 <UART_SetConfig+0x1f8>
 800808a:	2b00      	cmp	r3, #0
 800808c:	d002      	beq.n	8008094 <UART_SetConfig+0x1d8>
 800808e:	2b40      	cmp	r3, #64	; 0x40
 8008090:	d008      	beq.n	80080a4 <UART_SetConfig+0x1e8>
 8008092:	e00f      	b.n	80080b4 <UART_SetConfig+0x1f8>
 8008094:	2300      	movs	r3, #0
 8008096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800809a:	e082      	b.n	80081a2 <UART_SetConfig+0x2e6>
 800809c:	2302      	movs	r3, #2
 800809e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080a2:	e07e      	b.n	80081a2 <UART_SetConfig+0x2e6>
 80080a4:	2304      	movs	r3, #4
 80080a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080aa:	e07a      	b.n	80081a2 <UART_SetConfig+0x2e6>
 80080ac:	2308      	movs	r3, #8
 80080ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080b2:	e076      	b.n	80081a2 <UART_SetConfig+0x2e6>
 80080b4:	2310      	movs	r3, #16
 80080b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080ba:	e072      	b.n	80081a2 <UART_SetConfig+0x2e6>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a35      	ldr	r2, [pc, #212]	; (8008198 <UART_SetConfig+0x2dc>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d12a      	bne.n	800811c <UART_SetConfig+0x260>
 80080c6:	4b30      	ldr	r3, [pc, #192]	; (8008188 <UART_SetConfig+0x2cc>)
 80080c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080d4:	d01a      	beq.n	800810c <UART_SetConfig+0x250>
 80080d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080da:	d81b      	bhi.n	8008114 <UART_SetConfig+0x258>
 80080dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080e0:	d00c      	beq.n	80080fc <UART_SetConfig+0x240>
 80080e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080e6:	d815      	bhi.n	8008114 <UART_SetConfig+0x258>
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d003      	beq.n	80080f4 <UART_SetConfig+0x238>
 80080ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080f0:	d008      	beq.n	8008104 <UART_SetConfig+0x248>
 80080f2:	e00f      	b.n	8008114 <UART_SetConfig+0x258>
 80080f4:	2300      	movs	r3, #0
 80080f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080fa:	e052      	b.n	80081a2 <UART_SetConfig+0x2e6>
 80080fc:	2302      	movs	r3, #2
 80080fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008102:	e04e      	b.n	80081a2 <UART_SetConfig+0x2e6>
 8008104:	2304      	movs	r3, #4
 8008106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800810a:	e04a      	b.n	80081a2 <UART_SetConfig+0x2e6>
 800810c:	2308      	movs	r3, #8
 800810e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008112:	e046      	b.n	80081a2 <UART_SetConfig+0x2e6>
 8008114:	2310      	movs	r3, #16
 8008116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800811a:	e042      	b.n	80081a2 <UART_SetConfig+0x2e6>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a17      	ldr	r2, [pc, #92]	; (8008180 <UART_SetConfig+0x2c4>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d13a      	bne.n	800819c <UART_SetConfig+0x2e0>
 8008126:	4b18      	ldr	r3, [pc, #96]	; (8008188 <UART_SetConfig+0x2cc>)
 8008128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800812c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008130:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008134:	d01a      	beq.n	800816c <UART_SetConfig+0x2b0>
 8008136:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800813a:	d81b      	bhi.n	8008174 <UART_SetConfig+0x2b8>
 800813c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008140:	d00c      	beq.n	800815c <UART_SetConfig+0x2a0>
 8008142:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008146:	d815      	bhi.n	8008174 <UART_SetConfig+0x2b8>
 8008148:	2b00      	cmp	r3, #0
 800814a:	d003      	beq.n	8008154 <UART_SetConfig+0x298>
 800814c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008150:	d008      	beq.n	8008164 <UART_SetConfig+0x2a8>
 8008152:	e00f      	b.n	8008174 <UART_SetConfig+0x2b8>
 8008154:	2300      	movs	r3, #0
 8008156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800815a:	e022      	b.n	80081a2 <UART_SetConfig+0x2e6>
 800815c:	2302      	movs	r3, #2
 800815e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008162:	e01e      	b.n	80081a2 <UART_SetConfig+0x2e6>
 8008164:	2304      	movs	r3, #4
 8008166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800816a:	e01a      	b.n	80081a2 <UART_SetConfig+0x2e6>
 800816c:	2308      	movs	r3, #8
 800816e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008172:	e016      	b.n	80081a2 <UART_SetConfig+0x2e6>
 8008174:	2310      	movs	r3, #16
 8008176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800817a:	e012      	b.n	80081a2 <UART_SetConfig+0x2e6>
 800817c:	efff69f3 	.word	0xefff69f3
 8008180:	40008000 	.word	0x40008000
 8008184:	40013800 	.word	0x40013800
 8008188:	40021000 	.word	0x40021000
 800818c:	40004400 	.word	0x40004400
 8008190:	40004800 	.word	0x40004800
 8008194:	40004c00 	.word	0x40004c00
 8008198:	40005000 	.word	0x40005000
 800819c:	2310      	movs	r3, #16
 800819e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a9f      	ldr	r2, [pc, #636]	; (8008424 <UART_SetConfig+0x568>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d17a      	bne.n	80082a2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80081ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081b0:	2b08      	cmp	r3, #8
 80081b2:	d824      	bhi.n	80081fe <UART_SetConfig+0x342>
 80081b4:	a201      	add	r2, pc, #4	; (adr r2, 80081bc <UART_SetConfig+0x300>)
 80081b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ba:	bf00      	nop
 80081bc:	080081e1 	.word	0x080081e1
 80081c0:	080081ff 	.word	0x080081ff
 80081c4:	080081e9 	.word	0x080081e9
 80081c8:	080081ff 	.word	0x080081ff
 80081cc:	080081ef 	.word	0x080081ef
 80081d0:	080081ff 	.word	0x080081ff
 80081d4:	080081ff 	.word	0x080081ff
 80081d8:	080081ff 	.word	0x080081ff
 80081dc:	080081f7 	.word	0x080081f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081e0:	f7fe fbf0 	bl	80069c4 <HAL_RCC_GetPCLK1Freq>
 80081e4:	61f8      	str	r0, [r7, #28]
        break;
 80081e6:	e010      	b.n	800820a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081e8:	4b8f      	ldr	r3, [pc, #572]	; (8008428 <UART_SetConfig+0x56c>)
 80081ea:	61fb      	str	r3, [r7, #28]
        break;
 80081ec:	e00d      	b.n	800820a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081ee:	f7fe fb51 	bl	8006894 <HAL_RCC_GetSysClockFreq>
 80081f2:	61f8      	str	r0, [r7, #28]
        break;
 80081f4:	e009      	b.n	800820a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081fa:	61fb      	str	r3, [r7, #28]
        break;
 80081fc:	e005      	b.n	800820a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80081fe:	2300      	movs	r3, #0
 8008200:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008208:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	2b00      	cmp	r3, #0
 800820e:	f000 80fb 	beq.w	8008408 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	685a      	ldr	r2, [r3, #4]
 8008216:	4613      	mov	r3, r2
 8008218:	005b      	lsls	r3, r3, #1
 800821a:	4413      	add	r3, r2
 800821c:	69fa      	ldr	r2, [r7, #28]
 800821e:	429a      	cmp	r2, r3
 8008220:	d305      	bcc.n	800822e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008228:	69fa      	ldr	r2, [r7, #28]
 800822a:	429a      	cmp	r2, r3
 800822c:	d903      	bls.n	8008236 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008234:	e0e8      	b.n	8008408 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	2200      	movs	r2, #0
 800823a:	461c      	mov	r4, r3
 800823c:	4615      	mov	r5, r2
 800823e:	f04f 0200 	mov.w	r2, #0
 8008242:	f04f 0300 	mov.w	r3, #0
 8008246:	022b      	lsls	r3, r5, #8
 8008248:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800824c:	0222      	lsls	r2, r4, #8
 800824e:	68f9      	ldr	r1, [r7, #12]
 8008250:	6849      	ldr	r1, [r1, #4]
 8008252:	0849      	lsrs	r1, r1, #1
 8008254:	2000      	movs	r0, #0
 8008256:	4688      	mov	r8, r1
 8008258:	4681      	mov	r9, r0
 800825a:	eb12 0a08 	adds.w	sl, r2, r8
 800825e:	eb43 0b09 	adc.w	fp, r3, r9
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	603b      	str	r3, [r7, #0]
 800826a:	607a      	str	r2, [r7, #4]
 800826c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008270:	4650      	mov	r0, sl
 8008272:	4659      	mov	r1, fp
 8008274:	f7f8 fd08 	bl	8000c88 <__aeabi_uldivmod>
 8008278:	4602      	mov	r2, r0
 800827a:	460b      	mov	r3, r1
 800827c:	4613      	mov	r3, r2
 800827e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008280:	69bb      	ldr	r3, [r7, #24]
 8008282:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008286:	d308      	bcc.n	800829a <UART_SetConfig+0x3de>
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800828e:	d204      	bcs.n	800829a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	69ba      	ldr	r2, [r7, #24]
 8008296:	60da      	str	r2, [r3, #12]
 8008298:	e0b6      	b.n	8008408 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80082a0:	e0b2      	b.n	8008408 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	69db      	ldr	r3, [r3, #28]
 80082a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082aa:	d15e      	bne.n	800836a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80082ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082b0:	2b08      	cmp	r3, #8
 80082b2:	d828      	bhi.n	8008306 <UART_SetConfig+0x44a>
 80082b4:	a201      	add	r2, pc, #4	; (adr r2, 80082bc <UART_SetConfig+0x400>)
 80082b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ba:	bf00      	nop
 80082bc:	080082e1 	.word	0x080082e1
 80082c0:	080082e9 	.word	0x080082e9
 80082c4:	080082f1 	.word	0x080082f1
 80082c8:	08008307 	.word	0x08008307
 80082cc:	080082f7 	.word	0x080082f7
 80082d0:	08008307 	.word	0x08008307
 80082d4:	08008307 	.word	0x08008307
 80082d8:	08008307 	.word	0x08008307
 80082dc:	080082ff 	.word	0x080082ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082e0:	f7fe fb70 	bl	80069c4 <HAL_RCC_GetPCLK1Freq>
 80082e4:	61f8      	str	r0, [r7, #28]
        break;
 80082e6:	e014      	b.n	8008312 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082e8:	f7fe fb82 	bl	80069f0 <HAL_RCC_GetPCLK2Freq>
 80082ec:	61f8      	str	r0, [r7, #28]
        break;
 80082ee:	e010      	b.n	8008312 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082f0:	4b4d      	ldr	r3, [pc, #308]	; (8008428 <UART_SetConfig+0x56c>)
 80082f2:	61fb      	str	r3, [r7, #28]
        break;
 80082f4:	e00d      	b.n	8008312 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082f6:	f7fe facd 	bl	8006894 <HAL_RCC_GetSysClockFreq>
 80082fa:	61f8      	str	r0, [r7, #28]
        break;
 80082fc:	e009      	b.n	8008312 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008302:	61fb      	str	r3, [r7, #28]
        break;
 8008304:	e005      	b.n	8008312 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008306:	2300      	movs	r3, #0
 8008308:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008310:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d077      	beq.n	8008408 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	005a      	lsls	r2, r3, #1
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	085b      	lsrs	r3, r3, #1
 8008322:	441a      	add	r2, r3
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	fbb2 f3f3 	udiv	r3, r2, r3
 800832c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	2b0f      	cmp	r3, #15
 8008332:	d916      	bls.n	8008362 <UART_SetConfig+0x4a6>
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800833a:	d212      	bcs.n	8008362 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	b29b      	uxth	r3, r3
 8008340:	f023 030f 	bic.w	r3, r3, #15
 8008344:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	085b      	lsrs	r3, r3, #1
 800834a:	b29b      	uxth	r3, r3
 800834c:	f003 0307 	and.w	r3, r3, #7
 8008350:	b29a      	uxth	r2, r3
 8008352:	8afb      	ldrh	r3, [r7, #22]
 8008354:	4313      	orrs	r3, r2
 8008356:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	8afa      	ldrh	r2, [r7, #22]
 800835e:	60da      	str	r2, [r3, #12]
 8008360:	e052      	b.n	8008408 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008368:	e04e      	b.n	8008408 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800836a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800836e:	2b08      	cmp	r3, #8
 8008370:	d827      	bhi.n	80083c2 <UART_SetConfig+0x506>
 8008372:	a201      	add	r2, pc, #4	; (adr r2, 8008378 <UART_SetConfig+0x4bc>)
 8008374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008378:	0800839d 	.word	0x0800839d
 800837c:	080083a5 	.word	0x080083a5
 8008380:	080083ad 	.word	0x080083ad
 8008384:	080083c3 	.word	0x080083c3
 8008388:	080083b3 	.word	0x080083b3
 800838c:	080083c3 	.word	0x080083c3
 8008390:	080083c3 	.word	0x080083c3
 8008394:	080083c3 	.word	0x080083c3
 8008398:	080083bb 	.word	0x080083bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800839c:	f7fe fb12 	bl	80069c4 <HAL_RCC_GetPCLK1Freq>
 80083a0:	61f8      	str	r0, [r7, #28]
        break;
 80083a2:	e014      	b.n	80083ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083a4:	f7fe fb24 	bl	80069f0 <HAL_RCC_GetPCLK2Freq>
 80083a8:	61f8      	str	r0, [r7, #28]
        break;
 80083aa:	e010      	b.n	80083ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083ac:	4b1e      	ldr	r3, [pc, #120]	; (8008428 <UART_SetConfig+0x56c>)
 80083ae:	61fb      	str	r3, [r7, #28]
        break;
 80083b0:	e00d      	b.n	80083ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083b2:	f7fe fa6f 	bl	8006894 <HAL_RCC_GetSysClockFreq>
 80083b6:	61f8      	str	r0, [r7, #28]
        break;
 80083b8:	e009      	b.n	80083ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083be:	61fb      	str	r3, [r7, #28]
        break;
 80083c0:	e005      	b.n	80083ce <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80083c2:	2300      	movs	r3, #0
 80083c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80083cc:	bf00      	nop
    }

    if (pclk != 0U)
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d019      	beq.n	8008408 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	085a      	lsrs	r2, r3, #1
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	441a      	add	r2, r3
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80083e6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	2b0f      	cmp	r3, #15
 80083ec:	d909      	bls.n	8008402 <UART_SetConfig+0x546>
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083f4:	d205      	bcs.n	8008402 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	60da      	str	r2, [r3, #12]
 8008400:	e002      	b.n	8008408 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2200      	movs	r2, #0
 800840c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2200      	movs	r2, #0
 8008412:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008414:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008418:	4618      	mov	r0, r3
 800841a:	3728      	adds	r7, #40	; 0x28
 800841c:	46bd      	mov	sp, r7
 800841e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008422:	bf00      	nop
 8008424:	40008000 	.word	0x40008000
 8008428:	00f42400 	.word	0x00f42400

0800842c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008438:	f003 0301 	and.w	r3, r3, #1
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00a      	beq.n	8008456 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	430a      	orrs	r2, r1
 8008454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845a:	f003 0302 	and.w	r3, r3, #2
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00a      	beq.n	8008478 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	430a      	orrs	r2, r1
 8008476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847c:	f003 0304 	and.w	r3, r3, #4
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00a      	beq.n	800849a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	430a      	orrs	r2, r1
 8008498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849e:	f003 0308 	and.w	r3, r3, #8
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00a      	beq.n	80084bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	430a      	orrs	r2, r1
 80084ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c0:	f003 0310 	and.w	r3, r3, #16
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00a      	beq.n	80084de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	430a      	orrs	r2, r1
 80084dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e2:	f003 0320 	and.w	r3, r3, #32
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00a      	beq.n	8008500 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	430a      	orrs	r2, r1
 80084fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008508:	2b00      	cmp	r3, #0
 800850a:	d01a      	beq.n	8008542 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	430a      	orrs	r2, r1
 8008520:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800852a:	d10a      	bne.n	8008542 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	430a      	orrs	r2, r1
 8008540:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00a      	beq.n	8008564 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	430a      	orrs	r2, r1
 8008562:	605a      	str	r2, [r3, #4]
  }
}
 8008564:	bf00      	nop
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af02      	add	r7, sp, #8
 8008576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008580:	f7fb fba4 	bl	8003ccc <HAL_GetTick>
 8008584:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 0308 	and.w	r3, r3, #8
 8008590:	2b08      	cmp	r3, #8
 8008592:	d10e      	bne.n	80085b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008594:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008598:	9300      	str	r3, [sp, #0]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f82d 	bl	8008602 <UART_WaitOnFlagUntilTimeout>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d001      	beq.n	80085b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085ae:	2303      	movs	r3, #3
 80085b0:	e023      	b.n	80085fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 0304 	and.w	r3, r3, #4
 80085bc:	2b04      	cmp	r3, #4
 80085be:	d10e      	bne.n	80085de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f817 	bl	8008602 <UART_WaitOnFlagUntilTimeout>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d001      	beq.n	80085de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085da:	2303      	movs	r3, #3
 80085dc:	e00d      	b.n	80085fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2220      	movs	r2, #32
 80085e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2220      	movs	r2, #32
 80085e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008602:	b580      	push	{r7, lr}
 8008604:	b09c      	sub	sp, #112	; 0x70
 8008606:	af00      	add	r7, sp, #0
 8008608:	60f8      	str	r0, [r7, #12]
 800860a:	60b9      	str	r1, [r7, #8]
 800860c:	603b      	str	r3, [r7, #0]
 800860e:	4613      	mov	r3, r2
 8008610:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008612:	e0a5      	b.n	8008760 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008614:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008616:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800861a:	f000 80a1 	beq.w	8008760 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800861e:	f7fb fb55 	bl	8003ccc <HAL_GetTick>
 8008622:	4602      	mov	r2, r0
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800862a:	429a      	cmp	r2, r3
 800862c:	d302      	bcc.n	8008634 <UART_WaitOnFlagUntilTimeout+0x32>
 800862e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008630:	2b00      	cmp	r3, #0
 8008632:	d13e      	bne.n	80086b2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800863c:	e853 3f00 	ldrex	r3, [r3]
 8008640:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008644:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008648:	667b      	str	r3, [r7, #100]	; 0x64
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	461a      	mov	r2, r3
 8008650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008652:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008654:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008656:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008658:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800865a:	e841 2300 	strex	r3, r2, [r1]
 800865e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008662:	2b00      	cmp	r3, #0
 8008664:	d1e6      	bne.n	8008634 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	3308      	adds	r3, #8
 800866c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008670:	e853 3f00 	ldrex	r3, [r3]
 8008674:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008678:	f023 0301 	bic.w	r3, r3, #1
 800867c:	663b      	str	r3, [r7, #96]	; 0x60
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	3308      	adds	r3, #8
 8008684:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008686:	64ba      	str	r2, [r7, #72]	; 0x48
 8008688:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800868c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800868e:	e841 2300 	strex	r3, r2, [r1]
 8008692:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1e5      	bne.n	8008666 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2220      	movs	r2, #32
 800869e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2220      	movs	r2, #32
 80086a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80086ae:	2303      	movs	r3, #3
 80086b0:	e067      	b.n	8008782 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 0304 	and.w	r3, r3, #4
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d04f      	beq.n	8008760 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	69db      	ldr	r3, [r3, #28]
 80086c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086ce:	d147      	bne.n	8008760 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086d8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e2:	e853 3f00 	ldrex	r3, [r3]
 80086e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80086ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	461a      	mov	r2, r3
 80086f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086f8:	637b      	str	r3, [r7, #52]	; 0x34
 80086fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008700:	e841 2300 	strex	r3, r2, [r1]
 8008704:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1e6      	bne.n	80086da <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	3308      	adds	r3, #8
 8008712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	e853 3f00 	ldrex	r3, [r3]
 800871a:	613b      	str	r3, [r7, #16]
   return(result);
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	f023 0301 	bic.w	r3, r3, #1
 8008722:	66bb      	str	r3, [r7, #104]	; 0x68
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	3308      	adds	r3, #8
 800872a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800872c:	623a      	str	r2, [r7, #32]
 800872e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008730:	69f9      	ldr	r1, [r7, #28]
 8008732:	6a3a      	ldr	r2, [r7, #32]
 8008734:	e841 2300 	strex	r3, r2, [r1]
 8008738:	61bb      	str	r3, [r7, #24]
   return(result);
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1e5      	bne.n	800870c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2220      	movs	r2, #32
 8008744:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2220      	movs	r2, #32
 800874a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2220      	movs	r2, #32
 8008750:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2200      	movs	r2, #0
 8008758:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800875c:	2303      	movs	r3, #3
 800875e:	e010      	b.n	8008782 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	69da      	ldr	r2, [r3, #28]
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	4013      	ands	r3, r2
 800876a:	68ba      	ldr	r2, [r7, #8]
 800876c:	429a      	cmp	r2, r3
 800876e:	bf0c      	ite	eq
 8008770:	2301      	moveq	r3, #1
 8008772:	2300      	movne	r3, #0
 8008774:	b2db      	uxtb	r3, r3
 8008776:	461a      	mov	r2, r3
 8008778:	79fb      	ldrb	r3, [r7, #7]
 800877a:	429a      	cmp	r2, r3
 800877c:	f43f af4a 	beq.w	8008614 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3770      	adds	r7, #112	; 0x70
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
	...

0800878c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800878c:	b480      	push	{r7}
 800878e:	b097      	sub	sp, #92	; 0x5c
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	4613      	mov	r3, r2
 8008798:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	68ba      	ldr	r2, [r7, #8]
 800879e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	88fa      	ldrh	r2, [r7, #6]
 80087a4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	88fa      	ldrh	r2, [r7, #6]
 80087ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2200      	movs	r2, #0
 80087b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087be:	d10e      	bne.n	80087de <UART_Start_Receive_IT+0x52>
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d105      	bne.n	80087d4 <UART_Start_Receive_IT+0x48>
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80087ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80087d2:	e02d      	b.n	8008830 <UART_Start_Receive_IT+0xa4>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	22ff      	movs	r2, #255	; 0xff
 80087d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80087dc:	e028      	b.n	8008830 <UART_Start_Receive_IT+0xa4>
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d10d      	bne.n	8008802 <UART_Start_Receive_IT+0x76>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d104      	bne.n	80087f8 <UART_Start_Receive_IT+0x6c>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	22ff      	movs	r2, #255	; 0xff
 80087f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80087f6:	e01b      	b.n	8008830 <UART_Start_Receive_IT+0xa4>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	227f      	movs	r2, #127	; 0x7f
 80087fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008800:	e016      	b.n	8008830 <UART_Start_Receive_IT+0xa4>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800880a:	d10d      	bne.n	8008828 <UART_Start_Receive_IT+0x9c>
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d104      	bne.n	800881e <UART_Start_Receive_IT+0x92>
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	227f      	movs	r2, #127	; 0x7f
 8008818:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800881c:	e008      	b.n	8008830 <UART_Start_Receive_IT+0xa4>
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	223f      	movs	r2, #63	; 0x3f
 8008822:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008826:	e003      	b.n	8008830 <UART_Start_Receive_IT+0xa4>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2200      	movs	r2, #0
 8008834:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2222      	movs	r2, #34	; 0x22
 800883c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	3308      	adds	r3, #8
 8008844:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008848:	e853 3f00 	ldrex	r3, [r3]
 800884c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800884e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008850:	f043 0301 	orr.w	r3, r3, #1
 8008854:	657b      	str	r3, [r7, #84]	; 0x54
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	3308      	adds	r3, #8
 800885c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800885e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008860:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008862:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008864:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008866:	e841 2300 	strex	r3, r2, [r1]
 800886a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800886c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1e5      	bne.n	800883e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800887a:	d107      	bne.n	800888c <UART_Start_Receive_IT+0x100>
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d103      	bne.n	800888c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	4a24      	ldr	r2, [pc, #144]	; (8008918 <UART_Start_Receive_IT+0x18c>)
 8008888:	665a      	str	r2, [r3, #100]	; 0x64
 800888a:	e002      	b.n	8008892 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	4a23      	ldr	r2, [pc, #140]	; (800891c <UART_Start_Receive_IT+0x190>)
 8008890:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d019      	beq.n	80088d6 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088aa:	e853 3f00 	ldrex	r3, [r3]
 80088ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80088b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	461a      	mov	r2, r3
 80088be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088c0:	637b      	str	r3, [r7, #52]	; 0x34
 80088c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80088c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088c8:	e841 2300 	strex	r3, r2, [r1]
 80088cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80088ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d1e6      	bne.n	80088a2 <UART_Start_Receive_IT+0x116>
 80088d4:	e018      	b.n	8008908 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	e853 3f00 	ldrex	r3, [r3]
 80088e2:	613b      	str	r3, [r7, #16]
   return(result);
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	f043 0320 	orr.w	r3, r3, #32
 80088ea:	653b      	str	r3, [r7, #80]	; 0x50
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	461a      	mov	r2, r3
 80088f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088f4:	623b      	str	r3, [r7, #32]
 80088f6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f8:	69f9      	ldr	r1, [r7, #28]
 80088fa:	6a3a      	ldr	r2, [r7, #32]
 80088fc:	e841 2300 	strex	r3, r2, [r1]
 8008900:	61bb      	str	r3, [r7, #24]
   return(result);
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d1e6      	bne.n	80088d6 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	375c      	adds	r7, #92	; 0x5c
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	08008bc7 	.word	0x08008bc7
 800891c:	08008a67 	.word	0x08008a67

08008920 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008920:	b480      	push	{r7}
 8008922:	b095      	sub	sp, #84	; 0x54
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008930:	e853 3f00 	ldrex	r3, [r3]
 8008934:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008938:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800893c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	461a      	mov	r2, r3
 8008944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008946:	643b      	str	r3, [r7, #64]	; 0x40
 8008948:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800894c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800894e:	e841 2300 	strex	r3, r2, [r1]
 8008952:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1e6      	bne.n	8008928 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	3308      	adds	r3, #8
 8008960:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008962:	6a3b      	ldr	r3, [r7, #32]
 8008964:	e853 3f00 	ldrex	r3, [r3]
 8008968:	61fb      	str	r3, [r7, #28]
   return(result);
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	f023 0301 	bic.w	r3, r3, #1
 8008970:	64bb      	str	r3, [r7, #72]	; 0x48
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	3308      	adds	r3, #8
 8008978:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800897a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800897c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008982:	e841 2300 	strex	r3, r2, [r1]
 8008986:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1e5      	bne.n	800895a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008992:	2b01      	cmp	r3, #1
 8008994:	d118      	bne.n	80089c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	e853 3f00 	ldrex	r3, [r3]
 80089a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	f023 0310 	bic.w	r3, r3, #16
 80089aa:	647b      	str	r3, [r7, #68]	; 0x44
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	461a      	mov	r2, r3
 80089b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089b4:	61bb      	str	r3, [r7, #24]
 80089b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b8:	6979      	ldr	r1, [r7, #20]
 80089ba:	69ba      	ldr	r2, [r7, #24]
 80089bc:	e841 2300 	strex	r3, r2, [r1]
 80089c0:	613b      	str	r3, [r7, #16]
   return(result);
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d1e6      	bne.n	8008996 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2220      	movs	r2, #32
 80089cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80089da:	bf00      	nop
 80089dc:	3754      	adds	r7, #84	; 0x54
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr

080089e6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b084      	sub	sp, #16
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f7ff f99f 	bl	8007d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a0a:	bf00      	nop
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b088      	sub	sp, #32
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	e853 3f00 	ldrex	r3, [r3]
 8008a26:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a2e:	61fb      	str	r3, [r7, #28]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	461a      	mov	r2, r3
 8008a36:	69fb      	ldr	r3, [r7, #28]
 8008a38:	61bb      	str	r3, [r7, #24]
 8008a3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3c:	6979      	ldr	r1, [r7, #20]
 8008a3e:	69ba      	ldr	r2, [r7, #24]
 8008a40:	e841 2300 	strex	r3, r2, [r1]
 8008a44:	613b      	str	r3, [r7, #16]
   return(result);
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d1e6      	bne.n	8008a1a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2220      	movs	r2, #32
 8008a50:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f7ff f96b 	bl	8007d34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a5e:	bf00      	nop
 8008a60:	3720      	adds	r7, #32
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b096      	sub	sp, #88	; 0x58
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a74:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a7c:	2b22      	cmp	r3, #34	; 0x22
 8008a7e:	f040 8094 	bne.w	8008baa <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008a88:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a8c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008a90:	b2d9      	uxtb	r1, r3
 8008a92:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008a96:	b2da      	uxtb	r2, r3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a9c:	400a      	ands	r2, r1
 8008a9e:	b2d2      	uxtb	r2, r2
 8008aa0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aa6:	1c5a      	adds	r2, r3, #1
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	b29a      	uxth	r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d179      	bne.n	8008bbe <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad2:	e853 3f00 	ldrex	r3, [r3]
 8008ad6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ada:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ade:	653b      	str	r3, [r7, #80]	; 0x50
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ae8:	647b      	str	r3, [r7, #68]	; 0x44
 8008aea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008aee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008af0:	e841 2300 	strex	r3, r2, [r1]
 8008af4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d1e6      	bne.n	8008aca <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	3308      	adds	r3, #8
 8008b02:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b06:	e853 3f00 	ldrex	r3, [r3]
 8008b0a:	623b      	str	r3, [r7, #32]
   return(result);
 8008b0c:	6a3b      	ldr	r3, [r7, #32]
 8008b0e:	f023 0301 	bic.w	r3, r3, #1
 8008b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	3308      	adds	r3, #8
 8008b1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b1c:	633a      	str	r2, [r7, #48]	; 0x30
 8008b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b24:	e841 2300 	strex	r3, r2, [r1]
 8008b28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d1e5      	bne.n	8008afc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2220      	movs	r2, #32
 8008b34:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d12e      	bne.n	8008ba2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	e853 3f00 	ldrex	r3, [r3]
 8008b56:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f023 0310 	bic.w	r3, r3, #16
 8008b5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	461a      	mov	r2, r3
 8008b66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b68:	61fb      	str	r3, [r7, #28]
 8008b6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6c:	69b9      	ldr	r1, [r7, #24]
 8008b6e:	69fa      	ldr	r2, [r7, #28]
 8008b70:	e841 2300 	strex	r3, r2, [r1]
 8008b74:	617b      	str	r3, [r7, #20]
   return(result);
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d1e6      	bne.n	8008b4a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	69db      	ldr	r3, [r3, #28]
 8008b82:	f003 0310 	and.w	r3, r3, #16
 8008b86:	2b10      	cmp	r3, #16
 8008b88:	d103      	bne.n	8008b92 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2210      	movs	r2, #16
 8008b90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008b98:	4619      	mov	r1, r3
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f7ff f8de 	bl	8007d5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ba0:	e00d      	b.n	8008bbe <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f7f9 fe90 	bl	80028c8 <HAL_UART_RxCpltCallback>
}
 8008ba8:	e009      	b.n	8008bbe <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	8b1b      	ldrh	r3, [r3, #24]
 8008bb0:	b29a      	uxth	r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f042 0208 	orr.w	r2, r2, #8
 8008bba:	b292      	uxth	r2, r2
 8008bbc:	831a      	strh	r2, [r3, #24]
}
 8008bbe:	bf00      	nop
 8008bc0:	3758      	adds	r7, #88	; 0x58
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b096      	sub	sp, #88	; 0x58
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008bd4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bdc:	2b22      	cmp	r3, #34	; 0x22
 8008bde:	f040 8094 	bne.w	8008d0a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008be8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bf0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008bf2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008bf6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008bfa:	4013      	ands	r3, r2
 8008bfc:	b29a      	uxth	r2, r3
 8008bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c00:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c06:	1c9a      	adds	r2, r3, #2
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	3b01      	subs	r3, #1
 8008c16:	b29a      	uxth	r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d179      	bne.n	8008d1e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c32:	e853 3f00 	ldrex	r3, [r3]
 8008c36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	461a      	mov	r2, r3
 8008c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c48:	643b      	str	r3, [r7, #64]	; 0x40
 8008c4a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c50:	e841 2300 	strex	r3, r2, [r1]
 8008c54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1e6      	bne.n	8008c2a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	3308      	adds	r3, #8
 8008c62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c64:	6a3b      	ldr	r3, [r7, #32]
 8008c66:	e853 3f00 	ldrex	r3, [r3]
 8008c6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	f023 0301 	bic.w	r3, r3, #1
 8008c72:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	3308      	adds	r3, #8
 8008c7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c84:	e841 2300 	strex	r3, r2, [r1]
 8008c88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d1e5      	bne.n	8008c5c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2220      	movs	r2, #32
 8008c94:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d12e      	bne.n	8008d02 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	e853 3f00 	ldrex	r3, [r3]
 8008cb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	f023 0310 	bic.w	r3, r3, #16
 8008cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cc8:	61bb      	str	r3, [r7, #24]
 8008cca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ccc:	6979      	ldr	r1, [r7, #20]
 8008cce:	69ba      	ldr	r2, [r7, #24]
 8008cd0:	e841 2300 	strex	r3, r2, [r1]
 8008cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d1e6      	bne.n	8008caa <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	69db      	ldr	r3, [r3, #28]
 8008ce2:	f003 0310 	and.w	r3, r3, #16
 8008ce6:	2b10      	cmp	r3, #16
 8008ce8:	d103      	bne.n	8008cf2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2210      	movs	r2, #16
 8008cf0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f7ff f82e 	bl	8007d5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d00:	e00d      	b.n	8008d1e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f7f9 fde0 	bl	80028c8 <HAL_UART_RxCpltCallback>
}
 8008d08:	e009      	b.n	8008d1e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	8b1b      	ldrh	r3, [r3, #24]
 8008d10:	b29a      	uxth	r2, r3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f042 0208 	orr.w	r2, r2, #8
 8008d1a:	b292      	uxth	r2, r2
 8008d1c:	831a      	strh	r2, [r3, #24]
}
 8008d1e:	bf00      	nop
 8008d20:	3758      	adds	r7, #88	; 0x58
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008d26:	b480      	push	{r7}
 8008d28:	b083      	sub	sp, #12
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008d2e:	bf00      	nop
 8008d30:	370c      	adds	r7, #12
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr
	...

08008d3c <__errno>:
 8008d3c:	4b01      	ldr	r3, [pc, #4]	; (8008d44 <__errno+0x8>)
 8008d3e:	6818      	ldr	r0, [r3, #0]
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	20000014 	.word	0x20000014

08008d48 <__libc_init_array>:
 8008d48:	b570      	push	{r4, r5, r6, lr}
 8008d4a:	4d0d      	ldr	r5, [pc, #52]	; (8008d80 <__libc_init_array+0x38>)
 8008d4c:	4c0d      	ldr	r4, [pc, #52]	; (8008d84 <__libc_init_array+0x3c>)
 8008d4e:	1b64      	subs	r4, r4, r5
 8008d50:	10a4      	asrs	r4, r4, #2
 8008d52:	2600      	movs	r6, #0
 8008d54:	42a6      	cmp	r6, r4
 8008d56:	d109      	bne.n	8008d6c <__libc_init_array+0x24>
 8008d58:	4d0b      	ldr	r5, [pc, #44]	; (8008d88 <__libc_init_array+0x40>)
 8008d5a:	4c0c      	ldr	r4, [pc, #48]	; (8008d8c <__libc_init_array+0x44>)
 8008d5c:	f005 fcde 	bl	800e71c <_init>
 8008d60:	1b64      	subs	r4, r4, r5
 8008d62:	10a4      	asrs	r4, r4, #2
 8008d64:	2600      	movs	r6, #0
 8008d66:	42a6      	cmp	r6, r4
 8008d68:	d105      	bne.n	8008d76 <__libc_init_array+0x2e>
 8008d6a:	bd70      	pop	{r4, r5, r6, pc}
 8008d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d70:	4798      	blx	r3
 8008d72:	3601      	adds	r6, #1
 8008d74:	e7ee      	b.n	8008d54 <__libc_init_array+0xc>
 8008d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d7a:	4798      	blx	r3
 8008d7c:	3601      	adds	r6, #1
 8008d7e:	e7f2      	b.n	8008d66 <__libc_init_array+0x1e>
 8008d80:	0800ee08 	.word	0x0800ee08
 8008d84:	0800ee08 	.word	0x0800ee08
 8008d88:	0800ee08 	.word	0x0800ee08
 8008d8c:	0800ee0c 	.word	0x0800ee0c

08008d90 <memcpy>:
 8008d90:	440a      	add	r2, r1
 8008d92:	4291      	cmp	r1, r2
 8008d94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008d98:	d100      	bne.n	8008d9c <memcpy+0xc>
 8008d9a:	4770      	bx	lr
 8008d9c:	b510      	push	{r4, lr}
 8008d9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008da2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008da6:	4291      	cmp	r1, r2
 8008da8:	d1f9      	bne.n	8008d9e <memcpy+0xe>
 8008daa:	bd10      	pop	{r4, pc}

08008dac <memset>:
 8008dac:	4402      	add	r2, r0
 8008dae:	4603      	mov	r3, r0
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d100      	bne.n	8008db6 <memset+0xa>
 8008db4:	4770      	bx	lr
 8008db6:	f803 1b01 	strb.w	r1, [r3], #1
 8008dba:	e7f9      	b.n	8008db0 <memset+0x4>

08008dbc <__cvt>:
 8008dbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008dc0:	ec55 4b10 	vmov	r4, r5, d0
 8008dc4:	2d00      	cmp	r5, #0
 8008dc6:	460e      	mov	r6, r1
 8008dc8:	4619      	mov	r1, r3
 8008dca:	462b      	mov	r3, r5
 8008dcc:	bfbb      	ittet	lt
 8008dce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008dd2:	461d      	movlt	r5, r3
 8008dd4:	2300      	movge	r3, #0
 8008dd6:	232d      	movlt	r3, #45	; 0x2d
 8008dd8:	700b      	strb	r3, [r1, #0]
 8008dda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ddc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008de0:	4691      	mov	r9, r2
 8008de2:	f023 0820 	bic.w	r8, r3, #32
 8008de6:	bfbc      	itt	lt
 8008de8:	4622      	movlt	r2, r4
 8008dea:	4614      	movlt	r4, r2
 8008dec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008df0:	d005      	beq.n	8008dfe <__cvt+0x42>
 8008df2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008df6:	d100      	bne.n	8008dfa <__cvt+0x3e>
 8008df8:	3601      	adds	r6, #1
 8008dfa:	2102      	movs	r1, #2
 8008dfc:	e000      	b.n	8008e00 <__cvt+0x44>
 8008dfe:	2103      	movs	r1, #3
 8008e00:	ab03      	add	r3, sp, #12
 8008e02:	9301      	str	r3, [sp, #4]
 8008e04:	ab02      	add	r3, sp, #8
 8008e06:	9300      	str	r3, [sp, #0]
 8008e08:	ec45 4b10 	vmov	d0, r4, r5
 8008e0c:	4653      	mov	r3, sl
 8008e0e:	4632      	mov	r2, r6
 8008e10:	f000 fcea 	bl	80097e8 <_dtoa_r>
 8008e14:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008e18:	4607      	mov	r7, r0
 8008e1a:	d102      	bne.n	8008e22 <__cvt+0x66>
 8008e1c:	f019 0f01 	tst.w	r9, #1
 8008e20:	d022      	beq.n	8008e68 <__cvt+0xac>
 8008e22:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008e26:	eb07 0906 	add.w	r9, r7, r6
 8008e2a:	d110      	bne.n	8008e4e <__cvt+0x92>
 8008e2c:	783b      	ldrb	r3, [r7, #0]
 8008e2e:	2b30      	cmp	r3, #48	; 0x30
 8008e30:	d10a      	bne.n	8008e48 <__cvt+0x8c>
 8008e32:	2200      	movs	r2, #0
 8008e34:	2300      	movs	r3, #0
 8008e36:	4620      	mov	r0, r4
 8008e38:	4629      	mov	r1, r5
 8008e3a:	f7f7 fe45 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e3e:	b918      	cbnz	r0, 8008e48 <__cvt+0x8c>
 8008e40:	f1c6 0601 	rsb	r6, r6, #1
 8008e44:	f8ca 6000 	str.w	r6, [sl]
 8008e48:	f8da 3000 	ldr.w	r3, [sl]
 8008e4c:	4499      	add	r9, r3
 8008e4e:	2200      	movs	r2, #0
 8008e50:	2300      	movs	r3, #0
 8008e52:	4620      	mov	r0, r4
 8008e54:	4629      	mov	r1, r5
 8008e56:	f7f7 fe37 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e5a:	b108      	cbz	r0, 8008e60 <__cvt+0xa4>
 8008e5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008e60:	2230      	movs	r2, #48	; 0x30
 8008e62:	9b03      	ldr	r3, [sp, #12]
 8008e64:	454b      	cmp	r3, r9
 8008e66:	d307      	bcc.n	8008e78 <__cvt+0xbc>
 8008e68:	9b03      	ldr	r3, [sp, #12]
 8008e6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e6c:	1bdb      	subs	r3, r3, r7
 8008e6e:	4638      	mov	r0, r7
 8008e70:	6013      	str	r3, [r2, #0]
 8008e72:	b004      	add	sp, #16
 8008e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e78:	1c59      	adds	r1, r3, #1
 8008e7a:	9103      	str	r1, [sp, #12]
 8008e7c:	701a      	strb	r2, [r3, #0]
 8008e7e:	e7f0      	b.n	8008e62 <__cvt+0xa6>

08008e80 <__exponent>:
 8008e80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e82:	4603      	mov	r3, r0
 8008e84:	2900      	cmp	r1, #0
 8008e86:	bfb8      	it	lt
 8008e88:	4249      	neglt	r1, r1
 8008e8a:	f803 2b02 	strb.w	r2, [r3], #2
 8008e8e:	bfb4      	ite	lt
 8008e90:	222d      	movlt	r2, #45	; 0x2d
 8008e92:	222b      	movge	r2, #43	; 0x2b
 8008e94:	2909      	cmp	r1, #9
 8008e96:	7042      	strb	r2, [r0, #1]
 8008e98:	dd2a      	ble.n	8008ef0 <__exponent+0x70>
 8008e9a:	f10d 0407 	add.w	r4, sp, #7
 8008e9e:	46a4      	mov	ip, r4
 8008ea0:	270a      	movs	r7, #10
 8008ea2:	46a6      	mov	lr, r4
 8008ea4:	460a      	mov	r2, r1
 8008ea6:	fb91 f6f7 	sdiv	r6, r1, r7
 8008eaa:	fb07 1516 	mls	r5, r7, r6, r1
 8008eae:	3530      	adds	r5, #48	; 0x30
 8008eb0:	2a63      	cmp	r2, #99	; 0x63
 8008eb2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008eb6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008eba:	4631      	mov	r1, r6
 8008ebc:	dcf1      	bgt.n	8008ea2 <__exponent+0x22>
 8008ebe:	3130      	adds	r1, #48	; 0x30
 8008ec0:	f1ae 0502 	sub.w	r5, lr, #2
 8008ec4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008ec8:	1c44      	adds	r4, r0, #1
 8008eca:	4629      	mov	r1, r5
 8008ecc:	4561      	cmp	r1, ip
 8008ece:	d30a      	bcc.n	8008ee6 <__exponent+0x66>
 8008ed0:	f10d 0209 	add.w	r2, sp, #9
 8008ed4:	eba2 020e 	sub.w	r2, r2, lr
 8008ed8:	4565      	cmp	r5, ip
 8008eda:	bf88      	it	hi
 8008edc:	2200      	movhi	r2, #0
 8008ede:	4413      	add	r3, r2
 8008ee0:	1a18      	subs	r0, r3, r0
 8008ee2:	b003      	add	sp, #12
 8008ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ee6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008eea:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008eee:	e7ed      	b.n	8008ecc <__exponent+0x4c>
 8008ef0:	2330      	movs	r3, #48	; 0x30
 8008ef2:	3130      	adds	r1, #48	; 0x30
 8008ef4:	7083      	strb	r3, [r0, #2]
 8008ef6:	70c1      	strb	r1, [r0, #3]
 8008ef8:	1d03      	adds	r3, r0, #4
 8008efa:	e7f1      	b.n	8008ee0 <__exponent+0x60>

08008efc <_printf_float>:
 8008efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f00:	ed2d 8b02 	vpush	{d8}
 8008f04:	b08d      	sub	sp, #52	; 0x34
 8008f06:	460c      	mov	r4, r1
 8008f08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008f0c:	4616      	mov	r6, r2
 8008f0e:	461f      	mov	r7, r3
 8008f10:	4605      	mov	r5, r0
 8008f12:	f001 fa57 	bl	800a3c4 <_localeconv_r>
 8008f16:	f8d0 a000 	ldr.w	sl, [r0]
 8008f1a:	4650      	mov	r0, sl
 8008f1c:	f7f7 f958 	bl	80001d0 <strlen>
 8008f20:	2300      	movs	r3, #0
 8008f22:	930a      	str	r3, [sp, #40]	; 0x28
 8008f24:	6823      	ldr	r3, [r4, #0]
 8008f26:	9305      	str	r3, [sp, #20]
 8008f28:	f8d8 3000 	ldr.w	r3, [r8]
 8008f2c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008f30:	3307      	adds	r3, #7
 8008f32:	f023 0307 	bic.w	r3, r3, #7
 8008f36:	f103 0208 	add.w	r2, r3, #8
 8008f3a:	f8c8 2000 	str.w	r2, [r8]
 8008f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f42:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008f46:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008f4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008f4e:	9307      	str	r3, [sp, #28]
 8008f50:	f8cd 8018 	str.w	r8, [sp, #24]
 8008f54:	ee08 0a10 	vmov	s16, r0
 8008f58:	4b9f      	ldr	r3, [pc, #636]	; (80091d8 <_printf_float+0x2dc>)
 8008f5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f62:	f7f7 fde3 	bl	8000b2c <__aeabi_dcmpun>
 8008f66:	bb88      	cbnz	r0, 8008fcc <_printf_float+0xd0>
 8008f68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f6c:	4b9a      	ldr	r3, [pc, #616]	; (80091d8 <_printf_float+0x2dc>)
 8008f6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f72:	f7f7 fdbd 	bl	8000af0 <__aeabi_dcmple>
 8008f76:	bb48      	cbnz	r0, 8008fcc <_printf_float+0xd0>
 8008f78:	2200      	movs	r2, #0
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	4640      	mov	r0, r8
 8008f7e:	4649      	mov	r1, r9
 8008f80:	f7f7 fdac 	bl	8000adc <__aeabi_dcmplt>
 8008f84:	b110      	cbz	r0, 8008f8c <_printf_float+0x90>
 8008f86:	232d      	movs	r3, #45	; 0x2d
 8008f88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f8c:	4b93      	ldr	r3, [pc, #588]	; (80091dc <_printf_float+0x2e0>)
 8008f8e:	4894      	ldr	r0, [pc, #592]	; (80091e0 <_printf_float+0x2e4>)
 8008f90:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008f94:	bf94      	ite	ls
 8008f96:	4698      	movls	r8, r3
 8008f98:	4680      	movhi	r8, r0
 8008f9a:	2303      	movs	r3, #3
 8008f9c:	6123      	str	r3, [r4, #16]
 8008f9e:	9b05      	ldr	r3, [sp, #20]
 8008fa0:	f023 0204 	bic.w	r2, r3, #4
 8008fa4:	6022      	str	r2, [r4, #0]
 8008fa6:	f04f 0900 	mov.w	r9, #0
 8008faa:	9700      	str	r7, [sp, #0]
 8008fac:	4633      	mov	r3, r6
 8008fae:	aa0b      	add	r2, sp, #44	; 0x2c
 8008fb0:	4621      	mov	r1, r4
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	f000 f9d8 	bl	8009368 <_printf_common>
 8008fb8:	3001      	adds	r0, #1
 8008fba:	f040 8090 	bne.w	80090de <_printf_float+0x1e2>
 8008fbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fc2:	b00d      	add	sp, #52	; 0x34
 8008fc4:	ecbd 8b02 	vpop	{d8}
 8008fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fcc:	4642      	mov	r2, r8
 8008fce:	464b      	mov	r3, r9
 8008fd0:	4640      	mov	r0, r8
 8008fd2:	4649      	mov	r1, r9
 8008fd4:	f7f7 fdaa 	bl	8000b2c <__aeabi_dcmpun>
 8008fd8:	b140      	cbz	r0, 8008fec <_printf_float+0xf0>
 8008fda:	464b      	mov	r3, r9
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	bfbc      	itt	lt
 8008fe0:	232d      	movlt	r3, #45	; 0x2d
 8008fe2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008fe6:	487f      	ldr	r0, [pc, #508]	; (80091e4 <_printf_float+0x2e8>)
 8008fe8:	4b7f      	ldr	r3, [pc, #508]	; (80091e8 <_printf_float+0x2ec>)
 8008fea:	e7d1      	b.n	8008f90 <_printf_float+0x94>
 8008fec:	6863      	ldr	r3, [r4, #4]
 8008fee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008ff2:	9206      	str	r2, [sp, #24]
 8008ff4:	1c5a      	adds	r2, r3, #1
 8008ff6:	d13f      	bne.n	8009078 <_printf_float+0x17c>
 8008ff8:	2306      	movs	r3, #6
 8008ffa:	6063      	str	r3, [r4, #4]
 8008ffc:	9b05      	ldr	r3, [sp, #20]
 8008ffe:	6861      	ldr	r1, [r4, #4]
 8009000:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009004:	2300      	movs	r3, #0
 8009006:	9303      	str	r3, [sp, #12]
 8009008:	ab0a      	add	r3, sp, #40	; 0x28
 800900a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800900e:	ab09      	add	r3, sp, #36	; 0x24
 8009010:	ec49 8b10 	vmov	d0, r8, r9
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	6022      	str	r2, [r4, #0]
 8009018:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800901c:	4628      	mov	r0, r5
 800901e:	f7ff fecd 	bl	8008dbc <__cvt>
 8009022:	9b06      	ldr	r3, [sp, #24]
 8009024:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009026:	2b47      	cmp	r3, #71	; 0x47
 8009028:	4680      	mov	r8, r0
 800902a:	d108      	bne.n	800903e <_printf_float+0x142>
 800902c:	1cc8      	adds	r0, r1, #3
 800902e:	db02      	blt.n	8009036 <_printf_float+0x13a>
 8009030:	6863      	ldr	r3, [r4, #4]
 8009032:	4299      	cmp	r1, r3
 8009034:	dd41      	ble.n	80090ba <_printf_float+0x1be>
 8009036:	f1ab 0b02 	sub.w	fp, fp, #2
 800903a:	fa5f fb8b 	uxtb.w	fp, fp
 800903e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009042:	d820      	bhi.n	8009086 <_printf_float+0x18a>
 8009044:	3901      	subs	r1, #1
 8009046:	465a      	mov	r2, fp
 8009048:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800904c:	9109      	str	r1, [sp, #36]	; 0x24
 800904e:	f7ff ff17 	bl	8008e80 <__exponent>
 8009052:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009054:	1813      	adds	r3, r2, r0
 8009056:	2a01      	cmp	r2, #1
 8009058:	4681      	mov	r9, r0
 800905a:	6123      	str	r3, [r4, #16]
 800905c:	dc02      	bgt.n	8009064 <_printf_float+0x168>
 800905e:	6822      	ldr	r2, [r4, #0]
 8009060:	07d2      	lsls	r2, r2, #31
 8009062:	d501      	bpl.n	8009068 <_printf_float+0x16c>
 8009064:	3301      	adds	r3, #1
 8009066:	6123      	str	r3, [r4, #16]
 8009068:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800906c:	2b00      	cmp	r3, #0
 800906e:	d09c      	beq.n	8008faa <_printf_float+0xae>
 8009070:	232d      	movs	r3, #45	; 0x2d
 8009072:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009076:	e798      	b.n	8008faa <_printf_float+0xae>
 8009078:	9a06      	ldr	r2, [sp, #24]
 800907a:	2a47      	cmp	r2, #71	; 0x47
 800907c:	d1be      	bne.n	8008ffc <_printf_float+0x100>
 800907e:	2b00      	cmp	r3, #0
 8009080:	d1bc      	bne.n	8008ffc <_printf_float+0x100>
 8009082:	2301      	movs	r3, #1
 8009084:	e7b9      	b.n	8008ffa <_printf_float+0xfe>
 8009086:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800908a:	d118      	bne.n	80090be <_printf_float+0x1c2>
 800908c:	2900      	cmp	r1, #0
 800908e:	6863      	ldr	r3, [r4, #4]
 8009090:	dd0b      	ble.n	80090aa <_printf_float+0x1ae>
 8009092:	6121      	str	r1, [r4, #16]
 8009094:	b913      	cbnz	r3, 800909c <_printf_float+0x1a0>
 8009096:	6822      	ldr	r2, [r4, #0]
 8009098:	07d0      	lsls	r0, r2, #31
 800909a:	d502      	bpl.n	80090a2 <_printf_float+0x1a6>
 800909c:	3301      	adds	r3, #1
 800909e:	440b      	add	r3, r1
 80090a0:	6123      	str	r3, [r4, #16]
 80090a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80090a4:	f04f 0900 	mov.w	r9, #0
 80090a8:	e7de      	b.n	8009068 <_printf_float+0x16c>
 80090aa:	b913      	cbnz	r3, 80090b2 <_printf_float+0x1b6>
 80090ac:	6822      	ldr	r2, [r4, #0]
 80090ae:	07d2      	lsls	r2, r2, #31
 80090b0:	d501      	bpl.n	80090b6 <_printf_float+0x1ba>
 80090b2:	3302      	adds	r3, #2
 80090b4:	e7f4      	b.n	80090a0 <_printf_float+0x1a4>
 80090b6:	2301      	movs	r3, #1
 80090b8:	e7f2      	b.n	80090a0 <_printf_float+0x1a4>
 80090ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80090be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090c0:	4299      	cmp	r1, r3
 80090c2:	db05      	blt.n	80090d0 <_printf_float+0x1d4>
 80090c4:	6823      	ldr	r3, [r4, #0]
 80090c6:	6121      	str	r1, [r4, #16]
 80090c8:	07d8      	lsls	r0, r3, #31
 80090ca:	d5ea      	bpl.n	80090a2 <_printf_float+0x1a6>
 80090cc:	1c4b      	adds	r3, r1, #1
 80090ce:	e7e7      	b.n	80090a0 <_printf_float+0x1a4>
 80090d0:	2900      	cmp	r1, #0
 80090d2:	bfd4      	ite	le
 80090d4:	f1c1 0202 	rsble	r2, r1, #2
 80090d8:	2201      	movgt	r2, #1
 80090da:	4413      	add	r3, r2
 80090dc:	e7e0      	b.n	80090a0 <_printf_float+0x1a4>
 80090de:	6823      	ldr	r3, [r4, #0]
 80090e0:	055a      	lsls	r2, r3, #21
 80090e2:	d407      	bmi.n	80090f4 <_printf_float+0x1f8>
 80090e4:	6923      	ldr	r3, [r4, #16]
 80090e6:	4642      	mov	r2, r8
 80090e8:	4631      	mov	r1, r6
 80090ea:	4628      	mov	r0, r5
 80090ec:	47b8      	blx	r7
 80090ee:	3001      	adds	r0, #1
 80090f0:	d12c      	bne.n	800914c <_printf_float+0x250>
 80090f2:	e764      	b.n	8008fbe <_printf_float+0xc2>
 80090f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80090f8:	f240 80e0 	bls.w	80092bc <_printf_float+0x3c0>
 80090fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009100:	2200      	movs	r2, #0
 8009102:	2300      	movs	r3, #0
 8009104:	f7f7 fce0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009108:	2800      	cmp	r0, #0
 800910a:	d034      	beq.n	8009176 <_printf_float+0x27a>
 800910c:	4a37      	ldr	r2, [pc, #220]	; (80091ec <_printf_float+0x2f0>)
 800910e:	2301      	movs	r3, #1
 8009110:	4631      	mov	r1, r6
 8009112:	4628      	mov	r0, r5
 8009114:	47b8      	blx	r7
 8009116:	3001      	adds	r0, #1
 8009118:	f43f af51 	beq.w	8008fbe <_printf_float+0xc2>
 800911c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009120:	429a      	cmp	r2, r3
 8009122:	db02      	blt.n	800912a <_printf_float+0x22e>
 8009124:	6823      	ldr	r3, [r4, #0]
 8009126:	07d8      	lsls	r0, r3, #31
 8009128:	d510      	bpl.n	800914c <_printf_float+0x250>
 800912a:	ee18 3a10 	vmov	r3, s16
 800912e:	4652      	mov	r2, sl
 8009130:	4631      	mov	r1, r6
 8009132:	4628      	mov	r0, r5
 8009134:	47b8      	blx	r7
 8009136:	3001      	adds	r0, #1
 8009138:	f43f af41 	beq.w	8008fbe <_printf_float+0xc2>
 800913c:	f04f 0800 	mov.w	r8, #0
 8009140:	f104 091a 	add.w	r9, r4, #26
 8009144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009146:	3b01      	subs	r3, #1
 8009148:	4543      	cmp	r3, r8
 800914a:	dc09      	bgt.n	8009160 <_printf_float+0x264>
 800914c:	6823      	ldr	r3, [r4, #0]
 800914e:	079b      	lsls	r3, r3, #30
 8009150:	f100 8105 	bmi.w	800935e <_printf_float+0x462>
 8009154:	68e0      	ldr	r0, [r4, #12]
 8009156:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009158:	4298      	cmp	r0, r3
 800915a:	bfb8      	it	lt
 800915c:	4618      	movlt	r0, r3
 800915e:	e730      	b.n	8008fc2 <_printf_float+0xc6>
 8009160:	2301      	movs	r3, #1
 8009162:	464a      	mov	r2, r9
 8009164:	4631      	mov	r1, r6
 8009166:	4628      	mov	r0, r5
 8009168:	47b8      	blx	r7
 800916a:	3001      	adds	r0, #1
 800916c:	f43f af27 	beq.w	8008fbe <_printf_float+0xc2>
 8009170:	f108 0801 	add.w	r8, r8, #1
 8009174:	e7e6      	b.n	8009144 <_printf_float+0x248>
 8009176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009178:	2b00      	cmp	r3, #0
 800917a:	dc39      	bgt.n	80091f0 <_printf_float+0x2f4>
 800917c:	4a1b      	ldr	r2, [pc, #108]	; (80091ec <_printf_float+0x2f0>)
 800917e:	2301      	movs	r3, #1
 8009180:	4631      	mov	r1, r6
 8009182:	4628      	mov	r0, r5
 8009184:	47b8      	blx	r7
 8009186:	3001      	adds	r0, #1
 8009188:	f43f af19 	beq.w	8008fbe <_printf_float+0xc2>
 800918c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009190:	4313      	orrs	r3, r2
 8009192:	d102      	bne.n	800919a <_printf_float+0x29e>
 8009194:	6823      	ldr	r3, [r4, #0]
 8009196:	07d9      	lsls	r1, r3, #31
 8009198:	d5d8      	bpl.n	800914c <_printf_float+0x250>
 800919a:	ee18 3a10 	vmov	r3, s16
 800919e:	4652      	mov	r2, sl
 80091a0:	4631      	mov	r1, r6
 80091a2:	4628      	mov	r0, r5
 80091a4:	47b8      	blx	r7
 80091a6:	3001      	adds	r0, #1
 80091a8:	f43f af09 	beq.w	8008fbe <_printf_float+0xc2>
 80091ac:	f04f 0900 	mov.w	r9, #0
 80091b0:	f104 0a1a 	add.w	sl, r4, #26
 80091b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091b6:	425b      	negs	r3, r3
 80091b8:	454b      	cmp	r3, r9
 80091ba:	dc01      	bgt.n	80091c0 <_printf_float+0x2c4>
 80091bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091be:	e792      	b.n	80090e6 <_printf_float+0x1ea>
 80091c0:	2301      	movs	r3, #1
 80091c2:	4652      	mov	r2, sl
 80091c4:	4631      	mov	r1, r6
 80091c6:	4628      	mov	r0, r5
 80091c8:	47b8      	blx	r7
 80091ca:	3001      	adds	r0, #1
 80091cc:	f43f aef7 	beq.w	8008fbe <_printf_float+0xc2>
 80091d0:	f109 0901 	add.w	r9, r9, #1
 80091d4:	e7ee      	b.n	80091b4 <_printf_float+0x2b8>
 80091d6:	bf00      	nop
 80091d8:	7fefffff 	.word	0x7fefffff
 80091dc:	0800e7e0 	.word	0x0800e7e0
 80091e0:	0800e7e4 	.word	0x0800e7e4
 80091e4:	0800e7ec 	.word	0x0800e7ec
 80091e8:	0800e7e8 	.word	0x0800e7e8
 80091ec:	0800e7f0 	.word	0x0800e7f0
 80091f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80091f4:	429a      	cmp	r2, r3
 80091f6:	bfa8      	it	ge
 80091f8:	461a      	movge	r2, r3
 80091fa:	2a00      	cmp	r2, #0
 80091fc:	4691      	mov	r9, r2
 80091fe:	dc37      	bgt.n	8009270 <_printf_float+0x374>
 8009200:	f04f 0b00 	mov.w	fp, #0
 8009204:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009208:	f104 021a 	add.w	r2, r4, #26
 800920c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800920e:	9305      	str	r3, [sp, #20]
 8009210:	eba3 0309 	sub.w	r3, r3, r9
 8009214:	455b      	cmp	r3, fp
 8009216:	dc33      	bgt.n	8009280 <_printf_float+0x384>
 8009218:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800921c:	429a      	cmp	r2, r3
 800921e:	db3b      	blt.n	8009298 <_printf_float+0x39c>
 8009220:	6823      	ldr	r3, [r4, #0]
 8009222:	07da      	lsls	r2, r3, #31
 8009224:	d438      	bmi.n	8009298 <_printf_float+0x39c>
 8009226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009228:	9a05      	ldr	r2, [sp, #20]
 800922a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800922c:	1a9a      	subs	r2, r3, r2
 800922e:	eba3 0901 	sub.w	r9, r3, r1
 8009232:	4591      	cmp	r9, r2
 8009234:	bfa8      	it	ge
 8009236:	4691      	movge	r9, r2
 8009238:	f1b9 0f00 	cmp.w	r9, #0
 800923c:	dc35      	bgt.n	80092aa <_printf_float+0x3ae>
 800923e:	f04f 0800 	mov.w	r8, #0
 8009242:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009246:	f104 0a1a 	add.w	sl, r4, #26
 800924a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800924e:	1a9b      	subs	r3, r3, r2
 8009250:	eba3 0309 	sub.w	r3, r3, r9
 8009254:	4543      	cmp	r3, r8
 8009256:	f77f af79 	ble.w	800914c <_printf_float+0x250>
 800925a:	2301      	movs	r3, #1
 800925c:	4652      	mov	r2, sl
 800925e:	4631      	mov	r1, r6
 8009260:	4628      	mov	r0, r5
 8009262:	47b8      	blx	r7
 8009264:	3001      	adds	r0, #1
 8009266:	f43f aeaa 	beq.w	8008fbe <_printf_float+0xc2>
 800926a:	f108 0801 	add.w	r8, r8, #1
 800926e:	e7ec      	b.n	800924a <_printf_float+0x34e>
 8009270:	4613      	mov	r3, r2
 8009272:	4631      	mov	r1, r6
 8009274:	4642      	mov	r2, r8
 8009276:	4628      	mov	r0, r5
 8009278:	47b8      	blx	r7
 800927a:	3001      	adds	r0, #1
 800927c:	d1c0      	bne.n	8009200 <_printf_float+0x304>
 800927e:	e69e      	b.n	8008fbe <_printf_float+0xc2>
 8009280:	2301      	movs	r3, #1
 8009282:	4631      	mov	r1, r6
 8009284:	4628      	mov	r0, r5
 8009286:	9205      	str	r2, [sp, #20]
 8009288:	47b8      	blx	r7
 800928a:	3001      	adds	r0, #1
 800928c:	f43f ae97 	beq.w	8008fbe <_printf_float+0xc2>
 8009290:	9a05      	ldr	r2, [sp, #20]
 8009292:	f10b 0b01 	add.w	fp, fp, #1
 8009296:	e7b9      	b.n	800920c <_printf_float+0x310>
 8009298:	ee18 3a10 	vmov	r3, s16
 800929c:	4652      	mov	r2, sl
 800929e:	4631      	mov	r1, r6
 80092a0:	4628      	mov	r0, r5
 80092a2:	47b8      	blx	r7
 80092a4:	3001      	adds	r0, #1
 80092a6:	d1be      	bne.n	8009226 <_printf_float+0x32a>
 80092a8:	e689      	b.n	8008fbe <_printf_float+0xc2>
 80092aa:	9a05      	ldr	r2, [sp, #20]
 80092ac:	464b      	mov	r3, r9
 80092ae:	4442      	add	r2, r8
 80092b0:	4631      	mov	r1, r6
 80092b2:	4628      	mov	r0, r5
 80092b4:	47b8      	blx	r7
 80092b6:	3001      	adds	r0, #1
 80092b8:	d1c1      	bne.n	800923e <_printf_float+0x342>
 80092ba:	e680      	b.n	8008fbe <_printf_float+0xc2>
 80092bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092be:	2a01      	cmp	r2, #1
 80092c0:	dc01      	bgt.n	80092c6 <_printf_float+0x3ca>
 80092c2:	07db      	lsls	r3, r3, #31
 80092c4:	d538      	bpl.n	8009338 <_printf_float+0x43c>
 80092c6:	2301      	movs	r3, #1
 80092c8:	4642      	mov	r2, r8
 80092ca:	4631      	mov	r1, r6
 80092cc:	4628      	mov	r0, r5
 80092ce:	47b8      	blx	r7
 80092d0:	3001      	adds	r0, #1
 80092d2:	f43f ae74 	beq.w	8008fbe <_printf_float+0xc2>
 80092d6:	ee18 3a10 	vmov	r3, s16
 80092da:	4652      	mov	r2, sl
 80092dc:	4631      	mov	r1, r6
 80092de:	4628      	mov	r0, r5
 80092e0:	47b8      	blx	r7
 80092e2:	3001      	adds	r0, #1
 80092e4:	f43f ae6b 	beq.w	8008fbe <_printf_float+0xc2>
 80092e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80092ec:	2200      	movs	r2, #0
 80092ee:	2300      	movs	r3, #0
 80092f0:	f7f7 fbea 	bl	8000ac8 <__aeabi_dcmpeq>
 80092f4:	b9d8      	cbnz	r0, 800932e <_printf_float+0x432>
 80092f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092f8:	f108 0201 	add.w	r2, r8, #1
 80092fc:	3b01      	subs	r3, #1
 80092fe:	4631      	mov	r1, r6
 8009300:	4628      	mov	r0, r5
 8009302:	47b8      	blx	r7
 8009304:	3001      	adds	r0, #1
 8009306:	d10e      	bne.n	8009326 <_printf_float+0x42a>
 8009308:	e659      	b.n	8008fbe <_printf_float+0xc2>
 800930a:	2301      	movs	r3, #1
 800930c:	4652      	mov	r2, sl
 800930e:	4631      	mov	r1, r6
 8009310:	4628      	mov	r0, r5
 8009312:	47b8      	blx	r7
 8009314:	3001      	adds	r0, #1
 8009316:	f43f ae52 	beq.w	8008fbe <_printf_float+0xc2>
 800931a:	f108 0801 	add.w	r8, r8, #1
 800931e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009320:	3b01      	subs	r3, #1
 8009322:	4543      	cmp	r3, r8
 8009324:	dcf1      	bgt.n	800930a <_printf_float+0x40e>
 8009326:	464b      	mov	r3, r9
 8009328:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800932c:	e6dc      	b.n	80090e8 <_printf_float+0x1ec>
 800932e:	f04f 0800 	mov.w	r8, #0
 8009332:	f104 0a1a 	add.w	sl, r4, #26
 8009336:	e7f2      	b.n	800931e <_printf_float+0x422>
 8009338:	2301      	movs	r3, #1
 800933a:	4642      	mov	r2, r8
 800933c:	e7df      	b.n	80092fe <_printf_float+0x402>
 800933e:	2301      	movs	r3, #1
 8009340:	464a      	mov	r2, r9
 8009342:	4631      	mov	r1, r6
 8009344:	4628      	mov	r0, r5
 8009346:	47b8      	blx	r7
 8009348:	3001      	adds	r0, #1
 800934a:	f43f ae38 	beq.w	8008fbe <_printf_float+0xc2>
 800934e:	f108 0801 	add.w	r8, r8, #1
 8009352:	68e3      	ldr	r3, [r4, #12]
 8009354:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009356:	1a5b      	subs	r3, r3, r1
 8009358:	4543      	cmp	r3, r8
 800935a:	dcf0      	bgt.n	800933e <_printf_float+0x442>
 800935c:	e6fa      	b.n	8009154 <_printf_float+0x258>
 800935e:	f04f 0800 	mov.w	r8, #0
 8009362:	f104 0919 	add.w	r9, r4, #25
 8009366:	e7f4      	b.n	8009352 <_printf_float+0x456>

08009368 <_printf_common>:
 8009368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800936c:	4616      	mov	r6, r2
 800936e:	4699      	mov	r9, r3
 8009370:	688a      	ldr	r2, [r1, #8]
 8009372:	690b      	ldr	r3, [r1, #16]
 8009374:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009378:	4293      	cmp	r3, r2
 800937a:	bfb8      	it	lt
 800937c:	4613      	movlt	r3, r2
 800937e:	6033      	str	r3, [r6, #0]
 8009380:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009384:	4607      	mov	r7, r0
 8009386:	460c      	mov	r4, r1
 8009388:	b10a      	cbz	r2, 800938e <_printf_common+0x26>
 800938a:	3301      	adds	r3, #1
 800938c:	6033      	str	r3, [r6, #0]
 800938e:	6823      	ldr	r3, [r4, #0]
 8009390:	0699      	lsls	r1, r3, #26
 8009392:	bf42      	ittt	mi
 8009394:	6833      	ldrmi	r3, [r6, #0]
 8009396:	3302      	addmi	r3, #2
 8009398:	6033      	strmi	r3, [r6, #0]
 800939a:	6825      	ldr	r5, [r4, #0]
 800939c:	f015 0506 	ands.w	r5, r5, #6
 80093a0:	d106      	bne.n	80093b0 <_printf_common+0x48>
 80093a2:	f104 0a19 	add.w	sl, r4, #25
 80093a6:	68e3      	ldr	r3, [r4, #12]
 80093a8:	6832      	ldr	r2, [r6, #0]
 80093aa:	1a9b      	subs	r3, r3, r2
 80093ac:	42ab      	cmp	r3, r5
 80093ae:	dc26      	bgt.n	80093fe <_printf_common+0x96>
 80093b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80093b4:	1e13      	subs	r3, r2, #0
 80093b6:	6822      	ldr	r2, [r4, #0]
 80093b8:	bf18      	it	ne
 80093ba:	2301      	movne	r3, #1
 80093bc:	0692      	lsls	r2, r2, #26
 80093be:	d42b      	bmi.n	8009418 <_printf_common+0xb0>
 80093c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093c4:	4649      	mov	r1, r9
 80093c6:	4638      	mov	r0, r7
 80093c8:	47c0      	blx	r8
 80093ca:	3001      	adds	r0, #1
 80093cc:	d01e      	beq.n	800940c <_printf_common+0xa4>
 80093ce:	6823      	ldr	r3, [r4, #0]
 80093d0:	68e5      	ldr	r5, [r4, #12]
 80093d2:	6832      	ldr	r2, [r6, #0]
 80093d4:	f003 0306 	and.w	r3, r3, #6
 80093d8:	2b04      	cmp	r3, #4
 80093da:	bf08      	it	eq
 80093dc:	1aad      	subeq	r5, r5, r2
 80093de:	68a3      	ldr	r3, [r4, #8]
 80093e0:	6922      	ldr	r2, [r4, #16]
 80093e2:	bf0c      	ite	eq
 80093e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093e8:	2500      	movne	r5, #0
 80093ea:	4293      	cmp	r3, r2
 80093ec:	bfc4      	itt	gt
 80093ee:	1a9b      	subgt	r3, r3, r2
 80093f0:	18ed      	addgt	r5, r5, r3
 80093f2:	2600      	movs	r6, #0
 80093f4:	341a      	adds	r4, #26
 80093f6:	42b5      	cmp	r5, r6
 80093f8:	d11a      	bne.n	8009430 <_printf_common+0xc8>
 80093fa:	2000      	movs	r0, #0
 80093fc:	e008      	b.n	8009410 <_printf_common+0xa8>
 80093fe:	2301      	movs	r3, #1
 8009400:	4652      	mov	r2, sl
 8009402:	4649      	mov	r1, r9
 8009404:	4638      	mov	r0, r7
 8009406:	47c0      	blx	r8
 8009408:	3001      	adds	r0, #1
 800940a:	d103      	bne.n	8009414 <_printf_common+0xac>
 800940c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009414:	3501      	adds	r5, #1
 8009416:	e7c6      	b.n	80093a6 <_printf_common+0x3e>
 8009418:	18e1      	adds	r1, r4, r3
 800941a:	1c5a      	adds	r2, r3, #1
 800941c:	2030      	movs	r0, #48	; 0x30
 800941e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009422:	4422      	add	r2, r4
 8009424:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009428:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800942c:	3302      	adds	r3, #2
 800942e:	e7c7      	b.n	80093c0 <_printf_common+0x58>
 8009430:	2301      	movs	r3, #1
 8009432:	4622      	mov	r2, r4
 8009434:	4649      	mov	r1, r9
 8009436:	4638      	mov	r0, r7
 8009438:	47c0      	blx	r8
 800943a:	3001      	adds	r0, #1
 800943c:	d0e6      	beq.n	800940c <_printf_common+0xa4>
 800943e:	3601      	adds	r6, #1
 8009440:	e7d9      	b.n	80093f6 <_printf_common+0x8e>
	...

08009444 <_printf_i>:
 8009444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009448:	7e0f      	ldrb	r7, [r1, #24]
 800944a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800944c:	2f78      	cmp	r7, #120	; 0x78
 800944e:	4691      	mov	r9, r2
 8009450:	4680      	mov	r8, r0
 8009452:	460c      	mov	r4, r1
 8009454:	469a      	mov	sl, r3
 8009456:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800945a:	d807      	bhi.n	800946c <_printf_i+0x28>
 800945c:	2f62      	cmp	r7, #98	; 0x62
 800945e:	d80a      	bhi.n	8009476 <_printf_i+0x32>
 8009460:	2f00      	cmp	r7, #0
 8009462:	f000 80d8 	beq.w	8009616 <_printf_i+0x1d2>
 8009466:	2f58      	cmp	r7, #88	; 0x58
 8009468:	f000 80a3 	beq.w	80095b2 <_printf_i+0x16e>
 800946c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009470:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009474:	e03a      	b.n	80094ec <_printf_i+0xa8>
 8009476:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800947a:	2b15      	cmp	r3, #21
 800947c:	d8f6      	bhi.n	800946c <_printf_i+0x28>
 800947e:	a101      	add	r1, pc, #4	; (adr r1, 8009484 <_printf_i+0x40>)
 8009480:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009484:	080094dd 	.word	0x080094dd
 8009488:	080094f1 	.word	0x080094f1
 800948c:	0800946d 	.word	0x0800946d
 8009490:	0800946d 	.word	0x0800946d
 8009494:	0800946d 	.word	0x0800946d
 8009498:	0800946d 	.word	0x0800946d
 800949c:	080094f1 	.word	0x080094f1
 80094a0:	0800946d 	.word	0x0800946d
 80094a4:	0800946d 	.word	0x0800946d
 80094a8:	0800946d 	.word	0x0800946d
 80094ac:	0800946d 	.word	0x0800946d
 80094b0:	080095fd 	.word	0x080095fd
 80094b4:	08009521 	.word	0x08009521
 80094b8:	080095df 	.word	0x080095df
 80094bc:	0800946d 	.word	0x0800946d
 80094c0:	0800946d 	.word	0x0800946d
 80094c4:	0800961f 	.word	0x0800961f
 80094c8:	0800946d 	.word	0x0800946d
 80094cc:	08009521 	.word	0x08009521
 80094d0:	0800946d 	.word	0x0800946d
 80094d4:	0800946d 	.word	0x0800946d
 80094d8:	080095e7 	.word	0x080095e7
 80094dc:	682b      	ldr	r3, [r5, #0]
 80094de:	1d1a      	adds	r2, r3, #4
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	602a      	str	r2, [r5, #0]
 80094e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094ec:	2301      	movs	r3, #1
 80094ee:	e0a3      	b.n	8009638 <_printf_i+0x1f4>
 80094f0:	6820      	ldr	r0, [r4, #0]
 80094f2:	6829      	ldr	r1, [r5, #0]
 80094f4:	0606      	lsls	r6, r0, #24
 80094f6:	f101 0304 	add.w	r3, r1, #4
 80094fa:	d50a      	bpl.n	8009512 <_printf_i+0xce>
 80094fc:	680e      	ldr	r6, [r1, #0]
 80094fe:	602b      	str	r3, [r5, #0]
 8009500:	2e00      	cmp	r6, #0
 8009502:	da03      	bge.n	800950c <_printf_i+0xc8>
 8009504:	232d      	movs	r3, #45	; 0x2d
 8009506:	4276      	negs	r6, r6
 8009508:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800950c:	485e      	ldr	r0, [pc, #376]	; (8009688 <_printf_i+0x244>)
 800950e:	230a      	movs	r3, #10
 8009510:	e019      	b.n	8009546 <_printf_i+0x102>
 8009512:	680e      	ldr	r6, [r1, #0]
 8009514:	602b      	str	r3, [r5, #0]
 8009516:	f010 0f40 	tst.w	r0, #64	; 0x40
 800951a:	bf18      	it	ne
 800951c:	b236      	sxthne	r6, r6
 800951e:	e7ef      	b.n	8009500 <_printf_i+0xbc>
 8009520:	682b      	ldr	r3, [r5, #0]
 8009522:	6820      	ldr	r0, [r4, #0]
 8009524:	1d19      	adds	r1, r3, #4
 8009526:	6029      	str	r1, [r5, #0]
 8009528:	0601      	lsls	r1, r0, #24
 800952a:	d501      	bpl.n	8009530 <_printf_i+0xec>
 800952c:	681e      	ldr	r6, [r3, #0]
 800952e:	e002      	b.n	8009536 <_printf_i+0xf2>
 8009530:	0646      	lsls	r6, r0, #25
 8009532:	d5fb      	bpl.n	800952c <_printf_i+0xe8>
 8009534:	881e      	ldrh	r6, [r3, #0]
 8009536:	4854      	ldr	r0, [pc, #336]	; (8009688 <_printf_i+0x244>)
 8009538:	2f6f      	cmp	r7, #111	; 0x6f
 800953a:	bf0c      	ite	eq
 800953c:	2308      	moveq	r3, #8
 800953e:	230a      	movne	r3, #10
 8009540:	2100      	movs	r1, #0
 8009542:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009546:	6865      	ldr	r5, [r4, #4]
 8009548:	60a5      	str	r5, [r4, #8]
 800954a:	2d00      	cmp	r5, #0
 800954c:	bfa2      	ittt	ge
 800954e:	6821      	ldrge	r1, [r4, #0]
 8009550:	f021 0104 	bicge.w	r1, r1, #4
 8009554:	6021      	strge	r1, [r4, #0]
 8009556:	b90e      	cbnz	r6, 800955c <_printf_i+0x118>
 8009558:	2d00      	cmp	r5, #0
 800955a:	d04d      	beq.n	80095f8 <_printf_i+0x1b4>
 800955c:	4615      	mov	r5, r2
 800955e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009562:	fb03 6711 	mls	r7, r3, r1, r6
 8009566:	5dc7      	ldrb	r7, [r0, r7]
 8009568:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800956c:	4637      	mov	r7, r6
 800956e:	42bb      	cmp	r3, r7
 8009570:	460e      	mov	r6, r1
 8009572:	d9f4      	bls.n	800955e <_printf_i+0x11a>
 8009574:	2b08      	cmp	r3, #8
 8009576:	d10b      	bne.n	8009590 <_printf_i+0x14c>
 8009578:	6823      	ldr	r3, [r4, #0]
 800957a:	07de      	lsls	r6, r3, #31
 800957c:	d508      	bpl.n	8009590 <_printf_i+0x14c>
 800957e:	6923      	ldr	r3, [r4, #16]
 8009580:	6861      	ldr	r1, [r4, #4]
 8009582:	4299      	cmp	r1, r3
 8009584:	bfde      	ittt	le
 8009586:	2330      	movle	r3, #48	; 0x30
 8009588:	f805 3c01 	strble.w	r3, [r5, #-1]
 800958c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009590:	1b52      	subs	r2, r2, r5
 8009592:	6122      	str	r2, [r4, #16]
 8009594:	f8cd a000 	str.w	sl, [sp]
 8009598:	464b      	mov	r3, r9
 800959a:	aa03      	add	r2, sp, #12
 800959c:	4621      	mov	r1, r4
 800959e:	4640      	mov	r0, r8
 80095a0:	f7ff fee2 	bl	8009368 <_printf_common>
 80095a4:	3001      	adds	r0, #1
 80095a6:	d14c      	bne.n	8009642 <_printf_i+0x1fe>
 80095a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095ac:	b004      	add	sp, #16
 80095ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095b2:	4835      	ldr	r0, [pc, #212]	; (8009688 <_printf_i+0x244>)
 80095b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80095b8:	6829      	ldr	r1, [r5, #0]
 80095ba:	6823      	ldr	r3, [r4, #0]
 80095bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80095c0:	6029      	str	r1, [r5, #0]
 80095c2:	061d      	lsls	r5, r3, #24
 80095c4:	d514      	bpl.n	80095f0 <_printf_i+0x1ac>
 80095c6:	07df      	lsls	r7, r3, #31
 80095c8:	bf44      	itt	mi
 80095ca:	f043 0320 	orrmi.w	r3, r3, #32
 80095ce:	6023      	strmi	r3, [r4, #0]
 80095d0:	b91e      	cbnz	r6, 80095da <_printf_i+0x196>
 80095d2:	6823      	ldr	r3, [r4, #0]
 80095d4:	f023 0320 	bic.w	r3, r3, #32
 80095d8:	6023      	str	r3, [r4, #0]
 80095da:	2310      	movs	r3, #16
 80095dc:	e7b0      	b.n	8009540 <_printf_i+0xfc>
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	f043 0320 	orr.w	r3, r3, #32
 80095e4:	6023      	str	r3, [r4, #0]
 80095e6:	2378      	movs	r3, #120	; 0x78
 80095e8:	4828      	ldr	r0, [pc, #160]	; (800968c <_printf_i+0x248>)
 80095ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80095ee:	e7e3      	b.n	80095b8 <_printf_i+0x174>
 80095f0:	0659      	lsls	r1, r3, #25
 80095f2:	bf48      	it	mi
 80095f4:	b2b6      	uxthmi	r6, r6
 80095f6:	e7e6      	b.n	80095c6 <_printf_i+0x182>
 80095f8:	4615      	mov	r5, r2
 80095fa:	e7bb      	b.n	8009574 <_printf_i+0x130>
 80095fc:	682b      	ldr	r3, [r5, #0]
 80095fe:	6826      	ldr	r6, [r4, #0]
 8009600:	6961      	ldr	r1, [r4, #20]
 8009602:	1d18      	adds	r0, r3, #4
 8009604:	6028      	str	r0, [r5, #0]
 8009606:	0635      	lsls	r5, r6, #24
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	d501      	bpl.n	8009610 <_printf_i+0x1cc>
 800960c:	6019      	str	r1, [r3, #0]
 800960e:	e002      	b.n	8009616 <_printf_i+0x1d2>
 8009610:	0670      	lsls	r0, r6, #25
 8009612:	d5fb      	bpl.n	800960c <_printf_i+0x1c8>
 8009614:	8019      	strh	r1, [r3, #0]
 8009616:	2300      	movs	r3, #0
 8009618:	6123      	str	r3, [r4, #16]
 800961a:	4615      	mov	r5, r2
 800961c:	e7ba      	b.n	8009594 <_printf_i+0x150>
 800961e:	682b      	ldr	r3, [r5, #0]
 8009620:	1d1a      	adds	r2, r3, #4
 8009622:	602a      	str	r2, [r5, #0]
 8009624:	681d      	ldr	r5, [r3, #0]
 8009626:	6862      	ldr	r2, [r4, #4]
 8009628:	2100      	movs	r1, #0
 800962a:	4628      	mov	r0, r5
 800962c:	f7f6 fdd8 	bl	80001e0 <memchr>
 8009630:	b108      	cbz	r0, 8009636 <_printf_i+0x1f2>
 8009632:	1b40      	subs	r0, r0, r5
 8009634:	6060      	str	r0, [r4, #4]
 8009636:	6863      	ldr	r3, [r4, #4]
 8009638:	6123      	str	r3, [r4, #16]
 800963a:	2300      	movs	r3, #0
 800963c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009640:	e7a8      	b.n	8009594 <_printf_i+0x150>
 8009642:	6923      	ldr	r3, [r4, #16]
 8009644:	462a      	mov	r2, r5
 8009646:	4649      	mov	r1, r9
 8009648:	4640      	mov	r0, r8
 800964a:	47d0      	blx	sl
 800964c:	3001      	adds	r0, #1
 800964e:	d0ab      	beq.n	80095a8 <_printf_i+0x164>
 8009650:	6823      	ldr	r3, [r4, #0]
 8009652:	079b      	lsls	r3, r3, #30
 8009654:	d413      	bmi.n	800967e <_printf_i+0x23a>
 8009656:	68e0      	ldr	r0, [r4, #12]
 8009658:	9b03      	ldr	r3, [sp, #12]
 800965a:	4298      	cmp	r0, r3
 800965c:	bfb8      	it	lt
 800965e:	4618      	movlt	r0, r3
 8009660:	e7a4      	b.n	80095ac <_printf_i+0x168>
 8009662:	2301      	movs	r3, #1
 8009664:	4632      	mov	r2, r6
 8009666:	4649      	mov	r1, r9
 8009668:	4640      	mov	r0, r8
 800966a:	47d0      	blx	sl
 800966c:	3001      	adds	r0, #1
 800966e:	d09b      	beq.n	80095a8 <_printf_i+0x164>
 8009670:	3501      	adds	r5, #1
 8009672:	68e3      	ldr	r3, [r4, #12]
 8009674:	9903      	ldr	r1, [sp, #12]
 8009676:	1a5b      	subs	r3, r3, r1
 8009678:	42ab      	cmp	r3, r5
 800967a:	dcf2      	bgt.n	8009662 <_printf_i+0x21e>
 800967c:	e7eb      	b.n	8009656 <_printf_i+0x212>
 800967e:	2500      	movs	r5, #0
 8009680:	f104 0619 	add.w	r6, r4, #25
 8009684:	e7f5      	b.n	8009672 <_printf_i+0x22e>
 8009686:	bf00      	nop
 8009688:	0800e7f2 	.word	0x0800e7f2
 800968c:	0800e803 	.word	0x0800e803

08009690 <_vsiprintf_r>:
 8009690:	b500      	push	{lr}
 8009692:	b09b      	sub	sp, #108	; 0x6c
 8009694:	9100      	str	r1, [sp, #0]
 8009696:	9104      	str	r1, [sp, #16]
 8009698:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800969c:	9105      	str	r1, [sp, #20]
 800969e:	9102      	str	r1, [sp, #8]
 80096a0:	4905      	ldr	r1, [pc, #20]	; (80096b8 <_vsiprintf_r+0x28>)
 80096a2:	9103      	str	r1, [sp, #12]
 80096a4:	4669      	mov	r1, sp
 80096a6:	f001 fb6f 	bl	800ad88 <_svfiprintf_r>
 80096aa:	9b00      	ldr	r3, [sp, #0]
 80096ac:	2200      	movs	r2, #0
 80096ae:	701a      	strb	r2, [r3, #0]
 80096b0:	b01b      	add	sp, #108	; 0x6c
 80096b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80096b6:	bf00      	nop
 80096b8:	ffff0208 	.word	0xffff0208

080096bc <vsiprintf>:
 80096bc:	4613      	mov	r3, r2
 80096be:	460a      	mov	r2, r1
 80096c0:	4601      	mov	r1, r0
 80096c2:	4802      	ldr	r0, [pc, #8]	; (80096cc <vsiprintf+0x10>)
 80096c4:	6800      	ldr	r0, [r0, #0]
 80096c6:	f7ff bfe3 	b.w	8009690 <_vsiprintf_r>
 80096ca:	bf00      	nop
 80096cc:	20000014 	.word	0x20000014

080096d0 <quorem>:
 80096d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d4:	6903      	ldr	r3, [r0, #16]
 80096d6:	690c      	ldr	r4, [r1, #16]
 80096d8:	42a3      	cmp	r3, r4
 80096da:	4607      	mov	r7, r0
 80096dc:	f2c0 8081 	blt.w	80097e2 <quorem+0x112>
 80096e0:	3c01      	subs	r4, #1
 80096e2:	f101 0814 	add.w	r8, r1, #20
 80096e6:	f100 0514 	add.w	r5, r0, #20
 80096ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096ee:	9301      	str	r3, [sp, #4]
 80096f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80096f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096f8:	3301      	adds	r3, #1
 80096fa:	429a      	cmp	r2, r3
 80096fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009700:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009704:	fbb2 f6f3 	udiv	r6, r2, r3
 8009708:	d331      	bcc.n	800976e <quorem+0x9e>
 800970a:	f04f 0e00 	mov.w	lr, #0
 800970e:	4640      	mov	r0, r8
 8009710:	46ac      	mov	ip, r5
 8009712:	46f2      	mov	sl, lr
 8009714:	f850 2b04 	ldr.w	r2, [r0], #4
 8009718:	b293      	uxth	r3, r2
 800971a:	fb06 e303 	mla	r3, r6, r3, lr
 800971e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009722:	b29b      	uxth	r3, r3
 8009724:	ebaa 0303 	sub.w	r3, sl, r3
 8009728:	f8dc a000 	ldr.w	sl, [ip]
 800972c:	0c12      	lsrs	r2, r2, #16
 800972e:	fa13 f38a 	uxtah	r3, r3, sl
 8009732:	fb06 e202 	mla	r2, r6, r2, lr
 8009736:	9300      	str	r3, [sp, #0]
 8009738:	9b00      	ldr	r3, [sp, #0]
 800973a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800973e:	b292      	uxth	r2, r2
 8009740:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009744:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009748:	f8bd 3000 	ldrh.w	r3, [sp]
 800974c:	4581      	cmp	r9, r0
 800974e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009752:	f84c 3b04 	str.w	r3, [ip], #4
 8009756:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800975a:	d2db      	bcs.n	8009714 <quorem+0x44>
 800975c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009760:	b92b      	cbnz	r3, 800976e <quorem+0x9e>
 8009762:	9b01      	ldr	r3, [sp, #4]
 8009764:	3b04      	subs	r3, #4
 8009766:	429d      	cmp	r5, r3
 8009768:	461a      	mov	r2, r3
 800976a:	d32e      	bcc.n	80097ca <quorem+0xfa>
 800976c:	613c      	str	r4, [r7, #16]
 800976e:	4638      	mov	r0, r7
 8009770:	f001 f8b6 	bl	800a8e0 <__mcmp>
 8009774:	2800      	cmp	r0, #0
 8009776:	db24      	blt.n	80097c2 <quorem+0xf2>
 8009778:	3601      	adds	r6, #1
 800977a:	4628      	mov	r0, r5
 800977c:	f04f 0c00 	mov.w	ip, #0
 8009780:	f858 2b04 	ldr.w	r2, [r8], #4
 8009784:	f8d0 e000 	ldr.w	lr, [r0]
 8009788:	b293      	uxth	r3, r2
 800978a:	ebac 0303 	sub.w	r3, ip, r3
 800978e:	0c12      	lsrs	r2, r2, #16
 8009790:	fa13 f38e 	uxtah	r3, r3, lr
 8009794:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009798:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800979c:	b29b      	uxth	r3, r3
 800979e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097a2:	45c1      	cmp	r9, r8
 80097a4:	f840 3b04 	str.w	r3, [r0], #4
 80097a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80097ac:	d2e8      	bcs.n	8009780 <quorem+0xb0>
 80097ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097b6:	b922      	cbnz	r2, 80097c2 <quorem+0xf2>
 80097b8:	3b04      	subs	r3, #4
 80097ba:	429d      	cmp	r5, r3
 80097bc:	461a      	mov	r2, r3
 80097be:	d30a      	bcc.n	80097d6 <quorem+0x106>
 80097c0:	613c      	str	r4, [r7, #16]
 80097c2:	4630      	mov	r0, r6
 80097c4:	b003      	add	sp, #12
 80097c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ca:	6812      	ldr	r2, [r2, #0]
 80097cc:	3b04      	subs	r3, #4
 80097ce:	2a00      	cmp	r2, #0
 80097d0:	d1cc      	bne.n	800976c <quorem+0x9c>
 80097d2:	3c01      	subs	r4, #1
 80097d4:	e7c7      	b.n	8009766 <quorem+0x96>
 80097d6:	6812      	ldr	r2, [r2, #0]
 80097d8:	3b04      	subs	r3, #4
 80097da:	2a00      	cmp	r2, #0
 80097dc:	d1f0      	bne.n	80097c0 <quorem+0xf0>
 80097de:	3c01      	subs	r4, #1
 80097e0:	e7eb      	b.n	80097ba <quorem+0xea>
 80097e2:	2000      	movs	r0, #0
 80097e4:	e7ee      	b.n	80097c4 <quorem+0xf4>
	...

080097e8 <_dtoa_r>:
 80097e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ec:	ed2d 8b04 	vpush	{d8-d9}
 80097f0:	ec57 6b10 	vmov	r6, r7, d0
 80097f4:	b093      	sub	sp, #76	; 0x4c
 80097f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80097f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80097fc:	9106      	str	r1, [sp, #24]
 80097fe:	ee10 aa10 	vmov	sl, s0
 8009802:	4604      	mov	r4, r0
 8009804:	9209      	str	r2, [sp, #36]	; 0x24
 8009806:	930c      	str	r3, [sp, #48]	; 0x30
 8009808:	46bb      	mov	fp, r7
 800980a:	b975      	cbnz	r5, 800982a <_dtoa_r+0x42>
 800980c:	2010      	movs	r0, #16
 800980e:	f000 fddd 	bl	800a3cc <malloc>
 8009812:	4602      	mov	r2, r0
 8009814:	6260      	str	r0, [r4, #36]	; 0x24
 8009816:	b920      	cbnz	r0, 8009822 <_dtoa_r+0x3a>
 8009818:	4ba7      	ldr	r3, [pc, #668]	; (8009ab8 <_dtoa_r+0x2d0>)
 800981a:	21ea      	movs	r1, #234	; 0xea
 800981c:	48a7      	ldr	r0, [pc, #668]	; (8009abc <_dtoa_r+0x2d4>)
 800981e:	f001 fbc3 	bl	800afa8 <__assert_func>
 8009822:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009826:	6005      	str	r5, [r0, #0]
 8009828:	60c5      	str	r5, [r0, #12]
 800982a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800982c:	6819      	ldr	r1, [r3, #0]
 800982e:	b151      	cbz	r1, 8009846 <_dtoa_r+0x5e>
 8009830:	685a      	ldr	r2, [r3, #4]
 8009832:	604a      	str	r2, [r1, #4]
 8009834:	2301      	movs	r3, #1
 8009836:	4093      	lsls	r3, r2
 8009838:	608b      	str	r3, [r1, #8]
 800983a:	4620      	mov	r0, r4
 800983c:	f000 fe0e 	bl	800a45c <_Bfree>
 8009840:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009842:	2200      	movs	r2, #0
 8009844:	601a      	str	r2, [r3, #0]
 8009846:	1e3b      	subs	r3, r7, #0
 8009848:	bfaa      	itet	ge
 800984a:	2300      	movge	r3, #0
 800984c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009850:	f8c8 3000 	strge.w	r3, [r8]
 8009854:	4b9a      	ldr	r3, [pc, #616]	; (8009ac0 <_dtoa_r+0x2d8>)
 8009856:	bfbc      	itt	lt
 8009858:	2201      	movlt	r2, #1
 800985a:	f8c8 2000 	strlt.w	r2, [r8]
 800985e:	ea33 030b 	bics.w	r3, r3, fp
 8009862:	d11b      	bne.n	800989c <_dtoa_r+0xb4>
 8009864:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009866:	f242 730f 	movw	r3, #9999	; 0x270f
 800986a:	6013      	str	r3, [r2, #0]
 800986c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009870:	4333      	orrs	r3, r6
 8009872:	f000 8592 	beq.w	800a39a <_dtoa_r+0xbb2>
 8009876:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009878:	b963      	cbnz	r3, 8009894 <_dtoa_r+0xac>
 800987a:	4b92      	ldr	r3, [pc, #584]	; (8009ac4 <_dtoa_r+0x2dc>)
 800987c:	e022      	b.n	80098c4 <_dtoa_r+0xdc>
 800987e:	4b92      	ldr	r3, [pc, #584]	; (8009ac8 <_dtoa_r+0x2e0>)
 8009880:	9301      	str	r3, [sp, #4]
 8009882:	3308      	adds	r3, #8
 8009884:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009886:	6013      	str	r3, [r2, #0]
 8009888:	9801      	ldr	r0, [sp, #4]
 800988a:	b013      	add	sp, #76	; 0x4c
 800988c:	ecbd 8b04 	vpop	{d8-d9}
 8009890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009894:	4b8b      	ldr	r3, [pc, #556]	; (8009ac4 <_dtoa_r+0x2dc>)
 8009896:	9301      	str	r3, [sp, #4]
 8009898:	3303      	adds	r3, #3
 800989a:	e7f3      	b.n	8009884 <_dtoa_r+0x9c>
 800989c:	2200      	movs	r2, #0
 800989e:	2300      	movs	r3, #0
 80098a0:	4650      	mov	r0, sl
 80098a2:	4659      	mov	r1, fp
 80098a4:	f7f7 f910 	bl	8000ac8 <__aeabi_dcmpeq>
 80098a8:	ec4b ab19 	vmov	d9, sl, fp
 80098ac:	4680      	mov	r8, r0
 80098ae:	b158      	cbz	r0, 80098c8 <_dtoa_r+0xe0>
 80098b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098b2:	2301      	movs	r3, #1
 80098b4:	6013      	str	r3, [r2, #0]
 80098b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	f000 856b 	beq.w	800a394 <_dtoa_r+0xbac>
 80098be:	4883      	ldr	r0, [pc, #524]	; (8009acc <_dtoa_r+0x2e4>)
 80098c0:	6018      	str	r0, [r3, #0]
 80098c2:	1e43      	subs	r3, r0, #1
 80098c4:	9301      	str	r3, [sp, #4]
 80098c6:	e7df      	b.n	8009888 <_dtoa_r+0xa0>
 80098c8:	ec4b ab10 	vmov	d0, sl, fp
 80098cc:	aa10      	add	r2, sp, #64	; 0x40
 80098ce:	a911      	add	r1, sp, #68	; 0x44
 80098d0:	4620      	mov	r0, r4
 80098d2:	f001 f8ab 	bl	800aa2c <__d2b>
 80098d6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80098da:	ee08 0a10 	vmov	s16, r0
 80098de:	2d00      	cmp	r5, #0
 80098e0:	f000 8084 	beq.w	80099ec <_dtoa_r+0x204>
 80098e4:	ee19 3a90 	vmov	r3, s19
 80098e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098ec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80098f0:	4656      	mov	r6, sl
 80098f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80098f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80098fa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80098fe:	4b74      	ldr	r3, [pc, #464]	; (8009ad0 <_dtoa_r+0x2e8>)
 8009900:	2200      	movs	r2, #0
 8009902:	4630      	mov	r0, r6
 8009904:	4639      	mov	r1, r7
 8009906:	f7f6 fcbf 	bl	8000288 <__aeabi_dsub>
 800990a:	a365      	add	r3, pc, #404	; (adr r3, 8009aa0 <_dtoa_r+0x2b8>)
 800990c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009910:	f7f6 fe72 	bl	80005f8 <__aeabi_dmul>
 8009914:	a364      	add	r3, pc, #400	; (adr r3, 8009aa8 <_dtoa_r+0x2c0>)
 8009916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991a:	f7f6 fcb7 	bl	800028c <__adddf3>
 800991e:	4606      	mov	r6, r0
 8009920:	4628      	mov	r0, r5
 8009922:	460f      	mov	r7, r1
 8009924:	f7f6 fdfe 	bl	8000524 <__aeabi_i2d>
 8009928:	a361      	add	r3, pc, #388	; (adr r3, 8009ab0 <_dtoa_r+0x2c8>)
 800992a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992e:	f7f6 fe63 	bl	80005f8 <__aeabi_dmul>
 8009932:	4602      	mov	r2, r0
 8009934:	460b      	mov	r3, r1
 8009936:	4630      	mov	r0, r6
 8009938:	4639      	mov	r1, r7
 800993a:	f7f6 fca7 	bl	800028c <__adddf3>
 800993e:	4606      	mov	r6, r0
 8009940:	460f      	mov	r7, r1
 8009942:	f7f7 f909 	bl	8000b58 <__aeabi_d2iz>
 8009946:	2200      	movs	r2, #0
 8009948:	9000      	str	r0, [sp, #0]
 800994a:	2300      	movs	r3, #0
 800994c:	4630      	mov	r0, r6
 800994e:	4639      	mov	r1, r7
 8009950:	f7f7 f8c4 	bl	8000adc <__aeabi_dcmplt>
 8009954:	b150      	cbz	r0, 800996c <_dtoa_r+0x184>
 8009956:	9800      	ldr	r0, [sp, #0]
 8009958:	f7f6 fde4 	bl	8000524 <__aeabi_i2d>
 800995c:	4632      	mov	r2, r6
 800995e:	463b      	mov	r3, r7
 8009960:	f7f7 f8b2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009964:	b910      	cbnz	r0, 800996c <_dtoa_r+0x184>
 8009966:	9b00      	ldr	r3, [sp, #0]
 8009968:	3b01      	subs	r3, #1
 800996a:	9300      	str	r3, [sp, #0]
 800996c:	9b00      	ldr	r3, [sp, #0]
 800996e:	2b16      	cmp	r3, #22
 8009970:	d85a      	bhi.n	8009a28 <_dtoa_r+0x240>
 8009972:	9a00      	ldr	r2, [sp, #0]
 8009974:	4b57      	ldr	r3, [pc, #348]	; (8009ad4 <_dtoa_r+0x2ec>)
 8009976:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800997a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800997e:	ec51 0b19 	vmov	r0, r1, d9
 8009982:	f7f7 f8ab 	bl	8000adc <__aeabi_dcmplt>
 8009986:	2800      	cmp	r0, #0
 8009988:	d050      	beq.n	8009a2c <_dtoa_r+0x244>
 800998a:	9b00      	ldr	r3, [sp, #0]
 800998c:	3b01      	subs	r3, #1
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	2300      	movs	r3, #0
 8009992:	930b      	str	r3, [sp, #44]	; 0x2c
 8009994:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009996:	1b5d      	subs	r5, r3, r5
 8009998:	1e6b      	subs	r3, r5, #1
 800999a:	9305      	str	r3, [sp, #20]
 800999c:	bf45      	ittet	mi
 800999e:	f1c5 0301 	rsbmi	r3, r5, #1
 80099a2:	9304      	strmi	r3, [sp, #16]
 80099a4:	2300      	movpl	r3, #0
 80099a6:	2300      	movmi	r3, #0
 80099a8:	bf4c      	ite	mi
 80099aa:	9305      	strmi	r3, [sp, #20]
 80099ac:	9304      	strpl	r3, [sp, #16]
 80099ae:	9b00      	ldr	r3, [sp, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	db3d      	blt.n	8009a30 <_dtoa_r+0x248>
 80099b4:	9b05      	ldr	r3, [sp, #20]
 80099b6:	9a00      	ldr	r2, [sp, #0]
 80099b8:	920a      	str	r2, [sp, #40]	; 0x28
 80099ba:	4413      	add	r3, r2
 80099bc:	9305      	str	r3, [sp, #20]
 80099be:	2300      	movs	r3, #0
 80099c0:	9307      	str	r3, [sp, #28]
 80099c2:	9b06      	ldr	r3, [sp, #24]
 80099c4:	2b09      	cmp	r3, #9
 80099c6:	f200 8089 	bhi.w	8009adc <_dtoa_r+0x2f4>
 80099ca:	2b05      	cmp	r3, #5
 80099cc:	bfc4      	itt	gt
 80099ce:	3b04      	subgt	r3, #4
 80099d0:	9306      	strgt	r3, [sp, #24]
 80099d2:	9b06      	ldr	r3, [sp, #24]
 80099d4:	f1a3 0302 	sub.w	r3, r3, #2
 80099d8:	bfcc      	ite	gt
 80099da:	2500      	movgt	r5, #0
 80099dc:	2501      	movle	r5, #1
 80099de:	2b03      	cmp	r3, #3
 80099e0:	f200 8087 	bhi.w	8009af2 <_dtoa_r+0x30a>
 80099e4:	e8df f003 	tbb	[pc, r3]
 80099e8:	59383a2d 	.word	0x59383a2d
 80099ec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80099f0:	441d      	add	r5, r3
 80099f2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80099f6:	2b20      	cmp	r3, #32
 80099f8:	bfc1      	itttt	gt
 80099fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80099fe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009a02:	fa0b f303 	lslgt.w	r3, fp, r3
 8009a06:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009a0a:	bfda      	itte	le
 8009a0c:	f1c3 0320 	rsble	r3, r3, #32
 8009a10:	fa06 f003 	lslle.w	r0, r6, r3
 8009a14:	4318      	orrgt	r0, r3
 8009a16:	f7f6 fd75 	bl	8000504 <__aeabi_ui2d>
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	4606      	mov	r6, r0
 8009a1e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009a22:	3d01      	subs	r5, #1
 8009a24:	930e      	str	r3, [sp, #56]	; 0x38
 8009a26:	e76a      	b.n	80098fe <_dtoa_r+0x116>
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e7b2      	b.n	8009992 <_dtoa_r+0x1aa>
 8009a2c:	900b      	str	r0, [sp, #44]	; 0x2c
 8009a2e:	e7b1      	b.n	8009994 <_dtoa_r+0x1ac>
 8009a30:	9b04      	ldr	r3, [sp, #16]
 8009a32:	9a00      	ldr	r2, [sp, #0]
 8009a34:	1a9b      	subs	r3, r3, r2
 8009a36:	9304      	str	r3, [sp, #16]
 8009a38:	4253      	negs	r3, r2
 8009a3a:	9307      	str	r3, [sp, #28]
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	930a      	str	r3, [sp, #40]	; 0x28
 8009a40:	e7bf      	b.n	80099c2 <_dtoa_r+0x1da>
 8009a42:	2300      	movs	r3, #0
 8009a44:	9308      	str	r3, [sp, #32]
 8009a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	dc55      	bgt.n	8009af8 <_dtoa_r+0x310>
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009a52:	461a      	mov	r2, r3
 8009a54:	9209      	str	r2, [sp, #36]	; 0x24
 8009a56:	e00c      	b.n	8009a72 <_dtoa_r+0x28a>
 8009a58:	2301      	movs	r3, #1
 8009a5a:	e7f3      	b.n	8009a44 <_dtoa_r+0x25c>
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a60:	9308      	str	r3, [sp, #32]
 8009a62:	9b00      	ldr	r3, [sp, #0]
 8009a64:	4413      	add	r3, r2
 8009a66:	9302      	str	r3, [sp, #8]
 8009a68:	3301      	adds	r3, #1
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	9303      	str	r3, [sp, #12]
 8009a6e:	bfb8      	it	lt
 8009a70:	2301      	movlt	r3, #1
 8009a72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009a74:	2200      	movs	r2, #0
 8009a76:	6042      	str	r2, [r0, #4]
 8009a78:	2204      	movs	r2, #4
 8009a7a:	f102 0614 	add.w	r6, r2, #20
 8009a7e:	429e      	cmp	r6, r3
 8009a80:	6841      	ldr	r1, [r0, #4]
 8009a82:	d93d      	bls.n	8009b00 <_dtoa_r+0x318>
 8009a84:	4620      	mov	r0, r4
 8009a86:	f000 fca9 	bl	800a3dc <_Balloc>
 8009a8a:	9001      	str	r0, [sp, #4]
 8009a8c:	2800      	cmp	r0, #0
 8009a8e:	d13b      	bne.n	8009b08 <_dtoa_r+0x320>
 8009a90:	4b11      	ldr	r3, [pc, #68]	; (8009ad8 <_dtoa_r+0x2f0>)
 8009a92:	4602      	mov	r2, r0
 8009a94:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009a98:	e6c0      	b.n	800981c <_dtoa_r+0x34>
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	e7df      	b.n	8009a5e <_dtoa_r+0x276>
 8009a9e:	bf00      	nop
 8009aa0:	636f4361 	.word	0x636f4361
 8009aa4:	3fd287a7 	.word	0x3fd287a7
 8009aa8:	8b60c8b3 	.word	0x8b60c8b3
 8009aac:	3fc68a28 	.word	0x3fc68a28
 8009ab0:	509f79fb 	.word	0x509f79fb
 8009ab4:	3fd34413 	.word	0x3fd34413
 8009ab8:	0800e821 	.word	0x0800e821
 8009abc:	0800e838 	.word	0x0800e838
 8009ac0:	7ff00000 	.word	0x7ff00000
 8009ac4:	0800e81d 	.word	0x0800e81d
 8009ac8:	0800e814 	.word	0x0800e814
 8009acc:	0800e7f1 	.word	0x0800e7f1
 8009ad0:	3ff80000 	.word	0x3ff80000
 8009ad4:	0800e928 	.word	0x0800e928
 8009ad8:	0800e893 	.word	0x0800e893
 8009adc:	2501      	movs	r5, #1
 8009ade:	2300      	movs	r3, #0
 8009ae0:	9306      	str	r3, [sp, #24]
 8009ae2:	9508      	str	r5, [sp, #32]
 8009ae4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ae8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009aec:	2200      	movs	r2, #0
 8009aee:	2312      	movs	r3, #18
 8009af0:	e7b0      	b.n	8009a54 <_dtoa_r+0x26c>
 8009af2:	2301      	movs	r3, #1
 8009af4:	9308      	str	r3, [sp, #32]
 8009af6:	e7f5      	b.n	8009ae4 <_dtoa_r+0x2fc>
 8009af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009afa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009afe:	e7b8      	b.n	8009a72 <_dtoa_r+0x28a>
 8009b00:	3101      	adds	r1, #1
 8009b02:	6041      	str	r1, [r0, #4]
 8009b04:	0052      	lsls	r2, r2, #1
 8009b06:	e7b8      	b.n	8009a7a <_dtoa_r+0x292>
 8009b08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b0a:	9a01      	ldr	r2, [sp, #4]
 8009b0c:	601a      	str	r2, [r3, #0]
 8009b0e:	9b03      	ldr	r3, [sp, #12]
 8009b10:	2b0e      	cmp	r3, #14
 8009b12:	f200 809d 	bhi.w	8009c50 <_dtoa_r+0x468>
 8009b16:	2d00      	cmp	r5, #0
 8009b18:	f000 809a 	beq.w	8009c50 <_dtoa_r+0x468>
 8009b1c:	9b00      	ldr	r3, [sp, #0]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	dd32      	ble.n	8009b88 <_dtoa_r+0x3a0>
 8009b22:	4ab7      	ldr	r2, [pc, #732]	; (8009e00 <_dtoa_r+0x618>)
 8009b24:	f003 030f 	and.w	r3, r3, #15
 8009b28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009b2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b30:	9b00      	ldr	r3, [sp, #0]
 8009b32:	05d8      	lsls	r0, r3, #23
 8009b34:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009b38:	d516      	bpl.n	8009b68 <_dtoa_r+0x380>
 8009b3a:	4bb2      	ldr	r3, [pc, #712]	; (8009e04 <_dtoa_r+0x61c>)
 8009b3c:	ec51 0b19 	vmov	r0, r1, d9
 8009b40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b44:	f7f6 fe82 	bl	800084c <__aeabi_ddiv>
 8009b48:	f007 070f 	and.w	r7, r7, #15
 8009b4c:	4682      	mov	sl, r0
 8009b4e:	468b      	mov	fp, r1
 8009b50:	2503      	movs	r5, #3
 8009b52:	4eac      	ldr	r6, [pc, #688]	; (8009e04 <_dtoa_r+0x61c>)
 8009b54:	b957      	cbnz	r7, 8009b6c <_dtoa_r+0x384>
 8009b56:	4642      	mov	r2, r8
 8009b58:	464b      	mov	r3, r9
 8009b5a:	4650      	mov	r0, sl
 8009b5c:	4659      	mov	r1, fp
 8009b5e:	f7f6 fe75 	bl	800084c <__aeabi_ddiv>
 8009b62:	4682      	mov	sl, r0
 8009b64:	468b      	mov	fp, r1
 8009b66:	e028      	b.n	8009bba <_dtoa_r+0x3d2>
 8009b68:	2502      	movs	r5, #2
 8009b6a:	e7f2      	b.n	8009b52 <_dtoa_r+0x36a>
 8009b6c:	07f9      	lsls	r1, r7, #31
 8009b6e:	d508      	bpl.n	8009b82 <_dtoa_r+0x39a>
 8009b70:	4640      	mov	r0, r8
 8009b72:	4649      	mov	r1, r9
 8009b74:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b78:	f7f6 fd3e 	bl	80005f8 <__aeabi_dmul>
 8009b7c:	3501      	adds	r5, #1
 8009b7e:	4680      	mov	r8, r0
 8009b80:	4689      	mov	r9, r1
 8009b82:	107f      	asrs	r7, r7, #1
 8009b84:	3608      	adds	r6, #8
 8009b86:	e7e5      	b.n	8009b54 <_dtoa_r+0x36c>
 8009b88:	f000 809b 	beq.w	8009cc2 <_dtoa_r+0x4da>
 8009b8c:	9b00      	ldr	r3, [sp, #0]
 8009b8e:	4f9d      	ldr	r7, [pc, #628]	; (8009e04 <_dtoa_r+0x61c>)
 8009b90:	425e      	negs	r6, r3
 8009b92:	4b9b      	ldr	r3, [pc, #620]	; (8009e00 <_dtoa_r+0x618>)
 8009b94:	f006 020f 	and.w	r2, r6, #15
 8009b98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba0:	ec51 0b19 	vmov	r0, r1, d9
 8009ba4:	f7f6 fd28 	bl	80005f8 <__aeabi_dmul>
 8009ba8:	1136      	asrs	r6, r6, #4
 8009baa:	4682      	mov	sl, r0
 8009bac:	468b      	mov	fp, r1
 8009bae:	2300      	movs	r3, #0
 8009bb0:	2502      	movs	r5, #2
 8009bb2:	2e00      	cmp	r6, #0
 8009bb4:	d17a      	bne.n	8009cac <_dtoa_r+0x4c4>
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d1d3      	bne.n	8009b62 <_dtoa_r+0x37a>
 8009bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	f000 8082 	beq.w	8009cc6 <_dtoa_r+0x4de>
 8009bc2:	4b91      	ldr	r3, [pc, #580]	; (8009e08 <_dtoa_r+0x620>)
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	4650      	mov	r0, sl
 8009bc8:	4659      	mov	r1, fp
 8009bca:	f7f6 ff87 	bl	8000adc <__aeabi_dcmplt>
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	d079      	beq.n	8009cc6 <_dtoa_r+0x4de>
 8009bd2:	9b03      	ldr	r3, [sp, #12]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d076      	beq.n	8009cc6 <_dtoa_r+0x4de>
 8009bd8:	9b02      	ldr	r3, [sp, #8]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	dd36      	ble.n	8009c4c <_dtoa_r+0x464>
 8009bde:	9b00      	ldr	r3, [sp, #0]
 8009be0:	4650      	mov	r0, sl
 8009be2:	4659      	mov	r1, fp
 8009be4:	1e5f      	subs	r7, r3, #1
 8009be6:	2200      	movs	r2, #0
 8009be8:	4b88      	ldr	r3, [pc, #544]	; (8009e0c <_dtoa_r+0x624>)
 8009bea:	f7f6 fd05 	bl	80005f8 <__aeabi_dmul>
 8009bee:	9e02      	ldr	r6, [sp, #8]
 8009bf0:	4682      	mov	sl, r0
 8009bf2:	468b      	mov	fp, r1
 8009bf4:	3501      	adds	r5, #1
 8009bf6:	4628      	mov	r0, r5
 8009bf8:	f7f6 fc94 	bl	8000524 <__aeabi_i2d>
 8009bfc:	4652      	mov	r2, sl
 8009bfe:	465b      	mov	r3, fp
 8009c00:	f7f6 fcfa 	bl	80005f8 <__aeabi_dmul>
 8009c04:	4b82      	ldr	r3, [pc, #520]	; (8009e10 <_dtoa_r+0x628>)
 8009c06:	2200      	movs	r2, #0
 8009c08:	f7f6 fb40 	bl	800028c <__adddf3>
 8009c0c:	46d0      	mov	r8, sl
 8009c0e:	46d9      	mov	r9, fp
 8009c10:	4682      	mov	sl, r0
 8009c12:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009c16:	2e00      	cmp	r6, #0
 8009c18:	d158      	bne.n	8009ccc <_dtoa_r+0x4e4>
 8009c1a:	4b7e      	ldr	r3, [pc, #504]	; (8009e14 <_dtoa_r+0x62c>)
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	4640      	mov	r0, r8
 8009c20:	4649      	mov	r1, r9
 8009c22:	f7f6 fb31 	bl	8000288 <__aeabi_dsub>
 8009c26:	4652      	mov	r2, sl
 8009c28:	465b      	mov	r3, fp
 8009c2a:	4680      	mov	r8, r0
 8009c2c:	4689      	mov	r9, r1
 8009c2e:	f7f6 ff73 	bl	8000b18 <__aeabi_dcmpgt>
 8009c32:	2800      	cmp	r0, #0
 8009c34:	f040 8295 	bne.w	800a162 <_dtoa_r+0x97a>
 8009c38:	4652      	mov	r2, sl
 8009c3a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009c3e:	4640      	mov	r0, r8
 8009c40:	4649      	mov	r1, r9
 8009c42:	f7f6 ff4b 	bl	8000adc <__aeabi_dcmplt>
 8009c46:	2800      	cmp	r0, #0
 8009c48:	f040 8289 	bne.w	800a15e <_dtoa_r+0x976>
 8009c4c:	ec5b ab19 	vmov	sl, fp, d9
 8009c50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f2c0 8148 	blt.w	8009ee8 <_dtoa_r+0x700>
 8009c58:	9a00      	ldr	r2, [sp, #0]
 8009c5a:	2a0e      	cmp	r2, #14
 8009c5c:	f300 8144 	bgt.w	8009ee8 <_dtoa_r+0x700>
 8009c60:	4b67      	ldr	r3, [pc, #412]	; (8009e00 <_dtoa_r+0x618>)
 8009c62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c66:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f280 80d5 	bge.w	8009e1c <_dtoa_r+0x634>
 8009c72:	9b03      	ldr	r3, [sp, #12]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	f300 80d1 	bgt.w	8009e1c <_dtoa_r+0x634>
 8009c7a:	f040 826f 	bne.w	800a15c <_dtoa_r+0x974>
 8009c7e:	4b65      	ldr	r3, [pc, #404]	; (8009e14 <_dtoa_r+0x62c>)
 8009c80:	2200      	movs	r2, #0
 8009c82:	4640      	mov	r0, r8
 8009c84:	4649      	mov	r1, r9
 8009c86:	f7f6 fcb7 	bl	80005f8 <__aeabi_dmul>
 8009c8a:	4652      	mov	r2, sl
 8009c8c:	465b      	mov	r3, fp
 8009c8e:	f7f6 ff39 	bl	8000b04 <__aeabi_dcmpge>
 8009c92:	9e03      	ldr	r6, [sp, #12]
 8009c94:	4637      	mov	r7, r6
 8009c96:	2800      	cmp	r0, #0
 8009c98:	f040 8245 	bne.w	800a126 <_dtoa_r+0x93e>
 8009c9c:	9d01      	ldr	r5, [sp, #4]
 8009c9e:	2331      	movs	r3, #49	; 0x31
 8009ca0:	f805 3b01 	strb.w	r3, [r5], #1
 8009ca4:	9b00      	ldr	r3, [sp, #0]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	9300      	str	r3, [sp, #0]
 8009caa:	e240      	b.n	800a12e <_dtoa_r+0x946>
 8009cac:	07f2      	lsls	r2, r6, #31
 8009cae:	d505      	bpl.n	8009cbc <_dtoa_r+0x4d4>
 8009cb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cb4:	f7f6 fca0 	bl	80005f8 <__aeabi_dmul>
 8009cb8:	3501      	adds	r5, #1
 8009cba:	2301      	movs	r3, #1
 8009cbc:	1076      	asrs	r6, r6, #1
 8009cbe:	3708      	adds	r7, #8
 8009cc0:	e777      	b.n	8009bb2 <_dtoa_r+0x3ca>
 8009cc2:	2502      	movs	r5, #2
 8009cc4:	e779      	b.n	8009bba <_dtoa_r+0x3d2>
 8009cc6:	9f00      	ldr	r7, [sp, #0]
 8009cc8:	9e03      	ldr	r6, [sp, #12]
 8009cca:	e794      	b.n	8009bf6 <_dtoa_r+0x40e>
 8009ccc:	9901      	ldr	r1, [sp, #4]
 8009cce:	4b4c      	ldr	r3, [pc, #304]	; (8009e00 <_dtoa_r+0x618>)
 8009cd0:	4431      	add	r1, r6
 8009cd2:	910d      	str	r1, [sp, #52]	; 0x34
 8009cd4:	9908      	ldr	r1, [sp, #32]
 8009cd6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009cda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009cde:	2900      	cmp	r1, #0
 8009ce0:	d043      	beq.n	8009d6a <_dtoa_r+0x582>
 8009ce2:	494d      	ldr	r1, [pc, #308]	; (8009e18 <_dtoa_r+0x630>)
 8009ce4:	2000      	movs	r0, #0
 8009ce6:	f7f6 fdb1 	bl	800084c <__aeabi_ddiv>
 8009cea:	4652      	mov	r2, sl
 8009cec:	465b      	mov	r3, fp
 8009cee:	f7f6 facb 	bl	8000288 <__aeabi_dsub>
 8009cf2:	9d01      	ldr	r5, [sp, #4]
 8009cf4:	4682      	mov	sl, r0
 8009cf6:	468b      	mov	fp, r1
 8009cf8:	4649      	mov	r1, r9
 8009cfa:	4640      	mov	r0, r8
 8009cfc:	f7f6 ff2c 	bl	8000b58 <__aeabi_d2iz>
 8009d00:	4606      	mov	r6, r0
 8009d02:	f7f6 fc0f 	bl	8000524 <__aeabi_i2d>
 8009d06:	4602      	mov	r2, r0
 8009d08:	460b      	mov	r3, r1
 8009d0a:	4640      	mov	r0, r8
 8009d0c:	4649      	mov	r1, r9
 8009d0e:	f7f6 fabb 	bl	8000288 <__aeabi_dsub>
 8009d12:	3630      	adds	r6, #48	; 0x30
 8009d14:	f805 6b01 	strb.w	r6, [r5], #1
 8009d18:	4652      	mov	r2, sl
 8009d1a:	465b      	mov	r3, fp
 8009d1c:	4680      	mov	r8, r0
 8009d1e:	4689      	mov	r9, r1
 8009d20:	f7f6 fedc 	bl	8000adc <__aeabi_dcmplt>
 8009d24:	2800      	cmp	r0, #0
 8009d26:	d163      	bne.n	8009df0 <_dtoa_r+0x608>
 8009d28:	4642      	mov	r2, r8
 8009d2a:	464b      	mov	r3, r9
 8009d2c:	4936      	ldr	r1, [pc, #216]	; (8009e08 <_dtoa_r+0x620>)
 8009d2e:	2000      	movs	r0, #0
 8009d30:	f7f6 faaa 	bl	8000288 <__aeabi_dsub>
 8009d34:	4652      	mov	r2, sl
 8009d36:	465b      	mov	r3, fp
 8009d38:	f7f6 fed0 	bl	8000adc <__aeabi_dcmplt>
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	f040 80b5 	bne.w	8009eac <_dtoa_r+0x6c4>
 8009d42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d44:	429d      	cmp	r5, r3
 8009d46:	d081      	beq.n	8009c4c <_dtoa_r+0x464>
 8009d48:	4b30      	ldr	r3, [pc, #192]	; (8009e0c <_dtoa_r+0x624>)
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	4650      	mov	r0, sl
 8009d4e:	4659      	mov	r1, fp
 8009d50:	f7f6 fc52 	bl	80005f8 <__aeabi_dmul>
 8009d54:	4b2d      	ldr	r3, [pc, #180]	; (8009e0c <_dtoa_r+0x624>)
 8009d56:	4682      	mov	sl, r0
 8009d58:	468b      	mov	fp, r1
 8009d5a:	4640      	mov	r0, r8
 8009d5c:	4649      	mov	r1, r9
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f7f6 fc4a 	bl	80005f8 <__aeabi_dmul>
 8009d64:	4680      	mov	r8, r0
 8009d66:	4689      	mov	r9, r1
 8009d68:	e7c6      	b.n	8009cf8 <_dtoa_r+0x510>
 8009d6a:	4650      	mov	r0, sl
 8009d6c:	4659      	mov	r1, fp
 8009d6e:	f7f6 fc43 	bl	80005f8 <__aeabi_dmul>
 8009d72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d74:	9d01      	ldr	r5, [sp, #4]
 8009d76:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d78:	4682      	mov	sl, r0
 8009d7a:	468b      	mov	fp, r1
 8009d7c:	4649      	mov	r1, r9
 8009d7e:	4640      	mov	r0, r8
 8009d80:	f7f6 feea 	bl	8000b58 <__aeabi_d2iz>
 8009d84:	4606      	mov	r6, r0
 8009d86:	f7f6 fbcd 	bl	8000524 <__aeabi_i2d>
 8009d8a:	3630      	adds	r6, #48	; 0x30
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	460b      	mov	r3, r1
 8009d90:	4640      	mov	r0, r8
 8009d92:	4649      	mov	r1, r9
 8009d94:	f7f6 fa78 	bl	8000288 <__aeabi_dsub>
 8009d98:	f805 6b01 	strb.w	r6, [r5], #1
 8009d9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d9e:	429d      	cmp	r5, r3
 8009da0:	4680      	mov	r8, r0
 8009da2:	4689      	mov	r9, r1
 8009da4:	f04f 0200 	mov.w	r2, #0
 8009da8:	d124      	bne.n	8009df4 <_dtoa_r+0x60c>
 8009daa:	4b1b      	ldr	r3, [pc, #108]	; (8009e18 <_dtoa_r+0x630>)
 8009dac:	4650      	mov	r0, sl
 8009dae:	4659      	mov	r1, fp
 8009db0:	f7f6 fa6c 	bl	800028c <__adddf3>
 8009db4:	4602      	mov	r2, r0
 8009db6:	460b      	mov	r3, r1
 8009db8:	4640      	mov	r0, r8
 8009dba:	4649      	mov	r1, r9
 8009dbc:	f7f6 feac 	bl	8000b18 <__aeabi_dcmpgt>
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	d173      	bne.n	8009eac <_dtoa_r+0x6c4>
 8009dc4:	4652      	mov	r2, sl
 8009dc6:	465b      	mov	r3, fp
 8009dc8:	4913      	ldr	r1, [pc, #76]	; (8009e18 <_dtoa_r+0x630>)
 8009dca:	2000      	movs	r0, #0
 8009dcc:	f7f6 fa5c 	bl	8000288 <__aeabi_dsub>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	4640      	mov	r0, r8
 8009dd6:	4649      	mov	r1, r9
 8009dd8:	f7f6 fe80 	bl	8000adc <__aeabi_dcmplt>
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	f43f af35 	beq.w	8009c4c <_dtoa_r+0x464>
 8009de2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009de4:	1e6b      	subs	r3, r5, #1
 8009de6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009de8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009dec:	2b30      	cmp	r3, #48	; 0x30
 8009dee:	d0f8      	beq.n	8009de2 <_dtoa_r+0x5fa>
 8009df0:	9700      	str	r7, [sp, #0]
 8009df2:	e049      	b.n	8009e88 <_dtoa_r+0x6a0>
 8009df4:	4b05      	ldr	r3, [pc, #20]	; (8009e0c <_dtoa_r+0x624>)
 8009df6:	f7f6 fbff 	bl	80005f8 <__aeabi_dmul>
 8009dfa:	4680      	mov	r8, r0
 8009dfc:	4689      	mov	r9, r1
 8009dfe:	e7bd      	b.n	8009d7c <_dtoa_r+0x594>
 8009e00:	0800e928 	.word	0x0800e928
 8009e04:	0800e900 	.word	0x0800e900
 8009e08:	3ff00000 	.word	0x3ff00000
 8009e0c:	40240000 	.word	0x40240000
 8009e10:	401c0000 	.word	0x401c0000
 8009e14:	40140000 	.word	0x40140000
 8009e18:	3fe00000 	.word	0x3fe00000
 8009e1c:	9d01      	ldr	r5, [sp, #4]
 8009e1e:	4656      	mov	r6, sl
 8009e20:	465f      	mov	r7, fp
 8009e22:	4642      	mov	r2, r8
 8009e24:	464b      	mov	r3, r9
 8009e26:	4630      	mov	r0, r6
 8009e28:	4639      	mov	r1, r7
 8009e2a:	f7f6 fd0f 	bl	800084c <__aeabi_ddiv>
 8009e2e:	f7f6 fe93 	bl	8000b58 <__aeabi_d2iz>
 8009e32:	4682      	mov	sl, r0
 8009e34:	f7f6 fb76 	bl	8000524 <__aeabi_i2d>
 8009e38:	4642      	mov	r2, r8
 8009e3a:	464b      	mov	r3, r9
 8009e3c:	f7f6 fbdc 	bl	80005f8 <__aeabi_dmul>
 8009e40:	4602      	mov	r2, r0
 8009e42:	460b      	mov	r3, r1
 8009e44:	4630      	mov	r0, r6
 8009e46:	4639      	mov	r1, r7
 8009e48:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009e4c:	f7f6 fa1c 	bl	8000288 <__aeabi_dsub>
 8009e50:	f805 6b01 	strb.w	r6, [r5], #1
 8009e54:	9e01      	ldr	r6, [sp, #4]
 8009e56:	9f03      	ldr	r7, [sp, #12]
 8009e58:	1bae      	subs	r6, r5, r6
 8009e5a:	42b7      	cmp	r7, r6
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	460b      	mov	r3, r1
 8009e60:	d135      	bne.n	8009ece <_dtoa_r+0x6e6>
 8009e62:	f7f6 fa13 	bl	800028c <__adddf3>
 8009e66:	4642      	mov	r2, r8
 8009e68:	464b      	mov	r3, r9
 8009e6a:	4606      	mov	r6, r0
 8009e6c:	460f      	mov	r7, r1
 8009e6e:	f7f6 fe53 	bl	8000b18 <__aeabi_dcmpgt>
 8009e72:	b9d0      	cbnz	r0, 8009eaa <_dtoa_r+0x6c2>
 8009e74:	4642      	mov	r2, r8
 8009e76:	464b      	mov	r3, r9
 8009e78:	4630      	mov	r0, r6
 8009e7a:	4639      	mov	r1, r7
 8009e7c:	f7f6 fe24 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e80:	b110      	cbz	r0, 8009e88 <_dtoa_r+0x6a0>
 8009e82:	f01a 0f01 	tst.w	sl, #1
 8009e86:	d110      	bne.n	8009eaa <_dtoa_r+0x6c2>
 8009e88:	4620      	mov	r0, r4
 8009e8a:	ee18 1a10 	vmov	r1, s16
 8009e8e:	f000 fae5 	bl	800a45c <_Bfree>
 8009e92:	2300      	movs	r3, #0
 8009e94:	9800      	ldr	r0, [sp, #0]
 8009e96:	702b      	strb	r3, [r5, #0]
 8009e98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e9a:	3001      	adds	r0, #1
 8009e9c:	6018      	str	r0, [r3, #0]
 8009e9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	f43f acf1 	beq.w	8009888 <_dtoa_r+0xa0>
 8009ea6:	601d      	str	r5, [r3, #0]
 8009ea8:	e4ee      	b.n	8009888 <_dtoa_r+0xa0>
 8009eaa:	9f00      	ldr	r7, [sp, #0]
 8009eac:	462b      	mov	r3, r5
 8009eae:	461d      	mov	r5, r3
 8009eb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009eb4:	2a39      	cmp	r2, #57	; 0x39
 8009eb6:	d106      	bne.n	8009ec6 <_dtoa_r+0x6de>
 8009eb8:	9a01      	ldr	r2, [sp, #4]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d1f7      	bne.n	8009eae <_dtoa_r+0x6c6>
 8009ebe:	9901      	ldr	r1, [sp, #4]
 8009ec0:	2230      	movs	r2, #48	; 0x30
 8009ec2:	3701      	adds	r7, #1
 8009ec4:	700a      	strb	r2, [r1, #0]
 8009ec6:	781a      	ldrb	r2, [r3, #0]
 8009ec8:	3201      	adds	r2, #1
 8009eca:	701a      	strb	r2, [r3, #0]
 8009ecc:	e790      	b.n	8009df0 <_dtoa_r+0x608>
 8009ece:	4ba6      	ldr	r3, [pc, #664]	; (800a168 <_dtoa_r+0x980>)
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f7f6 fb91 	bl	80005f8 <__aeabi_dmul>
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	2300      	movs	r3, #0
 8009eda:	4606      	mov	r6, r0
 8009edc:	460f      	mov	r7, r1
 8009ede:	f7f6 fdf3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ee2:	2800      	cmp	r0, #0
 8009ee4:	d09d      	beq.n	8009e22 <_dtoa_r+0x63a>
 8009ee6:	e7cf      	b.n	8009e88 <_dtoa_r+0x6a0>
 8009ee8:	9a08      	ldr	r2, [sp, #32]
 8009eea:	2a00      	cmp	r2, #0
 8009eec:	f000 80d7 	beq.w	800a09e <_dtoa_r+0x8b6>
 8009ef0:	9a06      	ldr	r2, [sp, #24]
 8009ef2:	2a01      	cmp	r2, #1
 8009ef4:	f300 80ba 	bgt.w	800a06c <_dtoa_r+0x884>
 8009ef8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009efa:	2a00      	cmp	r2, #0
 8009efc:	f000 80b2 	beq.w	800a064 <_dtoa_r+0x87c>
 8009f00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f04:	9e07      	ldr	r6, [sp, #28]
 8009f06:	9d04      	ldr	r5, [sp, #16]
 8009f08:	9a04      	ldr	r2, [sp, #16]
 8009f0a:	441a      	add	r2, r3
 8009f0c:	9204      	str	r2, [sp, #16]
 8009f0e:	9a05      	ldr	r2, [sp, #20]
 8009f10:	2101      	movs	r1, #1
 8009f12:	441a      	add	r2, r3
 8009f14:	4620      	mov	r0, r4
 8009f16:	9205      	str	r2, [sp, #20]
 8009f18:	f000 fb58 	bl	800a5cc <__i2b>
 8009f1c:	4607      	mov	r7, r0
 8009f1e:	2d00      	cmp	r5, #0
 8009f20:	dd0c      	ble.n	8009f3c <_dtoa_r+0x754>
 8009f22:	9b05      	ldr	r3, [sp, #20]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	dd09      	ble.n	8009f3c <_dtoa_r+0x754>
 8009f28:	42ab      	cmp	r3, r5
 8009f2a:	9a04      	ldr	r2, [sp, #16]
 8009f2c:	bfa8      	it	ge
 8009f2e:	462b      	movge	r3, r5
 8009f30:	1ad2      	subs	r2, r2, r3
 8009f32:	9204      	str	r2, [sp, #16]
 8009f34:	9a05      	ldr	r2, [sp, #20]
 8009f36:	1aed      	subs	r5, r5, r3
 8009f38:	1ad3      	subs	r3, r2, r3
 8009f3a:	9305      	str	r3, [sp, #20]
 8009f3c:	9b07      	ldr	r3, [sp, #28]
 8009f3e:	b31b      	cbz	r3, 8009f88 <_dtoa_r+0x7a0>
 8009f40:	9b08      	ldr	r3, [sp, #32]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	f000 80af 	beq.w	800a0a6 <_dtoa_r+0x8be>
 8009f48:	2e00      	cmp	r6, #0
 8009f4a:	dd13      	ble.n	8009f74 <_dtoa_r+0x78c>
 8009f4c:	4639      	mov	r1, r7
 8009f4e:	4632      	mov	r2, r6
 8009f50:	4620      	mov	r0, r4
 8009f52:	f000 fbfb 	bl	800a74c <__pow5mult>
 8009f56:	ee18 2a10 	vmov	r2, s16
 8009f5a:	4601      	mov	r1, r0
 8009f5c:	4607      	mov	r7, r0
 8009f5e:	4620      	mov	r0, r4
 8009f60:	f000 fb4a 	bl	800a5f8 <__multiply>
 8009f64:	ee18 1a10 	vmov	r1, s16
 8009f68:	4680      	mov	r8, r0
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	f000 fa76 	bl	800a45c <_Bfree>
 8009f70:	ee08 8a10 	vmov	s16, r8
 8009f74:	9b07      	ldr	r3, [sp, #28]
 8009f76:	1b9a      	subs	r2, r3, r6
 8009f78:	d006      	beq.n	8009f88 <_dtoa_r+0x7a0>
 8009f7a:	ee18 1a10 	vmov	r1, s16
 8009f7e:	4620      	mov	r0, r4
 8009f80:	f000 fbe4 	bl	800a74c <__pow5mult>
 8009f84:	ee08 0a10 	vmov	s16, r0
 8009f88:	2101      	movs	r1, #1
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	f000 fb1e 	bl	800a5cc <__i2b>
 8009f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	4606      	mov	r6, r0
 8009f96:	f340 8088 	ble.w	800a0aa <_dtoa_r+0x8c2>
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	4601      	mov	r1, r0
 8009f9e:	4620      	mov	r0, r4
 8009fa0:	f000 fbd4 	bl	800a74c <__pow5mult>
 8009fa4:	9b06      	ldr	r3, [sp, #24]
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	4606      	mov	r6, r0
 8009faa:	f340 8081 	ble.w	800a0b0 <_dtoa_r+0x8c8>
 8009fae:	f04f 0800 	mov.w	r8, #0
 8009fb2:	6933      	ldr	r3, [r6, #16]
 8009fb4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009fb8:	6918      	ldr	r0, [r3, #16]
 8009fba:	f000 fab7 	bl	800a52c <__hi0bits>
 8009fbe:	f1c0 0020 	rsb	r0, r0, #32
 8009fc2:	9b05      	ldr	r3, [sp, #20]
 8009fc4:	4418      	add	r0, r3
 8009fc6:	f010 001f 	ands.w	r0, r0, #31
 8009fca:	f000 8092 	beq.w	800a0f2 <_dtoa_r+0x90a>
 8009fce:	f1c0 0320 	rsb	r3, r0, #32
 8009fd2:	2b04      	cmp	r3, #4
 8009fd4:	f340 808a 	ble.w	800a0ec <_dtoa_r+0x904>
 8009fd8:	f1c0 001c 	rsb	r0, r0, #28
 8009fdc:	9b04      	ldr	r3, [sp, #16]
 8009fde:	4403      	add	r3, r0
 8009fe0:	9304      	str	r3, [sp, #16]
 8009fe2:	9b05      	ldr	r3, [sp, #20]
 8009fe4:	4403      	add	r3, r0
 8009fe6:	4405      	add	r5, r0
 8009fe8:	9305      	str	r3, [sp, #20]
 8009fea:	9b04      	ldr	r3, [sp, #16]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	dd07      	ble.n	800a000 <_dtoa_r+0x818>
 8009ff0:	ee18 1a10 	vmov	r1, s16
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	f000 fc02 	bl	800a800 <__lshift>
 8009ffc:	ee08 0a10 	vmov	s16, r0
 800a000:	9b05      	ldr	r3, [sp, #20]
 800a002:	2b00      	cmp	r3, #0
 800a004:	dd05      	ble.n	800a012 <_dtoa_r+0x82a>
 800a006:	4631      	mov	r1, r6
 800a008:	461a      	mov	r2, r3
 800a00a:	4620      	mov	r0, r4
 800a00c:	f000 fbf8 	bl	800a800 <__lshift>
 800a010:	4606      	mov	r6, r0
 800a012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a014:	2b00      	cmp	r3, #0
 800a016:	d06e      	beq.n	800a0f6 <_dtoa_r+0x90e>
 800a018:	ee18 0a10 	vmov	r0, s16
 800a01c:	4631      	mov	r1, r6
 800a01e:	f000 fc5f 	bl	800a8e0 <__mcmp>
 800a022:	2800      	cmp	r0, #0
 800a024:	da67      	bge.n	800a0f6 <_dtoa_r+0x90e>
 800a026:	9b00      	ldr	r3, [sp, #0]
 800a028:	3b01      	subs	r3, #1
 800a02a:	ee18 1a10 	vmov	r1, s16
 800a02e:	9300      	str	r3, [sp, #0]
 800a030:	220a      	movs	r2, #10
 800a032:	2300      	movs	r3, #0
 800a034:	4620      	mov	r0, r4
 800a036:	f000 fa33 	bl	800a4a0 <__multadd>
 800a03a:	9b08      	ldr	r3, [sp, #32]
 800a03c:	ee08 0a10 	vmov	s16, r0
 800a040:	2b00      	cmp	r3, #0
 800a042:	f000 81b1 	beq.w	800a3a8 <_dtoa_r+0xbc0>
 800a046:	2300      	movs	r3, #0
 800a048:	4639      	mov	r1, r7
 800a04a:	220a      	movs	r2, #10
 800a04c:	4620      	mov	r0, r4
 800a04e:	f000 fa27 	bl	800a4a0 <__multadd>
 800a052:	9b02      	ldr	r3, [sp, #8]
 800a054:	2b00      	cmp	r3, #0
 800a056:	4607      	mov	r7, r0
 800a058:	f300 808e 	bgt.w	800a178 <_dtoa_r+0x990>
 800a05c:	9b06      	ldr	r3, [sp, #24]
 800a05e:	2b02      	cmp	r3, #2
 800a060:	dc51      	bgt.n	800a106 <_dtoa_r+0x91e>
 800a062:	e089      	b.n	800a178 <_dtoa_r+0x990>
 800a064:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a066:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a06a:	e74b      	b.n	8009f04 <_dtoa_r+0x71c>
 800a06c:	9b03      	ldr	r3, [sp, #12]
 800a06e:	1e5e      	subs	r6, r3, #1
 800a070:	9b07      	ldr	r3, [sp, #28]
 800a072:	42b3      	cmp	r3, r6
 800a074:	bfbf      	itttt	lt
 800a076:	9b07      	ldrlt	r3, [sp, #28]
 800a078:	9607      	strlt	r6, [sp, #28]
 800a07a:	1af2      	sublt	r2, r6, r3
 800a07c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a07e:	bfb6      	itet	lt
 800a080:	189b      	addlt	r3, r3, r2
 800a082:	1b9e      	subge	r6, r3, r6
 800a084:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a086:	9b03      	ldr	r3, [sp, #12]
 800a088:	bfb8      	it	lt
 800a08a:	2600      	movlt	r6, #0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	bfb7      	itett	lt
 800a090:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a094:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a098:	1a9d      	sublt	r5, r3, r2
 800a09a:	2300      	movlt	r3, #0
 800a09c:	e734      	b.n	8009f08 <_dtoa_r+0x720>
 800a09e:	9e07      	ldr	r6, [sp, #28]
 800a0a0:	9d04      	ldr	r5, [sp, #16]
 800a0a2:	9f08      	ldr	r7, [sp, #32]
 800a0a4:	e73b      	b.n	8009f1e <_dtoa_r+0x736>
 800a0a6:	9a07      	ldr	r2, [sp, #28]
 800a0a8:	e767      	b.n	8009f7a <_dtoa_r+0x792>
 800a0aa:	9b06      	ldr	r3, [sp, #24]
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	dc18      	bgt.n	800a0e2 <_dtoa_r+0x8fa>
 800a0b0:	f1ba 0f00 	cmp.w	sl, #0
 800a0b4:	d115      	bne.n	800a0e2 <_dtoa_r+0x8fa>
 800a0b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0ba:	b993      	cbnz	r3, 800a0e2 <_dtoa_r+0x8fa>
 800a0bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a0c0:	0d1b      	lsrs	r3, r3, #20
 800a0c2:	051b      	lsls	r3, r3, #20
 800a0c4:	b183      	cbz	r3, 800a0e8 <_dtoa_r+0x900>
 800a0c6:	9b04      	ldr	r3, [sp, #16]
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	9304      	str	r3, [sp, #16]
 800a0cc:	9b05      	ldr	r3, [sp, #20]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	9305      	str	r3, [sp, #20]
 800a0d2:	f04f 0801 	mov.w	r8, #1
 800a0d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	f47f af6a 	bne.w	8009fb2 <_dtoa_r+0x7ca>
 800a0de:	2001      	movs	r0, #1
 800a0e0:	e76f      	b.n	8009fc2 <_dtoa_r+0x7da>
 800a0e2:	f04f 0800 	mov.w	r8, #0
 800a0e6:	e7f6      	b.n	800a0d6 <_dtoa_r+0x8ee>
 800a0e8:	4698      	mov	r8, r3
 800a0ea:	e7f4      	b.n	800a0d6 <_dtoa_r+0x8ee>
 800a0ec:	f43f af7d 	beq.w	8009fea <_dtoa_r+0x802>
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	301c      	adds	r0, #28
 800a0f4:	e772      	b.n	8009fdc <_dtoa_r+0x7f4>
 800a0f6:	9b03      	ldr	r3, [sp, #12]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	dc37      	bgt.n	800a16c <_dtoa_r+0x984>
 800a0fc:	9b06      	ldr	r3, [sp, #24]
 800a0fe:	2b02      	cmp	r3, #2
 800a100:	dd34      	ble.n	800a16c <_dtoa_r+0x984>
 800a102:	9b03      	ldr	r3, [sp, #12]
 800a104:	9302      	str	r3, [sp, #8]
 800a106:	9b02      	ldr	r3, [sp, #8]
 800a108:	b96b      	cbnz	r3, 800a126 <_dtoa_r+0x93e>
 800a10a:	4631      	mov	r1, r6
 800a10c:	2205      	movs	r2, #5
 800a10e:	4620      	mov	r0, r4
 800a110:	f000 f9c6 	bl	800a4a0 <__multadd>
 800a114:	4601      	mov	r1, r0
 800a116:	4606      	mov	r6, r0
 800a118:	ee18 0a10 	vmov	r0, s16
 800a11c:	f000 fbe0 	bl	800a8e0 <__mcmp>
 800a120:	2800      	cmp	r0, #0
 800a122:	f73f adbb 	bgt.w	8009c9c <_dtoa_r+0x4b4>
 800a126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a128:	9d01      	ldr	r5, [sp, #4]
 800a12a:	43db      	mvns	r3, r3
 800a12c:	9300      	str	r3, [sp, #0]
 800a12e:	f04f 0800 	mov.w	r8, #0
 800a132:	4631      	mov	r1, r6
 800a134:	4620      	mov	r0, r4
 800a136:	f000 f991 	bl	800a45c <_Bfree>
 800a13a:	2f00      	cmp	r7, #0
 800a13c:	f43f aea4 	beq.w	8009e88 <_dtoa_r+0x6a0>
 800a140:	f1b8 0f00 	cmp.w	r8, #0
 800a144:	d005      	beq.n	800a152 <_dtoa_r+0x96a>
 800a146:	45b8      	cmp	r8, r7
 800a148:	d003      	beq.n	800a152 <_dtoa_r+0x96a>
 800a14a:	4641      	mov	r1, r8
 800a14c:	4620      	mov	r0, r4
 800a14e:	f000 f985 	bl	800a45c <_Bfree>
 800a152:	4639      	mov	r1, r7
 800a154:	4620      	mov	r0, r4
 800a156:	f000 f981 	bl	800a45c <_Bfree>
 800a15a:	e695      	b.n	8009e88 <_dtoa_r+0x6a0>
 800a15c:	2600      	movs	r6, #0
 800a15e:	4637      	mov	r7, r6
 800a160:	e7e1      	b.n	800a126 <_dtoa_r+0x93e>
 800a162:	9700      	str	r7, [sp, #0]
 800a164:	4637      	mov	r7, r6
 800a166:	e599      	b.n	8009c9c <_dtoa_r+0x4b4>
 800a168:	40240000 	.word	0x40240000
 800a16c:	9b08      	ldr	r3, [sp, #32]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	f000 80ca 	beq.w	800a308 <_dtoa_r+0xb20>
 800a174:	9b03      	ldr	r3, [sp, #12]
 800a176:	9302      	str	r3, [sp, #8]
 800a178:	2d00      	cmp	r5, #0
 800a17a:	dd05      	ble.n	800a188 <_dtoa_r+0x9a0>
 800a17c:	4639      	mov	r1, r7
 800a17e:	462a      	mov	r2, r5
 800a180:	4620      	mov	r0, r4
 800a182:	f000 fb3d 	bl	800a800 <__lshift>
 800a186:	4607      	mov	r7, r0
 800a188:	f1b8 0f00 	cmp.w	r8, #0
 800a18c:	d05b      	beq.n	800a246 <_dtoa_r+0xa5e>
 800a18e:	6879      	ldr	r1, [r7, #4]
 800a190:	4620      	mov	r0, r4
 800a192:	f000 f923 	bl	800a3dc <_Balloc>
 800a196:	4605      	mov	r5, r0
 800a198:	b928      	cbnz	r0, 800a1a6 <_dtoa_r+0x9be>
 800a19a:	4b87      	ldr	r3, [pc, #540]	; (800a3b8 <_dtoa_r+0xbd0>)
 800a19c:	4602      	mov	r2, r0
 800a19e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a1a2:	f7ff bb3b 	b.w	800981c <_dtoa_r+0x34>
 800a1a6:	693a      	ldr	r2, [r7, #16]
 800a1a8:	3202      	adds	r2, #2
 800a1aa:	0092      	lsls	r2, r2, #2
 800a1ac:	f107 010c 	add.w	r1, r7, #12
 800a1b0:	300c      	adds	r0, #12
 800a1b2:	f7fe fded 	bl	8008d90 <memcpy>
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	4629      	mov	r1, r5
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f000 fb20 	bl	800a800 <__lshift>
 800a1c0:	9b01      	ldr	r3, [sp, #4]
 800a1c2:	f103 0901 	add.w	r9, r3, #1
 800a1c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	9305      	str	r3, [sp, #20]
 800a1ce:	f00a 0301 	and.w	r3, sl, #1
 800a1d2:	46b8      	mov	r8, r7
 800a1d4:	9304      	str	r3, [sp, #16]
 800a1d6:	4607      	mov	r7, r0
 800a1d8:	4631      	mov	r1, r6
 800a1da:	ee18 0a10 	vmov	r0, s16
 800a1de:	f7ff fa77 	bl	80096d0 <quorem>
 800a1e2:	4641      	mov	r1, r8
 800a1e4:	9002      	str	r0, [sp, #8]
 800a1e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a1ea:	ee18 0a10 	vmov	r0, s16
 800a1ee:	f000 fb77 	bl	800a8e0 <__mcmp>
 800a1f2:	463a      	mov	r2, r7
 800a1f4:	9003      	str	r0, [sp, #12]
 800a1f6:	4631      	mov	r1, r6
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	f000 fb8d 	bl	800a918 <__mdiff>
 800a1fe:	68c2      	ldr	r2, [r0, #12]
 800a200:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800a204:	4605      	mov	r5, r0
 800a206:	bb02      	cbnz	r2, 800a24a <_dtoa_r+0xa62>
 800a208:	4601      	mov	r1, r0
 800a20a:	ee18 0a10 	vmov	r0, s16
 800a20e:	f000 fb67 	bl	800a8e0 <__mcmp>
 800a212:	4602      	mov	r2, r0
 800a214:	4629      	mov	r1, r5
 800a216:	4620      	mov	r0, r4
 800a218:	9207      	str	r2, [sp, #28]
 800a21a:	f000 f91f 	bl	800a45c <_Bfree>
 800a21e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a222:	ea43 0102 	orr.w	r1, r3, r2
 800a226:	9b04      	ldr	r3, [sp, #16]
 800a228:	430b      	orrs	r3, r1
 800a22a:	464d      	mov	r5, r9
 800a22c:	d10f      	bne.n	800a24e <_dtoa_r+0xa66>
 800a22e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a232:	d02a      	beq.n	800a28a <_dtoa_r+0xaa2>
 800a234:	9b03      	ldr	r3, [sp, #12]
 800a236:	2b00      	cmp	r3, #0
 800a238:	dd02      	ble.n	800a240 <_dtoa_r+0xa58>
 800a23a:	9b02      	ldr	r3, [sp, #8]
 800a23c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a240:	f88b a000 	strb.w	sl, [fp]
 800a244:	e775      	b.n	800a132 <_dtoa_r+0x94a>
 800a246:	4638      	mov	r0, r7
 800a248:	e7ba      	b.n	800a1c0 <_dtoa_r+0x9d8>
 800a24a:	2201      	movs	r2, #1
 800a24c:	e7e2      	b.n	800a214 <_dtoa_r+0xa2c>
 800a24e:	9b03      	ldr	r3, [sp, #12]
 800a250:	2b00      	cmp	r3, #0
 800a252:	db04      	blt.n	800a25e <_dtoa_r+0xa76>
 800a254:	9906      	ldr	r1, [sp, #24]
 800a256:	430b      	orrs	r3, r1
 800a258:	9904      	ldr	r1, [sp, #16]
 800a25a:	430b      	orrs	r3, r1
 800a25c:	d122      	bne.n	800a2a4 <_dtoa_r+0xabc>
 800a25e:	2a00      	cmp	r2, #0
 800a260:	ddee      	ble.n	800a240 <_dtoa_r+0xa58>
 800a262:	ee18 1a10 	vmov	r1, s16
 800a266:	2201      	movs	r2, #1
 800a268:	4620      	mov	r0, r4
 800a26a:	f000 fac9 	bl	800a800 <__lshift>
 800a26e:	4631      	mov	r1, r6
 800a270:	ee08 0a10 	vmov	s16, r0
 800a274:	f000 fb34 	bl	800a8e0 <__mcmp>
 800a278:	2800      	cmp	r0, #0
 800a27a:	dc03      	bgt.n	800a284 <_dtoa_r+0xa9c>
 800a27c:	d1e0      	bne.n	800a240 <_dtoa_r+0xa58>
 800a27e:	f01a 0f01 	tst.w	sl, #1
 800a282:	d0dd      	beq.n	800a240 <_dtoa_r+0xa58>
 800a284:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a288:	d1d7      	bne.n	800a23a <_dtoa_r+0xa52>
 800a28a:	2339      	movs	r3, #57	; 0x39
 800a28c:	f88b 3000 	strb.w	r3, [fp]
 800a290:	462b      	mov	r3, r5
 800a292:	461d      	mov	r5, r3
 800a294:	3b01      	subs	r3, #1
 800a296:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a29a:	2a39      	cmp	r2, #57	; 0x39
 800a29c:	d071      	beq.n	800a382 <_dtoa_r+0xb9a>
 800a29e:	3201      	adds	r2, #1
 800a2a0:	701a      	strb	r2, [r3, #0]
 800a2a2:	e746      	b.n	800a132 <_dtoa_r+0x94a>
 800a2a4:	2a00      	cmp	r2, #0
 800a2a6:	dd07      	ble.n	800a2b8 <_dtoa_r+0xad0>
 800a2a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a2ac:	d0ed      	beq.n	800a28a <_dtoa_r+0xaa2>
 800a2ae:	f10a 0301 	add.w	r3, sl, #1
 800a2b2:	f88b 3000 	strb.w	r3, [fp]
 800a2b6:	e73c      	b.n	800a132 <_dtoa_r+0x94a>
 800a2b8:	9b05      	ldr	r3, [sp, #20]
 800a2ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a2be:	4599      	cmp	r9, r3
 800a2c0:	d047      	beq.n	800a352 <_dtoa_r+0xb6a>
 800a2c2:	ee18 1a10 	vmov	r1, s16
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	220a      	movs	r2, #10
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	f000 f8e8 	bl	800a4a0 <__multadd>
 800a2d0:	45b8      	cmp	r8, r7
 800a2d2:	ee08 0a10 	vmov	s16, r0
 800a2d6:	f04f 0300 	mov.w	r3, #0
 800a2da:	f04f 020a 	mov.w	r2, #10
 800a2de:	4641      	mov	r1, r8
 800a2e0:	4620      	mov	r0, r4
 800a2e2:	d106      	bne.n	800a2f2 <_dtoa_r+0xb0a>
 800a2e4:	f000 f8dc 	bl	800a4a0 <__multadd>
 800a2e8:	4680      	mov	r8, r0
 800a2ea:	4607      	mov	r7, r0
 800a2ec:	f109 0901 	add.w	r9, r9, #1
 800a2f0:	e772      	b.n	800a1d8 <_dtoa_r+0x9f0>
 800a2f2:	f000 f8d5 	bl	800a4a0 <__multadd>
 800a2f6:	4639      	mov	r1, r7
 800a2f8:	4680      	mov	r8, r0
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	220a      	movs	r2, #10
 800a2fe:	4620      	mov	r0, r4
 800a300:	f000 f8ce 	bl	800a4a0 <__multadd>
 800a304:	4607      	mov	r7, r0
 800a306:	e7f1      	b.n	800a2ec <_dtoa_r+0xb04>
 800a308:	9b03      	ldr	r3, [sp, #12]
 800a30a:	9302      	str	r3, [sp, #8]
 800a30c:	9d01      	ldr	r5, [sp, #4]
 800a30e:	ee18 0a10 	vmov	r0, s16
 800a312:	4631      	mov	r1, r6
 800a314:	f7ff f9dc 	bl	80096d0 <quorem>
 800a318:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a31c:	9b01      	ldr	r3, [sp, #4]
 800a31e:	f805 ab01 	strb.w	sl, [r5], #1
 800a322:	1aea      	subs	r2, r5, r3
 800a324:	9b02      	ldr	r3, [sp, #8]
 800a326:	4293      	cmp	r3, r2
 800a328:	dd09      	ble.n	800a33e <_dtoa_r+0xb56>
 800a32a:	ee18 1a10 	vmov	r1, s16
 800a32e:	2300      	movs	r3, #0
 800a330:	220a      	movs	r2, #10
 800a332:	4620      	mov	r0, r4
 800a334:	f000 f8b4 	bl	800a4a0 <__multadd>
 800a338:	ee08 0a10 	vmov	s16, r0
 800a33c:	e7e7      	b.n	800a30e <_dtoa_r+0xb26>
 800a33e:	9b02      	ldr	r3, [sp, #8]
 800a340:	2b00      	cmp	r3, #0
 800a342:	bfc8      	it	gt
 800a344:	461d      	movgt	r5, r3
 800a346:	9b01      	ldr	r3, [sp, #4]
 800a348:	bfd8      	it	le
 800a34a:	2501      	movle	r5, #1
 800a34c:	441d      	add	r5, r3
 800a34e:	f04f 0800 	mov.w	r8, #0
 800a352:	ee18 1a10 	vmov	r1, s16
 800a356:	2201      	movs	r2, #1
 800a358:	4620      	mov	r0, r4
 800a35a:	f000 fa51 	bl	800a800 <__lshift>
 800a35e:	4631      	mov	r1, r6
 800a360:	ee08 0a10 	vmov	s16, r0
 800a364:	f000 fabc 	bl	800a8e0 <__mcmp>
 800a368:	2800      	cmp	r0, #0
 800a36a:	dc91      	bgt.n	800a290 <_dtoa_r+0xaa8>
 800a36c:	d102      	bne.n	800a374 <_dtoa_r+0xb8c>
 800a36e:	f01a 0f01 	tst.w	sl, #1
 800a372:	d18d      	bne.n	800a290 <_dtoa_r+0xaa8>
 800a374:	462b      	mov	r3, r5
 800a376:	461d      	mov	r5, r3
 800a378:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a37c:	2a30      	cmp	r2, #48	; 0x30
 800a37e:	d0fa      	beq.n	800a376 <_dtoa_r+0xb8e>
 800a380:	e6d7      	b.n	800a132 <_dtoa_r+0x94a>
 800a382:	9a01      	ldr	r2, [sp, #4]
 800a384:	429a      	cmp	r2, r3
 800a386:	d184      	bne.n	800a292 <_dtoa_r+0xaaa>
 800a388:	9b00      	ldr	r3, [sp, #0]
 800a38a:	3301      	adds	r3, #1
 800a38c:	9300      	str	r3, [sp, #0]
 800a38e:	2331      	movs	r3, #49	; 0x31
 800a390:	7013      	strb	r3, [r2, #0]
 800a392:	e6ce      	b.n	800a132 <_dtoa_r+0x94a>
 800a394:	4b09      	ldr	r3, [pc, #36]	; (800a3bc <_dtoa_r+0xbd4>)
 800a396:	f7ff ba95 	b.w	80098c4 <_dtoa_r+0xdc>
 800a39a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f47f aa6e 	bne.w	800987e <_dtoa_r+0x96>
 800a3a2:	4b07      	ldr	r3, [pc, #28]	; (800a3c0 <_dtoa_r+0xbd8>)
 800a3a4:	f7ff ba8e 	b.w	80098c4 <_dtoa_r+0xdc>
 800a3a8:	9b02      	ldr	r3, [sp, #8]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	dcae      	bgt.n	800a30c <_dtoa_r+0xb24>
 800a3ae:	9b06      	ldr	r3, [sp, #24]
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	f73f aea8 	bgt.w	800a106 <_dtoa_r+0x91e>
 800a3b6:	e7a9      	b.n	800a30c <_dtoa_r+0xb24>
 800a3b8:	0800e893 	.word	0x0800e893
 800a3bc:	0800e7f0 	.word	0x0800e7f0
 800a3c0:	0800e814 	.word	0x0800e814

0800a3c4 <_localeconv_r>:
 800a3c4:	4800      	ldr	r0, [pc, #0]	; (800a3c8 <_localeconv_r+0x4>)
 800a3c6:	4770      	bx	lr
 800a3c8:	20000168 	.word	0x20000168

0800a3cc <malloc>:
 800a3cc:	4b02      	ldr	r3, [pc, #8]	; (800a3d8 <malloc+0xc>)
 800a3ce:	4601      	mov	r1, r0
 800a3d0:	6818      	ldr	r0, [r3, #0]
 800a3d2:	f000 bc09 	b.w	800abe8 <_malloc_r>
 800a3d6:	bf00      	nop
 800a3d8:	20000014 	.word	0x20000014

0800a3dc <_Balloc>:
 800a3dc:	b570      	push	{r4, r5, r6, lr}
 800a3de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a3e0:	4604      	mov	r4, r0
 800a3e2:	460d      	mov	r5, r1
 800a3e4:	b976      	cbnz	r6, 800a404 <_Balloc+0x28>
 800a3e6:	2010      	movs	r0, #16
 800a3e8:	f7ff fff0 	bl	800a3cc <malloc>
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	6260      	str	r0, [r4, #36]	; 0x24
 800a3f0:	b920      	cbnz	r0, 800a3fc <_Balloc+0x20>
 800a3f2:	4b18      	ldr	r3, [pc, #96]	; (800a454 <_Balloc+0x78>)
 800a3f4:	4818      	ldr	r0, [pc, #96]	; (800a458 <_Balloc+0x7c>)
 800a3f6:	2166      	movs	r1, #102	; 0x66
 800a3f8:	f000 fdd6 	bl	800afa8 <__assert_func>
 800a3fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a400:	6006      	str	r6, [r0, #0]
 800a402:	60c6      	str	r6, [r0, #12]
 800a404:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a406:	68f3      	ldr	r3, [r6, #12]
 800a408:	b183      	cbz	r3, 800a42c <_Balloc+0x50>
 800a40a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a40c:	68db      	ldr	r3, [r3, #12]
 800a40e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a412:	b9b8      	cbnz	r0, 800a444 <_Balloc+0x68>
 800a414:	2101      	movs	r1, #1
 800a416:	fa01 f605 	lsl.w	r6, r1, r5
 800a41a:	1d72      	adds	r2, r6, #5
 800a41c:	0092      	lsls	r2, r2, #2
 800a41e:	4620      	mov	r0, r4
 800a420:	f000 fb60 	bl	800aae4 <_calloc_r>
 800a424:	b160      	cbz	r0, 800a440 <_Balloc+0x64>
 800a426:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a42a:	e00e      	b.n	800a44a <_Balloc+0x6e>
 800a42c:	2221      	movs	r2, #33	; 0x21
 800a42e:	2104      	movs	r1, #4
 800a430:	4620      	mov	r0, r4
 800a432:	f000 fb57 	bl	800aae4 <_calloc_r>
 800a436:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a438:	60f0      	str	r0, [r6, #12]
 800a43a:	68db      	ldr	r3, [r3, #12]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d1e4      	bne.n	800a40a <_Balloc+0x2e>
 800a440:	2000      	movs	r0, #0
 800a442:	bd70      	pop	{r4, r5, r6, pc}
 800a444:	6802      	ldr	r2, [r0, #0]
 800a446:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a44a:	2300      	movs	r3, #0
 800a44c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a450:	e7f7      	b.n	800a442 <_Balloc+0x66>
 800a452:	bf00      	nop
 800a454:	0800e821 	.word	0x0800e821
 800a458:	0800e8a4 	.word	0x0800e8a4

0800a45c <_Bfree>:
 800a45c:	b570      	push	{r4, r5, r6, lr}
 800a45e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a460:	4605      	mov	r5, r0
 800a462:	460c      	mov	r4, r1
 800a464:	b976      	cbnz	r6, 800a484 <_Bfree+0x28>
 800a466:	2010      	movs	r0, #16
 800a468:	f7ff ffb0 	bl	800a3cc <malloc>
 800a46c:	4602      	mov	r2, r0
 800a46e:	6268      	str	r0, [r5, #36]	; 0x24
 800a470:	b920      	cbnz	r0, 800a47c <_Bfree+0x20>
 800a472:	4b09      	ldr	r3, [pc, #36]	; (800a498 <_Bfree+0x3c>)
 800a474:	4809      	ldr	r0, [pc, #36]	; (800a49c <_Bfree+0x40>)
 800a476:	218a      	movs	r1, #138	; 0x8a
 800a478:	f000 fd96 	bl	800afa8 <__assert_func>
 800a47c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a480:	6006      	str	r6, [r0, #0]
 800a482:	60c6      	str	r6, [r0, #12]
 800a484:	b13c      	cbz	r4, 800a496 <_Bfree+0x3a>
 800a486:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a488:	6862      	ldr	r2, [r4, #4]
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a490:	6021      	str	r1, [r4, #0]
 800a492:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a496:	bd70      	pop	{r4, r5, r6, pc}
 800a498:	0800e821 	.word	0x0800e821
 800a49c:	0800e8a4 	.word	0x0800e8a4

0800a4a0 <__multadd>:
 800a4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4a4:	690d      	ldr	r5, [r1, #16]
 800a4a6:	4607      	mov	r7, r0
 800a4a8:	460c      	mov	r4, r1
 800a4aa:	461e      	mov	r6, r3
 800a4ac:	f101 0c14 	add.w	ip, r1, #20
 800a4b0:	2000      	movs	r0, #0
 800a4b2:	f8dc 3000 	ldr.w	r3, [ip]
 800a4b6:	b299      	uxth	r1, r3
 800a4b8:	fb02 6101 	mla	r1, r2, r1, r6
 800a4bc:	0c1e      	lsrs	r6, r3, #16
 800a4be:	0c0b      	lsrs	r3, r1, #16
 800a4c0:	fb02 3306 	mla	r3, r2, r6, r3
 800a4c4:	b289      	uxth	r1, r1
 800a4c6:	3001      	adds	r0, #1
 800a4c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a4cc:	4285      	cmp	r5, r0
 800a4ce:	f84c 1b04 	str.w	r1, [ip], #4
 800a4d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a4d6:	dcec      	bgt.n	800a4b2 <__multadd+0x12>
 800a4d8:	b30e      	cbz	r6, 800a51e <__multadd+0x7e>
 800a4da:	68a3      	ldr	r3, [r4, #8]
 800a4dc:	42ab      	cmp	r3, r5
 800a4de:	dc19      	bgt.n	800a514 <__multadd+0x74>
 800a4e0:	6861      	ldr	r1, [r4, #4]
 800a4e2:	4638      	mov	r0, r7
 800a4e4:	3101      	adds	r1, #1
 800a4e6:	f7ff ff79 	bl	800a3dc <_Balloc>
 800a4ea:	4680      	mov	r8, r0
 800a4ec:	b928      	cbnz	r0, 800a4fa <__multadd+0x5a>
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	4b0c      	ldr	r3, [pc, #48]	; (800a524 <__multadd+0x84>)
 800a4f2:	480d      	ldr	r0, [pc, #52]	; (800a528 <__multadd+0x88>)
 800a4f4:	21b5      	movs	r1, #181	; 0xb5
 800a4f6:	f000 fd57 	bl	800afa8 <__assert_func>
 800a4fa:	6922      	ldr	r2, [r4, #16]
 800a4fc:	3202      	adds	r2, #2
 800a4fe:	f104 010c 	add.w	r1, r4, #12
 800a502:	0092      	lsls	r2, r2, #2
 800a504:	300c      	adds	r0, #12
 800a506:	f7fe fc43 	bl	8008d90 <memcpy>
 800a50a:	4621      	mov	r1, r4
 800a50c:	4638      	mov	r0, r7
 800a50e:	f7ff ffa5 	bl	800a45c <_Bfree>
 800a512:	4644      	mov	r4, r8
 800a514:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a518:	3501      	adds	r5, #1
 800a51a:	615e      	str	r6, [r3, #20]
 800a51c:	6125      	str	r5, [r4, #16]
 800a51e:	4620      	mov	r0, r4
 800a520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a524:	0800e893 	.word	0x0800e893
 800a528:	0800e8a4 	.word	0x0800e8a4

0800a52c <__hi0bits>:
 800a52c:	0c03      	lsrs	r3, r0, #16
 800a52e:	041b      	lsls	r3, r3, #16
 800a530:	b9d3      	cbnz	r3, 800a568 <__hi0bits+0x3c>
 800a532:	0400      	lsls	r0, r0, #16
 800a534:	2310      	movs	r3, #16
 800a536:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a53a:	bf04      	itt	eq
 800a53c:	0200      	lsleq	r0, r0, #8
 800a53e:	3308      	addeq	r3, #8
 800a540:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a544:	bf04      	itt	eq
 800a546:	0100      	lsleq	r0, r0, #4
 800a548:	3304      	addeq	r3, #4
 800a54a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a54e:	bf04      	itt	eq
 800a550:	0080      	lsleq	r0, r0, #2
 800a552:	3302      	addeq	r3, #2
 800a554:	2800      	cmp	r0, #0
 800a556:	db05      	blt.n	800a564 <__hi0bits+0x38>
 800a558:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a55c:	f103 0301 	add.w	r3, r3, #1
 800a560:	bf08      	it	eq
 800a562:	2320      	moveq	r3, #32
 800a564:	4618      	mov	r0, r3
 800a566:	4770      	bx	lr
 800a568:	2300      	movs	r3, #0
 800a56a:	e7e4      	b.n	800a536 <__hi0bits+0xa>

0800a56c <__lo0bits>:
 800a56c:	6803      	ldr	r3, [r0, #0]
 800a56e:	f013 0207 	ands.w	r2, r3, #7
 800a572:	4601      	mov	r1, r0
 800a574:	d00b      	beq.n	800a58e <__lo0bits+0x22>
 800a576:	07da      	lsls	r2, r3, #31
 800a578:	d423      	bmi.n	800a5c2 <__lo0bits+0x56>
 800a57a:	0798      	lsls	r0, r3, #30
 800a57c:	bf49      	itett	mi
 800a57e:	085b      	lsrmi	r3, r3, #1
 800a580:	089b      	lsrpl	r3, r3, #2
 800a582:	2001      	movmi	r0, #1
 800a584:	600b      	strmi	r3, [r1, #0]
 800a586:	bf5c      	itt	pl
 800a588:	600b      	strpl	r3, [r1, #0]
 800a58a:	2002      	movpl	r0, #2
 800a58c:	4770      	bx	lr
 800a58e:	b298      	uxth	r0, r3
 800a590:	b9a8      	cbnz	r0, 800a5be <__lo0bits+0x52>
 800a592:	0c1b      	lsrs	r3, r3, #16
 800a594:	2010      	movs	r0, #16
 800a596:	b2da      	uxtb	r2, r3
 800a598:	b90a      	cbnz	r2, 800a59e <__lo0bits+0x32>
 800a59a:	3008      	adds	r0, #8
 800a59c:	0a1b      	lsrs	r3, r3, #8
 800a59e:	071a      	lsls	r2, r3, #28
 800a5a0:	bf04      	itt	eq
 800a5a2:	091b      	lsreq	r3, r3, #4
 800a5a4:	3004      	addeq	r0, #4
 800a5a6:	079a      	lsls	r2, r3, #30
 800a5a8:	bf04      	itt	eq
 800a5aa:	089b      	lsreq	r3, r3, #2
 800a5ac:	3002      	addeq	r0, #2
 800a5ae:	07da      	lsls	r2, r3, #31
 800a5b0:	d403      	bmi.n	800a5ba <__lo0bits+0x4e>
 800a5b2:	085b      	lsrs	r3, r3, #1
 800a5b4:	f100 0001 	add.w	r0, r0, #1
 800a5b8:	d005      	beq.n	800a5c6 <__lo0bits+0x5a>
 800a5ba:	600b      	str	r3, [r1, #0]
 800a5bc:	4770      	bx	lr
 800a5be:	4610      	mov	r0, r2
 800a5c0:	e7e9      	b.n	800a596 <__lo0bits+0x2a>
 800a5c2:	2000      	movs	r0, #0
 800a5c4:	4770      	bx	lr
 800a5c6:	2020      	movs	r0, #32
 800a5c8:	4770      	bx	lr
	...

0800a5cc <__i2b>:
 800a5cc:	b510      	push	{r4, lr}
 800a5ce:	460c      	mov	r4, r1
 800a5d0:	2101      	movs	r1, #1
 800a5d2:	f7ff ff03 	bl	800a3dc <_Balloc>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	b928      	cbnz	r0, 800a5e6 <__i2b+0x1a>
 800a5da:	4b05      	ldr	r3, [pc, #20]	; (800a5f0 <__i2b+0x24>)
 800a5dc:	4805      	ldr	r0, [pc, #20]	; (800a5f4 <__i2b+0x28>)
 800a5de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a5e2:	f000 fce1 	bl	800afa8 <__assert_func>
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	6144      	str	r4, [r0, #20]
 800a5ea:	6103      	str	r3, [r0, #16]
 800a5ec:	bd10      	pop	{r4, pc}
 800a5ee:	bf00      	nop
 800a5f0:	0800e893 	.word	0x0800e893
 800a5f4:	0800e8a4 	.word	0x0800e8a4

0800a5f8 <__multiply>:
 800a5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5fc:	4691      	mov	r9, r2
 800a5fe:	690a      	ldr	r2, [r1, #16]
 800a600:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a604:	429a      	cmp	r2, r3
 800a606:	bfb8      	it	lt
 800a608:	460b      	movlt	r3, r1
 800a60a:	460c      	mov	r4, r1
 800a60c:	bfbc      	itt	lt
 800a60e:	464c      	movlt	r4, r9
 800a610:	4699      	movlt	r9, r3
 800a612:	6927      	ldr	r7, [r4, #16]
 800a614:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a618:	68a3      	ldr	r3, [r4, #8]
 800a61a:	6861      	ldr	r1, [r4, #4]
 800a61c:	eb07 060a 	add.w	r6, r7, sl
 800a620:	42b3      	cmp	r3, r6
 800a622:	b085      	sub	sp, #20
 800a624:	bfb8      	it	lt
 800a626:	3101      	addlt	r1, #1
 800a628:	f7ff fed8 	bl	800a3dc <_Balloc>
 800a62c:	b930      	cbnz	r0, 800a63c <__multiply+0x44>
 800a62e:	4602      	mov	r2, r0
 800a630:	4b44      	ldr	r3, [pc, #272]	; (800a744 <__multiply+0x14c>)
 800a632:	4845      	ldr	r0, [pc, #276]	; (800a748 <__multiply+0x150>)
 800a634:	f240 115d 	movw	r1, #349	; 0x15d
 800a638:	f000 fcb6 	bl	800afa8 <__assert_func>
 800a63c:	f100 0514 	add.w	r5, r0, #20
 800a640:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a644:	462b      	mov	r3, r5
 800a646:	2200      	movs	r2, #0
 800a648:	4543      	cmp	r3, r8
 800a64a:	d321      	bcc.n	800a690 <__multiply+0x98>
 800a64c:	f104 0314 	add.w	r3, r4, #20
 800a650:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a654:	f109 0314 	add.w	r3, r9, #20
 800a658:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a65c:	9202      	str	r2, [sp, #8]
 800a65e:	1b3a      	subs	r2, r7, r4
 800a660:	3a15      	subs	r2, #21
 800a662:	f022 0203 	bic.w	r2, r2, #3
 800a666:	3204      	adds	r2, #4
 800a668:	f104 0115 	add.w	r1, r4, #21
 800a66c:	428f      	cmp	r7, r1
 800a66e:	bf38      	it	cc
 800a670:	2204      	movcc	r2, #4
 800a672:	9201      	str	r2, [sp, #4]
 800a674:	9a02      	ldr	r2, [sp, #8]
 800a676:	9303      	str	r3, [sp, #12]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d80c      	bhi.n	800a696 <__multiply+0x9e>
 800a67c:	2e00      	cmp	r6, #0
 800a67e:	dd03      	ble.n	800a688 <__multiply+0x90>
 800a680:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a684:	2b00      	cmp	r3, #0
 800a686:	d05a      	beq.n	800a73e <__multiply+0x146>
 800a688:	6106      	str	r6, [r0, #16]
 800a68a:	b005      	add	sp, #20
 800a68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a690:	f843 2b04 	str.w	r2, [r3], #4
 800a694:	e7d8      	b.n	800a648 <__multiply+0x50>
 800a696:	f8b3 a000 	ldrh.w	sl, [r3]
 800a69a:	f1ba 0f00 	cmp.w	sl, #0
 800a69e:	d024      	beq.n	800a6ea <__multiply+0xf2>
 800a6a0:	f104 0e14 	add.w	lr, r4, #20
 800a6a4:	46a9      	mov	r9, r5
 800a6a6:	f04f 0c00 	mov.w	ip, #0
 800a6aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a6ae:	f8d9 1000 	ldr.w	r1, [r9]
 800a6b2:	fa1f fb82 	uxth.w	fp, r2
 800a6b6:	b289      	uxth	r1, r1
 800a6b8:	fb0a 110b 	mla	r1, sl, fp, r1
 800a6bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a6c0:	f8d9 2000 	ldr.w	r2, [r9]
 800a6c4:	4461      	add	r1, ip
 800a6c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a6ca:	fb0a c20b 	mla	r2, sl, fp, ip
 800a6ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a6d2:	b289      	uxth	r1, r1
 800a6d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a6d8:	4577      	cmp	r7, lr
 800a6da:	f849 1b04 	str.w	r1, [r9], #4
 800a6de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a6e2:	d8e2      	bhi.n	800a6aa <__multiply+0xb2>
 800a6e4:	9a01      	ldr	r2, [sp, #4]
 800a6e6:	f845 c002 	str.w	ip, [r5, r2]
 800a6ea:	9a03      	ldr	r2, [sp, #12]
 800a6ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a6f0:	3304      	adds	r3, #4
 800a6f2:	f1b9 0f00 	cmp.w	r9, #0
 800a6f6:	d020      	beq.n	800a73a <__multiply+0x142>
 800a6f8:	6829      	ldr	r1, [r5, #0]
 800a6fa:	f104 0c14 	add.w	ip, r4, #20
 800a6fe:	46ae      	mov	lr, r5
 800a700:	f04f 0a00 	mov.w	sl, #0
 800a704:	f8bc b000 	ldrh.w	fp, [ip]
 800a708:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a70c:	fb09 220b 	mla	r2, r9, fp, r2
 800a710:	4492      	add	sl, r2
 800a712:	b289      	uxth	r1, r1
 800a714:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a718:	f84e 1b04 	str.w	r1, [lr], #4
 800a71c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a720:	f8be 1000 	ldrh.w	r1, [lr]
 800a724:	0c12      	lsrs	r2, r2, #16
 800a726:	fb09 1102 	mla	r1, r9, r2, r1
 800a72a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a72e:	4567      	cmp	r7, ip
 800a730:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a734:	d8e6      	bhi.n	800a704 <__multiply+0x10c>
 800a736:	9a01      	ldr	r2, [sp, #4]
 800a738:	50a9      	str	r1, [r5, r2]
 800a73a:	3504      	adds	r5, #4
 800a73c:	e79a      	b.n	800a674 <__multiply+0x7c>
 800a73e:	3e01      	subs	r6, #1
 800a740:	e79c      	b.n	800a67c <__multiply+0x84>
 800a742:	bf00      	nop
 800a744:	0800e893 	.word	0x0800e893
 800a748:	0800e8a4 	.word	0x0800e8a4

0800a74c <__pow5mult>:
 800a74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a750:	4615      	mov	r5, r2
 800a752:	f012 0203 	ands.w	r2, r2, #3
 800a756:	4606      	mov	r6, r0
 800a758:	460f      	mov	r7, r1
 800a75a:	d007      	beq.n	800a76c <__pow5mult+0x20>
 800a75c:	4c25      	ldr	r4, [pc, #148]	; (800a7f4 <__pow5mult+0xa8>)
 800a75e:	3a01      	subs	r2, #1
 800a760:	2300      	movs	r3, #0
 800a762:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a766:	f7ff fe9b 	bl	800a4a0 <__multadd>
 800a76a:	4607      	mov	r7, r0
 800a76c:	10ad      	asrs	r5, r5, #2
 800a76e:	d03d      	beq.n	800a7ec <__pow5mult+0xa0>
 800a770:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a772:	b97c      	cbnz	r4, 800a794 <__pow5mult+0x48>
 800a774:	2010      	movs	r0, #16
 800a776:	f7ff fe29 	bl	800a3cc <malloc>
 800a77a:	4602      	mov	r2, r0
 800a77c:	6270      	str	r0, [r6, #36]	; 0x24
 800a77e:	b928      	cbnz	r0, 800a78c <__pow5mult+0x40>
 800a780:	4b1d      	ldr	r3, [pc, #116]	; (800a7f8 <__pow5mult+0xac>)
 800a782:	481e      	ldr	r0, [pc, #120]	; (800a7fc <__pow5mult+0xb0>)
 800a784:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a788:	f000 fc0e 	bl	800afa8 <__assert_func>
 800a78c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a790:	6004      	str	r4, [r0, #0]
 800a792:	60c4      	str	r4, [r0, #12]
 800a794:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a798:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a79c:	b94c      	cbnz	r4, 800a7b2 <__pow5mult+0x66>
 800a79e:	f240 2171 	movw	r1, #625	; 0x271
 800a7a2:	4630      	mov	r0, r6
 800a7a4:	f7ff ff12 	bl	800a5cc <__i2b>
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800a7ae:	4604      	mov	r4, r0
 800a7b0:	6003      	str	r3, [r0, #0]
 800a7b2:	f04f 0900 	mov.w	r9, #0
 800a7b6:	07eb      	lsls	r3, r5, #31
 800a7b8:	d50a      	bpl.n	800a7d0 <__pow5mult+0x84>
 800a7ba:	4639      	mov	r1, r7
 800a7bc:	4622      	mov	r2, r4
 800a7be:	4630      	mov	r0, r6
 800a7c0:	f7ff ff1a 	bl	800a5f8 <__multiply>
 800a7c4:	4639      	mov	r1, r7
 800a7c6:	4680      	mov	r8, r0
 800a7c8:	4630      	mov	r0, r6
 800a7ca:	f7ff fe47 	bl	800a45c <_Bfree>
 800a7ce:	4647      	mov	r7, r8
 800a7d0:	106d      	asrs	r5, r5, #1
 800a7d2:	d00b      	beq.n	800a7ec <__pow5mult+0xa0>
 800a7d4:	6820      	ldr	r0, [r4, #0]
 800a7d6:	b938      	cbnz	r0, 800a7e8 <__pow5mult+0x9c>
 800a7d8:	4622      	mov	r2, r4
 800a7da:	4621      	mov	r1, r4
 800a7dc:	4630      	mov	r0, r6
 800a7de:	f7ff ff0b 	bl	800a5f8 <__multiply>
 800a7e2:	6020      	str	r0, [r4, #0]
 800a7e4:	f8c0 9000 	str.w	r9, [r0]
 800a7e8:	4604      	mov	r4, r0
 800a7ea:	e7e4      	b.n	800a7b6 <__pow5mult+0x6a>
 800a7ec:	4638      	mov	r0, r7
 800a7ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7f2:	bf00      	nop
 800a7f4:	0800e9f0 	.word	0x0800e9f0
 800a7f8:	0800e821 	.word	0x0800e821
 800a7fc:	0800e8a4 	.word	0x0800e8a4

0800a800 <__lshift>:
 800a800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a804:	460c      	mov	r4, r1
 800a806:	6849      	ldr	r1, [r1, #4]
 800a808:	6923      	ldr	r3, [r4, #16]
 800a80a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a80e:	68a3      	ldr	r3, [r4, #8]
 800a810:	4607      	mov	r7, r0
 800a812:	4691      	mov	r9, r2
 800a814:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a818:	f108 0601 	add.w	r6, r8, #1
 800a81c:	42b3      	cmp	r3, r6
 800a81e:	db0b      	blt.n	800a838 <__lshift+0x38>
 800a820:	4638      	mov	r0, r7
 800a822:	f7ff fddb 	bl	800a3dc <_Balloc>
 800a826:	4605      	mov	r5, r0
 800a828:	b948      	cbnz	r0, 800a83e <__lshift+0x3e>
 800a82a:	4602      	mov	r2, r0
 800a82c:	4b2a      	ldr	r3, [pc, #168]	; (800a8d8 <__lshift+0xd8>)
 800a82e:	482b      	ldr	r0, [pc, #172]	; (800a8dc <__lshift+0xdc>)
 800a830:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a834:	f000 fbb8 	bl	800afa8 <__assert_func>
 800a838:	3101      	adds	r1, #1
 800a83a:	005b      	lsls	r3, r3, #1
 800a83c:	e7ee      	b.n	800a81c <__lshift+0x1c>
 800a83e:	2300      	movs	r3, #0
 800a840:	f100 0114 	add.w	r1, r0, #20
 800a844:	f100 0210 	add.w	r2, r0, #16
 800a848:	4618      	mov	r0, r3
 800a84a:	4553      	cmp	r3, sl
 800a84c:	db37      	blt.n	800a8be <__lshift+0xbe>
 800a84e:	6920      	ldr	r0, [r4, #16]
 800a850:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a854:	f104 0314 	add.w	r3, r4, #20
 800a858:	f019 091f 	ands.w	r9, r9, #31
 800a85c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a860:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a864:	d02f      	beq.n	800a8c6 <__lshift+0xc6>
 800a866:	f1c9 0e20 	rsb	lr, r9, #32
 800a86a:	468a      	mov	sl, r1
 800a86c:	f04f 0c00 	mov.w	ip, #0
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	fa02 f209 	lsl.w	r2, r2, r9
 800a876:	ea42 020c 	orr.w	r2, r2, ip
 800a87a:	f84a 2b04 	str.w	r2, [sl], #4
 800a87e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a882:	4298      	cmp	r0, r3
 800a884:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a888:	d8f2      	bhi.n	800a870 <__lshift+0x70>
 800a88a:	1b03      	subs	r3, r0, r4
 800a88c:	3b15      	subs	r3, #21
 800a88e:	f023 0303 	bic.w	r3, r3, #3
 800a892:	3304      	adds	r3, #4
 800a894:	f104 0215 	add.w	r2, r4, #21
 800a898:	4290      	cmp	r0, r2
 800a89a:	bf38      	it	cc
 800a89c:	2304      	movcc	r3, #4
 800a89e:	f841 c003 	str.w	ip, [r1, r3]
 800a8a2:	f1bc 0f00 	cmp.w	ip, #0
 800a8a6:	d001      	beq.n	800a8ac <__lshift+0xac>
 800a8a8:	f108 0602 	add.w	r6, r8, #2
 800a8ac:	3e01      	subs	r6, #1
 800a8ae:	4638      	mov	r0, r7
 800a8b0:	612e      	str	r6, [r5, #16]
 800a8b2:	4621      	mov	r1, r4
 800a8b4:	f7ff fdd2 	bl	800a45c <_Bfree>
 800a8b8:	4628      	mov	r0, r5
 800a8ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8be:	f842 0f04 	str.w	r0, [r2, #4]!
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	e7c1      	b.n	800a84a <__lshift+0x4a>
 800a8c6:	3904      	subs	r1, #4
 800a8c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8cc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a8d0:	4298      	cmp	r0, r3
 800a8d2:	d8f9      	bhi.n	800a8c8 <__lshift+0xc8>
 800a8d4:	e7ea      	b.n	800a8ac <__lshift+0xac>
 800a8d6:	bf00      	nop
 800a8d8:	0800e893 	.word	0x0800e893
 800a8dc:	0800e8a4 	.word	0x0800e8a4

0800a8e0 <__mcmp>:
 800a8e0:	b530      	push	{r4, r5, lr}
 800a8e2:	6902      	ldr	r2, [r0, #16]
 800a8e4:	690c      	ldr	r4, [r1, #16]
 800a8e6:	1b12      	subs	r2, r2, r4
 800a8e8:	d10e      	bne.n	800a908 <__mcmp+0x28>
 800a8ea:	f100 0314 	add.w	r3, r0, #20
 800a8ee:	3114      	adds	r1, #20
 800a8f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a8f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a8f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a8fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a900:	42a5      	cmp	r5, r4
 800a902:	d003      	beq.n	800a90c <__mcmp+0x2c>
 800a904:	d305      	bcc.n	800a912 <__mcmp+0x32>
 800a906:	2201      	movs	r2, #1
 800a908:	4610      	mov	r0, r2
 800a90a:	bd30      	pop	{r4, r5, pc}
 800a90c:	4283      	cmp	r3, r0
 800a90e:	d3f3      	bcc.n	800a8f8 <__mcmp+0x18>
 800a910:	e7fa      	b.n	800a908 <__mcmp+0x28>
 800a912:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a916:	e7f7      	b.n	800a908 <__mcmp+0x28>

0800a918 <__mdiff>:
 800a918:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a91c:	460c      	mov	r4, r1
 800a91e:	4606      	mov	r6, r0
 800a920:	4611      	mov	r1, r2
 800a922:	4620      	mov	r0, r4
 800a924:	4690      	mov	r8, r2
 800a926:	f7ff ffdb 	bl	800a8e0 <__mcmp>
 800a92a:	1e05      	subs	r5, r0, #0
 800a92c:	d110      	bne.n	800a950 <__mdiff+0x38>
 800a92e:	4629      	mov	r1, r5
 800a930:	4630      	mov	r0, r6
 800a932:	f7ff fd53 	bl	800a3dc <_Balloc>
 800a936:	b930      	cbnz	r0, 800a946 <__mdiff+0x2e>
 800a938:	4b3a      	ldr	r3, [pc, #232]	; (800aa24 <__mdiff+0x10c>)
 800a93a:	4602      	mov	r2, r0
 800a93c:	f240 2132 	movw	r1, #562	; 0x232
 800a940:	4839      	ldr	r0, [pc, #228]	; (800aa28 <__mdiff+0x110>)
 800a942:	f000 fb31 	bl	800afa8 <__assert_func>
 800a946:	2301      	movs	r3, #1
 800a948:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a94c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a950:	bfa4      	itt	ge
 800a952:	4643      	movge	r3, r8
 800a954:	46a0      	movge	r8, r4
 800a956:	4630      	mov	r0, r6
 800a958:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a95c:	bfa6      	itte	ge
 800a95e:	461c      	movge	r4, r3
 800a960:	2500      	movge	r5, #0
 800a962:	2501      	movlt	r5, #1
 800a964:	f7ff fd3a 	bl	800a3dc <_Balloc>
 800a968:	b920      	cbnz	r0, 800a974 <__mdiff+0x5c>
 800a96a:	4b2e      	ldr	r3, [pc, #184]	; (800aa24 <__mdiff+0x10c>)
 800a96c:	4602      	mov	r2, r0
 800a96e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a972:	e7e5      	b.n	800a940 <__mdiff+0x28>
 800a974:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a978:	6926      	ldr	r6, [r4, #16]
 800a97a:	60c5      	str	r5, [r0, #12]
 800a97c:	f104 0914 	add.w	r9, r4, #20
 800a980:	f108 0514 	add.w	r5, r8, #20
 800a984:	f100 0e14 	add.w	lr, r0, #20
 800a988:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a98c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a990:	f108 0210 	add.w	r2, r8, #16
 800a994:	46f2      	mov	sl, lr
 800a996:	2100      	movs	r1, #0
 800a998:	f859 3b04 	ldr.w	r3, [r9], #4
 800a99c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a9a0:	fa1f f883 	uxth.w	r8, r3
 800a9a4:	fa11 f18b 	uxtah	r1, r1, fp
 800a9a8:	0c1b      	lsrs	r3, r3, #16
 800a9aa:	eba1 0808 	sub.w	r8, r1, r8
 800a9ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a9b2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a9b6:	fa1f f888 	uxth.w	r8, r8
 800a9ba:	1419      	asrs	r1, r3, #16
 800a9bc:	454e      	cmp	r6, r9
 800a9be:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a9c2:	f84a 3b04 	str.w	r3, [sl], #4
 800a9c6:	d8e7      	bhi.n	800a998 <__mdiff+0x80>
 800a9c8:	1b33      	subs	r3, r6, r4
 800a9ca:	3b15      	subs	r3, #21
 800a9cc:	f023 0303 	bic.w	r3, r3, #3
 800a9d0:	3304      	adds	r3, #4
 800a9d2:	3415      	adds	r4, #21
 800a9d4:	42a6      	cmp	r6, r4
 800a9d6:	bf38      	it	cc
 800a9d8:	2304      	movcc	r3, #4
 800a9da:	441d      	add	r5, r3
 800a9dc:	4473      	add	r3, lr
 800a9de:	469e      	mov	lr, r3
 800a9e0:	462e      	mov	r6, r5
 800a9e2:	4566      	cmp	r6, ip
 800a9e4:	d30e      	bcc.n	800aa04 <__mdiff+0xec>
 800a9e6:	f10c 0203 	add.w	r2, ip, #3
 800a9ea:	1b52      	subs	r2, r2, r5
 800a9ec:	f022 0203 	bic.w	r2, r2, #3
 800a9f0:	3d03      	subs	r5, #3
 800a9f2:	45ac      	cmp	ip, r5
 800a9f4:	bf38      	it	cc
 800a9f6:	2200      	movcc	r2, #0
 800a9f8:	441a      	add	r2, r3
 800a9fa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a9fe:	b17b      	cbz	r3, 800aa20 <__mdiff+0x108>
 800aa00:	6107      	str	r7, [r0, #16]
 800aa02:	e7a3      	b.n	800a94c <__mdiff+0x34>
 800aa04:	f856 8b04 	ldr.w	r8, [r6], #4
 800aa08:	fa11 f288 	uxtah	r2, r1, r8
 800aa0c:	1414      	asrs	r4, r2, #16
 800aa0e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aa12:	b292      	uxth	r2, r2
 800aa14:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aa18:	f84e 2b04 	str.w	r2, [lr], #4
 800aa1c:	1421      	asrs	r1, r4, #16
 800aa1e:	e7e0      	b.n	800a9e2 <__mdiff+0xca>
 800aa20:	3f01      	subs	r7, #1
 800aa22:	e7ea      	b.n	800a9fa <__mdiff+0xe2>
 800aa24:	0800e893 	.word	0x0800e893
 800aa28:	0800e8a4 	.word	0x0800e8a4

0800aa2c <__d2b>:
 800aa2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa30:	4689      	mov	r9, r1
 800aa32:	2101      	movs	r1, #1
 800aa34:	ec57 6b10 	vmov	r6, r7, d0
 800aa38:	4690      	mov	r8, r2
 800aa3a:	f7ff fccf 	bl	800a3dc <_Balloc>
 800aa3e:	4604      	mov	r4, r0
 800aa40:	b930      	cbnz	r0, 800aa50 <__d2b+0x24>
 800aa42:	4602      	mov	r2, r0
 800aa44:	4b25      	ldr	r3, [pc, #148]	; (800aadc <__d2b+0xb0>)
 800aa46:	4826      	ldr	r0, [pc, #152]	; (800aae0 <__d2b+0xb4>)
 800aa48:	f240 310a 	movw	r1, #778	; 0x30a
 800aa4c:	f000 faac 	bl	800afa8 <__assert_func>
 800aa50:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aa54:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aa58:	bb35      	cbnz	r5, 800aaa8 <__d2b+0x7c>
 800aa5a:	2e00      	cmp	r6, #0
 800aa5c:	9301      	str	r3, [sp, #4]
 800aa5e:	d028      	beq.n	800aab2 <__d2b+0x86>
 800aa60:	4668      	mov	r0, sp
 800aa62:	9600      	str	r6, [sp, #0]
 800aa64:	f7ff fd82 	bl	800a56c <__lo0bits>
 800aa68:	9900      	ldr	r1, [sp, #0]
 800aa6a:	b300      	cbz	r0, 800aaae <__d2b+0x82>
 800aa6c:	9a01      	ldr	r2, [sp, #4]
 800aa6e:	f1c0 0320 	rsb	r3, r0, #32
 800aa72:	fa02 f303 	lsl.w	r3, r2, r3
 800aa76:	430b      	orrs	r3, r1
 800aa78:	40c2      	lsrs	r2, r0
 800aa7a:	6163      	str	r3, [r4, #20]
 800aa7c:	9201      	str	r2, [sp, #4]
 800aa7e:	9b01      	ldr	r3, [sp, #4]
 800aa80:	61a3      	str	r3, [r4, #24]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	bf14      	ite	ne
 800aa86:	2202      	movne	r2, #2
 800aa88:	2201      	moveq	r2, #1
 800aa8a:	6122      	str	r2, [r4, #16]
 800aa8c:	b1d5      	cbz	r5, 800aac4 <__d2b+0x98>
 800aa8e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aa92:	4405      	add	r5, r0
 800aa94:	f8c9 5000 	str.w	r5, [r9]
 800aa98:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aa9c:	f8c8 0000 	str.w	r0, [r8]
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	b003      	add	sp, #12
 800aaa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aaa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aaac:	e7d5      	b.n	800aa5a <__d2b+0x2e>
 800aaae:	6161      	str	r1, [r4, #20]
 800aab0:	e7e5      	b.n	800aa7e <__d2b+0x52>
 800aab2:	a801      	add	r0, sp, #4
 800aab4:	f7ff fd5a 	bl	800a56c <__lo0bits>
 800aab8:	9b01      	ldr	r3, [sp, #4]
 800aaba:	6163      	str	r3, [r4, #20]
 800aabc:	2201      	movs	r2, #1
 800aabe:	6122      	str	r2, [r4, #16]
 800aac0:	3020      	adds	r0, #32
 800aac2:	e7e3      	b.n	800aa8c <__d2b+0x60>
 800aac4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aac8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aacc:	f8c9 0000 	str.w	r0, [r9]
 800aad0:	6918      	ldr	r0, [r3, #16]
 800aad2:	f7ff fd2b 	bl	800a52c <__hi0bits>
 800aad6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aada:	e7df      	b.n	800aa9c <__d2b+0x70>
 800aadc:	0800e893 	.word	0x0800e893
 800aae0:	0800e8a4 	.word	0x0800e8a4

0800aae4 <_calloc_r>:
 800aae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aae6:	fba1 2402 	umull	r2, r4, r1, r2
 800aaea:	b94c      	cbnz	r4, 800ab00 <_calloc_r+0x1c>
 800aaec:	4611      	mov	r1, r2
 800aaee:	9201      	str	r2, [sp, #4]
 800aaf0:	f000 f87a 	bl	800abe8 <_malloc_r>
 800aaf4:	9a01      	ldr	r2, [sp, #4]
 800aaf6:	4605      	mov	r5, r0
 800aaf8:	b930      	cbnz	r0, 800ab08 <_calloc_r+0x24>
 800aafa:	4628      	mov	r0, r5
 800aafc:	b003      	add	sp, #12
 800aafe:	bd30      	pop	{r4, r5, pc}
 800ab00:	220c      	movs	r2, #12
 800ab02:	6002      	str	r2, [r0, #0]
 800ab04:	2500      	movs	r5, #0
 800ab06:	e7f8      	b.n	800aafa <_calloc_r+0x16>
 800ab08:	4621      	mov	r1, r4
 800ab0a:	f7fe f94f 	bl	8008dac <memset>
 800ab0e:	e7f4      	b.n	800aafa <_calloc_r+0x16>

0800ab10 <_free_r>:
 800ab10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab12:	2900      	cmp	r1, #0
 800ab14:	d044      	beq.n	800aba0 <_free_r+0x90>
 800ab16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab1a:	9001      	str	r0, [sp, #4]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	f1a1 0404 	sub.w	r4, r1, #4
 800ab22:	bfb8      	it	lt
 800ab24:	18e4      	addlt	r4, r4, r3
 800ab26:	f000 fa9b 	bl	800b060 <__malloc_lock>
 800ab2a:	4a1e      	ldr	r2, [pc, #120]	; (800aba4 <_free_r+0x94>)
 800ab2c:	9801      	ldr	r0, [sp, #4]
 800ab2e:	6813      	ldr	r3, [r2, #0]
 800ab30:	b933      	cbnz	r3, 800ab40 <_free_r+0x30>
 800ab32:	6063      	str	r3, [r4, #4]
 800ab34:	6014      	str	r4, [r2, #0]
 800ab36:	b003      	add	sp, #12
 800ab38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab3c:	f000 ba96 	b.w	800b06c <__malloc_unlock>
 800ab40:	42a3      	cmp	r3, r4
 800ab42:	d908      	bls.n	800ab56 <_free_r+0x46>
 800ab44:	6825      	ldr	r5, [r4, #0]
 800ab46:	1961      	adds	r1, r4, r5
 800ab48:	428b      	cmp	r3, r1
 800ab4a:	bf01      	itttt	eq
 800ab4c:	6819      	ldreq	r1, [r3, #0]
 800ab4e:	685b      	ldreq	r3, [r3, #4]
 800ab50:	1949      	addeq	r1, r1, r5
 800ab52:	6021      	streq	r1, [r4, #0]
 800ab54:	e7ed      	b.n	800ab32 <_free_r+0x22>
 800ab56:	461a      	mov	r2, r3
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	b10b      	cbz	r3, 800ab60 <_free_r+0x50>
 800ab5c:	42a3      	cmp	r3, r4
 800ab5e:	d9fa      	bls.n	800ab56 <_free_r+0x46>
 800ab60:	6811      	ldr	r1, [r2, #0]
 800ab62:	1855      	adds	r5, r2, r1
 800ab64:	42a5      	cmp	r5, r4
 800ab66:	d10b      	bne.n	800ab80 <_free_r+0x70>
 800ab68:	6824      	ldr	r4, [r4, #0]
 800ab6a:	4421      	add	r1, r4
 800ab6c:	1854      	adds	r4, r2, r1
 800ab6e:	42a3      	cmp	r3, r4
 800ab70:	6011      	str	r1, [r2, #0]
 800ab72:	d1e0      	bne.n	800ab36 <_free_r+0x26>
 800ab74:	681c      	ldr	r4, [r3, #0]
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	6053      	str	r3, [r2, #4]
 800ab7a:	4421      	add	r1, r4
 800ab7c:	6011      	str	r1, [r2, #0]
 800ab7e:	e7da      	b.n	800ab36 <_free_r+0x26>
 800ab80:	d902      	bls.n	800ab88 <_free_r+0x78>
 800ab82:	230c      	movs	r3, #12
 800ab84:	6003      	str	r3, [r0, #0]
 800ab86:	e7d6      	b.n	800ab36 <_free_r+0x26>
 800ab88:	6825      	ldr	r5, [r4, #0]
 800ab8a:	1961      	adds	r1, r4, r5
 800ab8c:	428b      	cmp	r3, r1
 800ab8e:	bf04      	itt	eq
 800ab90:	6819      	ldreq	r1, [r3, #0]
 800ab92:	685b      	ldreq	r3, [r3, #4]
 800ab94:	6063      	str	r3, [r4, #4]
 800ab96:	bf04      	itt	eq
 800ab98:	1949      	addeq	r1, r1, r5
 800ab9a:	6021      	streq	r1, [r4, #0]
 800ab9c:	6054      	str	r4, [r2, #4]
 800ab9e:	e7ca      	b.n	800ab36 <_free_r+0x26>
 800aba0:	b003      	add	sp, #12
 800aba2:	bd30      	pop	{r4, r5, pc}
 800aba4:	200006a8 	.word	0x200006a8

0800aba8 <sbrk_aligned>:
 800aba8:	b570      	push	{r4, r5, r6, lr}
 800abaa:	4e0e      	ldr	r6, [pc, #56]	; (800abe4 <sbrk_aligned+0x3c>)
 800abac:	460c      	mov	r4, r1
 800abae:	6831      	ldr	r1, [r6, #0]
 800abb0:	4605      	mov	r5, r0
 800abb2:	b911      	cbnz	r1, 800abba <sbrk_aligned+0x12>
 800abb4:	f000 f9e8 	bl	800af88 <_sbrk_r>
 800abb8:	6030      	str	r0, [r6, #0]
 800abba:	4621      	mov	r1, r4
 800abbc:	4628      	mov	r0, r5
 800abbe:	f000 f9e3 	bl	800af88 <_sbrk_r>
 800abc2:	1c43      	adds	r3, r0, #1
 800abc4:	d00a      	beq.n	800abdc <sbrk_aligned+0x34>
 800abc6:	1cc4      	adds	r4, r0, #3
 800abc8:	f024 0403 	bic.w	r4, r4, #3
 800abcc:	42a0      	cmp	r0, r4
 800abce:	d007      	beq.n	800abe0 <sbrk_aligned+0x38>
 800abd0:	1a21      	subs	r1, r4, r0
 800abd2:	4628      	mov	r0, r5
 800abd4:	f000 f9d8 	bl	800af88 <_sbrk_r>
 800abd8:	3001      	adds	r0, #1
 800abda:	d101      	bne.n	800abe0 <sbrk_aligned+0x38>
 800abdc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800abe0:	4620      	mov	r0, r4
 800abe2:	bd70      	pop	{r4, r5, r6, pc}
 800abe4:	200006ac 	.word	0x200006ac

0800abe8 <_malloc_r>:
 800abe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abec:	1ccd      	adds	r5, r1, #3
 800abee:	f025 0503 	bic.w	r5, r5, #3
 800abf2:	3508      	adds	r5, #8
 800abf4:	2d0c      	cmp	r5, #12
 800abf6:	bf38      	it	cc
 800abf8:	250c      	movcc	r5, #12
 800abfa:	2d00      	cmp	r5, #0
 800abfc:	4607      	mov	r7, r0
 800abfe:	db01      	blt.n	800ac04 <_malloc_r+0x1c>
 800ac00:	42a9      	cmp	r1, r5
 800ac02:	d905      	bls.n	800ac10 <_malloc_r+0x28>
 800ac04:	230c      	movs	r3, #12
 800ac06:	603b      	str	r3, [r7, #0]
 800ac08:	2600      	movs	r6, #0
 800ac0a:	4630      	mov	r0, r6
 800ac0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac10:	4e2e      	ldr	r6, [pc, #184]	; (800accc <_malloc_r+0xe4>)
 800ac12:	f000 fa25 	bl	800b060 <__malloc_lock>
 800ac16:	6833      	ldr	r3, [r6, #0]
 800ac18:	461c      	mov	r4, r3
 800ac1a:	bb34      	cbnz	r4, 800ac6a <_malloc_r+0x82>
 800ac1c:	4629      	mov	r1, r5
 800ac1e:	4638      	mov	r0, r7
 800ac20:	f7ff ffc2 	bl	800aba8 <sbrk_aligned>
 800ac24:	1c43      	adds	r3, r0, #1
 800ac26:	4604      	mov	r4, r0
 800ac28:	d14d      	bne.n	800acc6 <_malloc_r+0xde>
 800ac2a:	6834      	ldr	r4, [r6, #0]
 800ac2c:	4626      	mov	r6, r4
 800ac2e:	2e00      	cmp	r6, #0
 800ac30:	d140      	bne.n	800acb4 <_malloc_r+0xcc>
 800ac32:	6823      	ldr	r3, [r4, #0]
 800ac34:	4631      	mov	r1, r6
 800ac36:	4638      	mov	r0, r7
 800ac38:	eb04 0803 	add.w	r8, r4, r3
 800ac3c:	f000 f9a4 	bl	800af88 <_sbrk_r>
 800ac40:	4580      	cmp	r8, r0
 800ac42:	d13a      	bne.n	800acba <_malloc_r+0xd2>
 800ac44:	6821      	ldr	r1, [r4, #0]
 800ac46:	3503      	adds	r5, #3
 800ac48:	1a6d      	subs	r5, r5, r1
 800ac4a:	f025 0503 	bic.w	r5, r5, #3
 800ac4e:	3508      	adds	r5, #8
 800ac50:	2d0c      	cmp	r5, #12
 800ac52:	bf38      	it	cc
 800ac54:	250c      	movcc	r5, #12
 800ac56:	4629      	mov	r1, r5
 800ac58:	4638      	mov	r0, r7
 800ac5a:	f7ff ffa5 	bl	800aba8 <sbrk_aligned>
 800ac5e:	3001      	adds	r0, #1
 800ac60:	d02b      	beq.n	800acba <_malloc_r+0xd2>
 800ac62:	6823      	ldr	r3, [r4, #0]
 800ac64:	442b      	add	r3, r5
 800ac66:	6023      	str	r3, [r4, #0]
 800ac68:	e00e      	b.n	800ac88 <_malloc_r+0xa0>
 800ac6a:	6822      	ldr	r2, [r4, #0]
 800ac6c:	1b52      	subs	r2, r2, r5
 800ac6e:	d41e      	bmi.n	800acae <_malloc_r+0xc6>
 800ac70:	2a0b      	cmp	r2, #11
 800ac72:	d916      	bls.n	800aca2 <_malloc_r+0xba>
 800ac74:	1961      	adds	r1, r4, r5
 800ac76:	42a3      	cmp	r3, r4
 800ac78:	6025      	str	r5, [r4, #0]
 800ac7a:	bf18      	it	ne
 800ac7c:	6059      	strne	r1, [r3, #4]
 800ac7e:	6863      	ldr	r3, [r4, #4]
 800ac80:	bf08      	it	eq
 800ac82:	6031      	streq	r1, [r6, #0]
 800ac84:	5162      	str	r2, [r4, r5]
 800ac86:	604b      	str	r3, [r1, #4]
 800ac88:	4638      	mov	r0, r7
 800ac8a:	f104 060b 	add.w	r6, r4, #11
 800ac8e:	f000 f9ed 	bl	800b06c <__malloc_unlock>
 800ac92:	f026 0607 	bic.w	r6, r6, #7
 800ac96:	1d23      	adds	r3, r4, #4
 800ac98:	1af2      	subs	r2, r6, r3
 800ac9a:	d0b6      	beq.n	800ac0a <_malloc_r+0x22>
 800ac9c:	1b9b      	subs	r3, r3, r6
 800ac9e:	50a3      	str	r3, [r4, r2]
 800aca0:	e7b3      	b.n	800ac0a <_malloc_r+0x22>
 800aca2:	6862      	ldr	r2, [r4, #4]
 800aca4:	42a3      	cmp	r3, r4
 800aca6:	bf0c      	ite	eq
 800aca8:	6032      	streq	r2, [r6, #0]
 800acaa:	605a      	strne	r2, [r3, #4]
 800acac:	e7ec      	b.n	800ac88 <_malloc_r+0xa0>
 800acae:	4623      	mov	r3, r4
 800acb0:	6864      	ldr	r4, [r4, #4]
 800acb2:	e7b2      	b.n	800ac1a <_malloc_r+0x32>
 800acb4:	4634      	mov	r4, r6
 800acb6:	6876      	ldr	r6, [r6, #4]
 800acb8:	e7b9      	b.n	800ac2e <_malloc_r+0x46>
 800acba:	230c      	movs	r3, #12
 800acbc:	603b      	str	r3, [r7, #0]
 800acbe:	4638      	mov	r0, r7
 800acc0:	f000 f9d4 	bl	800b06c <__malloc_unlock>
 800acc4:	e7a1      	b.n	800ac0a <_malloc_r+0x22>
 800acc6:	6025      	str	r5, [r4, #0]
 800acc8:	e7de      	b.n	800ac88 <_malloc_r+0xa0>
 800acca:	bf00      	nop
 800accc:	200006a8 	.word	0x200006a8

0800acd0 <__ssputs_r>:
 800acd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acd4:	688e      	ldr	r6, [r1, #8]
 800acd6:	429e      	cmp	r6, r3
 800acd8:	4682      	mov	sl, r0
 800acda:	460c      	mov	r4, r1
 800acdc:	4690      	mov	r8, r2
 800acde:	461f      	mov	r7, r3
 800ace0:	d838      	bhi.n	800ad54 <__ssputs_r+0x84>
 800ace2:	898a      	ldrh	r2, [r1, #12]
 800ace4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ace8:	d032      	beq.n	800ad50 <__ssputs_r+0x80>
 800acea:	6825      	ldr	r5, [r4, #0]
 800acec:	6909      	ldr	r1, [r1, #16]
 800acee:	eba5 0901 	sub.w	r9, r5, r1
 800acf2:	6965      	ldr	r5, [r4, #20]
 800acf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800acfc:	3301      	adds	r3, #1
 800acfe:	444b      	add	r3, r9
 800ad00:	106d      	asrs	r5, r5, #1
 800ad02:	429d      	cmp	r5, r3
 800ad04:	bf38      	it	cc
 800ad06:	461d      	movcc	r5, r3
 800ad08:	0553      	lsls	r3, r2, #21
 800ad0a:	d531      	bpl.n	800ad70 <__ssputs_r+0xa0>
 800ad0c:	4629      	mov	r1, r5
 800ad0e:	f7ff ff6b 	bl	800abe8 <_malloc_r>
 800ad12:	4606      	mov	r6, r0
 800ad14:	b950      	cbnz	r0, 800ad2c <__ssputs_r+0x5c>
 800ad16:	230c      	movs	r3, #12
 800ad18:	f8ca 3000 	str.w	r3, [sl]
 800ad1c:	89a3      	ldrh	r3, [r4, #12]
 800ad1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad22:	81a3      	strh	r3, [r4, #12]
 800ad24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad2c:	6921      	ldr	r1, [r4, #16]
 800ad2e:	464a      	mov	r2, r9
 800ad30:	f7fe f82e 	bl	8008d90 <memcpy>
 800ad34:	89a3      	ldrh	r3, [r4, #12]
 800ad36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad3e:	81a3      	strh	r3, [r4, #12]
 800ad40:	6126      	str	r6, [r4, #16]
 800ad42:	6165      	str	r5, [r4, #20]
 800ad44:	444e      	add	r6, r9
 800ad46:	eba5 0509 	sub.w	r5, r5, r9
 800ad4a:	6026      	str	r6, [r4, #0]
 800ad4c:	60a5      	str	r5, [r4, #8]
 800ad4e:	463e      	mov	r6, r7
 800ad50:	42be      	cmp	r6, r7
 800ad52:	d900      	bls.n	800ad56 <__ssputs_r+0x86>
 800ad54:	463e      	mov	r6, r7
 800ad56:	6820      	ldr	r0, [r4, #0]
 800ad58:	4632      	mov	r2, r6
 800ad5a:	4641      	mov	r1, r8
 800ad5c:	f000 f966 	bl	800b02c <memmove>
 800ad60:	68a3      	ldr	r3, [r4, #8]
 800ad62:	1b9b      	subs	r3, r3, r6
 800ad64:	60a3      	str	r3, [r4, #8]
 800ad66:	6823      	ldr	r3, [r4, #0]
 800ad68:	4433      	add	r3, r6
 800ad6a:	6023      	str	r3, [r4, #0]
 800ad6c:	2000      	movs	r0, #0
 800ad6e:	e7db      	b.n	800ad28 <__ssputs_r+0x58>
 800ad70:	462a      	mov	r2, r5
 800ad72:	f000 f981 	bl	800b078 <_realloc_r>
 800ad76:	4606      	mov	r6, r0
 800ad78:	2800      	cmp	r0, #0
 800ad7a:	d1e1      	bne.n	800ad40 <__ssputs_r+0x70>
 800ad7c:	6921      	ldr	r1, [r4, #16]
 800ad7e:	4650      	mov	r0, sl
 800ad80:	f7ff fec6 	bl	800ab10 <_free_r>
 800ad84:	e7c7      	b.n	800ad16 <__ssputs_r+0x46>
	...

0800ad88 <_svfiprintf_r>:
 800ad88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad8c:	4698      	mov	r8, r3
 800ad8e:	898b      	ldrh	r3, [r1, #12]
 800ad90:	061b      	lsls	r3, r3, #24
 800ad92:	b09d      	sub	sp, #116	; 0x74
 800ad94:	4607      	mov	r7, r0
 800ad96:	460d      	mov	r5, r1
 800ad98:	4614      	mov	r4, r2
 800ad9a:	d50e      	bpl.n	800adba <_svfiprintf_r+0x32>
 800ad9c:	690b      	ldr	r3, [r1, #16]
 800ad9e:	b963      	cbnz	r3, 800adba <_svfiprintf_r+0x32>
 800ada0:	2140      	movs	r1, #64	; 0x40
 800ada2:	f7ff ff21 	bl	800abe8 <_malloc_r>
 800ada6:	6028      	str	r0, [r5, #0]
 800ada8:	6128      	str	r0, [r5, #16]
 800adaa:	b920      	cbnz	r0, 800adb6 <_svfiprintf_r+0x2e>
 800adac:	230c      	movs	r3, #12
 800adae:	603b      	str	r3, [r7, #0]
 800adb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800adb4:	e0d1      	b.n	800af5a <_svfiprintf_r+0x1d2>
 800adb6:	2340      	movs	r3, #64	; 0x40
 800adb8:	616b      	str	r3, [r5, #20]
 800adba:	2300      	movs	r3, #0
 800adbc:	9309      	str	r3, [sp, #36]	; 0x24
 800adbe:	2320      	movs	r3, #32
 800adc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800adc4:	f8cd 800c 	str.w	r8, [sp, #12]
 800adc8:	2330      	movs	r3, #48	; 0x30
 800adca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800af74 <_svfiprintf_r+0x1ec>
 800adce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800add2:	f04f 0901 	mov.w	r9, #1
 800add6:	4623      	mov	r3, r4
 800add8:	469a      	mov	sl, r3
 800adda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adde:	b10a      	cbz	r2, 800ade4 <_svfiprintf_r+0x5c>
 800ade0:	2a25      	cmp	r2, #37	; 0x25
 800ade2:	d1f9      	bne.n	800add8 <_svfiprintf_r+0x50>
 800ade4:	ebba 0b04 	subs.w	fp, sl, r4
 800ade8:	d00b      	beq.n	800ae02 <_svfiprintf_r+0x7a>
 800adea:	465b      	mov	r3, fp
 800adec:	4622      	mov	r2, r4
 800adee:	4629      	mov	r1, r5
 800adf0:	4638      	mov	r0, r7
 800adf2:	f7ff ff6d 	bl	800acd0 <__ssputs_r>
 800adf6:	3001      	adds	r0, #1
 800adf8:	f000 80aa 	beq.w	800af50 <_svfiprintf_r+0x1c8>
 800adfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adfe:	445a      	add	r2, fp
 800ae00:	9209      	str	r2, [sp, #36]	; 0x24
 800ae02:	f89a 3000 	ldrb.w	r3, [sl]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	f000 80a2 	beq.w	800af50 <_svfiprintf_r+0x1c8>
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae16:	f10a 0a01 	add.w	sl, sl, #1
 800ae1a:	9304      	str	r3, [sp, #16]
 800ae1c:	9307      	str	r3, [sp, #28]
 800ae1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae22:	931a      	str	r3, [sp, #104]	; 0x68
 800ae24:	4654      	mov	r4, sl
 800ae26:	2205      	movs	r2, #5
 800ae28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae2c:	4851      	ldr	r0, [pc, #324]	; (800af74 <_svfiprintf_r+0x1ec>)
 800ae2e:	f7f5 f9d7 	bl	80001e0 <memchr>
 800ae32:	9a04      	ldr	r2, [sp, #16]
 800ae34:	b9d8      	cbnz	r0, 800ae6e <_svfiprintf_r+0xe6>
 800ae36:	06d0      	lsls	r0, r2, #27
 800ae38:	bf44      	itt	mi
 800ae3a:	2320      	movmi	r3, #32
 800ae3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae40:	0711      	lsls	r1, r2, #28
 800ae42:	bf44      	itt	mi
 800ae44:	232b      	movmi	r3, #43	; 0x2b
 800ae46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae4a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae4e:	2b2a      	cmp	r3, #42	; 0x2a
 800ae50:	d015      	beq.n	800ae7e <_svfiprintf_r+0xf6>
 800ae52:	9a07      	ldr	r2, [sp, #28]
 800ae54:	4654      	mov	r4, sl
 800ae56:	2000      	movs	r0, #0
 800ae58:	f04f 0c0a 	mov.w	ip, #10
 800ae5c:	4621      	mov	r1, r4
 800ae5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae62:	3b30      	subs	r3, #48	; 0x30
 800ae64:	2b09      	cmp	r3, #9
 800ae66:	d94e      	bls.n	800af06 <_svfiprintf_r+0x17e>
 800ae68:	b1b0      	cbz	r0, 800ae98 <_svfiprintf_r+0x110>
 800ae6a:	9207      	str	r2, [sp, #28]
 800ae6c:	e014      	b.n	800ae98 <_svfiprintf_r+0x110>
 800ae6e:	eba0 0308 	sub.w	r3, r0, r8
 800ae72:	fa09 f303 	lsl.w	r3, r9, r3
 800ae76:	4313      	orrs	r3, r2
 800ae78:	9304      	str	r3, [sp, #16]
 800ae7a:	46a2      	mov	sl, r4
 800ae7c:	e7d2      	b.n	800ae24 <_svfiprintf_r+0x9c>
 800ae7e:	9b03      	ldr	r3, [sp, #12]
 800ae80:	1d19      	adds	r1, r3, #4
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	9103      	str	r1, [sp, #12]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	bfbb      	ittet	lt
 800ae8a:	425b      	neglt	r3, r3
 800ae8c:	f042 0202 	orrlt.w	r2, r2, #2
 800ae90:	9307      	strge	r3, [sp, #28]
 800ae92:	9307      	strlt	r3, [sp, #28]
 800ae94:	bfb8      	it	lt
 800ae96:	9204      	strlt	r2, [sp, #16]
 800ae98:	7823      	ldrb	r3, [r4, #0]
 800ae9a:	2b2e      	cmp	r3, #46	; 0x2e
 800ae9c:	d10c      	bne.n	800aeb8 <_svfiprintf_r+0x130>
 800ae9e:	7863      	ldrb	r3, [r4, #1]
 800aea0:	2b2a      	cmp	r3, #42	; 0x2a
 800aea2:	d135      	bne.n	800af10 <_svfiprintf_r+0x188>
 800aea4:	9b03      	ldr	r3, [sp, #12]
 800aea6:	1d1a      	adds	r2, r3, #4
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	9203      	str	r2, [sp, #12]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	bfb8      	it	lt
 800aeb0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800aeb4:	3402      	adds	r4, #2
 800aeb6:	9305      	str	r3, [sp, #20]
 800aeb8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800af84 <_svfiprintf_r+0x1fc>
 800aebc:	7821      	ldrb	r1, [r4, #0]
 800aebe:	2203      	movs	r2, #3
 800aec0:	4650      	mov	r0, sl
 800aec2:	f7f5 f98d 	bl	80001e0 <memchr>
 800aec6:	b140      	cbz	r0, 800aeda <_svfiprintf_r+0x152>
 800aec8:	2340      	movs	r3, #64	; 0x40
 800aeca:	eba0 000a 	sub.w	r0, r0, sl
 800aece:	fa03 f000 	lsl.w	r0, r3, r0
 800aed2:	9b04      	ldr	r3, [sp, #16]
 800aed4:	4303      	orrs	r3, r0
 800aed6:	3401      	adds	r4, #1
 800aed8:	9304      	str	r3, [sp, #16]
 800aeda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aede:	4826      	ldr	r0, [pc, #152]	; (800af78 <_svfiprintf_r+0x1f0>)
 800aee0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aee4:	2206      	movs	r2, #6
 800aee6:	f7f5 f97b 	bl	80001e0 <memchr>
 800aeea:	2800      	cmp	r0, #0
 800aeec:	d038      	beq.n	800af60 <_svfiprintf_r+0x1d8>
 800aeee:	4b23      	ldr	r3, [pc, #140]	; (800af7c <_svfiprintf_r+0x1f4>)
 800aef0:	bb1b      	cbnz	r3, 800af3a <_svfiprintf_r+0x1b2>
 800aef2:	9b03      	ldr	r3, [sp, #12]
 800aef4:	3307      	adds	r3, #7
 800aef6:	f023 0307 	bic.w	r3, r3, #7
 800aefa:	3308      	adds	r3, #8
 800aefc:	9303      	str	r3, [sp, #12]
 800aefe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af00:	4433      	add	r3, r6
 800af02:	9309      	str	r3, [sp, #36]	; 0x24
 800af04:	e767      	b.n	800add6 <_svfiprintf_r+0x4e>
 800af06:	fb0c 3202 	mla	r2, ip, r2, r3
 800af0a:	460c      	mov	r4, r1
 800af0c:	2001      	movs	r0, #1
 800af0e:	e7a5      	b.n	800ae5c <_svfiprintf_r+0xd4>
 800af10:	2300      	movs	r3, #0
 800af12:	3401      	adds	r4, #1
 800af14:	9305      	str	r3, [sp, #20]
 800af16:	4619      	mov	r1, r3
 800af18:	f04f 0c0a 	mov.w	ip, #10
 800af1c:	4620      	mov	r0, r4
 800af1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af22:	3a30      	subs	r2, #48	; 0x30
 800af24:	2a09      	cmp	r2, #9
 800af26:	d903      	bls.n	800af30 <_svfiprintf_r+0x1a8>
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d0c5      	beq.n	800aeb8 <_svfiprintf_r+0x130>
 800af2c:	9105      	str	r1, [sp, #20]
 800af2e:	e7c3      	b.n	800aeb8 <_svfiprintf_r+0x130>
 800af30:	fb0c 2101 	mla	r1, ip, r1, r2
 800af34:	4604      	mov	r4, r0
 800af36:	2301      	movs	r3, #1
 800af38:	e7f0      	b.n	800af1c <_svfiprintf_r+0x194>
 800af3a:	ab03      	add	r3, sp, #12
 800af3c:	9300      	str	r3, [sp, #0]
 800af3e:	462a      	mov	r2, r5
 800af40:	4b0f      	ldr	r3, [pc, #60]	; (800af80 <_svfiprintf_r+0x1f8>)
 800af42:	a904      	add	r1, sp, #16
 800af44:	4638      	mov	r0, r7
 800af46:	f7fd ffd9 	bl	8008efc <_printf_float>
 800af4a:	1c42      	adds	r2, r0, #1
 800af4c:	4606      	mov	r6, r0
 800af4e:	d1d6      	bne.n	800aefe <_svfiprintf_r+0x176>
 800af50:	89ab      	ldrh	r3, [r5, #12]
 800af52:	065b      	lsls	r3, r3, #25
 800af54:	f53f af2c 	bmi.w	800adb0 <_svfiprintf_r+0x28>
 800af58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af5a:	b01d      	add	sp, #116	; 0x74
 800af5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af60:	ab03      	add	r3, sp, #12
 800af62:	9300      	str	r3, [sp, #0]
 800af64:	462a      	mov	r2, r5
 800af66:	4b06      	ldr	r3, [pc, #24]	; (800af80 <_svfiprintf_r+0x1f8>)
 800af68:	a904      	add	r1, sp, #16
 800af6a:	4638      	mov	r0, r7
 800af6c:	f7fe fa6a 	bl	8009444 <_printf_i>
 800af70:	e7eb      	b.n	800af4a <_svfiprintf_r+0x1c2>
 800af72:	bf00      	nop
 800af74:	0800e9fc 	.word	0x0800e9fc
 800af78:	0800ea06 	.word	0x0800ea06
 800af7c:	08008efd 	.word	0x08008efd
 800af80:	0800acd1 	.word	0x0800acd1
 800af84:	0800ea02 	.word	0x0800ea02

0800af88 <_sbrk_r>:
 800af88:	b538      	push	{r3, r4, r5, lr}
 800af8a:	4d06      	ldr	r5, [pc, #24]	; (800afa4 <_sbrk_r+0x1c>)
 800af8c:	2300      	movs	r3, #0
 800af8e:	4604      	mov	r4, r0
 800af90:	4608      	mov	r0, r1
 800af92:	602b      	str	r3, [r5, #0]
 800af94:	f7f8 fdb8 	bl	8003b08 <_sbrk>
 800af98:	1c43      	adds	r3, r0, #1
 800af9a:	d102      	bne.n	800afa2 <_sbrk_r+0x1a>
 800af9c:	682b      	ldr	r3, [r5, #0]
 800af9e:	b103      	cbz	r3, 800afa2 <_sbrk_r+0x1a>
 800afa0:	6023      	str	r3, [r4, #0]
 800afa2:	bd38      	pop	{r3, r4, r5, pc}
 800afa4:	200006b0 	.word	0x200006b0

0800afa8 <__assert_func>:
 800afa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800afaa:	4614      	mov	r4, r2
 800afac:	461a      	mov	r2, r3
 800afae:	4b09      	ldr	r3, [pc, #36]	; (800afd4 <__assert_func+0x2c>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4605      	mov	r5, r0
 800afb4:	68d8      	ldr	r0, [r3, #12]
 800afb6:	b14c      	cbz	r4, 800afcc <__assert_func+0x24>
 800afb8:	4b07      	ldr	r3, [pc, #28]	; (800afd8 <__assert_func+0x30>)
 800afba:	9100      	str	r1, [sp, #0]
 800afbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800afc0:	4906      	ldr	r1, [pc, #24]	; (800afdc <__assert_func+0x34>)
 800afc2:	462b      	mov	r3, r5
 800afc4:	f000 f80e 	bl	800afe4 <fiprintf>
 800afc8:	f000 faac 	bl	800b524 <abort>
 800afcc:	4b04      	ldr	r3, [pc, #16]	; (800afe0 <__assert_func+0x38>)
 800afce:	461c      	mov	r4, r3
 800afd0:	e7f3      	b.n	800afba <__assert_func+0x12>
 800afd2:	bf00      	nop
 800afd4:	20000014 	.word	0x20000014
 800afd8:	0800ea0d 	.word	0x0800ea0d
 800afdc:	0800ea1a 	.word	0x0800ea1a
 800afe0:	0800ea48 	.word	0x0800ea48

0800afe4 <fiprintf>:
 800afe4:	b40e      	push	{r1, r2, r3}
 800afe6:	b503      	push	{r0, r1, lr}
 800afe8:	4601      	mov	r1, r0
 800afea:	ab03      	add	r3, sp, #12
 800afec:	4805      	ldr	r0, [pc, #20]	; (800b004 <fiprintf+0x20>)
 800afee:	f853 2b04 	ldr.w	r2, [r3], #4
 800aff2:	6800      	ldr	r0, [r0, #0]
 800aff4:	9301      	str	r3, [sp, #4]
 800aff6:	f000 f897 	bl	800b128 <_vfiprintf_r>
 800affa:	b002      	add	sp, #8
 800affc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b000:	b003      	add	sp, #12
 800b002:	4770      	bx	lr
 800b004:	20000014 	.word	0x20000014

0800b008 <__ascii_mbtowc>:
 800b008:	b082      	sub	sp, #8
 800b00a:	b901      	cbnz	r1, 800b00e <__ascii_mbtowc+0x6>
 800b00c:	a901      	add	r1, sp, #4
 800b00e:	b142      	cbz	r2, 800b022 <__ascii_mbtowc+0x1a>
 800b010:	b14b      	cbz	r3, 800b026 <__ascii_mbtowc+0x1e>
 800b012:	7813      	ldrb	r3, [r2, #0]
 800b014:	600b      	str	r3, [r1, #0]
 800b016:	7812      	ldrb	r2, [r2, #0]
 800b018:	1e10      	subs	r0, r2, #0
 800b01a:	bf18      	it	ne
 800b01c:	2001      	movne	r0, #1
 800b01e:	b002      	add	sp, #8
 800b020:	4770      	bx	lr
 800b022:	4610      	mov	r0, r2
 800b024:	e7fb      	b.n	800b01e <__ascii_mbtowc+0x16>
 800b026:	f06f 0001 	mvn.w	r0, #1
 800b02a:	e7f8      	b.n	800b01e <__ascii_mbtowc+0x16>

0800b02c <memmove>:
 800b02c:	4288      	cmp	r0, r1
 800b02e:	b510      	push	{r4, lr}
 800b030:	eb01 0402 	add.w	r4, r1, r2
 800b034:	d902      	bls.n	800b03c <memmove+0x10>
 800b036:	4284      	cmp	r4, r0
 800b038:	4623      	mov	r3, r4
 800b03a:	d807      	bhi.n	800b04c <memmove+0x20>
 800b03c:	1e43      	subs	r3, r0, #1
 800b03e:	42a1      	cmp	r1, r4
 800b040:	d008      	beq.n	800b054 <memmove+0x28>
 800b042:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b046:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b04a:	e7f8      	b.n	800b03e <memmove+0x12>
 800b04c:	4402      	add	r2, r0
 800b04e:	4601      	mov	r1, r0
 800b050:	428a      	cmp	r2, r1
 800b052:	d100      	bne.n	800b056 <memmove+0x2a>
 800b054:	bd10      	pop	{r4, pc}
 800b056:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b05a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b05e:	e7f7      	b.n	800b050 <memmove+0x24>

0800b060 <__malloc_lock>:
 800b060:	4801      	ldr	r0, [pc, #4]	; (800b068 <__malloc_lock+0x8>)
 800b062:	f000 bc1f 	b.w	800b8a4 <__retarget_lock_acquire_recursive>
 800b066:	bf00      	nop
 800b068:	200006b4 	.word	0x200006b4

0800b06c <__malloc_unlock>:
 800b06c:	4801      	ldr	r0, [pc, #4]	; (800b074 <__malloc_unlock+0x8>)
 800b06e:	f000 bc1a 	b.w	800b8a6 <__retarget_lock_release_recursive>
 800b072:	bf00      	nop
 800b074:	200006b4 	.word	0x200006b4

0800b078 <_realloc_r>:
 800b078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b07c:	4680      	mov	r8, r0
 800b07e:	4614      	mov	r4, r2
 800b080:	460e      	mov	r6, r1
 800b082:	b921      	cbnz	r1, 800b08e <_realloc_r+0x16>
 800b084:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b088:	4611      	mov	r1, r2
 800b08a:	f7ff bdad 	b.w	800abe8 <_malloc_r>
 800b08e:	b92a      	cbnz	r2, 800b09c <_realloc_r+0x24>
 800b090:	f7ff fd3e 	bl	800ab10 <_free_r>
 800b094:	4625      	mov	r5, r4
 800b096:	4628      	mov	r0, r5
 800b098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b09c:	f000 fc6a 	bl	800b974 <_malloc_usable_size_r>
 800b0a0:	4284      	cmp	r4, r0
 800b0a2:	4607      	mov	r7, r0
 800b0a4:	d802      	bhi.n	800b0ac <_realloc_r+0x34>
 800b0a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b0aa:	d812      	bhi.n	800b0d2 <_realloc_r+0x5a>
 800b0ac:	4621      	mov	r1, r4
 800b0ae:	4640      	mov	r0, r8
 800b0b0:	f7ff fd9a 	bl	800abe8 <_malloc_r>
 800b0b4:	4605      	mov	r5, r0
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	d0ed      	beq.n	800b096 <_realloc_r+0x1e>
 800b0ba:	42bc      	cmp	r4, r7
 800b0bc:	4622      	mov	r2, r4
 800b0be:	4631      	mov	r1, r6
 800b0c0:	bf28      	it	cs
 800b0c2:	463a      	movcs	r2, r7
 800b0c4:	f7fd fe64 	bl	8008d90 <memcpy>
 800b0c8:	4631      	mov	r1, r6
 800b0ca:	4640      	mov	r0, r8
 800b0cc:	f7ff fd20 	bl	800ab10 <_free_r>
 800b0d0:	e7e1      	b.n	800b096 <_realloc_r+0x1e>
 800b0d2:	4635      	mov	r5, r6
 800b0d4:	e7df      	b.n	800b096 <_realloc_r+0x1e>

0800b0d6 <__sfputc_r>:
 800b0d6:	6893      	ldr	r3, [r2, #8]
 800b0d8:	3b01      	subs	r3, #1
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	b410      	push	{r4}
 800b0de:	6093      	str	r3, [r2, #8]
 800b0e0:	da08      	bge.n	800b0f4 <__sfputc_r+0x1e>
 800b0e2:	6994      	ldr	r4, [r2, #24]
 800b0e4:	42a3      	cmp	r3, r4
 800b0e6:	db01      	blt.n	800b0ec <__sfputc_r+0x16>
 800b0e8:	290a      	cmp	r1, #10
 800b0ea:	d103      	bne.n	800b0f4 <__sfputc_r+0x1e>
 800b0ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0f0:	f000 b94a 	b.w	800b388 <__swbuf_r>
 800b0f4:	6813      	ldr	r3, [r2, #0]
 800b0f6:	1c58      	adds	r0, r3, #1
 800b0f8:	6010      	str	r0, [r2, #0]
 800b0fa:	7019      	strb	r1, [r3, #0]
 800b0fc:	4608      	mov	r0, r1
 800b0fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b102:	4770      	bx	lr

0800b104 <__sfputs_r>:
 800b104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b106:	4606      	mov	r6, r0
 800b108:	460f      	mov	r7, r1
 800b10a:	4614      	mov	r4, r2
 800b10c:	18d5      	adds	r5, r2, r3
 800b10e:	42ac      	cmp	r4, r5
 800b110:	d101      	bne.n	800b116 <__sfputs_r+0x12>
 800b112:	2000      	movs	r0, #0
 800b114:	e007      	b.n	800b126 <__sfputs_r+0x22>
 800b116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b11a:	463a      	mov	r2, r7
 800b11c:	4630      	mov	r0, r6
 800b11e:	f7ff ffda 	bl	800b0d6 <__sfputc_r>
 800b122:	1c43      	adds	r3, r0, #1
 800b124:	d1f3      	bne.n	800b10e <__sfputs_r+0xa>
 800b126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b128 <_vfiprintf_r>:
 800b128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b12c:	460d      	mov	r5, r1
 800b12e:	b09d      	sub	sp, #116	; 0x74
 800b130:	4614      	mov	r4, r2
 800b132:	4698      	mov	r8, r3
 800b134:	4606      	mov	r6, r0
 800b136:	b118      	cbz	r0, 800b140 <_vfiprintf_r+0x18>
 800b138:	6983      	ldr	r3, [r0, #24]
 800b13a:	b90b      	cbnz	r3, 800b140 <_vfiprintf_r+0x18>
 800b13c:	f000 fb14 	bl	800b768 <__sinit>
 800b140:	4b89      	ldr	r3, [pc, #548]	; (800b368 <_vfiprintf_r+0x240>)
 800b142:	429d      	cmp	r5, r3
 800b144:	d11b      	bne.n	800b17e <_vfiprintf_r+0x56>
 800b146:	6875      	ldr	r5, [r6, #4]
 800b148:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b14a:	07d9      	lsls	r1, r3, #31
 800b14c:	d405      	bmi.n	800b15a <_vfiprintf_r+0x32>
 800b14e:	89ab      	ldrh	r3, [r5, #12]
 800b150:	059a      	lsls	r2, r3, #22
 800b152:	d402      	bmi.n	800b15a <_vfiprintf_r+0x32>
 800b154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b156:	f000 fba5 	bl	800b8a4 <__retarget_lock_acquire_recursive>
 800b15a:	89ab      	ldrh	r3, [r5, #12]
 800b15c:	071b      	lsls	r3, r3, #28
 800b15e:	d501      	bpl.n	800b164 <_vfiprintf_r+0x3c>
 800b160:	692b      	ldr	r3, [r5, #16]
 800b162:	b9eb      	cbnz	r3, 800b1a0 <_vfiprintf_r+0x78>
 800b164:	4629      	mov	r1, r5
 800b166:	4630      	mov	r0, r6
 800b168:	f000 f96e 	bl	800b448 <__swsetup_r>
 800b16c:	b1c0      	cbz	r0, 800b1a0 <_vfiprintf_r+0x78>
 800b16e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b170:	07dc      	lsls	r4, r3, #31
 800b172:	d50e      	bpl.n	800b192 <_vfiprintf_r+0x6a>
 800b174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b178:	b01d      	add	sp, #116	; 0x74
 800b17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b17e:	4b7b      	ldr	r3, [pc, #492]	; (800b36c <_vfiprintf_r+0x244>)
 800b180:	429d      	cmp	r5, r3
 800b182:	d101      	bne.n	800b188 <_vfiprintf_r+0x60>
 800b184:	68b5      	ldr	r5, [r6, #8]
 800b186:	e7df      	b.n	800b148 <_vfiprintf_r+0x20>
 800b188:	4b79      	ldr	r3, [pc, #484]	; (800b370 <_vfiprintf_r+0x248>)
 800b18a:	429d      	cmp	r5, r3
 800b18c:	bf08      	it	eq
 800b18e:	68f5      	ldreq	r5, [r6, #12]
 800b190:	e7da      	b.n	800b148 <_vfiprintf_r+0x20>
 800b192:	89ab      	ldrh	r3, [r5, #12]
 800b194:	0598      	lsls	r0, r3, #22
 800b196:	d4ed      	bmi.n	800b174 <_vfiprintf_r+0x4c>
 800b198:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b19a:	f000 fb84 	bl	800b8a6 <__retarget_lock_release_recursive>
 800b19e:	e7e9      	b.n	800b174 <_vfiprintf_r+0x4c>
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	9309      	str	r3, [sp, #36]	; 0x24
 800b1a4:	2320      	movs	r3, #32
 800b1a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1ae:	2330      	movs	r3, #48	; 0x30
 800b1b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b374 <_vfiprintf_r+0x24c>
 800b1b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1b8:	f04f 0901 	mov.w	r9, #1
 800b1bc:	4623      	mov	r3, r4
 800b1be:	469a      	mov	sl, r3
 800b1c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1c4:	b10a      	cbz	r2, 800b1ca <_vfiprintf_r+0xa2>
 800b1c6:	2a25      	cmp	r2, #37	; 0x25
 800b1c8:	d1f9      	bne.n	800b1be <_vfiprintf_r+0x96>
 800b1ca:	ebba 0b04 	subs.w	fp, sl, r4
 800b1ce:	d00b      	beq.n	800b1e8 <_vfiprintf_r+0xc0>
 800b1d0:	465b      	mov	r3, fp
 800b1d2:	4622      	mov	r2, r4
 800b1d4:	4629      	mov	r1, r5
 800b1d6:	4630      	mov	r0, r6
 800b1d8:	f7ff ff94 	bl	800b104 <__sfputs_r>
 800b1dc:	3001      	adds	r0, #1
 800b1de:	f000 80aa 	beq.w	800b336 <_vfiprintf_r+0x20e>
 800b1e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1e4:	445a      	add	r2, fp
 800b1e6:	9209      	str	r2, [sp, #36]	; 0x24
 800b1e8:	f89a 3000 	ldrb.w	r3, [sl]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	f000 80a2 	beq.w	800b336 <_vfiprintf_r+0x20e>
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b1f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1fc:	f10a 0a01 	add.w	sl, sl, #1
 800b200:	9304      	str	r3, [sp, #16]
 800b202:	9307      	str	r3, [sp, #28]
 800b204:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b208:	931a      	str	r3, [sp, #104]	; 0x68
 800b20a:	4654      	mov	r4, sl
 800b20c:	2205      	movs	r2, #5
 800b20e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b212:	4858      	ldr	r0, [pc, #352]	; (800b374 <_vfiprintf_r+0x24c>)
 800b214:	f7f4 ffe4 	bl	80001e0 <memchr>
 800b218:	9a04      	ldr	r2, [sp, #16]
 800b21a:	b9d8      	cbnz	r0, 800b254 <_vfiprintf_r+0x12c>
 800b21c:	06d1      	lsls	r1, r2, #27
 800b21e:	bf44      	itt	mi
 800b220:	2320      	movmi	r3, #32
 800b222:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b226:	0713      	lsls	r3, r2, #28
 800b228:	bf44      	itt	mi
 800b22a:	232b      	movmi	r3, #43	; 0x2b
 800b22c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b230:	f89a 3000 	ldrb.w	r3, [sl]
 800b234:	2b2a      	cmp	r3, #42	; 0x2a
 800b236:	d015      	beq.n	800b264 <_vfiprintf_r+0x13c>
 800b238:	9a07      	ldr	r2, [sp, #28]
 800b23a:	4654      	mov	r4, sl
 800b23c:	2000      	movs	r0, #0
 800b23e:	f04f 0c0a 	mov.w	ip, #10
 800b242:	4621      	mov	r1, r4
 800b244:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b248:	3b30      	subs	r3, #48	; 0x30
 800b24a:	2b09      	cmp	r3, #9
 800b24c:	d94e      	bls.n	800b2ec <_vfiprintf_r+0x1c4>
 800b24e:	b1b0      	cbz	r0, 800b27e <_vfiprintf_r+0x156>
 800b250:	9207      	str	r2, [sp, #28]
 800b252:	e014      	b.n	800b27e <_vfiprintf_r+0x156>
 800b254:	eba0 0308 	sub.w	r3, r0, r8
 800b258:	fa09 f303 	lsl.w	r3, r9, r3
 800b25c:	4313      	orrs	r3, r2
 800b25e:	9304      	str	r3, [sp, #16]
 800b260:	46a2      	mov	sl, r4
 800b262:	e7d2      	b.n	800b20a <_vfiprintf_r+0xe2>
 800b264:	9b03      	ldr	r3, [sp, #12]
 800b266:	1d19      	adds	r1, r3, #4
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	9103      	str	r1, [sp, #12]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	bfbb      	ittet	lt
 800b270:	425b      	neglt	r3, r3
 800b272:	f042 0202 	orrlt.w	r2, r2, #2
 800b276:	9307      	strge	r3, [sp, #28]
 800b278:	9307      	strlt	r3, [sp, #28]
 800b27a:	bfb8      	it	lt
 800b27c:	9204      	strlt	r2, [sp, #16]
 800b27e:	7823      	ldrb	r3, [r4, #0]
 800b280:	2b2e      	cmp	r3, #46	; 0x2e
 800b282:	d10c      	bne.n	800b29e <_vfiprintf_r+0x176>
 800b284:	7863      	ldrb	r3, [r4, #1]
 800b286:	2b2a      	cmp	r3, #42	; 0x2a
 800b288:	d135      	bne.n	800b2f6 <_vfiprintf_r+0x1ce>
 800b28a:	9b03      	ldr	r3, [sp, #12]
 800b28c:	1d1a      	adds	r2, r3, #4
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	9203      	str	r2, [sp, #12]
 800b292:	2b00      	cmp	r3, #0
 800b294:	bfb8      	it	lt
 800b296:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b29a:	3402      	adds	r4, #2
 800b29c:	9305      	str	r3, [sp, #20]
 800b29e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b384 <_vfiprintf_r+0x25c>
 800b2a2:	7821      	ldrb	r1, [r4, #0]
 800b2a4:	2203      	movs	r2, #3
 800b2a6:	4650      	mov	r0, sl
 800b2a8:	f7f4 ff9a 	bl	80001e0 <memchr>
 800b2ac:	b140      	cbz	r0, 800b2c0 <_vfiprintf_r+0x198>
 800b2ae:	2340      	movs	r3, #64	; 0x40
 800b2b0:	eba0 000a 	sub.w	r0, r0, sl
 800b2b4:	fa03 f000 	lsl.w	r0, r3, r0
 800b2b8:	9b04      	ldr	r3, [sp, #16]
 800b2ba:	4303      	orrs	r3, r0
 800b2bc:	3401      	adds	r4, #1
 800b2be:	9304      	str	r3, [sp, #16]
 800b2c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2c4:	482c      	ldr	r0, [pc, #176]	; (800b378 <_vfiprintf_r+0x250>)
 800b2c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2ca:	2206      	movs	r2, #6
 800b2cc:	f7f4 ff88 	bl	80001e0 <memchr>
 800b2d0:	2800      	cmp	r0, #0
 800b2d2:	d03f      	beq.n	800b354 <_vfiprintf_r+0x22c>
 800b2d4:	4b29      	ldr	r3, [pc, #164]	; (800b37c <_vfiprintf_r+0x254>)
 800b2d6:	bb1b      	cbnz	r3, 800b320 <_vfiprintf_r+0x1f8>
 800b2d8:	9b03      	ldr	r3, [sp, #12]
 800b2da:	3307      	adds	r3, #7
 800b2dc:	f023 0307 	bic.w	r3, r3, #7
 800b2e0:	3308      	adds	r3, #8
 800b2e2:	9303      	str	r3, [sp, #12]
 800b2e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2e6:	443b      	add	r3, r7
 800b2e8:	9309      	str	r3, [sp, #36]	; 0x24
 800b2ea:	e767      	b.n	800b1bc <_vfiprintf_r+0x94>
 800b2ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2f0:	460c      	mov	r4, r1
 800b2f2:	2001      	movs	r0, #1
 800b2f4:	e7a5      	b.n	800b242 <_vfiprintf_r+0x11a>
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	3401      	adds	r4, #1
 800b2fa:	9305      	str	r3, [sp, #20]
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	f04f 0c0a 	mov.w	ip, #10
 800b302:	4620      	mov	r0, r4
 800b304:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b308:	3a30      	subs	r2, #48	; 0x30
 800b30a:	2a09      	cmp	r2, #9
 800b30c:	d903      	bls.n	800b316 <_vfiprintf_r+0x1ee>
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d0c5      	beq.n	800b29e <_vfiprintf_r+0x176>
 800b312:	9105      	str	r1, [sp, #20]
 800b314:	e7c3      	b.n	800b29e <_vfiprintf_r+0x176>
 800b316:	fb0c 2101 	mla	r1, ip, r1, r2
 800b31a:	4604      	mov	r4, r0
 800b31c:	2301      	movs	r3, #1
 800b31e:	e7f0      	b.n	800b302 <_vfiprintf_r+0x1da>
 800b320:	ab03      	add	r3, sp, #12
 800b322:	9300      	str	r3, [sp, #0]
 800b324:	462a      	mov	r2, r5
 800b326:	4b16      	ldr	r3, [pc, #88]	; (800b380 <_vfiprintf_r+0x258>)
 800b328:	a904      	add	r1, sp, #16
 800b32a:	4630      	mov	r0, r6
 800b32c:	f7fd fde6 	bl	8008efc <_printf_float>
 800b330:	4607      	mov	r7, r0
 800b332:	1c78      	adds	r0, r7, #1
 800b334:	d1d6      	bne.n	800b2e4 <_vfiprintf_r+0x1bc>
 800b336:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b338:	07d9      	lsls	r1, r3, #31
 800b33a:	d405      	bmi.n	800b348 <_vfiprintf_r+0x220>
 800b33c:	89ab      	ldrh	r3, [r5, #12]
 800b33e:	059a      	lsls	r2, r3, #22
 800b340:	d402      	bmi.n	800b348 <_vfiprintf_r+0x220>
 800b342:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b344:	f000 faaf 	bl	800b8a6 <__retarget_lock_release_recursive>
 800b348:	89ab      	ldrh	r3, [r5, #12]
 800b34a:	065b      	lsls	r3, r3, #25
 800b34c:	f53f af12 	bmi.w	800b174 <_vfiprintf_r+0x4c>
 800b350:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b352:	e711      	b.n	800b178 <_vfiprintf_r+0x50>
 800b354:	ab03      	add	r3, sp, #12
 800b356:	9300      	str	r3, [sp, #0]
 800b358:	462a      	mov	r2, r5
 800b35a:	4b09      	ldr	r3, [pc, #36]	; (800b380 <_vfiprintf_r+0x258>)
 800b35c:	a904      	add	r1, sp, #16
 800b35e:	4630      	mov	r0, r6
 800b360:	f7fe f870 	bl	8009444 <_printf_i>
 800b364:	e7e4      	b.n	800b330 <_vfiprintf_r+0x208>
 800b366:	bf00      	nop
 800b368:	0800eb74 	.word	0x0800eb74
 800b36c:	0800eb94 	.word	0x0800eb94
 800b370:	0800eb54 	.word	0x0800eb54
 800b374:	0800e9fc 	.word	0x0800e9fc
 800b378:	0800ea06 	.word	0x0800ea06
 800b37c:	08008efd 	.word	0x08008efd
 800b380:	0800b105 	.word	0x0800b105
 800b384:	0800ea02 	.word	0x0800ea02

0800b388 <__swbuf_r>:
 800b388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b38a:	460e      	mov	r6, r1
 800b38c:	4614      	mov	r4, r2
 800b38e:	4605      	mov	r5, r0
 800b390:	b118      	cbz	r0, 800b39a <__swbuf_r+0x12>
 800b392:	6983      	ldr	r3, [r0, #24]
 800b394:	b90b      	cbnz	r3, 800b39a <__swbuf_r+0x12>
 800b396:	f000 f9e7 	bl	800b768 <__sinit>
 800b39a:	4b21      	ldr	r3, [pc, #132]	; (800b420 <__swbuf_r+0x98>)
 800b39c:	429c      	cmp	r4, r3
 800b39e:	d12b      	bne.n	800b3f8 <__swbuf_r+0x70>
 800b3a0:	686c      	ldr	r4, [r5, #4]
 800b3a2:	69a3      	ldr	r3, [r4, #24]
 800b3a4:	60a3      	str	r3, [r4, #8]
 800b3a6:	89a3      	ldrh	r3, [r4, #12]
 800b3a8:	071a      	lsls	r2, r3, #28
 800b3aa:	d52f      	bpl.n	800b40c <__swbuf_r+0x84>
 800b3ac:	6923      	ldr	r3, [r4, #16]
 800b3ae:	b36b      	cbz	r3, 800b40c <__swbuf_r+0x84>
 800b3b0:	6923      	ldr	r3, [r4, #16]
 800b3b2:	6820      	ldr	r0, [r4, #0]
 800b3b4:	1ac0      	subs	r0, r0, r3
 800b3b6:	6963      	ldr	r3, [r4, #20]
 800b3b8:	b2f6      	uxtb	r6, r6
 800b3ba:	4283      	cmp	r3, r0
 800b3bc:	4637      	mov	r7, r6
 800b3be:	dc04      	bgt.n	800b3ca <__swbuf_r+0x42>
 800b3c0:	4621      	mov	r1, r4
 800b3c2:	4628      	mov	r0, r5
 800b3c4:	f000 f93c 	bl	800b640 <_fflush_r>
 800b3c8:	bb30      	cbnz	r0, 800b418 <__swbuf_r+0x90>
 800b3ca:	68a3      	ldr	r3, [r4, #8]
 800b3cc:	3b01      	subs	r3, #1
 800b3ce:	60a3      	str	r3, [r4, #8]
 800b3d0:	6823      	ldr	r3, [r4, #0]
 800b3d2:	1c5a      	adds	r2, r3, #1
 800b3d4:	6022      	str	r2, [r4, #0]
 800b3d6:	701e      	strb	r6, [r3, #0]
 800b3d8:	6963      	ldr	r3, [r4, #20]
 800b3da:	3001      	adds	r0, #1
 800b3dc:	4283      	cmp	r3, r0
 800b3de:	d004      	beq.n	800b3ea <__swbuf_r+0x62>
 800b3e0:	89a3      	ldrh	r3, [r4, #12]
 800b3e2:	07db      	lsls	r3, r3, #31
 800b3e4:	d506      	bpl.n	800b3f4 <__swbuf_r+0x6c>
 800b3e6:	2e0a      	cmp	r6, #10
 800b3e8:	d104      	bne.n	800b3f4 <__swbuf_r+0x6c>
 800b3ea:	4621      	mov	r1, r4
 800b3ec:	4628      	mov	r0, r5
 800b3ee:	f000 f927 	bl	800b640 <_fflush_r>
 800b3f2:	b988      	cbnz	r0, 800b418 <__swbuf_r+0x90>
 800b3f4:	4638      	mov	r0, r7
 800b3f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3f8:	4b0a      	ldr	r3, [pc, #40]	; (800b424 <__swbuf_r+0x9c>)
 800b3fa:	429c      	cmp	r4, r3
 800b3fc:	d101      	bne.n	800b402 <__swbuf_r+0x7a>
 800b3fe:	68ac      	ldr	r4, [r5, #8]
 800b400:	e7cf      	b.n	800b3a2 <__swbuf_r+0x1a>
 800b402:	4b09      	ldr	r3, [pc, #36]	; (800b428 <__swbuf_r+0xa0>)
 800b404:	429c      	cmp	r4, r3
 800b406:	bf08      	it	eq
 800b408:	68ec      	ldreq	r4, [r5, #12]
 800b40a:	e7ca      	b.n	800b3a2 <__swbuf_r+0x1a>
 800b40c:	4621      	mov	r1, r4
 800b40e:	4628      	mov	r0, r5
 800b410:	f000 f81a 	bl	800b448 <__swsetup_r>
 800b414:	2800      	cmp	r0, #0
 800b416:	d0cb      	beq.n	800b3b0 <__swbuf_r+0x28>
 800b418:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b41c:	e7ea      	b.n	800b3f4 <__swbuf_r+0x6c>
 800b41e:	bf00      	nop
 800b420:	0800eb74 	.word	0x0800eb74
 800b424:	0800eb94 	.word	0x0800eb94
 800b428:	0800eb54 	.word	0x0800eb54

0800b42c <__ascii_wctomb>:
 800b42c:	b149      	cbz	r1, 800b442 <__ascii_wctomb+0x16>
 800b42e:	2aff      	cmp	r2, #255	; 0xff
 800b430:	bf85      	ittet	hi
 800b432:	238a      	movhi	r3, #138	; 0x8a
 800b434:	6003      	strhi	r3, [r0, #0]
 800b436:	700a      	strbls	r2, [r1, #0]
 800b438:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b43c:	bf98      	it	ls
 800b43e:	2001      	movls	r0, #1
 800b440:	4770      	bx	lr
 800b442:	4608      	mov	r0, r1
 800b444:	4770      	bx	lr
	...

0800b448 <__swsetup_r>:
 800b448:	4b32      	ldr	r3, [pc, #200]	; (800b514 <__swsetup_r+0xcc>)
 800b44a:	b570      	push	{r4, r5, r6, lr}
 800b44c:	681d      	ldr	r5, [r3, #0]
 800b44e:	4606      	mov	r6, r0
 800b450:	460c      	mov	r4, r1
 800b452:	b125      	cbz	r5, 800b45e <__swsetup_r+0x16>
 800b454:	69ab      	ldr	r3, [r5, #24]
 800b456:	b913      	cbnz	r3, 800b45e <__swsetup_r+0x16>
 800b458:	4628      	mov	r0, r5
 800b45a:	f000 f985 	bl	800b768 <__sinit>
 800b45e:	4b2e      	ldr	r3, [pc, #184]	; (800b518 <__swsetup_r+0xd0>)
 800b460:	429c      	cmp	r4, r3
 800b462:	d10f      	bne.n	800b484 <__swsetup_r+0x3c>
 800b464:	686c      	ldr	r4, [r5, #4]
 800b466:	89a3      	ldrh	r3, [r4, #12]
 800b468:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b46c:	0719      	lsls	r1, r3, #28
 800b46e:	d42c      	bmi.n	800b4ca <__swsetup_r+0x82>
 800b470:	06dd      	lsls	r5, r3, #27
 800b472:	d411      	bmi.n	800b498 <__swsetup_r+0x50>
 800b474:	2309      	movs	r3, #9
 800b476:	6033      	str	r3, [r6, #0]
 800b478:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b47c:	81a3      	strh	r3, [r4, #12]
 800b47e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b482:	e03e      	b.n	800b502 <__swsetup_r+0xba>
 800b484:	4b25      	ldr	r3, [pc, #148]	; (800b51c <__swsetup_r+0xd4>)
 800b486:	429c      	cmp	r4, r3
 800b488:	d101      	bne.n	800b48e <__swsetup_r+0x46>
 800b48a:	68ac      	ldr	r4, [r5, #8]
 800b48c:	e7eb      	b.n	800b466 <__swsetup_r+0x1e>
 800b48e:	4b24      	ldr	r3, [pc, #144]	; (800b520 <__swsetup_r+0xd8>)
 800b490:	429c      	cmp	r4, r3
 800b492:	bf08      	it	eq
 800b494:	68ec      	ldreq	r4, [r5, #12]
 800b496:	e7e6      	b.n	800b466 <__swsetup_r+0x1e>
 800b498:	0758      	lsls	r0, r3, #29
 800b49a:	d512      	bpl.n	800b4c2 <__swsetup_r+0x7a>
 800b49c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b49e:	b141      	cbz	r1, 800b4b2 <__swsetup_r+0x6a>
 800b4a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4a4:	4299      	cmp	r1, r3
 800b4a6:	d002      	beq.n	800b4ae <__swsetup_r+0x66>
 800b4a8:	4630      	mov	r0, r6
 800b4aa:	f7ff fb31 	bl	800ab10 <_free_r>
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	6363      	str	r3, [r4, #52]	; 0x34
 800b4b2:	89a3      	ldrh	r3, [r4, #12]
 800b4b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b4b8:	81a3      	strh	r3, [r4, #12]
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	6063      	str	r3, [r4, #4]
 800b4be:	6923      	ldr	r3, [r4, #16]
 800b4c0:	6023      	str	r3, [r4, #0]
 800b4c2:	89a3      	ldrh	r3, [r4, #12]
 800b4c4:	f043 0308 	orr.w	r3, r3, #8
 800b4c8:	81a3      	strh	r3, [r4, #12]
 800b4ca:	6923      	ldr	r3, [r4, #16]
 800b4cc:	b94b      	cbnz	r3, 800b4e2 <__swsetup_r+0x9a>
 800b4ce:	89a3      	ldrh	r3, [r4, #12]
 800b4d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b4d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4d8:	d003      	beq.n	800b4e2 <__swsetup_r+0x9a>
 800b4da:	4621      	mov	r1, r4
 800b4dc:	4630      	mov	r0, r6
 800b4de:	f000 fa09 	bl	800b8f4 <__smakebuf_r>
 800b4e2:	89a0      	ldrh	r0, [r4, #12]
 800b4e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4e8:	f010 0301 	ands.w	r3, r0, #1
 800b4ec:	d00a      	beq.n	800b504 <__swsetup_r+0xbc>
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	60a3      	str	r3, [r4, #8]
 800b4f2:	6963      	ldr	r3, [r4, #20]
 800b4f4:	425b      	negs	r3, r3
 800b4f6:	61a3      	str	r3, [r4, #24]
 800b4f8:	6923      	ldr	r3, [r4, #16]
 800b4fa:	b943      	cbnz	r3, 800b50e <__swsetup_r+0xc6>
 800b4fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b500:	d1ba      	bne.n	800b478 <__swsetup_r+0x30>
 800b502:	bd70      	pop	{r4, r5, r6, pc}
 800b504:	0781      	lsls	r1, r0, #30
 800b506:	bf58      	it	pl
 800b508:	6963      	ldrpl	r3, [r4, #20]
 800b50a:	60a3      	str	r3, [r4, #8]
 800b50c:	e7f4      	b.n	800b4f8 <__swsetup_r+0xb0>
 800b50e:	2000      	movs	r0, #0
 800b510:	e7f7      	b.n	800b502 <__swsetup_r+0xba>
 800b512:	bf00      	nop
 800b514:	20000014 	.word	0x20000014
 800b518:	0800eb74 	.word	0x0800eb74
 800b51c:	0800eb94 	.word	0x0800eb94
 800b520:	0800eb54 	.word	0x0800eb54

0800b524 <abort>:
 800b524:	b508      	push	{r3, lr}
 800b526:	2006      	movs	r0, #6
 800b528:	f000 fa54 	bl	800b9d4 <raise>
 800b52c:	2001      	movs	r0, #1
 800b52e:	f7f8 fa73 	bl	8003a18 <_exit>
	...

0800b534 <__sflush_r>:
 800b534:	898a      	ldrh	r2, [r1, #12]
 800b536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b53a:	4605      	mov	r5, r0
 800b53c:	0710      	lsls	r0, r2, #28
 800b53e:	460c      	mov	r4, r1
 800b540:	d458      	bmi.n	800b5f4 <__sflush_r+0xc0>
 800b542:	684b      	ldr	r3, [r1, #4]
 800b544:	2b00      	cmp	r3, #0
 800b546:	dc05      	bgt.n	800b554 <__sflush_r+0x20>
 800b548:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	dc02      	bgt.n	800b554 <__sflush_r+0x20>
 800b54e:	2000      	movs	r0, #0
 800b550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b554:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b556:	2e00      	cmp	r6, #0
 800b558:	d0f9      	beq.n	800b54e <__sflush_r+0x1a>
 800b55a:	2300      	movs	r3, #0
 800b55c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b560:	682f      	ldr	r7, [r5, #0]
 800b562:	602b      	str	r3, [r5, #0]
 800b564:	d032      	beq.n	800b5cc <__sflush_r+0x98>
 800b566:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b568:	89a3      	ldrh	r3, [r4, #12]
 800b56a:	075a      	lsls	r2, r3, #29
 800b56c:	d505      	bpl.n	800b57a <__sflush_r+0x46>
 800b56e:	6863      	ldr	r3, [r4, #4]
 800b570:	1ac0      	subs	r0, r0, r3
 800b572:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b574:	b10b      	cbz	r3, 800b57a <__sflush_r+0x46>
 800b576:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b578:	1ac0      	subs	r0, r0, r3
 800b57a:	2300      	movs	r3, #0
 800b57c:	4602      	mov	r2, r0
 800b57e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b580:	6a21      	ldr	r1, [r4, #32]
 800b582:	4628      	mov	r0, r5
 800b584:	47b0      	blx	r6
 800b586:	1c43      	adds	r3, r0, #1
 800b588:	89a3      	ldrh	r3, [r4, #12]
 800b58a:	d106      	bne.n	800b59a <__sflush_r+0x66>
 800b58c:	6829      	ldr	r1, [r5, #0]
 800b58e:	291d      	cmp	r1, #29
 800b590:	d82c      	bhi.n	800b5ec <__sflush_r+0xb8>
 800b592:	4a2a      	ldr	r2, [pc, #168]	; (800b63c <__sflush_r+0x108>)
 800b594:	40ca      	lsrs	r2, r1
 800b596:	07d6      	lsls	r6, r2, #31
 800b598:	d528      	bpl.n	800b5ec <__sflush_r+0xb8>
 800b59a:	2200      	movs	r2, #0
 800b59c:	6062      	str	r2, [r4, #4]
 800b59e:	04d9      	lsls	r1, r3, #19
 800b5a0:	6922      	ldr	r2, [r4, #16]
 800b5a2:	6022      	str	r2, [r4, #0]
 800b5a4:	d504      	bpl.n	800b5b0 <__sflush_r+0x7c>
 800b5a6:	1c42      	adds	r2, r0, #1
 800b5a8:	d101      	bne.n	800b5ae <__sflush_r+0x7a>
 800b5aa:	682b      	ldr	r3, [r5, #0]
 800b5ac:	b903      	cbnz	r3, 800b5b0 <__sflush_r+0x7c>
 800b5ae:	6560      	str	r0, [r4, #84]	; 0x54
 800b5b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5b2:	602f      	str	r7, [r5, #0]
 800b5b4:	2900      	cmp	r1, #0
 800b5b6:	d0ca      	beq.n	800b54e <__sflush_r+0x1a>
 800b5b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5bc:	4299      	cmp	r1, r3
 800b5be:	d002      	beq.n	800b5c6 <__sflush_r+0x92>
 800b5c0:	4628      	mov	r0, r5
 800b5c2:	f7ff faa5 	bl	800ab10 <_free_r>
 800b5c6:	2000      	movs	r0, #0
 800b5c8:	6360      	str	r0, [r4, #52]	; 0x34
 800b5ca:	e7c1      	b.n	800b550 <__sflush_r+0x1c>
 800b5cc:	6a21      	ldr	r1, [r4, #32]
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	4628      	mov	r0, r5
 800b5d2:	47b0      	blx	r6
 800b5d4:	1c41      	adds	r1, r0, #1
 800b5d6:	d1c7      	bne.n	800b568 <__sflush_r+0x34>
 800b5d8:	682b      	ldr	r3, [r5, #0]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d0c4      	beq.n	800b568 <__sflush_r+0x34>
 800b5de:	2b1d      	cmp	r3, #29
 800b5e0:	d001      	beq.n	800b5e6 <__sflush_r+0xb2>
 800b5e2:	2b16      	cmp	r3, #22
 800b5e4:	d101      	bne.n	800b5ea <__sflush_r+0xb6>
 800b5e6:	602f      	str	r7, [r5, #0]
 800b5e8:	e7b1      	b.n	800b54e <__sflush_r+0x1a>
 800b5ea:	89a3      	ldrh	r3, [r4, #12]
 800b5ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5f0:	81a3      	strh	r3, [r4, #12]
 800b5f2:	e7ad      	b.n	800b550 <__sflush_r+0x1c>
 800b5f4:	690f      	ldr	r7, [r1, #16]
 800b5f6:	2f00      	cmp	r7, #0
 800b5f8:	d0a9      	beq.n	800b54e <__sflush_r+0x1a>
 800b5fa:	0793      	lsls	r3, r2, #30
 800b5fc:	680e      	ldr	r6, [r1, #0]
 800b5fe:	bf08      	it	eq
 800b600:	694b      	ldreq	r3, [r1, #20]
 800b602:	600f      	str	r7, [r1, #0]
 800b604:	bf18      	it	ne
 800b606:	2300      	movne	r3, #0
 800b608:	eba6 0807 	sub.w	r8, r6, r7
 800b60c:	608b      	str	r3, [r1, #8]
 800b60e:	f1b8 0f00 	cmp.w	r8, #0
 800b612:	dd9c      	ble.n	800b54e <__sflush_r+0x1a>
 800b614:	6a21      	ldr	r1, [r4, #32]
 800b616:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b618:	4643      	mov	r3, r8
 800b61a:	463a      	mov	r2, r7
 800b61c:	4628      	mov	r0, r5
 800b61e:	47b0      	blx	r6
 800b620:	2800      	cmp	r0, #0
 800b622:	dc06      	bgt.n	800b632 <__sflush_r+0xfe>
 800b624:	89a3      	ldrh	r3, [r4, #12]
 800b626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b62a:	81a3      	strh	r3, [r4, #12]
 800b62c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b630:	e78e      	b.n	800b550 <__sflush_r+0x1c>
 800b632:	4407      	add	r7, r0
 800b634:	eba8 0800 	sub.w	r8, r8, r0
 800b638:	e7e9      	b.n	800b60e <__sflush_r+0xda>
 800b63a:	bf00      	nop
 800b63c:	20400001 	.word	0x20400001

0800b640 <_fflush_r>:
 800b640:	b538      	push	{r3, r4, r5, lr}
 800b642:	690b      	ldr	r3, [r1, #16]
 800b644:	4605      	mov	r5, r0
 800b646:	460c      	mov	r4, r1
 800b648:	b913      	cbnz	r3, 800b650 <_fflush_r+0x10>
 800b64a:	2500      	movs	r5, #0
 800b64c:	4628      	mov	r0, r5
 800b64e:	bd38      	pop	{r3, r4, r5, pc}
 800b650:	b118      	cbz	r0, 800b65a <_fflush_r+0x1a>
 800b652:	6983      	ldr	r3, [r0, #24]
 800b654:	b90b      	cbnz	r3, 800b65a <_fflush_r+0x1a>
 800b656:	f000 f887 	bl	800b768 <__sinit>
 800b65a:	4b14      	ldr	r3, [pc, #80]	; (800b6ac <_fflush_r+0x6c>)
 800b65c:	429c      	cmp	r4, r3
 800b65e:	d11b      	bne.n	800b698 <_fflush_r+0x58>
 800b660:	686c      	ldr	r4, [r5, #4]
 800b662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d0ef      	beq.n	800b64a <_fflush_r+0xa>
 800b66a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b66c:	07d0      	lsls	r0, r2, #31
 800b66e:	d404      	bmi.n	800b67a <_fflush_r+0x3a>
 800b670:	0599      	lsls	r1, r3, #22
 800b672:	d402      	bmi.n	800b67a <_fflush_r+0x3a>
 800b674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b676:	f000 f915 	bl	800b8a4 <__retarget_lock_acquire_recursive>
 800b67a:	4628      	mov	r0, r5
 800b67c:	4621      	mov	r1, r4
 800b67e:	f7ff ff59 	bl	800b534 <__sflush_r>
 800b682:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b684:	07da      	lsls	r2, r3, #31
 800b686:	4605      	mov	r5, r0
 800b688:	d4e0      	bmi.n	800b64c <_fflush_r+0xc>
 800b68a:	89a3      	ldrh	r3, [r4, #12]
 800b68c:	059b      	lsls	r3, r3, #22
 800b68e:	d4dd      	bmi.n	800b64c <_fflush_r+0xc>
 800b690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b692:	f000 f908 	bl	800b8a6 <__retarget_lock_release_recursive>
 800b696:	e7d9      	b.n	800b64c <_fflush_r+0xc>
 800b698:	4b05      	ldr	r3, [pc, #20]	; (800b6b0 <_fflush_r+0x70>)
 800b69a:	429c      	cmp	r4, r3
 800b69c:	d101      	bne.n	800b6a2 <_fflush_r+0x62>
 800b69e:	68ac      	ldr	r4, [r5, #8]
 800b6a0:	e7df      	b.n	800b662 <_fflush_r+0x22>
 800b6a2:	4b04      	ldr	r3, [pc, #16]	; (800b6b4 <_fflush_r+0x74>)
 800b6a4:	429c      	cmp	r4, r3
 800b6a6:	bf08      	it	eq
 800b6a8:	68ec      	ldreq	r4, [r5, #12]
 800b6aa:	e7da      	b.n	800b662 <_fflush_r+0x22>
 800b6ac:	0800eb74 	.word	0x0800eb74
 800b6b0:	0800eb94 	.word	0x0800eb94
 800b6b4:	0800eb54 	.word	0x0800eb54

0800b6b8 <std>:
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	b510      	push	{r4, lr}
 800b6bc:	4604      	mov	r4, r0
 800b6be:	e9c0 3300 	strd	r3, r3, [r0]
 800b6c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b6c6:	6083      	str	r3, [r0, #8]
 800b6c8:	8181      	strh	r1, [r0, #12]
 800b6ca:	6643      	str	r3, [r0, #100]	; 0x64
 800b6cc:	81c2      	strh	r2, [r0, #14]
 800b6ce:	6183      	str	r3, [r0, #24]
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	2208      	movs	r2, #8
 800b6d4:	305c      	adds	r0, #92	; 0x5c
 800b6d6:	f7fd fb69 	bl	8008dac <memset>
 800b6da:	4b05      	ldr	r3, [pc, #20]	; (800b6f0 <std+0x38>)
 800b6dc:	6263      	str	r3, [r4, #36]	; 0x24
 800b6de:	4b05      	ldr	r3, [pc, #20]	; (800b6f4 <std+0x3c>)
 800b6e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b6e2:	4b05      	ldr	r3, [pc, #20]	; (800b6f8 <std+0x40>)
 800b6e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b6e6:	4b05      	ldr	r3, [pc, #20]	; (800b6fc <std+0x44>)
 800b6e8:	6224      	str	r4, [r4, #32]
 800b6ea:	6323      	str	r3, [r4, #48]	; 0x30
 800b6ec:	bd10      	pop	{r4, pc}
 800b6ee:	bf00      	nop
 800b6f0:	0800ba0d 	.word	0x0800ba0d
 800b6f4:	0800ba2f 	.word	0x0800ba2f
 800b6f8:	0800ba67 	.word	0x0800ba67
 800b6fc:	0800ba8b 	.word	0x0800ba8b

0800b700 <_cleanup_r>:
 800b700:	4901      	ldr	r1, [pc, #4]	; (800b708 <_cleanup_r+0x8>)
 800b702:	f000 b8af 	b.w	800b864 <_fwalk_reent>
 800b706:	bf00      	nop
 800b708:	0800b641 	.word	0x0800b641

0800b70c <__sfmoreglue>:
 800b70c:	b570      	push	{r4, r5, r6, lr}
 800b70e:	2268      	movs	r2, #104	; 0x68
 800b710:	1e4d      	subs	r5, r1, #1
 800b712:	4355      	muls	r5, r2
 800b714:	460e      	mov	r6, r1
 800b716:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b71a:	f7ff fa65 	bl	800abe8 <_malloc_r>
 800b71e:	4604      	mov	r4, r0
 800b720:	b140      	cbz	r0, 800b734 <__sfmoreglue+0x28>
 800b722:	2100      	movs	r1, #0
 800b724:	e9c0 1600 	strd	r1, r6, [r0]
 800b728:	300c      	adds	r0, #12
 800b72a:	60a0      	str	r0, [r4, #8]
 800b72c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b730:	f7fd fb3c 	bl	8008dac <memset>
 800b734:	4620      	mov	r0, r4
 800b736:	bd70      	pop	{r4, r5, r6, pc}

0800b738 <__sfp_lock_acquire>:
 800b738:	4801      	ldr	r0, [pc, #4]	; (800b740 <__sfp_lock_acquire+0x8>)
 800b73a:	f000 b8b3 	b.w	800b8a4 <__retarget_lock_acquire_recursive>
 800b73e:	bf00      	nop
 800b740:	200006b5 	.word	0x200006b5

0800b744 <__sfp_lock_release>:
 800b744:	4801      	ldr	r0, [pc, #4]	; (800b74c <__sfp_lock_release+0x8>)
 800b746:	f000 b8ae 	b.w	800b8a6 <__retarget_lock_release_recursive>
 800b74a:	bf00      	nop
 800b74c:	200006b5 	.word	0x200006b5

0800b750 <__sinit_lock_acquire>:
 800b750:	4801      	ldr	r0, [pc, #4]	; (800b758 <__sinit_lock_acquire+0x8>)
 800b752:	f000 b8a7 	b.w	800b8a4 <__retarget_lock_acquire_recursive>
 800b756:	bf00      	nop
 800b758:	200006b6 	.word	0x200006b6

0800b75c <__sinit_lock_release>:
 800b75c:	4801      	ldr	r0, [pc, #4]	; (800b764 <__sinit_lock_release+0x8>)
 800b75e:	f000 b8a2 	b.w	800b8a6 <__retarget_lock_release_recursive>
 800b762:	bf00      	nop
 800b764:	200006b6 	.word	0x200006b6

0800b768 <__sinit>:
 800b768:	b510      	push	{r4, lr}
 800b76a:	4604      	mov	r4, r0
 800b76c:	f7ff fff0 	bl	800b750 <__sinit_lock_acquire>
 800b770:	69a3      	ldr	r3, [r4, #24]
 800b772:	b11b      	cbz	r3, 800b77c <__sinit+0x14>
 800b774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b778:	f7ff bff0 	b.w	800b75c <__sinit_lock_release>
 800b77c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b780:	6523      	str	r3, [r4, #80]	; 0x50
 800b782:	4b13      	ldr	r3, [pc, #76]	; (800b7d0 <__sinit+0x68>)
 800b784:	4a13      	ldr	r2, [pc, #76]	; (800b7d4 <__sinit+0x6c>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	62a2      	str	r2, [r4, #40]	; 0x28
 800b78a:	42a3      	cmp	r3, r4
 800b78c:	bf04      	itt	eq
 800b78e:	2301      	moveq	r3, #1
 800b790:	61a3      	streq	r3, [r4, #24]
 800b792:	4620      	mov	r0, r4
 800b794:	f000 f820 	bl	800b7d8 <__sfp>
 800b798:	6060      	str	r0, [r4, #4]
 800b79a:	4620      	mov	r0, r4
 800b79c:	f000 f81c 	bl	800b7d8 <__sfp>
 800b7a0:	60a0      	str	r0, [r4, #8]
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	f000 f818 	bl	800b7d8 <__sfp>
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	60e0      	str	r0, [r4, #12]
 800b7ac:	2104      	movs	r1, #4
 800b7ae:	6860      	ldr	r0, [r4, #4]
 800b7b0:	f7ff ff82 	bl	800b6b8 <std>
 800b7b4:	68a0      	ldr	r0, [r4, #8]
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	2109      	movs	r1, #9
 800b7ba:	f7ff ff7d 	bl	800b6b8 <std>
 800b7be:	68e0      	ldr	r0, [r4, #12]
 800b7c0:	2202      	movs	r2, #2
 800b7c2:	2112      	movs	r1, #18
 800b7c4:	f7ff ff78 	bl	800b6b8 <std>
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	61a3      	str	r3, [r4, #24]
 800b7cc:	e7d2      	b.n	800b774 <__sinit+0xc>
 800b7ce:	bf00      	nop
 800b7d0:	0800e7dc 	.word	0x0800e7dc
 800b7d4:	0800b701 	.word	0x0800b701

0800b7d8 <__sfp>:
 800b7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7da:	4607      	mov	r7, r0
 800b7dc:	f7ff ffac 	bl	800b738 <__sfp_lock_acquire>
 800b7e0:	4b1e      	ldr	r3, [pc, #120]	; (800b85c <__sfp+0x84>)
 800b7e2:	681e      	ldr	r6, [r3, #0]
 800b7e4:	69b3      	ldr	r3, [r6, #24]
 800b7e6:	b913      	cbnz	r3, 800b7ee <__sfp+0x16>
 800b7e8:	4630      	mov	r0, r6
 800b7ea:	f7ff ffbd 	bl	800b768 <__sinit>
 800b7ee:	3648      	adds	r6, #72	; 0x48
 800b7f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b7f4:	3b01      	subs	r3, #1
 800b7f6:	d503      	bpl.n	800b800 <__sfp+0x28>
 800b7f8:	6833      	ldr	r3, [r6, #0]
 800b7fa:	b30b      	cbz	r3, 800b840 <__sfp+0x68>
 800b7fc:	6836      	ldr	r6, [r6, #0]
 800b7fe:	e7f7      	b.n	800b7f0 <__sfp+0x18>
 800b800:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b804:	b9d5      	cbnz	r5, 800b83c <__sfp+0x64>
 800b806:	4b16      	ldr	r3, [pc, #88]	; (800b860 <__sfp+0x88>)
 800b808:	60e3      	str	r3, [r4, #12]
 800b80a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b80e:	6665      	str	r5, [r4, #100]	; 0x64
 800b810:	f000 f847 	bl	800b8a2 <__retarget_lock_init_recursive>
 800b814:	f7ff ff96 	bl	800b744 <__sfp_lock_release>
 800b818:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b81c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b820:	6025      	str	r5, [r4, #0]
 800b822:	61a5      	str	r5, [r4, #24]
 800b824:	2208      	movs	r2, #8
 800b826:	4629      	mov	r1, r5
 800b828:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b82c:	f7fd fabe 	bl	8008dac <memset>
 800b830:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b834:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b838:	4620      	mov	r0, r4
 800b83a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b83c:	3468      	adds	r4, #104	; 0x68
 800b83e:	e7d9      	b.n	800b7f4 <__sfp+0x1c>
 800b840:	2104      	movs	r1, #4
 800b842:	4638      	mov	r0, r7
 800b844:	f7ff ff62 	bl	800b70c <__sfmoreglue>
 800b848:	4604      	mov	r4, r0
 800b84a:	6030      	str	r0, [r6, #0]
 800b84c:	2800      	cmp	r0, #0
 800b84e:	d1d5      	bne.n	800b7fc <__sfp+0x24>
 800b850:	f7ff ff78 	bl	800b744 <__sfp_lock_release>
 800b854:	230c      	movs	r3, #12
 800b856:	603b      	str	r3, [r7, #0]
 800b858:	e7ee      	b.n	800b838 <__sfp+0x60>
 800b85a:	bf00      	nop
 800b85c:	0800e7dc 	.word	0x0800e7dc
 800b860:	ffff0001 	.word	0xffff0001

0800b864 <_fwalk_reent>:
 800b864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b868:	4606      	mov	r6, r0
 800b86a:	4688      	mov	r8, r1
 800b86c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b870:	2700      	movs	r7, #0
 800b872:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b876:	f1b9 0901 	subs.w	r9, r9, #1
 800b87a:	d505      	bpl.n	800b888 <_fwalk_reent+0x24>
 800b87c:	6824      	ldr	r4, [r4, #0]
 800b87e:	2c00      	cmp	r4, #0
 800b880:	d1f7      	bne.n	800b872 <_fwalk_reent+0xe>
 800b882:	4638      	mov	r0, r7
 800b884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b888:	89ab      	ldrh	r3, [r5, #12]
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d907      	bls.n	800b89e <_fwalk_reent+0x3a>
 800b88e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b892:	3301      	adds	r3, #1
 800b894:	d003      	beq.n	800b89e <_fwalk_reent+0x3a>
 800b896:	4629      	mov	r1, r5
 800b898:	4630      	mov	r0, r6
 800b89a:	47c0      	blx	r8
 800b89c:	4307      	orrs	r7, r0
 800b89e:	3568      	adds	r5, #104	; 0x68
 800b8a0:	e7e9      	b.n	800b876 <_fwalk_reent+0x12>

0800b8a2 <__retarget_lock_init_recursive>:
 800b8a2:	4770      	bx	lr

0800b8a4 <__retarget_lock_acquire_recursive>:
 800b8a4:	4770      	bx	lr

0800b8a6 <__retarget_lock_release_recursive>:
 800b8a6:	4770      	bx	lr

0800b8a8 <__swhatbuf_r>:
 800b8a8:	b570      	push	{r4, r5, r6, lr}
 800b8aa:	460e      	mov	r6, r1
 800b8ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8b0:	2900      	cmp	r1, #0
 800b8b2:	b096      	sub	sp, #88	; 0x58
 800b8b4:	4614      	mov	r4, r2
 800b8b6:	461d      	mov	r5, r3
 800b8b8:	da08      	bge.n	800b8cc <__swhatbuf_r+0x24>
 800b8ba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	602a      	str	r2, [r5, #0]
 800b8c2:	061a      	lsls	r2, r3, #24
 800b8c4:	d410      	bmi.n	800b8e8 <__swhatbuf_r+0x40>
 800b8c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8ca:	e00e      	b.n	800b8ea <__swhatbuf_r+0x42>
 800b8cc:	466a      	mov	r2, sp
 800b8ce:	f000 f903 	bl	800bad8 <_fstat_r>
 800b8d2:	2800      	cmp	r0, #0
 800b8d4:	dbf1      	blt.n	800b8ba <__swhatbuf_r+0x12>
 800b8d6:	9a01      	ldr	r2, [sp, #4]
 800b8d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b8dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b8e0:	425a      	negs	r2, r3
 800b8e2:	415a      	adcs	r2, r3
 800b8e4:	602a      	str	r2, [r5, #0]
 800b8e6:	e7ee      	b.n	800b8c6 <__swhatbuf_r+0x1e>
 800b8e8:	2340      	movs	r3, #64	; 0x40
 800b8ea:	2000      	movs	r0, #0
 800b8ec:	6023      	str	r3, [r4, #0]
 800b8ee:	b016      	add	sp, #88	; 0x58
 800b8f0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b8f4 <__smakebuf_r>:
 800b8f4:	898b      	ldrh	r3, [r1, #12]
 800b8f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8f8:	079d      	lsls	r5, r3, #30
 800b8fa:	4606      	mov	r6, r0
 800b8fc:	460c      	mov	r4, r1
 800b8fe:	d507      	bpl.n	800b910 <__smakebuf_r+0x1c>
 800b900:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b904:	6023      	str	r3, [r4, #0]
 800b906:	6123      	str	r3, [r4, #16]
 800b908:	2301      	movs	r3, #1
 800b90a:	6163      	str	r3, [r4, #20]
 800b90c:	b002      	add	sp, #8
 800b90e:	bd70      	pop	{r4, r5, r6, pc}
 800b910:	ab01      	add	r3, sp, #4
 800b912:	466a      	mov	r2, sp
 800b914:	f7ff ffc8 	bl	800b8a8 <__swhatbuf_r>
 800b918:	9900      	ldr	r1, [sp, #0]
 800b91a:	4605      	mov	r5, r0
 800b91c:	4630      	mov	r0, r6
 800b91e:	f7ff f963 	bl	800abe8 <_malloc_r>
 800b922:	b948      	cbnz	r0, 800b938 <__smakebuf_r+0x44>
 800b924:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b928:	059a      	lsls	r2, r3, #22
 800b92a:	d4ef      	bmi.n	800b90c <__smakebuf_r+0x18>
 800b92c:	f023 0303 	bic.w	r3, r3, #3
 800b930:	f043 0302 	orr.w	r3, r3, #2
 800b934:	81a3      	strh	r3, [r4, #12]
 800b936:	e7e3      	b.n	800b900 <__smakebuf_r+0xc>
 800b938:	4b0d      	ldr	r3, [pc, #52]	; (800b970 <__smakebuf_r+0x7c>)
 800b93a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b93c:	89a3      	ldrh	r3, [r4, #12]
 800b93e:	6020      	str	r0, [r4, #0]
 800b940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b944:	81a3      	strh	r3, [r4, #12]
 800b946:	9b00      	ldr	r3, [sp, #0]
 800b948:	6163      	str	r3, [r4, #20]
 800b94a:	9b01      	ldr	r3, [sp, #4]
 800b94c:	6120      	str	r0, [r4, #16]
 800b94e:	b15b      	cbz	r3, 800b968 <__smakebuf_r+0x74>
 800b950:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b954:	4630      	mov	r0, r6
 800b956:	f000 f8d1 	bl	800bafc <_isatty_r>
 800b95a:	b128      	cbz	r0, 800b968 <__smakebuf_r+0x74>
 800b95c:	89a3      	ldrh	r3, [r4, #12]
 800b95e:	f023 0303 	bic.w	r3, r3, #3
 800b962:	f043 0301 	orr.w	r3, r3, #1
 800b966:	81a3      	strh	r3, [r4, #12]
 800b968:	89a0      	ldrh	r0, [r4, #12]
 800b96a:	4305      	orrs	r5, r0
 800b96c:	81a5      	strh	r5, [r4, #12]
 800b96e:	e7cd      	b.n	800b90c <__smakebuf_r+0x18>
 800b970:	0800b701 	.word	0x0800b701

0800b974 <_malloc_usable_size_r>:
 800b974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b978:	1f18      	subs	r0, r3, #4
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	bfbc      	itt	lt
 800b97e:	580b      	ldrlt	r3, [r1, r0]
 800b980:	18c0      	addlt	r0, r0, r3
 800b982:	4770      	bx	lr

0800b984 <_raise_r>:
 800b984:	291f      	cmp	r1, #31
 800b986:	b538      	push	{r3, r4, r5, lr}
 800b988:	4604      	mov	r4, r0
 800b98a:	460d      	mov	r5, r1
 800b98c:	d904      	bls.n	800b998 <_raise_r+0x14>
 800b98e:	2316      	movs	r3, #22
 800b990:	6003      	str	r3, [r0, #0]
 800b992:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b996:	bd38      	pop	{r3, r4, r5, pc}
 800b998:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b99a:	b112      	cbz	r2, 800b9a2 <_raise_r+0x1e>
 800b99c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b9a0:	b94b      	cbnz	r3, 800b9b6 <_raise_r+0x32>
 800b9a2:	4620      	mov	r0, r4
 800b9a4:	f000 f830 	bl	800ba08 <_getpid_r>
 800b9a8:	462a      	mov	r2, r5
 800b9aa:	4601      	mov	r1, r0
 800b9ac:	4620      	mov	r0, r4
 800b9ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9b2:	f000 b817 	b.w	800b9e4 <_kill_r>
 800b9b6:	2b01      	cmp	r3, #1
 800b9b8:	d00a      	beq.n	800b9d0 <_raise_r+0x4c>
 800b9ba:	1c59      	adds	r1, r3, #1
 800b9bc:	d103      	bne.n	800b9c6 <_raise_r+0x42>
 800b9be:	2316      	movs	r3, #22
 800b9c0:	6003      	str	r3, [r0, #0]
 800b9c2:	2001      	movs	r0, #1
 800b9c4:	e7e7      	b.n	800b996 <_raise_r+0x12>
 800b9c6:	2400      	movs	r4, #0
 800b9c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b9cc:	4628      	mov	r0, r5
 800b9ce:	4798      	blx	r3
 800b9d0:	2000      	movs	r0, #0
 800b9d2:	e7e0      	b.n	800b996 <_raise_r+0x12>

0800b9d4 <raise>:
 800b9d4:	4b02      	ldr	r3, [pc, #8]	; (800b9e0 <raise+0xc>)
 800b9d6:	4601      	mov	r1, r0
 800b9d8:	6818      	ldr	r0, [r3, #0]
 800b9da:	f7ff bfd3 	b.w	800b984 <_raise_r>
 800b9de:	bf00      	nop
 800b9e0:	20000014 	.word	0x20000014

0800b9e4 <_kill_r>:
 800b9e4:	b538      	push	{r3, r4, r5, lr}
 800b9e6:	4d07      	ldr	r5, [pc, #28]	; (800ba04 <_kill_r+0x20>)
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	4604      	mov	r4, r0
 800b9ec:	4608      	mov	r0, r1
 800b9ee:	4611      	mov	r1, r2
 800b9f0:	602b      	str	r3, [r5, #0]
 800b9f2:	f7f8 f801 	bl	80039f8 <_kill>
 800b9f6:	1c43      	adds	r3, r0, #1
 800b9f8:	d102      	bne.n	800ba00 <_kill_r+0x1c>
 800b9fa:	682b      	ldr	r3, [r5, #0]
 800b9fc:	b103      	cbz	r3, 800ba00 <_kill_r+0x1c>
 800b9fe:	6023      	str	r3, [r4, #0]
 800ba00:	bd38      	pop	{r3, r4, r5, pc}
 800ba02:	bf00      	nop
 800ba04:	200006b0 	.word	0x200006b0

0800ba08 <_getpid_r>:
 800ba08:	f7f7 bfee 	b.w	80039e8 <_getpid>

0800ba0c <__sread>:
 800ba0c:	b510      	push	{r4, lr}
 800ba0e:	460c      	mov	r4, r1
 800ba10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba14:	f000 f894 	bl	800bb40 <_read_r>
 800ba18:	2800      	cmp	r0, #0
 800ba1a:	bfab      	itete	ge
 800ba1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba1e:	89a3      	ldrhlt	r3, [r4, #12]
 800ba20:	181b      	addge	r3, r3, r0
 800ba22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba26:	bfac      	ite	ge
 800ba28:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba2a:	81a3      	strhlt	r3, [r4, #12]
 800ba2c:	bd10      	pop	{r4, pc}

0800ba2e <__swrite>:
 800ba2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba32:	461f      	mov	r7, r3
 800ba34:	898b      	ldrh	r3, [r1, #12]
 800ba36:	05db      	lsls	r3, r3, #23
 800ba38:	4605      	mov	r5, r0
 800ba3a:	460c      	mov	r4, r1
 800ba3c:	4616      	mov	r6, r2
 800ba3e:	d505      	bpl.n	800ba4c <__swrite+0x1e>
 800ba40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba44:	2302      	movs	r3, #2
 800ba46:	2200      	movs	r2, #0
 800ba48:	f000 f868 	bl	800bb1c <_lseek_r>
 800ba4c:	89a3      	ldrh	r3, [r4, #12]
 800ba4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba56:	81a3      	strh	r3, [r4, #12]
 800ba58:	4632      	mov	r2, r6
 800ba5a:	463b      	mov	r3, r7
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba62:	f000 b817 	b.w	800ba94 <_write_r>

0800ba66 <__sseek>:
 800ba66:	b510      	push	{r4, lr}
 800ba68:	460c      	mov	r4, r1
 800ba6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba6e:	f000 f855 	bl	800bb1c <_lseek_r>
 800ba72:	1c43      	adds	r3, r0, #1
 800ba74:	89a3      	ldrh	r3, [r4, #12]
 800ba76:	bf15      	itete	ne
 800ba78:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba82:	81a3      	strheq	r3, [r4, #12]
 800ba84:	bf18      	it	ne
 800ba86:	81a3      	strhne	r3, [r4, #12]
 800ba88:	bd10      	pop	{r4, pc}

0800ba8a <__sclose>:
 800ba8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba8e:	f000 b813 	b.w	800bab8 <_close_r>
	...

0800ba94 <_write_r>:
 800ba94:	b538      	push	{r3, r4, r5, lr}
 800ba96:	4d07      	ldr	r5, [pc, #28]	; (800bab4 <_write_r+0x20>)
 800ba98:	4604      	mov	r4, r0
 800ba9a:	4608      	mov	r0, r1
 800ba9c:	4611      	mov	r1, r2
 800ba9e:	2200      	movs	r2, #0
 800baa0:	602a      	str	r2, [r5, #0]
 800baa2:	461a      	mov	r2, r3
 800baa4:	f7f7 ffdf 	bl	8003a66 <_write>
 800baa8:	1c43      	adds	r3, r0, #1
 800baaa:	d102      	bne.n	800bab2 <_write_r+0x1e>
 800baac:	682b      	ldr	r3, [r5, #0]
 800baae:	b103      	cbz	r3, 800bab2 <_write_r+0x1e>
 800bab0:	6023      	str	r3, [r4, #0]
 800bab2:	bd38      	pop	{r3, r4, r5, pc}
 800bab4:	200006b0 	.word	0x200006b0

0800bab8 <_close_r>:
 800bab8:	b538      	push	{r3, r4, r5, lr}
 800baba:	4d06      	ldr	r5, [pc, #24]	; (800bad4 <_close_r+0x1c>)
 800babc:	2300      	movs	r3, #0
 800babe:	4604      	mov	r4, r0
 800bac0:	4608      	mov	r0, r1
 800bac2:	602b      	str	r3, [r5, #0]
 800bac4:	f7f7 ffeb 	bl	8003a9e <_close>
 800bac8:	1c43      	adds	r3, r0, #1
 800baca:	d102      	bne.n	800bad2 <_close_r+0x1a>
 800bacc:	682b      	ldr	r3, [r5, #0]
 800bace:	b103      	cbz	r3, 800bad2 <_close_r+0x1a>
 800bad0:	6023      	str	r3, [r4, #0]
 800bad2:	bd38      	pop	{r3, r4, r5, pc}
 800bad4:	200006b0 	.word	0x200006b0

0800bad8 <_fstat_r>:
 800bad8:	b538      	push	{r3, r4, r5, lr}
 800bada:	4d07      	ldr	r5, [pc, #28]	; (800baf8 <_fstat_r+0x20>)
 800badc:	2300      	movs	r3, #0
 800bade:	4604      	mov	r4, r0
 800bae0:	4608      	mov	r0, r1
 800bae2:	4611      	mov	r1, r2
 800bae4:	602b      	str	r3, [r5, #0]
 800bae6:	f7f7 ffe6 	bl	8003ab6 <_fstat>
 800baea:	1c43      	adds	r3, r0, #1
 800baec:	d102      	bne.n	800baf4 <_fstat_r+0x1c>
 800baee:	682b      	ldr	r3, [r5, #0]
 800baf0:	b103      	cbz	r3, 800baf4 <_fstat_r+0x1c>
 800baf2:	6023      	str	r3, [r4, #0]
 800baf4:	bd38      	pop	{r3, r4, r5, pc}
 800baf6:	bf00      	nop
 800baf8:	200006b0 	.word	0x200006b0

0800bafc <_isatty_r>:
 800bafc:	b538      	push	{r3, r4, r5, lr}
 800bafe:	4d06      	ldr	r5, [pc, #24]	; (800bb18 <_isatty_r+0x1c>)
 800bb00:	2300      	movs	r3, #0
 800bb02:	4604      	mov	r4, r0
 800bb04:	4608      	mov	r0, r1
 800bb06:	602b      	str	r3, [r5, #0]
 800bb08:	f7f7 ffe5 	bl	8003ad6 <_isatty>
 800bb0c:	1c43      	adds	r3, r0, #1
 800bb0e:	d102      	bne.n	800bb16 <_isatty_r+0x1a>
 800bb10:	682b      	ldr	r3, [r5, #0]
 800bb12:	b103      	cbz	r3, 800bb16 <_isatty_r+0x1a>
 800bb14:	6023      	str	r3, [r4, #0]
 800bb16:	bd38      	pop	{r3, r4, r5, pc}
 800bb18:	200006b0 	.word	0x200006b0

0800bb1c <_lseek_r>:
 800bb1c:	b538      	push	{r3, r4, r5, lr}
 800bb1e:	4d07      	ldr	r5, [pc, #28]	; (800bb3c <_lseek_r+0x20>)
 800bb20:	4604      	mov	r4, r0
 800bb22:	4608      	mov	r0, r1
 800bb24:	4611      	mov	r1, r2
 800bb26:	2200      	movs	r2, #0
 800bb28:	602a      	str	r2, [r5, #0]
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	f7f7 ffde 	bl	8003aec <_lseek>
 800bb30:	1c43      	adds	r3, r0, #1
 800bb32:	d102      	bne.n	800bb3a <_lseek_r+0x1e>
 800bb34:	682b      	ldr	r3, [r5, #0]
 800bb36:	b103      	cbz	r3, 800bb3a <_lseek_r+0x1e>
 800bb38:	6023      	str	r3, [r4, #0]
 800bb3a:	bd38      	pop	{r3, r4, r5, pc}
 800bb3c:	200006b0 	.word	0x200006b0

0800bb40 <_read_r>:
 800bb40:	b538      	push	{r3, r4, r5, lr}
 800bb42:	4d07      	ldr	r5, [pc, #28]	; (800bb60 <_read_r+0x20>)
 800bb44:	4604      	mov	r4, r0
 800bb46:	4608      	mov	r0, r1
 800bb48:	4611      	mov	r1, r2
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	602a      	str	r2, [r5, #0]
 800bb4e:	461a      	mov	r2, r3
 800bb50:	f7f7 ff6c 	bl	8003a2c <_read>
 800bb54:	1c43      	adds	r3, r0, #1
 800bb56:	d102      	bne.n	800bb5e <_read_r+0x1e>
 800bb58:	682b      	ldr	r3, [r5, #0]
 800bb5a:	b103      	cbz	r3, 800bb5e <_read_r+0x1e>
 800bb5c:	6023      	str	r3, [r4, #0]
 800bb5e:	bd38      	pop	{r3, r4, r5, pc}
 800bb60:	200006b0 	.word	0x200006b0
 800bb64:	00000000 	.word	0x00000000

0800bb68 <atan>:
 800bb68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb6c:	ec55 4b10 	vmov	r4, r5, d0
 800bb70:	4bc3      	ldr	r3, [pc, #780]	; (800be80 <atan+0x318>)
 800bb72:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bb76:	429e      	cmp	r6, r3
 800bb78:	46ab      	mov	fp, r5
 800bb7a:	dd18      	ble.n	800bbae <atan+0x46>
 800bb7c:	4bc1      	ldr	r3, [pc, #772]	; (800be84 <atan+0x31c>)
 800bb7e:	429e      	cmp	r6, r3
 800bb80:	dc01      	bgt.n	800bb86 <atan+0x1e>
 800bb82:	d109      	bne.n	800bb98 <atan+0x30>
 800bb84:	b144      	cbz	r4, 800bb98 <atan+0x30>
 800bb86:	4622      	mov	r2, r4
 800bb88:	462b      	mov	r3, r5
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	4629      	mov	r1, r5
 800bb8e:	f7f4 fb7d 	bl	800028c <__adddf3>
 800bb92:	4604      	mov	r4, r0
 800bb94:	460d      	mov	r5, r1
 800bb96:	e006      	b.n	800bba6 <atan+0x3e>
 800bb98:	f1bb 0f00 	cmp.w	fp, #0
 800bb9c:	f300 8131 	bgt.w	800be02 <atan+0x29a>
 800bba0:	a59b      	add	r5, pc, #620	; (adr r5, 800be10 <atan+0x2a8>)
 800bba2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bba6:	ec45 4b10 	vmov	d0, r4, r5
 800bbaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbae:	4bb6      	ldr	r3, [pc, #728]	; (800be88 <atan+0x320>)
 800bbb0:	429e      	cmp	r6, r3
 800bbb2:	dc14      	bgt.n	800bbde <atan+0x76>
 800bbb4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bbb8:	429e      	cmp	r6, r3
 800bbba:	dc0d      	bgt.n	800bbd8 <atan+0x70>
 800bbbc:	a396      	add	r3, pc, #600	; (adr r3, 800be18 <atan+0x2b0>)
 800bbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc2:	ee10 0a10 	vmov	r0, s0
 800bbc6:	4629      	mov	r1, r5
 800bbc8:	f7f4 fb60 	bl	800028c <__adddf3>
 800bbcc:	4baf      	ldr	r3, [pc, #700]	; (800be8c <atan+0x324>)
 800bbce:	2200      	movs	r2, #0
 800bbd0:	f7f4 ffa2 	bl	8000b18 <__aeabi_dcmpgt>
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	d1e6      	bne.n	800bba6 <atan+0x3e>
 800bbd8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800bbdc:	e02b      	b.n	800bc36 <atan+0xce>
 800bbde:	f000 f9b7 	bl	800bf50 <fabs>
 800bbe2:	4bab      	ldr	r3, [pc, #684]	; (800be90 <atan+0x328>)
 800bbe4:	429e      	cmp	r6, r3
 800bbe6:	ec55 4b10 	vmov	r4, r5, d0
 800bbea:	f300 80bf 	bgt.w	800bd6c <atan+0x204>
 800bbee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bbf2:	429e      	cmp	r6, r3
 800bbf4:	f300 80a0 	bgt.w	800bd38 <atan+0x1d0>
 800bbf8:	ee10 2a10 	vmov	r2, s0
 800bbfc:	ee10 0a10 	vmov	r0, s0
 800bc00:	462b      	mov	r3, r5
 800bc02:	4629      	mov	r1, r5
 800bc04:	f7f4 fb42 	bl	800028c <__adddf3>
 800bc08:	4ba0      	ldr	r3, [pc, #640]	; (800be8c <atan+0x324>)
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	f7f4 fb3c 	bl	8000288 <__aeabi_dsub>
 800bc10:	2200      	movs	r2, #0
 800bc12:	4606      	mov	r6, r0
 800bc14:	460f      	mov	r7, r1
 800bc16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	4629      	mov	r1, r5
 800bc1e:	f7f4 fb35 	bl	800028c <__adddf3>
 800bc22:	4602      	mov	r2, r0
 800bc24:	460b      	mov	r3, r1
 800bc26:	4630      	mov	r0, r6
 800bc28:	4639      	mov	r1, r7
 800bc2a:	f7f4 fe0f 	bl	800084c <__aeabi_ddiv>
 800bc2e:	f04f 0a00 	mov.w	sl, #0
 800bc32:	4604      	mov	r4, r0
 800bc34:	460d      	mov	r5, r1
 800bc36:	4622      	mov	r2, r4
 800bc38:	462b      	mov	r3, r5
 800bc3a:	4620      	mov	r0, r4
 800bc3c:	4629      	mov	r1, r5
 800bc3e:	f7f4 fcdb 	bl	80005f8 <__aeabi_dmul>
 800bc42:	4602      	mov	r2, r0
 800bc44:	460b      	mov	r3, r1
 800bc46:	4680      	mov	r8, r0
 800bc48:	4689      	mov	r9, r1
 800bc4a:	f7f4 fcd5 	bl	80005f8 <__aeabi_dmul>
 800bc4e:	a374      	add	r3, pc, #464	; (adr r3, 800be20 <atan+0x2b8>)
 800bc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc54:	4606      	mov	r6, r0
 800bc56:	460f      	mov	r7, r1
 800bc58:	f7f4 fcce 	bl	80005f8 <__aeabi_dmul>
 800bc5c:	a372      	add	r3, pc, #456	; (adr r3, 800be28 <atan+0x2c0>)
 800bc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc62:	f7f4 fb13 	bl	800028c <__adddf3>
 800bc66:	4632      	mov	r2, r6
 800bc68:	463b      	mov	r3, r7
 800bc6a:	f7f4 fcc5 	bl	80005f8 <__aeabi_dmul>
 800bc6e:	a370      	add	r3, pc, #448	; (adr r3, 800be30 <atan+0x2c8>)
 800bc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc74:	f7f4 fb0a 	bl	800028c <__adddf3>
 800bc78:	4632      	mov	r2, r6
 800bc7a:	463b      	mov	r3, r7
 800bc7c:	f7f4 fcbc 	bl	80005f8 <__aeabi_dmul>
 800bc80:	a36d      	add	r3, pc, #436	; (adr r3, 800be38 <atan+0x2d0>)
 800bc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc86:	f7f4 fb01 	bl	800028c <__adddf3>
 800bc8a:	4632      	mov	r2, r6
 800bc8c:	463b      	mov	r3, r7
 800bc8e:	f7f4 fcb3 	bl	80005f8 <__aeabi_dmul>
 800bc92:	a36b      	add	r3, pc, #428	; (adr r3, 800be40 <atan+0x2d8>)
 800bc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc98:	f7f4 faf8 	bl	800028c <__adddf3>
 800bc9c:	4632      	mov	r2, r6
 800bc9e:	463b      	mov	r3, r7
 800bca0:	f7f4 fcaa 	bl	80005f8 <__aeabi_dmul>
 800bca4:	a368      	add	r3, pc, #416	; (adr r3, 800be48 <atan+0x2e0>)
 800bca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcaa:	f7f4 faef 	bl	800028c <__adddf3>
 800bcae:	4642      	mov	r2, r8
 800bcb0:	464b      	mov	r3, r9
 800bcb2:	f7f4 fca1 	bl	80005f8 <__aeabi_dmul>
 800bcb6:	a366      	add	r3, pc, #408	; (adr r3, 800be50 <atan+0x2e8>)
 800bcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcbc:	4680      	mov	r8, r0
 800bcbe:	4689      	mov	r9, r1
 800bcc0:	4630      	mov	r0, r6
 800bcc2:	4639      	mov	r1, r7
 800bcc4:	f7f4 fc98 	bl	80005f8 <__aeabi_dmul>
 800bcc8:	a363      	add	r3, pc, #396	; (adr r3, 800be58 <atan+0x2f0>)
 800bcca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcce:	f7f4 fadb 	bl	8000288 <__aeabi_dsub>
 800bcd2:	4632      	mov	r2, r6
 800bcd4:	463b      	mov	r3, r7
 800bcd6:	f7f4 fc8f 	bl	80005f8 <__aeabi_dmul>
 800bcda:	a361      	add	r3, pc, #388	; (adr r3, 800be60 <atan+0x2f8>)
 800bcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce0:	f7f4 fad2 	bl	8000288 <__aeabi_dsub>
 800bce4:	4632      	mov	r2, r6
 800bce6:	463b      	mov	r3, r7
 800bce8:	f7f4 fc86 	bl	80005f8 <__aeabi_dmul>
 800bcec:	a35e      	add	r3, pc, #376	; (adr r3, 800be68 <atan+0x300>)
 800bcee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf2:	f7f4 fac9 	bl	8000288 <__aeabi_dsub>
 800bcf6:	4632      	mov	r2, r6
 800bcf8:	463b      	mov	r3, r7
 800bcfa:	f7f4 fc7d 	bl	80005f8 <__aeabi_dmul>
 800bcfe:	a35c      	add	r3, pc, #368	; (adr r3, 800be70 <atan+0x308>)
 800bd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd04:	f7f4 fac0 	bl	8000288 <__aeabi_dsub>
 800bd08:	4632      	mov	r2, r6
 800bd0a:	463b      	mov	r3, r7
 800bd0c:	f7f4 fc74 	bl	80005f8 <__aeabi_dmul>
 800bd10:	4602      	mov	r2, r0
 800bd12:	460b      	mov	r3, r1
 800bd14:	4640      	mov	r0, r8
 800bd16:	4649      	mov	r1, r9
 800bd18:	f7f4 fab8 	bl	800028c <__adddf3>
 800bd1c:	4622      	mov	r2, r4
 800bd1e:	462b      	mov	r3, r5
 800bd20:	f7f4 fc6a 	bl	80005f8 <__aeabi_dmul>
 800bd24:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800bd28:	4602      	mov	r2, r0
 800bd2a:	460b      	mov	r3, r1
 800bd2c:	d14b      	bne.n	800bdc6 <atan+0x25e>
 800bd2e:	4620      	mov	r0, r4
 800bd30:	4629      	mov	r1, r5
 800bd32:	f7f4 faa9 	bl	8000288 <__aeabi_dsub>
 800bd36:	e72c      	b.n	800bb92 <atan+0x2a>
 800bd38:	ee10 0a10 	vmov	r0, s0
 800bd3c:	4b53      	ldr	r3, [pc, #332]	; (800be8c <atan+0x324>)
 800bd3e:	2200      	movs	r2, #0
 800bd40:	4629      	mov	r1, r5
 800bd42:	f7f4 faa1 	bl	8000288 <__aeabi_dsub>
 800bd46:	4b51      	ldr	r3, [pc, #324]	; (800be8c <atan+0x324>)
 800bd48:	4606      	mov	r6, r0
 800bd4a:	460f      	mov	r7, r1
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	4620      	mov	r0, r4
 800bd50:	4629      	mov	r1, r5
 800bd52:	f7f4 fa9b 	bl	800028c <__adddf3>
 800bd56:	4602      	mov	r2, r0
 800bd58:	460b      	mov	r3, r1
 800bd5a:	4630      	mov	r0, r6
 800bd5c:	4639      	mov	r1, r7
 800bd5e:	f7f4 fd75 	bl	800084c <__aeabi_ddiv>
 800bd62:	f04f 0a01 	mov.w	sl, #1
 800bd66:	4604      	mov	r4, r0
 800bd68:	460d      	mov	r5, r1
 800bd6a:	e764      	b.n	800bc36 <atan+0xce>
 800bd6c:	4b49      	ldr	r3, [pc, #292]	; (800be94 <atan+0x32c>)
 800bd6e:	429e      	cmp	r6, r3
 800bd70:	da1d      	bge.n	800bdae <atan+0x246>
 800bd72:	ee10 0a10 	vmov	r0, s0
 800bd76:	4b48      	ldr	r3, [pc, #288]	; (800be98 <atan+0x330>)
 800bd78:	2200      	movs	r2, #0
 800bd7a:	4629      	mov	r1, r5
 800bd7c:	f7f4 fa84 	bl	8000288 <__aeabi_dsub>
 800bd80:	4b45      	ldr	r3, [pc, #276]	; (800be98 <atan+0x330>)
 800bd82:	4606      	mov	r6, r0
 800bd84:	460f      	mov	r7, r1
 800bd86:	2200      	movs	r2, #0
 800bd88:	4620      	mov	r0, r4
 800bd8a:	4629      	mov	r1, r5
 800bd8c:	f7f4 fc34 	bl	80005f8 <__aeabi_dmul>
 800bd90:	4b3e      	ldr	r3, [pc, #248]	; (800be8c <atan+0x324>)
 800bd92:	2200      	movs	r2, #0
 800bd94:	f7f4 fa7a 	bl	800028c <__adddf3>
 800bd98:	4602      	mov	r2, r0
 800bd9a:	460b      	mov	r3, r1
 800bd9c:	4630      	mov	r0, r6
 800bd9e:	4639      	mov	r1, r7
 800bda0:	f7f4 fd54 	bl	800084c <__aeabi_ddiv>
 800bda4:	f04f 0a02 	mov.w	sl, #2
 800bda8:	4604      	mov	r4, r0
 800bdaa:	460d      	mov	r5, r1
 800bdac:	e743      	b.n	800bc36 <atan+0xce>
 800bdae:	462b      	mov	r3, r5
 800bdb0:	ee10 2a10 	vmov	r2, s0
 800bdb4:	4939      	ldr	r1, [pc, #228]	; (800be9c <atan+0x334>)
 800bdb6:	2000      	movs	r0, #0
 800bdb8:	f7f4 fd48 	bl	800084c <__aeabi_ddiv>
 800bdbc:	f04f 0a03 	mov.w	sl, #3
 800bdc0:	4604      	mov	r4, r0
 800bdc2:	460d      	mov	r5, r1
 800bdc4:	e737      	b.n	800bc36 <atan+0xce>
 800bdc6:	4b36      	ldr	r3, [pc, #216]	; (800bea0 <atan+0x338>)
 800bdc8:	4e36      	ldr	r6, [pc, #216]	; (800bea4 <atan+0x33c>)
 800bdca:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bdce:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800bdd2:	e9da 2300 	ldrd	r2, r3, [sl]
 800bdd6:	f7f4 fa57 	bl	8000288 <__aeabi_dsub>
 800bdda:	4622      	mov	r2, r4
 800bddc:	462b      	mov	r3, r5
 800bdde:	f7f4 fa53 	bl	8000288 <__aeabi_dsub>
 800bde2:	4602      	mov	r2, r0
 800bde4:	460b      	mov	r3, r1
 800bde6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bdea:	f7f4 fa4d 	bl	8000288 <__aeabi_dsub>
 800bdee:	f1bb 0f00 	cmp.w	fp, #0
 800bdf2:	4604      	mov	r4, r0
 800bdf4:	460d      	mov	r5, r1
 800bdf6:	f6bf aed6 	bge.w	800bba6 <atan+0x3e>
 800bdfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bdfe:	461d      	mov	r5, r3
 800be00:	e6d1      	b.n	800bba6 <atan+0x3e>
 800be02:	a51d      	add	r5, pc, #116	; (adr r5, 800be78 <atan+0x310>)
 800be04:	e9d5 4500 	ldrd	r4, r5, [r5]
 800be08:	e6cd      	b.n	800bba6 <atan+0x3e>
 800be0a:	bf00      	nop
 800be0c:	f3af 8000 	nop.w
 800be10:	54442d18 	.word	0x54442d18
 800be14:	bff921fb 	.word	0xbff921fb
 800be18:	8800759c 	.word	0x8800759c
 800be1c:	7e37e43c 	.word	0x7e37e43c
 800be20:	e322da11 	.word	0xe322da11
 800be24:	3f90ad3a 	.word	0x3f90ad3a
 800be28:	24760deb 	.word	0x24760deb
 800be2c:	3fa97b4b 	.word	0x3fa97b4b
 800be30:	a0d03d51 	.word	0xa0d03d51
 800be34:	3fb10d66 	.word	0x3fb10d66
 800be38:	c54c206e 	.word	0xc54c206e
 800be3c:	3fb745cd 	.word	0x3fb745cd
 800be40:	920083ff 	.word	0x920083ff
 800be44:	3fc24924 	.word	0x3fc24924
 800be48:	5555550d 	.word	0x5555550d
 800be4c:	3fd55555 	.word	0x3fd55555
 800be50:	2c6a6c2f 	.word	0x2c6a6c2f
 800be54:	bfa2b444 	.word	0xbfa2b444
 800be58:	52defd9a 	.word	0x52defd9a
 800be5c:	3fadde2d 	.word	0x3fadde2d
 800be60:	af749a6d 	.word	0xaf749a6d
 800be64:	3fb3b0f2 	.word	0x3fb3b0f2
 800be68:	fe231671 	.word	0xfe231671
 800be6c:	3fbc71c6 	.word	0x3fbc71c6
 800be70:	9998ebc4 	.word	0x9998ebc4
 800be74:	3fc99999 	.word	0x3fc99999
 800be78:	54442d18 	.word	0x54442d18
 800be7c:	3ff921fb 	.word	0x3ff921fb
 800be80:	440fffff 	.word	0x440fffff
 800be84:	7ff00000 	.word	0x7ff00000
 800be88:	3fdbffff 	.word	0x3fdbffff
 800be8c:	3ff00000 	.word	0x3ff00000
 800be90:	3ff2ffff 	.word	0x3ff2ffff
 800be94:	40038000 	.word	0x40038000
 800be98:	3ff80000 	.word	0x3ff80000
 800be9c:	bff00000 	.word	0xbff00000
 800bea0:	0800ebd8 	.word	0x0800ebd8
 800bea4:	0800ebb8 	.word	0x0800ebb8

0800bea8 <cos>:
 800bea8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800beaa:	ec53 2b10 	vmov	r2, r3, d0
 800beae:	4826      	ldr	r0, [pc, #152]	; (800bf48 <cos+0xa0>)
 800beb0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800beb4:	4281      	cmp	r1, r0
 800beb6:	dc06      	bgt.n	800bec6 <cos+0x1e>
 800beb8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800bf40 <cos+0x98>
 800bebc:	b005      	add	sp, #20
 800bebe:	f85d eb04 	ldr.w	lr, [sp], #4
 800bec2:	f001 bbfd 	b.w	800d6c0 <__kernel_cos>
 800bec6:	4821      	ldr	r0, [pc, #132]	; (800bf4c <cos+0xa4>)
 800bec8:	4281      	cmp	r1, r0
 800beca:	dd09      	ble.n	800bee0 <cos+0x38>
 800becc:	ee10 0a10 	vmov	r0, s0
 800bed0:	4619      	mov	r1, r3
 800bed2:	f7f4 f9d9 	bl	8000288 <__aeabi_dsub>
 800bed6:	ec41 0b10 	vmov	d0, r0, r1
 800beda:	b005      	add	sp, #20
 800bedc:	f85d fb04 	ldr.w	pc, [sp], #4
 800bee0:	4668      	mov	r0, sp
 800bee2:	f001 f92d 	bl	800d140 <__ieee754_rem_pio2>
 800bee6:	f000 0003 	and.w	r0, r0, #3
 800beea:	2801      	cmp	r0, #1
 800beec:	d00b      	beq.n	800bf06 <cos+0x5e>
 800beee:	2802      	cmp	r0, #2
 800bef0:	d016      	beq.n	800bf20 <cos+0x78>
 800bef2:	b9e0      	cbnz	r0, 800bf2e <cos+0x86>
 800bef4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bef8:	ed9d 0b00 	vldr	d0, [sp]
 800befc:	f001 fbe0 	bl	800d6c0 <__kernel_cos>
 800bf00:	ec51 0b10 	vmov	r0, r1, d0
 800bf04:	e7e7      	b.n	800bed6 <cos+0x2e>
 800bf06:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bf0a:	ed9d 0b00 	vldr	d0, [sp]
 800bf0e:	f001 ffef 	bl	800def0 <__kernel_sin>
 800bf12:	ec53 2b10 	vmov	r2, r3, d0
 800bf16:	ee10 0a10 	vmov	r0, s0
 800bf1a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bf1e:	e7da      	b.n	800bed6 <cos+0x2e>
 800bf20:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bf24:	ed9d 0b00 	vldr	d0, [sp]
 800bf28:	f001 fbca 	bl	800d6c0 <__kernel_cos>
 800bf2c:	e7f1      	b.n	800bf12 <cos+0x6a>
 800bf2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bf32:	ed9d 0b00 	vldr	d0, [sp]
 800bf36:	2001      	movs	r0, #1
 800bf38:	f001 ffda 	bl	800def0 <__kernel_sin>
 800bf3c:	e7e0      	b.n	800bf00 <cos+0x58>
 800bf3e:	bf00      	nop
	...
 800bf48:	3fe921fb 	.word	0x3fe921fb
 800bf4c:	7fefffff 	.word	0x7fefffff

0800bf50 <fabs>:
 800bf50:	ec51 0b10 	vmov	r0, r1, d0
 800bf54:	ee10 2a10 	vmov	r2, s0
 800bf58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bf5c:	ec43 2b10 	vmov	d0, r2, r3
 800bf60:	4770      	bx	lr
 800bf62:	0000      	movs	r0, r0
 800bf64:	0000      	movs	r0, r0
	...

0800bf68 <sin>:
 800bf68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf6a:	ec53 2b10 	vmov	r2, r3, d0
 800bf6e:	4828      	ldr	r0, [pc, #160]	; (800c010 <sin+0xa8>)
 800bf70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bf74:	4281      	cmp	r1, r0
 800bf76:	dc07      	bgt.n	800bf88 <sin+0x20>
 800bf78:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800c008 <sin+0xa0>
 800bf7c:	2000      	movs	r0, #0
 800bf7e:	b005      	add	sp, #20
 800bf80:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf84:	f001 bfb4 	b.w	800def0 <__kernel_sin>
 800bf88:	4822      	ldr	r0, [pc, #136]	; (800c014 <sin+0xac>)
 800bf8a:	4281      	cmp	r1, r0
 800bf8c:	dd09      	ble.n	800bfa2 <sin+0x3a>
 800bf8e:	ee10 0a10 	vmov	r0, s0
 800bf92:	4619      	mov	r1, r3
 800bf94:	f7f4 f978 	bl	8000288 <__aeabi_dsub>
 800bf98:	ec41 0b10 	vmov	d0, r0, r1
 800bf9c:	b005      	add	sp, #20
 800bf9e:	f85d fb04 	ldr.w	pc, [sp], #4
 800bfa2:	4668      	mov	r0, sp
 800bfa4:	f001 f8cc 	bl	800d140 <__ieee754_rem_pio2>
 800bfa8:	f000 0003 	and.w	r0, r0, #3
 800bfac:	2801      	cmp	r0, #1
 800bfae:	d00c      	beq.n	800bfca <sin+0x62>
 800bfb0:	2802      	cmp	r0, #2
 800bfb2:	d011      	beq.n	800bfd8 <sin+0x70>
 800bfb4:	b9f0      	cbnz	r0, 800bff4 <sin+0x8c>
 800bfb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bfba:	ed9d 0b00 	vldr	d0, [sp]
 800bfbe:	2001      	movs	r0, #1
 800bfc0:	f001 ff96 	bl	800def0 <__kernel_sin>
 800bfc4:	ec51 0b10 	vmov	r0, r1, d0
 800bfc8:	e7e6      	b.n	800bf98 <sin+0x30>
 800bfca:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bfce:	ed9d 0b00 	vldr	d0, [sp]
 800bfd2:	f001 fb75 	bl	800d6c0 <__kernel_cos>
 800bfd6:	e7f5      	b.n	800bfc4 <sin+0x5c>
 800bfd8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bfdc:	ed9d 0b00 	vldr	d0, [sp]
 800bfe0:	2001      	movs	r0, #1
 800bfe2:	f001 ff85 	bl	800def0 <__kernel_sin>
 800bfe6:	ec53 2b10 	vmov	r2, r3, d0
 800bfea:	ee10 0a10 	vmov	r0, s0
 800bfee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bff2:	e7d1      	b.n	800bf98 <sin+0x30>
 800bff4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bff8:	ed9d 0b00 	vldr	d0, [sp]
 800bffc:	f001 fb60 	bl	800d6c0 <__kernel_cos>
 800c000:	e7f1      	b.n	800bfe6 <sin+0x7e>
 800c002:	bf00      	nop
 800c004:	f3af 8000 	nop.w
	...
 800c010:	3fe921fb 	.word	0x3fe921fb
 800c014:	7fefffff 	.word	0x7fefffff

0800c018 <tan>:
 800c018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c01a:	ec53 2b10 	vmov	r2, r3, d0
 800c01e:	4816      	ldr	r0, [pc, #88]	; (800c078 <tan+0x60>)
 800c020:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c024:	4281      	cmp	r1, r0
 800c026:	dc07      	bgt.n	800c038 <tan+0x20>
 800c028:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800c070 <tan+0x58>
 800c02c:	2001      	movs	r0, #1
 800c02e:	b005      	add	sp, #20
 800c030:	f85d eb04 	ldr.w	lr, [sp], #4
 800c034:	f002 b81c 	b.w	800e070 <__kernel_tan>
 800c038:	4810      	ldr	r0, [pc, #64]	; (800c07c <tan+0x64>)
 800c03a:	4281      	cmp	r1, r0
 800c03c:	dd09      	ble.n	800c052 <tan+0x3a>
 800c03e:	ee10 0a10 	vmov	r0, s0
 800c042:	4619      	mov	r1, r3
 800c044:	f7f4 f920 	bl	8000288 <__aeabi_dsub>
 800c048:	ec41 0b10 	vmov	d0, r0, r1
 800c04c:	b005      	add	sp, #20
 800c04e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c052:	4668      	mov	r0, sp
 800c054:	f001 f874 	bl	800d140 <__ieee754_rem_pio2>
 800c058:	0040      	lsls	r0, r0, #1
 800c05a:	f000 0002 	and.w	r0, r0, #2
 800c05e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c062:	ed9d 0b00 	vldr	d0, [sp]
 800c066:	f1c0 0001 	rsb	r0, r0, #1
 800c06a:	f002 f801 	bl	800e070 <__kernel_tan>
 800c06e:	e7ed      	b.n	800c04c <tan+0x34>
	...
 800c078:	3fe921fb 	.word	0x3fe921fb
 800c07c:	7fefffff 	.word	0x7fefffff

0800c080 <acos>:
 800c080:	b538      	push	{r3, r4, r5, lr}
 800c082:	ed2d 8b02 	vpush	{d8}
 800c086:	ec55 4b10 	vmov	r4, r5, d0
 800c08a:	f000 f8c9 	bl	800c220 <__ieee754_acos>
 800c08e:	4622      	mov	r2, r4
 800c090:	462b      	mov	r3, r5
 800c092:	4620      	mov	r0, r4
 800c094:	4629      	mov	r1, r5
 800c096:	eeb0 8a40 	vmov.f32	s16, s0
 800c09a:	eef0 8a60 	vmov.f32	s17, s1
 800c09e:	f7f4 fd45 	bl	8000b2c <__aeabi_dcmpun>
 800c0a2:	b9a8      	cbnz	r0, 800c0d0 <acos+0x50>
 800c0a4:	ec45 4b10 	vmov	d0, r4, r5
 800c0a8:	f7ff ff52 	bl	800bf50 <fabs>
 800c0ac:	4b0c      	ldr	r3, [pc, #48]	; (800c0e0 <acos+0x60>)
 800c0ae:	ec51 0b10 	vmov	r0, r1, d0
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	f7f4 fd30 	bl	8000b18 <__aeabi_dcmpgt>
 800c0b8:	b150      	cbz	r0, 800c0d0 <acos+0x50>
 800c0ba:	f7fc fe3f 	bl	8008d3c <__errno>
 800c0be:	ecbd 8b02 	vpop	{d8}
 800c0c2:	2321      	movs	r3, #33	; 0x21
 800c0c4:	6003      	str	r3, [r0, #0]
 800c0c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0ca:	4806      	ldr	r0, [pc, #24]	; (800c0e4 <acos+0x64>)
 800c0cc:	f002 ba98 	b.w	800e600 <nan>
 800c0d0:	eeb0 0a48 	vmov.f32	s0, s16
 800c0d4:	eef0 0a68 	vmov.f32	s1, s17
 800c0d8:	ecbd 8b02 	vpop	{d8}
 800c0dc:	bd38      	pop	{r3, r4, r5, pc}
 800c0de:	bf00      	nop
 800c0e0:	3ff00000 	.word	0x3ff00000
 800c0e4:	0800ea48 	.word	0x0800ea48

0800c0e8 <pow>:
 800c0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ea:	ed2d 8b02 	vpush	{d8}
 800c0ee:	eeb0 8a40 	vmov.f32	s16, s0
 800c0f2:	eef0 8a60 	vmov.f32	s17, s1
 800c0f6:	ec55 4b11 	vmov	r4, r5, d1
 800c0fa:	f000 faf1 	bl	800c6e0 <__ieee754_pow>
 800c0fe:	4622      	mov	r2, r4
 800c100:	462b      	mov	r3, r5
 800c102:	4620      	mov	r0, r4
 800c104:	4629      	mov	r1, r5
 800c106:	ec57 6b10 	vmov	r6, r7, d0
 800c10a:	f7f4 fd0f 	bl	8000b2c <__aeabi_dcmpun>
 800c10e:	2800      	cmp	r0, #0
 800c110:	d13b      	bne.n	800c18a <pow+0xa2>
 800c112:	ec51 0b18 	vmov	r0, r1, d8
 800c116:	2200      	movs	r2, #0
 800c118:	2300      	movs	r3, #0
 800c11a:	f7f4 fcd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800c11e:	b1b8      	cbz	r0, 800c150 <pow+0x68>
 800c120:	2200      	movs	r2, #0
 800c122:	2300      	movs	r3, #0
 800c124:	4620      	mov	r0, r4
 800c126:	4629      	mov	r1, r5
 800c128:	f7f4 fcce 	bl	8000ac8 <__aeabi_dcmpeq>
 800c12c:	2800      	cmp	r0, #0
 800c12e:	d146      	bne.n	800c1be <pow+0xd6>
 800c130:	ec45 4b10 	vmov	d0, r4, r5
 800c134:	f002 f9d6 	bl	800e4e4 <finite>
 800c138:	b338      	cbz	r0, 800c18a <pow+0xa2>
 800c13a:	2200      	movs	r2, #0
 800c13c:	2300      	movs	r3, #0
 800c13e:	4620      	mov	r0, r4
 800c140:	4629      	mov	r1, r5
 800c142:	f7f4 fccb 	bl	8000adc <__aeabi_dcmplt>
 800c146:	b300      	cbz	r0, 800c18a <pow+0xa2>
 800c148:	f7fc fdf8 	bl	8008d3c <__errno>
 800c14c:	2322      	movs	r3, #34	; 0x22
 800c14e:	e01b      	b.n	800c188 <pow+0xa0>
 800c150:	ec47 6b10 	vmov	d0, r6, r7
 800c154:	f002 f9c6 	bl	800e4e4 <finite>
 800c158:	b9e0      	cbnz	r0, 800c194 <pow+0xac>
 800c15a:	eeb0 0a48 	vmov.f32	s0, s16
 800c15e:	eef0 0a68 	vmov.f32	s1, s17
 800c162:	f002 f9bf 	bl	800e4e4 <finite>
 800c166:	b1a8      	cbz	r0, 800c194 <pow+0xac>
 800c168:	ec45 4b10 	vmov	d0, r4, r5
 800c16c:	f002 f9ba 	bl	800e4e4 <finite>
 800c170:	b180      	cbz	r0, 800c194 <pow+0xac>
 800c172:	4632      	mov	r2, r6
 800c174:	463b      	mov	r3, r7
 800c176:	4630      	mov	r0, r6
 800c178:	4639      	mov	r1, r7
 800c17a:	f7f4 fcd7 	bl	8000b2c <__aeabi_dcmpun>
 800c17e:	2800      	cmp	r0, #0
 800c180:	d0e2      	beq.n	800c148 <pow+0x60>
 800c182:	f7fc fddb 	bl	8008d3c <__errno>
 800c186:	2321      	movs	r3, #33	; 0x21
 800c188:	6003      	str	r3, [r0, #0]
 800c18a:	ecbd 8b02 	vpop	{d8}
 800c18e:	ec47 6b10 	vmov	d0, r6, r7
 800c192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c194:	2200      	movs	r2, #0
 800c196:	2300      	movs	r3, #0
 800c198:	4630      	mov	r0, r6
 800c19a:	4639      	mov	r1, r7
 800c19c:	f7f4 fc94 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1a0:	2800      	cmp	r0, #0
 800c1a2:	d0f2      	beq.n	800c18a <pow+0xa2>
 800c1a4:	eeb0 0a48 	vmov.f32	s0, s16
 800c1a8:	eef0 0a68 	vmov.f32	s1, s17
 800c1ac:	f002 f99a 	bl	800e4e4 <finite>
 800c1b0:	2800      	cmp	r0, #0
 800c1b2:	d0ea      	beq.n	800c18a <pow+0xa2>
 800c1b4:	ec45 4b10 	vmov	d0, r4, r5
 800c1b8:	f002 f994 	bl	800e4e4 <finite>
 800c1bc:	e7c3      	b.n	800c146 <pow+0x5e>
 800c1be:	4f01      	ldr	r7, [pc, #4]	; (800c1c4 <pow+0xdc>)
 800c1c0:	2600      	movs	r6, #0
 800c1c2:	e7e2      	b.n	800c18a <pow+0xa2>
 800c1c4:	3ff00000 	.word	0x3ff00000

0800c1c8 <sqrt>:
 800c1c8:	b538      	push	{r3, r4, r5, lr}
 800c1ca:	ed2d 8b02 	vpush	{d8}
 800c1ce:	ec55 4b10 	vmov	r4, r5, d0
 800c1d2:	f001 f9c1 	bl	800d558 <__ieee754_sqrt>
 800c1d6:	4622      	mov	r2, r4
 800c1d8:	462b      	mov	r3, r5
 800c1da:	4620      	mov	r0, r4
 800c1dc:	4629      	mov	r1, r5
 800c1de:	eeb0 8a40 	vmov.f32	s16, s0
 800c1e2:	eef0 8a60 	vmov.f32	s17, s1
 800c1e6:	f7f4 fca1 	bl	8000b2c <__aeabi_dcmpun>
 800c1ea:	b990      	cbnz	r0, 800c212 <sqrt+0x4a>
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	4620      	mov	r0, r4
 800c1f2:	4629      	mov	r1, r5
 800c1f4:	f7f4 fc72 	bl	8000adc <__aeabi_dcmplt>
 800c1f8:	b158      	cbz	r0, 800c212 <sqrt+0x4a>
 800c1fa:	f7fc fd9f 	bl	8008d3c <__errno>
 800c1fe:	2321      	movs	r3, #33	; 0x21
 800c200:	6003      	str	r3, [r0, #0]
 800c202:	2200      	movs	r2, #0
 800c204:	2300      	movs	r3, #0
 800c206:	4610      	mov	r0, r2
 800c208:	4619      	mov	r1, r3
 800c20a:	f7f4 fb1f 	bl	800084c <__aeabi_ddiv>
 800c20e:	ec41 0b18 	vmov	d8, r0, r1
 800c212:	eeb0 0a48 	vmov.f32	s0, s16
 800c216:	eef0 0a68 	vmov.f32	s1, s17
 800c21a:	ecbd 8b02 	vpop	{d8}
 800c21e:	bd38      	pop	{r3, r4, r5, pc}

0800c220 <__ieee754_acos>:
 800c220:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c224:	ec55 4b10 	vmov	r4, r5, d0
 800c228:	49b7      	ldr	r1, [pc, #732]	; (800c508 <__ieee754_acos+0x2e8>)
 800c22a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c22e:	428b      	cmp	r3, r1
 800c230:	dd1b      	ble.n	800c26a <__ieee754_acos+0x4a>
 800c232:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800c236:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c23a:	4323      	orrs	r3, r4
 800c23c:	d106      	bne.n	800c24c <__ieee754_acos+0x2c>
 800c23e:	2d00      	cmp	r5, #0
 800c240:	f300 8211 	bgt.w	800c666 <__ieee754_acos+0x446>
 800c244:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800c4a0 <__ieee754_acos+0x280>
 800c248:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c24c:	ee10 2a10 	vmov	r2, s0
 800c250:	462b      	mov	r3, r5
 800c252:	ee10 0a10 	vmov	r0, s0
 800c256:	4629      	mov	r1, r5
 800c258:	f7f4 f816 	bl	8000288 <__aeabi_dsub>
 800c25c:	4602      	mov	r2, r0
 800c25e:	460b      	mov	r3, r1
 800c260:	f7f4 faf4 	bl	800084c <__aeabi_ddiv>
 800c264:	ec41 0b10 	vmov	d0, r0, r1
 800c268:	e7ee      	b.n	800c248 <__ieee754_acos+0x28>
 800c26a:	49a8      	ldr	r1, [pc, #672]	; (800c50c <__ieee754_acos+0x2ec>)
 800c26c:	428b      	cmp	r3, r1
 800c26e:	f300 8087 	bgt.w	800c380 <__ieee754_acos+0x160>
 800c272:	4aa7      	ldr	r2, [pc, #668]	; (800c510 <__ieee754_acos+0x2f0>)
 800c274:	4293      	cmp	r3, r2
 800c276:	f340 81f9 	ble.w	800c66c <__ieee754_acos+0x44c>
 800c27a:	ee10 2a10 	vmov	r2, s0
 800c27e:	ee10 0a10 	vmov	r0, s0
 800c282:	462b      	mov	r3, r5
 800c284:	4629      	mov	r1, r5
 800c286:	f7f4 f9b7 	bl	80005f8 <__aeabi_dmul>
 800c28a:	a387      	add	r3, pc, #540	; (adr r3, 800c4a8 <__ieee754_acos+0x288>)
 800c28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c290:	4606      	mov	r6, r0
 800c292:	460f      	mov	r7, r1
 800c294:	f7f4 f9b0 	bl	80005f8 <__aeabi_dmul>
 800c298:	a385      	add	r3, pc, #532	; (adr r3, 800c4b0 <__ieee754_acos+0x290>)
 800c29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29e:	f7f3 fff5 	bl	800028c <__adddf3>
 800c2a2:	4632      	mov	r2, r6
 800c2a4:	463b      	mov	r3, r7
 800c2a6:	f7f4 f9a7 	bl	80005f8 <__aeabi_dmul>
 800c2aa:	a383      	add	r3, pc, #524	; (adr r3, 800c4b8 <__ieee754_acos+0x298>)
 800c2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b0:	f7f3 ffea 	bl	8000288 <__aeabi_dsub>
 800c2b4:	4632      	mov	r2, r6
 800c2b6:	463b      	mov	r3, r7
 800c2b8:	f7f4 f99e 	bl	80005f8 <__aeabi_dmul>
 800c2bc:	a380      	add	r3, pc, #512	; (adr r3, 800c4c0 <__ieee754_acos+0x2a0>)
 800c2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c2:	f7f3 ffe3 	bl	800028c <__adddf3>
 800c2c6:	4632      	mov	r2, r6
 800c2c8:	463b      	mov	r3, r7
 800c2ca:	f7f4 f995 	bl	80005f8 <__aeabi_dmul>
 800c2ce:	a37e      	add	r3, pc, #504	; (adr r3, 800c4c8 <__ieee754_acos+0x2a8>)
 800c2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d4:	f7f3 ffd8 	bl	8000288 <__aeabi_dsub>
 800c2d8:	4632      	mov	r2, r6
 800c2da:	463b      	mov	r3, r7
 800c2dc:	f7f4 f98c 	bl	80005f8 <__aeabi_dmul>
 800c2e0:	a37b      	add	r3, pc, #492	; (adr r3, 800c4d0 <__ieee754_acos+0x2b0>)
 800c2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e6:	f7f3 ffd1 	bl	800028c <__adddf3>
 800c2ea:	4632      	mov	r2, r6
 800c2ec:	463b      	mov	r3, r7
 800c2ee:	f7f4 f983 	bl	80005f8 <__aeabi_dmul>
 800c2f2:	a379      	add	r3, pc, #484	; (adr r3, 800c4d8 <__ieee754_acos+0x2b8>)
 800c2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f8:	4680      	mov	r8, r0
 800c2fa:	4689      	mov	r9, r1
 800c2fc:	4630      	mov	r0, r6
 800c2fe:	4639      	mov	r1, r7
 800c300:	f7f4 f97a 	bl	80005f8 <__aeabi_dmul>
 800c304:	a376      	add	r3, pc, #472	; (adr r3, 800c4e0 <__ieee754_acos+0x2c0>)
 800c306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30a:	f7f3 ffbd 	bl	8000288 <__aeabi_dsub>
 800c30e:	4632      	mov	r2, r6
 800c310:	463b      	mov	r3, r7
 800c312:	f7f4 f971 	bl	80005f8 <__aeabi_dmul>
 800c316:	a374      	add	r3, pc, #464	; (adr r3, 800c4e8 <__ieee754_acos+0x2c8>)
 800c318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c31c:	f7f3 ffb6 	bl	800028c <__adddf3>
 800c320:	4632      	mov	r2, r6
 800c322:	463b      	mov	r3, r7
 800c324:	f7f4 f968 	bl	80005f8 <__aeabi_dmul>
 800c328:	a371      	add	r3, pc, #452	; (adr r3, 800c4f0 <__ieee754_acos+0x2d0>)
 800c32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32e:	f7f3 ffab 	bl	8000288 <__aeabi_dsub>
 800c332:	4632      	mov	r2, r6
 800c334:	463b      	mov	r3, r7
 800c336:	f7f4 f95f 	bl	80005f8 <__aeabi_dmul>
 800c33a:	4b76      	ldr	r3, [pc, #472]	; (800c514 <__ieee754_acos+0x2f4>)
 800c33c:	2200      	movs	r2, #0
 800c33e:	f7f3 ffa5 	bl	800028c <__adddf3>
 800c342:	4602      	mov	r2, r0
 800c344:	460b      	mov	r3, r1
 800c346:	4640      	mov	r0, r8
 800c348:	4649      	mov	r1, r9
 800c34a:	f7f4 fa7f 	bl	800084c <__aeabi_ddiv>
 800c34e:	4622      	mov	r2, r4
 800c350:	462b      	mov	r3, r5
 800c352:	f7f4 f951 	bl	80005f8 <__aeabi_dmul>
 800c356:	4602      	mov	r2, r0
 800c358:	460b      	mov	r3, r1
 800c35a:	a167      	add	r1, pc, #412	; (adr r1, 800c4f8 <__ieee754_acos+0x2d8>)
 800c35c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c360:	f7f3 ff92 	bl	8000288 <__aeabi_dsub>
 800c364:	4602      	mov	r2, r0
 800c366:	460b      	mov	r3, r1
 800c368:	4620      	mov	r0, r4
 800c36a:	4629      	mov	r1, r5
 800c36c:	f7f3 ff8c 	bl	8000288 <__aeabi_dsub>
 800c370:	4602      	mov	r2, r0
 800c372:	460b      	mov	r3, r1
 800c374:	a162      	add	r1, pc, #392	; (adr r1, 800c500 <__ieee754_acos+0x2e0>)
 800c376:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c37a:	f7f3 ff85 	bl	8000288 <__aeabi_dsub>
 800c37e:	e771      	b.n	800c264 <__ieee754_acos+0x44>
 800c380:	2d00      	cmp	r5, #0
 800c382:	f280 80cb 	bge.w	800c51c <__ieee754_acos+0x2fc>
 800c386:	ee10 0a10 	vmov	r0, s0
 800c38a:	4b62      	ldr	r3, [pc, #392]	; (800c514 <__ieee754_acos+0x2f4>)
 800c38c:	2200      	movs	r2, #0
 800c38e:	4629      	mov	r1, r5
 800c390:	f7f3 ff7c 	bl	800028c <__adddf3>
 800c394:	4b60      	ldr	r3, [pc, #384]	; (800c518 <__ieee754_acos+0x2f8>)
 800c396:	2200      	movs	r2, #0
 800c398:	f7f4 f92e 	bl	80005f8 <__aeabi_dmul>
 800c39c:	a342      	add	r3, pc, #264	; (adr r3, 800c4a8 <__ieee754_acos+0x288>)
 800c39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a2:	4604      	mov	r4, r0
 800c3a4:	460d      	mov	r5, r1
 800c3a6:	f7f4 f927 	bl	80005f8 <__aeabi_dmul>
 800c3aa:	a341      	add	r3, pc, #260	; (adr r3, 800c4b0 <__ieee754_acos+0x290>)
 800c3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b0:	f7f3 ff6c 	bl	800028c <__adddf3>
 800c3b4:	4622      	mov	r2, r4
 800c3b6:	462b      	mov	r3, r5
 800c3b8:	f7f4 f91e 	bl	80005f8 <__aeabi_dmul>
 800c3bc:	a33e      	add	r3, pc, #248	; (adr r3, 800c4b8 <__ieee754_acos+0x298>)
 800c3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c2:	f7f3 ff61 	bl	8000288 <__aeabi_dsub>
 800c3c6:	4622      	mov	r2, r4
 800c3c8:	462b      	mov	r3, r5
 800c3ca:	f7f4 f915 	bl	80005f8 <__aeabi_dmul>
 800c3ce:	a33c      	add	r3, pc, #240	; (adr r3, 800c4c0 <__ieee754_acos+0x2a0>)
 800c3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d4:	f7f3 ff5a 	bl	800028c <__adddf3>
 800c3d8:	4622      	mov	r2, r4
 800c3da:	462b      	mov	r3, r5
 800c3dc:	f7f4 f90c 	bl	80005f8 <__aeabi_dmul>
 800c3e0:	a339      	add	r3, pc, #228	; (adr r3, 800c4c8 <__ieee754_acos+0x2a8>)
 800c3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e6:	f7f3 ff4f 	bl	8000288 <__aeabi_dsub>
 800c3ea:	4622      	mov	r2, r4
 800c3ec:	462b      	mov	r3, r5
 800c3ee:	f7f4 f903 	bl	80005f8 <__aeabi_dmul>
 800c3f2:	a337      	add	r3, pc, #220	; (adr r3, 800c4d0 <__ieee754_acos+0x2b0>)
 800c3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f8:	f7f3 ff48 	bl	800028c <__adddf3>
 800c3fc:	4622      	mov	r2, r4
 800c3fe:	462b      	mov	r3, r5
 800c400:	f7f4 f8fa 	bl	80005f8 <__aeabi_dmul>
 800c404:	ec45 4b10 	vmov	d0, r4, r5
 800c408:	4680      	mov	r8, r0
 800c40a:	4689      	mov	r9, r1
 800c40c:	f001 f8a4 	bl	800d558 <__ieee754_sqrt>
 800c410:	a331      	add	r3, pc, #196	; (adr r3, 800c4d8 <__ieee754_acos+0x2b8>)
 800c412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c416:	4620      	mov	r0, r4
 800c418:	4629      	mov	r1, r5
 800c41a:	ec57 6b10 	vmov	r6, r7, d0
 800c41e:	f7f4 f8eb 	bl	80005f8 <__aeabi_dmul>
 800c422:	a32f      	add	r3, pc, #188	; (adr r3, 800c4e0 <__ieee754_acos+0x2c0>)
 800c424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c428:	f7f3 ff2e 	bl	8000288 <__aeabi_dsub>
 800c42c:	4622      	mov	r2, r4
 800c42e:	462b      	mov	r3, r5
 800c430:	f7f4 f8e2 	bl	80005f8 <__aeabi_dmul>
 800c434:	a32c      	add	r3, pc, #176	; (adr r3, 800c4e8 <__ieee754_acos+0x2c8>)
 800c436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c43a:	f7f3 ff27 	bl	800028c <__adddf3>
 800c43e:	4622      	mov	r2, r4
 800c440:	462b      	mov	r3, r5
 800c442:	f7f4 f8d9 	bl	80005f8 <__aeabi_dmul>
 800c446:	a32a      	add	r3, pc, #168	; (adr r3, 800c4f0 <__ieee754_acos+0x2d0>)
 800c448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44c:	f7f3 ff1c 	bl	8000288 <__aeabi_dsub>
 800c450:	4622      	mov	r2, r4
 800c452:	462b      	mov	r3, r5
 800c454:	f7f4 f8d0 	bl	80005f8 <__aeabi_dmul>
 800c458:	4b2e      	ldr	r3, [pc, #184]	; (800c514 <__ieee754_acos+0x2f4>)
 800c45a:	2200      	movs	r2, #0
 800c45c:	f7f3 ff16 	bl	800028c <__adddf3>
 800c460:	4602      	mov	r2, r0
 800c462:	460b      	mov	r3, r1
 800c464:	4640      	mov	r0, r8
 800c466:	4649      	mov	r1, r9
 800c468:	f7f4 f9f0 	bl	800084c <__aeabi_ddiv>
 800c46c:	4632      	mov	r2, r6
 800c46e:	463b      	mov	r3, r7
 800c470:	f7f4 f8c2 	bl	80005f8 <__aeabi_dmul>
 800c474:	a320      	add	r3, pc, #128	; (adr r3, 800c4f8 <__ieee754_acos+0x2d8>)
 800c476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c47a:	f7f3 ff05 	bl	8000288 <__aeabi_dsub>
 800c47e:	4632      	mov	r2, r6
 800c480:	463b      	mov	r3, r7
 800c482:	f7f3 ff03 	bl	800028c <__adddf3>
 800c486:	4602      	mov	r2, r0
 800c488:	460b      	mov	r3, r1
 800c48a:	f7f3 feff 	bl	800028c <__adddf3>
 800c48e:	4602      	mov	r2, r0
 800c490:	460b      	mov	r3, r1
 800c492:	a103      	add	r1, pc, #12	; (adr r1, 800c4a0 <__ieee754_acos+0x280>)
 800c494:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c498:	e76f      	b.n	800c37a <__ieee754_acos+0x15a>
 800c49a:	bf00      	nop
 800c49c:	f3af 8000 	nop.w
 800c4a0:	54442d18 	.word	0x54442d18
 800c4a4:	400921fb 	.word	0x400921fb
 800c4a8:	0dfdf709 	.word	0x0dfdf709
 800c4ac:	3f023de1 	.word	0x3f023de1
 800c4b0:	7501b288 	.word	0x7501b288
 800c4b4:	3f49efe0 	.word	0x3f49efe0
 800c4b8:	b5688f3b 	.word	0xb5688f3b
 800c4bc:	3fa48228 	.word	0x3fa48228
 800c4c0:	0e884455 	.word	0x0e884455
 800c4c4:	3fc9c155 	.word	0x3fc9c155
 800c4c8:	03eb6f7d 	.word	0x03eb6f7d
 800c4cc:	3fd4d612 	.word	0x3fd4d612
 800c4d0:	55555555 	.word	0x55555555
 800c4d4:	3fc55555 	.word	0x3fc55555
 800c4d8:	b12e9282 	.word	0xb12e9282
 800c4dc:	3fb3b8c5 	.word	0x3fb3b8c5
 800c4e0:	1b8d0159 	.word	0x1b8d0159
 800c4e4:	3fe6066c 	.word	0x3fe6066c
 800c4e8:	9c598ac8 	.word	0x9c598ac8
 800c4ec:	40002ae5 	.word	0x40002ae5
 800c4f0:	1c8a2d4b 	.word	0x1c8a2d4b
 800c4f4:	40033a27 	.word	0x40033a27
 800c4f8:	33145c07 	.word	0x33145c07
 800c4fc:	3c91a626 	.word	0x3c91a626
 800c500:	54442d18 	.word	0x54442d18
 800c504:	3ff921fb 	.word	0x3ff921fb
 800c508:	3fefffff 	.word	0x3fefffff
 800c50c:	3fdfffff 	.word	0x3fdfffff
 800c510:	3c600000 	.word	0x3c600000
 800c514:	3ff00000 	.word	0x3ff00000
 800c518:	3fe00000 	.word	0x3fe00000
 800c51c:	ee10 2a10 	vmov	r2, s0
 800c520:	462b      	mov	r3, r5
 800c522:	496d      	ldr	r1, [pc, #436]	; (800c6d8 <__ieee754_acos+0x4b8>)
 800c524:	2000      	movs	r0, #0
 800c526:	f7f3 feaf 	bl	8000288 <__aeabi_dsub>
 800c52a:	4b6c      	ldr	r3, [pc, #432]	; (800c6dc <__ieee754_acos+0x4bc>)
 800c52c:	2200      	movs	r2, #0
 800c52e:	f7f4 f863 	bl	80005f8 <__aeabi_dmul>
 800c532:	4604      	mov	r4, r0
 800c534:	460d      	mov	r5, r1
 800c536:	ec45 4b10 	vmov	d0, r4, r5
 800c53a:	f001 f80d 	bl	800d558 <__ieee754_sqrt>
 800c53e:	a34e      	add	r3, pc, #312	; (adr r3, 800c678 <__ieee754_acos+0x458>)
 800c540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c544:	4620      	mov	r0, r4
 800c546:	4629      	mov	r1, r5
 800c548:	ec59 8b10 	vmov	r8, r9, d0
 800c54c:	f7f4 f854 	bl	80005f8 <__aeabi_dmul>
 800c550:	a34b      	add	r3, pc, #300	; (adr r3, 800c680 <__ieee754_acos+0x460>)
 800c552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c556:	f7f3 fe99 	bl	800028c <__adddf3>
 800c55a:	4622      	mov	r2, r4
 800c55c:	462b      	mov	r3, r5
 800c55e:	f7f4 f84b 	bl	80005f8 <__aeabi_dmul>
 800c562:	a349      	add	r3, pc, #292	; (adr r3, 800c688 <__ieee754_acos+0x468>)
 800c564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c568:	f7f3 fe8e 	bl	8000288 <__aeabi_dsub>
 800c56c:	4622      	mov	r2, r4
 800c56e:	462b      	mov	r3, r5
 800c570:	f7f4 f842 	bl	80005f8 <__aeabi_dmul>
 800c574:	a346      	add	r3, pc, #280	; (adr r3, 800c690 <__ieee754_acos+0x470>)
 800c576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57a:	f7f3 fe87 	bl	800028c <__adddf3>
 800c57e:	4622      	mov	r2, r4
 800c580:	462b      	mov	r3, r5
 800c582:	f7f4 f839 	bl	80005f8 <__aeabi_dmul>
 800c586:	a344      	add	r3, pc, #272	; (adr r3, 800c698 <__ieee754_acos+0x478>)
 800c588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c58c:	f7f3 fe7c 	bl	8000288 <__aeabi_dsub>
 800c590:	4622      	mov	r2, r4
 800c592:	462b      	mov	r3, r5
 800c594:	f7f4 f830 	bl	80005f8 <__aeabi_dmul>
 800c598:	a341      	add	r3, pc, #260	; (adr r3, 800c6a0 <__ieee754_acos+0x480>)
 800c59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59e:	f7f3 fe75 	bl	800028c <__adddf3>
 800c5a2:	4622      	mov	r2, r4
 800c5a4:	462b      	mov	r3, r5
 800c5a6:	f7f4 f827 	bl	80005f8 <__aeabi_dmul>
 800c5aa:	a33f      	add	r3, pc, #252	; (adr r3, 800c6a8 <__ieee754_acos+0x488>)
 800c5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b0:	4682      	mov	sl, r0
 800c5b2:	468b      	mov	fp, r1
 800c5b4:	4620      	mov	r0, r4
 800c5b6:	4629      	mov	r1, r5
 800c5b8:	f7f4 f81e 	bl	80005f8 <__aeabi_dmul>
 800c5bc:	a33c      	add	r3, pc, #240	; (adr r3, 800c6b0 <__ieee754_acos+0x490>)
 800c5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c2:	f7f3 fe61 	bl	8000288 <__aeabi_dsub>
 800c5c6:	4622      	mov	r2, r4
 800c5c8:	462b      	mov	r3, r5
 800c5ca:	f7f4 f815 	bl	80005f8 <__aeabi_dmul>
 800c5ce:	a33a      	add	r3, pc, #232	; (adr r3, 800c6b8 <__ieee754_acos+0x498>)
 800c5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d4:	f7f3 fe5a 	bl	800028c <__adddf3>
 800c5d8:	4622      	mov	r2, r4
 800c5da:	462b      	mov	r3, r5
 800c5dc:	f7f4 f80c 	bl	80005f8 <__aeabi_dmul>
 800c5e0:	a337      	add	r3, pc, #220	; (adr r3, 800c6c0 <__ieee754_acos+0x4a0>)
 800c5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e6:	f7f3 fe4f 	bl	8000288 <__aeabi_dsub>
 800c5ea:	4622      	mov	r2, r4
 800c5ec:	462b      	mov	r3, r5
 800c5ee:	f7f4 f803 	bl	80005f8 <__aeabi_dmul>
 800c5f2:	4b39      	ldr	r3, [pc, #228]	; (800c6d8 <__ieee754_acos+0x4b8>)
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	f7f3 fe49 	bl	800028c <__adddf3>
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	4650      	mov	r0, sl
 800c600:	4659      	mov	r1, fp
 800c602:	f7f4 f923 	bl	800084c <__aeabi_ddiv>
 800c606:	4642      	mov	r2, r8
 800c608:	464b      	mov	r3, r9
 800c60a:	f7f3 fff5 	bl	80005f8 <__aeabi_dmul>
 800c60e:	2600      	movs	r6, #0
 800c610:	4682      	mov	sl, r0
 800c612:	468b      	mov	fp, r1
 800c614:	4632      	mov	r2, r6
 800c616:	464b      	mov	r3, r9
 800c618:	4630      	mov	r0, r6
 800c61a:	4649      	mov	r1, r9
 800c61c:	f7f3 ffec 	bl	80005f8 <__aeabi_dmul>
 800c620:	4602      	mov	r2, r0
 800c622:	460b      	mov	r3, r1
 800c624:	4620      	mov	r0, r4
 800c626:	4629      	mov	r1, r5
 800c628:	f7f3 fe2e 	bl	8000288 <__aeabi_dsub>
 800c62c:	4632      	mov	r2, r6
 800c62e:	4604      	mov	r4, r0
 800c630:	460d      	mov	r5, r1
 800c632:	464b      	mov	r3, r9
 800c634:	4640      	mov	r0, r8
 800c636:	4649      	mov	r1, r9
 800c638:	f7f3 fe28 	bl	800028c <__adddf3>
 800c63c:	4602      	mov	r2, r0
 800c63e:	460b      	mov	r3, r1
 800c640:	4620      	mov	r0, r4
 800c642:	4629      	mov	r1, r5
 800c644:	f7f4 f902 	bl	800084c <__aeabi_ddiv>
 800c648:	4602      	mov	r2, r0
 800c64a:	460b      	mov	r3, r1
 800c64c:	4650      	mov	r0, sl
 800c64e:	4659      	mov	r1, fp
 800c650:	f7f3 fe1c 	bl	800028c <__adddf3>
 800c654:	4632      	mov	r2, r6
 800c656:	464b      	mov	r3, r9
 800c658:	f7f3 fe18 	bl	800028c <__adddf3>
 800c65c:	4602      	mov	r2, r0
 800c65e:	460b      	mov	r3, r1
 800c660:	f7f3 fe14 	bl	800028c <__adddf3>
 800c664:	e5fe      	b.n	800c264 <__ieee754_acos+0x44>
 800c666:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800c6c8 <__ieee754_acos+0x4a8>
 800c66a:	e5ed      	b.n	800c248 <__ieee754_acos+0x28>
 800c66c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800c6d0 <__ieee754_acos+0x4b0>
 800c670:	e5ea      	b.n	800c248 <__ieee754_acos+0x28>
 800c672:	bf00      	nop
 800c674:	f3af 8000 	nop.w
 800c678:	0dfdf709 	.word	0x0dfdf709
 800c67c:	3f023de1 	.word	0x3f023de1
 800c680:	7501b288 	.word	0x7501b288
 800c684:	3f49efe0 	.word	0x3f49efe0
 800c688:	b5688f3b 	.word	0xb5688f3b
 800c68c:	3fa48228 	.word	0x3fa48228
 800c690:	0e884455 	.word	0x0e884455
 800c694:	3fc9c155 	.word	0x3fc9c155
 800c698:	03eb6f7d 	.word	0x03eb6f7d
 800c69c:	3fd4d612 	.word	0x3fd4d612
 800c6a0:	55555555 	.word	0x55555555
 800c6a4:	3fc55555 	.word	0x3fc55555
 800c6a8:	b12e9282 	.word	0xb12e9282
 800c6ac:	3fb3b8c5 	.word	0x3fb3b8c5
 800c6b0:	1b8d0159 	.word	0x1b8d0159
 800c6b4:	3fe6066c 	.word	0x3fe6066c
 800c6b8:	9c598ac8 	.word	0x9c598ac8
 800c6bc:	40002ae5 	.word	0x40002ae5
 800c6c0:	1c8a2d4b 	.word	0x1c8a2d4b
 800c6c4:	40033a27 	.word	0x40033a27
	...
 800c6d0:	54442d18 	.word	0x54442d18
 800c6d4:	3ff921fb 	.word	0x3ff921fb
 800c6d8:	3ff00000 	.word	0x3ff00000
 800c6dc:	3fe00000 	.word	0x3fe00000

0800c6e0 <__ieee754_pow>:
 800c6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e4:	ed2d 8b06 	vpush	{d8-d10}
 800c6e8:	b089      	sub	sp, #36	; 0x24
 800c6ea:	ed8d 1b00 	vstr	d1, [sp]
 800c6ee:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c6f2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c6f6:	ea58 0102 	orrs.w	r1, r8, r2
 800c6fa:	ec57 6b10 	vmov	r6, r7, d0
 800c6fe:	d115      	bne.n	800c72c <__ieee754_pow+0x4c>
 800c700:	19b3      	adds	r3, r6, r6
 800c702:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c706:	4152      	adcs	r2, r2
 800c708:	4299      	cmp	r1, r3
 800c70a:	4b89      	ldr	r3, [pc, #548]	; (800c930 <__ieee754_pow+0x250>)
 800c70c:	4193      	sbcs	r3, r2
 800c70e:	f080 84d2 	bcs.w	800d0b6 <__ieee754_pow+0x9d6>
 800c712:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c716:	4630      	mov	r0, r6
 800c718:	4639      	mov	r1, r7
 800c71a:	f7f3 fdb7 	bl	800028c <__adddf3>
 800c71e:	ec41 0b10 	vmov	d0, r0, r1
 800c722:	b009      	add	sp, #36	; 0x24
 800c724:	ecbd 8b06 	vpop	{d8-d10}
 800c728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c72c:	4b81      	ldr	r3, [pc, #516]	; (800c934 <__ieee754_pow+0x254>)
 800c72e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c732:	429c      	cmp	r4, r3
 800c734:	ee10 aa10 	vmov	sl, s0
 800c738:	463d      	mov	r5, r7
 800c73a:	dc06      	bgt.n	800c74a <__ieee754_pow+0x6a>
 800c73c:	d101      	bne.n	800c742 <__ieee754_pow+0x62>
 800c73e:	2e00      	cmp	r6, #0
 800c740:	d1e7      	bne.n	800c712 <__ieee754_pow+0x32>
 800c742:	4598      	cmp	r8, r3
 800c744:	dc01      	bgt.n	800c74a <__ieee754_pow+0x6a>
 800c746:	d10f      	bne.n	800c768 <__ieee754_pow+0x88>
 800c748:	b172      	cbz	r2, 800c768 <__ieee754_pow+0x88>
 800c74a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c74e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c752:	ea55 050a 	orrs.w	r5, r5, sl
 800c756:	d1dc      	bne.n	800c712 <__ieee754_pow+0x32>
 800c758:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c75c:	18db      	adds	r3, r3, r3
 800c75e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c762:	4152      	adcs	r2, r2
 800c764:	429d      	cmp	r5, r3
 800c766:	e7d0      	b.n	800c70a <__ieee754_pow+0x2a>
 800c768:	2d00      	cmp	r5, #0
 800c76a:	da3b      	bge.n	800c7e4 <__ieee754_pow+0x104>
 800c76c:	4b72      	ldr	r3, [pc, #456]	; (800c938 <__ieee754_pow+0x258>)
 800c76e:	4598      	cmp	r8, r3
 800c770:	dc51      	bgt.n	800c816 <__ieee754_pow+0x136>
 800c772:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c776:	4598      	cmp	r8, r3
 800c778:	f340 84ac 	ble.w	800d0d4 <__ieee754_pow+0x9f4>
 800c77c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c780:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c784:	2b14      	cmp	r3, #20
 800c786:	dd0f      	ble.n	800c7a8 <__ieee754_pow+0xc8>
 800c788:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c78c:	fa22 f103 	lsr.w	r1, r2, r3
 800c790:	fa01 f303 	lsl.w	r3, r1, r3
 800c794:	4293      	cmp	r3, r2
 800c796:	f040 849d 	bne.w	800d0d4 <__ieee754_pow+0x9f4>
 800c79a:	f001 0101 	and.w	r1, r1, #1
 800c79e:	f1c1 0302 	rsb	r3, r1, #2
 800c7a2:	9304      	str	r3, [sp, #16]
 800c7a4:	b182      	cbz	r2, 800c7c8 <__ieee754_pow+0xe8>
 800c7a6:	e05f      	b.n	800c868 <__ieee754_pow+0x188>
 800c7a8:	2a00      	cmp	r2, #0
 800c7aa:	d15b      	bne.n	800c864 <__ieee754_pow+0x184>
 800c7ac:	f1c3 0314 	rsb	r3, r3, #20
 800c7b0:	fa48 f103 	asr.w	r1, r8, r3
 800c7b4:	fa01 f303 	lsl.w	r3, r1, r3
 800c7b8:	4543      	cmp	r3, r8
 800c7ba:	f040 8488 	bne.w	800d0ce <__ieee754_pow+0x9ee>
 800c7be:	f001 0101 	and.w	r1, r1, #1
 800c7c2:	f1c1 0302 	rsb	r3, r1, #2
 800c7c6:	9304      	str	r3, [sp, #16]
 800c7c8:	4b5c      	ldr	r3, [pc, #368]	; (800c93c <__ieee754_pow+0x25c>)
 800c7ca:	4598      	cmp	r8, r3
 800c7cc:	d132      	bne.n	800c834 <__ieee754_pow+0x154>
 800c7ce:	f1b9 0f00 	cmp.w	r9, #0
 800c7d2:	f280 8478 	bge.w	800d0c6 <__ieee754_pow+0x9e6>
 800c7d6:	4959      	ldr	r1, [pc, #356]	; (800c93c <__ieee754_pow+0x25c>)
 800c7d8:	4632      	mov	r2, r6
 800c7da:	463b      	mov	r3, r7
 800c7dc:	2000      	movs	r0, #0
 800c7de:	f7f4 f835 	bl	800084c <__aeabi_ddiv>
 800c7e2:	e79c      	b.n	800c71e <__ieee754_pow+0x3e>
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	9304      	str	r3, [sp, #16]
 800c7e8:	2a00      	cmp	r2, #0
 800c7ea:	d13d      	bne.n	800c868 <__ieee754_pow+0x188>
 800c7ec:	4b51      	ldr	r3, [pc, #324]	; (800c934 <__ieee754_pow+0x254>)
 800c7ee:	4598      	cmp	r8, r3
 800c7f0:	d1ea      	bne.n	800c7c8 <__ieee754_pow+0xe8>
 800c7f2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c7f6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c7fa:	ea53 030a 	orrs.w	r3, r3, sl
 800c7fe:	f000 845a 	beq.w	800d0b6 <__ieee754_pow+0x9d6>
 800c802:	4b4f      	ldr	r3, [pc, #316]	; (800c940 <__ieee754_pow+0x260>)
 800c804:	429c      	cmp	r4, r3
 800c806:	dd08      	ble.n	800c81a <__ieee754_pow+0x13a>
 800c808:	f1b9 0f00 	cmp.w	r9, #0
 800c80c:	f2c0 8457 	blt.w	800d0be <__ieee754_pow+0x9de>
 800c810:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c814:	e783      	b.n	800c71e <__ieee754_pow+0x3e>
 800c816:	2302      	movs	r3, #2
 800c818:	e7e5      	b.n	800c7e6 <__ieee754_pow+0x106>
 800c81a:	f1b9 0f00 	cmp.w	r9, #0
 800c81e:	f04f 0000 	mov.w	r0, #0
 800c822:	f04f 0100 	mov.w	r1, #0
 800c826:	f6bf af7a 	bge.w	800c71e <__ieee754_pow+0x3e>
 800c82a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c82e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c832:	e774      	b.n	800c71e <__ieee754_pow+0x3e>
 800c834:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c838:	d106      	bne.n	800c848 <__ieee754_pow+0x168>
 800c83a:	4632      	mov	r2, r6
 800c83c:	463b      	mov	r3, r7
 800c83e:	4630      	mov	r0, r6
 800c840:	4639      	mov	r1, r7
 800c842:	f7f3 fed9 	bl	80005f8 <__aeabi_dmul>
 800c846:	e76a      	b.n	800c71e <__ieee754_pow+0x3e>
 800c848:	4b3e      	ldr	r3, [pc, #248]	; (800c944 <__ieee754_pow+0x264>)
 800c84a:	4599      	cmp	r9, r3
 800c84c:	d10c      	bne.n	800c868 <__ieee754_pow+0x188>
 800c84e:	2d00      	cmp	r5, #0
 800c850:	db0a      	blt.n	800c868 <__ieee754_pow+0x188>
 800c852:	ec47 6b10 	vmov	d0, r6, r7
 800c856:	b009      	add	sp, #36	; 0x24
 800c858:	ecbd 8b06 	vpop	{d8-d10}
 800c85c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c860:	f000 be7a 	b.w	800d558 <__ieee754_sqrt>
 800c864:	2300      	movs	r3, #0
 800c866:	9304      	str	r3, [sp, #16]
 800c868:	ec47 6b10 	vmov	d0, r6, r7
 800c86c:	f7ff fb70 	bl	800bf50 <fabs>
 800c870:	ec51 0b10 	vmov	r0, r1, d0
 800c874:	f1ba 0f00 	cmp.w	sl, #0
 800c878:	d129      	bne.n	800c8ce <__ieee754_pow+0x1ee>
 800c87a:	b124      	cbz	r4, 800c886 <__ieee754_pow+0x1a6>
 800c87c:	4b2f      	ldr	r3, [pc, #188]	; (800c93c <__ieee754_pow+0x25c>)
 800c87e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c882:	429a      	cmp	r2, r3
 800c884:	d123      	bne.n	800c8ce <__ieee754_pow+0x1ee>
 800c886:	f1b9 0f00 	cmp.w	r9, #0
 800c88a:	da05      	bge.n	800c898 <__ieee754_pow+0x1b8>
 800c88c:	4602      	mov	r2, r0
 800c88e:	460b      	mov	r3, r1
 800c890:	2000      	movs	r0, #0
 800c892:	492a      	ldr	r1, [pc, #168]	; (800c93c <__ieee754_pow+0x25c>)
 800c894:	f7f3 ffda 	bl	800084c <__aeabi_ddiv>
 800c898:	2d00      	cmp	r5, #0
 800c89a:	f6bf af40 	bge.w	800c71e <__ieee754_pow+0x3e>
 800c89e:	9b04      	ldr	r3, [sp, #16]
 800c8a0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c8a4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c8a8:	4323      	orrs	r3, r4
 800c8aa:	d108      	bne.n	800c8be <__ieee754_pow+0x1de>
 800c8ac:	4602      	mov	r2, r0
 800c8ae:	460b      	mov	r3, r1
 800c8b0:	4610      	mov	r0, r2
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	f7f3 fce8 	bl	8000288 <__aeabi_dsub>
 800c8b8:	4602      	mov	r2, r0
 800c8ba:	460b      	mov	r3, r1
 800c8bc:	e78f      	b.n	800c7de <__ieee754_pow+0xfe>
 800c8be:	9b04      	ldr	r3, [sp, #16]
 800c8c0:	2b01      	cmp	r3, #1
 800c8c2:	f47f af2c 	bne.w	800c71e <__ieee754_pow+0x3e>
 800c8c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c8ca:	4619      	mov	r1, r3
 800c8cc:	e727      	b.n	800c71e <__ieee754_pow+0x3e>
 800c8ce:	0feb      	lsrs	r3, r5, #31
 800c8d0:	3b01      	subs	r3, #1
 800c8d2:	9306      	str	r3, [sp, #24]
 800c8d4:	9a06      	ldr	r2, [sp, #24]
 800c8d6:	9b04      	ldr	r3, [sp, #16]
 800c8d8:	4313      	orrs	r3, r2
 800c8da:	d102      	bne.n	800c8e2 <__ieee754_pow+0x202>
 800c8dc:	4632      	mov	r2, r6
 800c8de:	463b      	mov	r3, r7
 800c8e0:	e7e6      	b.n	800c8b0 <__ieee754_pow+0x1d0>
 800c8e2:	4b19      	ldr	r3, [pc, #100]	; (800c948 <__ieee754_pow+0x268>)
 800c8e4:	4598      	cmp	r8, r3
 800c8e6:	f340 80fb 	ble.w	800cae0 <__ieee754_pow+0x400>
 800c8ea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c8ee:	4598      	cmp	r8, r3
 800c8f0:	4b13      	ldr	r3, [pc, #76]	; (800c940 <__ieee754_pow+0x260>)
 800c8f2:	dd0c      	ble.n	800c90e <__ieee754_pow+0x22e>
 800c8f4:	429c      	cmp	r4, r3
 800c8f6:	dc0f      	bgt.n	800c918 <__ieee754_pow+0x238>
 800c8f8:	f1b9 0f00 	cmp.w	r9, #0
 800c8fc:	da0f      	bge.n	800c91e <__ieee754_pow+0x23e>
 800c8fe:	2000      	movs	r0, #0
 800c900:	b009      	add	sp, #36	; 0x24
 800c902:	ecbd 8b06 	vpop	{d8-d10}
 800c906:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c90a:	f001 bde2 	b.w	800e4d2 <__math_oflow>
 800c90e:	429c      	cmp	r4, r3
 800c910:	dbf2      	blt.n	800c8f8 <__ieee754_pow+0x218>
 800c912:	4b0a      	ldr	r3, [pc, #40]	; (800c93c <__ieee754_pow+0x25c>)
 800c914:	429c      	cmp	r4, r3
 800c916:	dd19      	ble.n	800c94c <__ieee754_pow+0x26c>
 800c918:	f1b9 0f00 	cmp.w	r9, #0
 800c91c:	dcef      	bgt.n	800c8fe <__ieee754_pow+0x21e>
 800c91e:	2000      	movs	r0, #0
 800c920:	b009      	add	sp, #36	; 0x24
 800c922:	ecbd 8b06 	vpop	{d8-d10}
 800c926:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c92a:	f001 bdc9 	b.w	800e4c0 <__math_uflow>
 800c92e:	bf00      	nop
 800c930:	fff00000 	.word	0xfff00000
 800c934:	7ff00000 	.word	0x7ff00000
 800c938:	433fffff 	.word	0x433fffff
 800c93c:	3ff00000 	.word	0x3ff00000
 800c940:	3fefffff 	.word	0x3fefffff
 800c944:	3fe00000 	.word	0x3fe00000
 800c948:	41e00000 	.word	0x41e00000
 800c94c:	4b60      	ldr	r3, [pc, #384]	; (800cad0 <__ieee754_pow+0x3f0>)
 800c94e:	2200      	movs	r2, #0
 800c950:	f7f3 fc9a 	bl	8000288 <__aeabi_dsub>
 800c954:	a354      	add	r3, pc, #336	; (adr r3, 800caa8 <__ieee754_pow+0x3c8>)
 800c956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c95a:	4604      	mov	r4, r0
 800c95c:	460d      	mov	r5, r1
 800c95e:	f7f3 fe4b 	bl	80005f8 <__aeabi_dmul>
 800c962:	a353      	add	r3, pc, #332	; (adr r3, 800cab0 <__ieee754_pow+0x3d0>)
 800c964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c968:	4606      	mov	r6, r0
 800c96a:	460f      	mov	r7, r1
 800c96c:	4620      	mov	r0, r4
 800c96e:	4629      	mov	r1, r5
 800c970:	f7f3 fe42 	bl	80005f8 <__aeabi_dmul>
 800c974:	4b57      	ldr	r3, [pc, #348]	; (800cad4 <__ieee754_pow+0x3f4>)
 800c976:	4682      	mov	sl, r0
 800c978:	468b      	mov	fp, r1
 800c97a:	2200      	movs	r2, #0
 800c97c:	4620      	mov	r0, r4
 800c97e:	4629      	mov	r1, r5
 800c980:	f7f3 fe3a 	bl	80005f8 <__aeabi_dmul>
 800c984:	4602      	mov	r2, r0
 800c986:	460b      	mov	r3, r1
 800c988:	a14b      	add	r1, pc, #300	; (adr r1, 800cab8 <__ieee754_pow+0x3d8>)
 800c98a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c98e:	f7f3 fc7b 	bl	8000288 <__aeabi_dsub>
 800c992:	4622      	mov	r2, r4
 800c994:	462b      	mov	r3, r5
 800c996:	f7f3 fe2f 	bl	80005f8 <__aeabi_dmul>
 800c99a:	4602      	mov	r2, r0
 800c99c:	460b      	mov	r3, r1
 800c99e:	2000      	movs	r0, #0
 800c9a0:	494d      	ldr	r1, [pc, #308]	; (800cad8 <__ieee754_pow+0x3f8>)
 800c9a2:	f7f3 fc71 	bl	8000288 <__aeabi_dsub>
 800c9a6:	4622      	mov	r2, r4
 800c9a8:	4680      	mov	r8, r0
 800c9aa:	4689      	mov	r9, r1
 800c9ac:	462b      	mov	r3, r5
 800c9ae:	4620      	mov	r0, r4
 800c9b0:	4629      	mov	r1, r5
 800c9b2:	f7f3 fe21 	bl	80005f8 <__aeabi_dmul>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	4640      	mov	r0, r8
 800c9bc:	4649      	mov	r1, r9
 800c9be:	f7f3 fe1b 	bl	80005f8 <__aeabi_dmul>
 800c9c2:	a33f      	add	r3, pc, #252	; (adr r3, 800cac0 <__ieee754_pow+0x3e0>)
 800c9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c8:	f7f3 fe16 	bl	80005f8 <__aeabi_dmul>
 800c9cc:	4602      	mov	r2, r0
 800c9ce:	460b      	mov	r3, r1
 800c9d0:	4650      	mov	r0, sl
 800c9d2:	4659      	mov	r1, fp
 800c9d4:	f7f3 fc58 	bl	8000288 <__aeabi_dsub>
 800c9d8:	4602      	mov	r2, r0
 800c9da:	460b      	mov	r3, r1
 800c9dc:	4680      	mov	r8, r0
 800c9de:	4689      	mov	r9, r1
 800c9e0:	4630      	mov	r0, r6
 800c9e2:	4639      	mov	r1, r7
 800c9e4:	f7f3 fc52 	bl	800028c <__adddf3>
 800c9e8:	2000      	movs	r0, #0
 800c9ea:	4632      	mov	r2, r6
 800c9ec:	463b      	mov	r3, r7
 800c9ee:	4604      	mov	r4, r0
 800c9f0:	460d      	mov	r5, r1
 800c9f2:	f7f3 fc49 	bl	8000288 <__aeabi_dsub>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	460b      	mov	r3, r1
 800c9fa:	4640      	mov	r0, r8
 800c9fc:	4649      	mov	r1, r9
 800c9fe:	f7f3 fc43 	bl	8000288 <__aeabi_dsub>
 800ca02:	9b04      	ldr	r3, [sp, #16]
 800ca04:	9a06      	ldr	r2, [sp, #24]
 800ca06:	3b01      	subs	r3, #1
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	4682      	mov	sl, r0
 800ca0c:	468b      	mov	fp, r1
 800ca0e:	f040 81e7 	bne.w	800cde0 <__ieee754_pow+0x700>
 800ca12:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800cac8 <__ieee754_pow+0x3e8>
 800ca16:	eeb0 8a47 	vmov.f32	s16, s14
 800ca1a:	eef0 8a67 	vmov.f32	s17, s15
 800ca1e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ca22:	2600      	movs	r6, #0
 800ca24:	4632      	mov	r2, r6
 800ca26:	463b      	mov	r3, r7
 800ca28:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca2c:	f7f3 fc2c 	bl	8000288 <__aeabi_dsub>
 800ca30:	4622      	mov	r2, r4
 800ca32:	462b      	mov	r3, r5
 800ca34:	f7f3 fde0 	bl	80005f8 <__aeabi_dmul>
 800ca38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca3c:	4680      	mov	r8, r0
 800ca3e:	4689      	mov	r9, r1
 800ca40:	4650      	mov	r0, sl
 800ca42:	4659      	mov	r1, fp
 800ca44:	f7f3 fdd8 	bl	80005f8 <__aeabi_dmul>
 800ca48:	4602      	mov	r2, r0
 800ca4a:	460b      	mov	r3, r1
 800ca4c:	4640      	mov	r0, r8
 800ca4e:	4649      	mov	r1, r9
 800ca50:	f7f3 fc1c 	bl	800028c <__adddf3>
 800ca54:	4632      	mov	r2, r6
 800ca56:	463b      	mov	r3, r7
 800ca58:	4680      	mov	r8, r0
 800ca5a:	4689      	mov	r9, r1
 800ca5c:	4620      	mov	r0, r4
 800ca5e:	4629      	mov	r1, r5
 800ca60:	f7f3 fdca 	bl	80005f8 <__aeabi_dmul>
 800ca64:	460b      	mov	r3, r1
 800ca66:	4604      	mov	r4, r0
 800ca68:	460d      	mov	r5, r1
 800ca6a:	4602      	mov	r2, r0
 800ca6c:	4649      	mov	r1, r9
 800ca6e:	4640      	mov	r0, r8
 800ca70:	f7f3 fc0c 	bl	800028c <__adddf3>
 800ca74:	4b19      	ldr	r3, [pc, #100]	; (800cadc <__ieee754_pow+0x3fc>)
 800ca76:	4299      	cmp	r1, r3
 800ca78:	ec45 4b19 	vmov	d9, r4, r5
 800ca7c:	4606      	mov	r6, r0
 800ca7e:	460f      	mov	r7, r1
 800ca80:	468b      	mov	fp, r1
 800ca82:	f340 82f1 	ble.w	800d068 <__ieee754_pow+0x988>
 800ca86:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ca8a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ca8e:	4303      	orrs	r3, r0
 800ca90:	f000 81e4 	beq.w	800ce5c <__ieee754_pow+0x77c>
 800ca94:	ec51 0b18 	vmov	r0, r1, d8
 800ca98:	2200      	movs	r2, #0
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	f7f4 f81e 	bl	8000adc <__aeabi_dcmplt>
 800caa0:	3800      	subs	r0, #0
 800caa2:	bf18      	it	ne
 800caa4:	2001      	movne	r0, #1
 800caa6:	e72b      	b.n	800c900 <__ieee754_pow+0x220>
 800caa8:	60000000 	.word	0x60000000
 800caac:	3ff71547 	.word	0x3ff71547
 800cab0:	f85ddf44 	.word	0xf85ddf44
 800cab4:	3e54ae0b 	.word	0x3e54ae0b
 800cab8:	55555555 	.word	0x55555555
 800cabc:	3fd55555 	.word	0x3fd55555
 800cac0:	652b82fe 	.word	0x652b82fe
 800cac4:	3ff71547 	.word	0x3ff71547
 800cac8:	00000000 	.word	0x00000000
 800cacc:	bff00000 	.word	0xbff00000
 800cad0:	3ff00000 	.word	0x3ff00000
 800cad4:	3fd00000 	.word	0x3fd00000
 800cad8:	3fe00000 	.word	0x3fe00000
 800cadc:	408fffff 	.word	0x408fffff
 800cae0:	4bd5      	ldr	r3, [pc, #852]	; (800ce38 <__ieee754_pow+0x758>)
 800cae2:	402b      	ands	r3, r5
 800cae4:	2200      	movs	r2, #0
 800cae6:	b92b      	cbnz	r3, 800caf4 <__ieee754_pow+0x414>
 800cae8:	4bd4      	ldr	r3, [pc, #848]	; (800ce3c <__ieee754_pow+0x75c>)
 800caea:	f7f3 fd85 	bl	80005f8 <__aeabi_dmul>
 800caee:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800caf2:	460c      	mov	r4, r1
 800caf4:	1523      	asrs	r3, r4, #20
 800caf6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cafa:	4413      	add	r3, r2
 800cafc:	9305      	str	r3, [sp, #20]
 800cafe:	4bd0      	ldr	r3, [pc, #832]	; (800ce40 <__ieee754_pow+0x760>)
 800cb00:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800cb04:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800cb08:	429c      	cmp	r4, r3
 800cb0a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cb0e:	dd08      	ble.n	800cb22 <__ieee754_pow+0x442>
 800cb10:	4bcc      	ldr	r3, [pc, #816]	; (800ce44 <__ieee754_pow+0x764>)
 800cb12:	429c      	cmp	r4, r3
 800cb14:	f340 8162 	ble.w	800cddc <__ieee754_pow+0x6fc>
 800cb18:	9b05      	ldr	r3, [sp, #20]
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	9305      	str	r3, [sp, #20]
 800cb1e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800cb22:	2400      	movs	r4, #0
 800cb24:	00e3      	lsls	r3, r4, #3
 800cb26:	9307      	str	r3, [sp, #28]
 800cb28:	4bc7      	ldr	r3, [pc, #796]	; (800ce48 <__ieee754_pow+0x768>)
 800cb2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cb2e:	ed93 7b00 	vldr	d7, [r3]
 800cb32:	4629      	mov	r1, r5
 800cb34:	ec53 2b17 	vmov	r2, r3, d7
 800cb38:	eeb0 9a47 	vmov.f32	s18, s14
 800cb3c:	eef0 9a67 	vmov.f32	s19, s15
 800cb40:	4682      	mov	sl, r0
 800cb42:	f7f3 fba1 	bl	8000288 <__aeabi_dsub>
 800cb46:	4652      	mov	r2, sl
 800cb48:	4606      	mov	r6, r0
 800cb4a:	460f      	mov	r7, r1
 800cb4c:	462b      	mov	r3, r5
 800cb4e:	ec51 0b19 	vmov	r0, r1, d9
 800cb52:	f7f3 fb9b 	bl	800028c <__adddf3>
 800cb56:	4602      	mov	r2, r0
 800cb58:	460b      	mov	r3, r1
 800cb5a:	2000      	movs	r0, #0
 800cb5c:	49bb      	ldr	r1, [pc, #748]	; (800ce4c <__ieee754_pow+0x76c>)
 800cb5e:	f7f3 fe75 	bl	800084c <__aeabi_ddiv>
 800cb62:	ec41 0b1a 	vmov	d10, r0, r1
 800cb66:	4602      	mov	r2, r0
 800cb68:	460b      	mov	r3, r1
 800cb6a:	4630      	mov	r0, r6
 800cb6c:	4639      	mov	r1, r7
 800cb6e:	f7f3 fd43 	bl	80005f8 <__aeabi_dmul>
 800cb72:	2300      	movs	r3, #0
 800cb74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb78:	9302      	str	r3, [sp, #8]
 800cb7a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cb7e:	46ab      	mov	fp, r5
 800cb80:	106d      	asrs	r5, r5, #1
 800cb82:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800cb86:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800cb8a:	ec41 0b18 	vmov	d8, r0, r1
 800cb8e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800cb92:	2200      	movs	r2, #0
 800cb94:	4640      	mov	r0, r8
 800cb96:	4649      	mov	r1, r9
 800cb98:	4614      	mov	r4, r2
 800cb9a:	461d      	mov	r5, r3
 800cb9c:	f7f3 fd2c 	bl	80005f8 <__aeabi_dmul>
 800cba0:	4602      	mov	r2, r0
 800cba2:	460b      	mov	r3, r1
 800cba4:	4630      	mov	r0, r6
 800cba6:	4639      	mov	r1, r7
 800cba8:	f7f3 fb6e 	bl	8000288 <__aeabi_dsub>
 800cbac:	ec53 2b19 	vmov	r2, r3, d9
 800cbb0:	4606      	mov	r6, r0
 800cbb2:	460f      	mov	r7, r1
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	4629      	mov	r1, r5
 800cbb8:	f7f3 fb66 	bl	8000288 <__aeabi_dsub>
 800cbbc:	4602      	mov	r2, r0
 800cbbe:	460b      	mov	r3, r1
 800cbc0:	4650      	mov	r0, sl
 800cbc2:	4659      	mov	r1, fp
 800cbc4:	f7f3 fb60 	bl	8000288 <__aeabi_dsub>
 800cbc8:	4642      	mov	r2, r8
 800cbca:	464b      	mov	r3, r9
 800cbcc:	f7f3 fd14 	bl	80005f8 <__aeabi_dmul>
 800cbd0:	4602      	mov	r2, r0
 800cbd2:	460b      	mov	r3, r1
 800cbd4:	4630      	mov	r0, r6
 800cbd6:	4639      	mov	r1, r7
 800cbd8:	f7f3 fb56 	bl	8000288 <__aeabi_dsub>
 800cbdc:	ec53 2b1a 	vmov	r2, r3, d10
 800cbe0:	f7f3 fd0a 	bl	80005f8 <__aeabi_dmul>
 800cbe4:	ec53 2b18 	vmov	r2, r3, d8
 800cbe8:	ec41 0b19 	vmov	d9, r0, r1
 800cbec:	ec51 0b18 	vmov	r0, r1, d8
 800cbf0:	f7f3 fd02 	bl	80005f8 <__aeabi_dmul>
 800cbf4:	a37c      	add	r3, pc, #496	; (adr r3, 800cde8 <__ieee754_pow+0x708>)
 800cbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfa:	4604      	mov	r4, r0
 800cbfc:	460d      	mov	r5, r1
 800cbfe:	f7f3 fcfb 	bl	80005f8 <__aeabi_dmul>
 800cc02:	a37b      	add	r3, pc, #492	; (adr r3, 800cdf0 <__ieee754_pow+0x710>)
 800cc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc08:	f7f3 fb40 	bl	800028c <__adddf3>
 800cc0c:	4622      	mov	r2, r4
 800cc0e:	462b      	mov	r3, r5
 800cc10:	f7f3 fcf2 	bl	80005f8 <__aeabi_dmul>
 800cc14:	a378      	add	r3, pc, #480	; (adr r3, 800cdf8 <__ieee754_pow+0x718>)
 800cc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1a:	f7f3 fb37 	bl	800028c <__adddf3>
 800cc1e:	4622      	mov	r2, r4
 800cc20:	462b      	mov	r3, r5
 800cc22:	f7f3 fce9 	bl	80005f8 <__aeabi_dmul>
 800cc26:	a376      	add	r3, pc, #472	; (adr r3, 800ce00 <__ieee754_pow+0x720>)
 800cc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc2c:	f7f3 fb2e 	bl	800028c <__adddf3>
 800cc30:	4622      	mov	r2, r4
 800cc32:	462b      	mov	r3, r5
 800cc34:	f7f3 fce0 	bl	80005f8 <__aeabi_dmul>
 800cc38:	a373      	add	r3, pc, #460	; (adr r3, 800ce08 <__ieee754_pow+0x728>)
 800cc3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc3e:	f7f3 fb25 	bl	800028c <__adddf3>
 800cc42:	4622      	mov	r2, r4
 800cc44:	462b      	mov	r3, r5
 800cc46:	f7f3 fcd7 	bl	80005f8 <__aeabi_dmul>
 800cc4a:	a371      	add	r3, pc, #452	; (adr r3, 800ce10 <__ieee754_pow+0x730>)
 800cc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc50:	f7f3 fb1c 	bl	800028c <__adddf3>
 800cc54:	4622      	mov	r2, r4
 800cc56:	4606      	mov	r6, r0
 800cc58:	460f      	mov	r7, r1
 800cc5a:	462b      	mov	r3, r5
 800cc5c:	4620      	mov	r0, r4
 800cc5e:	4629      	mov	r1, r5
 800cc60:	f7f3 fcca 	bl	80005f8 <__aeabi_dmul>
 800cc64:	4602      	mov	r2, r0
 800cc66:	460b      	mov	r3, r1
 800cc68:	4630      	mov	r0, r6
 800cc6a:	4639      	mov	r1, r7
 800cc6c:	f7f3 fcc4 	bl	80005f8 <__aeabi_dmul>
 800cc70:	4642      	mov	r2, r8
 800cc72:	4604      	mov	r4, r0
 800cc74:	460d      	mov	r5, r1
 800cc76:	464b      	mov	r3, r9
 800cc78:	ec51 0b18 	vmov	r0, r1, d8
 800cc7c:	f7f3 fb06 	bl	800028c <__adddf3>
 800cc80:	ec53 2b19 	vmov	r2, r3, d9
 800cc84:	f7f3 fcb8 	bl	80005f8 <__aeabi_dmul>
 800cc88:	4622      	mov	r2, r4
 800cc8a:	462b      	mov	r3, r5
 800cc8c:	f7f3 fafe 	bl	800028c <__adddf3>
 800cc90:	4642      	mov	r2, r8
 800cc92:	4682      	mov	sl, r0
 800cc94:	468b      	mov	fp, r1
 800cc96:	464b      	mov	r3, r9
 800cc98:	4640      	mov	r0, r8
 800cc9a:	4649      	mov	r1, r9
 800cc9c:	f7f3 fcac 	bl	80005f8 <__aeabi_dmul>
 800cca0:	4b6b      	ldr	r3, [pc, #428]	; (800ce50 <__ieee754_pow+0x770>)
 800cca2:	2200      	movs	r2, #0
 800cca4:	4606      	mov	r6, r0
 800cca6:	460f      	mov	r7, r1
 800cca8:	f7f3 faf0 	bl	800028c <__adddf3>
 800ccac:	4652      	mov	r2, sl
 800ccae:	465b      	mov	r3, fp
 800ccb0:	f7f3 faec 	bl	800028c <__adddf3>
 800ccb4:	2000      	movs	r0, #0
 800ccb6:	4604      	mov	r4, r0
 800ccb8:	460d      	mov	r5, r1
 800ccba:	4602      	mov	r2, r0
 800ccbc:	460b      	mov	r3, r1
 800ccbe:	4640      	mov	r0, r8
 800ccc0:	4649      	mov	r1, r9
 800ccc2:	f7f3 fc99 	bl	80005f8 <__aeabi_dmul>
 800ccc6:	4b62      	ldr	r3, [pc, #392]	; (800ce50 <__ieee754_pow+0x770>)
 800ccc8:	4680      	mov	r8, r0
 800ccca:	4689      	mov	r9, r1
 800cccc:	2200      	movs	r2, #0
 800ccce:	4620      	mov	r0, r4
 800ccd0:	4629      	mov	r1, r5
 800ccd2:	f7f3 fad9 	bl	8000288 <__aeabi_dsub>
 800ccd6:	4632      	mov	r2, r6
 800ccd8:	463b      	mov	r3, r7
 800ccda:	f7f3 fad5 	bl	8000288 <__aeabi_dsub>
 800ccde:	4602      	mov	r2, r0
 800cce0:	460b      	mov	r3, r1
 800cce2:	4650      	mov	r0, sl
 800cce4:	4659      	mov	r1, fp
 800cce6:	f7f3 facf 	bl	8000288 <__aeabi_dsub>
 800ccea:	ec53 2b18 	vmov	r2, r3, d8
 800ccee:	f7f3 fc83 	bl	80005f8 <__aeabi_dmul>
 800ccf2:	4622      	mov	r2, r4
 800ccf4:	4606      	mov	r6, r0
 800ccf6:	460f      	mov	r7, r1
 800ccf8:	462b      	mov	r3, r5
 800ccfa:	ec51 0b19 	vmov	r0, r1, d9
 800ccfe:	f7f3 fc7b 	bl	80005f8 <__aeabi_dmul>
 800cd02:	4602      	mov	r2, r0
 800cd04:	460b      	mov	r3, r1
 800cd06:	4630      	mov	r0, r6
 800cd08:	4639      	mov	r1, r7
 800cd0a:	f7f3 fabf 	bl	800028c <__adddf3>
 800cd0e:	4606      	mov	r6, r0
 800cd10:	460f      	mov	r7, r1
 800cd12:	4602      	mov	r2, r0
 800cd14:	460b      	mov	r3, r1
 800cd16:	4640      	mov	r0, r8
 800cd18:	4649      	mov	r1, r9
 800cd1a:	f7f3 fab7 	bl	800028c <__adddf3>
 800cd1e:	a33e      	add	r3, pc, #248	; (adr r3, 800ce18 <__ieee754_pow+0x738>)
 800cd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd24:	2000      	movs	r0, #0
 800cd26:	4604      	mov	r4, r0
 800cd28:	460d      	mov	r5, r1
 800cd2a:	f7f3 fc65 	bl	80005f8 <__aeabi_dmul>
 800cd2e:	4642      	mov	r2, r8
 800cd30:	ec41 0b18 	vmov	d8, r0, r1
 800cd34:	464b      	mov	r3, r9
 800cd36:	4620      	mov	r0, r4
 800cd38:	4629      	mov	r1, r5
 800cd3a:	f7f3 faa5 	bl	8000288 <__aeabi_dsub>
 800cd3e:	4602      	mov	r2, r0
 800cd40:	460b      	mov	r3, r1
 800cd42:	4630      	mov	r0, r6
 800cd44:	4639      	mov	r1, r7
 800cd46:	f7f3 fa9f 	bl	8000288 <__aeabi_dsub>
 800cd4a:	a335      	add	r3, pc, #212	; (adr r3, 800ce20 <__ieee754_pow+0x740>)
 800cd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd50:	f7f3 fc52 	bl	80005f8 <__aeabi_dmul>
 800cd54:	a334      	add	r3, pc, #208	; (adr r3, 800ce28 <__ieee754_pow+0x748>)
 800cd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd5a:	4606      	mov	r6, r0
 800cd5c:	460f      	mov	r7, r1
 800cd5e:	4620      	mov	r0, r4
 800cd60:	4629      	mov	r1, r5
 800cd62:	f7f3 fc49 	bl	80005f8 <__aeabi_dmul>
 800cd66:	4602      	mov	r2, r0
 800cd68:	460b      	mov	r3, r1
 800cd6a:	4630      	mov	r0, r6
 800cd6c:	4639      	mov	r1, r7
 800cd6e:	f7f3 fa8d 	bl	800028c <__adddf3>
 800cd72:	9a07      	ldr	r2, [sp, #28]
 800cd74:	4b37      	ldr	r3, [pc, #220]	; (800ce54 <__ieee754_pow+0x774>)
 800cd76:	4413      	add	r3, r2
 800cd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7c:	f7f3 fa86 	bl	800028c <__adddf3>
 800cd80:	4682      	mov	sl, r0
 800cd82:	9805      	ldr	r0, [sp, #20]
 800cd84:	468b      	mov	fp, r1
 800cd86:	f7f3 fbcd 	bl	8000524 <__aeabi_i2d>
 800cd8a:	9a07      	ldr	r2, [sp, #28]
 800cd8c:	4b32      	ldr	r3, [pc, #200]	; (800ce58 <__ieee754_pow+0x778>)
 800cd8e:	4413      	add	r3, r2
 800cd90:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cd94:	4606      	mov	r6, r0
 800cd96:	460f      	mov	r7, r1
 800cd98:	4652      	mov	r2, sl
 800cd9a:	465b      	mov	r3, fp
 800cd9c:	ec51 0b18 	vmov	r0, r1, d8
 800cda0:	f7f3 fa74 	bl	800028c <__adddf3>
 800cda4:	4642      	mov	r2, r8
 800cda6:	464b      	mov	r3, r9
 800cda8:	f7f3 fa70 	bl	800028c <__adddf3>
 800cdac:	4632      	mov	r2, r6
 800cdae:	463b      	mov	r3, r7
 800cdb0:	f7f3 fa6c 	bl	800028c <__adddf3>
 800cdb4:	2000      	movs	r0, #0
 800cdb6:	4632      	mov	r2, r6
 800cdb8:	463b      	mov	r3, r7
 800cdba:	4604      	mov	r4, r0
 800cdbc:	460d      	mov	r5, r1
 800cdbe:	f7f3 fa63 	bl	8000288 <__aeabi_dsub>
 800cdc2:	4642      	mov	r2, r8
 800cdc4:	464b      	mov	r3, r9
 800cdc6:	f7f3 fa5f 	bl	8000288 <__aeabi_dsub>
 800cdca:	ec53 2b18 	vmov	r2, r3, d8
 800cdce:	f7f3 fa5b 	bl	8000288 <__aeabi_dsub>
 800cdd2:	4602      	mov	r2, r0
 800cdd4:	460b      	mov	r3, r1
 800cdd6:	4650      	mov	r0, sl
 800cdd8:	4659      	mov	r1, fp
 800cdda:	e610      	b.n	800c9fe <__ieee754_pow+0x31e>
 800cddc:	2401      	movs	r4, #1
 800cdde:	e6a1      	b.n	800cb24 <__ieee754_pow+0x444>
 800cde0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ce30 <__ieee754_pow+0x750>
 800cde4:	e617      	b.n	800ca16 <__ieee754_pow+0x336>
 800cde6:	bf00      	nop
 800cde8:	4a454eef 	.word	0x4a454eef
 800cdec:	3fca7e28 	.word	0x3fca7e28
 800cdf0:	93c9db65 	.word	0x93c9db65
 800cdf4:	3fcd864a 	.word	0x3fcd864a
 800cdf8:	a91d4101 	.word	0xa91d4101
 800cdfc:	3fd17460 	.word	0x3fd17460
 800ce00:	518f264d 	.word	0x518f264d
 800ce04:	3fd55555 	.word	0x3fd55555
 800ce08:	db6fabff 	.word	0xdb6fabff
 800ce0c:	3fdb6db6 	.word	0x3fdb6db6
 800ce10:	33333303 	.word	0x33333303
 800ce14:	3fe33333 	.word	0x3fe33333
 800ce18:	e0000000 	.word	0xe0000000
 800ce1c:	3feec709 	.word	0x3feec709
 800ce20:	dc3a03fd 	.word	0xdc3a03fd
 800ce24:	3feec709 	.word	0x3feec709
 800ce28:	145b01f5 	.word	0x145b01f5
 800ce2c:	be3e2fe0 	.word	0xbe3e2fe0
 800ce30:	00000000 	.word	0x00000000
 800ce34:	3ff00000 	.word	0x3ff00000
 800ce38:	7ff00000 	.word	0x7ff00000
 800ce3c:	43400000 	.word	0x43400000
 800ce40:	0003988e 	.word	0x0003988e
 800ce44:	000bb679 	.word	0x000bb679
 800ce48:	0800ebf8 	.word	0x0800ebf8
 800ce4c:	3ff00000 	.word	0x3ff00000
 800ce50:	40080000 	.word	0x40080000
 800ce54:	0800ec18 	.word	0x0800ec18
 800ce58:	0800ec08 	.word	0x0800ec08
 800ce5c:	a3b5      	add	r3, pc, #724	; (adr r3, 800d134 <__ieee754_pow+0xa54>)
 800ce5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce62:	4640      	mov	r0, r8
 800ce64:	4649      	mov	r1, r9
 800ce66:	f7f3 fa11 	bl	800028c <__adddf3>
 800ce6a:	4622      	mov	r2, r4
 800ce6c:	ec41 0b1a 	vmov	d10, r0, r1
 800ce70:	462b      	mov	r3, r5
 800ce72:	4630      	mov	r0, r6
 800ce74:	4639      	mov	r1, r7
 800ce76:	f7f3 fa07 	bl	8000288 <__aeabi_dsub>
 800ce7a:	4602      	mov	r2, r0
 800ce7c:	460b      	mov	r3, r1
 800ce7e:	ec51 0b1a 	vmov	r0, r1, d10
 800ce82:	f7f3 fe49 	bl	8000b18 <__aeabi_dcmpgt>
 800ce86:	2800      	cmp	r0, #0
 800ce88:	f47f ae04 	bne.w	800ca94 <__ieee754_pow+0x3b4>
 800ce8c:	4aa4      	ldr	r2, [pc, #656]	; (800d120 <__ieee754_pow+0xa40>)
 800ce8e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ce92:	4293      	cmp	r3, r2
 800ce94:	f340 8108 	ble.w	800d0a8 <__ieee754_pow+0x9c8>
 800ce98:	151b      	asrs	r3, r3, #20
 800ce9a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ce9e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800cea2:	fa4a f303 	asr.w	r3, sl, r3
 800cea6:	445b      	add	r3, fp
 800cea8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ceac:	4e9d      	ldr	r6, [pc, #628]	; (800d124 <__ieee754_pow+0xa44>)
 800ceae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ceb2:	4116      	asrs	r6, r2
 800ceb4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ceb8:	2000      	movs	r0, #0
 800ceba:	ea23 0106 	bic.w	r1, r3, r6
 800cebe:	f1c2 0214 	rsb	r2, r2, #20
 800cec2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800cec6:	fa4a fa02 	asr.w	sl, sl, r2
 800ceca:	f1bb 0f00 	cmp.w	fp, #0
 800cece:	4602      	mov	r2, r0
 800ced0:	460b      	mov	r3, r1
 800ced2:	4620      	mov	r0, r4
 800ced4:	4629      	mov	r1, r5
 800ced6:	bfb8      	it	lt
 800ced8:	f1ca 0a00 	rsblt	sl, sl, #0
 800cedc:	f7f3 f9d4 	bl	8000288 <__aeabi_dsub>
 800cee0:	ec41 0b19 	vmov	d9, r0, r1
 800cee4:	4642      	mov	r2, r8
 800cee6:	464b      	mov	r3, r9
 800cee8:	ec51 0b19 	vmov	r0, r1, d9
 800ceec:	f7f3 f9ce 	bl	800028c <__adddf3>
 800cef0:	a37b      	add	r3, pc, #492	; (adr r3, 800d0e0 <__ieee754_pow+0xa00>)
 800cef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef6:	2000      	movs	r0, #0
 800cef8:	4604      	mov	r4, r0
 800cefa:	460d      	mov	r5, r1
 800cefc:	f7f3 fb7c 	bl	80005f8 <__aeabi_dmul>
 800cf00:	ec53 2b19 	vmov	r2, r3, d9
 800cf04:	4606      	mov	r6, r0
 800cf06:	460f      	mov	r7, r1
 800cf08:	4620      	mov	r0, r4
 800cf0a:	4629      	mov	r1, r5
 800cf0c:	f7f3 f9bc 	bl	8000288 <__aeabi_dsub>
 800cf10:	4602      	mov	r2, r0
 800cf12:	460b      	mov	r3, r1
 800cf14:	4640      	mov	r0, r8
 800cf16:	4649      	mov	r1, r9
 800cf18:	f7f3 f9b6 	bl	8000288 <__aeabi_dsub>
 800cf1c:	a372      	add	r3, pc, #456	; (adr r3, 800d0e8 <__ieee754_pow+0xa08>)
 800cf1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf22:	f7f3 fb69 	bl	80005f8 <__aeabi_dmul>
 800cf26:	a372      	add	r3, pc, #456	; (adr r3, 800d0f0 <__ieee754_pow+0xa10>)
 800cf28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf2c:	4680      	mov	r8, r0
 800cf2e:	4689      	mov	r9, r1
 800cf30:	4620      	mov	r0, r4
 800cf32:	4629      	mov	r1, r5
 800cf34:	f7f3 fb60 	bl	80005f8 <__aeabi_dmul>
 800cf38:	4602      	mov	r2, r0
 800cf3a:	460b      	mov	r3, r1
 800cf3c:	4640      	mov	r0, r8
 800cf3e:	4649      	mov	r1, r9
 800cf40:	f7f3 f9a4 	bl	800028c <__adddf3>
 800cf44:	4604      	mov	r4, r0
 800cf46:	460d      	mov	r5, r1
 800cf48:	4602      	mov	r2, r0
 800cf4a:	460b      	mov	r3, r1
 800cf4c:	4630      	mov	r0, r6
 800cf4e:	4639      	mov	r1, r7
 800cf50:	f7f3 f99c 	bl	800028c <__adddf3>
 800cf54:	4632      	mov	r2, r6
 800cf56:	463b      	mov	r3, r7
 800cf58:	4680      	mov	r8, r0
 800cf5a:	4689      	mov	r9, r1
 800cf5c:	f7f3 f994 	bl	8000288 <__aeabi_dsub>
 800cf60:	4602      	mov	r2, r0
 800cf62:	460b      	mov	r3, r1
 800cf64:	4620      	mov	r0, r4
 800cf66:	4629      	mov	r1, r5
 800cf68:	f7f3 f98e 	bl	8000288 <__aeabi_dsub>
 800cf6c:	4642      	mov	r2, r8
 800cf6e:	4606      	mov	r6, r0
 800cf70:	460f      	mov	r7, r1
 800cf72:	464b      	mov	r3, r9
 800cf74:	4640      	mov	r0, r8
 800cf76:	4649      	mov	r1, r9
 800cf78:	f7f3 fb3e 	bl	80005f8 <__aeabi_dmul>
 800cf7c:	a35e      	add	r3, pc, #376	; (adr r3, 800d0f8 <__ieee754_pow+0xa18>)
 800cf7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf82:	4604      	mov	r4, r0
 800cf84:	460d      	mov	r5, r1
 800cf86:	f7f3 fb37 	bl	80005f8 <__aeabi_dmul>
 800cf8a:	a35d      	add	r3, pc, #372	; (adr r3, 800d100 <__ieee754_pow+0xa20>)
 800cf8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf90:	f7f3 f97a 	bl	8000288 <__aeabi_dsub>
 800cf94:	4622      	mov	r2, r4
 800cf96:	462b      	mov	r3, r5
 800cf98:	f7f3 fb2e 	bl	80005f8 <__aeabi_dmul>
 800cf9c:	a35a      	add	r3, pc, #360	; (adr r3, 800d108 <__ieee754_pow+0xa28>)
 800cf9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa2:	f7f3 f973 	bl	800028c <__adddf3>
 800cfa6:	4622      	mov	r2, r4
 800cfa8:	462b      	mov	r3, r5
 800cfaa:	f7f3 fb25 	bl	80005f8 <__aeabi_dmul>
 800cfae:	a358      	add	r3, pc, #352	; (adr r3, 800d110 <__ieee754_pow+0xa30>)
 800cfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb4:	f7f3 f968 	bl	8000288 <__aeabi_dsub>
 800cfb8:	4622      	mov	r2, r4
 800cfba:	462b      	mov	r3, r5
 800cfbc:	f7f3 fb1c 	bl	80005f8 <__aeabi_dmul>
 800cfc0:	a355      	add	r3, pc, #340	; (adr r3, 800d118 <__ieee754_pow+0xa38>)
 800cfc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc6:	f7f3 f961 	bl	800028c <__adddf3>
 800cfca:	4622      	mov	r2, r4
 800cfcc:	462b      	mov	r3, r5
 800cfce:	f7f3 fb13 	bl	80005f8 <__aeabi_dmul>
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	460b      	mov	r3, r1
 800cfd6:	4640      	mov	r0, r8
 800cfd8:	4649      	mov	r1, r9
 800cfda:	f7f3 f955 	bl	8000288 <__aeabi_dsub>
 800cfde:	4604      	mov	r4, r0
 800cfe0:	460d      	mov	r5, r1
 800cfe2:	4602      	mov	r2, r0
 800cfe4:	460b      	mov	r3, r1
 800cfe6:	4640      	mov	r0, r8
 800cfe8:	4649      	mov	r1, r9
 800cfea:	f7f3 fb05 	bl	80005f8 <__aeabi_dmul>
 800cfee:	2200      	movs	r2, #0
 800cff0:	ec41 0b19 	vmov	d9, r0, r1
 800cff4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cff8:	4620      	mov	r0, r4
 800cffa:	4629      	mov	r1, r5
 800cffc:	f7f3 f944 	bl	8000288 <__aeabi_dsub>
 800d000:	4602      	mov	r2, r0
 800d002:	460b      	mov	r3, r1
 800d004:	ec51 0b19 	vmov	r0, r1, d9
 800d008:	f7f3 fc20 	bl	800084c <__aeabi_ddiv>
 800d00c:	4632      	mov	r2, r6
 800d00e:	4604      	mov	r4, r0
 800d010:	460d      	mov	r5, r1
 800d012:	463b      	mov	r3, r7
 800d014:	4640      	mov	r0, r8
 800d016:	4649      	mov	r1, r9
 800d018:	f7f3 faee 	bl	80005f8 <__aeabi_dmul>
 800d01c:	4632      	mov	r2, r6
 800d01e:	463b      	mov	r3, r7
 800d020:	f7f3 f934 	bl	800028c <__adddf3>
 800d024:	4602      	mov	r2, r0
 800d026:	460b      	mov	r3, r1
 800d028:	4620      	mov	r0, r4
 800d02a:	4629      	mov	r1, r5
 800d02c:	f7f3 f92c 	bl	8000288 <__aeabi_dsub>
 800d030:	4642      	mov	r2, r8
 800d032:	464b      	mov	r3, r9
 800d034:	f7f3 f928 	bl	8000288 <__aeabi_dsub>
 800d038:	460b      	mov	r3, r1
 800d03a:	4602      	mov	r2, r0
 800d03c:	493a      	ldr	r1, [pc, #232]	; (800d128 <__ieee754_pow+0xa48>)
 800d03e:	2000      	movs	r0, #0
 800d040:	f7f3 f922 	bl	8000288 <__aeabi_dsub>
 800d044:	ec41 0b10 	vmov	d0, r0, r1
 800d048:	ee10 3a90 	vmov	r3, s1
 800d04c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d050:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d054:	da2b      	bge.n	800d0ae <__ieee754_pow+0x9ce>
 800d056:	4650      	mov	r0, sl
 800d058:	f001 fada 	bl	800e610 <scalbn>
 800d05c:	ec51 0b10 	vmov	r0, r1, d0
 800d060:	ec53 2b18 	vmov	r2, r3, d8
 800d064:	f7ff bbed 	b.w	800c842 <__ieee754_pow+0x162>
 800d068:	4b30      	ldr	r3, [pc, #192]	; (800d12c <__ieee754_pow+0xa4c>)
 800d06a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d06e:	429e      	cmp	r6, r3
 800d070:	f77f af0c 	ble.w	800ce8c <__ieee754_pow+0x7ac>
 800d074:	4b2e      	ldr	r3, [pc, #184]	; (800d130 <__ieee754_pow+0xa50>)
 800d076:	440b      	add	r3, r1
 800d078:	4303      	orrs	r3, r0
 800d07a:	d009      	beq.n	800d090 <__ieee754_pow+0x9b0>
 800d07c:	ec51 0b18 	vmov	r0, r1, d8
 800d080:	2200      	movs	r2, #0
 800d082:	2300      	movs	r3, #0
 800d084:	f7f3 fd2a 	bl	8000adc <__aeabi_dcmplt>
 800d088:	3800      	subs	r0, #0
 800d08a:	bf18      	it	ne
 800d08c:	2001      	movne	r0, #1
 800d08e:	e447      	b.n	800c920 <__ieee754_pow+0x240>
 800d090:	4622      	mov	r2, r4
 800d092:	462b      	mov	r3, r5
 800d094:	f7f3 f8f8 	bl	8000288 <__aeabi_dsub>
 800d098:	4642      	mov	r2, r8
 800d09a:	464b      	mov	r3, r9
 800d09c:	f7f3 fd32 	bl	8000b04 <__aeabi_dcmpge>
 800d0a0:	2800      	cmp	r0, #0
 800d0a2:	f43f aef3 	beq.w	800ce8c <__ieee754_pow+0x7ac>
 800d0a6:	e7e9      	b.n	800d07c <__ieee754_pow+0x99c>
 800d0a8:	f04f 0a00 	mov.w	sl, #0
 800d0ac:	e71a      	b.n	800cee4 <__ieee754_pow+0x804>
 800d0ae:	ec51 0b10 	vmov	r0, r1, d0
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	e7d4      	b.n	800d060 <__ieee754_pow+0x980>
 800d0b6:	491c      	ldr	r1, [pc, #112]	; (800d128 <__ieee754_pow+0xa48>)
 800d0b8:	2000      	movs	r0, #0
 800d0ba:	f7ff bb30 	b.w	800c71e <__ieee754_pow+0x3e>
 800d0be:	2000      	movs	r0, #0
 800d0c0:	2100      	movs	r1, #0
 800d0c2:	f7ff bb2c 	b.w	800c71e <__ieee754_pow+0x3e>
 800d0c6:	4630      	mov	r0, r6
 800d0c8:	4639      	mov	r1, r7
 800d0ca:	f7ff bb28 	b.w	800c71e <__ieee754_pow+0x3e>
 800d0ce:	9204      	str	r2, [sp, #16]
 800d0d0:	f7ff bb7a 	b.w	800c7c8 <__ieee754_pow+0xe8>
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	f7ff bb64 	b.w	800c7a2 <__ieee754_pow+0xc2>
 800d0da:	bf00      	nop
 800d0dc:	f3af 8000 	nop.w
 800d0e0:	00000000 	.word	0x00000000
 800d0e4:	3fe62e43 	.word	0x3fe62e43
 800d0e8:	fefa39ef 	.word	0xfefa39ef
 800d0ec:	3fe62e42 	.word	0x3fe62e42
 800d0f0:	0ca86c39 	.word	0x0ca86c39
 800d0f4:	be205c61 	.word	0xbe205c61
 800d0f8:	72bea4d0 	.word	0x72bea4d0
 800d0fc:	3e663769 	.word	0x3e663769
 800d100:	c5d26bf1 	.word	0xc5d26bf1
 800d104:	3ebbbd41 	.word	0x3ebbbd41
 800d108:	af25de2c 	.word	0xaf25de2c
 800d10c:	3f11566a 	.word	0x3f11566a
 800d110:	16bebd93 	.word	0x16bebd93
 800d114:	3f66c16c 	.word	0x3f66c16c
 800d118:	5555553e 	.word	0x5555553e
 800d11c:	3fc55555 	.word	0x3fc55555
 800d120:	3fe00000 	.word	0x3fe00000
 800d124:	000fffff 	.word	0x000fffff
 800d128:	3ff00000 	.word	0x3ff00000
 800d12c:	4090cbff 	.word	0x4090cbff
 800d130:	3f6f3400 	.word	0x3f6f3400
 800d134:	652b82fe 	.word	0x652b82fe
 800d138:	3c971547 	.word	0x3c971547
 800d13c:	00000000 	.word	0x00000000

0800d140 <__ieee754_rem_pio2>:
 800d140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d144:	ed2d 8b02 	vpush	{d8}
 800d148:	ec55 4b10 	vmov	r4, r5, d0
 800d14c:	4bca      	ldr	r3, [pc, #808]	; (800d478 <__ieee754_rem_pio2+0x338>)
 800d14e:	b08b      	sub	sp, #44	; 0x2c
 800d150:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d154:	4598      	cmp	r8, r3
 800d156:	4682      	mov	sl, r0
 800d158:	9502      	str	r5, [sp, #8]
 800d15a:	dc08      	bgt.n	800d16e <__ieee754_rem_pio2+0x2e>
 800d15c:	2200      	movs	r2, #0
 800d15e:	2300      	movs	r3, #0
 800d160:	ed80 0b00 	vstr	d0, [r0]
 800d164:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d168:	f04f 0b00 	mov.w	fp, #0
 800d16c:	e028      	b.n	800d1c0 <__ieee754_rem_pio2+0x80>
 800d16e:	4bc3      	ldr	r3, [pc, #780]	; (800d47c <__ieee754_rem_pio2+0x33c>)
 800d170:	4598      	cmp	r8, r3
 800d172:	dc78      	bgt.n	800d266 <__ieee754_rem_pio2+0x126>
 800d174:	9b02      	ldr	r3, [sp, #8]
 800d176:	4ec2      	ldr	r6, [pc, #776]	; (800d480 <__ieee754_rem_pio2+0x340>)
 800d178:	2b00      	cmp	r3, #0
 800d17a:	ee10 0a10 	vmov	r0, s0
 800d17e:	a3b0      	add	r3, pc, #704	; (adr r3, 800d440 <__ieee754_rem_pio2+0x300>)
 800d180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d184:	4629      	mov	r1, r5
 800d186:	dd39      	ble.n	800d1fc <__ieee754_rem_pio2+0xbc>
 800d188:	f7f3 f87e 	bl	8000288 <__aeabi_dsub>
 800d18c:	45b0      	cmp	r8, r6
 800d18e:	4604      	mov	r4, r0
 800d190:	460d      	mov	r5, r1
 800d192:	d01b      	beq.n	800d1cc <__ieee754_rem_pio2+0x8c>
 800d194:	a3ac      	add	r3, pc, #688	; (adr r3, 800d448 <__ieee754_rem_pio2+0x308>)
 800d196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d19a:	f7f3 f875 	bl	8000288 <__aeabi_dsub>
 800d19e:	4602      	mov	r2, r0
 800d1a0:	460b      	mov	r3, r1
 800d1a2:	e9ca 2300 	strd	r2, r3, [sl]
 800d1a6:	4620      	mov	r0, r4
 800d1a8:	4629      	mov	r1, r5
 800d1aa:	f7f3 f86d 	bl	8000288 <__aeabi_dsub>
 800d1ae:	a3a6      	add	r3, pc, #664	; (adr r3, 800d448 <__ieee754_rem_pio2+0x308>)
 800d1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b4:	f7f3 f868 	bl	8000288 <__aeabi_dsub>
 800d1b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d1bc:	f04f 0b01 	mov.w	fp, #1
 800d1c0:	4658      	mov	r0, fp
 800d1c2:	b00b      	add	sp, #44	; 0x2c
 800d1c4:	ecbd 8b02 	vpop	{d8}
 800d1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1cc:	a3a0      	add	r3, pc, #640	; (adr r3, 800d450 <__ieee754_rem_pio2+0x310>)
 800d1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d2:	f7f3 f859 	bl	8000288 <__aeabi_dsub>
 800d1d6:	a3a0      	add	r3, pc, #640	; (adr r3, 800d458 <__ieee754_rem_pio2+0x318>)
 800d1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1dc:	4604      	mov	r4, r0
 800d1de:	460d      	mov	r5, r1
 800d1e0:	f7f3 f852 	bl	8000288 <__aeabi_dsub>
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	460b      	mov	r3, r1
 800d1e8:	e9ca 2300 	strd	r2, r3, [sl]
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	4629      	mov	r1, r5
 800d1f0:	f7f3 f84a 	bl	8000288 <__aeabi_dsub>
 800d1f4:	a398      	add	r3, pc, #608	; (adr r3, 800d458 <__ieee754_rem_pio2+0x318>)
 800d1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1fa:	e7db      	b.n	800d1b4 <__ieee754_rem_pio2+0x74>
 800d1fc:	f7f3 f846 	bl	800028c <__adddf3>
 800d200:	45b0      	cmp	r8, r6
 800d202:	4604      	mov	r4, r0
 800d204:	460d      	mov	r5, r1
 800d206:	d016      	beq.n	800d236 <__ieee754_rem_pio2+0xf6>
 800d208:	a38f      	add	r3, pc, #572	; (adr r3, 800d448 <__ieee754_rem_pio2+0x308>)
 800d20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20e:	f7f3 f83d 	bl	800028c <__adddf3>
 800d212:	4602      	mov	r2, r0
 800d214:	460b      	mov	r3, r1
 800d216:	e9ca 2300 	strd	r2, r3, [sl]
 800d21a:	4620      	mov	r0, r4
 800d21c:	4629      	mov	r1, r5
 800d21e:	f7f3 f833 	bl	8000288 <__aeabi_dsub>
 800d222:	a389      	add	r3, pc, #548	; (adr r3, 800d448 <__ieee754_rem_pio2+0x308>)
 800d224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d228:	f7f3 f830 	bl	800028c <__adddf3>
 800d22c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800d230:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d234:	e7c4      	b.n	800d1c0 <__ieee754_rem_pio2+0x80>
 800d236:	a386      	add	r3, pc, #536	; (adr r3, 800d450 <__ieee754_rem_pio2+0x310>)
 800d238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d23c:	f7f3 f826 	bl	800028c <__adddf3>
 800d240:	a385      	add	r3, pc, #532	; (adr r3, 800d458 <__ieee754_rem_pio2+0x318>)
 800d242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d246:	4604      	mov	r4, r0
 800d248:	460d      	mov	r5, r1
 800d24a:	f7f3 f81f 	bl	800028c <__adddf3>
 800d24e:	4602      	mov	r2, r0
 800d250:	460b      	mov	r3, r1
 800d252:	e9ca 2300 	strd	r2, r3, [sl]
 800d256:	4620      	mov	r0, r4
 800d258:	4629      	mov	r1, r5
 800d25a:	f7f3 f815 	bl	8000288 <__aeabi_dsub>
 800d25e:	a37e      	add	r3, pc, #504	; (adr r3, 800d458 <__ieee754_rem_pio2+0x318>)
 800d260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d264:	e7e0      	b.n	800d228 <__ieee754_rem_pio2+0xe8>
 800d266:	4b87      	ldr	r3, [pc, #540]	; (800d484 <__ieee754_rem_pio2+0x344>)
 800d268:	4598      	cmp	r8, r3
 800d26a:	f300 80d9 	bgt.w	800d420 <__ieee754_rem_pio2+0x2e0>
 800d26e:	f7fe fe6f 	bl	800bf50 <fabs>
 800d272:	ec55 4b10 	vmov	r4, r5, d0
 800d276:	ee10 0a10 	vmov	r0, s0
 800d27a:	a379      	add	r3, pc, #484	; (adr r3, 800d460 <__ieee754_rem_pio2+0x320>)
 800d27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d280:	4629      	mov	r1, r5
 800d282:	f7f3 f9b9 	bl	80005f8 <__aeabi_dmul>
 800d286:	4b80      	ldr	r3, [pc, #512]	; (800d488 <__ieee754_rem_pio2+0x348>)
 800d288:	2200      	movs	r2, #0
 800d28a:	f7f2 ffff 	bl	800028c <__adddf3>
 800d28e:	f7f3 fc63 	bl	8000b58 <__aeabi_d2iz>
 800d292:	4683      	mov	fp, r0
 800d294:	f7f3 f946 	bl	8000524 <__aeabi_i2d>
 800d298:	4602      	mov	r2, r0
 800d29a:	460b      	mov	r3, r1
 800d29c:	ec43 2b18 	vmov	d8, r2, r3
 800d2a0:	a367      	add	r3, pc, #412	; (adr r3, 800d440 <__ieee754_rem_pio2+0x300>)
 800d2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a6:	f7f3 f9a7 	bl	80005f8 <__aeabi_dmul>
 800d2aa:	4602      	mov	r2, r0
 800d2ac:	460b      	mov	r3, r1
 800d2ae:	4620      	mov	r0, r4
 800d2b0:	4629      	mov	r1, r5
 800d2b2:	f7f2 ffe9 	bl	8000288 <__aeabi_dsub>
 800d2b6:	a364      	add	r3, pc, #400	; (adr r3, 800d448 <__ieee754_rem_pio2+0x308>)
 800d2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2bc:	4606      	mov	r6, r0
 800d2be:	460f      	mov	r7, r1
 800d2c0:	ec51 0b18 	vmov	r0, r1, d8
 800d2c4:	f7f3 f998 	bl	80005f8 <__aeabi_dmul>
 800d2c8:	f1bb 0f1f 	cmp.w	fp, #31
 800d2cc:	4604      	mov	r4, r0
 800d2ce:	460d      	mov	r5, r1
 800d2d0:	dc0d      	bgt.n	800d2ee <__ieee754_rem_pio2+0x1ae>
 800d2d2:	4b6e      	ldr	r3, [pc, #440]	; (800d48c <__ieee754_rem_pio2+0x34c>)
 800d2d4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800d2d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2dc:	4543      	cmp	r3, r8
 800d2de:	d006      	beq.n	800d2ee <__ieee754_rem_pio2+0x1ae>
 800d2e0:	4622      	mov	r2, r4
 800d2e2:	462b      	mov	r3, r5
 800d2e4:	4630      	mov	r0, r6
 800d2e6:	4639      	mov	r1, r7
 800d2e8:	f7f2 ffce 	bl	8000288 <__aeabi_dsub>
 800d2ec:	e00f      	b.n	800d30e <__ieee754_rem_pio2+0x1ce>
 800d2ee:	462b      	mov	r3, r5
 800d2f0:	4622      	mov	r2, r4
 800d2f2:	4630      	mov	r0, r6
 800d2f4:	4639      	mov	r1, r7
 800d2f6:	f7f2 ffc7 	bl	8000288 <__aeabi_dsub>
 800d2fa:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d2fe:	9303      	str	r3, [sp, #12]
 800d300:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d304:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800d308:	f1b8 0f10 	cmp.w	r8, #16
 800d30c:	dc02      	bgt.n	800d314 <__ieee754_rem_pio2+0x1d4>
 800d30e:	e9ca 0100 	strd	r0, r1, [sl]
 800d312:	e039      	b.n	800d388 <__ieee754_rem_pio2+0x248>
 800d314:	a34e      	add	r3, pc, #312	; (adr r3, 800d450 <__ieee754_rem_pio2+0x310>)
 800d316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d31a:	ec51 0b18 	vmov	r0, r1, d8
 800d31e:	f7f3 f96b 	bl	80005f8 <__aeabi_dmul>
 800d322:	4604      	mov	r4, r0
 800d324:	460d      	mov	r5, r1
 800d326:	4602      	mov	r2, r0
 800d328:	460b      	mov	r3, r1
 800d32a:	4630      	mov	r0, r6
 800d32c:	4639      	mov	r1, r7
 800d32e:	f7f2 ffab 	bl	8000288 <__aeabi_dsub>
 800d332:	4602      	mov	r2, r0
 800d334:	460b      	mov	r3, r1
 800d336:	4680      	mov	r8, r0
 800d338:	4689      	mov	r9, r1
 800d33a:	4630      	mov	r0, r6
 800d33c:	4639      	mov	r1, r7
 800d33e:	f7f2 ffa3 	bl	8000288 <__aeabi_dsub>
 800d342:	4622      	mov	r2, r4
 800d344:	462b      	mov	r3, r5
 800d346:	f7f2 ff9f 	bl	8000288 <__aeabi_dsub>
 800d34a:	a343      	add	r3, pc, #268	; (adr r3, 800d458 <__ieee754_rem_pio2+0x318>)
 800d34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d350:	4604      	mov	r4, r0
 800d352:	460d      	mov	r5, r1
 800d354:	ec51 0b18 	vmov	r0, r1, d8
 800d358:	f7f3 f94e 	bl	80005f8 <__aeabi_dmul>
 800d35c:	4622      	mov	r2, r4
 800d35e:	462b      	mov	r3, r5
 800d360:	f7f2 ff92 	bl	8000288 <__aeabi_dsub>
 800d364:	4602      	mov	r2, r0
 800d366:	460b      	mov	r3, r1
 800d368:	4604      	mov	r4, r0
 800d36a:	460d      	mov	r5, r1
 800d36c:	4640      	mov	r0, r8
 800d36e:	4649      	mov	r1, r9
 800d370:	f7f2 ff8a 	bl	8000288 <__aeabi_dsub>
 800d374:	9a03      	ldr	r2, [sp, #12]
 800d376:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d37a:	1ad3      	subs	r3, r2, r3
 800d37c:	2b31      	cmp	r3, #49	; 0x31
 800d37e:	dc24      	bgt.n	800d3ca <__ieee754_rem_pio2+0x28a>
 800d380:	e9ca 0100 	strd	r0, r1, [sl]
 800d384:	4646      	mov	r6, r8
 800d386:	464f      	mov	r7, r9
 800d388:	e9da 8900 	ldrd	r8, r9, [sl]
 800d38c:	4630      	mov	r0, r6
 800d38e:	4642      	mov	r2, r8
 800d390:	464b      	mov	r3, r9
 800d392:	4639      	mov	r1, r7
 800d394:	f7f2 ff78 	bl	8000288 <__aeabi_dsub>
 800d398:	462b      	mov	r3, r5
 800d39a:	4622      	mov	r2, r4
 800d39c:	f7f2 ff74 	bl	8000288 <__aeabi_dsub>
 800d3a0:	9b02      	ldr	r3, [sp, #8]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d3a8:	f6bf af0a 	bge.w	800d1c0 <__ieee754_rem_pio2+0x80>
 800d3ac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d3b0:	f8ca 3004 	str.w	r3, [sl, #4]
 800d3b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d3b8:	f8ca 8000 	str.w	r8, [sl]
 800d3bc:	f8ca 0008 	str.w	r0, [sl, #8]
 800d3c0:	f8ca 300c 	str.w	r3, [sl, #12]
 800d3c4:	f1cb 0b00 	rsb	fp, fp, #0
 800d3c8:	e6fa      	b.n	800d1c0 <__ieee754_rem_pio2+0x80>
 800d3ca:	a327      	add	r3, pc, #156	; (adr r3, 800d468 <__ieee754_rem_pio2+0x328>)
 800d3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d0:	ec51 0b18 	vmov	r0, r1, d8
 800d3d4:	f7f3 f910 	bl	80005f8 <__aeabi_dmul>
 800d3d8:	4604      	mov	r4, r0
 800d3da:	460d      	mov	r5, r1
 800d3dc:	4602      	mov	r2, r0
 800d3de:	460b      	mov	r3, r1
 800d3e0:	4640      	mov	r0, r8
 800d3e2:	4649      	mov	r1, r9
 800d3e4:	f7f2 ff50 	bl	8000288 <__aeabi_dsub>
 800d3e8:	4602      	mov	r2, r0
 800d3ea:	460b      	mov	r3, r1
 800d3ec:	4606      	mov	r6, r0
 800d3ee:	460f      	mov	r7, r1
 800d3f0:	4640      	mov	r0, r8
 800d3f2:	4649      	mov	r1, r9
 800d3f4:	f7f2 ff48 	bl	8000288 <__aeabi_dsub>
 800d3f8:	4622      	mov	r2, r4
 800d3fa:	462b      	mov	r3, r5
 800d3fc:	f7f2 ff44 	bl	8000288 <__aeabi_dsub>
 800d400:	a31b      	add	r3, pc, #108	; (adr r3, 800d470 <__ieee754_rem_pio2+0x330>)
 800d402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d406:	4604      	mov	r4, r0
 800d408:	460d      	mov	r5, r1
 800d40a:	ec51 0b18 	vmov	r0, r1, d8
 800d40e:	f7f3 f8f3 	bl	80005f8 <__aeabi_dmul>
 800d412:	4622      	mov	r2, r4
 800d414:	462b      	mov	r3, r5
 800d416:	f7f2 ff37 	bl	8000288 <__aeabi_dsub>
 800d41a:	4604      	mov	r4, r0
 800d41c:	460d      	mov	r5, r1
 800d41e:	e75f      	b.n	800d2e0 <__ieee754_rem_pio2+0x1a0>
 800d420:	4b1b      	ldr	r3, [pc, #108]	; (800d490 <__ieee754_rem_pio2+0x350>)
 800d422:	4598      	cmp	r8, r3
 800d424:	dd36      	ble.n	800d494 <__ieee754_rem_pio2+0x354>
 800d426:	ee10 2a10 	vmov	r2, s0
 800d42a:	462b      	mov	r3, r5
 800d42c:	4620      	mov	r0, r4
 800d42e:	4629      	mov	r1, r5
 800d430:	f7f2 ff2a 	bl	8000288 <__aeabi_dsub>
 800d434:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d438:	e9ca 0100 	strd	r0, r1, [sl]
 800d43c:	e694      	b.n	800d168 <__ieee754_rem_pio2+0x28>
 800d43e:	bf00      	nop
 800d440:	54400000 	.word	0x54400000
 800d444:	3ff921fb 	.word	0x3ff921fb
 800d448:	1a626331 	.word	0x1a626331
 800d44c:	3dd0b461 	.word	0x3dd0b461
 800d450:	1a600000 	.word	0x1a600000
 800d454:	3dd0b461 	.word	0x3dd0b461
 800d458:	2e037073 	.word	0x2e037073
 800d45c:	3ba3198a 	.word	0x3ba3198a
 800d460:	6dc9c883 	.word	0x6dc9c883
 800d464:	3fe45f30 	.word	0x3fe45f30
 800d468:	2e000000 	.word	0x2e000000
 800d46c:	3ba3198a 	.word	0x3ba3198a
 800d470:	252049c1 	.word	0x252049c1
 800d474:	397b839a 	.word	0x397b839a
 800d478:	3fe921fb 	.word	0x3fe921fb
 800d47c:	4002d97b 	.word	0x4002d97b
 800d480:	3ff921fb 	.word	0x3ff921fb
 800d484:	413921fb 	.word	0x413921fb
 800d488:	3fe00000 	.word	0x3fe00000
 800d48c:	0800ec28 	.word	0x0800ec28
 800d490:	7fefffff 	.word	0x7fefffff
 800d494:	ea4f 5428 	mov.w	r4, r8, asr #20
 800d498:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800d49c:	ee10 0a10 	vmov	r0, s0
 800d4a0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800d4a4:	ee10 6a10 	vmov	r6, s0
 800d4a8:	460f      	mov	r7, r1
 800d4aa:	f7f3 fb55 	bl	8000b58 <__aeabi_d2iz>
 800d4ae:	f7f3 f839 	bl	8000524 <__aeabi_i2d>
 800d4b2:	4602      	mov	r2, r0
 800d4b4:	460b      	mov	r3, r1
 800d4b6:	4630      	mov	r0, r6
 800d4b8:	4639      	mov	r1, r7
 800d4ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d4be:	f7f2 fee3 	bl	8000288 <__aeabi_dsub>
 800d4c2:	4b23      	ldr	r3, [pc, #140]	; (800d550 <__ieee754_rem_pio2+0x410>)
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	f7f3 f897 	bl	80005f8 <__aeabi_dmul>
 800d4ca:	460f      	mov	r7, r1
 800d4cc:	4606      	mov	r6, r0
 800d4ce:	f7f3 fb43 	bl	8000b58 <__aeabi_d2iz>
 800d4d2:	f7f3 f827 	bl	8000524 <__aeabi_i2d>
 800d4d6:	4602      	mov	r2, r0
 800d4d8:	460b      	mov	r3, r1
 800d4da:	4630      	mov	r0, r6
 800d4dc:	4639      	mov	r1, r7
 800d4de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d4e2:	f7f2 fed1 	bl	8000288 <__aeabi_dsub>
 800d4e6:	4b1a      	ldr	r3, [pc, #104]	; (800d550 <__ieee754_rem_pio2+0x410>)
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	f7f3 f885 	bl	80005f8 <__aeabi_dmul>
 800d4ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d4f2:	ad04      	add	r5, sp, #16
 800d4f4:	f04f 0803 	mov.w	r8, #3
 800d4f8:	46a9      	mov	r9, r5
 800d4fa:	2600      	movs	r6, #0
 800d4fc:	2700      	movs	r7, #0
 800d4fe:	4632      	mov	r2, r6
 800d500:	463b      	mov	r3, r7
 800d502:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800d506:	46c3      	mov	fp, r8
 800d508:	3d08      	subs	r5, #8
 800d50a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d50e:	f7f3 fadb 	bl	8000ac8 <__aeabi_dcmpeq>
 800d512:	2800      	cmp	r0, #0
 800d514:	d1f3      	bne.n	800d4fe <__ieee754_rem_pio2+0x3be>
 800d516:	4b0f      	ldr	r3, [pc, #60]	; (800d554 <__ieee754_rem_pio2+0x414>)
 800d518:	9301      	str	r3, [sp, #4]
 800d51a:	2302      	movs	r3, #2
 800d51c:	9300      	str	r3, [sp, #0]
 800d51e:	4622      	mov	r2, r4
 800d520:	465b      	mov	r3, fp
 800d522:	4651      	mov	r1, sl
 800d524:	4648      	mov	r0, r9
 800d526:	f000 f993 	bl	800d850 <__kernel_rem_pio2>
 800d52a:	9b02      	ldr	r3, [sp, #8]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	4683      	mov	fp, r0
 800d530:	f6bf ae46 	bge.w	800d1c0 <__ieee754_rem_pio2+0x80>
 800d534:	e9da 2100 	ldrd	r2, r1, [sl]
 800d538:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d53c:	e9ca 2300 	strd	r2, r3, [sl]
 800d540:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800d544:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d548:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800d54c:	e73a      	b.n	800d3c4 <__ieee754_rem_pio2+0x284>
 800d54e:	bf00      	nop
 800d550:	41700000 	.word	0x41700000
 800d554:	0800eca8 	.word	0x0800eca8

0800d558 <__ieee754_sqrt>:
 800d558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d55c:	ec55 4b10 	vmov	r4, r5, d0
 800d560:	4e55      	ldr	r6, [pc, #340]	; (800d6b8 <__ieee754_sqrt+0x160>)
 800d562:	43ae      	bics	r6, r5
 800d564:	ee10 0a10 	vmov	r0, s0
 800d568:	ee10 3a10 	vmov	r3, s0
 800d56c:	462a      	mov	r2, r5
 800d56e:	4629      	mov	r1, r5
 800d570:	d110      	bne.n	800d594 <__ieee754_sqrt+0x3c>
 800d572:	ee10 2a10 	vmov	r2, s0
 800d576:	462b      	mov	r3, r5
 800d578:	f7f3 f83e 	bl	80005f8 <__aeabi_dmul>
 800d57c:	4602      	mov	r2, r0
 800d57e:	460b      	mov	r3, r1
 800d580:	4620      	mov	r0, r4
 800d582:	4629      	mov	r1, r5
 800d584:	f7f2 fe82 	bl	800028c <__adddf3>
 800d588:	4604      	mov	r4, r0
 800d58a:	460d      	mov	r5, r1
 800d58c:	ec45 4b10 	vmov	d0, r4, r5
 800d590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d594:	2d00      	cmp	r5, #0
 800d596:	dc10      	bgt.n	800d5ba <__ieee754_sqrt+0x62>
 800d598:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d59c:	4330      	orrs	r0, r6
 800d59e:	d0f5      	beq.n	800d58c <__ieee754_sqrt+0x34>
 800d5a0:	b15d      	cbz	r5, 800d5ba <__ieee754_sqrt+0x62>
 800d5a2:	ee10 2a10 	vmov	r2, s0
 800d5a6:	462b      	mov	r3, r5
 800d5a8:	ee10 0a10 	vmov	r0, s0
 800d5ac:	f7f2 fe6c 	bl	8000288 <__aeabi_dsub>
 800d5b0:	4602      	mov	r2, r0
 800d5b2:	460b      	mov	r3, r1
 800d5b4:	f7f3 f94a 	bl	800084c <__aeabi_ddiv>
 800d5b8:	e7e6      	b.n	800d588 <__ieee754_sqrt+0x30>
 800d5ba:	1512      	asrs	r2, r2, #20
 800d5bc:	d074      	beq.n	800d6a8 <__ieee754_sqrt+0x150>
 800d5be:	07d4      	lsls	r4, r2, #31
 800d5c0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d5c4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800d5c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d5cc:	bf5e      	ittt	pl
 800d5ce:	0fda      	lsrpl	r2, r3, #31
 800d5d0:	005b      	lslpl	r3, r3, #1
 800d5d2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800d5d6:	2400      	movs	r4, #0
 800d5d8:	0fda      	lsrs	r2, r3, #31
 800d5da:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d5de:	107f      	asrs	r7, r7, #1
 800d5e0:	005b      	lsls	r3, r3, #1
 800d5e2:	2516      	movs	r5, #22
 800d5e4:	4620      	mov	r0, r4
 800d5e6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d5ea:	1886      	adds	r6, r0, r2
 800d5ec:	428e      	cmp	r6, r1
 800d5ee:	bfde      	ittt	le
 800d5f0:	1b89      	suble	r1, r1, r6
 800d5f2:	18b0      	addle	r0, r6, r2
 800d5f4:	18a4      	addle	r4, r4, r2
 800d5f6:	0049      	lsls	r1, r1, #1
 800d5f8:	3d01      	subs	r5, #1
 800d5fa:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800d5fe:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d602:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d606:	d1f0      	bne.n	800d5ea <__ieee754_sqrt+0x92>
 800d608:	462a      	mov	r2, r5
 800d60a:	f04f 0e20 	mov.w	lr, #32
 800d60e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d612:	4281      	cmp	r1, r0
 800d614:	eb06 0c05 	add.w	ip, r6, r5
 800d618:	dc02      	bgt.n	800d620 <__ieee754_sqrt+0xc8>
 800d61a:	d113      	bne.n	800d644 <__ieee754_sqrt+0xec>
 800d61c:	459c      	cmp	ip, r3
 800d61e:	d811      	bhi.n	800d644 <__ieee754_sqrt+0xec>
 800d620:	f1bc 0f00 	cmp.w	ip, #0
 800d624:	eb0c 0506 	add.w	r5, ip, r6
 800d628:	da43      	bge.n	800d6b2 <__ieee754_sqrt+0x15a>
 800d62a:	2d00      	cmp	r5, #0
 800d62c:	db41      	blt.n	800d6b2 <__ieee754_sqrt+0x15a>
 800d62e:	f100 0801 	add.w	r8, r0, #1
 800d632:	1a09      	subs	r1, r1, r0
 800d634:	459c      	cmp	ip, r3
 800d636:	bf88      	it	hi
 800d638:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800d63c:	eba3 030c 	sub.w	r3, r3, ip
 800d640:	4432      	add	r2, r6
 800d642:	4640      	mov	r0, r8
 800d644:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800d648:	f1be 0e01 	subs.w	lr, lr, #1
 800d64c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800d650:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d654:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d658:	d1db      	bne.n	800d612 <__ieee754_sqrt+0xba>
 800d65a:	430b      	orrs	r3, r1
 800d65c:	d006      	beq.n	800d66c <__ieee754_sqrt+0x114>
 800d65e:	1c50      	adds	r0, r2, #1
 800d660:	bf13      	iteet	ne
 800d662:	3201      	addne	r2, #1
 800d664:	3401      	addeq	r4, #1
 800d666:	4672      	moveq	r2, lr
 800d668:	f022 0201 	bicne.w	r2, r2, #1
 800d66c:	1063      	asrs	r3, r4, #1
 800d66e:	0852      	lsrs	r2, r2, #1
 800d670:	07e1      	lsls	r1, r4, #31
 800d672:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d676:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d67a:	bf48      	it	mi
 800d67c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d680:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800d684:	4614      	mov	r4, r2
 800d686:	e781      	b.n	800d58c <__ieee754_sqrt+0x34>
 800d688:	0ad9      	lsrs	r1, r3, #11
 800d68a:	3815      	subs	r0, #21
 800d68c:	055b      	lsls	r3, r3, #21
 800d68e:	2900      	cmp	r1, #0
 800d690:	d0fa      	beq.n	800d688 <__ieee754_sqrt+0x130>
 800d692:	02cd      	lsls	r5, r1, #11
 800d694:	d50a      	bpl.n	800d6ac <__ieee754_sqrt+0x154>
 800d696:	f1c2 0420 	rsb	r4, r2, #32
 800d69a:	fa23 f404 	lsr.w	r4, r3, r4
 800d69e:	1e55      	subs	r5, r2, #1
 800d6a0:	4093      	lsls	r3, r2
 800d6a2:	4321      	orrs	r1, r4
 800d6a4:	1b42      	subs	r2, r0, r5
 800d6a6:	e78a      	b.n	800d5be <__ieee754_sqrt+0x66>
 800d6a8:	4610      	mov	r0, r2
 800d6aa:	e7f0      	b.n	800d68e <__ieee754_sqrt+0x136>
 800d6ac:	0049      	lsls	r1, r1, #1
 800d6ae:	3201      	adds	r2, #1
 800d6b0:	e7ef      	b.n	800d692 <__ieee754_sqrt+0x13a>
 800d6b2:	4680      	mov	r8, r0
 800d6b4:	e7bd      	b.n	800d632 <__ieee754_sqrt+0xda>
 800d6b6:	bf00      	nop
 800d6b8:	7ff00000 	.word	0x7ff00000
 800d6bc:	00000000 	.word	0x00000000

0800d6c0 <__kernel_cos>:
 800d6c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6c4:	ec57 6b10 	vmov	r6, r7, d0
 800d6c8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d6cc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d6d0:	ed8d 1b00 	vstr	d1, [sp]
 800d6d4:	da07      	bge.n	800d6e6 <__kernel_cos+0x26>
 800d6d6:	ee10 0a10 	vmov	r0, s0
 800d6da:	4639      	mov	r1, r7
 800d6dc:	f7f3 fa3c 	bl	8000b58 <__aeabi_d2iz>
 800d6e0:	2800      	cmp	r0, #0
 800d6e2:	f000 8088 	beq.w	800d7f6 <__kernel_cos+0x136>
 800d6e6:	4632      	mov	r2, r6
 800d6e8:	463b      	mov	r3, r7
 800d6ea:	4630      	mov	r0, r6
 800d6ec:	4639      	mov	r1, r7
 800d6ee:	f7f2 ff83 	bl	80005f8 <__aeabi_dmul>
 800d6f2:	4b51      	ldr	r3, [pc, #324]	; (800d838 <__kernel_cos+0x178>)
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	4604      	mov	r4, r0
 800d6f8:	460d      	mov	r5, r1
 800d6fa:	f7f2 ff7d 	bl	80005f8 <__aeabi_dmul>
 800d6fe:	a340      	add	r3, pc, #256	; (adr r3, 800d800 <__kernel_cos+0x140>)
 800d700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d704:	4682      	mov	sl, r0
 800d706:	468b      	mov	fp, r1
 800d708:	4620      	mov	r0, r4
 800d70a:	4629      	mov	r1, r5
 800d70c:	f7f2 ff74 	bl	80005f8 <__aeabi_dmul>
 800d710:	a33d      	add	r3, pc, #244	; (adr r3, 800d808 <__kernel_cos+0x148>)
 800d712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d716:	f7f2 fdb9 	bl	800028c <__adddf3>
 800d71a:	4622      	mov	r2, r4
 800d71c:	462b      	mov	r3, r5
 800d71e:	f7f2 ff6b 	bl	80005f8 <__aeabi_dmul>
 800d722:	a33b      	add	r3, pc, #236	; (adr r3, 800d810 <__kernel_cos+0x150>)
 800d724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d728:	f7f2 fdae 	bl	8000288 <__aeabi_dsub>
 800d72c:	4622      	mov	r2, r4
 800d72e:	462b      	mov	r3, r5
 800d730:	f7f2 ff62 	bl	80005f8 <__aeabi_dmul>
 800d734:	a338      	add	r3, pc, #224	; (adr r3, 800d818 <__kernel_cos+0x158>)
 800d736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d73a:	f7f2 fda7 	bl	800028c <__adddf3>
 800d73e:	4622      	mov	r2, r4
 800d740:	462b      	mov	r3, r5
 800d742:	f7f2 ff59 	bl	80005f8 <__aeabi_dmul>
 800d746:	a336      	add	r3, pc, #216	; (adr r3, 800d820 <__kernel_cos+0x160>)
 800d748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d74c:	f7f2 fd9c 	bl	8000288 <__aeabi_dsub>
 800d750:	4622      	mov	r2, r4
 800d752:	462b      	mov	r3, r5
 800d754:	f7f2 ff50 	bl	80005f8 <__aeabi_dmul>
 800d758:	a333      	add	r3, pc, #204	; (adr r3, 800d828 <__kernel_cos+0x168>)
 800d75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75e:	f7f2 fd95 	bl	800028c <__adddf3>
 800d762:	4622      	mov	r2, r4
 800d764:	462b      	mov	r3, r5
 800d766:	f7f2 ff47 	bl	80005f8 <__aeabi_dmul>
 800d76a:	4622      	mov	r2, r4
 800d76c:	462b      	mov	r3, r5
 800d76e:	f7f2 ff43 	bl	80005f8 <__aeabi_dmul>
 800d772:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d776:	4604      	mov	r4, r0
 800d778:	460d      	mov	r5, r1
 800d77a:	4630      	mov	r0, r6
 800d77c:	4639      	mov	r1, r7
 800d77e:	f7f2 ff3b 	bl	80005f8 <__aeabi_dmul>
 800d782:	460b      	mov	r3, r1
 800d784:	4602      	mov	r2, r0
 800d786:	4629      	mov	r1, r5
 800d788:	4620      	mov	r0, r4
 800d78a:	f7f2 fd7d 	bl	8000288 <__aeabi_dsub>
 800d78e:	4b2b      	ldr	r3, [pc, #172]	; (800d83c <__kernel_cos+0x17c>)
 800d790:	4598      	cmp	r8, r3
 800d792:	4606      	mov	r6, r0
 800d794:	460f      	mov	r7, r1
 800d796:	dc10      	bgt.n	800d7ba <__kernel_cos+0xfa>
 800d798:	4602      	mov	r2, r0
 800d79a:	460b      	mov	r3, r1
 800d79c:	4650      	mov	r0, sl
 800d79e:	4659      	mov	r1, fp
 800d7a0:	f7f2 fd72 	bl	8000288 <__aeabi_dsub>
 800d7a4:	460b      	mov	r3, r1
 800d7a6:	4926      	ldr	r1, [pc, #152]	; (800d840 <__kernel_cos+0x180>)
 800d7a8:	4602      	mov	r2, r0
 800d7aa:	2000      	movs	r0, #0
 800d7ac:	f7f2 fd6c 	bl	8000288 <__aeabi_dsub>
 800d7b0:	ec41 0b10 	vmov	d0, r0, r1
 800d7b4:	b003      	add	sp, #12
 800d7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ba:	4b22      	ldr	r3, [pc, #136]	; (800d844 <__kernel_cos+0x184>)
 800d7bc:	4920      	ldr	r1, [pc, #128]	; (800d840 <__kernel_cos+0x180>)
 800d7be:	4598      	cmp	r8, r3
 800d7c0:	bfcc      	ite	gt
 800d7c2:	4d21      	ldrgt	r5, [pc, #132]	; (800d848 <__kernel_cos+0x188>)
 800d7c4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d7c8:	2400      	movs	r4, #0
 800d7ca:	4622      	mov	r2, r4
 800d7cc:	462b      	mov	r3, r5
 800d7ce:	2000      	movs	r0, #0
 800d7d0:	f7f2 fd5a 	bl	8000288 <__aeabi_dsub>
 800d7d4:	4622      	mov	r2, r4
 800d7d6:	4680      	mov	r8, r0
 800d7d8:	4689      	mov	r9, r1
 800d7da:	462b      	mov	r3, r5
 800d7dc:	4650      	mov	r0, sl
 800d7de:	4659      	mov	r1, fp
 800d7e0:	f7f2 fd52 	bl	8000288 <__aeabi_dsub>
 800d7e4:	4632      	mov	r2, r6
 800d7e6:	463b      	mov	r3, r7
 800d7e8:	f7f2 fd4e 	bl	8000288 <__aeabi_dsub>
 800d7ec:	4602      	mov	r2, r0
 800d7ee:	460b      	mov	r3, r1
 800d7f0:	4640      	mov	r0, r8
 800d7f2:	4649      	mov	r1, r9
 800d7f4:	e7da      	b.n	800d7ac <__kernel_cos+0xec>
 800d7f6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d830 <__kernel_cos+0x170>
 800d7fa:	e7db      	b.n	800d7b4 <__kernel_cos+0xf4>
 800d7fc:	f3af 8000 	nop.w
 800d800:	be8838d4 	.word	0xbe8838d4
 800d804:	bda8fae9 	.word	0xbda8fae9
 800d808:	bdb4b1c4 	.word	0xbdb4b1c4
 800d80c:	3e21ee9e 	.word	0x3e21ee9e
 800d810:	809c52ad 	.word	0x809c52ad
 800d814:	3e927e4f 	.word	0x3e927e4f
 800d818:	19cb1590 	.word	0x19cb1590
 800d81c:	3efa01a0 	.word	0x3efa01a0
 800d820:	16c15177 	.word	0x16c15177
 800d824:	3f56c16c 	.word	0x3f56c16c
 800d828:	5555554c 	.word	0x5555554c
 800d82c:	3fa55555 	.word	0x3fa55555
 800d830:	00000000 	.word	0x00000000
 800d834:	3ff00000 	.word	0x3ff00000
 800d838:	3fe00000 	.word	0x3fe00000
 800d83c:	3fd33332 	.word	0x3fd33332
 800d840:	3ff00000 	.word	0x3ff00000
 800d844:	3fe90000 	.word	0x3fe90000
 800d848:	3fd20000 	.word	0x3fd20000
 800d84c:	00000000 	.word	0x00000000

0800d850 <__kernel_rem_pio2>:
 800d850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d854:	ed2d 8b02 	vpush	{d8}
 800d858:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800d85c:	f112 0f14 	cmn.w	r2, #20
 800d860:	9308      	str	r3, [sp, #32]
 800d862:	9101      	str	r1, [sp, #4]
 800d864:	4bc4      	ldr	r3, [pc, #784]	; (800db78 <__kernel_rem_pio2+0x328>)
 800d866:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800d868:	900b      	str	r0, [sp, #44]	; 0x2c
 800d86a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d86e:	9302      	str	r3, [sp, #8]
 800d870:	9b08      	ldr	r3, [sp, #32]
 800d872:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800d876:	bfa8      	it	ge
 800d878:	1ed4      	subge	r4, r2, #3
 800d87a:	9306      	str	r3, [sp, #24]
 800d87c:	bfb2      	itee	lt
 800d87e:	2400      	movlt	r4, #0
 800d880:	2318      	movge	r3, #24
 800d882:	fb94 f4f3 	sdivge	r4, r4, r3
 800d886:	f06f 0317 	mvn.w	r3, #23
 800d88a:	fb04 3303 	mla	r3, r4, r3, r3
 800d88e:	eb03 0a02 	add.w	sl, r3, r2
 800d892:	9b02      	ldr	r3, [sp, #8]
 800d894:	9a06      	ldr	r2, [sp, #24]
 800d896:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800db68 <__kernel_rem_pio2+0x318>
 800d89a:	eb03 0802 	add.w	r8, r3, r2
 800d89e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d8a0:	1aa7      	subs	r7, r4, r2
 800d8a2:	ae22      	add	r6, sp, #136	; 0x88
 800d8a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d8a8:	2500      	movs	r5, #0
 800d8aa:	4545      	cmp	r5, r8
 800d8ac:	dd13      	ble.n	800d8d6 <__kernel_rem_pio2+0x86>
 800d8ae:	9b08      	ldr	r3, [sp, #32]
 800d8b0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800db68 <__kernel_rem_pio2+0x318>
 800d8b4:	aa22      	add	r2, sp, #136	; 0x88
 800d8b6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d8ba:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800d8be:	f04f 0800 	mov.w	r8, #0
 800d8c2:	9b02      	ldr	r3, [sp, #8]
 800d8c4:	4598      	cmp	r8, r3
 800d8c6:	dc2f      	bgt.n	800d928 <__kernel_rem_pio2+0xd8>
 800d8c8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d8cc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800d8d0:	462f      	mov	r7, r5
 800d8d2:	2600      	movs	r6, #0
 800d8d4:	e01b      	b.n	800d90e <__kernel_rem_pio2+0xbe>
 800d8d6:	42ef      	cmn	r7, r5
 800d8d8:	d407      	bmi.n	800d8ea <__kernel_rem_pio2+0x9a>
 800d8da:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d8de:	f7f2 fe21 	bl	8000524 <__aeabi_i2d>
 800d8e2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d8e6:	3501      	adds	r5, #1
 800d8e8:	e7df      	b.n	800d8aa <__kernel_rem_pio2+0x5a>
 800d8ea:	ec51 0b18 	vmov	r0, r1, d8
 800d8ee:	e7f8      	b.n	800d8e2 <__kernel_rem_pio2+0x92>
 800d8f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d8f4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d8f8:	f7f2 fe7e 	bl	80005f8 <__aeabi_dmul>
 800d8fc:	4602      	mov	r2, r0
 800d8fe:	460b      	mov	r3, r1
 800d900:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d904:	f7f2 fcc2 	bl	800028c <__adddf3>
 800d908:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d90c:	3601      	adds	r6, #1
 800d90e:	9b06      	ldr	r3, [sp, #24]
 800d910:	429e      	cmp	r6, r3
 800d912:	f1a7 0708 	sub.w	r7, r7, #8
 800d916:	ddeb      	ble.n	800d8f0 <__kernel_rem_pio2+0xa0>
 800d918:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d91c:	f108 0801 	add.w	r8, r8, #1
 800d920:	ecab 7b02 	vstmia	fp!, {d7}
 800d924:	3508      	adds	r5, #8
 800d926:	e7cc      	b.n	800d8c2 <__kernel_rem_pio2+0x72>
 800d928:	9b02      	ldr	r3, [sp, #8]
 800d92a:	aa0e      	add	r2, sp, #56	; 0x38
 800d92c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d930:	930d      	str	r3, [sp, #52]	; 0x34
 800d932:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d934:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d938:	9c02      	ldr	r4, [sp, #8]
 800d93a:	930c      	str	r3, [sp, #48]	; 0x30
 800d93c:	00e3      	lsls	r3, r4, #3
 800d93e:	930a      	str	r3, [sp, #40]	; 0x28
 800d940:	ab9a      	add	r3, sp, #616	; 0x268
 800d942:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d946:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d94a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800d94e:	ab72      	add	r3, sp, #456	; 0x1c8
 800d950:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800d954:	46c3      	mov	fp, r8
 800d956:	46a1      	mov	r9, r4
 800d958:	f1b9 0f00 	cmp.w	r9, #0
 800d95c:	f1a5 0508 	sub.w	r5, r5, #8
 800d960:	dc77      	bgt.n	800da52 <__kernel_rem_pio2+0x202>
 800d962:	ec47 6b10 	vmov	d0, r6, r7
 800d966:	4650      	mov	r0, sl
 800d968:	f000 fe52 	bl	800e610 <scalbn>
 800d96c:	ec57 6b10 	vmov	r6, r7, d0
 800d970:	2200      	movs	r2, #0
 800d972:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d976:	ee10 0a10 	vmov	r0, s0
 800d97a:	4639      	mov	r1, r7
 800d97c:	f7f2 fe3c 	bl	80005f8 <__aeabi_dmul>
 800d980:	ec41 0b10 	vmov	d0, r0, r1
 800d984:	f000 fdbc 	bl	800e500 <floor>
 800d988:	4b7c      	ldr	r3, [pc, #496]	; (800db7c <__kernel_rem_pio2+0x32c>)
 800d98a:	ec51 0b10 	vmov	r0, r1, d0
 800d98e:	2200      	movs	r2, #0
 800d990:	f7f2 fe32 	bl	80005f8 <__aeabi_dmul>
 800d994:	4602      	mov	r2, r0
 800d996:	460b      	mov	r3, r1
 800d998:	4630      	mov	r0, r6
 800d99a:	4639      	mov	r1, r7
 800d99c:	f7f2 fc74 	bl	8000288 <__aeabi_dsub>
 800d9a0:	460f      	mov	r7, r1
 800d9a2:	4606      	mov	r6, r0
 800d9a4:	f7f3 f8d8 	bl	8000b58 <__aeabi_d2iz>
 800d9a8:	9004      	str	r0, [sp, #16]
 800d9aa:	f7f2 fdbb 	bl	8000524 <__aeabi_i2d>
 800d9ae:	4602      	mov	r2, r0
 800d9b0:	460b      	mov	r3, r1
 800d9b2:	4630      	mov	r0, r6
 800d9b4:	4639      	mov	r1, r7
 800d9b6:	f7f2 fc67 	bl	8000288 <__aeabi_dsub>
 800d9ba:	f1ba 0f00 	cmp.w	sl, #0
 800d9be:	4606      	mov	r6, r0
 800d9c0:	460f      	mov	r7, r1
 800d9c2:	dd6d      	ble.n	800daa0 <__kernel_rem_pio2+0x250>
 800d9c4:	1e62      	subs	r2, r4, #1
 800d9c6:	ab0e      	add	r3, sp, #56	; 0x38
 800d9c8:	9d04      	ldr	r5, [sp, #16]
 800d9ca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d9ce:	f1ca 0118 	rsb	r1, sl, #24
 800d9d2:	fa40 f301 	asr.w	r3, r0, r1
 800d9d6:	441d      	add	r5, r3
 800d9d8:	408b      	lsls	r3, r1
 800d9da:	1ac0      	subs	r0, r0, r3
 800d9dc:	ab0e      	add	r3, sp, #56	; 0x38
 800d9de:	9504      	str	r5, [sp, #16]
 800d9e0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d9e4:	f1ca 0317 	rsb	r3, sl, #23
 800d9e8:	fa40 fb03 	asr.w	fp, r0, r3
 800d9ec:	f1bb 0f00 	cmp.w	fp, #0
 800d9f0:	dd65      	ble.n	800dabe <__kernel_rem_pio2+0x26e>
 800d9f2:	9b04      	ldr	r3, [sp, #16]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	3301      	adds	r3, #1
 800d9f8:	9304      	str	r3, [sp, #16]
 800d9fa:	4615      	mov	r5, r2
 800d9fc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800da00:	4294      	cmp	r4, r2
 800da02:	f300 809c 	bgt.w	800db3e <__kernel_rem_pio2+0x2ee>
 800da06:	f1ba 0f00 	cmp.w	sl, #0
 800da0a:	dd07      	ble.n	800da1c <__kernel_rem_pio2+0x1cc>
 800da0c:	f1ba 0f01 	cmp.w	sl, #1
 800da10:	f000 80c0 	beq.w	800db94 <__kernel_rem_pio2+0x344>
 800da14:	f1ba 0f02 	cmp.w	sl, #2
 800da18:	f000 80c6 	beq.w	800dba8 <__kernel_rem_pio2+0x358>
 800da1c:	f1bb 0f02 	cmp.w	fp, #2
 800da20:	d14d      	bne.n	800dabe <__kernel_rem_pio2+0x26e>
 800da22:	4632      	mov	r2, r6
 800da24:	463b      	mov	r3, r7
 800da26:	4956      	ldr	r1, [pc, #344]	; (800db80 <__kernel_rem_pio2+0x330>)
 800da28:	2000      	movs	r0, #0
 800da2a:	f7f2 fc2d 	bl	8000288 <__aeabi_dsub>
 800da2e:	4606      	mov	r6, r0
 800da30:	460f      	mov	r7, r1
 800da32:	2d00      	cmp	r5, #0
 800da34:	d043      	beq.n	800dabe <__kernel_rem_pio2+0x26e>
 800da36:	4650      	mov	r0, sl
 800da38:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800db70 <__kernel_rem_pio2+0x320>
 800da3c:	f000 fde8 	bl	800e610 <scalbn>
 800da40:	4630      	mov	r0, r6
 800da42:	4639      	mov	r1, r7
 800da44:	ec53 2b10 	vmov	r2, r3, d0
 800da48:	f7f2 fc1e 	bl	8000288 <__aeabi_dsub>
 800da4c:	4606      	mov	r6, r0
 800da4e:	460f      	mov	r7, r1
 800da50:	e035      	b.n	800dabe <__kernel_rem_pio2+0x26e>
 800da52:	4b4c      	ldr	r3, [pc, #304]	; (800db84 <__kernel_rem_pio2+0x334>)
 800da54:	2200      	movs	r2, #0
 800da56:	4630      	mov	r0, r6
 800da58:	4639      	mov	r1, r7
 800da5a:	f7f2 fdcd 	bl	80005f8 <__aeabi_dmul>
 800da5e:	f7f3 f87b 	bl	8000b58 <__aeabi_d2iz>
 800da62:	f7f2 fd5f 	bl	8000524 <__aeabi_i2d>
 800da66:	4602      	mov	r2, r0
 800da68:	460b      	mov	r3, r1
 800da6a:	ec43 2b18 	vmov	d8, r2, r3
 800da6e:	4b46      	ldr	r3, [pc, #280]	; (800db88 <__kernel_rem_pio2+0x338>)
 800da70:	2200      	movs	r2, #0
 800da72:	f7f2 fdc1 	bl	80005f8 <__aeabi_dmul>
 800da76:	4602      	mov	r2, r0
 800da78:	460b      	mov	r3, r1
 800da7a:	4630      	mov	r0, r6
 800da7c:	4639      	mov	r1, r7
 800da7e:	f7f2 fc03 	bl	8000288 <__aeabi_dsub>
 800da82:	f7f3 f869 	bl	8000b58 <__aeabi_d2iz>
 800da86:	e9d5 2300 	ldrd	r2, r3, [r5]
 800da8a:	f84b 0b04 	str.w	r0, [fp], #4
 800da8e:	ec51 0b18 	vmov	r0, r1, d8
 800da92:	f7f2 fbfb 	bl	800028c <__adddf3>
 800da96:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800da9a:	4606      	mov	r6, r0
 800da9c:	460f      	mov	r7, r1
 800da9e:	e75b      	b.n	800d958 <__kernel_rem_pio2+0x108>
 800daa0:	d106      	bne.n	800dab0 <__kernel_rem_pio2+0x260>
 800daa2:	1e63      	subs	r3, r4, #1
 800daa4:	aa0e      	add	r2, sp, #56	; 0x38
 800daa6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800daaa:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800daae:	e79d      	b.n	800d9ec <__kernel_rem_pio2+0x19c>
 800dab0:	4b36      	ldr	r3, [pc, #216]	; (800db8c <__kernel_rem_pio2+0x33c>)
 800dab2:	2200      	movs	r2, #0
 800dab4:	f7f3 f826 	bl	8000b04 <__aeabi_dcmpge>
 800dab8:	2800      	cmp	r0, #0
 800daba:	d13d      	bne.n	800db38 <__kernel_rem_pio2+0x2e8>
 800dabc:	4683      	mov	fp, r0
 800dabe:	2200      	movs	r2, #0
 800dac0:	2300      	movs	r3, #0
 800dac2:	4630      	mov	r0, r6
 800dac4:	4639      	mov	r1, r7
 800dac6:	f7f2 ffff 	bl	8000ac8 <__aeabi_dcmpeq>
 800daca:	2800      	cmp	r0, #0
 800dacc:	f000 80c0 	beq.w	800dc50 <__kernel_rem_pio2+0x400>
 800dad0:	1e65      	subs	r5, r4, #1
 800dad2:	462b      	mov	r3, r5
 800dad4:	2200      	movs	r2, #0
 800dad6:	9902      	ldr	r1, [sp, #8]
 800dad8:	428b      	cmp	r3, r1
 800dada:	da6c      	bge.n	800dbb6 <__kernel_rem_pio2+0x366>
 800dadc:	2a00      	cmp	r2, #0
 800dade:	f000 8089 	beq.w	800dbf4 <__kernel_rem_pio2+0x3a4>
 800dae2:	ab0e      	add	r3, sp, #56	; 0x38
 800dae4:	f1aa 0a18 	sub.w	sl, sl, #24
 800dae8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800daec:	2b00      	cmp	r3, #0
 800daee:	f000 80ad 	beq.w	800dc4c <__kernel_rem_pio2+0x3fc>
 800daf2:	4650      	mov	r0, sl
 800daf4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800db70 <__kernel_rem_pio2+0x320>
 800daf8:	f000 fd8a 	bl	800e610 <scalbn>
 800dafc:	ab9a      	add	r3, sp, #616	; 0x268
 800dafe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800db02:	ec57 6b10 	vmov	r6, r7, d0
 800db06:	00ec      	lsls	r4, r5, #3
 800db08:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800db0c:	46aa      	mov	sl, r5
 800db0e:	f1ba 0f00 	cmp.w	sl, #0
 800db12:	f280 80d6 	bge.w	800dcc2 <__kernel_rem_pio2+0x472>
 800db16:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800db68 <__kernel_rem_pio2+0x318>
 800db1a:	462e      	mov	r6, r5
 800db1c:	2e00      	cmp	r6, #0
 800db1e:	f2c0 8104 	blt.w	800dd2a <__kernel_rem_pio2+0x4da>
 800db22:	ab72      	add	r3, sp, #456	; 0x1c8
 800db24:	ed8d 8b06 	vstr	d8, [sp, #24]
 800db28:	f8df a064 	ldr.w	sl, [pc, #100]	; 800db90 <__kernel_rem_pio2+0x340>
 800db2c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800db30:	f04f 0800 	mov.w	r8, #0
 800db34:	1baf      	subs	r7, r5, r6
 800db36:	e0ea      	b.n	800dd0e <__kernel_rem_pio2+0x4be>
 800db38:	f04f 0b02 	mov.w	fp, #2
 800db3c:	e759      	b.n	800d9f2 <__kernel_rem_pio2+0x1a2>
 800db3e:	f8d8 3000 	ldr.w	r3, [r8]
 800db42:	b955      	cbnz	r5, 800db5a <__kernel_rem_pio2+0x30a>
 800db44:	b123      	cbz	r3, 800db50 <__kernel_rem_pio2+0x300>
 800db46:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800db4a:	f8c8 3000 	str.w	r3, [r8]
 800db4e:	2301      	movs	r3, #1
 800db50:	3201      	adds	r2, #1
 800db52:	f108 0804 	add.w	r8, r8, #4
 800db56:	461d      	mov	r5, r3
 800db58:	e752      	b.n	800da00 <__kernel_rem_pio2+0x1b0>
 800db5a:	1acb      	subs	r3, r1, r3
 800db5c:	f8c8 3000 	str.w	r3, [r8]
 800db60:	462b      	mov	r3, r5
 800db62:	e7f5      	b.n	800db50 <__kernel_rem_pio2+0x300>
 800db64:	f3af 8000 	nop.w
	...
 800db74:	3ff00000 	.word	0x3ff00000
 800db78:	0800edf0 	.word	0x0800edf0
 800db7c:	40200000 	.word	0x40200000
 800db80:	3ff00000 	.word	0x3ff00000
 800db84:	3e700000 	.word	0x3e700000
 800db88:	41700000 	.word	0x41700000
 800db8c:	3fe00000 	.word	0x3fe00000
 800db90:	0800edb0 	.word	0x0800edb0
 800db94:	1e62      	subs	r2, r4, #1
 800db96:	ab0e      	add	r3, sp, #56	; 0x38
 800db98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db9c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800dba0:	a90e      	add	r1, sp, #56	; 0x38
 800dba2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800dba6:	e739      	b.n	800da1c <__kernel_rem_pio2+0x1cc>
 800dba8:	1e62      	subs	r2, r4, #1
 800dbaa:	ab0e      	add	r3, sp, #56	; 0x38
 800dbac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbb0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800dbb4:	e7f4      	b.n	800dba0 <__kernel_rem_pio2+0x350>
 800dbb6:	a90e      	add	r1, sp, #56	; 0x38
 800dbb8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800dbbc:	3b01      	subs	r3, #1
 800dbbe:	430a      	orrs	r2, r1
 800dbc0:	e789      	b.n	800dad6 <__kernel_rem_pio2+0x286>
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800dbc8:	2900      	cmp	r1, #0
 800dbca:	d0fa      	beq.n	800dbc2 <__kernel_rem_pio2+0x372>
 800dbcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dbce:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800dbd2:	446a      	add	r2, sp
 800dbd4:	3a98      	subs	r2, #152	; 0x98
 800dbd6:	920a      	str	r2, [sp, #40]	; 0x28
 800dbd8:	9a08      	ldr	r2, [sp, #32]
 800dbda:	18e3      	adds	r3, r4, r3
 800dbdc:	18a5      	adds	r5, r4, r2
 800dbde:	aa22      	add	r2, sp, #136	; 0x88
 800dbe0:	f104 0801 	add.w	r8, r4, #1
 800dbe4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800dbe8:	9304      	str	r3, [sp, #16]
 800dbea:	9b04      	ldr	r3, [sp, #16]
 800dbec:	4543      	cmp	r3, r8
 800dbee:	da04      	bge.n	800dbfa <__kernel_rem_pio2+0x3aa>
 800dbf0:	461c      	mov	r4, r3
 800dbf2:	e6a3      	b.n	800d93c <__kernel_rem_pio2+0xec>
 800dbf4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	e7e4      	b.n	800dbc4 <__kernel_rem_pio2+0x374>
 800dbfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dbfc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800dc00:	f7f2 fc90 	bl	8000524 <__aeabi_i2d>
 800dc04:	e8e5 0102 	strd	r0, r1, [r5], #8
 800dc08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc0a:	46ab      	mov	fp, r5
 800dc0c:	461c      	mov	r4, r3
 800dc0e:	f04f 0900 	mov.w	r9, #0
 800dc12:	2600      	movs	r6, #0
 800dc14:	2700      	movs	r7, #0
 800dc16:	9b06      	ldr	r3, [sp, #24]
 800dc18:	4599      	cmp	r9, r3
 800dc1a:	dd06      	ble.n	800dc2a <__kernel_rem_pio2+0x3da>
 800dc1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc1e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800dc22:	f108 0801 	add.w	r8, r8, #1
 800dc26:	930a      	str	r3, [sp, #40]	; 0x28
 800dc28:	e7df      	b.n	800dbea <__kernel_rem_pio2+0x39a>
 800dc2a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800dc2e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800dc32:	f7f2 fce1 	bl	80005f8 <__aeabi_dmul>
 800dc36:	4602      	mov	r2, r0
 800dc38:	460b      	mov	r3, r1
 800dc3a:	4630      	mov	r0, r6
 800dc3c:	4639      	mov	r1, r7
 800dc3e:	f7f2 fb25 	bl	800028c <__adddf3>
 800dc42:	f109 0901 	add.w	r9, r9, #1
 800dc46:	4606      	mov	r6, r0
 800dc48:	460f      	mov	r7, r1
 800dc4a:	e7e4      	b.n	800dc16 <__kernel_rem_pio2+0x3c6>
 800dc4c:	3d01      	subs	r5, #1
 800dc4e:	e748      	b.n	800dae2 <__kernel_rem_pio2+0x292>
 800dc50:	ec47 6b10 	vmov	d0, r6, r7
 800dc54:	f1ca 0000 	rsb	r0, sl, #0
 800dc58:	f000 fcda 	bl	800e610 <scalbn>
 800dc5c:	ec57 6b10 	vmov	r6, r7, d0
 800dc60:	4ba0      	ldr	r3, [pc, #640]	; (800dee4 <__kernel_rem_pio2+0x694>)
 800dc62:	ee10 0a10 	vmov	r0, s0
 800dc66:	2200      	movs	r2, #0
 800dc68:	4639      	mov	r1, r7
 800dc6a:	f7f2 ff4b 	bl	8000b04 <__aeabi_dcmpge>
 800dc6e:	b1f8      	cbz	r0, 800dcb0 <__kernel_rem_pio2+0x460>
 800dc70:	4b9d      	ldr	r3, [pc, #628]	; (800dee8 <__kernel_rem_pio2+0x698>)
 800dc72:	2200      	movs	r2, #0
 800dc74:	4630      	mov	r0, r6
 800dc76:	4639      	mov	r1, r7
 800dc78:	f7f2 fcbe 	bl	80005f8 <__aeabi_dmul>
 800dc7c:	f7f2 ff6c 	bl	8000b58 <__aeabi_d2iz>
 800dc80:	4680      	mov	r8, r0
 800dc82:	f7f2 fc4f 	bl	8000524 <__aeabi_i2d>
 800dc86:	4b97      	ldr	r3, [pc, #604]	; (800dee4 <__kernel_rem_pio2+0x694>)
 800dc88:	2200      	movs	r2, #0
 800dc8a:	f7f2 fcb5 	bl	80005f8 <__aeabi_dmul>
 800dc8e:	460b      	mov	r3, r1
 800dc90:	4602      	mov	r2, r0
 800dc92:	4639      	mov	r1, r7
 800dc94:	4630      	mov	r0, r6
 800dc96:	f7f2 faf7 	bl	8000288 <__aeabi_dsub>
 800dc9a:	f7f2 ff5d 	bl	8000b58 <__aeabi_d2iz>
 800dc9e:	1c65      	adds	r5, r4, #1
 800dca0:	ab0e      	add	r3, sp, #56	; 0x38
 800dca2:	f10a 0a18 	add.w	sl, sl, #24
 800dca6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800dcaa:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800dcae:	e720      	b.n	800daf2 <__kernel_rem_pio2+0x2a2>
 800dcb0:	4630      	mov	r0, r6
 800dcb2:	4639      	mov	r1, r7
 800dcb4:	f7f2 ff50 	bl	8000b58 <__aeabi_d2iz>
 800dcb8:	ab0e      	add	r3, sp, #56	; 0x38
 800dcba:	4625      	mov	r5, r4
 800dcbc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800dcc0:	e717      	b.n	800daf2 <__kernel_rem_pio2+0x2a2>
 800dcc2:	ab0e      	add	r3, sp, #56	; 0x38
 800dcc4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800dcc8:	f7f2 fc2c 	bl	8000524 <__aeabi_i2d>
 800dccc:	4632      	mov	r2, r6
 800dcce:	463b      	mov	r3, r7
 800dcd0:	f7f2 fc92 	bl	80005f8 <__aeabi_dmul>
 800dcd4:	4b84      	ldr	r3, [pc, #528]	; (800dee8 <__kernel_rem_pio2+0x698>)
 800dcd6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800dcda:	2200      	movs	r2, #0
 800dcdc:	4630      	mov	r0, r6
 800dcde:	4639      	mov	r1, r7
 800dce0:	f7f2 fc8a 	bl	80005f8 <__aeabi_dmul>
 800dce4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800dce8:	4606      	mov	r6, r0
 800dcea:	460f      	mov	r7, r1
 800dcec:	e70f      	b.n	800db0e <__kernel_rem_pio2+0x2be>
 800dcee:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800dcf2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800dcf6:	f7f2 fc7f 	bl	80005f8 <__aeabi_dmul>
 800dcfa:	4602      	mov	r2, r0
 800dcfc:	460b      	mov	r3, r1
 800dcfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dd02:	f7f2 fac3 	bl	800028c <__adddf3>
 800dd06:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dd0a:	f108 0801 	add.w	r8, r8, #1
 800dd0e:	9b02      	ldr	r3, [sp, #8]
 800dd10:	4598      	cmp	r8, r3
 800dd12:	dc01      	bgt.n	800dd18 <__kernel_rem_pio2+0x4c8>
 800dd14:	45b8      	cmp	r8, r7
 800dd16:	ddea      	ble.n	800dcee <__kernel_rem_pio2+0x49e>
 800dd18:	ed9d 7b06 	vldr	d7, [sp, #24]
 800dd1c:	ab4a      	add	r3, sp, #296	; 0x128
 800dd1e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800dd22:	ed87 7b00 	vstr	d7, [r7]
 800dd26:	3e01      	subs	r6, #1
 800dd28:	e6f8      	b.n	800db1c <__kernel_rem_pio2+0x2cc>
 800dd2a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800dd2c:	2b02      	cmp	r3, #2
 800dd2e:	dc0b      	bgt.n	800dd48 <__kernel_rem_pio2+0x4f8>
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	dc35      	bgt.n	800dda0 <__kernel_rem_pio2+0x550>
 800dd34:	d059      	beq.n	800ddea <__kernel_rem_pio2+0x59a>
 800dd36:	9b04      	ldr	r3, [sp, #16]
 800dd38:	f003 0007 	and.w	r0, r3, #7
 800dd3c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800dd40:	ecbd 8b02 	vpop	{d8}
 800dd44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd48:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800dd4a:	2b03      	cmp	r3, #3
 800dd4c:	d1f3      	bne.n	800dd36 <__kernel_rem_pio2+0x4e6>
 800dd4e:	ab4a      	add	r3, sp, #296	; 0x128
 800dd50:	4423      	add	r3, r4
 800dd52:	9306      	str	r3, [sp, #24]
 800dd54:	461c      	mov	r4, r3
 800dd56:	469a      	mov	sl, r3
 800dd58:	9502      	str	r5, [sp, #8]
 800dd5a:	9b02      	ldr	r3, [sp, #8]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	f1aa 0a08 	sub.w	sl, sl, #8
 800dd62:	dc6b      	bgt.n	800de3c <__kernel_rem_pio2+0x5ec>
 800dd64:	46aa      	mov	sl, r5
 800dd66:	f1ba 0f01 	cmp.w	sl, #1
 800dd6a:	f1a4 0408 	sub.w	r4, r4, #8
 800dd6e:	f300 8085 	bgt.w	800de7c <__kernel_rem_pio2+0x62c>
 800dd72:	9c06      	ldr	r4, [sp, #24]
 800dd74:	2000      	movs	r0, #0
 800dd76:	3408      	adds	r4, #8
 800dd78:	2100      	movs	r1, #0
 800dd7a:	2d01      	cmp	r5, #1
 800dd7c:	f300 809d 	bgt.w	800deba <__kernel_rem_pio2+0x66a>
 800dd80:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800dd84:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800dd88:	f1bb 0f00 	cmp.w	fp, #0
 800dd8c:	f040 809b 	bne.w	800dec6 <__kernel_rem_pio2+0x676>
 800dd90:	9b01      	ldr	r3, [sp, #4]
 800dd92:	e9c3 5600 	strd	r5, r6, [r3]
 800dd96:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800dd9a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800dd9e:	e7ca      	b.n	800dd36 <__kernel_rem_pio2+0x4e6>
 800dda0:	3408      	adds	r4, #8
 800dda2:	ab4a      	add	r3, sp, #296	; 0x128
 800dda4:	441c      	add	r4, r3
 800dda6:	462e      	mov	r6, r5
 800dda8:	2000      	movs	r0, #0
 800ddaa:	2100      	movs	r1, #0
 800ddac:	2e00      	cmp	r6, #0
 800ddae:	da36      	bge.n	800de1e <__kernel_rem_pio2+0x5ce>
 800ddb0:	f1bb 0f00 	cmp.w	fp, #0
 800ddb4:	d039      	beq.n	800de2a <__kernel_rem_pio2+0x5da>
 800ddb6:	4602      	mov	r2, r0
 800ddb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ddbc:	9c01      	ldr	r4, [sp, #4]
 800ddbe:	e9c4 2300 	strd	r2, r3, [r4]
 800ddc2:	4602      	mov	r2, r0
 800ddc4:	460b      	mov	r3, r1
 800ddc6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800ddca:	f7f2 fa5d 	bl	8000288 <__aeabi_dsub>
 800ddce:	ae4c      	add	r6, sp, #304	; 0x130
 800ddd0:	2401      	movs	r4, #1
 800ddd2:	42a5      	cmp	r5, r4
 800ddd4:	da2c      	bge.n	800de30 <__kernel_rem_pio2+0x5e0>
 800ddd6:	f1bb 0f00 	cmp.w	fp, #0
 800ddda:	d002      	beq.n	800dde2 <__kernel_rem_pio2+0x592>
 800dddc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dde0:	4619      	mov	r1, r3
 800dde2:	9b01      	ldr	r3, [sp, #4]
 800dde4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800dde8:	e7a5      	b.n	800dd36 <__kernel_rem_pio2+0x4e6>
 800ddea:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800ddee:	eb0d 0403 	add.w	r4, sp, r3
 800ddf2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ddf6:	2000      	movs	r0, #0
 800ddf8:	2100      	movs	r1, #0
 800ddfa:	2d00      	cmp	r5, #0
 800ddfc:	da09      	bge.n	800de12 <__kernel_rem_pio2+0x5c2>
 800ddfe:	f1bb 0f00 	cmp.w	fp, #0
 800de02:	d002      	beq.n	800de0a <__kernel_rem_pio2+0x5ba>
 800de04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de08:	4619      	mov	r1, r3
 800de0a:	9b01      	ldr	r3, [sp, #4]
 800de0c:	e9c3 0100 	strd	r0, r1, [r3]
 800de10:	e791      	b.n	800dd36 <__kernel_rem_pio2+0x4e6>
 800de12:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800de16:	f7f2 fa39 	bl	800028c <__adddf3>
 800de1a:	3d01      	subs	r5, #1
 800de1c:	e7ed      	b.n	800ddfa <__kernel_rem_pio2+0x5aa>
 800de1e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800de22:	f7f2 fa33 	bl	800028c <__adddf3>
 800de26:	3e01      	subs	r6, #1
 800de28:	e7c0      	b.n	800ddac <__kernel_rem_pio2+0x55c>
 800de2a:	4602      	mov	r2, r0
 800de2c:	460b      	mov	r3, r1
 800de2e:	e7c5      	b.n	800ddbc <__kernel_rem_pio2+0x56c>
 800de30:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800de34:	f7f2 fa2a 	bl	800028c <__adddf3>
 800de38:	3401      	adds	r4, #1
 800de3a:	e7ca      	b.n	800ddd2 <__kernel_rem_pio2+0x582>
 800de3c:	e9da 8900 	ldrd	r8, r9, [sl]
 800de40:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800de44:	9b02      	ldr	r3, [sp, #8]
 800de46:	3b01      	subs	r3, #1
 800de48:	9302      	str	r3, [sp, #8]
 800de4a:	4632      	mov	r2, r6
 800de4c:	463b      	mov	r3, r7
 800de4e:	4640      	mov	r0, r8
 800de50:	4649      	mov	r1, r9
 800de52:	f7f2 fa1b 	bl	800028c <__adddf3>
 800de56:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800de5a:	4602      	mov	r2, r0
 800de5c:	460b      	mov	r3, r1
 800de5e:	4640      	mov	r0, r8
 800de60:	4649      	mov	r1, r9
 800de62:	f7f2 fa11 	bl	8000288 <__aeabi_dsub>
 800de66:	4632      	mov	r2, r6
 800de68:	463b      	mov	r3, r7
 800de6a:	f7f2 fa0f 	bl	800028c <__adddf3>
 800de6e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800de72:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800de76:	ed8a 7b00 	vstr	d7, [sl]
 800de7a:	e76e      	b.n	800dd5a <__kernel_rem_pio2+0x50a>
 800de7c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800de80:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800de84:	4640      	mov	r0, r8
 800de86:	4632      	mov	r2, r6
 800de88:	463b      	mov	r3, r7
 800de8a:	4649      	mov	r1, r9
 800de8c:	f7f2 f9fe 	bl	800028c <__adddf3>
 800de90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de94:	4602      	mov	r2, r0
 800de96:	460b      	mov	r3, r1
 800de98:	4640      	mov	r0, r8
 800de9a:	4649      	mov	r1, r9
 800de9c:	f7f2 f9f4 	bl	8000288 <__aeabi_dsub>
 800dea0:	4632      	mov	r2, r6
 800dea2:	463b      	mov	r3, r7
 800dea4:	f7f2 f9f2 	bl	800028c <__adddf3>
 800dea8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800deac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800deb0:	ed84 7b00 	vstr	d7, [r4]
 800deb4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800deb8:	e755      	b.n	800dd66 <__kernel_rem_pio2+0x516>
 800deba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800debe:	f7f2 f9e5 	bl	800028c <__adddf3>
 800dec2:	3d01      	subs	r5, #1
 800dec4:	e759      	b.n	800dd7a <__kernel_rem_pio2+0x52a>
 800dec6:	9b01      	ldr	r3, [sp, #4]
 800dec8:	9a01      	ldr	r2, [sp, #4]
 800deca:	601d      	str	r5, [r3, #0]
 800decc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800ded0:	605c      	str	r4, [r3, #4]
 800ded2:	609f      	str	r7, [r3, #8]
 800ded4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ded8:	60d3      	str	r3, [r2, #12]
 800deda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dede:	6110      	str	r0, [r2, #16]
 800dee0:	6153      	str	r3, [r2, #20]
 800dee2:	e728      	b.n	800dd36 <__kernel_rem_pio2+0x4e6>
 800dee4:	41700000 	.word	0x41700000
 800dee8:	3e700000 	.word	0x3e700000
 800deec:	00000000 	.word	0x00000000

0800def0 <__kernel_sin>:
 800def0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800def4:	ed2d 8b04 	vpush	{d8-d9}
 800def8:	eeb0 8a41 	vmov.f32	s16, s2
 800defc:	eef0 8a61 	vmov.f32	s17, s3
 800df00:	ec55 4b10 	vmov	r4, r5, d0
 800df04:	b083      	sub	sp, #12
 800df06:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800df0a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800df0e:	9001      	str	r0, [sp, #4]
 800df10:	da06      	bge.n	800df20 <__kernel_sin+0x30>
 800df12:	ee10 0a10 	vmov	r0, s0
 800df16:	4629      	mov	r1, r5
 800df18:	f7f2 fe1e 	bl	8000b58 <__aeabi_d2iz>
 800df1c:	2800      	cmp	r0, #0
 800df1e:	d051      	beq.n	800dfc4 <__kernel_sin+0xd4>
 800df20:	4622      	mov	r2, r4
 800df22:	462b      	mov	r3, r5
 800df24:	4620      	mov	r0, r4
 800df26:	4629      	mov	r1, r5
 800df28:	f7f2 fb66 	bl	80005f8 <__aeabi_dmul>
 800df2c:	4682      	mov	sl, r0
 800df2e:	468b      	mov	fp, r1
 800df30:	4602      	mov	r2, r0
 800df32:	460b      	mov	r3, r1
 800df34:	4620      	mov	r0, r4
 800df36:	4629      	mov	r1, r5
 800df38:	f7f2 fb5e 	bl	80005f8 <__aeabi_dmul>
 800df3c:	a341      	add	r3, pc, #260	; (adr r3, 800e044 <__kernel_sin+0x154>)
 800df3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df42:	4680      	mov	r8, r0
 800df44:	4689      	mov	r9, r1
 800df46:	4650      	mov	r0, sl
 800df48:	4659      	mov	r1, fp
 800df4a:	f7f2 fb55 	bl	80005f8 <__aeabi_dmul>
 800df4e:	a33f      	add	r3, pc, #252	; (adr r3, 800e04c <__kernel_sin+0x15c>)
 800df50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df54:	f7f2 f998 	bl	8000288 <__aeabi_dsub>
 800df58:	4652      	mov	r2, sl
 800df5a:	465b      	mov	r3, fp
 800df5c:	f7f2 fb4c 	bl	80005f8 <__aeabi_dmul>
 800df60:	a33c      	add	r3, pc, #240	; (adr r3, 800e054 <__kernel_sin+0x164>)
 800df62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df66:	f7f2 f991 	bl	800028c <__adddf3>
 800df6a:	4652      	mov	r2, sl
 800df6c:	465b      	mov	r3, fp
 800df6e:	f7f2 fb43 	bl	80005f8 <__aeabi_dmul>
 800df72:	a33a      	add	r3, pc, #232	; (adr r3, 800e05c <__kernel_sin+0x16c>)
 800df74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df78:	f7f2 f986 	bl	8000288 <__aeabi_dsub>
 800df7c:	4652      	mov	r2, sl
 800df7e:	465b      	mov	r3, fp
 800df80:	f7f2 fb3a 	bl	80005f8 <__aeabi_dmul>
 800df84:	a337      	add	r3, pc, #220	; (adr r3, 800e064 <__kernel_sin+0x174>)
 800df86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df8a:	f7f2 f97f 	bl	800028c <__adddf3>
 800df8e:	9b01      	ldr	r3, [sp, #4]
 800df90:	4606      	mov	r6, r0
 800df92:	460f      	mov	r7, r1
 800df94:	b9eb      	cbnz	r3, 800dfd2 <__kernel_sin+0xe2>
 800df96:	4602      	mov	r2, r0
 800df98:	460b      	mov	r3, r1
 800df9a:	4650      	mov	r0, sl
 800df9c:	4659      	mov	r1, fp
 800df9e:	f7f2 fb2b 	bl	80005f8 <__aeabi_dmul>
 800dfa2:	a325      	add	r3, pc, #148	; (adr r3, 800e038 <__kernel_sin+0x148>)
 800dfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa8:	f7f2 f96e 	bl	8000288 <__aeabi_dsub>
 800dfac:	4642      	mov	r2, r8
 800dfae:	464b      	mov	r3, r9
 800dfb0:	f7f2 fb22 	bl	80005f8 <__aeabi_dmul>
 800dfb4:	4602      	mov	r2, r0
 800dfb6:	460b      	mov	r3, r1
 800dfb8:	4620      	mov	r0, r4
 800dfba:	4629      	mov	r1, r5
 800dfbc:	f7f2 f966 	bl	800028c <__adddf3>
 800dfc0:	4604      	mov	r4, r0
 800dfc2:	460d      	mov	r5, r1
 800dfc4:	ec45 4b10 	vmov	d0, r4, r5
 800dfc8:	b003      	add	sp, #12
 800dfca:	ecbd 8b04 	vpop	{d8-d9}
 800dfce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfd2:	4b1b      	ldr	r3, [pc, #108]	; (800e040 <__kernel_sin+0x150>)
 800dfd4:	ec51 0b18 	vmov	r0, r1, d8
 800dfd8:	2200      	movs	r2, #0
 800dfda:	f7f2 fb0d 	bl	80005f8 <__aeabi_dmul>
 800dfde:	4632      	mov	r2, r6
 800dfe0:	ec41 0b19 	vmov	d9, r0, r1
 800dfe4:	463b      	mov	r3, r7
 800dfe6:	4640      	mov	r0, r8
 800dfe8:	4649      	mov	r1, r9
 800dfea:	f7f2 fb05 	bl	80005f8 <__aeabi_dmul>
 800dfee:	4602      	mov	r2, r0
 800dff0:	460b      	mov	r3, r1
 800dff2:	ec51 0b19 	vmov	r0, r1, d9
 800dff6:	f7f2 f947 	bl	8000288 <__aeabi_dsub>
 800dffa:	4652      	mov	r2, sl
 800dffc:	465b      	mov	r3, fp
 800dffe:	f7f2 fafb 	bl	80005f8 <__aeabi_dmul>
 800e002:	ec53 2b18 	vmov	r2, r3, d8
 800e006:	f7f2 f93f 	bl	8000288 <__aeabi_dsub>
 800e00a:	a30b      	add	r3, pc, #44	; (adr r3, 800e038 <__kernel_sin+0x148>)
 800e00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e010:	4606      	mov	r6, r0
 800e012:	460f      	mov	r7, r1
 800e014:	4640      	mov	r0, r8
 800e016:	4649      	mov	r1, r9
 800e018:	f7f2 faee 	bl	80005f8 <__aeabi_dmul>
 800e01c:	4602      	mov	r2, r0
 800e01e:	460b      	mov	r3, r1
 800e020:	4630      	mov	r0, r6
 800e022:	4639      	mov	r1, r7
 800e024:	f7f2 f932 	bl	800028c <__adddf3>
 800e028:	4602      	mov	r2, r0
 800e02a:	460b      	mov	r3, r1
 800e02c:	4620      	mov	r0, r4
 800e02e:	4629      	mov	r1, r5
 800e030:	f7f2 f92a 	bl	8000288 <__aeabi_dsub>
 800e034:	e7c4      	b.n	800dfc0 <__kernel_sin+0xd0>
 800e036:	bf00      	nop
 800e038:	55555549 	.word	0x55555549
 800e03c:	3fc55555 	.word	0x3fc55555
 800e040:	3fe00000 	.word	0x3fe00000
 800e044:	5acfd57c 	.word	0x5acfd57c
 800e048:	3de5d93a 	.word	0x3de5d93a
 800e04c:	8a2b9ceb 	.word	0x8a2b9ceb
 800e050:	3e5ae5e6 	.word	0x3e5ae5e6
 800e054:	57b1fe7d 	.word	0x57b1fe7d
 800e058:	3ec71de3 	.word	0x3ec71de3
 800e05c:	19c161d5 	.word	0x19c161d5
 800e060:	3f2a01a0 	.word	0x3f2a01a0
 800e064:	1110f8a6 	.word	0x1110f8a6
 800e068:	3f811111 	.word	0x3f811111
 800e06c:	00000000 	.word	0x00000000

0800e070 <__kernel_tan>:
 800e070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e074:	ed2d 8b06 	vpush	{d8-d10}
 800e078:	ec5b ab10 	vmov	sl, fp, d0
 800e07c:	4be0      	ldr	r3, [pc, #896]	; (800e400 <__kernel_tan+0x390>)
 800e07e:	b083      	sub	sp, #12
 800e080:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800e084:	429f      	cmp	r7, r3
 800e086:	ec59 8b11 	vmov	r8, r9, d1
 800e08a:	4606      	mov	r6, r0
 800e08c:	f8cd b000 	str.w	fp, [sp]
 800e090:	dc61      	bgt.n	800e156 <__kernel_tan+0xe6>
 800e092:	ee10 0a10 	vmov	r0, s0
 800e096:	4659      	mov	r1, fp
 800e098:	f7f2 fd5e 	bl	8000b58 <__aeabi_d2iz>
 800e09c:	4605      	mov	r5, r0
 800e09e:	2800      	cmp	r0, #0
 800e0a0:	f040 8083 	bne.w	800e1aa <__kernel_tan+0x13a>
 800e0a4:	1c73      	adds	r3, r6, #1
 800e0a6:	4652      	mov	r2, sl
 800e0a8:	4313      	orrs	r3, r2
 800e0aa:	433b      	orrs	r3, r7
 800e0ac:	d112      	bne.n	800e0d4 <__kernel_tan+0x64>
 800e0ae:	ec4b ab10 	vmov	d0, sl, fp
 800e0b2:	f7fd ff4d 	bl	800bf50 <fabs>
 800e0b6:	49d3      	ldr	r1, [pc, #844]	; (800e404 <__kernel_tan+0x394>)
 800e0b8:	ec53 2b10 	vmov	r2, r3, d0
 800e0bc:	2000      	movs	r0, #0
 800e0be:	f7f2 fbc5 	bl	800084c <__aeabi_ddiv>
 800e0c2:	4682      	mov	sl, r0
 800e0c4:	468b      	mov	fp, r1
 800e0c6:	ec4b ab10 	vmov	d0, sl, fp
 800e0ca:	b003      	add	sp, #12
 800e0cc:	ecbd 8b06 	vpop	{d8-d10}
 800e0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0d4:	2e01      	cmp	r6, #1
 800e0d6:	d0f6      	beq.n	800e0c6 <__kernel_tan+0x56>
 800e0d8:	4642      	mov	r2, r8
 800e0da:	464b      	mov	r3, r9
 800e0dc:	4650      	mov	r0, sl
 800e0de:	4659      	mov	r1, fp
 800e0e0:	f7f2 f8d4 	bl	800028c <__adddf3>
 800e0e4:	4602      	mov	r2, r0
 800e0e6:	460b      	mov	r3, r1
 800e0e8:	460f      	mov	r7, r1
 800e0ea:	2000      	movs	r0, #0
 800e0ec:	49c6      	ldr	r1, [pc, #792]	; (800e408 <__kernel_tan+0x398>)
 800e0ee:	f7f2 fbad 	bl	800084c <__aeabi_ddiv>
 800e0f2:	e9cd 0100 	strd	r0, r1, [sp]
 800e0f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0fa:	462e      	mov	r6, r5
 800e0fc:	4652      	mov	r2, sl
 800e0fe:	462c      	mov	r4, r5
 800e100:	4630      	mov	r0, r6
 800e102:	461d      	mov	r5, r3
 800e104:	4639      	mov	r1, r7
 800e106:	465b      	mov	r3, fp
 800e108:	f7f2 f8be 	bl	8000288 <__aeabi_dsub>
 800e10c:	4602      	mov	r2, r0
 800e10e:	460b      	mov	r3, r1
 800e110:	4640      	mov	r0, r8
 800e112:	4649      	mov	r1, r9
 800e114:	f7f2 f8b8 	bl	8000288 <__aeabi_dsub>
 800e118:	4632      	mov	r2, r6
 800e11a:	462b      	mov	r3, r5
 800e11c:	f7f2 fa6c 	bl	80005f8 <__aeabi_dmul>
 800e120:	4632      	mov	r2, r6
 800e122:	4680      	mov	r8, r0
 800e124:	4689      	mov	r9, r1
 800e126:	462b      	mov	r3, r5
 800e128:	4630      	mov	r0, r6
 800e12a:	4639      	mov	r1, r7
 800e12c:	f7f2 fa64 	bl	80005f8 <__aeabi_dmul>
 800e130:	4bb4      	ldr	r3, [pc, #720]	; (800e404 <__kernel_tan+0x394>)
 800e132:	2200      	movs	r2, #0
 800e134:	f7f2 f8aa 	bl	800028c <__adddf3>
 800e138:	4602      	mov	r2, r0
 800e13a:	460b      	mov	r3, r1
 800e13c:	4640      	mov	r0, r8
 800e13e:	4649      	mov	r1, r9
 800e140:	f7f2 f8a4 	bl	800028c <__adddf3>
 800e144:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e148:	f7f2 fa56 	bl	80005f8 <__aeabi_dmul>
 800e14c:	4622      	mov	r2, r4
 800e14e:	462b      	mov	r3, r5
 800e150:	f7f2 f89c 	bl	800028c <__adddf3>
 800e154:	e7b5      	b.n	800e0c2 <__kernel_tan+0x52>
 800e156:	4bad      	ldr	r3, [pc, #692]	; (800e40c <__kernel_tan+0x39c>)
 800e158:	429f      	cmp	r7, r3
 800e15a:	dd26      	ble.n	800e1aa <__kernel_tan+0x13a>
 800e15c:	9b00      	ldr	r3, [sp, #0]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	da09      	bge.n	800e176 <__kernel_tan+0x106>
 800e162:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e166:	469b      	mov	fp, r3
 800e168:	ee10 aa10 	vmov	sl, s0
 800e16c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e170:	ee11 8a10 	vmov	r8, s2
 800e174:	4699      	mov	r9, r3
 800e176:	4652      	mov	r2, sl
 800e178:	465b      	mov	r3, fp
 800e17a:	a183      	add	r1, pc, #524	; (adr r1, 800e388 <__kernel_tan+0x318>)
 800e17c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e180:	f7f2 f882 	bl	8000288 <__aeabi_dsub>
 800e184:	4642      	mov	r2, r8
 800e186:	464b      	mov	r3, r9
 800e188:	4604      	mov	r4, r0
 800e18a:	460d      	mov	r5, r1
 800e18c:	a180      	add	r1, pc, #512	; (adr r1, 800e390 <__kernel_tan+0x320>)
 800e18e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e192:	f7f2 f879 	bl	8000288 <__aeabi_dsub>
 800e196:	4622      	mov	r2, r4
 800e198:	462b      	mov	r3, r5
 800e19a:	f7f2 f877 	bl	800028c <__adddf3>
 800e19e:	f04f 0800 	mov.w	r8, #0
 800e1a2:	4682      	mov	sl, r0
 800e1a4:	468b      	mov	fp, r1
 800e1a6:	f04f 0900 	mov.w	r9, #0
 800e1aa:	4652      	mov	r2, sl
 800e1ac:	465b      	mov	r3, fp
 800e1ae:	4650      	mov	r0, sl
 800e1b0:	4659      	mov	r1, fp
 800e1b2:	f7f2 fa21 	bl	80005f8 <__aeabi_dmul>
 800e1b6:	4602      	mov	r2, r0
 800e1b8:	460b      	mov	r3, r1
 800e1ba:	ec43 2b18 	vmov	d8, r2, r3
 800e1be:	f7f2 fa1b 	bl	80005f8 <__aeabi_dmul>
 800e1c2:	ec53 2b18 	vmov	r2, r3, d8
 800e1c6:	4604      	mov	r4, r0
 800e1c8:	460d      	mov	r5, r1
 800e1ca:	4650      	mov	r0, sl
 800e1cc:	4659      	mov	r1, fp
 800e1ce:	f7f2 fa13 	bl	80005f8 <__aeabi_dmul>
 800e1d2:	a371      	add	r3, pc, #452	; (adr r3, 800e398 <__kernel_tan+0x328>)
 800e1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d8:	ec41 0b19 	vmov	d9, r0, r1
 800e1dc:	4620      	mov	r0, r4
 800e1de:	4629      	mov	r1, r5
 800e1e0:	f7f2 fa0a 	bl	80005f8 <__aeabi_dmul>
 800e1e4:	a36e      	add	r3, pc, #440	; (adr r3, 800e3a0 <__kernel_tan+0x330>)
 800e1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ea:	f7f2 f84f 	bl	800028c <__adddf3>
 800e1ee:	4622      	mov	r2, r4
 800e1f0:	462b      	mov	r3, r5
 800e1f2:	f7f2 fa01 	bl	80005f8 <__aeabi_dmul>
 800e1f6:	a36c      	add	r3, pc, #432	; (adr r3, 800e3a8 <__kernel_tan+0x338>)
 800e1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fc:	f7f2 f846 	bl	800028c <__adddf3>
 800e200:	4622      	mov	r2, r4
 800e202:	462b      	mov	r3, r5
 800e204:	f7f2 f9f8 	bl	80005f8 <__aeabi_dmul>
 800e208:	a369      	add	r3, pc, #420	; (adr r3, 800e3b0 <__kernel_tan+0x340>)
 800e20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e20e:	f7f2 f83d 	bl	800028c <__adddf3>
 800e212:	4622      	mov	r2, r4
 800e214:	462b      	mov	r3, r5
 800e216:	f7f2 f9ef 	bl	80005f8 <__aeabi_dmul>
 800e21a:	a367      	add	r3, pc, #412	; (adr r3, 800e3b8 <__kernel_tan+0x348>)
 800e21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e220:	f7f2 f834 	bl	800028c <__adddf3>
 800e224:	4622      	mov	r2, r4
 800e226:	462b      	mov	r3, r5
 800e228:	f7f2 f9e6 	bl	80005f8 <__aeabi_dmul>
 800e22c:	a364      	add	r3, pc, #400	; (adr r3, 800e3c0 <__kernel_tan+0x350>)
 800e22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e232:	f7f2 f82b 	bl	800028c <__adddf3>
 800e236:	ec53 2b18 	vmov	r2, r3, d8
 800e23a:	f7f2 f9dd 	bl	80005f8 <__aeabi_dmul>
 800e23e:	a362      	add	r3, pc, #392	; (adr r3, 800e3c8 <__kernel_tan+0x358>)
 800e240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e244:	ec41 0b1a 	vmov	d10, r0, r1
 800e248:	4620      	mov	r0, r4
 800e24a:	4629      	mov	r1, r5
 800e24c:	f7f2 f9d4 	bl	80005f8 <__aeabi_dmul>
 800e250:	a35f      	add	r3, pc, #380	; (adr r3, 800e3d0 <__kernel_tan+0x360>)
 800e252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e256:	f7f2 f819 	bl	800028c <__adddf3>
 800e25a:	4622      	mov	r2, r4
 800e25c:	462b      	mov	r3, r5
 800e25e:	f7f2 f9cb 	bl	80005f8 <__aeabi_dmul>
 800e262:	a35d      	add	r3, pc, #372	; (adr r3, 800e3d8 <__kernel_tan+0x368>)
 800e264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e268:	f7f2 f810 	bl	800028c <__adddf3>
 800e26c:	4622      	mov	r2, r4
 800e26e:	462b      	mov	r3, r5
 800e270:	f7f2 f9c2 	bl	80005f8 <__aeabi_dmul>
 800e274:	a35a      	add	r3, pc, #360	; (adr r3, 800e3e0 <__kernel_tan+0x370>)
 800e276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e27a:	f7f2 f807 	bl	800028c <__adddf3>
 800e27e:	4622      	mov	r2, r4
 800e280:	462b      	mov	r3, r5
 800e282:	f7f2 f9b9 	bl	80005f8 <__aeabi_dmul>
 800e286:	a358      	add	r3, pc, #352	; (adr r3, 800e3e8 <__kernel_tan+0x378>)
 800e288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e28c:	f7f1 fffe 	bl	800028c <__adddf3>
 800e290:	4622      	mov	r2, r4
 800e292:	462b      	mov	r3, r5
 800e294:	f7f2 f9b0 	bl	80005f8 <__aeabi_dmul>
 800e298:	a355      	add	r3, pc, #340	; (adr r3, 800e3f0 <__kernel_tan+0x380>)
 800e29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e29e:	f7f1 fff5 	bl	800028c <__adddf3>
 800e2a2:	4602      	mov	r2, r0
 800e2a4:	460b      	mov	r3, r1
 800e2a6:	ec51 0b1a 	vmov	r0, r1, d10
 800e2aa:	f7f1 ffef 	bl	800028c <__adddf3>
 800e2ae:	ec53 2b19 	vmov	r2, r3, d9
 800e2b2:	f7f2 f9a1 	bl	80005f8 <__aeabi_dmul>
 800e2b6:	4642      	mov	r2, r8
 800e2b8:	464b      	mov	r3, r9
 800e2ba:	f7f1 ffe7 	bl	800028c <__adddf3>
 800e2be:	ec53 2b18 	vmov	r2, r3, d8
 800e2c2:	f7f2 f999 	bl	80005f8 <__aeabi_dmul>
 800e2c6:	4642      	mov	r2, r8
 800e2c8:	464b      	mov	r3, r9
 800e2ca:	f7f1 ffdf 	bl	800028c <__adddf3>
 800e2ce:	a34a      	add	r3, pc, #296	; (adr r3, 800e3f8 <__kernel_tan+0x388>)
 800e2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d4:	4604      	mov	r4, r0
 800e2d6:	460d      	mov	r5, r1
 800e2d8:	ec51 0b19 	vmov	r0, r1, d9
 800e2dc:	f7f2 f98c 	bl	80005f8 <__aeabi_dmul>
 800e2e0:	4622      	mov	r2, r4
 800e2e2:	462b      	mov	r3, r5
 800e2e4:	f7f1 ffd2 	bl	800028c <__adddf3>
 800e2e8:	460b      	mov	r3, r1
 800e2ea:	ec41 0b18 	vmov	d8, r0, r1
 800e2ee:	4602      	mov	r2, r0
 800e2f0:	4659      	mov	r1, fp
 800e2f2:	4650      	mov	r0, sl
 800e2f4:	f7f1 ffca 	bl	800028c <__adddf3>
 800e2f8:	4b44      	ldr	r3, [pc, #272]	; (800e40c <__kernel_tan+0x39c>)
 800e2fa:	429f      	cmp	r7, r3
 800e2fc:	4604      	mov	r4, r0
 800e2fe:	460d      	mov	r5, r1
 800e300:	f340 8086 	ble.w	800e410 <__kernel_tan+0x3a0>
 800e304:	4630      	mov	r0, r6
 800e306:	f7f2 f90d 	bl	8000524 <__aeabi_i2d>
 800e30a:	4622      	mov	r2, r4
 800e30c:	4680      	mov	r8, r0
 800e30e:	4689      	mov	r9, r1
 800e310:	462b      	mov	r3, r5
 800e312:	4620      	mov	r0, r4
 800e314:	4629      	mov	r1, r5
 800e316:	f7f2 f96f 	bl	80005f8 <__aeabi_dmul>
 800e31a:	4642      	mov	r2, r8
 800e31c:	4606      	mov	r6, r0
 800e31e:	460f      	mov	r7, r1
 800e320:	464b      	mov	r3, r9
 800e322:	4620      	mov	r0, r4
 800e324:	4629      	mov	r1, r5
 800e326:	f7f1 ffb1 	bl	800028c <__adddf3>
 800e32a:	4602      	mov	r2, r0
 800e32c:	460b      	mov	r3, r1
 800e32e:	4630      	mov	r0, r6
 800e330:	4639      	mov	r1, r7
 800e332:	f7f2 fa8b 	bl	800084c <__aeabi_ddiv>
 800e336:	ec53 2b18 	vmov	r2, r3, d8
 800e33a:	f7f1 ffa5 	bl	8000288 <__aeabi_dsub>
 800e33e:	4602      	mov	r2, r0
 800e340:	460b      	mov	r3, r1
 800e342:	4650      	mov	r0, sl
 800e344:	4659      	mov	r1, fp
 800e346:	f7f1 ff9f 	bl	8000288 <__aeabi_dsub>
 800e34a:	4602      	mov	r2, r0
 800e34c:	460b      	mov	r3, r1
 800e34e:	f7f1 ff9d 	bl	800028c <__adddf3>
 800e352:	4602      	mov	r2, r0
 800e354:	460b      	mov	r3, r1
 800e356:	4640      	mov	r0, r8
 800e358:	4649      	mov	r1, r9
 800e35a:	f7f1 ff95 	bl	8000288 <__aeabi_dsub>
 800e35e:	9b00      	ldr	r3, [sp, #0]
 800e360:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800e364:	f00a 0a02 	and.w	sl, sl, #2
 800e368:	4604      	mov	r4, r0
 800e36a:	f1ca 0001 	rsb	r0, sl, #1
 800e36e:	460d      	mov	r5, r1
 800e370:	f7f2 f8d8 	bl	8000524 <__aeabi_i2d>
 800e374:	4602      	mov	r2, r0
 800e376:	460b      	mov	r3, r1
 800e378:	4620      	mov	r0, r4
 800e37a:	4629      	mov	r1, r5
 800e37c:	f7f2 f93c 	bl	80005f8 <__aeabi_dmul>
 800e380:	e69f      	b.n	800e0c2 <__kernel_tan+0x52>
 800e382:	bf00      	nop
 800e384:	f3af 8000 	nop.w
 800e388:	54442d18 	.word	0x54442d18
 800e38c:	3fe921fb 	.word	0x3fe921fb
 800e390:	33145c07 	.word	0x33145c07
 800e394:	3c81a626 	.word	0x3c81a626
 800e398:	74bf7ad4 	.word	0x74bf7ad4
 800e39c:	3efb2a70 	.word	0x3efb2a70
 800e3a0:	32f0a7e9 	.word	0x32f0a7e9
 800e3a4:	3f12b80f 	.word	0x3f12b80f
 800e3a8:	1a8d1068 	.word	0x1a8d1068
 800e3ac:	3f3026f7 	.word	0x3f3026f7
 800e3b0:	fee08315 	.word	0xfee08315
 800e3b4:	3f57dbc8 	.word	0x3f57dbc8
 800e3b8:	e96e8493 	.word	0xe96e8493
 800e3bc:	3f8226e3 	.word	0x3f8226e3
 800e3c0:	1bb341fe 	.word	0x1bb341fe
 800e3c4:	3faba1ba 	.word	0x3faba1ba
 800e3c8:	db605373 	.word	0xdb605373
 800e3cc:	bef375cb 	.word	0xbef375cb
 800e3d0:	a03792a6 	.word	0xa03792a6
 800e3d4:	3f147e88 	.word	0x3f147e88
 800e3d8:	f2f26501 	.word	0xf2f26501
 800e3dc:	3f4344d8 	.word	0x3f4344d8
 800e3e0:	c9560328 	.word	0xc9560328
 800e3e4:	3f6d6d22 	.word	0x3f6d6d22
 800e3e8:	8406d637 	.word	0x8406d637
 800e3ec:	3f9664f4 	.word	0x3f9664f4
 800e3f0:	1110fe7a 	.word	0x1110fe7a
 800e3f4:	3fc11111 	.word	0x3fc11111
 800e3f8:	55555563 	.word	0x55555563
 800e3fc:	3fd55555 	.word	0x3fd55555
 800e400:	3e2fffff 	.word	0x3e2fffff
 800e404:	3ff00000 	.word	0x3ff00000
 800e408:	bff00000 	.word	0xbff00000
 800e40c:	3fe59427 	.word	0x3fe59427
 800e410:	2e01      	cmp	r6, #1
 800e412:	d02f      	beq.n	800e474 <__kernel_tan+0x404>
 800e414:	460f      	mov	r7, r1
 800e416:	4602      	mov	r2, r0
 800e418:	460b      	mov	r3, r1
 800e41a:	4689      	mov	r9, r1
 800e41c:	2000      	movs	r0, #0
 800e41e:	4917      	ldr	r1, [pc, #92]	; (800e47c <__kernel_tan+0x40c>)
 800e420:	f7f2 fa14 	bl	800084c <__aeabi_ddiv>
 800e424:	2600      	movs	r6, #0
 800e426:	e9cd 0100 	strd	r0, r1, [sp]
 800e42a:	4652      	mov	r2, sl
 800e42c:	465b      	mov	r3, fp
 800e42e:	4630      	mov	r0, r6
 800e430:	4639      	mov	r1, r7
 800e432:	f7f1 ff29 	bl	8000288 <__aeabi_dsub>
 800e436:	e9dd 4500 	ldrd	r4, r5, [sp]
 800e43a:	4602      	mov	r2, r0
 800e43c:	460b      	mov	r3, r1
 800e43e:	ec51 0b18 	vmov	r0, r1, d8
 800e442:	f7f1 ff21 	bl	8000288 <__aeabi_dsub>
 800e446:	4632      	mov	r2, r6
 800e448:	462b      	mov	r3, r5
 800e44a:	f7f2 f8d5 	bl	80005f8 <__aeabi_dmul>
 800e44e:	46b0      	mov	r8, r6
 800e450:	460f      	mov	r7, r1
 800e452:	4642      	mov	r2, r8
 800e454:	462b      	mov	r3, r5
 800e456:	4634      	mov	r4, r6
 800e458:	4649      	mov	r1, r9
 800e45a:	4606      	mov	r6, r0
 800e45c:	4640      	mov	r0, r8
 800e45e:	f7f2 f8cb 	bl	80005f8 <__aeabi_dmul>
 800e462:	4b07      	ldr	r3, [pc, #28]	; (800e480 <__kernel_tan+0x410>)
 800e464:	2200      	movs	r2, #0
 800e466:	f7f1 ff11 	bl	800028c <__adddf3>
 800e46a:	4602      	mov	r2, r0
 800e46c:	460b      	mov	r3, r1
 800e46e:	4630      	mov	r0, r6
 800e470:	4639      	mov	r1, r7
 800e472:	e665      	b.n	800e140 <__kernel_tan+0xd0>
 800e474:	4682      	mov	sl, r0
 800e476:	468b      	mov	fp, r1
 800e478:	e625      	b.n	800e0c6 <__kernel_tan+0x56>
 800e47a:	bf00      	nop
 800e47c:	bff00000 	.word	0xbff00000
 800e480:	3ff00000 	.word	0x3ff00000

0800e484 <with_errno>:
 800e484:	b570      	push	{r4, r5, r6, lr}
 800e486:	4604      	mov	r4, r0
 800e488:	460d      	mov	r5, r1
 800e48a:	4616      	mov	r6, r2
 800e48c:	f7fa fc56 	bl	8008d3c <__errno>
 800e490:	4629      	mov	r1, r5
 800e492:	6006      	str	r6, [r0, #0]
 800e494:	4620      	mov	r0, r4
 800e496:	bd70      	pop	{r4, r5, r6, pc}

0800e498 <xflow>:
 800e498:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e49a:	4614      	mov	r4, r2
 800e49c:	461d      	mov	r5, r3
 800e49e:	b108      	cbz	r0, 800e4a4 <xflow+0xc>
 800e4a0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e4a4:	e9cd 2300 	strd	r2, r3, [sp]
 800e4a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4ac:	4620      	mov	r0, r4
 800e4ae:	4629      	mov	r1, r5
 800e4b0:	f7f2 f8a2 	bl	80005f8 <__aeabi_dmul>
 800e4b4:	2222      	movs	r2, #34	; 0x22
 800e4b6:	b003      	add	sp, #12
 800e4b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4bc:	f7ff bfe2 	b.w	800e484 <with_errno>

0800e4c0 <__math_uflow>:
 800e4c0:	b508      	push	{r3, lr}
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e4c8:	f7ff ffe6 	bl	800e498 <xflow>
 800e4cc:	ec41 0b10 	vmov	d0, r0, r1
 800e4d0:	bd08      	pop	{r3, pc}

0800e4d2 <__math_oflow>:
 800e4d2:	b508      	push	{r3, lr}
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e4da:	f7ff ffdd 	bl	800e498 <xflow>
 800e4de:	ec41 0b10 	vmov	d0, r0, r1
 800e4e2:	bd08      	pop	{r3, pc}

0800e4e4 <finite>:
 800e4e4:	b082      	sub	sp, #8
 800e4e6:	ed8d 0b00 	vstr	d0, [sp]
 800e4ea:	9801      	ldr	r0, [sp, #4]
 800e4ec:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e4f0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e4f4:	0fc0      	lsrs	r0, r0, #31
 800e4f6:	b002      	add	sp, #8
 800e4f8:	4770      	bx	lr
 800e4fa:	0000      	movs	r0, r0
 800e4fc:	0000      	movs	r0, r0
	...

0800e500 <floor>:
 800e500:	ec51 0b10 	vmov	r0, r1, d0
 800e504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e508:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e50c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e510:	2e13      	cmp	r6, #19
 800e512:	ee10 5a10 	vmov	r5, s0
 800e516:	ee10 8a10 	vmov	r8, s0
 800e51a:	460c      	mov	r4, r1
 800e51c:	dc32      	bgt.n	800e584 <floor+0x84>
 800e51e:	2e00      	cmp	r6, #0
 800e520:	da14      	bge.n	800e54c <floor+0x4c>
 800e522:	a333      	add	r3, pc, #204	; (adr r3, 800e5f0 <floor+0xf0>)
 800e524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e528:	f7f1 feb0 	bl	800028c <__adddf3>
 800e52c:	2200      	movs	r2, #0
 800e52e:	2300      	movs	r3, #0
 800e530:	f7f2 faf2 	bl	8000b18 <__aeabi_dcmpgt>
 800e534:	b138      	cbz	r0, 800e546 <floor+0x46>
 800e536:	2c00      	cmp	r4, #0
 800e538:	da57      	bge.n	800e5ea <floor+0xea>
 800e53a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e53e:	431d      	orrs	r5, r3
 800e540:	d001      	beq.n	800e546 <floor+0x46>
 800e542:	4c2d      	ldr	r4, [pc, #180]	; (800e5f8 <floor+0xf8>)
 800e544:	2500      	movs	r5, #0
 800e546:	4621      	mov	r1, r4
 800e548:	4628      	mov	r0, r5
 800e54a:	e025      	b.n	800e598 <floor+0x98>
 800e54c:	4f2b      	ldr	r7, [pc, #172]	; (800e5fc <floor+0xfc>)
 800e54e:	4137      	asrs	r7, r6
 800e550:	ea01 0307 	and.w	r3, r1, r7
 800e554:	4303      	orrs	r3, r0
 800e556:	d01f      	beq.n	800e598 <floor+0x98>
 800e558:	a325      	add	r3, pc, #148	; (adr r3, 800e5f0 <floor+0xf0>)
 800e55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e55e:	f7f1 fe95 	bl	800028c <__adddf3>
 800e562:	2200      	movs	r2, #0
 800e564:	2300      	movs	r3, #0
 800e566:	f7f2 fad7 	bl	8000b18 <__aeabi_dcmpgt>
 800e56a:	2800      	cmp	r0, #0
 800e56c:	d0eb      	beq.n	800e546 <floor+0x46>
 800e56e:	2c00      	cmp	r4, #0
 800e570:	bfbe      	ittt	lt
 800e572:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e576:	fa43 f606 	asrlt.w	r6, r3, r6
 800e57a:	19a4      	addlt	r4, r4, r6
 800e57c:	ea24 0407 	bic.w	r4, r4, r7
 800e580:	2500      	movs	r5, #0
 800e582:	e7e0      	b.n	800e546 <floor+0x46>
 800e584:	2e33      	cmp	r6, #51	; 0x33
 800e586:	dd0b      	ble.n	800e5a0 <floor+0xa0>
 800e588:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e58c:	d104      	bne.n	800e598 <floor+0x98>
 800e58e:	ee10 2a10 	vmov	r2, s0
 800e592:	460b      	mov	r3, r1
 800e594:	f7f1 fe7a 	bl	800028c <__adddf3>
 800e598:	ec41 0b10 	vmov	d0, r0, r1
 800e59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5a0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e5a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e5a8:	fa23 f707 	lsr.w	r7, r3, r7
 800e5ac:	4207      	tst	r7, r0
 800e5ae:	d0f3      	beq.n	800e598 <floor+0x98>
 800e5b0:	a30f      	add	r3, pc, #60	; (adr r3, 800e5f0 <floor+0xf0>)
 800e5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b6:	f7f1 fe69 	bl	800028c <__adddf3>
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	2300      	movs	r3, #0
 800e5be:	f7f2 faab 	bl	8000b18 <__aeabi_dcmpgt>
 800e5c2:	2800      	cmp	r0, #0
 800e5c4:	d0bf      	beq.n	800e546 <floor+0x46>
 800e5c6:	2c00      	cmp	r4, #0
 800e5c8:	da02      	bge.n	800e5d0 <floor+0xd0>
 800e5ca:	2e14      	cmp	r6, #20
 800e5cc:	d103      	bne.n	800e5d6 <floor+0xd6>
 800e5ce:	3401      	adds	r4, #1
 800e5d0:	ea25 0507 	bic.w	r5, r5, r7
 800e5d4:	e7b7      	b.n	800e546 <floor+0x46>
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e5dc:	fa03 f606 	lsl.w	r6, r3, r6
 800e5e0:	4435      	add	r5, r6
 800e5e2:	4545      	cmp	r5, r8
 800e5e4:	bf38      	it	cc
 800e5e6:	18e4      	addcc	r4, r4, r3
 800e5e8:	e7f2      	b.n	800e5d0 <floor+0xd0>
 800e5ea:	2500      	movs	r5, #0
 800e5ec:	462c      	mov	r4, r5
 800e5ee:	e7aa      	b.n	800e546 <floor+0x46>
 800e5f0:	8800759c 	.word	0x8800759c
 800e5f4:	7e37e43c 	.word	0x7e37e43c
 800e5f8:	bff00000 	.word	0xbff00000
 800e5fc:	000fffff 	.word	0x000fffff

0800e600 <nan>:
 800e600:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e608 <nan+0x8>
 800e604:	4770      	bx	lr
 800e606:	bf00      	nop
 800e608:	00000000 	.word	0x00000000
 800e60c:	7ff80000 	.word	0x7ff80000

0800e610 <scalbn>:
 800e610:	b570      	push	{r4, r5, r6, lr}
 800e612:	ec55 4b10 	vmov	r4, r5, d0
 800e616:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e61a:	4606      	mov	r6, r0
 800e61c:	462b      	mov	r3, r5
 800e61e:	b99a      	cbnz	r2, 800e648 <scalbn+0x38>
 800e620:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e624:	4323      	orrs	r3, r4
 800e626:	d036      	beq.n	800e696 <scalbn+0x86>
 800e628:	4b39      	ldr	r3, [pc, #228]	; (800e710 <scalbn+0x100>)
 800e62a:	4629      	mov	r1, r5
 800e62c:	ee10 0a10 	vmov	r0, s0
 800e630:	2200      	movs	r2, #0
 800e632:	f7f1 ffe1 	bl	80005f8 <__aeabi_dmul>
 800e636:	4b37      	ldr	r3, [pc, #220]	; (800e714 <scalbn+0x104>)
 800e638:	429e      	cmp	r6, r3
 800e63a:	4604      	mov	r4, r0
 800e63c:	460d      	mov	r5, r1
 800e63e:	da10      	bge.n	800e662 <scalbn+0x52>
 800e640:	a32b      	add	r3, pc, #172	; (adr r3, 800e6f0 <scalbn+0xe0>)
 800e642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e646:	e03a      	b.n	800e6be <scalbn+0xae>
 800e648:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e64c:	428a      	cmp	r2, r1
 800e64e:	d10c      	bne.n	800e66a <scalbn+0x5a>
 800e650:	ee10 2a10 	vmov	r2, s0
 800e654:	4620      	mov	r0, r4
 800e656:	4629      	mov	r1, r5
 800e658:	f7f1 fe18 	bl	800028c <__adddf3>
 800e65c:	4604      	mov	r4, r0
 800e65e:	460d      	mov	r5, r1
 800e660:	e019      	b.n	800e696 <scalbn+0x86>
 800e662:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e666:	460b      	mov	r3, r1
 800e668:	3a36      	subs	r2, #54	; 0x36
 800e66a:	4432      	add	r2, r6
 800e66c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e670:	428a      	cmp	r2, r1
 800e672:	dd08      	ble.n	800e686 <scalbn+0x76>
 800e674:	2d00      	cmp	r5, #0
 800e676:	a120      	add	r1, pc, #128	; (adr r1, 800e6f8 <scalbn+0xe8>)
 800e678:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e67c:	da1c      	bge.n	800e6b8 <scalbn+0xa8>
 800e67e:	a120      	add	r1, pc, #128	; (adr r1, 800e700 <scalbn+0xf0>)
 800e680:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e684:	e018      	b.n	800e6b8 <scalbn+0xa8>
 800e686:	2a00      	cmp	r2, #0
 800e688:	dd08      	ble.n	800e69c <scalbn+0x8c>
 800e68a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e68e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e692:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e696:	ec45 4b10 	vmov	d0, r4, r5
 800e69a:	bd70      	pop	{r4, r5, r6, pc}
 800e69c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e6a0:	da19      	bge.n	800e6d6 <scalbn+0xc6>
 800e6a2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e6a6:	429e      	cmp	r6, r3
 800e6a8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e6ac:	dd0a      	ble.n	800e6c4 <scalbn+0xb4>
 800e6ae:	a112      	add	r1, pc, #72	; (adr r1, 800e6f8 <scalbn+0xe8>)
 800e6b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d1e2      	bne.n	800e67e <scalbn+0x6e>
 800e6b8:	a30f      	add	r3, pc, #60	; (adr r3, 800e6f8 <scalbn+0xe8>)
 800e6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6be:	f7f1 ff9b 	bl	80005f8 <__aeabi_dmul>
 800e6c2:	e7cb      	b.n	800e65c <scalbn+0x4c>
 800e6c4:	a10a      	add	r1, pc, #40	; (adr r1, 800e6f0 <scalbn+0xe0>)
 800e6c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d0b8      	beq.n	800e640 <scalbn+0x30>
 800e6ce:	a10e      	add	r1, pc, #56	; (adr r1, 800e708 <scalbn+0xf8>)
 800e6d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6d4:	e7b4      	b.n	800e640 <scalbn+0x30>
 800e6d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e6da:	3236      	adds	r2, #54	; 0x36
 800e6dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e6e0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e6e4:	4620      	mov	r0, r4
 800e6e6:	4b0c      	ldr	r3, [pc, #48]	; (800e718 <scalbn+0x108>)
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	e7e8      	b.n	800e6be <scalbn+0xae>
 800e6ec:	f3af 8000 	nop.w
 800e6f0:	c2f8f359 	.word	0xc2f8f359
 800e6f4:	01a56e1f 	.word	0x01a56e1f
 800e6f8:	8800759c 	.word	0x8800759c
 800e6fc:	7e37e43c 	.word	0x7e37e43c
 800e700:	8800759c 	.word	0x8800759c
 800e704:	fe37e43c 	.word	0xfe37e43c
 800e708:	c2f8f359 	.word	0xc2f8f359
 800e70c:	81a56e1f 	.word	0x81a56e1f
 800e710:	43500000 	.word	0x43500000
 800e714:	ffff3cb0 	.word	0xffff3cb0
 800e718:	3c900000 	.word	0x3c900000

0800e71c <_init>:
 800e71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e71e:	bf00      	nop
 800e720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e722:	bc08      	pop	{r3}
 800e724:	469e      	mov	lr, r3
 800e726:	4770      	bx	lr

0800e728 <_fini>:
 800e728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e72a:	bf00      	nop
 800e72c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e72e:	bc08      	pop	{r3}
 800e730:	469e      	mov	lr, r3
 800e732:	4770      	bx	lr
