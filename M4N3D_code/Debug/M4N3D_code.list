
M4N3D_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000560c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005794  08005794  00015794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005850  08005850  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005850  08005850  00015850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005858  08005858  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005858  08005858  00015858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800585c  0800585c  0001585c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000070  080058d0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  080058d0  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001133f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024c2  00000000  00000000  000313df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  000338a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d68  00000000  00000000  000346f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028efe  00000000  00000000  00035460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010454  00000000  00000000  0005e35e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe5dd  00000000  00000000  0006e7b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016cd8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004210  00000000  00000000  0016cde0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800577c 	.word	0x0800577c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	0800577c 	.word	0x0800577c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, unsigned char *ptr, int len)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, ptr, len, 50);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	b29a      	uxth	r2, r3
 80004dc:	2332      	movs	r3, #50	; 0x32
 80004de:	68b9      	ldr	r1, [r7, #8]
 80004e0:	4803      	ldr	r0, [pc, #12]	; (80004f0 <_write+0x24>)
 80004e2:	f003 fb71 	bl	8003bc8 <HAL_UART_Transmit>
	return len;
 80004e6:	687b      	ldr	r3, [r7, #4]
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000174 	.word	0x20000174

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fc08 	bl	8000d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f812 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f948 	bl	8000794 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000504:	f000 f916 	bl	8000734 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000508:	f000 f85e 	bl	80005c8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800050c:	f000 f8e2 	bl	80006d4 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(1000);
 8000510:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000514:	f000 fc76 	bl	8000e04 <HAL_Delay>
  printf("System started\r\n");
 8000518:	4801      	ldr	r0, [pc, #4]	; (8000520 <main+0x2c>)
 800051a:	f004 fc9f 	bl	8004e5c <puts>


  while (1)
 800051e:	e7fe      	b.n	800051e <main+0x2a>
 8000520:	08005794 	.word	0x08005794

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b096      	sub	sp, #88	; 0x58
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0314 	add.w	r3, r7, #20
 800052e:	2244      	movs	r2, #68	; 0x44
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f004 fc1c 	bl	8004d70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	463b      	mov	r3, r7
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000546:	f44f 7000 	mov.w	r0, #512	; 0x200
 800054a:	f001 ff87 	bl	800245c <HAL_PWREx_ControlVoltageScaling>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000554:	f000 f9a4 	bl	80008a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000558:	2302      	movs	r3, #2
 800055a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000560:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000562:	2310      	movs	r3, #16
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000566:	2302      	movs	r3, #2
 8000568:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056a:	2302      	movs	r3, #2
 800056c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800056e:	2301      	movs	r3, #1
 8000570:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000572:	230a      	movs	r3, #10
 8000574:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000576:	2307      	movs	r3, #7
 8000578:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800057a:	2302      	movs	r3, #2
 800057c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800057e:	2302      	movs	r3, #2
 8000580:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	4618      	mov	r0, r3
 8000588:	f001 ffbe 	bl	8002508 <HAL_RCC_OscConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000592:	f000 f985 	bl	80008a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	230f      	movs	r3, #15
 8000598:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059a:	2303      	movs	r3, #3
 800059c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005aa:	463b      	mov	r3, r7
 80005ac:	2104      	movs	r1, #4
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 fb86 	bl	8002cc0 <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ba:	f000 f971 	bl	80008a0 <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	3758      	adds	r7, #88	; 0x58
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ce:	f107 031c 	add.w	r3, r7, #28
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]
 80005e8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005ea:	4b36      	ldr	r3, [pc, #216]	; (80006c4 <MX_ADC1_Init+0xfc>)
 80005ec:	4a36      	ldr	r2, [pc, #216]	; (80006c8 <MX_ADC1_Init+0x100>)
 80005ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005f0:	4b34      	ldr	r3, [pc, #208]	; (80006c4 <MX_ADC1_Init+0xfc>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005f6:	4b33      	ldr	r3, [pc, #204]	; (80006c4 <MX_ADC1_Init+0xfc>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005fc:	4b31      	ldr	r3, [pc, #196]	; (80006c4 <MX_ADC1_Init+0xfc>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000602:	4b30      	ldr	r3, [pc, #192]	; (80006c4 <MX_ADC1_Init+0xfc>)
 8000604:	2201      	movs	r2, #1
 8000606:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000608:	4b2e      	ldr	r3, [pc, #184]	; (80006c4 <MX_ADC1_Init+0xfc>)
 800060a:	2204      	movs	r2, #4
 800060c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800060e:	4b2d      	ldr	r3, [pc, #180]	; (80006c4 <MX_ADC1_Init+0xfc>)
 8000610:	2200      	movs	r2, #0
 8000612:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000614:	4b2b      	ldr	r3, [pc, #172]	; (80006c4 <MX_ADC1_Init+0xfc>)
 8000616:	2200      	movs	r2, #0
 8000618:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 800061a:	4b2a      	ldr	r3, [pc, #168]	; (80006c4 <MX_ADC1_Init+0xfc>)
 800061c:	2202      	movs	r2, #2
 800061e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000620:	4b28      	ldr	r3, [pc, #160]	; (80006c4 <MX_ADC1_Init+0xfc>)
 8000622:	2200      	movs	r2, #0
 8000624:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000628:	4b26      	ldr	r3, [pc, #152]	; (80006c4 <MX_ADC1_Init+0xfc>)
 800062a:	2200      	movs	r2, #0
 800062c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062e:	4b25      	ldr	r3, [pc, #148]	; (80006c4 <MX_ADC1_Init+0xfc>)
 8000630:	2200      	movs	r2, #0
 8000632:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000634:	4b23      	ldr	r3, [pc, #140]	; (80006c4 <MX_ADC1_Init+0xfc>)
 8000636:	2200      	movs	r2, #0
 8000638:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800063c:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <MX_ADC1_Init+0xfc>)
 800063e:	2200      	movs	r2, #0
 8000640:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000642:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <MX_ADC1_Init+0xfc>)
 8000644:	2200      	movs	r2, #0
 8000646:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800064a:	481e      	ldr	r0, [pc, #120]	; (80006c4 <MX_ADC1_Init+0xfc>)
 800064c:	f000 fd8a 	bl	8001164 <HAL_ADC_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000656:	f000 f923 	bl	80008a0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	4619      	mov	r1, r3
 8000664:	4817      	ldr	r0, [pc, #92]	; (80006c4 <MX_ADC1_Init+0xfc>)
 8000666:	f001 fae9 	bl	8001c3c <HAL_ADCEx_MultiModeConfigChannel>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000670:	f000 f916 	bl	80008a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000674:	4b15      	ldr	r3, [pc, #84]	; (80006cc <MX_ADC1_Init+0x104>)
 8000676:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000678:	2306      	movs	r3, #6
 800067a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800067c:	2307      	movs	r3, #7
 800067e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000680:	237f      	movs	r3, #127	; 0x7f
 8000682:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000684:	2304      	movs	r3, #4
 8000686:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	4619      	mov	r1, r3
 8000690:	480c      	ldr	r0, [pc, #48]	; (80006c4 <MX_ADC1_Init+0xfc>)
 8000692:	f000 febd 	bl	8001410 <HAL_ADC_ConfigChannel>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800069c:	f000 f900 	bl	80008a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006a0:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_ADC1_Init+0x108>)
 80006a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006a4:	230c      	movs	r3, #12
 80006a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	4619      	mov	r1, r3
 80006ac:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_ADC1_Init+0xfc>)
 80006ae:	f000 feaf 	bl	8001410 <HAL_ADC_ConfigChannel>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80006b8:	f000 f8f2 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	3728      	adds	r7, #40	; 0x28
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	2000008c 	.word	0x2000008c
 80006c8:	50040000 	.word	0x50040000
 80006cc:	04300002 	.word	0x04300002
 80006d0:	08600004 	.word	0x08600004

080006d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <MX_USART1_UART_Init+0x58>)
 80006da:	4a15      	ldr	r2, [pc, #84]	; (8000730 <MX_USART1_UART_Init+0x5c>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_USART1_UART_Init+0x58>)
 80006e0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80006e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_USART1_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_USART1_UART_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_USART1_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_USART1_UART_Init+0x58>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_USART1_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_USART1_UART_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <MX_USART1_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_USART1_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_USART1_UART_Init+0x58>)
 8000718:	f003 fa00 	bl	8003b1c <HAL_HalfDuplex_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000722:	f000 f8bd 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200000f0 	.word	0x200000f0
 8000730:	40013800 	.word	0x40013800

08000734 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_USART2_UART_Init+0x58>)
 800073a:	4a15      	ldr	r2, [pc, #84]	; (8000790 <MX_USART2_UART_Init+0x5c>)
 800073c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000744:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_USART2_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_USART2_UART_Init+0x58>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_USART2_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000778:	f003 f982 	bl	8003a80 <HAL_UART_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000782:	f000 f88d 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000174 	.word	0x20000174
 8000790:	40004400 	.word	0x40004400

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08a      	sub	sp, #40	; 0x28
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	4b3b      	ldr	r3, [pc, #236]	; (8000898 <MX_GPIO_Init+0x104>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	4a3a      	ldr	r2, [pc, #232]	; (8000898 <MX_GPIO_Init+0x104>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b6:	4b38      	ldr	r3, [pc, #224]	; (8000898 <MX_GPIO_Init+0x104>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c2:	4b35      	ldr	r3, [pc, #212]	; (8000898 <MX_GPIO_Init+0x104>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4a34      	ldr	r2, [pc, #208]	; (8000898 <MX_GPIO_Init+0x104>)
 80007c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ce:	4b32      	ldr	r3, [pc, #200]	; (8000898 <MX_GPIO_Init+0x104>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b2f      	ldr	r3, [pc, #188]	; (8000898 <MX_GPIO_Init+0x104>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	4a2e      	ldr	r2, [pc, #184]	; (8000898 <MX_GPIO_Init+0x104>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e6:	4b2c      	ldr	r3, [pc, #176]	; (8000898 <MX_GPIO_Init+0x104>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	4b29      	ldr	r3, [pc, #164]	; (8000898 <MX_GPIO_Init+0x104>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	4a28      	ldr	r2, [pc, #160]	; (8000898 <MX_GPIO_Init+0x104>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fe:	4b26      	ldr	r3, [pc, #152]	; (8000898 <MX_GPIO_Init+0x104>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2120      	movs	r1, #32
 800080e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000812:	f001 fdfd 	bl	8002410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EFFECTOR_LED_Pin|EFFECTOR_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	21c0      	movs	r1, #192	; 0xc0
 800081a:	4820      	ldr	r0, [pc, #128]	; (800089c <MX_GPIO_Init+0x108>)
 800081c:	f001 fdf8 	bl	8002410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000820:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000826:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800082a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	4819      	ldr	r0, [pc, #100]	; (800089c <MX_GPIO_Init+0x108>)
 8000838:	f001 fc40 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ANALOG_L_SW_Pin ANALOG_R_SW_Pin */
  GPIO_InitStruct.Pin = ANALOG_L_SW_Pin|ANALOG_R_SW_Pin;
 800083c:	2303      	movs	r3, #3
 800083e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000840:	2300      	movs	r3, #0
 8000842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4619      	mov	r1, r3
 800084e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000852:	f001 fc33 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000856:	2320      	movs	r3, #32
 8000858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4619      	mov	r1, r3
 800086c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000870:	f001 fc24 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pins : EFFECTOR_LED_Pin EFFECTOR_Pin */
  GPIO_InitStruct.Pin = EFFECTOR_LED_Pin|EFFECTOR_Pin;
 8000874:	23c0      	movs	r3, #192	; 0xc0
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	4804      	ldr	r0, [pc, #16]	; (800089c <MX_GPIO_Init+0x108>)
 800088c:	f001 fc16 	bl	80020bc <HAL_GPIO_Init>

}
 8000890:	bf00      	nop
 8000892:	3728      	adds	r7, #40	; 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40021000 	.word	0x40021000
 800089c:	48000800 	.word	0x48000800

080008a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a4:	b672      	cpsid	i
}
 80008a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <Error_Handler+0x8>
	...

080008ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <HAL_MspInit+0x44>)
 80008b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b6:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <HAL_MspInit+0x44>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6613      	str	r3, [r2, #96]	; 0x60
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <HAL_MspInit+0x44>)
 80008c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <HAL_MspInit+0x44>)
 80008cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ce:	4a08      	ldr	r2, [pc, #32]	; (80008f0 <HAL_MspInit+0x44>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d4:	6593      	str	r3, [r2, #88]	; 0x58
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <HAL_MspInit+0x44>)
 80008d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40021000 	.word	0x40021000

080008f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b0ac      	sub	sp, #176	; 0xb0
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	2288      	movs	r2, #136	; 0x88
 8000912:	2100      	movs	r1, #0
 8000914:	4618      	mov	r0, r3
 8000916:	f004 fa2b 	bl	8004d70 <memset>
  if(hadc->Instance==ADC1)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a27      	ldr	r2, [pc, #156]	; (80009bc <HAL_ADC_MspInit+0xc8>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d146      	bne.n	80009b2 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000924:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000928:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800092a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800092e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000932:	2302      	movs	r3, #2
 8000934:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000936:	2301      	movs	r3, #1
 8000938:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800093a:	2308      	movs	r3, #8
 800093c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800093e:	2307      	movs	r3, #7
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000942:	2302      	movs	r3, #2
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000946:	2302      	movs	r3, #2
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800094a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800094e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4618      	mov	r0, r3
 8000956:	f002 fbd7 	bl	8003108 <HAL_RCCEx_PeriphCLKConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000960:	f7ff ff9e 	bl	80008a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000964:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <HAL_ADC_MspInit+0xcc>)
 8000966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000968:	4a15      	ldr	r2, [pc, #84]	; (80009c0 <HAL_ADC_MspInit+0xcc>)
 800096a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800096e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <HAL_ADC_MspInit+0xcc>)
 8000972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000974:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800097c:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <HAL_ADC_MspInit+0xcc>)
 800097e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000980:	4a0f      	ldr	r2, [pc, #60]	; (80009c0 <HAL_ADC_MspInit+0xcc>)
 8000982:	f043 0304 	orr.w	r3, r3, #4
 8000986:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000988:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <HAL_ADC_MspInit+0xcc>)
 800098a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098c:	f003 0304 	and.w	r3, r3, #4
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ANALOG_L_X_Pin|ANALOG_L_Y_Pin|ANALOG_R_X_Pin|ANALOG_R_Y_Pin;
 8000994:	230f      	movs	r3, #15
 8000996:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800099a:	230b      	movs	r3, #11
 800099c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009aa:	4619      	mov	r1, r3
 80009ac:	4805      	ldr	r0, [pc, #20]	; (80009c4 <HAL_ADC_MspInit+0xd0>)
 80009ae:	f001 fb85 	bl	80020bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009b2:	bf00      	nop
 80009b4:	37b0      	adds	r7, #176	; 0xb0
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	50040000 	.word	0x50040000
 80009c0:	40021000 	.word	0x40021000
 80009c4:	48000800 	.word	0x48000800

080009c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b0ae      	sub	sp, #184	; 0xb8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	2288      	movs	r2, #136	; 0x88
 80009e6:	2100      	movs	r1, #0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f004 f9c1 	bl	8004d70 <memset>
  if(huart->Instance==USART1)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a47      	ldr	r2, [pc, #284]	; (8000b10 <HAL_UART_MspInit+0x148>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d145      	bne.n	8000a84 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009f8:	2301      	movs	r3, #1
 80009fa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009fc:	2300      	movs	r3, #0
 80009fe:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4618      	mov	r0, r3
 8000a06:	f002 fb7f 	bl	8003108 <HAL_RCCEx_PeriphCLKConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a10:	f7ff ff46 	bl	80008a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a14:	4b3f      	ldr	r3, [pc, #252]	; (8000b14 <HAL_UART_MspInit+0x14c>)
 8000a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a18:	4a3e      	ldr	r2, [pc, #248]	; (8000b14 <HAL_UART_MspInit+0x14c>)
 8000a1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000a20:	4b3c      	ldr	r3, [pc, #240]	; (8000b14 <HAL_UART_MspInit+0x14c>)
 8000a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a28:	61bb      	str	r3, [r7, #24]
 8000a2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2c:	4b39      	ldr	r3, [pc, #228]	; (8000b14 <HAL_UART_MspInit+0x14c>)
 8000a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a30:	4a38      	ldr	r2, [pc, #224]	; (8000b14 <HAL_UART_MspInit+0x14c>)
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a38:	4b36      	ldr	r3, [pc, #216]	; (8000b14 <HAL_UART_MspInit+0x14c>)
 8000a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = SRV_UART_RXTX_Pin;
 8000a44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a4c:	2312      	movs	r3, #18
 8000a4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a5e:	2307      	movs	r3, #7
 8000a60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(SRV_UART_RXTX_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6e:	f001 fb25 	bl	80020bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	2025      	movs	r0, #37	; 0x25
 8000a78:	f001 fa6b 	bl	8001f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a7c:	2025      	movs	r0, #37	; 0x25
 8000a7e:	f001 fa84 	bl	8001f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a82:	e040      	b.n	8000b06 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a23      	ldr	r2, [pc, #140]	; (8000b18 <HAL_UART_MspInit+0x150>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d13b      	bne.n	8000b06 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f002 fb34 	bl	8003108 <HAL_RCCEx_PeriphCLKConfig>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8000aa6:	f7ff fefb 	bl	80008a0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <HAL_UART_MspInit+0x14c>)
 8000aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aae:	4a19      	ldr	r2, [pc, #100]	; (8000b14 <HAL_UART_MspInit+0x14c>)
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ab6:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <HAL_UART_MspInit+0x14c>)
 8000ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <HAL_UART_MspInit+0x14c>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	4a13      	ldr	r2, [pc, #76]	; (8000b14 <HAL_UART_MspInit+0x14c>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <HAL_UART_MspInit+0x14c>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TTY_UART_TX_Pin|TTY_UART_RX_Pin;
 8000ada:	230c      	movs	r3, #12
 8000adc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000af2:	2307      	movs	r3, #7
 8000af4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000afc:	4619      	mov	r1, r3
 8000afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b02:	f001 fadb 	bl	80020bc <HAL_GPIO_Init>
}
 8000b06:	bf00      	nop
 8000b08:	37b8      	adds	r7, #184	; 0xb8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40013800 	.word	0x40013800
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40004400 	.word	0x40004400

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <NMI_Handler+0x4>

08000b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <HardFault_Handler+0x4>

08000b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <MemManage_Handler+0x4>

08000b2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <BusFault_Handler+0x4>

08000b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <UsageFault_Handler+0x4>

08000b3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b68:	f000 f92c 	bl	8000dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <USART1_IRQHandler+0x10>)
 8000b76:	f003 f8bb 	bl	8003cf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200000f0 	.word	0x200000f0

08000b84 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	e00a      	b.n	8000bac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b96:	f3af 8000 	nop.w
 8000b9a:	4601      	mov	r1, r0
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	1c5a      	adds	r2, r3, #1
 8000ba0:	60ba      	str	r2, [r7, #8]
 8000ba2:	b2ca      	uxtb	r2, r1
 8000ba4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697a      	ldr	r2, [r7, #20]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	dbf0      	blt.n	8000b96 <_read+0x12>
	}

return len;
 8000bb4:	687b      	ldr	r3, [r7, #4]
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <_close>:
	}
	return len;
}

int _close(int file)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
	return -1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000be6:	605a      	str	r2, [r3, #4]
	return 0;
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <_isatty>:

int _isatty(int file)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b083      	sub	sp, #12
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
	return 1;
 8000bfe:	2301      	movs	r3, #1
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
	return 0;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
	...

08000c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c30:	4a14      	ldr	r2, [pc, #80]	; (8000c84 <_sbrk+0x5c>)
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <_sbrk+0x60>)
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d102      	bne.n	8000c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <_sbrk+0x64>)
 8000c46:	4a12      	ldr	r2, [pc, #72]	; (8000c90 <_sbrk+0x68>)
 8000c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <_sbrk+0x64>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d207      	bcs.n	8000c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c58:	f004 f860 	bl	8004d1c <__errno>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	220c      	movs	r2, #12
 8000c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c66:	e009      	b.n	8000c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c6e:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <_sbrk+0x64>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <_sbrk+0x64>)
 8000c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20018000 	.word	0x20018000
 8000c88:	00000400 	.word	0x00000400
 8000c8c:	200001f8 	.word	0x200001f8
 8000c90:	20000210 	.word	0x20000210

08000c94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <SystemInit+0x20>)
 8000c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9e:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <SystemInit+0x20>)
 8000ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cbc:	f7ff ffea 	bl	8000c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc0:	480c      	ldr	r0, [pc, #48]	; (8000cf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cc2:	490d      	ldr	r1, [pc, #52]	; (8000cf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	; (8000cfc <LoopForever+0xe>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc8:	e002      	b.n	8000cd0 <LoopCopyDataInit>

08000cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cce:	3304      	adds	r3, #4

08000cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd4:	d3f9      	bcc.n	8000cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd8:	4c0a      	ldr	r4, [pc, #40]	; (8000d04 <LoopForever+0x16>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cdc:	e001      	b.n	8000ce2 <LoopFillZerobss>

08000cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce0:	3204      	adds	r2, #4

08000ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce4:	d3fb      	bcc.n	8000cde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce6:	f004 f81f 	bl	8004d28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cea:	f7ff fc03 	bl	80004f4 <main>

08000cee <LoopForever>:

LoopForever:
    b LoopForever
 8000cee:	e7fe      	b.n	8000cee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cf0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cfc:	08005860 	.word	0x08005860
  ldr r2, =_sbss
 8000d00:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d04:	20000210 	.word	0x20000210

08000d08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d08:	e7fe      	b.n	8000d08 <ADC1_2_IRQHandler>
	...

08000d0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d12:	2300      	movs	r3, #0
 8000d14:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <HAL_Init+0x3c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <HAL_Init+0x3c>)
 8000d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d20:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d22:	2003      	movs	r0, #3
 8000d24:	f001 f90a 	bl	8001f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f000 f80f 	bl	8000d4c <HAL_InitTick>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d002      	beq.n	8000d3a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	71fb      	strb	r3, [r7, #7]
 8000d38:	e001      	b.n	8000d3e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d3a:	f7ff fdb7 	bl	80008ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40022000 	.word	0x40022000

08000d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d54:	2300      	movs	r3, #0
 8000d56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d58:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <HAL_InitTick+0x6c>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d023      	beq.n	8000da8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d60:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <HAL_InitTick+0x70>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <HAL_InitTick+0x6c>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f001 f915 	bl	8001fa6 <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d10f      	bne.n	8000da2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b0f      	cmp	r3, #15
 8000d86:	d809      	bhi.n	8000d9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d90:	f001 f8df 	bl	8001f52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d94:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <HAL_InitTick+0x74>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	e007      	b.n	8000dac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	73fb      	strb	r3, [r7, #15]
 8000da0:	e004      	b.n	8000dac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	73fb      	strb	r3, [r7, #15]
 8000da6:	e001      	b.n	8000dac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	20000004 	.word	0x20000004

08000dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_IncTick+0x20>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_IncTick+0x24>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <HAL_IncTick+0x24>)
 8000dd6:	6013      	str	r3, [r2, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000008 	.word	0x20000008
 8000de8:	200001fc 	.word	0x200001fc

08000dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return uwTick;
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <HAL_GetTick+0x14>)
 8000df2:	681b      	ldr	r3, [r3, #0]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	200001fc 	.word	0x200001fc

08000e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e0c:	f7ff ffee 	bl	8000dec <HAL_GetTick>
 8000e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e1c:	d005      	beq.n	8000e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <HAL_Delay+0x44>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	461a      	mov	r2, r3
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4413      	add	r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e2a:	bf00      	nop
 8000e2c:	f7ff ffde 	bl	8000dec <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d8f7      	bhi.n	8000e2c <HAL_Delay+0x28>
  {
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000008 	.word	0x20000008

08000e4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	431a      	orrs	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	609a      	str	r2, [r3, #8]
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b083      	sub	sp, #12
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
 8000e7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	431a      	orrs	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b087      	sub	sp, #28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
 8000ec0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	3360      	adds	r3, #96	; 0x60
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4413      	add	r3, r2
 8000ece:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <LL_ADC_SetOffset+0x44>)
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000eec:	bf00      	nop
 8000eee:	371c      	adds	r7, #28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	03fff000 	.word	0x03fff000

08000efc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3360      	adds	r3, #96	; 0x60
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	4413      	add	r3, r2
 8000f12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b087      	sub	sp, #28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	3360      	adds	r3, #96	; 0x60
 8000f38:	461a      	mov	r2, r3
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	4413      	add	r3, r2
 8000f40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000f52:	bf00      	nop
 8000f54:	371c      	adds	r7, #28
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b087      	sub	sp, #28
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	60f8      	str	r0, [r7, #12]
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	3330      	adds	r3, #48	; 0x30
 8000f6e:	461a      	mov	r2, r3
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	0a1b      	lsrs	r3, r3, #8
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	f003 030c 	and.w	r3, r3, #12
 8000f7a:	4413      	add	r3, r2
 8000f7c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	f003 031f 	and.w	r3, r3, #31
 8000f88:	211f      	movs	r1, #31
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	401a      	ands	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	0e9b      	lsrs	r3, r3, #26
 8000f96:	f003 011f 	and.w	r1, r3, #31
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	f003 031f 	and.w	r3, r3, #31
 8000fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000faa:	bf00      	nop
 8000fac:	371c      	adds	r7, #28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b087      	sub	sp, #28
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	60f8      	str	r0, [r7, #12]
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	3314      	adds	r3, #20
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	0e5b      	lsrs	r3, r3, #25
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	f003 0304 	and.w	r3, r3, #4
 8000fd2:	4413      	add	r3, r2
 8000fd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	0d1b      	lsrs	r3, r3, #20
 8000fde:	f003 031f 	and.w	r3, r3, #31
 8000fe2:	2107      	movs	r1, #7
 8000fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	401a      	ands	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	0d1b      	lsrs	r3, r3, #20
 8000ff0:	f003 031f 	and.w	r3, r3, #31
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	431a      	orrs	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001000:	bf00      	nop
 8001002:	371c      	adds	r7, #28
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001024:	43db      	mvns	r3, r3
 8001026:	401a      	ands	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f003 0318 	and.w	r3, r3, #24
 800102e:	4908      	ldr	r1, [pc, #32]	; (8001050 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001030:	40d9      	lsrs	r1, r3
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	400b      	ands	r3, r1
 8001036:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800103a:	431a      	orrs	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001042:	bf00      	nop
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	0007ffff 	.word	0x0007ffff

08001054 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001064:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	6093      	str	r3, [r2, #8]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001088:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800108c:	d101      	bne.n	8001092 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80010b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80010dc:	d101      	bne.n	80010e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80010de:	2301      	movs	r3, #1
 80010e0:	e000      	b.n	80010e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	2b01      	cmp	r3, #1
 8001102:	d101      	bne.n	8001108 <LL_ADC_IsEnabled+0x18>
 8001104:	2301      	movs	r3, #1
 8001106:	e000      	b.n	800110a <LL_ADC_IsEnabled+0x1a>
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	2b04      	cmp	r3, #4
 8001128:	d101      	bne.n	800112e <LL_ADC_REG_IsConversionOngoing+0x18>
 800112a:	2301      	movs	r3, #1
 800112c:	e000      	b.n	8001130 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f003 0308 	and.w	r3, r3, #8
 800114c:	2b08      	cmp	r3, #8
 800114e:	d101      	bne.n	8001154 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001150:	2301      	movs	r3, #1
 8001152:	e000      	b.n	8001156 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b089      	sub	sp, #36	; 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800116c:	2300      	movs	r3, #0
 800116e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001170:	2300      	movs	r3, #0
 8001172:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e136      	b.n	80013ec <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001188:	2b00      	cmp	r3, #0
 800118a:	d109      	bne.n	80011a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff fbb1 	bl	80008f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff67 	bl	8001078 <LL_ADC_IsDeepPowerDownEnabled>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d004      	beq.n	80011ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff4d 	bl	8001054 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ff82 	bl	80010c8 <LL_ADC_IsInternalRegulatorEnabled>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d115      	bne.n	80011f6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff ff66 	bl	80010a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011d4:	4b87      	ldr	r3, [pc, #540]	; (80013f4 <HAL_ADC_Init+0x290>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	099b      	lsrs	r3, r3, #6
 80011da:	4a87      	ldr	r2, [pc, #540]	; (80013f8 <HAL_ADC_Init+0x294>)
 80011dc:	fba2 2303 	umull	r2, r3, r2, r3
 80011e0:	099b      	lsrs	r3, r3, #6
 80011e2:	3301      	adds	r3, #1
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011e8:	e002      	b.n	80011f0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	3b01      	subs	r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f9      	bne.n	80011ea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff ff64 	bl	80010c8 <LL_ADC_IsInternalRegulatorEnabled>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10d      	bne.n	8001222 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800120a:	f043 0210 	orr.w	r2, r3, #16
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001216:	f043 0201 	orr.w	r2, r3, #1
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ff75 	bl	8001116 <LL_ADC_REG_IsConversionOngoing>
 800122c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001232:	f003 0310 	and.w	r3, r3, #16
 8001236:	2b00      	cmp	r3, #0
 8001238:	f040 80cf 	bne.w	80013da <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	2b00      	cmp	r3, #0
 8001240:	f040 80cb 	bne.w	80013da <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001248:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800124c:	f043 0202 	orr.w	r2, r3, #2
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff49 	bl	80010f0 <LL_ADC_IsEnabled>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d115      	bne.n	8001290 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001264:	4865      	ldr	r0, [pc, #404]	; (80013fc <HAL_ADC_Init+0x298>)
 8001266:	f7ff ff43 	bl	80010f0 <LL_ADC_IsEnabled>
 800126a:	4604      	mov	r4, r0
 800126c:	4864      	ldr	r0, [pc, #400]	; (8001400 <HAL_ADC_Init+0x29c>)
 800126e:	f7ff ff3f 	bl	80010f0 <LL_ADC_IsEnabled>
 8001272:	4603      	mov	r3, r0
 8001274:	431c      	orrs	r4, r3
 8001276:	4863      	ldr	r0, [pc, #396]	; (8001404 <HAL_ADC_Init+0x2a0>)
 8001278:	f7ff ff3a 	bl	80010f0 <LL_ADC_IsEnabled>
 800127c:	4603      	mov	r3, r0
 800127e:	4323      	orrs	r3, r4
 8001280:	2b00      	cmp	r3, #0
 8001282:	d105      	bne.n	8001290 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	4619      	mov	r1, r3
 800128a:	485f      	ldr	r0, [pc, #380]	; (8001408 <HAL_ADC_Init+0x2a4>)
 800128c:	f7ff fdde 	bl	8000e4c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	7e5b      	ldrb	r3, [r3, #25]
 8001294:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800129a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80012a0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80012a6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ae:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d106      	bne.n	80012cc <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c2:	3b01      	subs	r3, #1
 80012c4:	045b      	lsls	r3, r3, #17
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d009      	beq.n	80012e8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	68da      	ldr	r2, [r3, #12]
 80012ee:	4b47      	ldr	r3, [pc, #284]	; (800140c <HAL_ADC_Init+0x2a8>)
 80012f0:	4013      	ands	r3, r2
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	6812      	ldr	r2, [r2, #0]
 80012f6:	69b9      	ldr	r1, [r7, #24]
 80012f8:	430b      	orrs	r3, r1
 80012fa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff08 	bl	8001116 <LL_ADC_REG_IsConversionOngoing>
 8001306:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff15 	bl	800113c <LL_ADC_INJ_IsConversionOngoing>
 8001312:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d13d      	bne.n	8001396 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d13a      	bne.n	8001396 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001324:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800132c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800133c:	f023 0302 	bic.w	r3, r3, #2
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6812      	ldr	r2, [r2, #0]
 8001344:	69b9      	ldr	r1, [r7, #24]
 8001346:	430b      	orrs	r3, r1
 8001348:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001350:	2b01      	cmp	r3, #1
 8001352:	d118      	bne.n	8001386 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800135e:	f023 0304 	bic.w	r3, r3, #4
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800136a:	4311      	orrs	r1, r2
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001370:	4311      	orrs	r1, r2
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001376:	430a      	orrs	r2, r1
 8001378:	431a      	orrs	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f042 0201 	orr.w	r2, r2, #1
 8001382:	611a      	str	r2, [r3, #16]
 8001384:	e007      	b.n	8001396 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	691a      	ldr	r2, [r3, #16]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 0201 	bic.w	r2, r2, #1
 8001394:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d10c      	bne.n	80013b8 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a4:	f023 010f 	bic.w	r1, r3, #15
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	1e5a      	subs	r2, r3, #1
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	631a      	str	r2, [r3, #48]	; 0x30
 80013b6:	e007      	b.n	80013c8 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 020f 	bic.w	r2, r2, #15
 80013c6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013cc:	f023 0303 	bic.w	r3, r3, #3
 80013d0:	f043 0201 	orr.w	r2, r3, #1
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	655a      	str	r2, [r3, #84]	; 0x54
 80013d8:	e007      	b.n	80013ea <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013de:	f043 0210 	orr.w	r2, r3, #16
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80013ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3724      	adds	r7, #36	; 0x24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd90      	pop	{r4, r7, pc}
 80013f4:	20000000 	.word	0x20000000
 80013f8:	053e2d63 	.word	0x053e2d63
 80013fc:	50040000 	.word	0x50040000
 8001400:	50040100 	.word	0x50040100
 8001404:	50040200 	.word	0x50040200
 8001408:	50040300 	.word	0x50040300
 800140c:	fff0c007 	.word	0xfff0c007

08001410 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b0b6      	sub	sp, #216	; 0xd8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800142a:	2b01      	cmp	r3, #1
 800142c:	d101      	bne.n	8001432 <HAL_ADC_ConfigChannel+0x22>
 800142e:	2302      	movs	r3, #2
 8001430:	e3c7      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x7b2>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2201      	movs	r2, #1
 8001436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fe69 	bl	8001116 <LL_ADC_REG_IsConversionOngoing>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	f040 83a8 	bne.w	8001b9c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b05      	cmp	r3, #5
 8001452:	d824      	bhi.n	800149e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	3b02      	subs	r3, #2
 800145a:	2b03      	cmp	r3, #3
 800145c:	d81b      	bhi.n	8001496 <HAL_ADC_ConfigChannel+0x86>
 800145e:	a201      	add	r2, pc, #4	; (adr r2, 8001464 <HAL_ADC_ConfigChannel+0x54>)
 8001460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001464:	08001475 	.word	0x08001475
 8001468:	0800147d 	.word	0x0800147d
 800146c:	08001485 	.word	0x08001485
 8001470:	0800148d 	.word	0x0800148d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	220c      	movs	r2, #12
 8001478:	605a      	str	r2, [r3, #4]
          break;
 800147a:	e011      	b.n	80014a0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	2212      	movs	r2, #18
 8001480:	605a      	str	r2, [r3, #4]
          break;
 8001482:	e00d      	b.n	80014a0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	2218      	movs	r2, #24
 8001488:	605a      	str	r2, [r3, #4]
          break;
 800148a:	e009      	b.n	80014a0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001492:	605a      	str	r2, [r3, #4]
          break;
 8001494:	e004      	b.n	80014a0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	2206      	movs	r2, #6
 800149a:	605a      	str	r2, [r3, #4]
          break;
 800149c:	e000      	b.n	80014a0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800149e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6818      	ldr	r0, [r3, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	6859      	ldr	r1, [r3, #4]
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	f7ff fd56 	bl	8000f5e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fe2d 	bl	8001116 <LL_ADC_REG_IsConversionOngoing>
 80014bc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fe39 	bl	800113c <LL_ADC_INJ_IsConversionOngoing>
 80014ca:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f040 81a6 	bne.w	8001824 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f040 81a1 	bne.w	8001824 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6818      	ldr	r0, [r3, #0]
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	6819      	ldr	r1, [r3, #0]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	461a      	mov	r2, r3
 80014f0:	f7ff fd61 	bl	8000fb6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	695a      	ldr	r2, [r3, #20]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	08db      	lsrs	r3, r3, #3
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	2b04      	cmp	r3, #4
 8001514:	d00a      	beq.n	800152c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6818      	ldr	r0, [r3, #0]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	6919      	ldr	r1, [r3, #16]
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001526:	f7ff fcc5 	bl	8000eb4 <LL_ADC_SetOffset>
 800152a:	e17b      	b.n	8001824 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fce2 	bl	8000efc <LL_ADC_GetOffsetChannel>
 8001538:	4603      	mov	r3, r0
 800153a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10a      	bne.n	8001558 <HAL_ADC_ConfigChannel+0x148>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fcd7 	bl	8000efc <LL_ADC_GetOffsetChannel>
 800154e:	4603      	mov	r3, r0
 8001550:	0e9b      	lsrs	r3, r3, #26
 8001552:	f003 021f 	and.w	r2, r3, #31
 8001556:	e01e      	b.n	8001596 <HAL_ADC_ConfigChannel+0x186>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2100      	movs	r1, #0
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fccc 	bl	8000efc <LL_ADC_GetOffsetChannel>
 8001564:	4603      	mov	r3, r0
 8001566:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800156e:	fa93 f3a3 	rbit	r3, r3
 8001572:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001576:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800157a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800157e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001586:	2320      	movs	r3, #32
 8001588:	e004      	b.n	8001594 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800158a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800158e:	fab3 f383 	clz	r3, r3
 8001592:	b2db      	uxtb	r3, r3
 8001594:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d105      	bne.n	80015ae <HAL_ADC_ConfigChannel+0x19e>
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	0e9b      	lsrs	r3, r3, #26
 80015a8:	f003 031f 	and.w	r3, r3, #31
 80015ac:	e018      	b.n	80015e0 <HAL_ADC_ConfigChannel+0x1d0>
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80015ba:	fa93 f3a3 	rbit	r3, r3
 80015be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80015c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80015ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80015d2:	2320      	movs	r3, #32
 80015d4:	e004      	b.n	80015e0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80015d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80015da:	fab3 f383 	clz	r3, r3
 80015de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d106      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2200      	movs	r2, #0
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fc9b 	bl	8000f28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2101      	movs	r1, #1
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fc7f 	bl	8000efc <LL_ADC_GetOffsetChannel>
 80015fe:	4603      	mov	r3, r0
 8001600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001604:	2b00      	cmp	r3, #0
 8001606:	d10a      	bne.n	800161e <HAL_ADC_ConfigChannel+0x20e>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2101      	movs	r1, #1
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fc74 	bl	8000efc <LL_ADC_GetOffsetChannel>
 8001614:	4603      	mov	r3, r0
 8001616:	0e9b      	lsrs	r3, r3, #26
 8001618:	f003 021f 	and.w	r2, r3, #31
 800161c:	e01e      	b.n	800165c <HAL_ADC_ConfigChannel+0x24c>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2101      	movs	r1, #1
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fc69 	bl	8000efc <LL_ADC_GetOffsetChannel>
 800162a:	4603      	mov	r3, r0
 800162c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001630:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001634:	fa93 f3a3 	rbit	r3, r3
 8001638:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800163c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001640:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001644:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800164c:	2320      	movs	r3, #32
 800164e:	e004      	b.n	800165a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001650:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001654:	fab3 f383 	clz	r3, r3
 8001658:	b2db      	uxtb	r3, r3
 800165a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001664:	2b00      	cmp	r3, #0
 8001666:	d105      	bne.n	8001674 <HAL_ADC_ConfigChannel+0x264>
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	0e9b      	lsrs	r3, r3, #26
 800166e:	f003 031f 	and.w	r3, r3, #31
 8001672:	e018      	b.n	80016a6 <HAL_ADC_ConfigChannel+0x296>
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001680:	fa93 f3a3 	rbit	r3, r3
 8001684:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001688:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800168c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001690:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001698:	2320      	movs	r3, #32
 800169a:	e004      	b.n	80016a6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800169c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016a0:	fab3 f383 	clz	r3, r3
 80016a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d106      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2200      	movs	r2, #0
 80016b0:	2101      	movs	r1, #1
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fc38 	bl	8000f28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2102      	movs	r1, #2
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fc1c 	bl	8000efc <LL_ADC_GetOffsetChannel>
 80016c4:	4603      	mov	r3, r0
 80016c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10a      	bne.n	80016e4 <HAL_ADC_ConfigChannel+0x2d4>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2102      	movs	r1, #2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fc11 	bl	8000efc <LL_ADC_GetOffsetChannel>
 80016da:	4603      	mov	r3, r0
 80016dc:	0e9b      	lsrs	r3, r3, #26
 80016de:	f003 021f 	and.w	r2, r3, #31
 80016e2:	e01e      	b.n	8001722 <HAL_ADC_ConfigChannel+0x312>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2102      	movs	r1, #2
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fc06 	bl	8000efc <LL_ADC_GetOffsetChannel>
 80016f0:	4603      	mov	r3, r0
 80016f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016fa:	fa93 f3a3 	rbit	r3, r3
 80016fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001702:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001706:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800170a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001712:	2320      	movs	r3, #32
 8001714:	e004      	b.n	8001720 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001716:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800171a:	fab3 f383 	clz	r3, r3
 800171e:	b2db      	uxtb	r3, r3
 8001720:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800172a:	2b00      	cmp	r3, #0
 800172c:	d105      	bne.n	800173a <HAL_ADC_ConfigChannel+0x32a>
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	0e9b      	lsrs	r3, r3, #26
 8001734:	f003 031f 	and.w	r3, r3, #31
 8001738:	e016      	b.n	8001768 <HAL_ADC_ConfigChannel+0x358>
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001742:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001746:	fa93 f3a3 	rbit	r3, r3
 800174a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800174c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800174e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001752:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800175a:	2320      	movs	r3, #32
 800175c:	e004      	b.n	8001768 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800175e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001762:	fab3 f383 	clz	r3, r3
 8001766:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001768:	429a      	cmp	r2, r3
 800176a:	d106      	bne.n	800177a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2200      	movs	r2, #0
 8001772:	2102      	movs	r1, #2
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fbd7 	bl	8000f28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2103      	movs	r1, #3
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fbbb 	bl	8000efc <LL_ADC_GetOffsetChannel>
 8001786:	4603      	mov	r3, r0
 8001788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10a      	bne.n	80017a6 <HAL_ADC_ConfigChannel+0x396>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2103      	movs	r1, #3
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fbb0 	bl	8000efc <LL_ADC_GetOffsetChannel>
 800179c:	4603      	mov	r3, r0
 800179e:	0e9b      	lsrs	r3, r3, #26
 80017a0:	f003 021f 	and.w	r2, r3, #31
 80017a4:	e017      	b.n	80017d6 <HAL_ADC_ConfigChannel+0x3c6>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2103      	movs	r1, #3
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fba5 	bl	8000efc <LL_ADC_GetOffsetChannel>
 80017b2:	4603      	mov	r3, r0
 80017b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017b8:	fa93 f3a3 	rbit	r3, r3
 80017bc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80017be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017c0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80017c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d101      	bne.n	80017cc <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80017c8:	2320      	movs	r3, #32
 80017ca:	e003      	b.n	80017d4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80017cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017ce:	fab3 f383 	clz	r3, r3
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d105      	bne.n	80017ee <HAL_ADC_ConfigChannel+0x3de>
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	0e9b      	lsrs	r3, r3, #26
 80017e8:	f003 031f 	and.w	r3, r3, #31
 80017ec:	e011      	b.n	8001812 <HAL_ADC_ConfigChannel+0x402>
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017f6:	fa93 f3a3 	rbit	r3, r3
 80017fa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80017fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001806:	2320      	movs	r3, #32
 8001808:	e003      	b.n	8001812 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800180a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800180c:	fab3 f383 	clz	r3, r3
 8001810:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001812:	429a      	cmp	r2, r3
 8001814:	d106      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2200      	movs	r2, #0
 800181c:	2103      	movs	r1, #3
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fb82 	bl	8000f28 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fc61 	bl	80010f0 <LL_ADC_IsEnabled>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	f040 813f 	bne.w	8001ab4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6818      	ldr	r0, [r3, #0]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	6819      	ldr	r1, [r3, #0]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	461a      	mov	r2, r3
 8001844:	f7ff fbe2 	bl	800100c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	4a8e      	ldr	r2, [pc, #568]	; (8001a88 <HAL_ADC_ConfigChannel+0x678>)
 800184e:	4293      	cmp	r3, r2
 8001850:	f040 8130 	bne.w	8001ab4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001860:	2b00      	cmp	r3, #0
 8001862:	d10b      	bne.n	800187c <HAL_ADC_ConfigChannel+0x46c>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	0e9b      	lsrs	r3, r3, #26
 800186a:	3301      	adds	r3, #1
 800186c:	f003 031f 	and.w	r3, r3, #31
 8001870:	2b09      	cmp	r3, #9
 8001872:	bf94      	ite	ls
 8001874:	2301      	movls	r3, #1
 8001876:	2300      	movhi	r3, #0
 8001878:	b2db      	uxtb	r3, r3
 800187a:	e019      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x4a0>
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001882:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001884:	fa93 f3a3 	rbit	r3, r3
 8001888:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800188a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800188c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800188e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001894:	2320      	movs	r3, #32
 8001896:	e003      	b.n	80018a0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001898:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800189a:	fab3 f383 	clz	r3, r3
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	3301      	adds	r3, #1
 80018a2:	f003 031f 	and.w	r3, r3, #31
 80018a6:	2b09      	cmp	r3, #9
 80018a8:	bf94      	ite	ls
 80018aa:	2301      	movls	r3, #1
 80018ac:	2300      	movhi	r3, #0
 80018ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d079      	beq.n	80019a8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d107      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x4c0>
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	0e9b      	lsrs	r3, r3, #26
 80018c6:	3301      	adds	r3, #1
 80018c8:	069b      	lsls	r3, r3, #26
 80018ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018ce:	e015      	b.n	80018fc <HAL_ADC_ConfigChannel+0x4ec>
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018d8:	fa93 f3a3 	rbit	r3, r3
 80018dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80018de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80018e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80018e8:	2320      	movs	r3, #32
 80018ea:	e003      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80018ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ee:	fab3 f383 	clz	r3, r3
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	3301      	adds	r3, #1
 80018f6:	069b      	lsls	r3, r3, #26
 80018f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001904:	2b00      	cmp	r3, #0
 8001906:	d109      	bne.n	800191c <HAL_ADC_ConfigChannel+0x50c>
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	0e9b      	lsrs	r3, r3, #26
 800190e:	3301      	adds	r3, #1
 8001910:	f003 031f 	and.w	r3, r3, #31
 8001914:	2101      	movs	r1, #1
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	e017      	b.n	800194c <HAL_ADC_ConfigChannel+0x53c>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001924:	fa93 f3a3 	rbit	r3, r3
 8001928:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800192a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800192c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800192e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001934:	2320      	movs	r3, #32
 8001936:	e003      	b.n	8001940 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800193a:	fab3 f383 	clz	r3, r3
 800193e:	b2db      	uxtb	r3, r3
 8001940:	3301      	adds	r3, #1
 8001942:	f003 031f 	and.w	r3, r3, #31
 8001946:	2101      	movs	r1, #1
 8001948:	fa01 f303 	lsl.w	r3, r1, r3
 800194c:	ea42 0103 	orr.w	r1, r2, r3
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001958:	2b00      	cmp	r3, #0
 800195a:	d10a      	bne.n	8001972 <HAL_ADC_ConfigChannel+0x562>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	0e9b      	lsrs	r3, r3, #26
 8001962:	3301      	adds	r3, #1
 8001964:	f003 021f 	and.w	r2, r3, #31
 8001968:	4613      	mov	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	4413      	add	r3, r2
 800196e:	051b      	lsls	r3, r3, #20
 8001970:	e018      	b.n	80019a4 <HAL_ADC_ConfigChannel+0x594>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800197a:	fa93 f3a3 	rbit	r3, r3
 800197e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001982:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800198a:	2320      	movs	r3, #32
 800198c:	e003      	b.n	8001996 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800198e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001990:	fab3 f383 	clz	r3, r3
 8001994:	b2db      	uxtb	r3, r3
 8001996:	3301      	adds	r3, #1
 8001998:	f003 021f 	and.w	r2, r3, #31
 800199c:	4613      	mov	r3, r2
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	4413      	add	r3, r2
 80019a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019a4:	430b      	orrs	r3, r1
 80019a6:	e080      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d107      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x5b4>
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	0e9b      	lsrs	r3, r3, #26
 80019ba:	3301      	adds	r3, #1
 80019bc:	069b      	lsls	r3, r3, #26
 80019be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019c2:	e015      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x5e0>
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019cc:	fa93 f3a3 	rbit	r3, r3
 80019d0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80019d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80019d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80019dc:	2320      	movs	r3, #32
 80019de:	e003      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80019e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e2:	fab3 f383 	clz	r3, r3
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	3301      	adds	r3, #1
 80019ea:	069b      	lsls	r3, r3, #26
 80019ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d109      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x600>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	0e9b      	lsrs	r3, r3, #26
 8001a02:	3301      	adds	r3, #1
 8001a04:	f003 031f 	and.w	r3, r3, #31
 8001a08:	2101      	movs	r1, #1
 8001a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0e:	e017      	b.n	8001a40 <HAL_ADC_ConfigChannel+0x630>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a16:	6a3b      	ldr	r3, [r7, #32]
 8001a18:	fa93 f3a3 	rbit	r3, r3
 8001a1c:	61fb      	str	r3, [r7, #28]
  return result;
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001a28:	2320      	movs	r3, #32
 8001a2a:	e003      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	fab3 f383 	clz	r3, r3
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	3301      	adds	r3, #1
 8001a36:	f003 031f 	and.w	r3, r3, #31
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a40:	ea42 0103 	orr.w	r1, r2, r3
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d10d      	bne.n	8001a6c <HAL_ADC_ConfigChannel+0x65c>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	0e9b      	lsrs	r3, r3, #26
 8001a56:	3301      	adds	r3, #1
 8001a58:	f003 021f 	and.w	r2, r3, #31
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4413      	add	r3, r2
 8001a62:	3b1e      	subs	r3, #30
 8001a64:	051b      	lsls	r3, r3, #20
 8001a66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a6a:	e01d      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x698>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	fa93 f3a3 	rbit	r3, r3
 8001a78:	613b      	str	r3, [r7, #16]
  return result;
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d103      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001a84:	2320      	movs	r3, #32
 8001a86:	e005      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x684>
 8001a88:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	fab3 f383 	clz	r3, r3
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	3301      	adds	r3, #1
 8001a96:	f003 021f 	and.w	r2, r3, #31
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3b1e      	subs	r3, #30
 8001aa2:	051b      	lsls	r3, r3, #20
 8001aa4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001aa8:	430b      	orrs	r3, r1
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	6892      	ldr	r2, [r2, #8]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f7ff fa81 	bl	8000fb6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b44      	ldr	r3, [pc, #272]	; (8001bcc <HAL_ADC_ConfigChannel+0x7bc>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d07a      	beq.n	8001bb6 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ac0:	4843      	ldr	r0, [pc, #268]	; (8001bd0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001ac2:	f7ff f9e9 	bl	8000e98 <LL_ADC_GetCommonPathInternalCh>
 8001ac6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a41      	ldr	r2, [pc, #260]	; (8001bd4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d12c      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ad4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ad8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d126      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a3c      	ldr	r2, [pc, #240]	; (8001bd8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d004      	beq.n	8001af4 <HAL_ADC_ConfigChannel+0x6e4>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a3b      	ldr	r2, [pc, #236]	; (8001bdc <HAL_ADC_ConfigChannel+0x7cc>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d15d      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001af4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001af8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001afc:	4619      	mov	r1, r3
 8001afe:	4834      	ldr	r0, [pc, #208]	; (8001bd0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001b00:	f7ff f9b7 	bl	8000e72 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b04:	4b36      	ldr	r3, [pc, #216]	; (8001be0 <HAL_ADC_ConfigChannel+0x7d0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	099b      	lsrs	r3, r3, #6
 8001b0a:	4a36      	ldr	r2, [pc, #216]	; (8001be4 <HAL_ADC_ConfigChannel+0x7d4>)
 8001b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b10:	099b      	lsrs	r3, r3, #6
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	4613      	mov	r3, r2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	4413      	add	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b1e:	e002      	b.n	8001b26 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f9      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b2c:	e040      	b.n	8001bb0 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a2d      	ldr	r2, [pc, #180]	; (8001be8 <HAL_ADC_ConfigChannel+0x7d8>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d118      	bne.n	8001b6a <HAL_ADC_ConfigChannel+0x75a>
 8001b38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d112      	bne.n	8001b6a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a23      	ldr	r2, [pc, #140]	; (8001bd8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d004      	beq.n	8001b58 <HAL_ADC_ConfigChannel+0x748>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a22      	ldr	r2, [pc, #136]	; (8001bdc <HAL_ADC_ConfigChannel+0x7cc>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d12d      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b60:	4619      	mov	r1, r3
 8001b62:	481b      	ldr	r0, [pc, #108]	; (8001bd0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001b64:	f7ff f985 	bl	8000e72 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b68:	e024      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a1f      	ldr	r2, [pc, #124]	; (8001bec <HAL_ADC_ConfigChannel+0x7dc>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d120      	bne.n	8001bb6 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d11a      	bne.n	8001bb6 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a14      	ldr	r2, [pc, #80]	; (8001bd8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d115      	bne.n	8001bb6 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b92:	4619      	mov	r1, r3
 8001b94:	480e      	ldr	r0, [pc, #56]	; (8001bd0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001b96:	f7ff f96c 	bl	8000e72 <LL_ADC_SetCommonPathInternalCh>
 8001b9a:	e00c      	b.n	8001bb6 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba0:	f043 0220 	orr.w	r2, r3, #32
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001bae:	e002      	b.n	8001bb6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001bb0:	bf00      	nop
 8001bb2:	e000      	b.n	8001bb6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001bb4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001bbe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	37d8      	adds	r7, #216	; 0xd8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	80080000 	.word	0x80080000
 8001bd0:	50040300 	.word	0x50040300
 8001bd4:	c7520000 	.word	0xc7520000
 8001bd8:	50040000 	.word	0x50040000
 8001bdc:	50040200 	.word	0x50040200
 8001be0:	20000000 	.word	0x20000000
 8001be4:	053e2d63 	.word	0x053e2d63
 8001be8:	cb840000 	.word	0xcb840000
 8001bec:	80000001 	.word	0x80000001

08001bf0 <LL_ADC_IsEnabled>:
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <LL_ADC_IsEnabled+0x18>
 8001c04:	2301      	movs	r3, #1
 8001c06:	e000      	b.n	8001c0a <LL_ADC_IsEnabled+0x1a>
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <LL_ADC_REG_IsConversionOngoing>:
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d101      	bne.n	8001c2e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e000      	b.n	8001c30 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b09f      	sub	sp, #124	; 0x7c
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d101      	bne.n	8001c5a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e093      	b.n	8001d82 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001c62:	2300      	movs	r3, #0
 8001c64:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001c66:	2300      	movs	r3, #0
 8001c68:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a47      	ldr	r2, [pc, #284]	; (8001d8c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d102      	bne.n	8001c7a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001c74:	4b46      	ldr	r3, [pc, #280]	; (8001d90 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	e001      	b.n	8001c7e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10b      	bne.n	8001c9c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c88:	f043 0220 	orr.w	r2, r3, #32
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e072      	b.n	8001d82 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff ffb9 	bl	8001c16 <LL_ADC_REG_IsConversionOngoing>
 8001ca4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ffb3 	bl	8001c16 <LL_ADC_REG_IsConversionOngoing>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d154      	bne.n	8001d60 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001cb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d151      	bne.n	8001d60 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001cbc:	4b35      	ldr	r3, [pc, #212]	; (8001d94 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001cbe:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d02c      	beq.n	8001d22 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	6859      	ldr	r1, [r3, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cda:	035b      	lsls	r3, r3, #13
 8001cdc:	430b      	orrs	r3, r1
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ce2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ce4:	4829      	ldr	r0, [pc, #164]	; (8001d8c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001ce6:	f7ff ff83 	bl	8001bf0 <LL_ADC_IsEnabled>
 8001cea:	4604      	mov	r4, r0
 8001cec:	4828      	ldr	r0, [pc, #160]	; (8001d90 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001cee:	f7ff ff7f 	bl	8001bf0 <LL_ADC_IsEnabled>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	431c      	orrs	r4, r3
 8001cf6:	4828      	ldr	r0, [pc, #160]	; (8001d98 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001cf8:	f7ff ff7a 	bl	8001bf0 <LL_ADC_IsEnabled>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	4323      	orrs	r3, r4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d137      	bne.n	8001d74 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001d0c:	f023 030f 	bic.w	r3, r3, #15
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	6811      	ldr	r1, [r2, #0]
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	6892      	ldr	r2, [r2, #8]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d1e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d20:	e028      	b.n	8001d74 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d2c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d2e:	4817      	ldr	r0, [pc, #92]	; (8001d8c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001d30:	f7ff ff5e 	bl	8001bf0 <LL_ADC_IsEnabled>
 8001d34:	4604      	mov	r4, r0
 8001d36:	4816      	ldr	r0, [pc, #88]	; (8001d90 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001d38:	f7ff ff5a 	bl	8001bf0 <LL_ADC_IsEnabled>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	431c      	orrs	r4, r3
 8001d40:	4815      	ldr	r0, [pc, #84]	; (8001d98 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001d42:	f7ff ff55 	bl	8001bf0 <LL_ADC_IsEnabled>
 8001d46:	4603      	mov	r3, r0
 8001d48:	4323      	orrs	r3, r4
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d112      	bne.n	8001d74 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001d56:	f023 030f 	bic.w	r3, r3, #15
 8001d5a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001d5c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d5e:	e009      	b.n	8001d74 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d64:	f043 0220 	orr.w	r2, r3, #32
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001d72:	e000      	b.n	8001d76 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d74:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d7e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	377c      	adds	r7, #124	; 0x7c
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd90      	pop	{r4, r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	50040000 	.word	0x50040000
 8001d90:	50040100 	.word	0x50040100
 8001d94:	50040300 	.word	0x50040300
 8001d98:	50040200 	.word	0x50040200

08001d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001db8:	4013      	ands	r3, r2
 8001dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dce:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	60d3      	str	r3, [r2, #12]
}
 8001dd4:	bf00      	nop
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de8:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <__NVIC_GetPriorityGrouping+0x18>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	0a1b      	lsrs	r3, r3, #8
 8001dee:	f003 0307 	and.w	r3, r3, #7
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	db0b      	blt.n	8001e2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	f003 021f 	and.w	r2, r3, #31
 8001e18:	4907      	ldr	r1, [pc, #28]	; (8001e38 <__NVIC_EnableIRQ+0x38>)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	2001      	movs	r0, #1
 8001e22:	fa00 f202 	lsl.w	r2, r0, r2
 8001e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000e100 	.word	0xe000e100

08001e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	db0a      	blt.n	8001e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	490c      	ldr	r1, [pc, #48]	; (8001e88 <__NVIC_SetPriority+0x4c>)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	0112      	lsls	r2, r2, #4
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	440b      	add	r3, r1
 8001e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e64:	e00a      	b.n	8001e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4908      	ldr	r1, [pc, #32]	; (8001e8c <__NVIC_SetPriority+0x50>)
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	3b04      	subs	r3, #4
 8001e74:	0112      	lsls	r2, r2, #4
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	440b      	add	r3, r1
 8001e7a:	761a      	strb	r2, [r3, #24]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000e100 	.word	0xe000e100
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b089      	sub	sp, #36	; 0x24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f1c3 0307 	rsb	r3, r3, #7
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	bf28      	it	cs
 8001eae:	2304      	movcs	r3, #4
 8001eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	2b06      	cmp	r3, #6
 8001eb8:	d902      	bls.n	8001ec0 <NVIC_EncodePriority+0x30>
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3b03      	subs	r3, #3
 8001ebe:	e000      	b.n	8001ec2 <NVIC_EncodePriority+0x32>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee2:	43d9      	mvns	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	4313      	orrs	r3, r2
         );
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3724      	adds	r7, #36	; 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f08:	d301      	bcc.n	8001f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e00f      	b.n	8001f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <SysTick_Config+0x40>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f16:	210f      	movs	r1, #15
 8001f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f1c:	f7ff ff8e 	bl	8001e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <SysTick_Config+0x40>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f26:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <SysTick_Config+0x40>)
 8001f28:	2207      	movs	r2, #7
 8001f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	e000e010 	.word	0xe000e010

08001f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff ff29 	bl	8001d9c <__NVIC_SetPriorityGrouping>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	4603      	mov	r3, r0
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	607a      	str	r2, [r7, #4]
 8001f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f64:	f7ff ff3e 	bl	8001de4 <__NVIC_GetPriorityGrouping>
 8001f68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	6978      	ldr	r0, [r7, #20]
 8001f70:	f7ff ff8e 	bl	8001e90 <NVIC_EncodePriority>
 8001f74:	4602      	mov	r2, r0
 8001f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff5d 	bl	8001e3c <__NVIC_SetPriority>
}
 8001f82:	bf00      	nop
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	4603      	mov	r3, r0
 8001f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff ff31 	bl	8001e00 <__NVIC_EnableIRQ>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff ffa2 	bl	8001ef8 <SysTick_Config>
 8001fb4:	4603      	mov	r3, r0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b085      	sub	sp, #20
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d008      	beq.n	8001fe8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2204      	movs	r2, #4
 8001fda:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e022      	b.n	800202e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 020e 	bic.w	r2, r2, #14
 8001ff6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0201 	bic.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200c:	f003 021c 	and.w	r2, r3, #28
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	2101      	movs	r1, #1
 8002016:	fa01 f202 	lsl.w	r2, r1, r2
 800201a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800202c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800202e:	4618      	mov	r0, r3
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b084      	sub	sp, #16
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d005      	beq.n	800205e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2204      	movs	r2, #4
 8002056:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	73fb      	strb	r3, [r7, #15]
 800205c:	e029      	b.n	80020b2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 020e 	bic.w	r2, r2, #14
 800206c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0201 	bic.w	r2, r2, #1
 800207c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	f003 021c 	and.w	r2, r3, #28
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	2101      	movs	r1, #1
 800208c:	fa01 f202 	lsl.w	r2, r1, r2
 8002090:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	4798      	blx	r3
    }
  }
  return status;
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020bc:	b480      	push	{r7}
 80020be:	b087      	sub	sp, #28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ca:	e17f      	b.n	80023cc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	2101      	movs	r1, #1
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	fa01 f303 	lsl.w	r3, r1, r3
 80020d8:	4013      	ands	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 8171 	beq.w	80023c6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d005      	beq.n	80020fc <HAL_GPIO_Init+0x40>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d130      	bne.n	800215e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	2203      	movs	r2, #3
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	4313      	orrs	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002132:	2201      	movs	r2, #1
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4013      	ands	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	091b      	lsrs	r3, r3, #4
 8002148:	f003 0201 	and.w	r2, r3, #1
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	2b03      	cmp	r3, #3
 8002168:	d118      	bne.n	800219c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002170:	2201      	movs	r2, #1
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	08db      	lsrs	r3, r3, #3
 8002186:	f003 0201 	and.w	r2, r3, #1
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	4313      	orrs	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d017      	beq.n	80021d8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	2203      	movs	r2, #3
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4013      	ands	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 0303 	and.w	r3, r3, #3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d123      	bne.n	800222c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	08da      	lsrs	r2, r3, #3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3208      	adds	r2, #8
 80021ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	220f      	movs	r2, #15
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4013      	ands	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	691a      	ldr	r2, [r3, #16]
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	4313      	orrs	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	08da      	lsrs	r2, r3, #3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3208      	adds	r2, #8
 8002226:	6939      	ldr	r1, [r7, #16]
 8002228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	2203      	movs	r2, #3
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4013      	ands	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 0203 	and.w	r2, r3, #3
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	4313      	orrs	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 80ac 	beq.w	80023c6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226e:	4b5f      	ldr	r3, [pc, #380]	; (80023ec <HAL_GPIO_Init+0x330>)
 8002270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002272:	4a5e      	ldr	r2, [pc, #376]	; (80023ec <HAL_GPIO_Init+0x330>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	6613      	str	r3, [r2, #96]	; 0x60
 800227a:	4b5c      	ldr	r3, [pc, #368]	; (80023ec <HAL_GPIO_Init+0x330>)
 800227c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	60bb      	str	r3, [r7, #8]
 8002284:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002286:	4a5a      	ldr	r2, [pc, #360]	; (80023f0 <HAL_GPIO_Init+0x334>)
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	089b      	lsrs	r3, r3, #2
 800228c:	3302      	adds	r3, #2
 800228e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002292:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	220f      	movs	r2, #15
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4013      	ands	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022b0:	d025      	beq.n	80022fe <HAL_GPIO_Init+0x242>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a4f      	ldr	r2, [pc, #316]	; (80023f4 <HAL_GPIO_Init+0x338>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d01f      	beq.n	80022fa <HAL_GPIO_Init+0x23e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a4e      	ldr	r2, [pc, #312]	; (80023f8 <HAL_GPIO_Init+0x33c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d019      	beq.n	80022f6 <HAL_GPIO_Init+0x23a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a4d      	ldr	r2, [pc, #308]	; (80023fc <HAL_GPIO_Init+0x340>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d013      	beq.n	80022f2 <HAL_GPIO_Init+0x236>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a4c      	ldr	r2, [pc, #304]	; (8002400 <HAL_GPIO_Init+0x344>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d00d      	beq.n	80022ee <HAL_GPIO_Init+0x232>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a4b      	ldr	r2, [pc, #300]	; (8002404 <HAL_GPIO_Init+0x348>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d007      	beq.n	80022ea <HAL_GPIO_Init+0x22e>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a4a      	ldr	r2, [pc, #296]	; (8002408 <HAL_GPIO_Init+0x34c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d101      	bne.n	80022e6 <HAL_GPIO_Init+0x22a>
 80022e2:	2306      	movs	r3, #6
 80022e4:	e00c      	b.n	8002300 <HAL_GPIO_Init+0x244>
 80022e6:	2307      	movs	r3, #7
 80022e8:	e00a      	b.n	8002300 <HAL_GPIO_Init+0x244>
 80022ea:	2305      	movs	r3, #5
 80022ec:	e008      	b.n	8002300 <HAL_GPIO_Init+0x244>
 80022ee:	2304      	movs	r3, #4
 80022f0:	e006      	b.n	8002300 <HAL_GPIO_Init+0x244>
 80022f2:	2303      	movs	r3, #3
 80022f4:	e004      	b.n	8002300 <HAL_GPIO_Init+0x244>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e002      	b.n	8002300 <HAL_GPIO_Init+0x244>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <HAL_GPIO_Init+0x244>
 80022fe:	2300      	movs	r3, #0
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	f002 0203 	and.w	r2, r2, #3
 8002306:	0092      	lsls	r2, r2, #2
 8002308:	4093      	lsls	r3, r2
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002310:	4937      	ldr	r1, [pc, #220]	; (80023f0 <HAL_GPIO_Init+0x334>)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	089b      	lsrs	r3, r3, #2
 8002316:	3302      	adds	r3, #2
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800231e:	4b3b      	ldr	r3, [pc, #236]	; (800240c <HAL_GPIO_Init+0x350>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	43db      	mvns	r3, r3
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	4013      	ands	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4313      	orrs	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002342:	4a32      	ldr	r2, [pc, #200]	; (800240c <HAL_GPIO_Init+0x350>)
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002348:	4b30      	ldr	r3, [pc, #192]	; (800240c <HAL_GPIO_Init+0x350>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	43db      	mvns	r3, r3
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4013      	ands	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4313      	orrs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800236c:	4a27      	ldr	r2, [pc, #156]	; (800240c <HAL_GPIO_Init+0x350>)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002372:	4b26      	ldr	r3, [pc, #152]	; (800240c <HAL_GPIO_Init+0x350>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	43db      	mvns	r3, r3
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4013      	ands	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4313      	orrs	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002396:	4a1d      	ldr	r2, [pc, #116]	; (800240c <HAL_GPIO_Init+0x350>)
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800239c:	4b1b      	ldr	r3, [pc, #108]	; (800240c <HAL_GPIO_Init+0x350>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4013      	ands	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023c0:	4a12      	ldr	r2, [pc, #72]	; (800240c <HAL_GPIO_Init+0x350>)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	3301      	adds	r3, #1
 80023ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	fa22 f303 	lsr.w	r3, r2, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f47f ae78 	bne.w	80020cc <HAL_GPIO_Init+0x10>
  }
}
 80023dc:	bf00      	nop
 80023de:	bf00      	nop
 80023e0:	371c      	adds	r7, #28
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40010000 	.word	0x40010000
 80023f4:	48000400 	.word	0x48000400
 80023f8:	48000800 	.word	0x48000800
 80023fc:	48000c00 	.word	0x48000c00
 8002400:	48001000 	.word	0x48001000
 8002404:	48001400 	.word	0x48001400
 8002408:	48001800 	.word	0x48001800
 800240c:	40010400 	.word	0x40010400

08002410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	807b      	strh	r3, [r7, #2]
 800241c:	4613      	mov	r3, r2
 800241e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002420:	787b      	ldrb	r3, [r7, #1]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002426:	887a      	ldrh	r2, [r7, #2]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800242c:	e002      	b.n	8002434 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800242e:	887a      	ldrh	r2, [r7, #2]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002444:	4b04      	ldr	r3, [pc, #16]	; (8002458 <HAL_PWREx_GetVoltageRange+0x18>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40007000 	.word	0x40007000

0800245c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800246a:	d130      	bne.n	80024ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800246c:	4b23      	ldr	r3, [pc, #140]	; (80024fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002478:	d038      	beq.n	80024ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800247a:	4b20      	ldr	r3, [pc, #128]	; (80024fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002482:	4a1e      	ldr	r2, [pc, #120]	; (80024fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002484:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002488:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800248a:	4b1d      	ldr	r3, [pc, #116]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2232      	movs	r2, #50	; 0x32
 8002490:	fb02 f303 	mul.w	r3, r2, r3
 8002494:	4a1b      	ldr	r2, [pc, #108]	; (8002504 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	0c9b      	lsrs	r3, r3, #18
 800249c:	3301      	adds	r3, #1
 800249e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024a0:	e002      	b.n	80024a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	3b01      	subs	r3, #1
 80024a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024a8:	4b14      	ldr	r3, [pc, #80]	; (80024fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b4:	d102      	bne.n	80024bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1f2      	bne.n	80024a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024bc:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c8:	d110      	bne.n	80024ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e00f      	b.n	80024ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024ce:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024da:	d007      	beq.n	80024ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024dc:	4b07      	ldr	r3, [pc, #28]	; (80024fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024e4:	4a05      	ldr	r2, [pc, #20]	; (80024fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	40007000 	.word	0x40007000
 8002500:	20000000 	.word	0x20000000
 8002504:	431bde83 	.word	0x431bde83

08002508 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b088      	sub	sp, #32
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e3ca      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800251a:	4b97      	ldr	r3, [pc, #604]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 030c 	and.w	r3, r3, #12
 8002522:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002524:	4b94      	ldr	r3, [pc, #592]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f003 0303 	and.w	r3, r3, #3
 800252c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0310 	and.w	r3, r3, #16
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 80e4 	beq.w	8002704 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d007      	beq.n	8002552 <HAL_RCC_OscConfig+0x4a>
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	2b0c      	cmp	r3, #12
 8002546:	f040 808b 	bne.w	8002660 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2b01      	cmp	r3, #1
 800254e:	f040 8087 	bne.w	8002660 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002552:	4b89      	ldr	r3, [pc, #548]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <HAL_RCC_OscConfig+0x62>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e3a2      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1a      	ldr	r2, [r3, #32]
 800256e:	4b82      	ldr	r3, [pc, #520]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b00      	cmp	r3, #0
 8002578:	d004      	beq.n	8002584 <HAL_RCC_OscConfig+0x7c>
 800257a:	4b7f      	ldr	r3, [pc, #508]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002582:	e005      	b.n	8002590 <HAL_RCC_OscConfig+0x88>
 8002584:	4b7c      	ldr	r3, [pc, #496]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 8002586:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800258a:	091b      	lsrs	r3, r3, #4
 800258c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002590:	4293      	cmp	r3, r2
 8002592:	d223      	bcs.n	80025dc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	4618      	mov	r0, r3
 800259a:	f000 fd55 	bl	8003048 <RCC_SetFlashLatencyFromMSIRange>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e383      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025a8:	4b73      	ldr	r3, [pc, #460]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a72      	ldr	r2, [pc, #456]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 80025ae:	f043 0308 	orr.w	r3, r3, #8
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	4b70      	ldr	r3, [pc, #448]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	496d      	ldr	r1, [pc, #436]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025c6:	4b6c      	ldr	r3, [pc, #432]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	021b      	lsls	r3, r3, #8
 80025d4:	4968      	ldr	r1, [pc, #416]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	604b      	str	r3, [r1, #4]
 80025da:	e025      	b.n	8002628 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025dc:	4b66      	ldr	r3, [pc, #408]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a65      	ldr	r2, [pc, #404]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 80025e2:	f043 0308 	orr.w	r3, r3, #8
 80025e6:	6013      	str	r3, [r2, #0]
 80025e8:	4b63      	ldr	r3, [pc, #396]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	4960      	ldr	r1, [pc, #384]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025fa:	4b5f      	ldr	r3, [pc, #380]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	021b      	lsls	r3, r3, #8
 8002608:	495b      	ldr	r1, [pc, #364]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 800260a:	4313      	orrs	r3, r2
 800260c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d109      	bne.n	8002628 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	4618      	mov	r0, r3
 800261a:	f000 fd15 	bl	8003048 <RCC_SetFlashLatencyFromMSIRange>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e343      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002628:	f000 fc4a 	bl	8002ec0 <HAL_RCC_GetSysClockFreq>
 800262c:	4602      	mov	r2, r0
 800262e:	4b52      	ldr	r3, [pc, #328]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	091b      	lsrs	r3, r3, #4
 8002634:	f003 030f 	and.w	r3, r3, #15
 8002638:	4950      	ldr	r1, [pc, #320]	; (800277c <HAL_RCC_OscConfig+0x274>)
 800263a:	5ccb      	ldrb	r3, [r1, r3]
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
 8002644:	4a4e      	ldr	r2, [pc, #312]	; (8002780 <HAL_RCC_OscConfig+0x278>)
 8002646:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002648:	4b4e      	ldr	r3, [pc, #312]	; (8002784 <HAL_RCC_OscConfig+0x27c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe fb7d 	bl	8000d4c <HAL_InitTick>
 8002652:	4603      	mov	r3, r0
 8002654:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d052      	beq.n	8002702 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800265c:	7bfb      	ldrb	r3, [r7, #15]
 800265e:	e327      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d032      	beq.n	80026ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002668:	4b43      	ldr	r3, [pc, #268]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a42      	ldr	r2, [pc, #264]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002674:	f7fe fbba 	bl	8000dec <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800267c:	f7fe fbb6 	bl	8000dec <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e310      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800268e:	4b3a      	ldr	r3, [pc, #232]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0f0      	beq.n	800267c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800269a:	4b37      	ldr	r3, [pc, #220]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a36      	ldr	r2, [pc, #216]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 80026a0:	f043 0308 	orr.w	r3, r3, #8
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	4b34      	ldr	r3, [pc, #208]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	4931      	ldr	r1, [pc, #196]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026b8:	4b2f      	ldr	r3, [pc, #188]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	021b      	lsls	r3, r3, #8
 80026c6:	492c      	ldr	r1, [pc, #176]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	604b      	str	r3, [r1, #4]
 80026cc:	e01a      	b.n	8002704 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026ce:	4b2a      	ldr	r3, [pc, #168]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a29      	ldr	r2, [pc, #164]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 80026d4:	f023 0301 	bic.w	r3, r3, #1
 80026d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026da:	f7fe fb87 	bl	8000dec <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026e2:	f7fe fb83 	bl	8000dec <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e2dd      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026f4:	4b20      	ldr	r3, [pc, #128]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1f0      	bne.n	80026e2 <HAL_RCC_OscConfig+0x1da>
 8002700:	e000      	b.n	8002704 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002702:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d074      	beq.n	80027fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	2b08      	cmp	r3, #8
 8002714:	d005      	beq.n	8002722 <HAL_RCC_OscConfig+0x21a>
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	2b0c      	cmp	r3, #12
 800271a:	d10e      	bne.n	800273a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	2b03      	cmp	r3, #3
 8002720:	d10b      	bne.n	800273a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002722:	4b15      	ldr	r3, [pc, #84]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d064      	beq.n	80027f8 <HAL_RCC_OscConfig+0x2f0>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d160      	bne.n	80027f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e2ba      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002742:	d106      	bne.n	8002752 <HAL_RCC_OscConfig+0x24a>
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a0b      	ldr	r2, [pc, #44]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 800274a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800274e:	6013      	str	r3, [r2, #0]
 8002750:	e026      	b.n	80027a0 <HAL_RCC_OscConfig+0x298>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800275a:	d115      	bne.n	8002788 <HAL_RCC_OscConfig+0x280>
 800275c:	4b06      	ldr	r3, [pc, #24]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a05      	ldr	r2, [pc, #20]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 8002762:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	4b03      	ldr	r3, [pc, #12]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a02      	ldr	r2, [pc, #8]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 800276e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002772:	6013      	str	r3, [r2, #0]
 8002774:	e014      	b.n	80027a0 <HAL_RCC_OscConfig+0x298>
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000
 800277c:	080057a4 	.word	0x080057a4
 8002780:	20000000 	.word	0x20000000
 8002784:	20000004 	.word	0x20000004
 8002788:	4ba0      	ldr	r3, [pc, #640]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a9f      	ldr	r2, [pc, #636]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 800278e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	4b9d      	ldr	r3, [pc, #628]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a9c      	ldr	r2, [pc, #624]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 800279a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800279e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d013      	beq.n	80027d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a8:	f7fe fb20 	bl	8000dec <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b0:	f7fe fb1c 	bl	8000dec <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b64      	cmp	r3, #100	; 0x64
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e276      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027c2:	4b92      	ldr	r3, [pc, #584]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCC_OscConfig+0x2a8>
 80027ce:	e014      	b.n	80027fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d0:	f7fe fb0c 	bl	8000dec <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d8:	f7fe fb08 	bl	8000dec <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b64      	cmp	r3, #100	; 0x64
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e262      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027ea:	4b88      	ldr	r3, [pc, #544]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x2d0>
 80027f6:	e000      	b.n	80027fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d060      	beq.n	80028c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	2b04      	cmp	r3, #4
 800280a:	d005      	beq.n	8002818 <HAL_RCC_OscConfig+0x310>
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	2b0c      	cmp	r3, #12
 8002810:	d119      	bne.n	8002846 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2b02      	cmp	r3, #2
 8002816:	d116      	bne.n	8002846 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002818:	4b7c      	ldr	r3, [pc, #496]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_RCC_OscConfig+0x328>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e23f      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002830:	4b76      	ldr	r3, [pc, #472]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	061b      	lsls	r3, r3, #24
 800283e:	4973      	ldr	r1, [pc, #460]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 8002840:	4313      	orrs	r3, r2
 8002842:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002844:	e040      	b.n	80028c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d023      	beq.n	8002896 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800284e:	4b6f      	ldr	r3, [pc, #444]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a6e      	ldr	r2, [pc, #440]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 8002854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002858:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285a:	f7fe fac7 	bl	8000dec <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002862:	f7fe fac3 	bl	8000dec <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e21d      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002874:	4b65      	ldr	r3, [pc, #404]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0f0      	beq.n	8002862 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002880:	4b62      	ldr	r3, [pc, #392]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	061b      	lsls	r3, r3, #24
 800288e:	495f      	ldr	r1, [pc, #380]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 8002890:	4313      	orrs	r3, r2
 8002892:	604b      	str	r3, [r1, #4]
 8002894:	e018      	b.n	80028c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002896:	4b5d      	ldr	r3, [pc, #372]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a5c      	ldr	r2, [pc, #368]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 800289c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a2:	f7fe faa3 	bl	8000dec <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028aa:	f7fe fa9f 	bl	8000dec <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e1f9      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028bc:	4b53      	ldr	r3, [pc, #332]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1f0      	bne.n	80028aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d03c      	beq.n	800294e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d01c      	beq.n	8002916 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028dc:	4b4b      	ldr	r3, [pc, #300]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 80028de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028e2:	4a4a      	ldr	r2, [pc, #296]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ec:	f7fe fa7e 	bl	8000dec <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028f4:	f7fe fa7a 	bl	8000dec <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e1d4      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002906:	4b41      	ldr	r3, [pc, #260]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 8002908:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0ef      	beq.n	80028f4 <HAL_RCC_OscConfig+0x3ec>
 8002914:	e01b      	b.n	800294e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002916:	4b3d      	ldr	r3, [pc, #244]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 8002918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800291c:	4a3b      	ldr	r2, [pc, #236]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 800291e:	f023 0301 	bic.w	r3, r3, #1
 8002922:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002926:	f7fe fa61 	bl	8000dec <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800292c:	e008      	b.n	8002940 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800292e:	f7fe fa5d 	bl	8000dec <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e1b7      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002940:	4b32      	ldr	r3, [pc, #200]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 8002942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1ef      	bne.n	800292e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0304 	and.w	r3, r3, #4
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 80a6 	beq.w	8002aa8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800295c:	2300      	movs	r3, #0
 800295e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002960:	4b2a      	ldr	r3, [pc, #168]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 8002962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10d      	bne.n	8002988 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800296c:	4b27      	ldr	r3, [pc, #156]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 800296e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002970:	4a26      	ldr	r2, [pc, #152]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 8002972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002976:	6593      	str	r3, [r2, #88]	; 0x58
 8002978:	4b24      	ldr	r3, [pc, #144]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 800297a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002980:	60bb      	str	r3, [r7, #8]
 8002982:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002984:	2301      	movs	r3, #1
 8002986:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002988:	4b21      	ldr	r3, [pc, #132]	; (8002a10 <HAL_RCC_OscConfig+0x508>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002990:	2b00      	cmp	r3, #0
 8002992:	d118      	bne.n	80029c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002994:	4b1e      	ldr	r3, [pc, #120]	; (8002a10 <HAL_RCC_OscConfig+0x508>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a1d      	ldr	r2, [pc, #116]	; (8002a10 <HAL_RCC_OscConfig+0x508>)
 800299a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800299e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029a0:	f7fe fa24 	bl	8000dec <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a8:	f7fe fa20 	bl	8000dec <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e17a      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029ba:	4b15      	ldr	r3, [pc, #84]	; (8002a10 <HAL_RCC_OscConfig+0x508>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d108      	bne.n	80029e0 <HAL_RCC_OscConfig+0x4d8>
 80029ce:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 80029d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d4:	4a0d      	ldr	r2, [pc, #52]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029de:	e029      	b.n	8002a34 <HAL_RCC_OscConfig+0x52c>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	2b05      	cmp	r3, #5
 80029e6:	d115      	bne.n	8002a14 <HAL_RCC_OscConfig+0x50c>
 80029e8:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 80029ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ee:	4a07      	ldr	r2, [pc, #28]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 80029f0:	f043 0304 	orr.w	r3, r3, #4
 80029f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029f8:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 80029fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fe:	4a03      	ldr	r2, [pc, #12]	; (8002a0c <HAL_RCC_OscConfig+0x504>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a08:	e014      	b.n	8002a34 <HAL_RCC_OscConfig+0x52c>
 8002a0a:	bf00      	nop
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40007000 	.word	0x40007000
 8002a14:	4b9c      	ldr	r3, [pc, #624]	; (8002c88 <HAL_RCC_OscConfig+0x780>)
 8002a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1a:	4a9b      	ldr	r2, [pc, #620]	; (8002c88 <HAL_RCC_OscConfig+0x780>)
 8002a1c:	f023 0301 	bic.w	r3, r3, #1
 8002a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a24:	4b98      	ldr	r3, [pc, #608]	; (8002c88 <HAL_RCC_OscConfig+0x780>)
 8002a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2a:	4a97      	ldr	r2, [pc, #604]	; (8002c88 <HAL_RCC_OscConfig+0x780>)
 8002a2c:	f023 0304 	bic.w	r3, r3, #4
 8002a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d016      	beq.n	8002a6a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3c:	f7fe f9d6 	bl	8000dec <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a42:	e00a      	b.n	8002a5a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a44:	f7fe f9d2 	bl	8000dec <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e12a      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a5a:	4b8b      	ldr	r3, [pc, #556]	; (8002c88 <HAL_RCC_OscConfig+0x780>)
 8002a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0ed      	beq.n	8002a44 <HAL_RCC_OscConfig+0x53c>
 8002a68:	e015      	b.n	8002a96 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6a:	f7fe f9bf 	bl	8000dec <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a70:	e00a      	b.n	8002a88 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a72:	f7fe f9bb 	bl	8000dec <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e113      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a88:	4b7f      	ldr	r3, [pc, #508]	; (8002c88 <HAL_RCC_OscConfig+0x780>)
 8002a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1ed      	bne.n	8002a72 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a96:	7ffb      	ldrb	r3, [r7, #31]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d105      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a9c:	4b7a      	ldr	r3, [pc, #488]	; (8002c88 <HAL_RCC_OscConfig+0x780>)
 8002a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa0:	4a79      	ldr	r2, [pc, #484]	; (8002c88 <HAL_RCC_OscConfig+0x780>)
 8002aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 80fe 	beq.w	8002cae <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	f040 80d0 	bne.w	8002c5c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002abc:	4b72      	ldr	r3, [pc, #456]	; (8002c88 <HAL_RCC_OscConfig+0x780>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f003 0203 	and.w	r2, r3, #3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d130      	bne.n	8002b32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	3b01      	subs	r3, #1
 8002adc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d127      	bne.n	8002b32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d11f      	bne.n	8002b32 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002afc:	2a07      	cmp	r2, #7
 8002afe:	bf14      	ite	ne
 8002b00:	2201      	movne	r2, #1
 8002b02:	2200      	moveq	r2, #0
 8002b04:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d113      	bne.n	8002b32 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b14:	085b      	lsrs	r3, r3, #1
 8002b16:	3b01      	subs	r3, #1
 8002b18:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d109      	bne.n	8002b32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	085b      	lsrs	r3, r3, #1
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d06e      	beq.n	8002c10 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	2b0c      	cmp	r3, #12
 8002b36:	d069      	beq.n	8002c0c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b38:	4b53      	ldr	r3, [pc, #332]	; (8002c88 <HAL_RCC_OscConfig+0x780>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d105      	bne.n	8002b50 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b44:	4b50      	ldr	r3, [pc, #320]	; (8002c88 <HAL_RCC_OscConfig+0x780>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e0ad      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b54:	4b4c      	ldr	r3, [pc, #304]	; (8002c88 <HAL_RCC_OscConfig+0x780>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a4b      	ldr	r2, [pc, #300]	; (8002c88 <HAL_RCC_OscConfig+0x780>)
 8002b5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b5e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b60:	f7fe f944 	bl	8000dec <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b68:	f7fe f940 	bl	8000dec <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e09a      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b7a:	4b43      	ldr	r3, [pc, #268]	; (8002c88 <HAL_RCC_OscConfig+0x780>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b86:	4b40      	ldr	r3, [pc, #256]	; (8002c88 <HAL_RCC_OscConfig+0x780>)
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	4b40      	ldr	r3, [pc, #256]	; (8002c8c <HAL_RCC_OscConfig+0x784>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b96:	3a01      	subs	r2, #1
 8002b98:	0112      	lsls	r2, r2, #4
 8002b9a:	4311      	orrs	r1, r2
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ba0:	0212      	lsls	r2, r2, #8
 8002ba2:	4311      	orrs	r1, r2
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ba8:	0852      	lsrs	r2, r2, #1
 8002baa:	3a01      	subs	r2, #1
 8002bac:	0552      	lsls	r2, r2, #21
 8002bae:	4311      	orrs	r1, r2
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bb4:	0852      	lsrs	r2, r2, #1
 8002bb6:	3a01      	subs	r2, #1
 8002bb8:	0652      	lsls	r2, r2, #25
 8002bba:	4311      	orrs	r1, r2
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bc0:	0912      	lsrs	r2, r2, #4
 8002bc2:	0452      	lsls	r2, r2, #17
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	4930      	ldr	r1, [pc, #192]	; (8002c88 <HAL_RCC_OscConfig+0x780>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002bcc:	4b2e      	ldr	r3, [pc, #184]	; (8002c88 <HAL_RCC_OscConfig+0x780>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a2d      	ldr	r2, [pc, #180]	; (8002c88 <HAL_RCC_OscConfig+0x780>)
 8002bd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bd6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bd8:	4b2b      	ldr	r3, [pc, #172]	; (8002c88 <HAL_RCC_OscConfig+0x780>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	4a2a      	ldr	r2, [pc, #168]	; (8002c88 <HAL_RCC_OscConfig+0x780>)
 8002bde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002be2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002be4:	f7fe f902 	bl	8000dec <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bec:	f7fe f8fe 	bl	8000dec <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e058      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bfe:	4b22      	ldr	r3, [pc, #136]	; (8002c88 <HAL_RCC_OscConfig+0x780>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0f0      	beq.n	8002bec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c0a:	e050      	b.n	8002cae <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e04f      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c10:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <HAL_RCC_OscConfig+0x780>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d148      	bne.n	8002cae <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c1c:	4b1a      	ldr	r3, [pc, #104]	; (8002c88 <HAL_RCC_OscConfig+0x780>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a19      	ldr	r2, [pc, #100]	; (8002c88 <HAL_RCC_OscConfig+0x780>)
 8002c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c28:	4b17      	ldr	r3, [pc, #92]	; (8002c88 <HAL_RCC_OscConfig+0x780>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4a16      	ldr	r2, [pc, #88]	; (8002c88 <HAL_RCC_OscConfig+0x780>)
 8002c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c34:	f7fe f8da 	bl	8000dec <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3c:	f7fe f8d6 	bl	8000dec <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e030      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c4e:	4b0e      	ldr	r3, [pc, #56]	; (8002c88 <HAL_RCC_OscConfig+0x780>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0x734>
 8002c5a:	e028      	b.n	8002cae <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	2b0c      	cmp	r3, #12
 8002c60:	d023      	beq.n	8002caa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c62:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <HAL_RCC_OscConfig+0x780>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a08      	ldr	r2, [pc, #32]	; (8002c88 <HAL_RCC_OscConfig+0x780>)
 8002c68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6e:	f7fe f8bd 	bl	8000dec <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c74:	e00c      	b.n	8002c90 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c76:	f7fe f8b9 	bl	8000dec <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d905      	bls.n	8002c90 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e013      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7a8>
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c90:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <HAL_RCC_OscConfig+0x7b0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1ec      	bne.n	8002c76 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c9c:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <HAL_RCC_OscConfig+0x7b0>)
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	4905      	ldr	r1, [pc, #20]	; (8002cb8 <HAL_RCC_OscConfig+0x7b0>)
 8002ca2:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <HAL_RCC_OscConfig+0x7b4>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	60cb      	str	r3, [r1, #12]
 8002ca8:	e001      	b.n	8002cae <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3720      	adds	r7, #32
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	feeefffc 	.word	0xfeeefffc

08002cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0e7      	b.n	8002ea4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd4:	4b75      	ldr	r3, [pc, #468]	; (8002eac <HAL_RCC_ClockConfig+0x1ec>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d910      	bls.n	8002d04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce2:	4b72      	ldr	r3, [pc, #456]	; (8002eac <HAL_RCC_ClockConfig+0x1ec>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f023 0207 	bic.w	r2, r3, #7
 8002cea:	4970      	ldr	r1, [pc, #448]	; (8002eac <HAL_RCC_ClockConfig+0x1ec>)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf2:	4b6e      	ldr	r3, [pc, #440]	; (8002eac <HAL_RCC_ClockConfig+0x1ec>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0cf      	b.n	8002ea4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d010      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	4b66      	ldr	r3, [pc, #408]	; (8002eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d908      	bls.n	8002d32 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d20:	4b63      	ldr	r3, [pc, #396]	; (8002eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	4960      	ldr	r1, [pc, #384]	; (8002eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d04c      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d107      	bne.n	8002d56 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d46:	4b5a      	ldr	r3, [pc, #360]	; (8002eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d121      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e0a6      	b.n	8002ea4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d107      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d5e:	4b54      	ldr	r3, [pc, #336]	; (8002eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d115      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e09a      	b.n	8002ea4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d107      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d76:	4b4e      	ldr	r3, [pc, #312]	; (8002eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d109      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e08e      	b.n	8002ea4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d86:	4b4a      	ldr	r3, [pc, #296]	; (8002eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e086      	b.n	8002ea4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d96:	4b46      	ldr	r3, [pc, #280]	; (8002eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f023 0203 	bic.w	r2, r3, #3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	4943      	ldr	r1, [pc, #268]	; (8002eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002da8:	f7fe f820 	bl	8000dec <HAL_GetTick>
 8002dac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dae:	e00a      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db0:	f7fe f81c 	bl	8000dec <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e06e      	b.n	8002ea4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc6:	4b3a      	ldr	r3, [pc, #232]	; (8002eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 020c 	and.w	r2, r3, #12
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d1eb      	bne.n	8002db0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d010      	beq.n	8002e06 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	4b31      	ldr	r3, [pc, #196]	; (8002eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d208      	bcs.n	8002e06 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df4:	4b2e      	ldr	r3, [pc, #184]	; (8002eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	492b      	ldr	r1, [pc, #172]	; (8002eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e06:	4b29      	ldr	r3, [pc, #164]	; (8002eac <HAL_RCC_ClockConfig+0x1ec>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d210      	bcs.n	8002e36 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e14:	4b25      	ldr	r3, [pc, #148]	; (8002eac <HAL_RCC_ClockConfig+0x1ec>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f023 0207 	bic.w	r2, r3, #7
 8002e1c:	4923      	ldr	r1, [pc, #140]	; (8002eac <HAL_RCC_ClockConfig+0x1ec>)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e24:	4b21      	ldr	r3, [pc, #132]	; (8002eac <HAL_RCC_ClockConfig+0x1ec>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d001      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e036      	b.n	8002ea4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d008      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e42:	4b1b      	ldr	r3, [pc, #108]	; (8002eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	4918      	ldr	r1, [pc, #96]	; (8002eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0308 	and.w	r3, r3, #8
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d009      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e60:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	4910      	ldr	r1, [pc, #64]	; (8002eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e74:	f000 f824 	bl	8002ec0 <HAL_RCC_GetSysClockFreq>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	4b0d      	ldr	r3, [pc, #52]	; (8002eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	091b      	lsrs	r3, r3, #4
 8002e80:	f003 030f 	and.w	r3, r3, #15
 8002e84:	490b      	ldr	r1, [pc, #44]	; (8002eb4 <HAL_RCC_ClockConfig+0x1f4>)
 8002e86:	5ccb      	ldrb	r3, [r1, r3]
 8002e88:	f003 031f 	and.w	r3, r3, #31
 8002e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e90:	4a09      	ldr	r2, [pc, #36]	; (8002eb8 <HAL_RCC_ClockConfig+0x1f8>)
 8002e92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e94:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <HAL_RCC_ClockConfig+0x1fc>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fd ff57 	bl	8000d4c <HAL_InitTick>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ea2:	7afb      	ldrb	r3, [r7, #11]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40022000 	.word	0x40022000
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	080057a4 	.word	0x080057a4
 8002eb8:	20000000 	.word	0x20000000
 8002ebc:	20000004 	.word	0x20000004

08002ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b089      	sub	sp, #36	; 0x24
 8002ec4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61fb      	str	r3, [r7, #28]
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ece:	4b3e      	ldr	r3, [pc, #248]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
 8002ed6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ed8:	4b3b      	ldr	r3, [pc, #236]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d005      	beq.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	2b0c      	cmp	r3, #12
 8002eec:	d121      	bne.n	8002f32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d11e      	bne.n	8002f32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ef4:	4b34      	ldr	r3, [pc, #208]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0308 	and.w	r3, r3, #8
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d107      	bne.n	8002f10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f00:	4b31      	ldr	r3, [pc, #196]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f06:	0a1b      	lsrs	r3, r3, #8
 8002f08:	f003 030f 	and.w	r3, r3, #15
 8002f0c:	61fb      	str	r3, [r7, #28]
 8002f0e:	e005      	b.n	8002f1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f10:	4b2d      	ldr	r3, [pc, #180]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	091b      	lsrs	r3, r3, #4
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f1c:	4a2b      	ldr	r2, [pc, #172]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10d      	bne.n	8002f48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f30:	e00a      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d102      	bne.n	8002f3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f38:	4b25      	ldr	r3, [pc, #148]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f3a:	61bb      	str	r3, [r7, #24]
 8002f3c:	e004      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d101      	bne.n	8002f48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f44:	4b23      	ldr	r3, [pc, #140]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	2b0c      	cmp	r3, #12
 8002f4c:	d134      	bne.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f4e:	4b1e      	ldr	r3, [pc, #120]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d003      	beq.n	8002f66 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d003      	beq.n	8002f6c <HAL_RCC_GetSysClockFreq+0xac>
 8002f64:	e005      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f66:	4b1a      	ldr	r3, [pc, #104]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f68:	617b      	str	r3, [r7, #20]
      break;
 8002f6a:	e005      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f6c:	4b19      	ldr	r3, [pc, #100]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f6e:	617b      	str	r3, [r7, #20]
      break;
 8002f70:	e002      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	617b      	str	r3, [r7, #20]
      break;
 8002f76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f78:	4b13      	ldr	r3, [pc, #76]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	091b      	lsrs	r3, r3, #4
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	3301      	adds	r3, #1
 8002f84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f86:	4b10      	ldr	r3, [pc, #64]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	0a1b      	lsrs	r3, r3, #8
 8002f8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	fb03 f202 	mul.w	r2, r3, r2
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f9e:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	0e5b      	lsrs	r3, r3, #25
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	3301      	adds	r3, #1
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fb8:	69bb      	ldr	r3, [r7, #24]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3724      	adds	r7, #36	; 0x24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	080057bc 	.word	0x080057bc
 8002fd0:	00f42400 	.word	0x00f42400
 8002fd4:	007a1200 	.word	0x007a1200

08002fd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fdc:	4b03      	ldr	r3, [pc, #12]	; (8002fec <HAL_RCC_GetHCLKFreq+0x14>)
 8002fde:	681b      	ldr	r3, [r3, #0]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	20000000 	.word	0x20000000

08002ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ff4:	f7ff fff0 	bl	8002fd8 <HAL_RCC_GetHCLKFreq>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	4b06      	ldr	r3, [pc, #24]	; (8003014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	0a1b      	lsrs	r3, r3, #8
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	4904      	ldr	r1, [pc, #16]	; (8003018 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003006:	5ccb      	ldrb	r3, [r1, r3]
 8003008:	f003 031f 	and.w	r3, r3, #31
 800300c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003010:	4618      	mov	r0, r3
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40021000 	.word	0x40021000
 8003018:	080057b4 	.word	0x080057b4

0800301c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003020:	f7ff ffda 	bl	8002fd8 <HAL_RCC_GetHCLKFreq>
 8003024:	4602      	mov	r2, r0
 8003026:	4b06      	ldr	r3, [pc, #24]	; (8003040 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	0adb      	lsrs	r3, r3, #11
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	4904      	ldr	r1, [pc, #16]	; (8003044 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003032:	5ccb      	ldrb	r3, [r1, r3]
 8003034:	f003 031f 	and.w	r3, r3, #31
 8003038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800303c:	4618      	mov	r0, r3
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40021000 	.word	0x40021000
 8003044:	080057b4 	.word	0x080057b4

08003048 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003050:	2300      	movs	r3, #0
 8003052:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003054:	4b2a      	ldr	r3, [pc, #168]	; (8003100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003060:	f7ff f9ee 	bl	8002440 <HAL_PWREx_GetVoltageRange>
 8003064:	6178      	str	r0, [r7, #20]
 8003066:	e014      	b.n	8003092 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003068:	4b25      	ldr	r3, [pc, #148]	; (8003100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800306a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306c:	4a24      	ldr	r2, [pc, #144]	; (8003100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800306e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003072:	6593      	str	r3, [r2, #88]	; 0x58
 8003074:	4b22      	ldr	r3, [pc, #136]	; (8003100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003080:	f7ff f9de 	bl	8002440 <HAL_PWREx_GetVoltageRange>
 8003084:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003086:	4b1e      	ldr	r3, [pc, #120]	; (8003100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308a:	4a1d      	ldr	r2, [pc, #116]	; (8003100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800308c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003090:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003098:	d10b      	bne.n	80030b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b80      	cmp	r3, #128	; 0x80
 800309e:	d919      	bls.n	80030d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2ba0      	cmp	r3, #160	; 0xa0
 80030a4:	d902      	bls.n	80030ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030a6:	2302      	movs	r3, #2
 80030a8:	613b      	str	r3, [r7, #16]
 80030aa:	e013      	b.n	80030d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030ac:	2301      	movs	r3, #1
 80030ae:	613b      	str	r3, [r7, #16]
 80030b0:	e010      	b.n	80030d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b80      	cmp	r3, #128	; 0x80
 80030b6:	d902      	bls.n	80030be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030b8:	2303      	movs	r3, #3
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	e00a      	b.n	80030d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b80      	cmp	r3, #128	; 0x80
 80030c2:	d102      	bne.n	80030ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030c4:	2302      	movs	r3, #2
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	e004      	b.n	80030d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b70      	cmp	r3, #112	; 0x70
 80030ce:	d101      	bne.n	80030d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030d0:	2301      	movs	r3, #1
 80030d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f023 0207 	bic.w	r2, r3, #7
 80030dc:	4909      	ldr	r1, [pc, #36]	; (8003104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030e4:	4b07      	ldr	r3, [pc, #28]	; (8003104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d001      	beq.n	80030f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40021000 	.word	0x40021000
 8003104:	40022000 	.word	0x40022000

08003108 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003110:	2300      	movs	r3, #0
 8003112:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003114:	2300      	movs	r3, #0
 8003116:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003120:	2b00      	cmp	r3, #0
 8003122:	d041      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003128:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800312c:	d02a      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800312e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003132:	d824      	bhi.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003134:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003138:	d008      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800313a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800313e:	d81e      	bhi.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003144:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003148:	d010      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800314a:	e018      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800314c:	4b86      	ldr	r3, [pc, #536]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	4a85      	ldr	r2, [pc, #532]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003156:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003158:	e015      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3304      	adds	r3, #4
 800315e:	2100      	movs	r1, #0
 8003160:	4618      	mov	r0, r3
 8003162:	f000 fabb 	bl	80036dc <RCCEx_PLLSAI1_Config>
 8003166:	4603      	mov	r3, r0
 8003168:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800316a:	e00c      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3320      	adds	r3, #32
 8003170:	2100      	movs	r1, #0
 8003172:	4618      	mov	r0, r3
 8003174:	f000 fba6 	bl	80038c4 <RCCEx_PLLSAI2_Config>
 8003178:	4603      	mov	r3, r0
 800317a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800317c:	e003      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	74fb      	strb	r3, [r7, #19]
      break;
 8003182:	e000      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003184:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003186:	7cfb      	ldrb	r3, [r7, #19]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10b      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800318c:	4b76      	ldr	r3, [pc, #472]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800318e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003192:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800319a:	4973      	ldr	r1, [pc, #460]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800319c:	4313      	orrs	r3, r2
 800319e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031a2:	e001      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a4:	7cfb      	ldrb	r3, [r7, #19]
 80031a6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d041      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031bc:	d02a      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80031be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031c2:	d824      	bhi.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031c8:	d008      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80031ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031ce:	d81e      	bhi.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00a      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80031d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031d8:	d010      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031da:	e018      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031dc:	4b62      	ldr	r3, [pc, #392]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	4a61      	ldr	r2, [pc, #388]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031e8:	e015      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3304      	adds	r3, #4
 80031ee:	2100      	movs	r1, #0
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 fa73 	bl	80036dc <RCCEx_PLLSAI1_Config>
 80031f6:	4603      	mov	r3, r0
 80031f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031fa:	e00c      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3320      	adds	r3, #32
 8003200:	2100      	movs	r1, #0
 8003202:	4618      	mov	r0, r3
 8003204:	f000 fb5e 	bl	80038c4 <RCCEx_PLLSAI2_Config>
 8003208:	4603      	mov	r3, r0
 800320a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800320c:	e003      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	74fb      	strb	r3, [r7, #19]
      break;
 8003212:	e000      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003214:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003216:	7cfb      	ldrb	r3, [r7, #19]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10b      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800321c:	4b52      	ldr	r3, [pc, #328]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003222:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800322a:	494f      	ldr	r1, [pc, #316]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800322c:	4313      	orrs	r3, r2
 800322e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003232:	e001      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003234:	7cfb      	ldrb	r3, [r7, #19]
 8003236:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 80a0 	beq.w	8003386 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003246:	2300      	movs	r3, #0
 8003248:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800324a:	4b47      	ldr	r3, [pc, #284]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800325a:	2300      	movs	r3, #0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00d      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003260:	4b41      	ldr	r3, [pc, #260]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003264:	4a40      	ldr	r2, [pc, #256]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800326a:	6593      	str	r3, [r2, #88]	; 0x58
 800326c:	4b3e      	ldr	r3, [pc, #248]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003278:	2301      	movs	r3, #1
 800327a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800327c:	4b3b      	ldr	r3, [pc, #236]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a3a      	ldr	r2, [pc, #232]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003286:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003288:	f7fd fdb0 	bl	8000dec <HAL_GetTick>
 800328c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800328e:	e009      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003290:	f7fd fdac 	bl	8000dec <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d902      	bls.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	74fb      	strb	r3, [r7, #19]
        break;
 80032a2:	e005      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032a4:	4b31      	ldr	r3, [pc, #196]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0ef      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80032b0:	7cfb      	ldrb	r3, [r7, #19]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d15c      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032b6:	4b2c      	ldr	r3, [pc, #176]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d01f      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d019      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032d4:	4b24      	ldr	r3, [pc, #144]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032e0:	4b21      	ldr	r3, [pc, #132]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e6:	4a20      	ldr	r2, [pc, #128]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032f0:	4b1d      	ldr	r3, [pc, #116]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f6:	4a1c      	ldr	r2, [pc, #112]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003300:	4a19      	ldr	r2, [pc, #100]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d016      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003312:	f7fd fd6b 	bl	8000dec <HAL_GetTick>
 8003316:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003318:	e00b      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331a:	f7fd fd67 	bl	8000dec <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	f241 3288 	movw	r2, #5000	; 0x1388
 8003328:	4293      	cmp	r3, r2
 800332a:	d902      	bls.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	74fb      	strb	r3, [r7, #19]
            break;
 8003330:	e006      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003332:	4b0d      	ldr	r3, [pc, #52]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0ec      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003340:	7cfb      	ldrb	r3, [r7, #19]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10c      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003346:	4b08      	ldr	r3, [pc, #32]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003356:	4904      	ldr	r1, [pc, #16]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003358:	4313      	orrs	r3, r2
 800335a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800335e:	e009      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003360:	7cfb      	ldrb	r3, [r7, #19]
 8003362:	74bb      	strb	r3, [r7, #18]
 8003364:	e006      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003366:	bf00      	nop
 8003368:	40021000 	.word	0x40021000
 800336c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003370:	7cfb      	ldrb	r3, [r7, #19]
 8003372:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003374:	7c7b      	ldrb	r3, [r7, #17]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d105      	bne.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800337a:	4b9e      	ldr	r3, [pc, #632]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337e:	4a9d      	ldr	r2, [pc, #628]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003380:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003384:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003392:	4b98      	ldr	r3, [pc, #608]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003398:	f023 0203 	bic.w	r2, r3, #3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a0:	4994      	ldr	r1, [pc, #592]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00a      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033b4:	4b8f      	ldr	r3, [pc, #572]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ba:	f023 020c 	bic.w	r2, r3, #12
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c2:	498c      	ldr	r1, [pc, #560]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033d6:	4b87      	ldr	r3, [pc, #540]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	4983      	ldr	r1, [pc, #524]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0308 	and.w	r3, r3, #8
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00a      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033f8:	4b7e      	ldr	r3, [pc, #504]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003406:	497b      	ldr	r1, [pc, #492]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003408:	4313      	orrs	r3, r2
 800340a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0310 	and.w	r3, r3, #16
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800341a:	4b76      	ldr	r3, [pc, #472]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003420:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003428:	4972      	ldr	r1, [pc, #456]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342a:	4313      	orrs	r3, r2
 800342c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0320 	and.w	r3, r3, #32
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00a      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800343c:	4b6d      	ldr	r3, [pc, #436]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003442:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344a:	496a      	ldr	r1, [pc, #424]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00a      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800345e:	4b65      	ldr	r3, [pc, #404]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003464:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346c:	4961      	ldr	r1, [pc, #388]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346e:	4313      	orrs	r3, r2
 8003470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00a      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003480:	4b5c      	ldr	r3, [pc, #368]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003486:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800348e:	4959      	ldr	r1, [pc, #356]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034a2:	4b54      	ldr	r3, [pc, #336]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b0:	4950      	ldr	r1, [pc, #320]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034c4:	4b4b      	ldr	r3, [pc, #300]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d2:	4948      	ldr	r1, [pc, #288]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034e6:	4b43      	ldr	r3, [pc, #268]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f4:	493f      	ldr	r1, [pc, #252]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d028      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003508:	4b3a      	ldr	r3, [pc, #232]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003516:	4937      	ldr	r1, [pc, #220]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003522:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003526:	d106      	bne.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003528:	4b32      	ldr	r3, [pc, #200]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	4a31      	ldr	r2, [pc, #196]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003532:	60d3      	str	r3, [r2, #12]
 8003534:	e011      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800353a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800353e:	d10c      	bne.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3304      	adds	r3, #4
 8003544:	2101      	movs	r1, #1
 8003546:	4618      	mov	r0, r3
 8003548:	f000 f8c8 	bl	80036dc <RCCEx_PLLSAI1_Config>
 800354c:	4603      	mov	r3, r0
 800354e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003550:	7cfb      	ldrb	r3, [r7, #19]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003556:	7cfb      	ldrb	r3, [r7, #19]
 8003558:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d028      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003566:	4b23      	ldr	r3, [pc, #140]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003574:	491f      	ldr	r1, [pc, #124]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003580:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003584:	d106      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003586:	4b1b      	ldr	r3, [pc, #108]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	4a1a      	ldr	r2, [pc, #104]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003590:	60d3      	str	r3, [r2, #12]
 8003592:	e011      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003598:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800359c:	d10c      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3304      	adds	r3, #4
 80035a2:	2101      	movs	r1, #1
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 f899 	bl	80036dc <RCCEx_PLLSAI1_Config>
 80035aa:	4603      	mov	r3, r0
 80035ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035ae:	7cfb      	ldrb	r3, [r7, #19]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80035b4:	7cfb      	ldrb	r3, [r7, #19]
 80035b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d02b      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035c4:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d2:	4908      	ldr	r1, [pc, #32]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035e2:	d109      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035e4:	4b03      	ldr	r3, [pc, #12]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	4a02      	ldr	r2, [pc, #8]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ee:	60d3      	str	r3, [r2, #12]
 80035f0:	e014      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80035f2:	bf00      	nop
 80035f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003600:	d10c      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3304      	adds	r3, #4
 8003606:	2101      	movs	r1, #1
 8003608:	4618      	mov	r0, r3
 800360a:	f000 f867 	bl	80036dc <RCCEx_PLLSAI1_Config>
 800360e:	4603      	mov	r3, r0
 8003610:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003612:	7cfb      	ldrb	r3, [r7, #19]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003618:	7cfb      	ldrb	r3, [r7, #19]
 800361a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d02f      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003628:	4b2b      	ldr	r3, [pc, #172]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800362a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003636:	4928      	ldr	r1, [pc, #160]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003638:	4313      	orrs	r3, r2
 800363a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003642:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003646:	d10d      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3304      	adds	r3, #4
 800364c:	2102      	movs	r1, #2
 800364e:	4618      	mov	r0, r3
 8003650:	f000 f844 	bl	80036dc <RCCEx_PLLSAI1_Config>
 8003654:	4603      	mov	r3, r0
 8003656:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003658:	7cfb      	ldrb	r3, [r7, #19]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d014      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800365e:	7cfb      	ldrb	r3, [r7, #19]
 8003660:	74bb      	strb	r3, [r7, #18]
 8003662:	e011      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003668:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800366c:	d10c      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3320      	adds	r3, #32
 8003672:	2102      	movs	r1, #2
 8003674:	4618      	mov	r0, r3
 8003676:	f000 f925 	bl	80038c4 <RCCEx_PLLSAI2_Config>
 800367a:	4603      	mov	r3, r0
 800367c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800367e:	7cfb      	ldrb	r3, [r7, #19]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003684:	7cfb      	ldrb	r3, [r7, #19]
 8003686:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003694:	4b10      	ldr	r3, [pc, #64]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036a2:	490d      	ldr	r1, [pc, #52]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00b      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036b6:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036c6:	4904      	ldr	r1, [pc, #16]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036ce:	7cbb      	ldrb	r3, [r7, #18]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40021000 	.word	0x40021000

080036dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036e6:	2300      	movs	r3, #0
 80036e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036ea:	4b75      	ldr	r3, [pc, #468]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d018      	beq.n	8003728 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036f6:	4b72      	ldr	r3, [pc, #456]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f003 0203 	and.w	r2, r3, #3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d10d      	bne.n	8003722 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
       ||
 800370a:	2b00      	cmp	r3, #0
 800370c:	d009      	beq.n	8003722 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800370e:	4b6c      	ldr	r3, [pc, #432]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	091b      	lsrs	r3, r3, #4
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
       ||
 800371e:	429a      	cmp	r2, r3
 8003720:	d047      	beq.n	80037b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	73fb      	strb	r3, [r7, #15]
 8003726:	e044      	b.n	80037b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b03      	cmp	r3, #3
 800372e:	d018      	beq.n	8003762 <RCCEx_PLLSAI1_Config+0x86>
 8003730:	2b03      	cmp	r3, #3
 8003732:	d825      	bhi.n	8003780 <RCCEx_PLLSAI1_Config+0xa4>
 8003734:	2b01      	cmp	r3, #1
 8003736:	d002      	beq.n	800373e <RCCEx_PLLSAI1_Config+0x62>
 8003738:	2b02      	cmp	r3, #2
 800373a:	d009      	beq.n	8003750 <RCCEx_PLLSAI1_Config+0x74>
 800373c:	e020      	b.n	8003780 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800373e:	4b60      	ldr	r3, [pc, #384]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d11d      	bne.n	8003786 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800374e:	e01a      	b.n	8003786 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003750:	4b5b      	ldr	r3, [pc, #364]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003758:	2b00      	cmp	r3, #0
 800375a:	d116      	bne.n	800378a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003760:	e013      	b.n	800378a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003762:	4b57      	ldr	r3, [pc, #348]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10f      	bne.n	800378e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800376e:	4b54      	ldr	r3, [pc, #336]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d109      	bne.n	800378e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800377e:	e006      	b.n	800378e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	73fb      	strb	r3, [r7, #15]
      break;
 8003784:	e004      	b.n	8003790 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003786:	bf00      	nop
 8003788:	e002      	b.n	8003790 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800378a:	bf00      	nop
 800378c:	e000      	b.n	8003790 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800378e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003790:	7bfb      	ldrb	r3, [r7, #15]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10d      	bne.n	80037b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003796:	4b4a      	ldr	r3, [pc, #296]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6819      	ldr	r1, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	430b      	orrs	r3, r1
 80037ac:	4944      	ldr	r1, [pc, #272]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d17d      	bne.n	80038b4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037b8:	4b41      	ldr	r3, [pc, #260]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a40      	ldr	r2, [pc, #256]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037c4:	f7fd fb12 	bl	8000dec <HAL_GetTick>
 80037c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037ca:	e009      	b.n	80037e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037cc:	f7fd fb0e 	bl	8000dec <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d902      	bls.n	80037e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	73fb      	strb	r3, [r7, #15]
        break;
 80037de:	e005      	b.n	80037ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037e0:	4b37      	ldr	r3, [pc, #220]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1ef      	bne.n	80037cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d160      	bne.n	80038b4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d111      	bne.n	800381c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037f8:	4b31      	ldr	r3, [pc, #196]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6892      	ldr	r2, [r2, #8]
 8003808:	0211      	lsls	r1, r2, #8
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	68d2      	ldr	r2, [r2, #12]
 800380e:	0912      	lsrs	r2, r2, #4
 8003810:	0452      	lsls	r2, r2, #17
 8003812:	430a      	orrs	r2, r1
 8003814:	492a      	ldr	r1, [pc, #168]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003816:	4313      	orrs	r3, r2
 8003818:	610b      	str	r3, [r1, #16]
 800381a:	e027      	b.n	800386c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d112      	bne.n	8003848 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003822:	4b27      	ldr	r3, [pc, #156]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800382a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6892      	ldr	r2, [r2, #8]
 8003832:	0211      	lsls	r1, r2, #8
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6912      	ldr	r2, [r2, #16]
 8003838:	0852      	lsrs	r2, r2, #1
 800383a:	3a01      	subs	r2, #1
 800383c:	0552      	lsls	r2, r2, #21
 800383e:	430a      	orrs	r2, r1
 8003840:	491f      	ldr	r1, [pc, #124]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003842:	4313      	orrs	r3, r2
 8003844:	610b      	str	r3, [r1, #16]
 8003846:	e011      	b.n	800386c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003848:	4b1d      	ldr	r3, [pc, #116]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003850:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6892      	ldr	r2, [r2, #8]
 8003858:	0211      	lsls	r1, r2, #8
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6952      	ldr	r2, [r2, #20]
 800385e:	0852      	lsrs	r2, r2, #1
 8003860:	3a01      	subs	r2, #1
 8003862:	0652      	lsls	r2, r2, #25
 8003864:	430a      	orrs	r2, r1
 8003866:	4916      	ldr	r1, [pc, #88]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003868:	4313      	orrs	r3, r2
 800386a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800386c:	4b14      	ldr	r3, [pc, #80]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a13      	ldr	r2, [pc, #76]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003872:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003876:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003878:	f7fd fab8 	bl	8000dec <HAL_GetTick>
 800387c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800387e:	e009      	b.n	8003894 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003880:	f7fd fab4 	bl	8000dec <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d902      	bls.n	8003894 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	73fb      	strb	r3, [r7, #15]
          break;
 8003892:	e005      	b.n	80038a0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003894:	4b0a      	ldr	r3, [pc, #40]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0ef      	beq.n	8003880 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d106      	bne.n	80038b4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038a6:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a8:	691a      	ldr	r2, [r3, #16]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	4904      	ldr	r1, [pc, #16]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40021000 	.word	0x40021000

080038c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038d2:	4b6a      	ldr	r3, [pc, #424]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d018      	beq.n	8003910 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80038de:	4b67      	ldr	r3, [pc, #412]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f003 0203 	and.w	r2, r3, #3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d10d      	bne.n	800390a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
       ||
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d009      	beq.n	800390a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80038f6:	4b61      	ldr	r3, [pc, #388]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	091b      	lsrs	r3, r3, #4
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
       ||
 8003906:	429a      	cmp	r2, r3
 8003908:	d047      	beq.n	800399a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	73fb      	strb	r3, [r7, #15]
 800390e:	e044      	b.n	800399a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b03      	cmp	r3, #3
 8003916:	d018      	beq.n	800394a <RCCEx_PLLSAI2_Config+0x86>
 8003918:	2b03      	cmp	r3, #3
 800391a:	d825      	bhi.n	8003968 <RCCEx_PLLSAI2_Config+0xa4>
 800391c:	2b01      	cmp	r3, #1
 800391e:	d002      	beq.n	8003926 <RCCEx_PLLSAI2_Config+0x62>
 8003920:	2b02      	cmp	r3, #2
 8003922:	d009      	beq.n	8003938 <RCCEx_PLLSAI2_Config+0x74>
 8003924:	e020      	b.n	8003968 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003926:	4b55      	ldr	r3, [pc, #340]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d11d      	bne.n	800396e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003936:	e01a      	b.n	800396e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003938:	4b50      	ldr	r3, [pc, #320]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003940:	2b00      	cmp	r3, #0
 8003942:	d116      	bne.n	8003972 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003948:	e013      	b.n	8003972 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800394a:	4b4c      	ldr	r3, [pc, #304]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10f      	bne.n	8003976 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003956:	4b49      	ldr	r3, [pc, #292]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d109      	bne.n	8003976 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003966:	e006      	b.n	8003976 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	73fb      	strb	r3, [r7, #15]
      break;
 800396c:	e004      	b.n	8003978 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800396e:	bf00      	nop
 8003970:	e002      	b.n	8003978 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003972:	bf00      	nop
 8003974:	e000      	b.n	8003978 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003976:	bf00      	nop
    }

    if(status == HAL_OK)
 8003978:	7bfb      	ldrb	r3, [r7, #15]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10d      	bne.n	800399a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800397e:	4b3f      	ldr	r3, [pc, #252]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6819      	ldr	r1, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	3b01      	subs	r3, #1
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	430b      	orrs	r3, r1
 8003994:	4939      	ldr	r1, [pc, #228]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003996:	4313      	orrs	r3, r2
 8003998:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800399a:	7bfb      	ldrb	r3, [r7, #15]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d167      	bne.n	8003a70 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80039a0:	4b36      	ldr	r3, [pc, #216]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a35      	ldr	r2, [pc, #212]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ac:	f7fd fa1e 	bl	8000dec <HAL_GetTick>
 80039b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039b2:	e009      	b.n	80039c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039b4:	f7fd fa1a 	bl	8000dec <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d902      	bls.n	80039c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	73fb      	strb	r3, [r7, #15]
        break;
 80039c6:	e005      	b.n	80039d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039c8:	4b2c      	ldr	r3, [pc, #176]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1ef      	bne.n	80039b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d14a      	bne.n	8003a70 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d111      	bne.n	8003a04 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039e0:	4b26      	ldr	r3, [pc, #152]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80039e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6892      	ldr	r2, [r2, #8]
 80039f0:	0211      	lsls	r1, r2, #8
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	68d2      	ldr	r2, [r2, #12]
 80039f6:	0912      	lsrs	r2, r2, #4
 80039f8:	0452      	lsls	r2, r2, #17
 80039fa:	430a      	orrs	r2, r1
 80039fc:	491f      	ldr	r1, [pc, #124]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	614b      	str	r3, [r1, #20]
 8003a02:	e011      	b.n	8003a28 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a04:	4b1d      	ldr	r3, [pc, #116]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6892      	ldr	r2, [r2, #8]
 8003a14:	0211      	lsls	r1, r2, #8
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6912      	ldr	r2, [r2, #16]
 8003a1a:	0852      	lsrs	r2, r2, #1
 8003a1c:	3a01      	subs	r2, #1
 8003a1e:	0652      	lsls	r2, r2, #25
 8003a20:	430a      	orrs	r2, r1
 8003a22:	4916      	ldr	r1, [pc, #88]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a28:	4b14      	ldr	r3, [pc, #80]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a13      	ldr	r2, [pc, #76]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a34:	f7fd f9da 	bl	8000dec <HAL_GetTick>
 8003a38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a3a:	e009      	b.n	8003a50 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a3c:	f7fd f9d6 	bl	8000dec <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d902      	bls.n	8003a50 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	73fb      	strb	r3, [r7, #15]
          break;
 8003a4e:	e005      	b.n	8003a5c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a50:	4b0a      	ldr	r3, [pc, #40]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0ef      	beq.n	8003a3c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a62:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a64:	695a      	ldr	r2, [r3, #20]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	4904      	ldr	r1, [pc, #16]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40021000 	.word	0x40021000

08003a80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e040      	b.n	8003b14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d106      	bne.n	8003aa8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7fc ff90 	bl	80009c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2224      	movs	r2, #36	; 0x24
 8003aac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0201 	bic.w	r2, r2, #1
 8003abc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fc18 	bl	80042f4 <UART_SetConfig>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d101      	bne.n	8003ace <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e022      	b.n	8003b14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 fec4 	bl	8004864 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003afa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 ff4b 	bl	80049a8 <UART_CheckIdleState>
 8003b12:	4603      	mov	r3, r0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e048      	b.n	8003bc0 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d106      	bne.n	8003b44 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7fc ff42 	bl	80009c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2224      	movs	r2, #36	; 0x24
 8003b48:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0201 	bic.w	r2, r2, #1
 8003b58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 fbca 	bl	80042f4 <UART_SetConfig>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e02a      	b.n	8003bc0 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 fe76 	bl	8004864 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003b96:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0208 	orr.w	r2, r2, #8
 8003ba6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0201 	orr.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 fef5 	bl	80049a8 <UART_CheckIdleState>
 8003bbe:	4603      	mov	r3, r0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08a      	sub	sp, #40	; 0x28
 8003bcc:	af02      	add	r7, sp, #8
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	603b      	str	r3, [r7, #0]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	f040 8082 	bne.w	8003ce6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <HAL_UART_Transmit+0x26>
 8003be8:	88fb      	ldrh	r3, [r7, #6]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e07a      	b.n	8003ce8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_UART_Transmit+0x38>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e073      	b.n	8003ce8 <HAL_UART_Transmit+0x120>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2221      	movs	r2, #33	; 0x21
 8003c14:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c16:	f7fd f8e9 	bl	8000dec <HAL_GetTick>
 8003c1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	88fa      	ldrh	r2, [r7, #6]
 8003c20:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	88fa      	ldrh	r2, [r7, #6]
 8003c28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c34:	d108      	bne.n	8003c48 <HAL_UART_Transmit+0x80>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d104      	bne.n	8003c48 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	61bb      	str	r3, [r7, #24]
 8003c46:	e003      	b.n	8003c50 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003c58:	e02d      	b.n	8003cb6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	2200      	movs	r2, #0
 8003c62:	2180      	movs	r1, #128	; 0x80
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 fee8 	bl	8004a3a <UART_WaitOnFlagUntilTimeout>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e039      	b.n	8003ce8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10b      	bne.n	8003c92 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	881a      	ldrh	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c86:	b292      	uxth	r2, r2
 8003c88:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	3302      	adds	r3, #2
 8003c8e:	61bb      	str	r3, [r7, #24]
 8003c90:	e008      	b.n	8003ca4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	781a      	ldrb	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	b292      	uxth	r2, r2
 8003c9c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1cb      	bne.n	8003c5a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	2140      	movs	r1, #64	; 0x40
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 feb4 	bl	8004a3a <UART_WaitOnFlagUntilTimeout>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e005      	b.n	8003ce8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	e000      	b.n	8003ce8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003ce6:	2302      	movs	r3, #2
  }
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3720      	adds	r7, #32
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b0ba      	sub	sp, #232	; 0xe8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003d16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003d1a:	f640 030f 	movw	r3, #2063	; 0x80f
 8003d1e:	4013      	ands	r3, r2
 8003d20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003d24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d115      	bne.n	8003d58 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d30:	f003 0320 	and.w	r3, r3, #32
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00f      	beq.n	8003d58 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d3c:	f003 0320 	and.w	r3, r3, #32
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d009      	beq.n	8003d58 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 82a6 	beq.w	800429a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	4798      	blx	r3
      }
      return;
 8003d56:	e2a0      	b.n	800429a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003d58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 8117 	beq.w	8003f90 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d106      	bne.n	8003d7c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003d6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003d72:	4b85      	ldr	r3, [pc, #532]	; (8003f88 <HAL_UART_IRQHandler+0x298>)
 8003d74:	4013      	ands	r3, r2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 810a 	beq.w	8003f90 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d011      	beq.n	8003dac <HAL_UART_IRQHandler+0xbc>
 8003d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00b      	beq.n	8003dac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003da2:	f043 0201 	orr.w	r2, r3, #1
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d011      	beq.n	8003ddc <HAL_UART_IRQHandler+0xec>
 8003db8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00b      	beq.n	8003ddc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2202      	movs	r2, #2
 8003dca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dd2:	f043 0204 	orr.w	r2, r3, #4
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d011      	beq.n	8003e0c <HAL_UART_IRQHandler+0x11c>
 8003de8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00b      	beq.n	8003e0c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2204      	movs	r2, #4
 8003dfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e02:	f043 0202 	orr.w	r2, r3, #2
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d017      	beq.n	8003e48 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e1c:	f003 0320 	and.w	r3, r3, #32
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d105      	bne.n	8003e30 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003e24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e28:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00b      	beq.n	8003e48 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2208      	movs	r2, #8
 8003e36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e3e:	f043 0208 	orr.w	r2, r3, #8
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d012      	beq.n	8003e7a <HAL_UART_IRQHandler+0x18a>
 8003e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00c      	beq.n	8003e7a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e70:	f043 0220 	orr.w	r2, r3, #32
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 820c 	beq.w	800429e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e8a:	f003 0320 	and.w	r3, r3, #32
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00d      	beq.n	8003eae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e96:	f003 0320 	and.w	r3, r3, #32
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d007      	beq.n	8003eae <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec2:	2b40      	cmp	r3, #64	; 0x40
 8003ec4:	d005      	beq.n	8003ed2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ec6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003eca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d04f      	beq.n	8003f72 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 fe75 	bl	8004bc2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee2:	2b40      	cmp	r3, #64	; 0x40
 8003ee4:	d141      	bne.n	8003f6a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3308      	adds	r3, #8
 8003eec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ef4:	e853 3f00 	ldrex	r3, [r3]
 8003ef8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003efc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3308      	adds	r3, #8
 8003f0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1d9      	bne.n	8003ee6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d013      	beq.n	8003f62 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3e:	4a13      	ldr	r2, [pc, #76]	; (8003f8c <HAL_UART_IRQHandler+0x29c>)
 8003f40:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fe f877 	bl	800203a <HAL_DMA_Abort_IT>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d017      	beq.n	8003f82 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f60:	e00f      	b.n	8003f82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f9b0 	bl	80042c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f68:	e00b      	b.n	8003f82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f9ac 	bl	80042c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f70:	e007      	b.n	8003f82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f9a8 	bl	80042c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003f80:	e18d      	b.n	800429e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f82:	bf00      	nop
    return;
 8003f84:	e18b      	b.n	800429e <HAL_UART_IRQHandler+0x5ae>
 8003f86:	bf00      	nop
 8003f88:	04000120 	.word	0x04000120
 8003f8c:	08004c89 	.word	0x08004c89

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	f040 8146 	bne.w	8004226 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f9e:	f003 0310 	and.w	r3, r3, #16
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 813f 	beq.w	8004226 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fac:	f003 0310 	and.w	r3, r3, #16
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 8138 	beq.w	8004226 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2210      	movs	r2, #16
 8003fbc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc8:	2b40      	cmp	r3, #64	; 0x40
 8003fca:	f040 80b4 	bne.w	8004136 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fda:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 815f 	beq.w	80042a2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003fea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	f080 8157 	bcs.w	80042a2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ffa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0320 	and.w	r3, r3, #32
 800400a:	2b00      	cmp	r3, #0
 800400c:	f040 8085 	bne.w	800411a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004018:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800401c:	e853 3f00 	ldrex	r3, [r3]
 8004020:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004024:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800402c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	461a      	mov	r2, r3
 8004036:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800403a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800403e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004042:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004046:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800404a:	e841 2300 	strex	r3, r2, [r1]
 800404e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004052:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1da      	bne.n	8004010 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3308      	adds	r3, #8
 8004060:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004064:	e853 3f00 	ldrex	r3, [r3]
 8004068:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800406a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800406c:	f023 0301 	bic.w	r3, r3, #1
 8004070:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3308      	adds	r3, #8
 800407a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800407e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004082:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004084:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004086:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800408a:	e841 2300 	strex	r3, r2, [r1]
 800408e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1e1      	bne.n	800405a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3308      	adds	r3, #8
 800409c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040a0:	e853 3f00 	ldrex	r3, [r3]
 80040a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80040a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	3308      	adds	r3, #8
 80040b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040c2:	e841 2300 	strex	r3, r2, [r1]
 80040c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80040c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1e3      	bne.n	8004096 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2220      	movs	r2, #32
 80040d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e2:	e853 3f00 	ldrex	r3, [r3]
 80040e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040ea:	f023 0310 	bic.w	r3, r3, #16
 80040ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80040fe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004100:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004102:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004104:	e841 2300 	strex	r3, r2, [r1]
 8004108:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800410a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1e4      	bne.n	80040da <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004114:	4618      	mov	r0, r3
 8004116:	f7fd ff52 	bl	8001fbe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004126:	b29b      	uxth	r3, r3
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	b29b      	uxth	r3, r3
 800412c:	4619      	mov	r1, r3
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f8d4 	bl	80042dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004134:	e0b5      	b.n	80042a2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004142:	b29b      	uxth	r3, r3
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 80a7 	beq.w	80042a6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004158:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 80a2 	beq.w	80042a6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416a:	e853 3f00 	ldrex	r3, [r3]
 800416e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004172:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004176:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	461a      	mov	r2, r3
 8004180:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004184:	647b      	str	r3, [r7, #68]	; 0x44
 8004186:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004188:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800418a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800418c:	e841 2300 	strex	r3, r2, [r1]
 8004190:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1e4      	bne.n	8004162 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3308      	adds	r3, #8
 800419e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	e853 3f00 	ldrex	r3, [r3]
 80041a6:	623b      	str	r3, [r7, #32]
   return(result);
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	f023 0301 	bic.w	r3, r3, #1
 80041ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3308      	adds	r3, #8
 80041b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041bc:	633a      	str	r2, [r7, #48]	; 0x30
 80041be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041c4:	e841 2300 	strex	r3, r2, [r1]
 80041c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1e3      	bne.n	8004198 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2220      	movs	r2, #32
 80041d4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	e853 3f00 	ldrex	r3, [r3]
 80041ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0310 	bic.w	r3, r3, #16
 80041f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	461a      	mov	r2, r3
 8004200:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004204:	61fb      	str	r3, [r7, #28]
 8004206:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004208:	69b9      	ldr	r1, [r7, #24]
 800420a:	69fa      	ldr	r2, [r7, #28]
 800420c:	e841 2300 	strex	r3, r2, [r1]
 8004210:	617b      	str	r3, [r7, #20]
   return(result);
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1e4      	bne.n	80041e2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004218:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800421c:	4619      	mov	r1, r3
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f85c 	bl	80042dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004224:	e03f      	b.n	80042a6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800422a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00e      	beq.n	8004250 <HAL_UART_IRQHandler+0x560>
 8004232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d008      	beq.n	8004250 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004246:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 fd5d 	bl	8004d08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800424e:	e02d      	b.n	80042ac <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00e      	beq.n	800427a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800425c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004264:	2b00      	cmp	r3, #0
 8004266:	d008      	beq.n	800427a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800426c:	2b00      	cmp	r3, #0
 800426e:	d01c      	beq.n	80042aa <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	4798      	blx	r3
    }
    return;
 8004278:	e017      	b.n	80042aa <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800427a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800427e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004282:	2b00      	cmp	r3, #0
 8004284:	d012      	beq.n	80042ac <HAL_UART_IRQHandler+0x5bc>
 8004286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800428a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00c      	beq.n	80042ac <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 fd0e 	bl	8004cb4 <UART_EndTransmit_IT>
    return;
 8004298:	e008      	b.n	80042ac <HAL_UART_IRQHandler+0x5bc>
      return;
 800429a:	bf00      	nop
 800429c:	e006      	b.n	80042ac <HAL_UART_IRQHandler+0x5bc>
    return;
 800429e:	bf00      	nop
 80042a0:	e004      	b.n	80042ac <HAL_UART_IRQHandler+0x5bc>
      return;
 80042a2:	bf00      	nop
 80042a4:	e002      	b.n	80042ac <HAL_UART_IRQHandler+0x5bc>
      return;
 80042a6:	bf00      	nop
 80042a8:	e000      	b.n	80042ac <HAL_UART_IRQHandler+0x5bc>
    return;
 80042aa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80042ac:	37e8      	adds	r7, #232	; 0xe8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop

080042b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042f8:	b08a      	sub	sp, #40	; 0x28
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	431a      	orrs	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	431a      	orrs	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	4313      	orrs	r3, r2
 800431a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	4ba4      	ldr	r3, [pc, #656]	; (80045b4 <UART_SetConfig+0x2c0>)
 8004324:	4013      	ands	r3, r2
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	6812      	ldr	r2, [r2, #0]
 800432a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800432c:	430b      	orrs	r3, r1
 800432e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a99      	ldr	r2, [pc, #612]	; (80045b8 <UART_SetConfig+0x2c4>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d004      	beq.n	8004360 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800435c:	4313      	orrs	r3, r2
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004370:	430a      	orrs	r2, r1
 8004372:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a90      	ldr	r2, [pc, #576]	; (80045bc <UART_SetConfig+0x2c8>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d126      	bne.n	80043cc <UART_SetConfig+0xd8>
 800437e:	4b90      	ldr	r3, [pc, #576]	; (80045c0 <UART_SetConfig+0x2cc>)
 8004380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004384:	f003 0303 	and.w	r3, r3, #3
 8004388:	2b03      	cmp	r3, #3
 800438a:	d81b      	bhi.n	80043c4 <UART_SetConfig+0xd0>
 800438c:	a201      	add	r2, pc, #4	; (adr r2, 8004394 <UART_SetConfig+0xa0>)
 800438e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004392:	bf00      	nop
 8004394:	080043a5 	.word	0x080043a5
 8004398:	080043b5 	.word	0x080043b5
 800439c:	080043ad 	.word	0x080043ad
 80043a0:	080043bd 	.word	0x080043bd
 80043a4:	2301      	movs	r3, #1
 80043a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043aa:	e116      	b.n	80045da <UART_SetConfig+0x2e6>
 80043ac:	2302      	movs	r3, #2
 80043ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043b2:	e112      	b.n	80045da <UART_SetConfig+0x2e6>
 80043b4:	2304      	movs	r3, #4
 80043b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ba:	e10e      	b.n	80045da <UART_SetConfig+0x2e6>
 80043bc:	2308      	movs	r3, #8
 80043be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043c2:	e10a      	b.n	80045da <UART_SetConfig+0x2e6>
 80043c4:	2310      	movs	r3, #16
 80043c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ca:	e106      	b.n	80045da <UART_SetConfig+0x2e6>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a7c      	ldr	r2, [pc, #496]	; (80045c4 <UART_SetConfig+0x2d0>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d138      	bne.n	8004448 <UART_SetConfig+0x154>
 80043d6:	4b7a      	ldr	r3, [pc, #488]	; (80045c0 <UART_SetConfig+0x2cc>)
 80043d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043dc:	f003 030c 	and.w	r3, r3, #12
 80043e0:	2b0c      	cmp	r3, #12
 80043e2:	d82d      	bhi.n	8004440 <UART_SetConfig+0x14c>
 80043e4:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <UART_SetConfig+0xf8>)
 80043e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ea:	bf00      	nop
 80043ec:	08004421 	.word	0x08004421
 80043f0:	08004441 	.word	0x08004441
 80043f4:	08004441 	.word	0x08004441
 80043f8:	08004441 	.word	0x08004441
 80043fc:	08004431 	.word	0x08004431
 8004400:	08004441 	.word	0x08004441
 8004404:	08004441 	.word	0x08004441
 8004408:	08004441 	.word	0x08004441
 800440c:	08004429 	.word	0x08004429
 8004410:	08004441 	.word	0x08004441
 8004414:	08004441 	.word	0x08004441
 8004418:	08004441 	.word	0x08004441
 800441c:	08004439 	.word	0x08004439
 8004420:	2300      	movs	r3, #0
 8004422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004426:	e0d8      	b.n	80045da <UART_SetConfig+0x2e6>
 8004428:	2302      	movs	r3, #2
 800442a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800442e:	e0d4      	b.n	80045da <UART_SetConfig+0x2e6>
 8004430:	2304      	movs	r3, #4
 8004432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004436:	e0d0      	b.n	80045da <UART_SetConfig+0x2e6>
 8004438:	2308      	movs	r3, #8
 800443a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800443e:	e0cc      	b.n	80045da <UART_SetConfig+0x2e6>
 8004440:	2310      	movs	r3, #16
 8004442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004446:	e0c8      	b.n	80045da <UART_SetConfig+0x2e6>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a5e      	ldr	r2, [pc, #376]	; (80045c8 <UART_SetConfig+0x2d4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d125      	bne.n	800449e <UART_SetConfig+0x1aa>
 8004452:	4b5b      	ldr	r3, [pc, #364]	; (80045c0 <UART_SetConfig+0x2cc>)
 8004454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004458:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800445c:	2b30      	cmp	r3, #48	; 0x30
 800445e:	d016      	beq.n	800448e <UART_SetConfig+0x19a>
 8004460:	2b30      	cmp	r3, #48	; 0x30
 8004462:	d818      	bhi.n	8004496 <UART_SetConfig+0x1a2>
 8004464:	2b20      	cmp	r3, #32
 8004466:	d00a      	beq.n	800447e <UART_SetConfig+0x18a>
 8004468:	2b20      	cmp	r3, #32
 800446a:	d814      	bhi.n	8004496 <UART_SetConfig+0x1a2>
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <UART_SetConfig+0x182>
 8004470:	2b10      	cmp	r3, #16
 8004472:	d008      	beq.n	8004486 <UART_SetConfig+0x192>
 8004474:	e00f      	b.n	8004496 <UART_SetConfig+0x1a2>
 8004476:	2300      	movs	r3, #0
 8004478:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800447c:	e0ad      	b.n	80045da <UART_SetConfig+0x2e6>
 800447e:	2302      	movs	r3, #2
 8004480:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004484:	e0a9      	b.n	80045da <UART_SetConfig+0x2e6>
 8004486:	2304      	movs	r3, #4
 8004488:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800448c:	e0a5      	b.n	80045da <UART_SetConfig+0x2e6>
 800448e:	2308      	movs	r3, #8
 8004490:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004494:	e0a1      	b.n	80045da <UART_SetConfig+0x2e6>
 8004496:	2310      	movs	r3, #16
 8004498:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800449c:	e09d      	b.n	80045da <UART_SetConfig+0x2e6>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a4a      	ldr	r2, [pc, #296]	; (80045cc <UART_SetConfig+0x2d8>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d125      	bne.n	80044f4 <UART_SetConfig+0x200>
 80044a8:	4b45      	ldr	r3, [pc, #276]	; (80045c0 <UART_SetConfig+0x2cc>)
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80044b2:	2bc0      	cmp	r3, #192	; 0xc0
 80044b4:	d016      	beq.n	80044e4 <UART_SetConfig+0x1f0>
 80044b6:	2bc0      	cmp	r3, #192	; 0xc0
 80044b8:	d818      	bhi.n	80044ec <UART_SetConfig+0x1f8>
 80044ba:	2b80      	cmp	r3, #128	; 0x80
 80044bc:	d00a      	beq.n	80044d4 <UART_SetConfig+0x1e0>
 80044be:	2b80      	cmp	r3, #128	; 0x80
 80044c0:	d814      	bhi.n	80044ec <UART_SetConfig+0x1f8>
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <UART_SetConfig+0x1d8>
 80044c6:	2b40      	cmp	r3, #64	; 0x40
 80044c8:	d008      	beq.n	80044dc <UART_SetConfig+0x1e8>
 80044ca:	e00f      	b.n	80044ec <UART_SetConfig+0x1f8>
 80044cc:	2300      	movs	r3, #0
 80044ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044d2:	e082      	b.n	80045da <UART_SetConfig+0x2e6>
 80044d4:	2302      	movs	r3, #2
 80044d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044da:	e07e      	b.n	80045da <UART_SetConfig+0x2e6>
 80044dc:	2304      	movs	r3, #4
 80044de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044e2:	e07a      	b.n	80045da <UART_SetConfig+0x2e6>
 80044e4:	2308      	movs	r3, #8
 80044e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ea:	e076      	b.n	80045da <UART_SetConfig+0x2e6>
 80044ec:	2310      	movs	r3, #16
 80044ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044f2:	e072      	b.n	80045da <UART_SetConfig+0x2e6>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a35      	ldr	r2, [pc, #212]	; (80045d0 <UART_SetConfig+0x2dc>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d12a      	bne.n	8004554 <UART_SetConfig+0x260>
 80044fe:	4b30      	ldr	r3, [pc, #192]	; (80045c0 <UART_SetConfig+0x2cc>)
 8004500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004504:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004508:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800450c:	d01a      	beq.n	8004544 <UART_SetConfig+0x250>
 800450e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004512:	d81b      	bhi.n	800454c <UART_SetConfig+0x258>
 8004514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004518:	d00c      	beq.n	8004534 <UART_SetConfig+0x240>
 800451a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800451e:	d815      	bhi.n	800454c <UART_SetConfig+0x258>
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <UART_SetConfig+0x238>
 8004524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004528:	d008      	beq.n	800453c <UART_SetConfig+0x248>
 800452a:	e00f      	b.n	800454c <UART_SetConfig+0x258>
 800452c:	2300      	movs	r3, #0
 800452e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004532:	e052      	b.n	80045da <UART_SetConfig+0x2e6>
 8004534:	2302      	movs	r3, #2
 8004536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800453a:	e04e      	b.n	80045da <UART_SetConfig+0x2e6>
 800453c:	2304      	movs	r3, #4
 800453e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004542:	e04a      	b.n	80045da <UART_SetConfig+0x2e6>
 8004544:	2308      	movs	r3, #8
 8004546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800454a:	e046      	b.n	80045da <UART_SetConfig+0x2e6>
 800454c:	2310      	movs	r3, #16
 800454e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004552:	e042      	b.n	80045da <UART_SetConfig+0x2e6>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a17      	ldr	r2, [pc, #92]	; (80045b8 <UART_SetConfig+0x2c4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d13a      	bne.n	80045d4 <UART_SetConfig+0x2e0>
 800455e:	4b18      	ldr	r3, [pc, #96]	; (80045c0 <UART_SetConfig+0x2cc>)
 8004560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004564:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004568:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800456c:	d01a      	beq.n	80045a4 <UART_SetConfig+0x2b0>
 800456e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004572:	d81b      	bhi.n	80045ac <UART_SetConfig+0x2b8>
 8004574:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004578:	d00c      	beq.n	8004594 <UART_SetConfig+0x2a0>
 800457a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800457e:	d815      	bhi.n	80045ac <UART_SetConfig+0x2b8>
 8004580:	2b00      	cmp	r3, #0
 8004582:	d003      	beq.n	800458c <UART_SetConfig+0x298>
 8004584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004588:	d008      	beq.n	800459c <UART_SetConfig+0x2a8>
 800458a:	e00f      	b.n	80045ac <UART_SetConfig+0x2b8>
 800458c:	2300      	movs	r3, #0
 800458e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004592:	e022      	b.n	80045da <UART_SetConfig+0x2e6>
 8004594:	2302      	movs	r3, #2
 8004596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800459a:	e01e      	b.n	80045da <UART_SetConfig+0x2e6>
 800459c:	2304      	movs	r3, #4
 800459e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045a2:	e01a      	b.n	80045da <UART_SetConfig+0x2e6>
 80045a4:	2308      	movs	r3, #8
 80045a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045aa:	e016      	b.n	80045da <UART_SetConfig+0x2e6>
 80045ac:	2310      	movs	r3, #16
 80045ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045b2:	e012      	b.n	80045da <UART_SetConfig+0x2e6>
 80045b4:	efff69f3 	.word	0xefff69f3
 80045b8:	40008000 	.word	0x40008000
 80045bc:	40013800 	.word	0x40013800
 80045c0:	40021000 	.word	0x40021000
 80045c4:	40004400 	.word	0x40004400
 80045c8:	40004800 	.word	0x40004800
 80045cc:	40004c00 	.word	0x40004c00
 80045d0:	40005000 	.word	0x40005000
 80045d4:	2310      	movs	r3, #16
 80045d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a9f      	ldr	r2, [pc, #636]	; (800485c <UART_SetConfig+0x568>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d17a      	bne.n	80046da <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	d824      	bhi.n	8004636 <UART_SetConfig+0x342>
 80045ec:	a201      	add	r2, pc, #4	; (adr r2, 80045f4 <UART_SetConfig+0x300>)
 80045ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f2:	bf00      	nop
 80045f4:	08004619 	.word	0x08004619
 80045f8:	08004637 	.word	0x08004637
 80045fc:	08004621 	.word	0x08004621
 8004600:	08004637 	.word	0x08004637
 8004604:	08004627 	.word	0x08004627
 8004608:	08004637 	.word	0x08004637
 800460c:	08004637 	.word	0x08004637
 8004610:	08004637 	.word	0x08004637
 8004614:	0800462f 	.word	0x0800462f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004618:	f7fe fcea 	bl	8002ff0 <HAL_RCC_GetPCLK1Freq>
 800461c:	61f8      	str	r0, [r7, #28]
        break;
 800461e:	e010      	b.n	8004642 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004620:	4b8f      	ldr	r3, [pc, #572]	; (8004860 <UART_SetConfig+0x56c>)
 8004622:	61fb      	str	r3, [r7, #28]
        break;
 8004624:	e00d      	b.n	8004642 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004626:	f7fe fc4b 	bl	8002ec0 <HAL_RCC_GetSysClockFreq>
 800462a:	61f8      	str	r0, [r7, #28]
        break;
 800462c:	e009      	b.n	8004642 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800462e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004632:	61fb      	str	r3, [r7, #28]
        break;
 8004634:	e005      	b.n	8004642 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004636:	2300      	movs	r3, #0
 8004638:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004640:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 80fb 	beq.w	8004840 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	4613      	mov	r3, r2
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	4413      	add	r3, r2
 8004654:	69fa      	ldr	r2, [r7, #28]
 8004656:	429a      	cmp	r2, r3
 8004658:	d305      	bcc.n	8004666 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004660:	69fa      	ldr	r2, [r7, #28]
 8004662:	429a      	cmp	r2, r3
 8004664:	d903      	bls.n	800466e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800466c:	e0e8      	b.n	8004840 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	2200      	movs	r2, #0
 8004672:	461c      	mov	r4, r3
 8004674:	4615      	mov	r5, r2
 8004676:	f04f 0200 	mov.w	r2, #0
 800467a:	f04f 0300 	mov.w	r3, #0
 800467e:	022b      	lsls	r3, r5, #8
 8004680:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004684:	0222      	lsls	r2, r4, #8
 8004686:	68f9      	ldr	r1, [r7, #12]
 8004688:	6849      	ldr	r1, [r1, #4]
 800468a:	0849      	lsrs	r1, r1, #1
 800468c:	2000      	movs	r0, #0
 800468e:	4688      	mov	r8, r1
 8004690:	4681      	mov	r9, r0
 8004692:	eb12 0a08 	adds.w	sl, r2, r8
 8004696:	eb43 0b09 	adc.w	fp, r3, r9
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	603b      	str	r3, [r7, #0]
 80046a2:	607a      	str	r2, [r7, #4]
 80046a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046a8:	4650      	mov	r0, sl
 80046aa:	4659      	mov	r1, fp
 80046ac:	f7fb fd8c 	bl	80001c8 <__aeabi_uldivmod>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4613      	mov	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046be:	d308      	bcc.n	80046d2 <UART_SetConfig+0x3de>
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046c6:	d204      	bcs.n	80046d2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	60da      	str	r2, [r3, #12]
 80046d0:	e0b6      	b.n	8004840 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046d8:	e0b2      	b.n	8004840 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046e2:	d15e      	bne.n	80047a2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80046e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d828      	bhi.n	800473e <UART_SetConfig+0x44a>
 80046ec:	a201      	add	r2, pc, #4	; (adr r2, 80046f4 <UART_SetConfig+0x400>)
 80046ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f2:	bf00      	nop
 80046f4:	08004719 	.word	0x08004719
 80046f8:	08004721 	.word	0x08004721
 80046fc:	08004729 	.word	0x08004729
 8004700:	0800473f 	.word	0x0800473f
 8004704:	0800472f 	.word	0x0800472f
 8004708:	0800473f 	.word	0x0800473f
 800470c:	0800473f 	.word	0x0800473f
 8004710:	0800473f 	.word	0x0800473f
 8004714:	08004737 	.word	0x08004737
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004718:	f7fe fc6a 	bl	8002ff0 <HAL_RCC_GetPCLK1Freq>
 800471c:	61f8      	str	r0, [r7, #28]
        break;
 800471e:	e014      	b.n	800474a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004720:	f7fe fc7c 	bl	800301c <HAL_RCC_GetPCLK2Freq>
 8004724:	61f8      	str	r0, [r7, #28]
        break;
 8004726:	e010      	b.n	800474a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004728:	4b4d      	ldr	r3, [pc, #308]	; (8004860 <UART_SetConfig+0x56c>)
 800472a:	61fb      	str	r3, [r7, #28]
        break;
 800472c:	e00d      	b.n	800474a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800472e:	f7fe fbc7 	bl	8002ec0 <HAL_RCC_GetSysClockFreq>
 8004732:	61f8      	str	r0, [r7, #28]
        break;
 8004734:	e009      	b.n	800474a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800473a:	61fb      	str	r3, [r7, #28]
        break;
 800473c:	e005      	b.n	800474a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004748:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d077      	beq.n	8004840 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	005a      	lsls	r2, r3, #1
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	085b      	lsrs	r3, r3, #1
 800475a:	441a      	add	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	fbb2 f3f3 	udiv	r3, r2, r3
 8004764:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	2b0f      	cmp	r3, #15
 800476a:	d916      	bls.n	800479a <UART_SetConfig+0x4a6>
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004772:	d212      	bcs.n	800479a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	b29b      	uxth	r3, r3
 8004778:	f023 030f 	bic.w	r3, r3, #15
 800477c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	085b      	lsrs	r3, r3, #1
 8004782:	b29b      	uxth	r3, r3
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	b29a      	uxth	r2, r3
 800478a:	8afb      	ldrh	r3, [r7, #22]
 800478c:	4313      	orrs	r3, r2
 800478e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	8afa      	ldrh	r2, [r7, #22]
 8004796:	60da      	str	r2, [r3, #12]
 8004798:	e052      	b.n	8004840 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80047a0:	e04e      	b.n	8004840 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047a6:	2b08      	cmp	r3, #8
 80047a8:	d827      	bhi.n	80047fa <UART_SetConfig+0x506>
 80047aa:	a201      	add	r2, pc, #4	; (adr r2, 80047b0 <UART_SetConfig+0x4bc>)
 80047ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b0:	080047d5 	.word	0x080047d5
 80047b4:	080047dd 	.word	0x080047dd
 80047b8:	080047e5 	.word	0x080047e5
 80047bc:	080047fb 	.word	0x080047fb
 80047c0:	080047eb 	.word	0x080047eb
 80047c4:	080047fb 	.word	0x080047fb
 80047c8:	080047fb 	.word	0x080047fb
 80047cc:	080047fb 	.word	0x080047fb
 80047d0:	080047f3 	.word	0x080047f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047d4:	f7fe fc0c 	bl	8002ff0 <HAL_RCC_GetPCLK1Freq>
 80047d8:	61f8      	str	r0, [r7, #28]
        break;
 80047da:	e014      	b.n	8004806 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047dc:	f7fe fc1e 	bl	800301c <HAL_RCC_GetPCLK2Freq>
 80047e0:	61f8      	str	r0, [r7, #28]
        break;
 80047e2:	e010      	b.n	8004806 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047e4:	4b1e      	ldr	r3, [pc, #120]	; (8004860 <UART_SetConfig+0x56c>)
 80047e6:	61fb      	str	r3, [r7, #28]
        break;
 80047e8:	e00d      	b.n	8004806 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ea:	f7fe fb69 	bl	8002ec0 <HAL_RCC_GetSysClockFreq>
 80047ee:	61f8      	str	r0, [r7, #28]
        break;
 80047f0:	e009      	b.n	8004806 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047f6:	61fb      	str	r3, [r7, #28]
        break;
 80047f8:	e005      	b.n	8004806 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004804:	bf00      	nop
    }

    if (pclk != 0U)
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d019      	beq.n	8004840 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	085a      	lsrs	r2, r3, #1
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	441a      	add	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	fbb2 f3f3 	udiv	r3, r2, r3
 800481e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	2b0f      	cmp	r3, #15
 8004824:	d909      	bls.n	800483a <UART_SetConfig+0x546>
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800482c:	d205      	bcs.n	800483a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	b29a      	uxth	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	60da      	str	r2, [r3, #12]
 8004838:	e002      	b.n	8004840 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800484c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004850:	4618      	mov	r0, r3
 8004852:	3728      	adds	r7, #40	; 0x28
 8004854:	46bd      	mov	sp, r7
 8004856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800485a:	bf00      	nop
 800485c:	40008000 	.word	0x40008000
 8004860:	00f42400 	.word	0x00f42400

08004864 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00a      	beq.n	800488e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00a      	beq.n	80048d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00a      	beq.n	80048f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	f003 0310 	and.w	r3, r3, #16
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00a      	beq.n	8004916 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	f003 0320 	and.w	r3, r3, #32
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004940:	2b00      	cmp	r3, #0
 8004942:	d01a      	beq.n	800497a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004962:	d10a      	bne.n	800497a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00a      	beq.n	800499c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	605a      	str	r2, [r3, #4]
  }
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af02      	add	r7, sp, #8
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049b8:	f7fc fa18 	bl	8000dec <HAL_GetTick>
 80049bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0308 	and.w	r3, r3, #8
 80049c8:	2b08      	cmp	r3, #8
 80049ca:	d10e      	bne.n	80049ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f82d 	bl	8004a3a <UART_WaitOnFlagUntilTimeout>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e023      	b.n	8004a32 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	d10e      	bne.n	8004a16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f817 	bl	8004a3a <UART_WaitOnFlagUntilTimeout>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e00d      	b.n	8004a32 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b09c      	sub	sp, #112	; 0x70
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	60f8      	str	r0, [r7, #12]
 8004a42:	60b9      	str	r1, [r7, #8]
 8004a44:	603b      	str	r3, [r7, #0]
 8004a46:	4613      	mov	r3, r2
 8004a48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a4a:	e0a5      	b.n	8004b98 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a52:	f000 80a1 	beq.w	8004b98 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a56:	f7fc f9c9 	bl	8000dec <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d302      	bcc.n	8004a6c <UART_WaitOnFlagUntilTimeout+0x32>
 8004a66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d13e      	bne.n	8004aea <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a74:	e853 3f00 	ldrex	r3, [r3]
 8004a78:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a80:	667b      	str	r3, [r7, #100]	; 0x64
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	461a      	mov	r2, r3
 8004a88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a8c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a92:	e841 2300 	strex	r3, r2, [r1]
 8004a96:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004a98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1e6      	bne.n	8004a6c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	3308      	adds	r3, #8
 8004aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa8:	e853 3f00 	ldrex	r3, [r3]
 8004aac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab0:	f023 0301 	bic.w	r3, r3, #1
 8004ab4:	663b      	str	r3, [r7, #96]	; 0x60
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	3308      	adds	r3, #8
 8004abc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004abe:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ac0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ac4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ac6:	e841 2300 	strex	r3, r2, [r1]
 8004aca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1e5      	bne.n	8004a9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2220      	movs	r2, #32
 8004adc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e067      	b.n	8004bba <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d04f      	beq.n	8004b98 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b06:	d147      	bne.n	8004b98 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b10:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1a:	e853 3f00 	ldrex	r3, [r3]
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b30:	637b      	str	r3, [r7, #52]	; 0x34
 8004b32:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b38:	e841 2300 	strex	r3, r2, [r1]
 8004b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1e6      	bne.n	8004b12 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	3308      	adds	r3, #8
 8004b4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	e853 3f00 	ldrex	r3, [r3]
 8004b52:	613b      	str	r3, [r7, #16]
   return(result);
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	f023 0301 	bic.w	r3, r3, #1
 8004b5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3308      	adds	r3, #8
 8004b62:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b64:	623a      	str	r2, [r7, #32]
 8004b66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b68:	69f9      	ldr	r1, [r7, #28]
 8004b6a:	6a3a      	ldr	r2, [r7, #32]
 8004b6c:	e841 2300 	strex	r3, r2, [r1]
 8004b70:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1e5      	bne.n	8004b44 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2220      	movs	r2, #32
 8004b82:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e010      	b.n	8004bba <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	69da      	ldr	r2, [r3, #28]
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	bf0c      	ite	eq
 8004ba8:	2301      	moveq	r3, #1
 8004baa:	2300      	movne	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	461a      	mov	r2, r3
 8004bb0:	79fb      	ldrb	r3, [r7, #7]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	f43f af4a 	beq.w	8004a4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3770      	adds	r7, #112	; 0x70
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b095      	sub	sp, #84	; 0x54
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd2:	e853 3f00 	ldrex	r3, [r3]
 8004bd6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	461a      	mov	r2, r3
 8004be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004be8:	643b      	str	r3, [r7, #64]	; 0x40
 8004bea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bf0:	e841 2300 	strex	r3, r2, [r1]
 8004bf4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1e6      	bne.n	8004bca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	3308      	adds	r3, #8
 8004c02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	e853 3f00 	ldrex	r3, [r3]
 8004c0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	f023 0301 	bic.w	r3, r3, #1
 8004c12:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	3308      	adds	r3, #8
 8004c1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c24:	e841 2300 	strex	r3, r2, [r1]
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1e5      	bne.n	8004bfc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d118      	bne.n	8004c6a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	e853 3f00 	ldrex	r3, [r3]
 8004c44:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	f023 0310 	bic.w	r3, r3, #16
 8004c4c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	461a      	mov	r2, r3
 8004c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c56:	61bb      	str	r3, [r7, #24]
 8004c58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5a:	6979      	ldr	r1, [r7, #20]
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	e841 2300 	strex	r3, r2, [r1]
 8004c62:	613b      	str	r3, [r7, #16]
   return(result);
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1e6      	bne.n	8004c38 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004c7c:	bf00      	nop
 8004c7e:	3754      	adds	r7, #84	; 0x54
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f7ff fb0e 	bl	80042c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cac:	bf00      	nop
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	e853 3f00 	ldrex	r3, [r3]
 8004cc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cd0:	61fb      	str	r3, [r7, #28]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	61bb      	str	r3, [r7, #24]
 8004cdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cde:	6979      	ldr	r1, [r7, #20]
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	e841 2300 	strex	r3, r2, [r1]
 8004ce6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1e6      	bne.n	8004cbc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7ff fada 	bl	80042b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d00:	bf00      	nop
 8004d02:	3720      	adds	r7, #32
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <__errno>:
 8004d1c:	4b01      	ldr	r3, [pc, #4]	; (8004d24 <__errno+0x8>)
 8004d1e:	6818      	ldr	r0, [r3, #0]
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	2000000c 	.word	0x2000000c

08004d28 <__libc_init_array>:
 8004d28:	b570      	push	{r4, r5, r6, lr}
 8004d2a:	4d0d      	ldr	r5, [pc, #52]	; (8004d60 <__libc_init_array+0x38>)
 8004d2c:	4c0d      	ldr	r4, [pc, #52]	; (8004d64 <__libc_init_array+0x3c>)
 8004d2e:	1b64      	subs	r4, r4, r5
 8004d30:	10a4      	asrs	r4, r4, #2
 8004d32:	2600      	movs	r6, #0
 8004d34:	42a6      	cmp	r6, r4
 8004d36:	d109      	bne.n	8004d4c <__libc_init_array+0x24>
 8004d38:	4d0b      	ldr	r5, [pc, #44]	; (8004d68 <__libc_init_array+0x40>)
 8004d3a:	4c0c      	ldr	r4, [pc, #48]	; (8004d6c <__libc_init_array+0x44>)
 8004d3c:	f000 fd1e 	bl	800577c <_init>
 8004d40:	1b64      	subs	r4, r4, r5
 8004d42:	10a4      	asrs	r4, r4, #2
 8004d44:	2600      	movs	r6, #0
 8004d46:	42a6      	cmp	r6, r4
 8004d48:	d105      	bne.n	8004d56 <__libc_init_array+0x2e>
 8004d4a:	bd70      	pop	{r4, r5, r6, pc}
 8004d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d50:	4798      	blx	r3
 8004d52:	3601      	adds	r6, #1
 8004d54:	e7ee      	b.n	8004d34 <__libc_init_array+0xc>
 8004d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d5a:	4798      	blx	r3
 8004d5c:	3601      	adds	r6, #1
 8004d5e:	e7f2      	b.n	8004d46 <__libc_init_array+0x1e>
 8004d60:	08005858 	.word	0x08005858
 8004d64:	08005858 	.word	0x08005858
 8004d68:	08005858 	.word	0x08005858
 8004d6c:	0800585c 	.word	0x0800585c

08004d70 <memset>:
 8004d70:	4402      	add	r2, r0
 8004d72:	4603      	mov	r3, r0
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d100      	bne.n	8004d7a <memset+0xa>
 8004d78:	4770      	bx	lr
 8004d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d7e:	e7f9      	b.n	8004d74 <memset+0x4>

08004d80 <_puts_r>:
 8004d80:	b570      	push	{r4, r5, r6, lr}
 8004d82:	460e      	mov	r6, r1
 8004d84:	4605      	mov	r5, r0
 8004d86:	b118      	cbz	r0, 8004d90 <_puts_r+0x10>
 8004d88:	6983      	ldr	r3, [r0, #24]
 8004d8a:	b90b      	cbnz	r3, 8004d90 <_puts_r+0x10>
 8004d8c:	f000 fa48 	bl	8005220 <__sinit>
 8004d90:	69ab      	ldr	r3, [r5, #24]
 8004d92:	68ac      	ldr	r4, [r5, #8]
 8004d94:	b913      	cbnz	r3, 8004d9c <_puts_r+0x1c>
 8004d96:	4628      	mov	r0, r5
 8004d98:	f000 fa42 	bl	8005220 <__sinit>
 8004d9c:	4b2c      	ldr	r3, [pc, #176]	; (8004e50 <_puts_r+0xd0>)
 8004d9e:	429c      	cmp	r4, r3
 8004da0:	d120      	bne.n	8004de4 <_puts_r+0x64>
 8004da2:	686c      	ldr	r4, [r5, #4]
 8004da4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004da6:	07db      	lsls	r3, r3, #31
 8004da8:	d405      	bmi.n	8004db6 <_puts_r+0x36>
 8004daa:	89a3      	ldrh	r3, [r4, #12]
 8004dac:	0598      	lsls	r0, r3, #22
 8004dae:	d402      	bmi.n	8004db6 <_puts_r+0x36>
 8004db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004db2:	f000 fad3 	bl	800535c <__retarget_lock_acquire_recursive>
 8004db6:	89a3      	ldrh	r3, [r4, #12]
 8004db8:	0719      	lsls	r1, r3, #28
 8004dba:	d51d      	bpl.n	8004df8 <_puts_r+0x78>
 8004dbc:	6923      	ldr	r3, [r4, #16]
 8004dbe:	b1db      	cbz	r3, 8004df8 <_puts_r+0x78>
 8004dc0:	3e01      	subs	r6, #1
 8004dc2:	68a3      	ldr	r3, [r4, #8]
 8004dc4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	60a3      	str	r3, [r4, #8]
 8004dcc:	bb39      	cbnz	r1, 8004e1e <_puts_r+0x9e>
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	da38      	bge.n	8004e44 <_puts_r+0xc4>
 8004dd2:	4622      	mov	r2, r4
 8004dd4:	210a      	movs	r1, #10
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	f000 f848 	bl	8004e6c <__swbuf_r>
 8004ddc:	3001      	adds	r0, #1
 8004dde:	d011      	beq.n	8004e04 <_puts_r+0x84>
 8004de0:	250a      	movs	r5, #10
 8004de2:	e011      	b.n	8004e08 <_puts_r+0x88>
 8004de4:	4b1b      	ldr	r3, [pc, #108]	; (8004e54 <_puts_r+0xd4>)
 8004de6:	429c      	cmp	r4, r3
 8004de8:	d101      	bne.n	8004dee <_puts_r+0x6e>
 8004dea:	68ac      	ldr	r4, [r5, #8]
 8004dec:	e7da      	b.n	8004da4 <_puts_r+0x24>
 8004dee:	4b1a      	ldr	r3, [pc, #104]	; (8004e58 <_puts_r+0xd8>)
 8004df0:	429c      	cmp	r4, r3
 8004df2:	bf08      	it	eq
 8004df4:	68ec      	ldreq	r4, [r5, #12]
 8004df6:	e7d5      	b.n	8004da4 <_puts_r+0x24>
 8004df8:	4621      	mov	r1, r4
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	f000 f888 	bl	8004f10 <__swsetup_r>
 8004e00:	2800      	cmp	r0, #0
 8004e02:	d0dd      	beq.n	8004dc0 <_puts_r+0x40>
 8004e04:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004e08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e0a:	07da      	lsls	r2, r3, #31
 8004e0c:	d405      	bmi.n	8004e1a <_puts_r+0x9a>
 8004e0e:	89a3      	ldrh	r3, [r4, #12]
 8004e10:	059b      	lsls	r3, r3, #22
 8004e12:	d402      	bmi.n	8004e1a <_puts_r+0x9a>
 8004e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e16:	f000 faa2 	bl	800535e <__retarget_lock_release_recursive>
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	bd70      	pop	{r4, r5, r6, pc}
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	da04      	bge.n	8004e2c <_puts_r+0xac>
 8004e22:	69a2      	ldr	r2, [r4, #24]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	dc06      	bgt.n	8004e36 <_puts_r+0xb6>
 8004e28:	290a      	cmp	r1, #10
 8004e2a:	d004      	beq.n	8004e36 <_puts_r+0xb6>
 8004e2c:	6823      	ldr	r3, [r4, #0]
 8004e2e:	1c5a      	adds	r2, r3, #1
 8004e30:	6022      	str	r2, [r4, #0]
 8004e32:	7019      	strb	r1, [r3, #0]
 8004e34:	e7c5      	b.n	8004dc2 <_puts_r+0x42>
 8004e36:	4622      	mov	r2, r4
 8004e38:	4628      	mov	r0, r5
 8004e3a:	f000 f817 	bl	8004e6c <__swbuf_r>
 8004e3e:	3001      	adds	r0, #1
 8004e40:	d1bf      	bne.n	8004dc2 <_puts_r+0x42>
 8004e42:	e7df      	b.n	8004e04 <_puts_r+0x84>
 8004e44:	6823      	ldr	r3, [r4, #0]
 8004e46:	250a      	movs	r5, #10
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	6022      	str	r2, [r4, #0]
 8004e4c:	701d      	strb	r5, [r3, #0]
 8004e4e:	e7db      	b.n	8004e08 <_puts_r+0x88>
 8004e50:	08005810 	.word	0x08005810
 8004e54:	08005830 	.word	0x08005830
 8004e58:	080057f0 	.word	0x080057f0

08004e5c <puts>:
 8004e5c:	4b02      	ldr	r3, [pc, #8]	; (8004e68 <puts+0xc>)
 8004e5e:	4601      	mov	r1, r0
 8004e60:	6818      	ldr	r0, [r3, #0]
 8004e62:	f7ff bf8d 	b.w	8004d80 <_puts_r>
 8004e66:	bf00      	nop
 8004e68:	2000000c 	.word	0x2000000c

08004e6c <__swbuf_r>:
 8004e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6e:	460e      	mov	r6, r1
 8004e70:	4614      	mov	r4, r2
 8004e72:	4605      	mov	r5, r0
 8004e74:	b118      	cbz	r0, 8004e7e <__swbuf_r+0x12>
 8004e76:	6983      	ldr	r3, [r0, #24]
 8004e78:	b90b      	cbnz	r3, 8004e7e <__swbuf_r+0x12>
 8004e7a:	f000 f9d1 	bl	8005220 <__sinit>
 8004e7e:	4b21      	ldr	r3, [pc, #132]	; (8004f04 <__swbuf_r+0x98>)
 8004e80:	429c      	cmp	r4, r3
 8004e82:	d12b      	bne.n	8004edc <__swbuf_r+0x70>
 8004e84:	686c      	ldr	r4, [r5, #4]
 8004e86:	69a3      	ldr	r3, [r4, #24]
 8004e88:	60a3      	str	r3, [r4, #8]
 8004e8a:	89a3      	ldrh	r3, [r4, #12]
 8004e8c:	071a      	lsls	r2, r3, #28
 8004e8e:	d52f      	bpl.n	8004ef0 <__swbuf_r+0x84>
 8004e90:	6923      	ldr	r3, [r4, #16]
 8004e92:	b36b      	cbz	r3, 8004ef0 <__swbuf_r+0x84>
 8004e94:	6923      	ldr	r3, [r4, #16]
 8004e96:	6820      	ldr	r0, [r4, #0]
 8004e98:	1ac0      	subs	r0, r0, r3
 8004e9a:	6963      	ldr	r3, [r4, #20]
 8004e9c:	b2f6      	uxtb	r6, r6
 8004e9e:	4283      	cmp	r3, r0
 8004ea0:	4637      	mov	r7, r6
 8004ea2:	dc04      	bgt.n	8004eae <__swbuf_r+0x42>
 8004ea4:	4621      	mov	r1, r4
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	f000 f926 	bl	80050f8 <_fflush_r>
 8004eac:	bb30      	cbnz	r0, 8004efc <__swbuf_r+0x90>
 8004eae:	68a3      	ldr	r3, [r4, #8]
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	60a3      	str	r3, [r4, #8]
 8004eb4:	6823      	ldr	r3, [r4, #0]
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	6022      	str	r2, [r4, #0]
 8004eba:	701e      	strb	r6, [r3, #0]
 8004ebc:	6963      	ldr	r3, [r4, #20]
 8004ebe:	3001      	adds	r0, #1
 8004ec0:	4283      	cmp	r3, r0
 8004ec2:	d004      	beq.n	8004ece <__swbuf_r+0x62>
 8004ec4:	89a3      	ldrh	r3, [r4, #12]
 8004ec6:	07db      	lsls	r3, r3, #31
 8004ec8:	d506      	bpl.n	8004ed8 <__swbuf_r+0x6c>
 8004eca:	2e0a      	cmp	r6, #10
 8004ecc:	d104      	bne.n	8004ed8 <__swbuf_r+0x6c>
 8004ece:	4621      	mov	r1, r4
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	f000 f911 	bl	80050f8 <_fflush_r>
 8004ed6:	b988      	cbnz	r0, 8004efc <__swbuf_r+0x90>
 8004ed8:	4638      	mov	r0, r7
 8004eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004edc:	4b0a      	ldr	r3, [pc, #40]	; (8004f08 <__swbuf_r+0x9c>)
 8004ede:	429c      	cmp	r4, r3
 8004ee0:	d101      	bne.n	8004ee6 <__swbuf_r+0x7a>
 8004ee2:	68ac      	ldr	r4, [r5, #8]
 8004ee4:	e7cf      	b.n	8004e86 <__swbuf_r+0x1a>
 8004ee6:	4b09      	ldr	r3, [pc, #36]	; (8004f0c <__swbuf_r+0xa0>)
 8004ee8:	429c      	cmp	r4, r3
 8004eea:	bf08      	it	eq
 8004eec:	68ec      	ldreq	r4, [r5, #12]
 8004eee:	e7ca      	b.n	8004e86 <__swbuf_r+0x1a>
 8004ef0:	4621      	mov	r1, r4
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	f000 f80c 	bl	8004f10 <__swsetup_r>
 8004ef8:	2800      	cmp	r0, #0
 8004efa:	d0cb      	beq.n	8004e94 <__swbuf_r+0x28>
 8004efc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004f00:	e7ea      	b.n	8004ed8 <__swbuf_r+0x6c>
 8004f02:	bf00      	nop
 8004f04:	08005810 	.word	0x08005810
 8004f08:	08005830 	.word	0x08005830
 8004f0c:	080057f0 	.word	0x080057f0

08004f10 <__swsetup_r>:
 8004f10:	4b32      	ldr	r3, [pc, #200]	; (8004fdc <__swsetup_r+0xcc>)
 8004f12:	b570      	push	{r4, r5, r6, lr}
 8004f14:	681d      	ldr	r5, [r3, #0]
 8004f16:	4606      	mov	r6, r0
 8004f18:	460c      	mov	r4, r1
 8004f1a:	b125      	cbz	r5, 8004f26 <__swsetup_r+0x16>
 8004f1c:	69ab      	ldr	r3, [r5, #24]
 8004f1e:	b913      	cbnz	r3, 8004f26 <__swsetup_r+0x16>
 8004f20:	4628      	mov	r0, r5
 8004f22:	f000 f97d 	bl	8005220 <__sinit>
 8004f26:	4b2e      	ldr	r3, [pc, #184]	; (8004fe0 <__swsetup_r+0xd0>)
 8004f28:	429c      	cmp	r4, r3
 8004f2a:	d10f      	bne.n	8004f4c <__swsetup_r+0x3c>
 8004f2c:	686c      	ldr	r4, [r5, #4]
 8004f2e:	89a3      	ldrh	r3, [r4, #12]
 8004f30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f34:	0719      	lsls	r1, r3, #28
 8004f36:	d42c      	bmi.n	8004f92 <__swsetup_r+0x82>
 8004f38:	06dd      	lsls	r5, r3, #27
 8004f3a:	d411      	bmi.n	8004f60 <__swsetup_r+0x50>
 8004f3c:	2309      	movs	r3, #9
 8004f3e:	6033      	str	r3, [r6, #0]
 8004f40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f44:	81a3      	strh	r3, [r4, #12]
 8004f46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f4a:	e03e      	b.n	8004fca <__swsetup_r+0xba>
 8004f4c:	4b25      	ldr	r3, [pc, #148]	; (8004fe4 <__swsetup_r+0xd4>)
 8004f4e:	429c      	cmp	r4, r3
 8004f50:	d101      	bne.n	8004f56 <__swsetup_r+0x46>
 8004f52:	68ac      	ldr	r4, [r5, #8]
 8004f54:	e7eb      	b.n	8004f2e <__swsetup_r+0x1e>
 8004f56:	4b24      	ldr	r3, [pc, #144]	; (8004fe8 <__swsetup_r+0xd8>)
 8004f58:	429c      	cmp	r4, r3
 8004f5a:	bf08      	it	eq
 8004f5c:	68ec      	ldreq	r4, [r5, #12]
 8004f5e:	e7e6      	b.n	8004f2e <__swsetup_r+0x1e>
 8004f60:	0758      	lsls	r0, r3, #29
 8004f62:	d512      	bpl.n	8004f8a <__swsetup_r+0x7a>
 8004f64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f66:	b141      	cbz	r1, 8004f7a <__swsetup_r+0x6a>
 8004f68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f6c:	4299      	cmp	r1, r3
 8004f6e:	d002      	beq.n	8004f76 <__swsetup_r+0x66>
 8004f70:	4630      	mov	r0, r6
 8004f72:	f000 fa5b 	bl	800542c <_free_r>
 8004f76:	2300      	movs	r3, #0
 8004f78:	6363      	str	r3, [r4, #52]	; 0x34
 8004f7a:	89a3      	ldrh	r3, [r4, #12]
 8004f7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f80:	81a3      	strh	r3, [r4, #12]
 8004f82:	2300      	movs	r3, #0
 8004f84:	6063      	str	r3, [r4, #4]
 8004f86:	6923      	ldr	r3, [r4, #16]
 8004f88:	6023      	str	r3, [r4, #0]
 8004f8a:	89a3      	ldrh	r3, [r4, #12]
 8004f8c:	f043 0308 	orr.w	r3, r3, #8
 8004f90:	81a3      	strh	r3, [r4, #12]
 8004f92:	6923      	ldr	r3, [r4, #16]
 8004f94:	b94b      	cbnz	r3, 8004faa <__swsetup_r+0x9a>
 8004f96:	89a3      	ldrh	r3, [r4, #12]
 8004f98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fa0:	d003      	beq.n	8004faa <__swsetup_r+0x9a>
 8004fa2:	4621      	mov	r1, r4
 8004fa4:	4630      	mov	r0, r6
 8004fa6:	f000 fa01 	bl	80053ac <__smakebuf_r>
 8004faa:	89a0      	ldrh	r0, [r4, #12]
 8004fac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004fb0:	f010 0301 	ands.w	r3, r0, #1
 8004fb4:	d00a      	beq.n	8004fcc <__swsetup_r+0xbc>
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60a3      	str	r3, [r4, #8]
 8004fba:	6963      	ldr	r3, [r4, #20]
 8004fbc:	425b      	negs	r3, r3
 8004fbe:	61a3      	str	r3, [r4, #24]
 8004fc0:	6923      	ldr	r3, [r4, #16]
 8004fc2:	b943      	cbnz	r3, 8004fd6 <__swsetup_r+0xc6>
 8004fc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004fc8:	d1ba      	bne.n	8004f40 <__swsetup_r+0x30>
 8004fca:	bd70      	pop	{r4, r5, r6, pc}
 8004fcc:	0781      	lsls	r1, r0, #30
 8004fce:	bf58      	it	pl
 8004fd0:	6963      	ldrpl	r3, [r4, #20]
 8004fd2:	60a3      	str	r3, [r4, #8]
 8004fd4:	e7f4      	b.n	8004fc0 <__swsetup_r+0xb0>
 8004fd6:	2000      	movs	r0, #0
 8004fd8:	e7f7      	b.n	8004fca <__swsetup_r+0xba>
 8004fda:	bf00      	nop
 8004fdc:	2000000c 	.word	0x2000000c
 8004fe0:	08005810 	.word	0x08005810
 8004fe4:	08005830 	.word	0x08005830
 8004fe8:	080057f0 	.word	0x080057f0

08004fec <__sflush_r>:
 8004fec:	898a      	ldrh	r2, [r1, #12]
 8004fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ff2:	4605      	mov	r5, r0
 8004ff4:	0710      	lsls	r0, r2, #28
 8004ff6:	460c      	mov	r4, r1
 8004ff8:	d458      	bmi.n	80050ac <__sflush_r+0xc0>
 8004ffa:	684b      	ldr	r3, [r1, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	dc05      	bgt.n	800500c <__sflush_r+0x20>
 8005000:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005002:	2b00      	cmp	r3, #0
 8005004:	dc02      	bgt.n	800500c <__sflush_r+0x20>
 8005006:	2000      	movs	r0, #0
 8005008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800500c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800500e:	2e00      	cmp	r6, #0
 8005010:	d0f9      	beq.n	8005006 <__sflush_r+0x1a>
 8005012:	2300      	movs	r3, #0
 8005014:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005018:	682f      	ldr	r7, [r5, #0]
 800501a:	602b      	str	r3, [r5, #0]
 800501c:	d032      	beq.n	8005084 <__sflush_r+0x98>
 800501e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005020:	89a3      	ldrh	r3, [r4, #12]
 8005022:	075a      	lsls	r2, r3, #29
 8005024:	d505      	bpl.n	8005032 <__sflush_r+0x46>
 8005026:	6863      	ldr	r3, [r4, #4]
 8005028:	1ac0      	subs	r0, r0, r3
 800502a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800502c:	b10b      	cbz	r3, 8005032 <__sflush_r+0x46>
 800502e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005030:	1ac0      	subs	r0, r0, r3
 8005032:	2300      	movs	r3, #0
 8005034:	4602      	mov	r2, r0
 8005036:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005038:	6a21      	ldr	r1, [r4, #32]
 800503a:	4628      	mov	r0, r5
 800503c:	47b0      	blx	r6
 800503e:	1c43      	adds	r3, r0, #1
 8005040:	89a3      	ldrh	r3, [r4, #12]
 8005042:	d106      	bne.n	8005052 <__sflush_r+0x66>
 8005044:	6829      	ldr	r1, [r5, #0]
 8005046:	291d      	cmp	r1, #29
 8005048:	d82c      	bhi.n	80050a4 <__sflush_r+0xb8>
 800504a:	4a2a      	ldr	r2, [pc, #168]	; (80050f4 <__sflush_r+0x108>)
 800504c:	40ca      	lsrs	r2, r1
 800504e:	07d6      	lsls	r6, r2, #31
 8005050:	d528      	bpl.n	80050a4 <__sflush_r+0xb8>
 8005052:	2200      	movs	r2, #0
 8005054:	6062      	str	r2, [r4, #4]
 8005056:	04d9      	lsls	r1, r3, #19
 8005058:	6922      	ldr	r2, [r4, #16]
 800505a:	6022      	str	r2, [r4, #0]
 800505c:	d504      	bpl.n	8005068 <__sflush_r+0x7c>
 800505e:	1c42      	adds	r2, r0, #1
 8005060:	d101      	bne.n	8005066 <__sflush_r+0x7a>
 8005062:	682b      	ldr	r3, [r5, #0]
 8005064:	b903      	cbnz	r3, 8005068 <__sflush_r+0x7c>
 8005066:	6560      	str	r0, [r4, #84]	; 0x54
 8005068:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800506a:	602f      	str	r7, [r5, #0]
 800506c:	2900      	cmp	r1, #0
 800506e:	d0ca      	beq.n	8005006 <__sflush_r+0x1a>
 8005070:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005074:	4299      	cmp	r1, r3
 8005076:	d002      	beq.n	800507e <__sflush_r+0x92>
 8005078:	4628      	mov	r0, r5
 800507a:	f000 f9d7 	bl	800542c <_free_r>
 800507e:	2000      	movs	r0, #0
 8005080:	6360      	str	r0, [r4, #52]	; 0x34
 8005082:	e7c1      	b.n	8005008 <__sflush_r+0x1c>
 8005084:	6a21      	ldr	r1, [r4, #32]
 8005086:	2301      	movs	r3, #1
 8005088:	4628      	mov	r0, r5
 800508a:	47b0      	blx	r6
 800508c:	1c41      	adds	r1, r0, #1
 800508e:	d1c7      	bne.n	8005020 <__sflush_r+0x34>
 8005090:	682b      	ldr	r3, [r5, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0c4      	beq.n	8005020 <__sflush_r+0x34>
 8005096:	2b1d      	cmp	r3, #29
 8005098:	d001      	beq.n	800509e <__sflush_r+0xb2>
 800509a:	2b16      	cmp	r3, #22
 800509c:	d101      	bne.n	80050a2 <__sflush_r+0xb6>
 800509e:	602f      	str	r7, [r5, #0]
 80050a0:	e7b1      	b.n	8005006 <__sflush_r+0x1a>
 80050a2:	89a3      	ldrh	r3, [r4, #12]
 80050a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050a8:	81a3      	strh	r3, [r4, #12]
 80050aa:	e7ad      	b.n	8005008 <__sflush_r+0x1c>
 80050ac:	690f      	ldr	r7, [r1, #16]
 80050ae:	2f00      	cmp	r7, #0
 80050b0:	d0a9      	beq.n	8005006 <__sflush_r+0x1a>
 80050b2:	0793      	lsls	r3, r2, #30
 80050b4:	680e      	ldr	r6, [r1, #0]
 80050b6:	bf08      	it	eq
 80050b8:	694b      	ldreq	r3, [r1, #20]
 80050ba:	600f      	str	r7, [r1, #0]
 80050bc:	bf18      	it	ne
 80050be:	2300      	movne	r3, #0
 80050c0:	eba6 0807 	sub.w	r8, r6, r7
 80050c4:	608b      	str	r3, [r1, #8]
 80050c6:	f1b8 0f00 	cmp.w	r8, #0
 80050ca:	dd9c      	ble.n	8005006 <__sflush_r+0x1a>
 80050cc:	6a21      	ldr	r1, [r4, #32]
 80050ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80050d0:	4643      	mov	r3, r8
 80050d2:	463a      	mov	r2, r7
 80050d4:	4628      	mov	r0, r5
 80050d6:	47b0      	blx	r6
 80050d8:	2800      	cmp	r0, #0
 80050da:	dc06      	bgt.n	80050ea <__sflush_r+0xfe>
 80050dc:	89a3      	ldrh	r3, [r4, #12]
 80050de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050e2:	81a3      	strh	r3, [r4, #12]
 80050e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050e8:	e78e      	b.n	8005008 <__sflush_r+0x1c>
 80050ea:	4407      	add	r7, r0
 80050ec:	eba8 0800 	sub.w	r8, r8, r0
 80050f0:	e7e9      	b.n	80050c6 <__sflush_r+0xda>
 80050f2:	bf00      	nop
 80050f4:	20400001 	.word	0x20400001

080050f8 <_fflush_r>:
 80050f8:	b538      	push	{r3, r4, r5, lr}
 80050fa:	690b      	ldr	r3, [r1, #16]
 80050fc:	4605      	mov	r5, r0
 80050fe:	460c      	mov	r4, r1
 8005100:	b913      	cbnz	r3, 8005108 <_fflush_r+0x10>
 8005102:	2500      	movs	r5, #0
 8005104:	4628      	mov	r0, r5
 8005106:	bd38      	pop	{r3, r4, r5, pc}
 8005108:	b118      	cbz	r0, 8005112 <_fflush_r+0x1a>
 800510a:	6983      	ldr	r3, [r0, #24]
 800510c:	b90b      	cbnz	r3, 8005112 <_fflush_r+0x1a>
 800510e:	f000 f887 	bl	8005220 <__sinit>
 8005112:	4b14      	ldr	r3, [pc, #80]	; (8005164 <_fflush_r+0x6c>)
 8005114:	429c      	cmp	r4, r3
 8005116:	d11b      	bne.n	8005150 <_fflush_r+0x58>
 8005118:	686c      	ldr	r4, [r5, #4]
 800511a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0ef      	beq.n	8005102 <_fflush_r+0xa>
 8005122:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005124:	07d0      	lsls	r0, r2, #31
 8005126:	d404      	bmi.n	8005132 <_fflush_r+0x3a>
 8005128:	0599      	lsls	r1, r3, #22
 800512a:	d402      	bmi.n	8005132 <_fflush_r+0x3a>
 800512c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800512e:	f000 f915 	bl	800535c <__retarget_lock_acquire_recursive>
 8005132:	4628      	mov	r0, r5
 8005134:	4621      	mov	r1, r4
 8005136:	f7ff ff59 	bl	8004fec <__sflush_r>
 800513a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800513c:	07da      	lsls	r2, r3, #31
 800513e:	4605      	mov	r5, r0
 8005140:	d4e0      	bmi.n	8005104 <_fflush_r+0xc>
 8005142:	89a3      	ldrh	r3, [r4, #12]
 8005144:	059b      	lsls	r3, r3, #22
 8005146:	d4dd      	bmi.n	8005104 <_fflush_r+0xc>
 8005148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800514a:	f000 f908 	bl	800535e <__retarget_lock_release_recursive>
 800514e:	e7d9      	b.n	8005104 <_fflush_r+0xc>
 8005150:	4b05      	ldr	r3, [pc, #20]	; (8005168 <_fflush_r+0x70>)
 8005152:	429c      	cmp	r4, r3
 8005154:	d101      	bne.n	800515a <_fflush_r+0x62>
 8005156:	68ac      	ldr	r4, [r5, #8]
 8005158:	e7df      	b.n	800511a <_fflush_r+0x22>
 800515a:	4b04      	ldr	r3, [pc, #16]	; (800516c <_fflush_r+0x74>)
 800515c:	429c      	cmp	r4, r3
 800515e:	bf08      	it	eq
 8005160:	68ec      	ldreq	r4, [r5, #12]
 8005162:	e7da      	b.n	800511a <_fflush_r+0x22>
 8005164:	08005810 	.word	0x08005810
 8005168:	08005830 	.word	0x08005830
 800516c:	080057f0 	.word	0x080057f0

08005170 <std>:
 8005170:	2300      	movs	r3, #0
 8005172:	b510      	push	{r4, lr}
 8005174:	4604      	mov	r4, r0
 8005176:	e9c0 3300 	strd	r3, r3, [r0]
 800517a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800517e:	6083      	str	r3, [r0, #8]
 8005180:	8181      	strh	r1, [r0, #12]
 8005182:	6643      	str	r3, [r0, #100]	; 0x64
 8005184:	81c2      	strh	r2, [r0, #14]
 8005186:	6183      	str	r3, [r0, #24]
 8005188:	4619      	mov	r1, r3
 800518a:	2208      	movs	r2, #8
 800518c:	305c      	adds	r0, #92	; 0x5c
 800518e:	f7ff fdef 	bl	8004d70 <memset>
 8005192:	4b05      	ldr	r3, [pc, #20]	; (80051a8 <std+0x38>)
 8005194:	6263      	str	r3, [r4, #36]	; 0x24
 8005196:	4b05      	ldr	r3, [pc, #20]	; (80051ac <std+0x3c>)
 8005198:	62a3      	str	r3, [r4, #40]	; 0x28
 800519a:	4b05      	ldr	r3, [pc, #20]	; (80051b0 <std+0x40>)
 800519c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800519e:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <std+0x44>)
 80051a0:	6224      	str	r4, [r4, #32]
 80051a2:	6323      	str	r3, [r4, #48]	; 0x30
 80051a4:	bd10      	pop	{r4, pc}
 80051a6:	bf00      	nop
 80051a8:	0800560d 	.word	0x0800560d
 80051ac:	0800562f 	.word	0x0800562f
 80051b0:	08005667 	.word	0x08005667
 80051b4:	0800568b 	.word	0x0800568b

080051b8 <_cleanup_r>:
 80051b8:	4901      	ldr	r1, [pc, #4]	; (80051c0 <_cleanup_r+0x8>)
 80051ba:	f000 b8af 	b.w	800531c <_fwalk_reent>
 80051be:	bf00      	nop
 80051c0:	080050f9 	.word	0x080050f9

080051c4 <__sfmoreglue>:
 80051c4:	b570      	push	{r4, r5, r6, lr}
 80051c6:	2268      	movs	r2, #104	; 0x68
 80051c8:	1e4d      	subs	r5, r1, #1
 80051ca:	4355      	muls	r5, r2
 80051cc:	460e      	mov	r6, r1
 80051ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80051d2:	f000 f997 	bl	8005504 <_malloc_r>
 80051d6:	4604      	mov	r4, r0
 80051d8:	b140      	cbz	r0, 80051ec <__sfmoreglue+0x28>
 80051da:	2100      	movs	r1, #0
 80051dc:	e9c0 1600 	strd	r1, r6, [r0]
 80051e0:	300c      	adds	r0, #12
 80051e2:	60a0      	str	r0, [r4, #8]
 80051e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80051e8:	f7ff fdc2 	bl	8004d70 <memset>
 80051ec:	4620      	mov	r0, r4
 80051ee:	bd70      	pop	{r4, r5, r6, pc}

080051f0 <__sfp_lock_acquire>:
 80051f0:	4801      	ldr	r0, [pc, #4]	; (80051f8 <__sfp_lock_acquire+0x8>)
 80051f2:	f000 b8b3 	b.w	800535c <__retarget_lock_acquire_recursive>
 80051f6:	bf00      	nop
 80051f8:	20000201 	.word	0x20000201

080051fc <__sfp_lock_release>:
 80051fc:	4801      	ldr	r0, [pc, #4]	; (8005204 <__sfp_lock_release+0x8>)
 80051fe:	f000 b8ae 	b.w	800535e <__retarget_lock_release_recursive>
 8005202:	bf00      	nop
 8005204:	20000201 	.word	0x20000201

08005208 <__sinit_lock_acquire>:
 8005208:	4801      	ldr	r0, [pc, #4]	; (8005210 <__sinit_lock_acquire+0x8>)
 800520a:	f000 b8a7 	b.w	800535c <__retarget_lock_acquire_recursive>
 800520e:	bf00      	nop
 8005210:	20000202 	.word	0x20000202

08005214 <__sinit_lock_release>:
 8005214:	4801      	ldr	r0, [pc, #4]	; (800521c <__sinit_lock_release+0x8>)
 8005216:	f000 b8a2 	b.w	800535e <__retarget_lock_release_recursive>
 800521a:	bf00      	nop
 800521c:	20000202 	.word	0x20000202

08005220 <__sinit>:
 8005220:	b510      	push	{r4, lr}
 8005222:	4604      	mov	r4, r0
 8005224:	f7ff fff0 	bl	8005208 <__sinit_lock_acquire>
 8005228:	69a3      	ldr	r3, [r4, #24]
 800522a:	b11b      	cbz	r3, 8005234 <__sinit+0x14>
 800522c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005230:	f7ff bff0 	b.w	8005214 <__sinit_lock_release>
 8005234:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005238:	6523      	str	r3, [r4, #80]	; 0x50
 800523a:	4b13      	ldr	r3, [pc, #76]	; (8005288 <__sinit+0x68>)
 800523c:	4a13      	ldr	r2, [pc, #76]	; (800528c <__sinit+0x6c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	62a2      	str	r2, [r4, #40]	; 0x28
 8005242:	42a3      	cmp	r3, r4
 8005244:	bf04      	itt	eq
 8005246:	2301      	moveq	r3, #1
 8005248:	61a3      	streq	r3, [r4, #24]
 800524a:	4620      	mov	r0, r4
 800524c:	f000 f820 	bl	8005290 <__sfp>
 8005250:	6060      	str	r0, [r4, #4]
 8005252:	4620      	mov	r0, r4
 8005254:	f000 f81c 	bl	8005290 <__sfp>
 8005258:	60a0      	str	r0, [r4, #8]
 800525a:	4620      	mov	r0, r4
 800525c:	f000 f818 	bl	8005290 <__sfp>
 8005260:	2200      	movs	r2, #0
 8005262:	60e0      	str	r0, [r4, #12]
 8005264:	2104      	movs	r1, #4
 8005266:	6860      	ldr	r0, [r4, #4]
 8005268:	f7ff ff82 	bl	8005170 <std>
 800526c:	68a0      	ldr	r0, [r4, #8]
 800526e:	2201      	movs	r2, #1
 8005270:	2109      	movs	r1, #9
 8005272:	f7ff ff7d 	bl	8005170 <std>
 8005276:	68e0      	ldr	r0, [r4, #12]
 8005278:	2202      	movs	r2, #2
 800527a:	2112      	movs	r1, #18
 800527c:	f7ff ff78 	bl	8005170 <std>
 8005280:	2301      	movs	r3, #1
 8005282:	61a3      	str	r3, [r4, #24]
 8005284:	e7d2      	b.n	800522c <__sinit+0xc>
 8005286:	bf00      	nop
 8005288:	080057ec 	.word	0x080057ec
 800528c:	080051b9 	.word	0x080051b9

08005290 <__sfp>:
 8005290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005292:	4607      	mov	r7, r0
 8005294:	f7ff ffac 	bl	80051f0 <__sfp_lock_acquire>
 8005298:	4b1e      	ldr	r3, [pc, #120]	; (8005314 <__sfp+0x84>)
 800529a:	681e      	ldr	r6, [r3, #0]
 800529c:	69b3      	ldr	r3, [r6, #24]
 800529e:	b913      	cbnz	r3, 80052a6 <__sfp+0x16>
 80052a0:	4630      	mov	r0, r6
 80052a2:	f7ff ffbd 	bl	8005220 <__sinit>
 80052a6:	3648      	adds	r6, #72	; 0x48
 80052a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80052ac:	3b01      	subs	r3, #1
 80052ae:	d503      	bpl.n	80052b8 <__sfp+0x28>
 80052b0:	6833      	ldr	r3, [r6, #0]
 80052b2:	b30b      	cbz	r3, 80052f8 <__sfp+0x68>
 80052b4:	6836      	ldr	r6, [r6, #0]
 80052b6:	e7f7      	b.n	80052a8 <__sfp+0x18>
 80052b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80052bc:	b9d5      	cbnz	r5, 80052f4 <__sfp+0x64>
 80052be:	4b16      	ldr	r3, [pc, #88]	; (8005318 <__sfp+0x88>)
 80052c0:	60e3      	str	r3, [r4, #12]
 80052c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80052c6:	6665      	str	r5, [r4, #100]	; 0x64
 80052c8:	f000 f847 	bl	800535a <__retarget_lock_init_recursive>
 80052cc:	f7ff ff96 	bl	80051fc <__sfp_lock_release>
 80052d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80052d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80052d8:	6025      	str	r5, [r4, #0]
 80052da:	61a5      	str	r5, [r4, #24]
 80052dc:	2208      	movs	r2, #8
 80052de:	4629      	mov	r1, r5
 80052e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80052e4:	f7ff fd44 	bl	8004d70 <memset>
 80052e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80052ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80052f0:	4620      	mov	r0, r4
 80052f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052f4:	3468      	adds	r4, #104	; 0x68
 80052f6:	e7d9      	b.n	80052ac <__sfp+0x1c>
 80052f8:	2104      	movs	r1, #4
 80052fa:	4638      	mov	r0, r7
 80052fc:	f7ff ff62 	bl	80051c4 <__sfmoreglue>
 8005300:	4604      	mov	r4, r0
 8005302:	6030      	str	r0, [r6, #0]
 8005304:	2800      	cmp	r0, #0
 8005306:	d1d5      	bne.n	80052b4 <__sfp+0x24>
 8005308:	f7ff ff78 	bl	80051fc <__sfp_lock_release>
 800530c:	230c      	movs	r3, #12
 800530e:	603b      	str	r3, [r7, #0]
 8005310:	e7ee      	b.n	80052f0 <__sfp+0x60>
 8005312:	bf00      	nop
 8005314:	080057ec 	.word	0x080057ec
 8005318:	ffff0001 	.word	0xffff0001

0800531c <_fwalk_reent>:
 800531c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005320:	4606      	mov	r6, r0
 8005322:	4688      	mov	r8, r1
 8005324:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005328:	2700      	movs	r7, #0
 800532a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800532e:	f1b9 0901 	subs.w	r9, r9, #1
 8005332:	d505      	bpl.n	8005340 <_fwalk_reent+0x24>
 8005334:	6824      	ldr	r4, [r4, #0]
 8005336:	2c00      	cmp	r4, #0
 8005338:	d1f7      	bne.n	800532a <_fwalk_reent+0xe>
 800533a:	4638      	mov	r0, r7
 800533c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005340:	89ab      	ldrh	r3, [r5, #12]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d907      	bls.n	8005356 <_fwalk_reent+0x3a>
 8005346:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800534a:	3301      	adds	r3, #1
 800534c:	d003      	beq.n	8005356 <_fwalk_reent+0x3a>
 800534e:	4629      	mov	r1, r5
 8005350:	4630      	mov	r0, r6
 8005352:	47c0      	blx	r8
 8005354:	4307      	orrs	r7, r0
 8005356:	3568      	adds	r5, #104	; 0x68
 8005358:	e7e9      	b.n	800532e <_fwalk_reent+0x12>

0800535a <__retarget_lock_init_recursive>:
 800535a:	4770      	bx	lr

0800535c <__retarget_lock_acquire_recursive>:
 800535c:	4770      	bx	lr

0800535e <__retarget_lock_release_recursive>:
 800535e:	4770      	bx	lr

08005360 <__swhatbuf_r>:
 8005360:	b570      	push	{r4, r5, r6, lr}
 8005362:	460e      	mov	r6, r1
 8005364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005368:	2900      	cmp	r1, #0
 800536a:	b096      	sub	sp, #88	; 0x58
 800536c:	4614      	mov	r4, r2
 800536e:	461d      	mov	r5, r3
 8005370:	da08      	bge.n	8005384 <__swhatbuf_r+0x24>
 8005372:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	602a      	str	r2, [r5, #0]
 800537a:	061a      	lsls	r2, r3, #24
 800537c:	d410      	bmi.n	80053a0 <__swhatbuf_r+0x40>
 800537e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005382:	e00e      	b.n	80053a2 <__swhatbuf_r+0x42>
 8005384:	466a      	mov	r2, sp
 8005386:	f000 f9a7 	bl	80056d8 <_fstat_r>
 800538a:	2800      	cmp	r0, #0
 800538c:	dbf1      	blt.n	8005372 <__swhatbuf_r+0x12>
 800538e:	9a01      	ldr	r2, [sp, #4]
 8005390:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005394:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005398:	425a      	negs	r2, r3
 800539a:	415a      	adcs	r2, r3
 800539c:	602a      	str	r2, [r5, #0]
 800539e:	e7ee      	b.n	800537e <__swhatbuf_r+0x1e>
 80053a0:	2340      	movs	r3, #64	; 0x40
 80053a2:	2000      	movs	r0, #0
 80053a4:	6023      	str	r3, [r4, #0]
 80053a6:	b016      	add	sp, #88	; 0x58
 80053a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080053ac <__smakebuf_r>:
 80053ac:	898b      	ldrh	r3, [r1, #12]
 80053ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80053b0:	079d      	lsls	r5, r3, #30
 80053b2:	4606      	mov	r6, r0
 80053b4:	460c      	mov	r4, r1
 80053b6:	d507      	bpl.n	80053c8 <__smakebuf_r+0x1c>
 80053b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80053bc:	6023      	str	r3, [r4, #0]
 80053be:	6123      	str	r3, [r4, #16]
 80053c0:	2301      	movs	r3, #1
 80053c2:	6163      	str	r3, [r4, #20]
 80053c4:	b002      	add	sp, #8
 80053c6:	bd70      	pop	{r4, r5, r6, pc}
 80053c8:	ab01      	add	r3, sp, #4
 80053ca:	466a      	mov	r2, sp
 80053cc:	f7ff ffc8 	bl	8005360 <__swhatbuf_r>
 80053d0:	9900      	ldr	r1, [sp, #0]
 80053d2:	4605      	mov	r5, r0
 80053d4:	4630      	mov	r0, r6
 80053d6:	f000 f895 	bl	8005504 <_malloc_r>
 80053da:	b948      	cbnz	r0, 80053f0 <__smakebuf_r+0x44>
 80053dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053e0:	059a      	lsls	r2, r3, #22
 80053e2:	d4ef      	bmi.n	80053c4 <__smakebuf_r+0x18>
 80053e4:	f023 0303 	bic.w	r3, r3, #3
 80053e8:	f043 0302 	orr.w	r3, r3, #2
 80053ec:	81a3      	strh	r3, [r4, #12]
 80053ee:	e7e3      	b.n	80053b8 <__smakebuf_r+0xc>
 80053f0:	4b0d      	ldr	r3, [pc, #52]	; (8005428 <__smakebuf_r+0x7c>)
 80053f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80053f4:	89a3      	ldrh	r3, [r4, #12]
 80053f6:	6020      	str	r0, [r4, #0]
 80053f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053fc:	81a3      	strh	r3, [r4, #12]
 80053fe:	9b00      	ldr	r3, [sp, #0]
 8005400:	6163      	str	r3, [r4, #20]
 8005402:	9b01      	ldr	r3, [sp, #4]
 8005404:	6120      	str	r0, [r4, #16]
 8005406:	b15b      	cbz	r3, 8005420 <__smakebuf_r+0x74>
 8005408:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800540c:	4630      	mov	r0, r6
 800540e:	f000 f975 	bl	80056fc <_isatty_r>
 8005412:	b128      	cbz	r0, 8005420 <__smakebuf_r+0x74>
 8005414:	89a3      	ldrh	r3, [r4, #12]
 8005416:	f023 0303 	bic.w	r3, r3, #3
 800541a:	f043 0301 	orr.w	r3, r3, #1
 800541e:	81a3      	strh	r3, [r4, #12]
 8005420:	89a0      	ldrh	r0, [r4, #12]
 8005422:	4305      	orrs	r5, r0
 8005424:	81a5      	strh	r5, [r4, #12]
 8005426:	e7cd      	b.n	80053c4 <__smakebuf_r+0x18>
 8005428:	080051b9 	.word	0x080051b9

0800542c <_free_r>:
 800542c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800542e:	2900      	cmp	r1, #0
 8005430:	d044      	beq.n	80054bc <_free_r+0x90>
 8005432:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005436:	9001      	str	r0, [sp, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	f1a1 0404 	sub.w	r4, r1, #4
 800543e:	bfb8      	it	lt
 8005440:	18e4      	addlt	r4, r4, r3
 8005442:	f000 f97d 	bl	8005740 <__malloc_lock>
 8005446:	4a1e      	ldr	r2, [pc, #120]	; (80054c0 <_free_r+0x94>)
 8005448:	9801      	ldr	r0, [sp, #4]
 800544a:	6813      	ldr	r3, [r2, #0]
 800544c:	b933      	cbnz	r3, 800545c <_free_r+0x30>
 800544e:	6063      	str	r3, [r4, #4]
 8005450:	6014      	str	r4, [r2, #0]
 8005452:	b003      	add	sp, #12
 8005454:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005458:	f000 b978 	b.w	800574c <__malloc_unlock>
 800545c:	42a3      	cmp	r3, r4
 800545e:	d908      	bls.n	8005472 <_free_r+0x46>
 8005460:	6825      	ldr	r5, [r4, #0]
 8005462:	1961      	adds	r1, r4, r5
 8005464:	428b      	cmp	r3, r1
 8005466:	bf01      	itttt	eq
 8005468:	6819      	ldreq	r1, [r3, #0]
 800546a:	685b      	ldreq	r3, [r3, #4]
 800546c:	1949      	addeq	r1, r1, r5
 800546e:	6021      	streq	r1, [r4, #0]
 8005470:	e7ed      	b.n	800544e <_free_r+0x22>
 8005472:	461a      	mov	r2, r3
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	b10b      	cbz	r3, 800547c <_free_r+0x50>
 8005478:	42a3      	cmp	r3, r4
 800547a:	d9fa      	bls.n	8005472 <_free_r+0x46>
 800547c:	6811      	ldr	r1, [r2, #0]
 800547e:	1855      	adds	r5, r2, r1
 8005480:	42a5      	cmp	r5, r4
 8005482:	d10b      	bne.n	800549c <_free_r+0x70>
 8005484:	6824      	ldr	r4, [r4, #0]
 8005486:	4421      	add	r1, r4
 8005488:	1854      	adds	r4, r2, r1
 800548a:	42a3      	cmp	r3, r4
 800548c:	6011      	str	r1, [r2, #0]
 800548e:	d1e0      	bne.n	8005452 <_free_r+0x26>
 8005490:	681c      	ldr	r4, [r3, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	6053      	str	r3, [r2, #4]
 8005496:	4421      	add	r1, r4
 8005498:	6011      	str	r1, [r2, #0]
 800549a:	e7da      	b.n	8005452 <_free_r+0x26>
 800549c:	d902      	bls.n	80054a4 <_free_r+0x78>
 800549e:	230c      	movs	r3, #12
 80054a0:	6003      	str	r3, [r0, #0]
 80054a2:	e7d6      	b.n	8005452 <_free_r+0x26>
 80054a4:	6825      	ldr	r5, [r4, #0]
 80054a6:	1961      	adds	r1, r4, r5
 80054a8:	428b      	cmp	r3, r1
 80054aa:	bf04      	itt	eq
 80054ac:	6819      	ldreq	r1, [r3, #0]
 80054ae:	685b      	ldreq	r3, [r3, #4]
 80054b0:	6063      	str	r3, [r4, #4]
 80054b2:	bf04      	itt	eq
 80054b4:	1949      	addeq	r1, r1, r5
 80054b6:	6021      	streq	r1, [r4, #0]
 80054b8:	6054      	str	r4, [r2, #4]
 80054ba:	e7ca      	b.n	8005452 <_free_r+0x26>
 80054bc:	b003      	add	sp, #12
 80054be:	bd30      	pop	{r4, r5, pc}
 80054c0:	20000204 	.word	0x20000204

080054c4 <sbrk_aligned>:
 80054c4:	b570      	push	{r4, r5, r6, lr}
 80054c6:	4e0e      	ldr	r6, [pc, #56]	; (8005500 <sbrk_aligned+0x3c>)
 80054c8:	460c      	mov	r4, r1
 80054ca:	6831      	ldr	r1, [r6, #0]
 80054cc:	4605      	mov	r5, r0
 80054ce:	b911      	cbnz	r1, 80054d6 <sbrk_aligned+0x12>
 80054d0:	f000 f88c 	bl	80055ec <_sbrk_r>
 80054d4:	6030      	str	r0, [r6, #0]
 80054d6:	4621      	mov	r1, r4
 80054d8:	4628      	mov	r0, r5
 80054da:	f000 f887 	bl	80055ec <_sbrk_r>
 80054de:	1c43      	adds	r3, r0, #1
 80054e0:	d00a      	beq.n	80054f8 <sbrk_aligned+0x34>
 80054e2:	1cc4      	adds	r4, r0, #3
 80054e4:	f024 0403 	bic.w	r4, r4, #3
 80054e8:	42a0      	cmp	r0, r4
 80054ea:	d007      	beq.n	80054fc <sbrk_aligned+0x38>
 80054ec:	1a21      	subs	r1, r4, r0
 80054ee:	4628      	mov	r0, r5
 80054f0:	f000 f87c 	bl	80055ec <_sbrk_r>
 80054f4:	3001      	adds	r0, #1
 80054f6:	d101      	bne.n	80054fc <sbrk_aligned+0x38>
 80054f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80054fc:	4620      	mov	r0, r4
 80054fe:	bd70      	pop	{r4, r5, r6, pc}
 8005500:	20000208 	.word	0x20000208

08005504 <_malloc_r>:
 8005504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005508:	1ccd      	adds	r5, r1, #3
 800550a:	f025 0503 	bic.w	r5, r5, #3
 800550e:	3508      	adds	r5, #8
 8005510:	2d0c      	cmp	r5, #12
 8005512:	bf38      	it	cc
 8005514:	250c      	movcc	r5, #12
 8005516:	2d00      	cmp	r5, #0
 8005518:	4607      	mov	r7, r0
 800551a:	db01      	blt.n	8005520 <_malloc_r+0x1c>
 800551c:	42a9      	cmp	r1, r5
 800551e:	d905      	bls.n	800552c <_malloc_r+0x28>
 8005520:	230c      	movs	r3, #12
 8005522:	603b      	str	r3, [r7, #0]
 8005524:	2600      	movs	r6, #0
 8005526:	4630      	mov	r0, r6
 8005528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800552c:	4e2e      	ldr	r6, [pc, #184]	; (80055e8 <_malloc_r+0xe4>)
 800552e:	f000 f907 	bl	8005740 <__malloc_lock>
 8005532:	6833      	ldr	r3, [r6, #0]
 8005534:	461c      	mov	r4, r3
 8005536:	bb34      	cbnz	r4, 8005586 <_malloc_r+0x82>
 8005538:	4629      	mov	r1, r5
 800553a:	4638      	mov	r0, r7
 800553c:	f7ff ffc2 	bl	80054c4 <sbrk_aligned>
 8005540:	1c43      	adds	r3, r0, #1
 8005542:	4604      	mov	r4, r0
 8005544:	d14d      	bne.n	80055e2 <_malloc_r+0xde>
 8005546:	6834      	ldr	r4, [r6, #0]
 8005548:	4626      	mov	r6, r4
 800554a:	2e00      	cmp	r6, #0
 800554c:	d140      	bne.n	80055d0 <_malloc_r+0xcc>
 800554e:	6823      	ldr	r3, [r4, #0]
 8005550:	4631      	mov	r1, r6
 8005552:	4638      	mov	r0, r7
 8005554:	eb04 0803 	add.w	r8, r4, r3
 8005558:	f000 f848 	bl	80055ec <_sbrk_r>
 800555c:	4580      	cmp	r8, r0
 800555e:	d13a      	bne.n	80055d6 <_malloc_r+0xd2>
 8005560:	6821      	ldr	r1, [r4, #0]
 8005562:	3503      	adds	r5, #3
 8005564:	1a6d      	subs	r5, r5, r1
 8005566:	f025 0503 	bic.w	r5, r5, #3
 800556a:	3508      	adds	r5, #8
 800556c:	2d0c      	cmp	r5, #12
 800556e:	bf38      	it	cc
 8005570:	250c      	movcc	r5, #12
 8005572:	4629      	mov	r1, r5
 8005574:	4638      	mov	r0, r7
 8005576:	f7ff ffa5 	bl	80054c4 <sbrk_aligned>
 800557a:	3001      	adds	r0, #1
 800557c:	d02b      	beq.n	80055d6 <_malloc_r+0xd2>
 800557e:	6823      	ldr	r3, [r4, #0]
 8005580:	442b      	add	r3, r5
 8005582:	6023      	str	r3, [r4, #0]
 8005584:	e00e      	b.n	80055a4 <_malloc_r+0xa0>
 8005586:	6822      	ldr	r2, [r4, #0]
 8005588:	1b52      	subs	r2, r2, r5
 800558a:	d41e      	bmi.n	80055ca <_malloc_r+0xc6>
 800558c:	2a0b      	cmp	r2, #11
 800558e:	d916      	bls.n	80055be <_malloc_r+0xba>
 8005590:	1961      	adds	r1, r4, r5
 8005592:	42a3      	cmp	r3, r4
 8005594:	6025      	str	r5, [r4, #0]
 8005596:	bf18      	it	ne
 8005598:	6059      	strne	r1, [r3, #4]
 800559a:	6863      	ldr	r3, [r4, #4]
 800559c:	bf08      	it	eq
 800559e:	6031      	streq	r1, [r6, #0]
 80055a0:	5162      	str	r2, [r4, r5]
 80055a2:	604b      	str	r3, [r1, #4]
 80055a4:	4638      	mov	r0, r7
 80055a6:	f104 060b 	add.w	r6, r4, #11
 80055aa:	f000 f8cf 	bl	800574c <__malloc_unlock>
 80055ae:	f026 0607 	bic.w	r6, r6, #7
 80055b2:	1d23      	adds	r3, r4, #4
 80055b4:	1af2      	subs	r2, r6, r3
 80055b6:	d0b6      	beq.n	8005526 <_malloc_r+0x22>
 80055b8:	1b9b      	subs	r3, r3, r6
 80055ba:	50a3      	str	r3, [r4, r2]
 80055bc:	e7b3      	b.n	8005526 <_malloc_r+0x22>
 80055be:	6862      	ldr	r2, [r4, #4]
 80055c0:	42a3      	cmp	r3, r4
 80055c2:	bf0c      	ite	eq
 80055c4:	6032      	streq	r2, [r6, #0]
 80055c6:	605a      	strne	r2, [r3, #4]
 80055c8:	e7ec      	b.n	80055a4 <_malloc_r+0xa0>
 80055ca:	4623      	mov	r3, r4
 80055cc:	6864      	ldr	r4, [r4, #4]
 80055ce:	e7b2      	b.n	8005536 <_malloc_r+0x32>
 80055d0:	4634      	mov	r4, r6
 80055d2:	6876      	ldr	r6, [r6, #4]
 80055d4:	e7b9      	b.n	800554a <_malloc_r+0x46>
 80055d6:	230c      	movs	r3, #12
 80055d8:	603b      	str	r3, [r7, #0]
 80055da:	4638      	mov	r0, r7
 80055dc:	f000 f8b6 	bl	800574c <__malloc_unlock>
 80055e0:	e7a1      	b.n	8005526 <_malloc_r+0x22>
 80055e2:	6025      	str	r5, [r4, #0]
 80055e4:	e7de      	b.n	80055a4 <_malloc_r+0xa0>
 80055e6:	bf00      	nop
 80055e8:	20000204 	.word	0x20000204

080055ec <_sbrk_r>:
 80055ec:	b538      	push	{r3, r4, r5, lr}
 80055ee:	4d06      	ldr	r5, [pc, #24]	; (8005608 <_sbrk_r+0x1c>)
 80055f0:	2300      	movs	r3, #0
 80055f2:	4604      	mov	r4, r0
 80055f4:	4608      	mov	r0, r1
 80055f6:	602b      	str	r3, [r5, #0]
 80055f8:	f7fb fb16 	bl	8000c28 <_sbrk>
 80055fc:	1c43      	adds	r3, r0, #1
 80055fe:	d102      	bne.n	8005606 <_sbrk_r+0x1a>
 8005600:	682b      	ldr	r3, [r5, #0]
 8005602:	b103      	cbz	r3, 8005606 <_sbrk_r+0x1a>
 8005604:	6023      	str	r3, [r4, #0]
 8005606:	bd38      	pop	{r3, r4, r5, pc}
 8005608:	2000020c 	.word	0x2000020c

0800560c <__sread>:
 800560c:	b510      	push	{r4, lr}
 800560e:	460c      	mov	r4, r1
 8005610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005614:	f000 f8a0 	bl	8005758 <_read_r>
 8005618:	2800      	cmp	r0, #0
 800561a:	bfab      	itete	ge
 800561c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800561e:	89a3      	ldrhlt	r3, [r4, #12]
 8005620:	181b      	addge	r3, r3, r0
 8005622:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005626:	bfac      	ite	ge
 8005628:	6563      	strge	r3, [r4, #84]	; 0x54
 800562a:	81a3      	strhlt	r3, [r4, #12]
 800562c:	bd10      	pop	{r4, pc}

0800562e <__swrite>:
 800562e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005632:	461f      	mov	r7, r3
 8005634:	898b      	ldrh	r3, [r1, #12]
 8005636:	05db      	lsls	r3, r3, #23
 8005638:	4605      	mov	r5, r0
 800563a:	460c      	mov	r4, r1
 800563c:	4616      	mov	r6, r2
 800563e:	d505      	bpl.n	800564c <__swrite+0x1e>
 8005640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005644:	2302      	movs	r3, #2
 8005646:	2200      	movs	r2, #0
 8005648:	f000 f868 	bl	800571c <_lseek_r>
 800564c:	89a3      	ldrh	r3, [r4, #12]
 800564e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005652:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005656:	81a3      	strh	r3, [r4, #12]
 8005658:	4632      	mov	r2, r6
 800565a:	463b      	mov	r3, r7
 800565c:	4628      	mov	r0, r5
 800565e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005662:	f000 b817 	b.w	8005694 <_write_r>

08005666 <__sseek>:
 8005666:	b510      	push	{r4, lr}
 8005668:	460c      	mov	r4, r1
 800566a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800566e:	f000 f855 	bl	800571c <_lseek_r>
 8005672:	1c43      	adds	r3, r0, #1
 8005674:	89a3      	ldrh	r3, [r4, #12]
 8005676:	bf15      	itete	ne
 8005678:	6560      	strne	r0, [r4, #84]	; 0x54
 800567a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800567e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005682:	81a3      	strheq	r3, [r4, #12]
 8005684:	bf18      	it	ne
 8005686:	81a3      	strhne	r3, [r4, #12]
 8005688:	bd10      	pop	{r4, pc}

0800568a <__sclose>:
 800568a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800568e:	f000 b813 	b.w	80056b8 <_close_r>
	...

08005694 <_write_r>:
 8005694:	b538      	push	{r3, r4, r5, lr}
 8005696:	4d07      	ldr	r5, [pc, #28]	; (80056b4 <_write_r+0x20>)
 8005698:	4604      	mov	r4, r0
 800569a:	4608      	mov	r0, r1
 800569c:	4611      	mov	r1, r2
 800569e:	2200      	movs	r2, #0
 80056a0:	602a      	str	r2, [r5, #0]
 80056a2:	461a      	mov	r2, r3
 80056a4:	f7fa ff12 	bl	80004cc <_write>
 80056a8:	1c43      	adds	r3, r0, #1
 80056aa:	d102      	bne.n	80056b2 <_write_r+0x1e>
 80056ac:	682b      	ldr	r3, [r5, #0]
 80056ae:	b103      	cbz	r3, 80056b2 <_write_r+0x1e>
 80056b0:	6023      	str	r3, [r4, #0]
 80056b2:	bd38      	pop	{r3, r4, r5, pc}
 80056b4:	2000020c 	.word	0x2000020c

080056b8 <_close_r>:
 80056b8:	b538      	push	{r3, r4, r5, lr}
 80056ba:	4d06      	ldr	r5, [pc, #24]	; (80056d4 <_close_r+0x1c>)
 80056bc:	2300      	movs	r3, #0
 80056be:	4604      	mov	r4, r0
 80056c0:	4608      	mov	r0, r1
 80056c2:	602b      	str	r3, [r5, #0]
 80056c4:	f7fb fa7b 	bl	8000bbe <_close>
 80056c8:	1c43      	adds	r3, r0, #1
 80056ca:	d102      	bne.n	80056d2 <_close_r+0x1a>
 80056cc:	682b      	ldr	r3, [r5, #0]
 80056ce:	b103      	cbz	r3, 80056d2 <_close_r+0x1a>
 80056d0:	6023      	str	r3, [r4, #0]
 80056d2:	bd38      	pop	{r3, r4, r5, pc}
 80056d4:	2000020c 	.word	0x2000020c

080056d8 <_fstat_r>:
 80056d8:	b538      	push	{r3, r4, r5, lr}
 80056da:	4d07      	ldr	r5, [pc, #28]	; (80056f8 <_fstat_r+0x20>)
 80056dc:	2300      	movs	r3, #0
 80056de:	4604      	mov	r4, r0
 80056e0:	4608      	mov	r0, r1
 80056e2:	4611      	mov	r1, r2
 80056e4:	602b      	str	r3, [r5, #0]
 80056e6:	f7fb fa76 	bl	8000bd6 <_fstat>
 80056ea:	1c43      	adds	r3, r0, #1
 80056ec:	d102      	bne.n	80056f4 <_fstat_r+0x1c>
 80056ee:	682b      	ldr	r3, [r5, #0]
 80056f0:	b103      	cbz	r3, 80056f4 <_fstat_r+0x1c>
 80056f2:	6023      	str	r3, [r4, #0]
 80056f4:	bd38      	pop	{r3, r4, r5, pc}
 80056f6:	bf00      	nop
 80056f8:	2000020c 	.word	0x2000020c

080056fc <_isatty_r>:
 80056fc:	b538      	push	{r3, r4, r5, lr}
 80056fe:	4d06      	ldr	r5, [pc, #24]	; (8005718 <_isatty_r+0x1c>)
 8005700:	2300      	movs	r3, #0
 8005702:	4604      	mov	r4, r0
 8005704:	4608      	mov	r0, r1
 8005706:	602b      	str	r3, [r5, #0]
 8005708:	f7fb fa75 	bl	8000bf6 <_isatty>
 800570c:	1c43      	adds	r3, r0, #1
 800570e:	d102      	bne.n	8005716 <_isatty_r+0x1a>
 8005710:	682b      	ldr	r3, [r5, #0]
 8005712:	b103      	cbz	r3, 8005716 <_isatty_r+0x1a>
 8005714:	6023      	str	r3, [r4, #0]
 8005716:	bd38      	pop	{r3, r4, r5, pc}
 8005718:	2000020c 	.word	0x2000020c

0800571c <_lseek_r>:
 800571c:	b538      	push	{r3, r4, r5, lr}
 800571e:	4d07      	ldr	r5, [pc, #28]	; (800573c <_lseek_r+0x20>)
 8005720:	4604      	mov	r4, r0
 8005722:	4608      	mov	r0, r1
 8005724:	4611      	mov	r1, r2
 8005726:	2200      	movs	r2, #0
 8005728:	602a      	str	r2, [r5, #0]
 800572a:	461a      	mov	r2, r3
 800572c:	f7fb fa6e 	bl	8000c0c <_lseek>
 8005730:	1c43      	adds	r3, r0, #1
 8005732:	d102      	bne.n	800573a <_lseek_r+0x1e>
 8005734:	682b      	ldr	r3, [r5, #0]
 8005736:	b103      	cbz	r3, 800573a <_lseek_r+0x1e>
 8005738:	6023      	str	r3, [r4, #0]
 800573a:	bd38      	pop	{r3, r4, r5, pc}
 800573c:	2000020c 	.word	0x2000020c

08005740 <__malloc_lock>:
 8005740:	4801      	ldr	r0, [pc, #4]	; (8005748 <__malloc_lock+0x8>)
 8005742:	f7ff be0b 	b.w	800535c <__retarget_lock_acquire_recursive>
 8005746:	bf00      	nop
 8005748:	20000200 	.word	0x20000200

0800574c <__malloc_unlock>:
 800574c:	4801      	ldr	r0, [pc, #4]	; (8005754 <__malloc_unlock+0x8>)
 800574e:	f7ff be06 	b.w	800535e <__retarget_lock_release_recursive>
 8005752:	bf00      	nop
 8005754:	20000200 	.word	0x20000200

08005758 <_read_r>:
 8005758:	b538      	push	{r3, r4, r5, lr}
 800575a:	4d07      	ldr	r5, [pc, #28]	; (8005778 <_read_r+0x20>)
 800575c:	4604      	mov	r4, r0
 800575e:	4608      	mov	r0, r1
 8005760:	4611      	mov	r1, r2
 8005762:	2200      	movs	r2, #0
 8005764:	602a      	str	r2, [r5, #0]
 8005766:	461a      	mov	r2, r3
 8005768:	f7fb fa0c 	bl	8000b84 <_read>
 800576c:	1c43      	adds	r3, r0, #1
 800576e:	d102      	bne.n	8005776 <_read_r+0x1e>
 8005770:	682b      	ldr	r3, [r5, #0]
 8005772:	b103      	cbz	r3, 8005776 <_read_r+0x1e>
 8005774:	6023      	str	r3, [r4, #0]
 8005776:	bd38      	pop	{r3, r4, r5, pc}
 8005778:	2000020c 	.word	0x2000020c

0800577c <_init>:
 800577c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800577e:	bf00      	nop
 8005780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005782:	bc08      	pop	{r3}
 8005784:	469e      	mov	lr, r3
 8005786:	4770      	bx	lr

08005788 <_fini>:
 8005788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800578a:	bf00      	nop
 800578c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800578e:	bc08      	pop	{r3}
 8005790:	469e      	mov	lr, r3
 8005792:	4770      	bx	lr
